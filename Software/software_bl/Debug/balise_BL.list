
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fc08  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002860  0801fd48  0801fd48  00020d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080225a8  080225a8  000235a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080225b0  080225b0  000235b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080225b4  080225b4  000235b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  080225b8  00024008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  20000320  080228d0  00024320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000360  0802290d  00024360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e7c  20000378  0802291e  00024378  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200031f4  0802291e  000251f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00026000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00026000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0802291e  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004c6c1  00000000  00000000  00025a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a4b5  00000000  00000000  00072158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f30  00000000  00000000  0007c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003065  00000000  00000000  00080540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001593f  00000000  00000000  000835a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00054ba4  00000000  00000000  00098ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e77f  00000000  00000000  000eda88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020c207  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000123b8  00000000  00000000  0020c24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  0021e604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000378 	.word	0x20000378
 800015c:	00000000 	.word	0x00000000
 8000160:	0801fd30 	.word	0x0801fd30

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000037c 	.word	0x2000037c
 800017c:	0801fd30 	.word	0x0801fd30

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <MX_ADC1_Init+0xfc>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800100a:	2201      	movs	r2, #1
 800100c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800100e:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001010:	2203      	movs	r2, #3
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800101e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001042:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001044:	f006 fc60 	bl	8007908 <HAL_ADC_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800104e:	f001 fecf 	bl	8002df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ADC1_Init+0x100>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2306      	movs	r3, #6
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105e:	237f      	movs	r3, #127	@ 0x7f
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001062:	2304      	movs	r3, #4
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001070:	f006 fe2e 	bl	8007cd0 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f001 feb9 	bl	8002df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_ADC1_Init+0x104>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800108c:	f006 fe20 	bl	8007cd0 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001096:	f001 feab 	bl	8002df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_ADC1_Init+0x108>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109e:	2312      	movs	r3, #18
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 80010a8:	f006 fe12 	bl	8007cd0 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010b2:	f001 fe9d 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000394 	.word	0x20000394
 80010c4:	50040000 	.word	0x50040000
 80010c8:	80000001 	.word	0x80000001
 80010cc:	c7520000 	.word	0xc7520000
 80010d0:	25b00200 	.word	0x25b00200

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_ADC_MspInit+0xa8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d13e      	bne.n	8001174 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fa:	f7ff ff4b 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff48 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f008 f81b 	bl	8009154 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_ADC_MspInit+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001126:	2205      	movs	r2, #5
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800113e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800115a:	f007 fc27 	bl	80089ac <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001164:	f001 fe44 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800116c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	50040000 	.word	0x50040000
 8001180:	200003f8 	.word	0x200003f8
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8091 	bne.w	80012c0 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f996 	bl	80004d4 <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	a14a      	add	r1, pc, #296	@ (adr r1, 80012d8 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b2:	f7ff fb23 	bl	80007fc <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fceb 	bl	8000b98 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 80011c6:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f98c 	bl	80004f8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4944      	ldr	r1, [pc, #272]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011ea:	f7ff fb07 	bl	80007fc <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4690      	mov	r8, r2
 80011f4:	4699      	mov	r9, r3
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f96a 	bl	80004d4 <__aeabi_i2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f975 	bl	80004f8 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 8001214:	f7ff faf2 	bl	80007fc <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f9c2 	bl	80005a8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7fe fffb 	bl	8000238 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9ad 	bl	80005a8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2f>
 800125a:	ee07 0a10 	vmov	s14, r0
 800125e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f92f 	bl	80004d4 <__aeabi_i2d>
 8001276:	a31a      	add	r3, pc, #104	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fabe 	bl	80007fc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7fe ffd6 	bl	800023c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f92b 	bl	80004f8 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f97d 	bl	80005a8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc6f 	bl	8000b98 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x180>)
 80012be:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012c0:	2203      	movs	r2, #3
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <HAL_ADC_ConvCpltCallback+0x184>)
 80012c6:	f006 fc6b 	bl	8007ba0 <HAL_ADC_Start_DMA>



}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	d70a3d70 	.word	0xd70a3d70
 80012dc:	40b36323 	.word	0x40b36323
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40affe00 	.word	0x40affe00
 80012e8:	50040000 	.word	0x50040000
 80012ec:	20000890 	.word	0x20000890
 80012f0:	2000089c 	.word	0x2000089c
 80012f4:	20000008 	.word	0x20000008
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	40590000 	.word	0x40590000
 8001300:	40080000 	.word	0x40080000
 8001304:	20000898 	.word	0x20000898
 8001308:	200008a0 	.word	0x200008a0
 800130c:	20000394 	.word	0x20000394

08001310 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <APPD_EnableCPU2+0x34>)
 8001318:	1d3c      	adds	r4, r7, #4
 800131a:	461d      	mov	r5, r3
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001324:	c403      	stmia	r4!, {r0, r1}
 8001326:	8022      	strh	r2, [r4, #0]
 8001328:	3402      	adds	r4, #2
 800132a:	0c13      	lsrs	r3, r2, #16
 800132c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800132e:	f015 fe97 	bl	8017060 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f015 f928 	bl	801658a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800133a:	bf00      	nop
}
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	0801fd48 	.word	0x0801fd48

08001348 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4905      	ldr	r1, [pc, #20]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 800137e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001382:	4905      	ldr	r1, [pc, #20]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000800 	.word	0x58000800

0800139c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80013aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013b6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	cafecafe 	.word	0xcafecafe

080013d8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <LL_DBGMCU_GetDeviceID+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e0042000 	.word	0xe0042000

0800141c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <LL_DBGMCU_GetRevisionID+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	b29b      	uxth	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e0042000 	.word	0xe0042000

08001438 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6113      	str	r3, [r2, #16]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	22ca      	movs	r2, #202	@ 0xca
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2253      	movs	r2, #83	@ 0x53
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 0207 	bic.w	r2, r3, #7
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <MX_APPE_Config+0x18>)
 80014be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80014c4:	f000 f824 	bl	8001510 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80014c8:	f000 f829 	bl	800151e <Config_HSE>

  return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58004000 	.word	0x58004000

080014d4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014d8:	f000 f835 	bl	8001546 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014dc:	f000 f84e 	bl	800157c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <MX_APPE_Init+0x1c>)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fe4c 	bl	8002180 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014e8:	f000 f856 	bl	8001598 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014ec:	bf00      	nop
}
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000d28 	.word	0x20000d28

080014f4 <Init_Smps>:

void Init_Smps(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014f8:	bf00      	nop
}
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <Init_Exti>:

void Init_Exti(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001506:	2050      	movs	r0, #80	@ 0x50
 8001508:	f7ff ff34 	bl	8001374 <LL_EXTI_EnableIT_32_63>

  return;
 800150c:	bf00      	nop
}
 800150e:	bd80      	pop	{r7, pc}

08001510 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001514:	bf00      	nop
}
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f015 fe27 	bl	8017178 <OTP_Read>
 800152a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	799b      	ldrb	r3, [r3, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff30 	bl	800139c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800153c:	bf00      	nop
 800153e:	bf00      	nop
}
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <System_Init>:

static void System_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  Init_Smps();
 800154a:	f7ff ffd3 	bl	80014f4 <Init_Smps>

  Init_Exti();
 800154e:	f7ff ffd8 	bl	8001502 <Init_Exti>

  Init_Rtc();
 8001552:	f000 f803 	bl	800155c <Init_Rtc>

  return;
 8001556:	bf00      	nop
}
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <Init_Rtc>:

static void Init_Rtc(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <Init_Rtc+0x1c>)
 8001562:	f7ff ff86 	bl	8001472 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001566:	2100      	movs	r1, #0
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <Init_Rtc+0x1c>)
 800156a:	f7ff ff92 	bl	8001492 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <Init_Rtc+0x1c>)
 8001570:	f7ff ff72 	bl	8001458 <LL_RTC_EnableWriteProtection>

  return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40002800 	.word	0x40002800

0800157c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001580:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001584:	f7ff ff28 	bl	80013d8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001588:	f017 ff68 	bl	801945c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fedb 	bl	8001348 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001592:	bf00      	nop
}
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800159e:	f015 fba9 	bl	8016cf4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80015a2:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <appe_Tl_Init+0x50>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	2008      	movs	r0, #8
 80015a8:	f018 f896 	bl	80196d8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <appe_Tl_Init+0x54>)
 80015ae:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <appe_Tl_Init+0x58>)
 80015b2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <appe_Tl_Init+0x5c>)
 80015ba:	f015 fa5d 	bl	8016a78 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <appe_Tl_Init+0x60>)
 80015c0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <appe_Tl_Init+0x64>)
 80015c4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <appe_Tl_Init+0x68>)
 80015c8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015ca:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015ce:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f015 fccf 	bl	8016f78 <TL_MM_Init>

  TL_Enable();
 80015da:	f015 fb85 	bl	8016ce8 <TL_Enable>

  return;
 80015de:	bf00      	nop
}
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08016ab1 	.word	0x08016ab1
 80015ec:	20030734 	.word	0x20030734
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800161d 	.word	0x0800161d
 80015f8:	2003094c 	.word	0x2003094c
 80015fc:	20030840 	.word	0x20030840
 8001600:	200301f8 	.word	0x200301f8

08001604 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800160e:	bf00      	nop
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	330b      	adds	r3, #11
 800162a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001636:	2b07      	cmp	r3, #7
 8001638:	d81f      	bhi.n	800167a <APPE_SysUserEvtRx+0x5e>
 800163a:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <APPE_SysUserEvtRx+0x24>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001661 	.word	0x08001661
 8001644:	08001673 	.word	0x08001673
 8001648:	0800167b 	.word	0x0800167b
 800164c:	0800167b 	.word	0x0800167b
 8001650:	0800167b 	.word	0x0800167b
 8001654:	0800167b 	.word	0x0800167b
 8001658:	0800167b 	.word	0x0800167b
 800165c:	0800167b 	.word	0x0800167b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f014 ffbd 	bl	80165e4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f81b 	bl	80016a6 <APPE_SysEvtReadyProcessing>
    break;
 8001670:	e004      	b.n	800167c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f806 	bl	8001684 <APPE_SysEvtError>
    break;
 8001678:	e000      	b.n	800167c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800167a:	bf00      	nop
  }

  return;
 800167c:	bf00      	nop
}
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	330b      	adds	r3, #11
 8001692:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3302      	adds	r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800169a:	bf00      	nop
}
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b08a      	sub	sp, #40	@ 0x28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	330b      	adds	r3, #11
 80016ca:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11d      	bne.n	8001716 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016da:	f7ff fe19 	bl	8001310 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016de:	230f      	movs	r3, #15
 80016e0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016e2:	237f      	movs	r3, #127	@ 0x7f
 80016e4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016e6:	f7ff fe99 	bl	800141c <LL_DBGMCU_GetRevisionID>
 80016ea:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016f2:	f7ff fe85 	bl	8001400 <LL_DBGMCU_GetDeviceID>
 80016f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f014 ff58 	bl	80165b8 <SHCI_C2_Config>

    APP_BLE_Init();
 8001708:	f016 fb8a 	bl	8017e20 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f017 feb6 	bl	8019480 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001714:	e007      	b.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d103      	bne.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  return;
 8001724:	bf00      	nop
 8001726:	bf00      	nop
}
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001736:	f005 fefb 	bl	8007530 <HAL_GetTick>
 800173a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d00a      	beq.n	800175e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001748:	f005 ff0a 	bl	8007560 <HAL_GetTickFreq>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	e002      	b.n	800175e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001758:	f7ff fe6e 	bl	8001438 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800175c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	f005 fee7 	bl	8007530 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f4      	bhi.n	8001758 <HAL_Delay+0x2a>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f017 feae 	bl	80194e0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800178c:	bf00      	nop
}
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f017 fe9c 	bl	80194e0 <UTIL_SEQ_Run>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2008      	movs	r0, #8
 80017bc:	f017 ffae 	bl	801971c <UTIL_SEQ_SetTask>
  return;
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f018 f80f 	bl	80197f4 <UTIL_SEQ_SetEvt>
  return;
 80017d6:	bf00      	nop
}
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f018 f824 	bl	8019834 <UTIL_SEQ_WaitEvt>
  return;
 80017ec:	bf00      	nop
}
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <LL_AHB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800182a:	2004      	movs	r0, #4
 800182c:	f7ff ffe2 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff ffdf 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2104      	movs	r1, #4
 800183a:	200b      	movs	r0, #11
 800183c:	f007 f857 	bl	80088ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001840:	200b      	movs	r0, #11
 8001842:	f007 f86e 	bl	8008922 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2102      	movs	r1, #2
 800184a:	200c      	movs	r0, #12
 800184c:	f007 f84f 	bl	80088ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001850:	200c      	movs	r0, #12
 8001852:	f007 f866 	bl	8008922 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2103      	movs	r1, #3
 800185a:	200d      	movs	r0, #13
 800185c:	f007 f847 	bl	80088ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001860:	200d      	movs	r0, #13
 8001862:	f007 f85e 	bl	8008922 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2103      	movs	r1, #3
 800186a:	200e      	movs	r0, #14
 800186c:	f007 f83f 	bl	80088ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001870:	200e      	movs	r0, #14
 8001872:	f007 f856 	bl	8008922 <HAL_NVIC_EnableIRQ>

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <LL_AHB2_GRP1_EnableClock>:
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4313      	orrs	r3, r2
 8001890:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4013      	ands	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2004      	movs	r0, #4
 80018c2:	f7ff ffda 	bl	800187a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7ff ffd7 	bl	800187a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff ffd4 	bl	800187a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018da:	f007 fea1 	bl	8009620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2183      	movs	r1, #131	@ 0x83
 80018e2:	481b      	ldr	r0, [pc, #108]	@ (8001950 <MX_GPIO_Init+0xa4>)
 80018e4:	f007 fe9c 	bl	8009620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018e8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4815      	ldr	r0, [pc, #84]	@ (8001954 <MX_GPIO_Init+0xa8>)
 80018fe:	f007 fc29 	bl	8009154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001902:	2301      	movs	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191a:	f007 fc1b 	bl	8009154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 800191e:	2383      	movs	r3, #131	@ 0x83
 8001920:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	@ (8001950 <MX_GPIO_Init+0xa4>)
 8001934:	f007 fc0e 	bl	8009154 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2101      	movs	r1, #1
 800193c:	2028      	movs	r0, #40	@ 0x28
 800193e:	f006 ffd6 	bl	80088ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001942:	2028      	movs	r0, #40	@ 0x28
 8001944:	f006 ffed 	bl	8008922 <HAL_NVIC_EnableIRQ>

}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000400 	.word	0x48000400
 8001954:	48000800 	.word	0x48000800

08001958 <LL_EXTI_EnableIT_0_31>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <LL_EXTI_EnableIT_0_31+0x24>)
 8001962:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001966:	4905      	ldr	r1, [pc, #20]	@ (800197c <LL_EXTI_EnableIT_0_31+0x24>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	58000800 	.word	0x58000800

08001980 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4904      	ldr	r1, [pc, #16]	@ (80019a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]

}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	58000800 	.word	0x58000800

080019a4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80019ba:	e005      	b.n	80019c8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019c0:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1f5      	bne.n	80019bc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80019d0:	683b      	ldr	r3, [r7, #0]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40002800 	.word	0x40002800

080019e4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	460a      	mov	r2, r1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	4613      	mov	r3, r2
 80019f2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80019f4:	79ba      	ldrb	r2, [r7, #6]
 80019f6:	491d      	ldr	r1, [pc, #116]	@ (8001a6c <LinkTimerAfter+0x88>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	3315      	adds	r3, #21
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d009      	beq.n	8001a22 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3314      	adds	r3, #20
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001a22:	79fa      	ldrb	r2, [r7, #7]
 8001a24:	4911      	ldr	r1, [pc, #68]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3315      	adds	r3, #21
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	3314      	adds	r3, #20
 8001a46:	79ba      	ldrb	r2, [r7, #6]
 8001a48:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a4a:	79ba      	ldrb	r2, [r7, #6]
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	3315      	adds	r3, #21
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	701a      	strb	r2, [r3, #0]

  return;
 8001a5e:	bf00      	nop
}
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000458 	.word	0x20000458

08001a70 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <LinkTimerBefore+0xb8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	79ba      	ldrb	r2, [r7, #6]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d032      	beq.n	8001af2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a8c:	79ba      	ldrb	r2, [r7, #6]
 8001a8e:	4927      	ldr	r1, [pc, #156]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3314      	adds	r3, #20
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	4922      	ldr	r1, [pc, #136]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3315      	adds	r3, #21
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	491d      	ldr	r1, [pc, #116]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3315      	adds	r3, #21
 8001ac4:	79ba      	ldrb	r2, [r7, #6]
 8001ac6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	4918      	ldr	r1, [pc, #96]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3314      	adds	r3, #20
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001adc:	79ba      	ldrb	r2, [r7, #6]
 8001ade:	4913      	ldr	r1, [pc, #76]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3314      	adds	r3, #20
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001af0:	e014      	b.n	8001b1c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	3315      	adds	r3, #21
 8001b02:	79ba      	ldrb	r2, [r7, #6]
 8001b04:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001b06:	79ba      	ldrb	r2, [r7, #6]
 8001b08:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	3314      	adds	r3, #20
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	701a      	strb	r2, [r3, #0]
  return;
 8001b1a:	bf00      	nop
}
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200004e8 	.word	0x200004e8
 8001b2c:	20000458 	.word	0x20000458

08001b30 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c74 <linkTimer+0x144>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b06      	cmp	r3, #6
 8001b42:	d118      	bne.n	8001b76 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b44:	4b4b      	ldr	r3, [pc, #300]	@ (8001c74 <linkTimer+0x144>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <linkTimer+0x148>)
 8001b4c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b4e:	4a49      	ldr	r2, [pc, #292]	@ (8001c74 <linkTimer+0x144>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b54:	79fa      	ldrb	r2, [r7, #7]
 8001b56:	4949      	ldr	r1, [pc, #292]	@ (8001c7c <linkTimer+0x14c>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	3315      	adds	r3, #21
 8001b64:	2206      	movs	r2, #6
 8001b66:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b68:	4b45      	ldr	r3, [pc, #276]	@ (8001c80 <linkTimer+0x150>)
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	81fb      	strh	r3, [r7, #14]
 8001b74:	e078      	b.n	8001c68 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b76:	f000 f909 	bl	8001d8c <ReturnTimeElapsed>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	493e      	ldr	r1, [pc, #248]	@ (8001c7c <linkTimer+0x14c>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	79fa      	ldrb	r2, [r7, #7]
 8001b94:	4419      	add	r1, r3
 8001b96:	4839      	ldr	r0, [pc, #228]	@ (8001c7c <linkTimer+0x14c>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4403      	add	r3, r0
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	4934      	ldr	r1, [pc, #208]	@ (8001c7c <linkTimer+0x14c>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <linkTimer+0x144>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c7c <linkTimer+0x14c>)
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	440b      	add	r3, r1
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3308      	adds	r3, #8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d337      	bcc.n	8001c48 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <linkTimer+0x144>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001bde:	7b7a      	ldrb	r2, [r7, #13]
 8001be0:	4926      	ldr	r1, [pc, #152]	@ (8001c7c <linkTimer+0x14c>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3315      	adds	r3, #21
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001bf2:	e013      	b.n	8001c1c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001bf4:	7b7a      	ldrb	r2, [r7, #13]
 8001bf6:	4921      	ldr	r1, [pc, #132]	@ (8001c7c <linkTimer+0x14c>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3315      	adds	r3, #21
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001c08:	7b7a      	ldrb	r2, [r7, #13]
 8001c0a:	491c      	ldr	r1, [pc, #112]	@ (8001c7c <linkTimer+0x14c>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3315      	adds	r3, #21
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c1c:	7b3b      	ldrb	r3, [r7, #12]
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d00b      	beq.n	8001c3a <linkTimer+0x10a>
 8001c22:	7b3a      	ldrb	r2, [r7, #12]
 8001c24:	4915      	ldr	r1, [pc, #84]	@ (8001c7c <linkTimer+0x14c>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	3308      	adds	r3, #8
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d2dc      	bcs.n	8001bf4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001c3a:	7b7a      	ldrb	r2, [r7, #13]
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fecf 	bl	80019e4 <LinkTimerAfter>
 8001c46:	e00f      	b.n	8001c68 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <linkTimer+0x144>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff0c 	bl	8001a70 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <linkTimer+0x144>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <linkTimer+0x148>)
 8001c60:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <linkTimer+0x144>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c68:	89fb      	ldrh	r3, [r7, #14]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200004e8 	.word	0x200004e8
 8001c78:	200004e9 	.word	0x200004e9
 8001c7c:	20000458 	.word	0x20000458
 8001c80:	200004ec 	.word	0x200004ec

08001c84 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001c94:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d111      	bne.n	8001cc4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ca0:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <UnlinkTimer+0xfc>)
 8001ca8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	4935      	ldr	r1, [pc, #212]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3315      	adds	r3, #21
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e03e      	b.n	8001d42 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001cc4:	79fa      	ldrb	r2, [r7, #7]
 8001cc6:	492f      	ldr	r1, [pc, #188]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3314      	adds	r3, #20
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	492a      	ldr	r1, [pc, #168]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3315      	adds	r3, #21
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001cec:	79f9      	ldrb	r1, [r7, #7]
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	4824      	ldr	r0, [pc, #144]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	440b      	add	r3, r1
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4403      	add	r3, r0
 8001cfc:	3315      	adds	r3, #21
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2d8      	uxtb	r0, r3
 8001d02:	4920      	ldr	r1, [pc, #128]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3315      	adds	r3, #21
 8001d10:	4602      	mov	r2, r0
 8001d12:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d013      	beq.n	8001d42 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001d1a:	79f9      	ldrb	r1, [r7, #7]
 8001d1c:	7bba      	ldrb	r2, [r7, #14]
 8001d1e:	4819      	ldr	r0, [pc, #100]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d20:	460b      	mov	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4403      	add	r3, r0
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2d8      	uxtb	r0, r3
 8001d30:	4914      	ldr	r1, [pc, #80]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3314      	adds	r3, #20
 8001d3e:	4602      	mov	r2, r0
 8001d40:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	490f      	ldr	r1, [pc, #60]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	330c      	adds	r3, #12
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b06      	cmp	r3, #6
 8001d5e:	d107      	bne.n	8001d70 <UnlinkTimer+0xec>
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d104      	bne.n	8001d70 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <UnlinkTimer+0x104>)
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
}
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	200004e8 	.word	0x200004e8
 8001d80:	200004e9 	.word	0x200004e9
 8001d84:	20000458 	.word	0x20000458
 8001d88:	200004ec 	.word	0x200004ec

08001d8c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d026      	beq.n	8001dea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001d9c:	f7ff fe02 	bl	80019a4 <ReadRtcSsrValue>
 8001da0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d805      	bhi.n	8001db8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e00a      	b.n	8001dce <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <ReturnTimeElapsed+0x74>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <ReturnTimeElapsed+0x78>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <ReturnTimeElapsed+0x7c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	40d3      	lsrs	r3, r2
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	e001      	b.n	8001dee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	b29b      	uxth	r3, r3
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200004ec 	.word	0x200004ec
 8001e00:	200004f4 	.word	0x200004f4
 8001e04:	200004f2 	.word	0x200004f2
 8001e08:	200004f1 	.word	0x200004f1

08001e0c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d108      	bne.n	8001e2e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e1c:	f7ff fdc2 	bl	80019a4 <ReadRtcSsrValue>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <RestartWakeupCounter+0x9c>)
 8001e24:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e26:	2003      	movs	r0, #3
 8001e28:	f006 fda3 	bl	8008972 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001e2c:	e039      	b.n	8001ea2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d803      	bhi.n	8001e3c <RestartWakeupCounter+0x30>
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <RestartWakeupCounter+0xa0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d002      	beq.n	8001e42 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e42:	bf00      	nop
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f8      	beq.n	8001e44 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e62:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <RestartWakeupCounter+0xa8>)
 8001e66:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e6a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f006 fd8e 	bl	800898e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <RestartWakeupCounter+0xac>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	490e      	ldr	r1, [pc, #56]	@ (8001eb8 <RestartWakeupCounter+0xac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e82:	f7ff fd8f 	bl	80019a4 <ReadRtcSsrValue>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <RestartWakeupCounter+0x9c>)
 8001e8a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e9a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001e9c:	f3af 8000 	nop.w
  return ;
 8001ea0:	bf00      	nop
}
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200004ec 	.word	0x200004ec
 8001eac:	200004f1 	.word	0x200004f1
 8001eb0:	20000d28 	.word	0x20000d28
 8001eb4:	58000800 	.word	0x58000800
 8001eb8:	40002800 	.word	0x40002800

08001ebc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ec2:	4b45      	ldr	r3, [pc, #276]	@ (8001fd8 <RescheduleTimerList+0x11c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ece:	d107      	bne.n	8001ee0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ed0:	bf00      	nop
 8001ed2:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f8      	bne.n	8001ed2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eee:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <RescheduleTimerList+0x124>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	493a      	ldr	r1, [pc, #232]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3308      	adds	r3, #8
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001f0a:	f7ff ff3f 	bl	8001d8c <ReturnTimeElapsed>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d205      	bcs.n	8001f26 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f1e:	4b32      	ldr	r3, [pc, #200]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e04d      	b.n	8001fc2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4a30      	ldr	r2, [pc, #192]	@ (8001fec <RescheduleTimerList+0x130>)
 8001f2a:	8812      	ldrh	r2, [r2, #0]
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	4413      	add	r3, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d906      	bls.n	8001f46 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <RescheduleTimerList+0x130>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e03d      	b.n	8001fc2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f50:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f56:	e034      	b.n	8001fc2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	4922      	ldr	r1, [pc, #136]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	3308      	adds	r3, #8
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d20a      	bcs.n	8001f86 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	491c      	ldr	r1, [pc, #112]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3308      	adds	r3, #8
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e013      	b.n	8001fae <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	4916      	ldr	r1, [pc, #88]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	3308      	adds	r3, #8
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	1ac9      	subs	r1, r1, r3
 8001f9e:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4403      	add	r3, r0
 8001faa:	3308      	adds	r3, #8
 8001fac:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	3315      	adds	r3, #21
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b06      	cmp	r3, #6
 8001fc6:	d1c7      	bne.n	8001f58 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff1e 	bl	8001e0c <RestartWakeupCounter>

  return ;
 8001fd0:	bf00      	nop
}
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40002800 	.word	0x40002800
 8001fdc:	20000d28 	.word	0x20000d28
 8001fe0:	200004e8 	.word	0x200004e8
 8001fe4:	20000458 	.word	0x20000458
 8001fe8:	200004f0 	.word	0x200004f0
 8001fec:	200004f6 	.word	0x200004f6

08001ff0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffa:	617b      	str	r3, [r7, #20]
  return(result);
 8001ffc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002004:	4b59      	ldr	r3, [pc, #356]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	22ca      	movs	r2, #202	@ 0xca
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24
 800200c:	4b57      	ldr	r3, [pc, #348]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2253      	movs	r2, #83	@ 0x53
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002014:	4b55      	ldr	r3, [pc, #340]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002022:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002024:	4b52      	ldr	r3, [pc, #328]	@ (8002170 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800202c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002030:	4950      	ldr	r1, [pc, #320]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	330c      	adds	r3, #12
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d16e      	bne.n	8002124 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002046:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800204a:	494a      	ldr	r1, [pc, #296]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800205a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800205e:	4945      	ldr	r1, [pc, #276]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3310      	adds	r3, #16
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002070:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d04c      	beq.n	8002114 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800207a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800207e:	493d      	ldr	r1, [pc, #244]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	330d      	adds	r3, #13
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d124      	bne.n	80020de <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fdf2 	bl	8001c84 <UnlinkTimer>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f383 8810 	msr	PRIMASK, r3
}
 80020aa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80020ac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020b0:	4930      	ldr	r1, [pc, #192]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	3304      	adds	r3, #4
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fa32 	bl	8002530 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	22ca      	movs	r2, #202	@ 0xca
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80020d4:	4b25      	ldr	r3, [pc, #148]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2253      	movs	r2, #83	@ 0x53
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
 80020dc:	e012      	b.n	8002104 <HW_TS_RTC_Wakeup_Handler+0x114>
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f383 8810 	msr	PRIMASK, r3
}
 80020e8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80020ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f99a 	bl	8002428 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	22ca      	movs	r2, #202	@ 0xca
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2253      	movs	r2, #83	@ 0x53
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	4619      	mov	r1, r3
 800210c:	69b8      	ldr	r0, [r7, #24]
 800210e:	f000 fa95 	bl	800263c <HW_TS_RTC_Int_AppNot>
 8002112:	e022      	b.n	800215a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002114:	f7ff fed2 	bl	8001ebc <RescheduleTimerList>
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f383 8810 	msr	PRIMASK, r3
}
 8002122:	e01a      	b.n	800215a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002124:	bf00      	nop
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f8      	beq.n	8002126 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002134:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002144:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002148:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f383 8810 	msr	PRIMASK, r3
}
 8002158:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	22ff      	movs	r2, #255	@ 0xff
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002162:	bf00      	nop
}
 8002164:	3728      	adds	r7, #40	@ 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000d28 	.word	0x20000d28
 8002170:	200004e8 	.word	0x200004e8
 8002174:	20000458 	.word	0x20000458
 8002178:	200004f0 	.word	0x200004f0
 800217c:	58000800 	.word	0x58000800

08002180 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800218c:	4b5e      	ldr	r3, [pc, #376]	@ (8002308 <HW_TS_Init+0x188>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	22ca      	movs	r2, #202	@ 0xca
 8002192:	625a      	str	r2, [r3, #36]	@ 0x24
 8002194:	4b5c      	ldr	r3, [pc, #368]	@ (8002308 <HW_TS_Init+0x188>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2253      	movs	r2, #83	@ 0x53
 800219a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800219c:	4b5b      	ldr	r3, [pc, #364]	@ (800230c <HW_TS_Init+0x18c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a5a      	ldr	r2, [pc, #360]	@ (800230c <HW_TS_Init+0x18c>)
 80021a2:	f043 0320 	orr.w	r3, r3, #32
 80021a6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80021a8:	4b58      	ldr	r3, [pc, #352]	@ (800230c <HW_TS_Init+0x18c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f1c3 0304 	rsb	r3, r3, #4
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b55      	ldr	r3, [pc, #340]	@ (8002310 <HW_TS_Init+0x190>)
 80021bc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80021be:	4b53      	ldr	r3, [pc, #332]	@ (800230c <HW_TS_Init+0x18c>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021c6:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80021ca:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	fa92 f2a2 	rbit	r2, r2
 80021d2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	2a00      	cmp	r2, #0
 80021dc:	d101      	bne.n	80021e2 <HW_TS_Init+0x62>
  {
    return 32U;
 80021de:	2220      	movs	r2, #32
 80021e0:	e003      	b.n	80021ea <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	40d3      	lsrs	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3301      	adds	r3, #1
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b48      	ldr	r3, [pc, #288]	@ (8002314 <HW_TS_Init+0x194>)
 80021f4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80021f6:	4b45      	ldr	r3, [pc, #276]	@ (800230c <HW_TS_Init+0x18c>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002200:	b29b      	uxth	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <HW_TS_Init+0x198>)
 8002208:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800220a:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <HW_TS_Init+0x198>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	4a40      	ldr	r2, [pc, #256]	@ (8002314 <HW_TS_Init+0x194>)
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800221c:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <HW_TS_Init+0x190>)
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	40d3      	lsrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800222a:	4293      	cmp	r3, r2
 800222c:	d904      	bls.n	8002238 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HW_TS_Init+0x19c>)
 8002230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e003      	b.n	8002240 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b37      	ldr	r3, [pc, #220]	@ (800231c <HW_TS_Init+0x19c>)
 800223e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002240:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002244:	f7ff fb9c 	bl	8001980 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002248:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800224c:	f7ff fb84 	bl	8001958 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d13d      	bne.n	80022d2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002256:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <HW_TS_Init+0x1a0>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800225c:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <HW_TS_Init+0x1a4>)
 800225e:	f04f 32ff 	mov.w	r2, #4294967295
 8002262:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002264:	2300      	movs	r3, #0
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	e00c      	b.n	8002284 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800226a:	7ffa      	ldrb	r2, [r7, #31]
 800226c:	492e      	ldr	r1, [pc, #184]	@ (8002328 <HW_TS_Init+0x1a8>)
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	330c      	adds	r3, #12
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	3301      	adds	r3, #1
 8002282:	77fb      	strb	r3, [r7, #31]
 8002284:	7ffb      	ldrb	r3, [r7, #31]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d9ef      	bls.n	800226a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800228a:	4b28      	ldr	r3, [pc, #160]	@ (800232c <HW_TS_Init+0x1ac>)
 800228c:	2206      	movs	r2, #6
 800228e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HW_TS_Init+0x188>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HW_TS_Init+0x188>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800229e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HW_TS_Init+0x188>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HW_TS_Init+0x188>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80022b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HW_TS_Init+0x1b0>)
 80022b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022b8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80022ba:	2003      	movs	r0, #3
 80022bc:	f006 fb67 	bl	800898e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HW_TS_Init+0x188>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HW_TS_Init+0x188>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	e009      	b.n	80022e6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HW_TS_Init+0x188>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80022e0:	2003      	movs	r0, #3
 80022e2:	f006 fb46 	bl	8008972 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HW_TS_Init+0x188>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	22ff      	movs	r2, #255	@ 0xff
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80022ee:	2200      	movs	r2, #0
 80022f0:	2103      	movs	r1, #3
 80022f2:	2003      	movs	r0, #3
 80022f4:	f006 fafb 	bl	80088ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022f8:	2003      	movs	r0, #3
 80022fa:	f006 fb12 	bl	8008922 <HAL_NVIC_EnableIRQ>

  return;
 80022fe:	bf00      	nop
}
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000d28 	.word	0x20000d28
 800230c:	40002800 	.word	0x40002800
 8002310:	200004f1 	.word	0x200004f1
 8002314:	200004f2 	.word	0x200004f2
 8002318:	200004f4 	.word	0x200004f4
 800231c:	200004f6 	.word	0x200004f6
 8002320:	200004f0 	.word	0x200004f0
 8002324:	200004ec 	.word	0x200004ec
 8002328:	20000458 	.word	0x20000458
 800232c:	200004e8 	.word	0x200004e8
 8002330:	58000800 	.word	0x58000800

08002334 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002334:	b480      	push	{r7}
 8002336:	b08b      	sub	sp, #44	@ 0x2c
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800234a:	f3ef 8310 	mrs	r3, PRIMASK
 800234e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002350:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002352:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002358:	e004      	b.n	8002364 <HW_TS_Create+0x30>
  {
    loop++;
 800235a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800235e:	3301      	adds	r3, #1
 8002360:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002368:	2b05      	cmp	r3, #5
 800236a:	d80c      	bhi.n	8002386 <HW_TS_Create+0x52>
 800236c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002370:	492c      	ldr	r1, [pc, #176]	@ (8002424 <HW_TS_Create+0xf0>)
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	330c      	adds	r3, #12
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1e9      	bne.n	800235a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002386:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800238a:	2b06      	cmp	r3, #6
 800238c:	d038      	beq.n	8002400 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800238e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002392:	4924      	ldr	r1, [pc, #144]	@ (8002424 <HW_TS_Create+0xf0>)
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	330c      	adds	r3, #12
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	f383 8810 	msr	PRIMASK, r3
}
 80023ae:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80023b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023b4:	491b      	ldr	r1, [pc, #108]	@ (8002424 <HW_TS_Create+0xf0>)
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	3310      	adds	r3, #16
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80023c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023ca:	4916      	ldr	r1, [pc, #88]	@ (8002424 <HW_TS_Create+0xf0>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	330d      	adds	r3, #13
 80023d8:	79fa      	ldrb	r2, [r7, #7]
 80023da:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80023dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023e0:	4910      	ldr	r1, [pc, #64]	@ (8002424 <HW_TS_Create+0xf0>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023f6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80023fe:	e008      	b.n	8002412 <HW_TS_Create+0xde>
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f383 8810 	msr	PRIMASK, r3
}
 800240a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8002412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002416:	4618      	mov	r0, r3
 8002418:	372c      	adds	r7, #44	@ 0x2c
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000458 	.word	0x20000458

08002428 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002432:	f3ef 8310 	mrs	r3, PRIMASK
 8002436:	60fb      	str	r3, [r7, #12]
  return(result);
 8002438:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800243a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800243c:	b672      	cpsid	i
}
 800243e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002440:	2003      	movs	r0, #3
 8002442:	f006 fa7c 	bl	800893e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002446:	4b34      	ldr	r3, [pc, #208]	@ (8002518 <HW_TS_Stop+0xf0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	22ca      	movs	r2, #202	@ 0xca
 800244c:	625a      	str	r2, [r3, #36]	@ 0x24
 800244e:	4b32      	ldr	r3, [pc, #200]	@ (8002518 <HW_TS_Stop+0xf0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2253      	movs	r2, #83	@ 0x53
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002456:	79fa      	ldrb	r2, [r7, #7]
 8002458:	4930      	ldr	r1, [pc, #192]	@ (800251c <HW_TS_Stop+0xf4>)
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	330c      	adds	r3, #12
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d142      	bne.n	80024f4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fc06 	bl	8001c84 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002478:	4b29      	ldr	r3, [pc, #164]	@ (8002520 <HW_TS_Stop+0xf8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	2b06      	cmp	r3, #6
 8002482:	d12f      	bne.n	80024e4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002484:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <HW_TS_Stop+0xfc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002490:	d107      	bne.n	80024a2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002492:	bf00      	nop
 8002494:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HW_TS_Stop+0xf0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f8      	bne.n	8002494 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80024a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HW_TS_Stop+0xf0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <HW_TS_Stop+0xf0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024b2:	bf00      	nop
 80024b4:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <HW_TS_Stop+0xf0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f8      	beq.n	80024b4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024c2:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <HW_TS_Stop+0xf0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <HW_TS_Stop+0xf0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80024d2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <HW_TS_Stop+0x100>)
 80024d6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024da:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80024dc:	2003      	movs	r0, #3
 80024de:	f006 fa56 	bl	800898e <HAL_NVIC_ClearPendingIRQ>
 80024e2:	e007      	b.n	80024f4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <HW_TS_Stop+0x104>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	7cfa      	ldrb	r2, [r7, #19]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80024f0:	f7ff fce4 	bl	8001ebc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HW_TS_Stop+0xf0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	22ff      	movs	r2, #255	@ 0xff
 80024fa:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024fc:	2003      	movs	r0, #3
 80024fe:	f006 fa10 	bl	8008922 <HAL_NVIC_EnableIRQ>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f383 8810 	msr	PRIMASK, r3
}
 800250c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800250e:	bf00      	nop
}
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000d28 	.word	0x20000d28
 800251c:	20000458 	.word	0x20000458
 8002520:	200004e8 	.word	0x200004e8
 8002524:	40002800 	.word	0x40002800
 8002528:	58000800 	.word	0x58000800
 800252c:	200004e9 	.word	0x200004e9

08002530 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	493b      	ldr	r1, [pc, #236]	@ (800262c <HW_TS_Start+0xfc>)
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	330c      	adds	r3, #12
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d103      	bne.n	800255c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff66 	bl	8002428 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800255c:	f3ef 8310 	mrs	r3, PRIMASK
 8002560:	60fb      	str	r3, [r7, #12]
  return(result);
 8002562:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002564:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002566:	b672      	cpsid	i
}
 8002568:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800256a:	2003      	movs	r0, #3
 800256c:	f006 f9e7 	bl	800893e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002570:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <HW_TS_Start+0x100>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	22ca      	movs	r2, #202	@ 0xca
 8002576:	625a      	str	r2, [r3, #36]	@ 0x24
 8002578:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <HW_TS_Start+0x100>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2253      	movs	r2, #83	@ 0x53
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002580:	79fa      	ldrb	r2, [r7, #7]
 8002582:	492a      	ldr	r1, [pc, #168]	@ (800262c <HW_TS_Start+0xfc>)
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	330c      	adds	r3, #12
 8002590:	2202      	movs	r2, #2
 8002592:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002594:	79fa      	ldrb	r2, [r7, #7]
 8002596:	4925      	ldr	r1, [pc, #148]	@ (800262c <HW_TS_Start+0xfc>)
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	3308      	adds	r3, #8
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80025a8:	79fa      	ldrb	r2, [r7, #7]
 80025aa:	4920      	ldr	r1, [pc, #128]	@ (800262c <HW_TS_Start+0xfc>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	3304      	adds	r3, #4
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fab6 	bl	8001b30 <linkTimer>
 80025c4:	4603      	mov	r3, r0
 80025c6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80025c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <HW_TS_Start+0x104>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <HW_TS_Start+0x108>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	7c7a      	ldrb	r2, [r7, #17]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d002      	beq.n	80025e0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80025da:	f7ff fc6f 	bl	8001ebc <RescheduleTimerList>
 80025de:	e013      	b.n	8002608 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	4912      	ldr	r1, [pc, #72]	@ (800262c <HW_TS_Start+0xfc>)
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3308      	adds	r3, #8
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	8a7b      	ldrh	r3, [r7, #18]
 80025f4:	79fa      	ldrb	r2, [r7, #7]
 80025f6:	1ac9      	subs	r1, r1, r3
 80025f8:	480c      	ldr	r0, [pc, #48]	@ (800262c <HW_TS_Start+0xfc>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4403      	add	r3, r0
 8002604:	3308      	adds	r3, #8
 8002606:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002608:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <HW_TS_Start+0x100>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	22ff      	movs	r2, #255	@ 0xff
 800260e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002610:	2003      	movs	r0, #3
 8002612:	f006 f986 	bl	8008922 <HAL_NVIC_EnableIRQ>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f383 8810 	msr	PRIMASK, r3
}
 8002620:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002622:	bf00      	nop
}
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000458 	.word	0x20000458
 8002630:	20000d28 	.word	0x20000d28
 8002634:	200004e8 	.word	0x200004e8
 8002638:	200004e9 	.word	0x200004e9

0800263c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	460b      	mov	r3, r1
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4798      	blx	r3

  return;
 800264e:	bf00      	nop
}
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <LL_AHB2_GRP1_EnableClock>:
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002662:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002664:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4313      	orrs	r3, r2
 800266c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4013      	ands	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002694:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4313      	orrs	r3, r2
 800269e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ac:	68fb      	ldr	r3, [r7, #12]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026d0:	4013      	ands	r3, r2
 80026d2:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002754 <MX_I2C1_Init+0x74>)
 80026e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002758 <MX_I2C1_Init+0x78>)
 80026e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80026ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <MX_I2C1_Init+0x74>)
 80026ec:	4a1b      	ldr	r2, [pc, #108]	@ (800275c <MX_I2C1_Init+0x7c>)
 80026ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026f0:	4b18      	ldr	r3, [pc, #96]	@ (8002754 <MX_I2C1_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f6:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <MX_I2C1_Init+0x74>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026fc:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <MX_I2C1_Init+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002702:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <MX_I2C1_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <MX_I2C1_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <MX_I2C1_Init+0x74>)
 8002710:	2200      	movs	r2, #0
 8002712:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002714:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <MX_I2C1_Init+0x74>)
 8002716:	2200      	movs	r2, #0
 8002718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800271a:	480e      	ldr	r0, [pc, #56]	@ (8002754 <MX_I2C1_Init+0x74>)
 800271c:	f006 ffee 	bl	80096fc <HAL_I2C_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002726:	f000 fb63 	bl	8002df0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800272a:	2100      	movs	r1, #0
 800272c:	4809      	ldr	r0, [pc, #36]	@ (8002754 <MX_I2C1_Init+0x74>)
 800272e:	f007 fc31 	bl	8009f94 <HAL_I2CEx_ConfigAnalogFilter>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002738:	f000 fb5a 	bl	8002df0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800273c:	2100      	movs	r1, #0
 800273e:	4805      	ldr	r0, [pc, #20]	@ (8002754 <MX_I2C1_Init+0x74>)
 8002740:	f007 fc73 	bl	800a02a <HAL_I2CEx_ConfigDigitalFilter>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800274a:	f000 fb51 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200004f8 	.word	0x200004f8
 8002758:	40005400 	.word	0x40005400
 800275c:	10707dbc 	.word	0x10707dbc

08002760 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <MX_I2C3_Init+0x7c>)
 8002766:	4a1e      	ldr	r2, [pc, #120]	@ (80027e0 <MX_I2C3_Init+0x80>)
 8002768:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300B29;
 800276a:	4b1c      	ldr	r3, [pc, #112]	@ (80027dc <MX_I2C3_Init+0x7c>)
 800276c:	4a1d      	ldr	r2, [pc, #116]	@ (80027e4 <MX_I2C3_Init+0x84>)
 800276e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002770:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <MX_I2C3_Init+0x7c>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002776:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <MX_I2C3_Init+0x7c>)
 8002778:	2201      	movs	r2, #1
 800277a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800277c:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <MX_I2C3_Init+0x7c>)
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <MX_I2C3_Init+0x7c>)
 8002784:	2200      	movs	r2, #0
 8002786:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002788:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <MX_I2C3_Init+0x7c>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800278e:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <MX_I2C3_Init+0x7c>)
 8002790:	2200      	movs	r2, #0
 8002792:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <MX_I2C3_Init+0x7c>)
 8002796:	2200      	movs	r2, #0
 8002798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800279a:	4810      	ldr	r0, [pc, #64]	@ (80027dc <MX_I2C3_Init+0x7c>)
 800279c:	f006 ffae 	bl	80096fc <HAL_I2C_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80027a6:	f000 fb23 	bl	8002df0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027aa:	2100      	movs	r1, #0
 80027ac:	480b      	ldr	r0, [pc, #44]	@ (80027dc <MX_I2C3_Init+0x7c>)
 80027ae:	f007 fbf1 	bl	8009f94 <HAL_I2CEx_ConfigAnalogFilter>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80027b8:	f000 fb1a 	bl	8002df0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80027bc:	2100      	movs	r1, #0
 80027be:	4807      	ldr	r0, [pc, #28]	@ (80027dc <MX_I2C3_Init+0x7c>)
 80027c0:	f007 fc33 	bl	800a02a <HAL_I2CEx_ConfigDigitalFilter>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80027ca:	f000 fb11 	bl	8002df0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80027ce:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80027d2:	f007 fc77 	bl	800a0c4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000054c 	.word	0x2000054c
 80027e0:	40005c00 	.word	0x40005c00
 80027e4:	00300b29 	.word	0x00300b29

080027e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b09c      	sub	sp, #112	@ 0x70
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	2250      	movs	r2, #80	@ 0x50
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f018 fffe 	bl	801b80a <memset>
  if(i2cHandle->Instance==I2C1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a37      	ldr	r2, [pc, #220]	@ (80028f0 <HAL_I2C_MspInit+0x108>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d127      	bne.n	8002868 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002818:	2304      	movs	r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800281c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	4618      	mov	r0, r3
 8002828:	f00a fd3b 	bl	800d2a2 <HAL_RCCEx_PeriphCLKConfig>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002832:	f000 fadd 	bl	8002df0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	2002      	movs	r0, #2
 8002838:	f7ff ff0d 	bl	8002656 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800283c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002840:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002842:	2312      	movs	r3, #18
 8002844:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800284e:	2304      	movs	r3, #4
 8002850:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002852:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002856:	4619      	mov	r1, r3
 8002858:	4826      	ldr	r0, [pc, #152]	@ (80028f4 <HAL_I2C_MspInit+0x10c>)
 800285a:	f006 fc7b 	bl	8009154 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800285e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002862:	f7ff ff11 	bl	8002688 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002866:	e03e      	b.n	80028e6 <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a22      	ldr	r2, [pc, #136]	@ (80028f8 <HAL_I2C_MspInit+0x110>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d139      	bne.n	80028e6 <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002872:	2308      	movs	r3, #8
 8002874:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002876:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800287a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	4618      	mov	r0, r3
 8002882:	f00a fd0e 	bl	800d2a2 <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 800288c:	f000 fab0 	bl	8002df0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	2001      	movs	r0, #1
 8002892:	f7ff fee0 	bl	8002656 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	2002      	movs	r0, #2
 8002898:	f7ff fedd 	bl	8002656 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028ac:	2304      	movs	r3, #4
 80028ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ba:	f006 fc4b 	bl	8009154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028be:	2310      	movs	r3, #16
 80028c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c2:	2312      	movs	r3, #18
 80028c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028ce:	2304      	movs	r3, #4
 80028d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80028d6:	4619      	mov	r1, r3
 80028d8:	4806      	ldr	r0, [pc, #24]	@ (80028f4 <HAL_I2C_MspInit+0x10c>)
 80028da:	f006 fc3b 	bl	8009154 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028de:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80028e2:	f7ff fed1 	bl	8002688 <LL_APB1_GRP1_EnableClock>
}
 80028e6:	bf00      	nop
 80028e8:	3770      	adds	r7, #112	@ 0x70
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40005400 	.word	0x40005400
 80028f4:	48000400 	.word	0x48000400
 80028f8:	40005c00 	.word	0x40005c00

080028fc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a13      	ldr	r2, [pc, #76]	@ (8002958 <HAL_I2C_MspDeInit+0x5c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10e      	bne.n	800292c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800290e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002912:	f7ff fed2 	bl	80026ba <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002916:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800291a:	4810      	ldr	r0, [pc, #64]	@ (800295c <HAL_I2C_MspDeInit+0x60>)
 800291c:	f006 fd8a 	bl	8009434 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002924:	480d      	ldr	r0, [pc, #52]	@ (800295c <HAL_I2C_MspDeInit+0x60>)
 8002926:	f006 fd85 	bl	8009434 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800292a:	e011      	b.n	8002950 <HAL_I2C_MspDeInit+0x54>
  else if(i2cHandle->Instance==I2C3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0b      	ldr	r2, [pc, #44]	@ (8002960 <HAL_I2C_MspDeInit+0x64>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10c      	bne.n	8002950 <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002936:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800293a:	f7ff febe 	bl	80026ba <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 800293e:	2180      	movs	r1, #128	@ 0x80
 8002940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002944:	f006 fd76 	bl	8009434 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8002948:	2110      	movs	r1, #16
 800294a:	4804      	ldr	r0, [pc, #16]	@ (800295c <HAL_I2C_MspDeInit+0x60>)
 800294c:	f006 fd72 	bl	8009434 <HAL_GPIO_DeInit>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40005400 	.word	0x40005400
 800295c:	48000400 	.word	0x48000400
 8002960:	40005c00 	.word	0x40005c00

08002964 <LL_AHB3_GRP1_EnableClock>:
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800296c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002970:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002972:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4313      	orrs	r3, r2
 800297a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800297c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002980:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4013      	ands	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002988:	68fb      	ldr	r3, [r7, #12]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <MX_IPCC_Init+0x20>)
 800299e:	4a07      	ldr	r2, [pc, #28]	@ (80029bc <MX_IPCC_Init+0x24>)
 80029a0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	@ (80029b8 <MX_IPCC_Init+0x20>)
 80029a4:	f007 fba0 	bl	800a0e8 <HAL_IPCC_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80029ae:	f000 fa1f 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200005a0 	.word	0x200005a0
 80029bc:	58000c00 	.word	0x58000c00

080029c0 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <HAL_IPCC_MspInit+0x44>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d113      	bne.n	80029fa <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80029d2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80029d6:	f7ff ffc5 	bl	8002964 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	202c      	movs	r0, #44	@ 0x2c
 80029e0:	f005 ff85 	bl	80088ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80029e4:	202c      	movs	r0, #44	@ 0x2c
 80029e6:	f005 ff9c 	bl	8008922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	202d      	movs	r0, #45	@ 0x2d
 80029f0:	f005 ff7d 	bl	80088ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80029f4:	202d      	movs	r0, #45	@ 0x2d
 80029f6:	f005 ff94 	bl	8008922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	58000c00 	.word	0x58000c00

08002a08 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	3220      	adds	r2, #32
 8002a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1c:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <LL_HSEM_1StepLock+0x2c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d001      	beq.n	8002a26 <LL_HSEM_1StepLock+0x1e>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <LL_HSEM_1StepLock+0x20>
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	80000400 	.word	0x80000400

08002a38 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a48:	d12f      	bne.n	8002aaa <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a4e:	4833      	ldr	r0, [pc, #204]	@ (8002b1c <HAL_GPIO_EXTI_Callback+0xe4>)
 8002a50:	f006 fdce 	bl	80095f0 <HAL_GPIO_ReadPin>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002a5a:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8002a60:	f004 fd66 	bl	8007530 <HAL_GetTick>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b2e      	ldr	r3, [pc, #184]	@ (8002b24 <HAL_GPIO_EXTI_Callback+0xec>)
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e010      	b.n	8002a90 <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b28 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	4a2c      	ldr	r2, [pc, #176]	@ (8002b28 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002a76:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002a78:	f004 fd5a 	bl	8007530 <HAL_GetTick>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4a29      	ldr	r2, [pc, #164]	@ (8002b24 <HAL_GPIO_EXTI_Callback+0xec>)
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b26      	ldr	r3, [pc, #152]	@ (8002b20 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002a88:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002a8a:	4b26      	ldr	r3, [pc, #152]	@ (8002b24 <HAL_GPIO_EXTI_Callback+0xec>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8002a90:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002a98:	db07      	blt.n	8002aaa <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8002a9a:	4b24      	ldr	r3, [pc, #144]	@ (8002b2c <HAL_GPIO_EXTI_Callback+0xf4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	4a22      	ldr	r2, [pc, #136]	@ (8002b2c <HAL_GPIO_EXTI_Callback+0xf4>)
 8002aa2:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8002aa4:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ab0:	d12f      	bne.n	8002b12 <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 8002ab2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ab6:	4819      	ldr	r0, [pc, #100]	@ (8002b1c <HAL_GPIO_EXTI_Callback+0xe4>)
 8002ab8:	f006 fd9a 	bl	80095f0 <HAL_GPIO_ReadPin>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8002ac8:	f004 fd32 	bl	8007530 <HAL_GetTick>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e010      	b.n	8002af8 <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 8002ad6:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <HAL_GPIO_EXTI_Callback+0x100>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3301      	adds	r3, #1
 8002adc:	4a16      	ldr	r2, [pc, #88]	@ (8002b38 <HAL_GPIO_EXTI_Callback+0x100>)
 8002ade:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8002ae0:	f004 fd26 	bl	8007530 <HAL_GetTick>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a13      	ldr	r2, [pc, #76]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002af0:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8002af2:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8002af8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002b00:	db07      	blt.n	8002b12 <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <HAL_GPIO_EXTI_Callback+0x104>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	4a0c      	ldr	r2, [pc, #48]	@ (8002b3c <HAL_GPIO_EXTI_Callback+0x104>)
 8002b0a:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <HAL_GPIO_EXTI_Callback+0x100>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	48000800 	.word	0x48000800
 8002b20:	20000b8c 	.word	0x20000b8c
 8002b24:	20000b94 	.word	0x20000b94
 8002b28:	20000868 	.word	0x20000868
 8002b2c:	20000ba0 	.word	0x20000ba0
 8002b30:	20000b90 	.word	0x20000b90
 8002b34:	20000b98 	.word	0x20000b98
 8002b38:	2000086c 	.word	0x2000086c
 8002b3c:	20000b9c 	.word	0x20000b9c

08002b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b46:	f004 fc85 	bl	8007454 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002b4a:	f7fe fcb5 	bl	80014b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b4e:	f000 f8b1 	bl	8002cb4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002b52:	f000 f913 	bl	8002d7c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002b56:	f7ff ff1f 	bl	8002998 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002b5a:	f000 fde5 	bl	8003728 <MX_RF_Init>
  MX_GPIO_Init();
 8002b5e:	f7fe fea5 	bl	80018ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002b62:	f7fe fe60 	bl	8001826 <MX_DMA_Init>
  MX_ADC1_Init();
 8002b66:	f7fe fa2f 	bl	8000fc8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b6a:	f7ff fdb9 	bl	80026e0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002b6e:	f7ff fdf7 	bl	8002760 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002b72:	f004 fa39 	bl	8006fe8 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002b76:	f003 ff67 	bl	8006a48 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002b7a:	f003 ffb3 	bl	8006ae4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002b7e:	f003 ffd9 	bl	8006b34 <MX_TIM17_Init>
  MX_SPI1_Init();
 8002b82:	f000 fed7 	bl	8003934 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002b86:	f004 fa7b 	bl	8007080 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002b8a:	f015 ff17 	bl	80189bc <MX_USB_Device_Init>
  MX_RTC_Init();
 8002b8e:	f000 fdfd 	bl	800378c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Abort(&huart1);
 8002b92:	4836      	ldr	r0, [pc, #216]	@ (8002c6c <main+0x12c>)
 8002b94:	f00c ffc8 	bl	800fb28 <HAL_UART_Abort>
    HAL_UART_DeInit(&huart1);
 8002b98:	4834      	ldr	r0, [pc, #208]	@ (8002c6c <main+0x12c>)
 8002b9a:	f00c ff39 	bl	800fa10 <HAL_UART_DeInit>

    HAL_I2C_DeInit(&hi2c1);
 8002b9e:	4834      	ldr	r0, [pc, #208]	@ (8002c70 <main+0x130>)
 8002ba0:	f006 fe47 	bl	8009832 <HAL_I2C_DeInit>



  	ssd1306_Init();
 8002ba4:	f001 f9a8 	bl	8003ef8 <ssd1306_Init>

  	HAL_Delay(10);
 8002ba8:	200a      	movs	r0, #10
 8002baa:	f7fe fdc0 	bl	800172e <HAL_Delay>
  	ssd1306_Fill(Black);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f001 fa0c 	bl	8003fcc <ssd1306_Fill>

  	ssd1306_DrawBitmap(30, 12, startimg, 72, 40, White);
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	2328      	movs	r3, #40	@ 0x28
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2348      	movs	r3, #72	@ 0x48
 8002bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002c74 <main+0x134>)
 8002bc0:	210c      	movs	r1, #12
 8002bc2:	201e      	movs	r0, #30
 8002bc4:	f001 fc4d 	bl	8004462 <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002bc8:	f001 fa18 	bl	8003ffc <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002bcc:	2203      	movs	r2, #3
 8002bce:	492a      	ldr	r1, [pc, #168]	@ (8002c78 <main+0x138>)
 8002bd0:	482a      	ldr	r0, [pc, #168]	@ (8002c7c <main+0x13c>)
 8002bd2:	f004 ffe5 	bl	8007ba0 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002bd6:	482a      	ldr	r0, [pc, #168]	@ (8002c80 <main+0x140>)
 8002bd8:	f00c fa5a 	bl	800f090 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002bdc:	4829      	ldr	r0, [pc, #164]	@ (8002c84 <main+0x144>)
 8002bde:	f00c fa9d 	bl	800f11c <HAL_TIM_Base_Start_IT>
  	//HAL_TIM_Base_Start_IT(&htim17);

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002be2:	2201      	movs	r2, #1
 8002be4:	2101      	movs	r1, #1
 8002be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bea:	f006 fd19 	bl	8009620 <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002bee:	2064      	movs	r0, #100	@ 0x64
 8002bf0:	f7fe fd9d 	bl	800172e <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002bf4:	4824      	ldr	r0, [pc, #144]	@ (8002c88 <main+0x148>)
 8002bf6:	f00c ff97 	bl	800fb28 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002bfa:	2240      	movs	r2, #64	@ 0x40
 8002bfc:	4923      	ldr	r1, [pc, #140]	@ (8002c8c <main+0x14c>)
 8002bfe:	4822      	ldr	r0, [pc, #136]	@ (8002c88 <main+0x148>)
 8002c00:	f00c ff46 	bl	800fa90 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8002c04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c08:	2131      	movs	r1, #49	@ 0x31
 8002c0a:	4821      	ldr	r0, [pc, #132]	@ (8002c90 <main+0x150>)
 8002c0c:	f018 fdfd 	bl	801b80a <memset>
  	memset(flashwrite,'\0',256);
 8002c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c14:	2100      	movs	r1, #0
 8002c16:	481f      	ldr	r0, [pc, #124]	@ (8002c94 <main+0x154>)
 8002c18:	f018 fdf7 	bl	801b80a <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002c1c:	2232      	movs	r2, #50	@ 0x32
 8002c1e:	2100      	movs	r1, #0
 8002c20:	481d      	ldr	r0, [pc, #116]	@ (8002c98 <main+0x158>)
 8002c22:	f018 fdf2 	bl	801b80a <memset>

  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	4a1c      	ldr	r2, [pc, #112]	@ (8002c9c <main+0x15c>)
 8002c2a:	491d      	ldr	r1, [pc, #116]	@ (8002ca0 <main+0x160>)
 8002c2c:	481d      	ldr	r0, [pc, #116]	@ (8002ca4 <main+0x164>)
 8002c2e:	f014 ffba 	bl	8017ba6 <SPIF_Init>



  	getindex();
 8002c32:	f001 f82d 	bl	8003c90 <getindex>

  	ssd1306_Fill(Black);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f001 f9c8 	bl	8003fcc <ssd1306_Fill>

  	state=STATE_SPEED;
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <main+0x168>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
  	BTN_A=0;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <main+0x16c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
  	BTN_A_LONG=0;
 8002c48:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <main+0x170>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

  	HAL_Delay(700);
 8002c4e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002c52:	f7fe fd6c 	bl	800172e <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002c56:	f7fe fc3d 	bl	80014d4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002c5a:	f7fe fd8d 	bl	8001778 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002c5e:	f001 fe6b 	bl	8004938 <statemachine>
	  ssd1306_UpdateScreen();
 8002c62:	f001 f9cb 	bl	8003ffc <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002c66:	bf00      	nop
 8002c68:	e7f7      	b.n	8002c5a <main+0x11a>
 8002c6a:	bf00      	nop
 8002c6c:	20001428 	.word	0x20001428
 8002c70:	200004f8 	.word	0x200004f8
 8002c74:	08020210 	.word	0x08020210
 8002c78:	20000890 	.word	0x20000890
 8002c7c:	20000394 	.word	0x20000394
 8002c80:	200012b0 	.word	0x200012b0
 8002c84:	200012fc 	.word	0x200012fc
 8002c88:	20001394 	.word	0x20001394
 8002c8c:	200005e8 	.word	0x200005e8
 8002c90:	200009a4 	.word	0x200009a4
 8002c94:	200008a4 	.word	0x200008a4
 8002c98:	20000ac8 	.word	0x20000ac8
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	20000d80 	.word	0x20000d80
 8002ca4:	20000870 	.word	0x20000870
 8002ca8:	200005dc 	.word	0x200005dc
 8002cac:	20000868 	.word	0x20000868
 8002cb0:	20000ba0 	.word	0x20000ba0

08002cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b09a      	sub	sp, #104	@ 0x68
 8002cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cba:	f107 0320 	add.w	r3, r7, #32
 8002cbe:	2248      	movs	r2, #72	@ 0x48
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f018 fda1 	bl	801b80a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	60da      	str	r2, [r3, #12]
 8002cd4:	611a      	str	r2, [r3, #16]
 8002cd6:	615a      	str	r2, [r3, #20]
 8002cd8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cda:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <SystemClock_Config+0xc4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ce2:	4a25      	ldr	r2, [pc, #148]	@ (8002d78 <SystemClock_Config+0xc4>)
 8002ce4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b23      	ldr	r3, [pc, #140]	@ (8002d78 <SystemClock_Config+0xc4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d06:	2340      	movs	r3, #64	@ 0x40
 8002d08:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002d12:	2310      	movs	r3, #16
 8002d14:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002d16:	2308      	movs	r3, #8
 8002d18:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d20:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002d24:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d2a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d2c:	f107 0320 	add.w	r3, r7, #32
 8002d30:	4618      	mov	r0, r3
 8002d32:	f009 fb05 	bl	800c340 <HAL_RCC_OscConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002d3c:	f000 f858 	bl	8002df0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002d40:	236f      	movs	r3, #111	@ 0x6f
 8002d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d44:	2303      	movs	r3, #3
 8002d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	2103      	movs	r1, #3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f009 fe61 	bl	800ca28 <HAL_RCC_ClockConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002d6c:	f000 f840 	bl	8002df0 <Error_Handler>
  }
}
 8002d70:	bf00      	nop
 8002d72:	3768      	adds	r7, #104	@ 0x68
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	58000400 	.word	0x58000400

08002d7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b094      	sub	sp, #80	@ 0x50
 8002d80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d82:	463b      	mov	r3, r7
 8002d84:	2250      	movs	r2, #80	@ 0x50
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f018 fd3e 	bl	801b80a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002d8e:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002d92:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002d94:	2306      	movs	r3, #6
 8002d96:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002d98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002d9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002da2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002da4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002da8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002daa:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002dae:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002db0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002db4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002db6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002dbc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002dc0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dca:	463b      	mov	r3, r7
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00a fa68 	bl	800d2a2 <HAL_RCCEx_PeriphCLKConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002dd8:	f000 f80a 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002ddc:	2105      	movs	r1, #5
 8002dde:	4803      	ldr	r0, [pc, #12]	@ (8002dec <PeriphCommonClock_Config+0x70>)
 8002de0:	f7ff fe12 	bl	8002a08 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8002de4:	bf00      	nop
 8002de6:	3750      	adds	r7, #80	@ 0x50
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58001400 	.word	0x58001400

08002df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <Error_Handler+0x8>

08002dfc <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7fd fa0b 	bl	8000220 <strlen>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d801      	bhi.n	8002e14 <gps_checksum+0x18>
 8002e10:	2300      	movs	r3, #0
 8002e12:	e038      	b.n	8002e86 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7fd fa03 	bl	8000220 <strlen>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	3b04      	subs	r3, #4
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd f9fa 	bl	8000220 <strlen>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	3b03      	subs	r3, #3
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e00a      	b.n	8002e58 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	4053      	eors	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	3301      	adds	r3, #1
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fd f9e1 	bl	8000220 <strlen>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	1f5a      	subs	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d8ec      	bhi.n	8002e42 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f017 fcfb 	bl	801a86c <strtol>
 8002e76:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d101      	bne.n	8002e84 <gps_checksum+0x88>
        return 1;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002e84:	2300      	movs	r3, #0
    }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b0b7      	sub	sp, #220	@ 0xdc
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002ea0:	f107 0320 	add.w	r3, r7, #32
 8002ea4:	2264      	movs	r2, #100	@ 0x64
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f018 fcae 	bl	801b80a <memset>
    char *marker = strtok(inputString, ",");
 8002eae:	49c2      	ldr	r1, [pc, #776]	@ (80031b8 <nmea_GPGGA+0x328>)
 8002eb0:	6838      	ldr	r0, [r7, #0]
 8002eb2:	f018 fcc5 	bl	801b840 <strtok>
 8002eb6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002eba:	e027      	b.n	8002f0c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002ebc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002ec0:	f7fd f9ae 	bl	8000220 <strlen>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8002ecc:	1c63      	adds	r3, r4, #1
 8002ece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f016 fd22 	bl	801991c <malloc>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	00a3      	lsls	r3, r4, #2
 8002ede:	33d8      	adds	r3, #216	@ 0xd8
 8002ee0:	443b      	add	r3, r7
 8002ee2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8002ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eea:	3b01      	subs	r3, #1
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	33d8      	adds	r3, #216	@ 0xd8
 8002ef0:	443b      	add	r3, r7
 8002ef2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002ef6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f018 fd99 	bl	801ba32 <strcpy>
        marker = strtok(NULL, ",");
 8002f00:	49ad      	ldr	r1, [pc, #692]	@ (80031b8 <nmea_GPGGA+0x328>)
 8002f02:	2000      	movs	r0, #0
 8002f04:	f018 fc9c 	bl	801b840 <strtok>
 8002f08:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002f0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1d3      	bne.n	8002ebc <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8002f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	332c      	adds	r3, #44	@ 0x2c
 8002f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f018 fd80 	bl	801ba32 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002f32:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002f36:	2b53      	cmp	r3, #83	@ 0x53
 8002f38:	d004      	beq.n	8002f44 <nmea_GPGGA+0xb4>
 8002f3a:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002f3e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f40:	f040 8159 	bne.w	80031f6 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f4a:	e010      	b.n	8002f6e <nmea_GPGGA+0xde>
 8002f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f52:	4413      	add	r3, r2
 8002f54:	7819      	ldrb	r1, [r3, #0]
 8002f56:	f107 021c 	add.w	r2, r7, #28
 8002f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f5e:	4413      	add	r3, r2
 8002f60:	460a      	mov	r2, r1
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	ddea      	ble.n	8002f4c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f7c:	e011      	b.n	8002fa2 <nmea_GPGGA+0x112>
 8002f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f84:	3302      	adds	r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	7819      	ldrb	r1, [r3, #0]
 8002f8a:	f107 0214 	add.w	r2, r7, #20
 8002f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f92:	4413      	add	r3, r2
 8002f94:	460a      	mov	r2, r1
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	dde9      	ble.n	8002f7e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002faa:	f107 031c 	add.w	r3, r7, #28
 8002fae:	220a      	movs	r2, #10
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f017 fc5a 	bl	801a86c <strtol>
 8002fb8:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f017 fb72 	bl	801a6ac <strtof>
 8002fc8:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd8:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8002fdc:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80031bc <nmea_GPGGA+0x32c>
 8002fe0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe8:	ee17 0a90 	vmov	r0, s15
 8002fec:	f7fd fa84 	bl	80004f8 <__aeabi_f2d>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ffe:	e010      	b.n	8003022 <nmea_GPGGA+0x192>
 8003000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003006:	4413      	add	r3, r2
 8003008:	7819      	ldrb	r1, [r3, #0]
 800300a:	f107 0210 	add.w	r2, r7, #16
 800300e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003012:	4413      	add	r3, r2
 8003014:	460a      	mov	r2, r1
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800301c:	3301      	adds	r3, #1
 800301e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003022:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003026:	2b02      	cmp	r3, #2
 8003028:	ddea      	ble.n	8003000 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800302a:	2300      	movs	r3, #0
 800302c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003030:	e011      	b.n	8003056 <nmea_GPGGA+0x1c6>
 8003032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003038:	3303      	adds	r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	7819      	ldrb	r1, [r3, #0]
 800303e:	f107 0208 	add.w	r2, r7, #8
 8003042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003046:	4413      	add	r3, r2
 8003048:	460a      	mov	r2, r1
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003050:	3301      	adds	r3, #1
 8003052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800305a:	2b05      	cmp	r3, #5
 800305c:	dde9      	ble.n	8003032 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800305e:	f107 0310 	add.w	r3, r7, #16
 8003062:	220a      	movs	r2, #10
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f017 fc00 	bl	801a86c <strtol>
 800306c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f017 fb18 	bl	801a6ac <strtof>
 800307c:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800308c:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8003090:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80031bc <nmea_GPGGA+0x32c>
 8003094:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309c:	ee17 0a90 	vmov	r0, s15
 80030a0:	f7fd fa2a 	bl	80004f8 <__aeabi_f2d>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80030b8:	f7fd fcde 	bl	8000a78 <__aeabi_dcmpeq>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d176      	bne.n	80031b0 <nmea_GPGGA+0x320>
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80030ce:	f7fd fcd3 	bl	8000a78 <__aeabi_dcmpeq>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d16b      	bne.n	80031b0 <nmea_GPGGA+0x320>
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	4b38      	ldr	r3, [pc, #224]	@ (80031c0 <nmea_GPGGA+0x330>)
 80030de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80030e2:	f7fd fcd3 	bl	8000a8c <__aeabi_dcmplt>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d061      	beq.n	80031b0 <nmea_GPGGA+0x320>
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	4b34      	ldr	r3, [pc, #208]	@ (80031c4 <nmea_GPGGA+0x334>)
 80030f2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80030f6:	f7fd fcc9 	bl	8000a8c <__aeabi_dcmplt>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d057      	beq.n	80031b0 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003106:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8003110:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003118:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8003122:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f017 fabf 	bl	801a6ac <strtof>
 800312e:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8003132:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003136:	eef5 7a40 	vcmp.f32	s15, #0.0
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	d102      	bne.n	8003146 <nmea_GPGGA+0x2b6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	e001      	b.n	800314a <nmea_GPGGA+0x2ba>
 8003146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800314e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003150:	220a      	movs	r2, #10
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f017 fb89 	bl	801a86c <strtol>
 800315a:	4602      	mov	r2, r0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003162:	220a      	movs	r2, #10
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f017 fb80 	bl	801a86c <strtol>
 800316c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003170:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003174:	2b00      	cmp	r3, #0
 8003176:	bfcc      	ite	gt
 8003178:	2301      	movgt	r3, #1
 800317a:	2300      	movle	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8003184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f017 fa8f 	bl	801a6ac <strtof>
 800318e:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8003192:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003196:	eef5 7a40 	vcmp.f32	s15, #0.0
 800319a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319e:	d102      	bne.n	80031a6 <nmea_GPGGA+0x316>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	e001      	b.n	80031aa <nmea_GPGGA+0x31a>
 80031a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80031ae:	e022      	b.n	80031f6 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80031b6:	e016      	b.n	80031e6 <nmea_GPGGA+0x356>
 80031b8:	0801fd64 	.word	0x0801fd64
 80031bc:	42700000 	.word	0x42700000
 80031c0:	40568000 	.word	0x40568000
 80031c4:	40668000 	.word	0x40668000
 80031c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	33d8      	adds	r3, #216	@ 0xd8
 80031d0:	443b      	add	r3, r7
 80031d2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f016 fba8 	bl	801992c <free>
 80031dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031e0:	3301      	adds	r3, #1
 80031e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80031e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80031ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ee:	429a      	cmp	r2, r3
 80031f0:	dbea      	blt.n	80031c8 <nmea_GPGGA+0x338>
            return 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e019      	b.n	800322a <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031fc:	e00e      	b.n	800321c <nmea_GPGGA+0x38c>
 80031fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	33d8      	adds	r3, #216	@ 0xd8
 8003206:	443b      	add	r3, r7
 8003208:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800320c:	4618      	mov	r0, r3
 800320e:	f016 fb8d 	bl	801992c <free>
 8003212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003216:	3301      	adds	r3, #1
 8003218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800321c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003224:	429a      	cmp	r2, r3
 8003226:	dbea      	blt.n	80031fe <nmea_GPGGA+0x36e>
    return 1;
 8003228:	2301      	movs	r3, #1
}
 800322a:	4618      	mov	r0, r3
 800322c:	37dc      	adds	r7, #220	@ 0xdc
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	bf00      	nop

08003234 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b0a3      	sub	sp, #140	@ 0x8c
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 8003244:	f107 030c 	add.w	r3, r7, #12
 8003248:	2264      	movs	r2, #100	@ 0x64
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f018 fadc 	bl	801b80a <memset>
    char *marker = strtok(inputString, ",");
 8003252:	493b      	ldr	r1, [pc, #236]	@ (8003340 <nmea_GPGSA+0x10c>)
 8003254:	6838      	ldr	r0, [r7, #0]
 8003256:	f018 faf3 	bl	801b840 <strtok>
 800325a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 800325e:	e027      	b.n	80032b0 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003260:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003264:	f7fc ffdc 	bl	8000220 <strlen>
 8003268:	4603      	mov	r3, r0
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8003270:	1c63      	adds	r3, r4, #1
 8003272:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003276:	4610      	mov	r0, r2
 8003278:	f016 fb50 	bl	801991c <malloc>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	00a3      	lsls	r3, r4, #2
 8003282:	3388      	adds	r3, #136	@ 0x88
 8003284:	443b      	add	r3, r7
 8003286:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800328a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800328e:	3b01      	subs	r3, #1
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	3388      	adds	r3, #136	@ 0x88
 8003294:	443b      	add	r3, r7
 8003296:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800329a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800329e:	4618      	mov	r0, r3
 80032a0:	f018 fbc7 	bl	801ba32 <strcpy>
        marker = strtok(NULL, ",");
 80032a4:	4926      	ldr	r1, [pc, #152]	@ (8003340 <nmea_GPGSA+0x10c>)
 80032a6:	2000      	movs	r0, #0
 80032a8:	f018 faca 	bl	801b840 <strtok>
 80032ac:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 80032b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1d3      	bne.n	8003260 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	220a      	movs	r2, #10
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f017 fad4 	bl	801a86c <strtol>
 80032c4:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80032c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	bfcc      	ite	gt
 80032cc:	2301      	movgt	r3, #1
 80032ce:	2300      	movle	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80032dc:	2303      	movs	r3, #3
 80032de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032e0:	e00e      	b.n	8003300 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 80032e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3388      	adds	r3, #136	@ 0x88
 80032e8:	443b      	add	r3, r7
 80032ea:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <nmea_GPGSA+0xc6>
            satelliteCount++;
 80032f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032f6:	3301      	adds	r3, #1
 80032f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80032fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032fc:	3301      	adds	r3, #1
 80032fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003302:	2b0e      	cmp	r3, #14
 8003304:	dded      	ble.n	80032e2 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800330a:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 800330c:	2300      	movs	r3, #0
 800330e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003310:	e00b      	b.n	800332a <nmea_GPGSA+0xf6>
 8003312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	3388      	adds	r3, #136	@ 0x88
 8003318:	443b      	add	r3, r7
 800331a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800331e:	4618      	mov	r0, r3
 8003320:	f016 fb04 	bl	801992c <free>
 8003324:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003326:	3301      	adds	r3, #1
 8003328:	677b      	str	r3, [r7, #116]	@ 0x74
 800332a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800332c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003330:	429a      	cmp	r2, r3
 8003332:	dbee      	blt.n	8003312 <nmea_GPGSA+0xde>
    return 1;
 8003334:	2301      	movs	r3, #1
}
 8003336:	4618      	mov	r0, r3
 8003338:	378c      	adds	r7, #140	@ 0x8c
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}
 800333e:	bf00      	nop
 8003340:	0801fd64 	.word	0x0801fd64
 8003344:	00000000 	.word	0x00000000

08003348 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b0a1      	sub	sp, #132	@ 0x84
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8003356:	f107 030c 	add.w	r3, r7, #12
 800335a:	2264      	movs	r2, #100	@ 0x64
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f018 fa53 	bl	801b80a <memset>
    char *marker = strtok(inputString, ",");
 8003364:	4930      	ldr	r1, [pc, #192]	@ (8003428 <nmea_GNRMC+0xe0>)
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	f018 fa6a 	bl	801b840 <strtok>
 800336c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800336e:	e021      	b.n	80033b4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003370:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003372:	f7fc ff55 	bl	8000220 <strlen>
 8003376:	4603      	mov	r3, r0
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800337c:	1c63      	adds	r3, r4, #1
 800337e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003380:	4610      	mov	r0, r2
 8003382:	f016 facb 	bl	801991c <malloc>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	00a3      	lsls	r3, r4, #2
 800338c:	3380      	adds	r3, #128	@ 0x80
 800338e:	443b      	add	r3, r7
 8003390:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8003394:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003396:	3b01      	subs	r3, #1
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	3380      	adds	r3, #128	@ 0x80
 800339c:	443b      	add	r3, r7
 800339e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80033a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80033a4:	4618      	mov	r0, r3
 80033a6:	f018 fb44 	bl	801ba32 <strcpy>
        marker = strtok(NULL, ",");
 80033aa:	491f      	ldr	r1, [pc, #124]	@ (8003428 <nmea_GNRMC+0xe0>)
 80033ac:	2000      	movs	r0, #0
 80033ae:	f018 fa47 	bl	801b840 <strtok>
 80033b2:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 80033b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1da      	bne.n	8003370 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f017 f974 	bl	801a6ac <strtof>
 80033c4:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 80033c8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80033ca:	f7fd f895 	bl	80004f8 <__aeabi_f2d>
 80033ce:	a314      	add	r3, pc, #80	@ (adr r3, 8003420 <nmea_GNRMC+0xd8>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fd fa12 	bl	80007fc <__aeabi_ddiv>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f7fd fbda 	bl	8000b98 <__aeabi_d2f>
 80033e4:	4602      	mov	r2, r0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80033ea:	2300      	movs	r3, #0
 80033ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80033ee:	e00b      	b.n	8003408 <nmea_GNRMC+0xc0>
 80033f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	3380      	adds	r3, #128	@ 0x80
 80033f6:	443b      	add	r3, r7
 80033f8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f016 fa95 	bl	801992c <free>
 8003402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003404:	3301      	adds	r3, #1
 8003406:	677b      	str	r3, [r7, #116]	@ 0x74
 8003408:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800340a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800340c:	429a      	cmp	r2, r3
 800340e:	dbef      	blt.n	80033f0 <nmea_GNRMC+0xa8>
    return 1;
 8003410:	2301      	movs	r3, #1
}
 8003412:	4618      	mov	r0, r3
 8003414:	3784      	adds	r7, #132	@ 0x84
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}
 800341a:	bf00      	nop
 800341c:	f3af 8000 	nop.w
 8003420:	be76c8b4 	.word	0xbe76c8b4
 8003424:	3fff1a9f 	.word	0x3fff1a9f
 8003428:	0801fd64 	.word	0x0801fd64

0800342c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8003436:	223c      	movs	r2, #60	@ 0x3c
 8003438:	2100      	movs	r1, #0
 800343a:	484e      	ldr	r0, [pc, #312]	@ (8003574 <nmea_parse+0x148>)
 800343c:	f018 f9e5 	bl	801b80a <memset>
    char * token = strtok(buffer, "$");
 8003440:	494d      	ldr	r1, [pc, #308]	@ (8003578 <nmea_parse+0x14c>)
 8003442:	6838      	ldr	r0, [r7, #0]
 8003444:	f018 f9fc 	bl	801b840 <strtok>
 8003448:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 800344e:	e01d      	b.n	800348c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003450:	6978      	ldr	r0, [r7, #20]
 8003452:	f7fc fee5 	bl	8000220 <strlen>
 8003456:	4603      	mov	r3, r0
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	693c      	ldr	r4, [r7, #16]
 800345c:	1c63      	adds	r3, r4, #1
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	4610      	mov	r0, r2
 8003462:	f016 fa5b 	bl	801991c <malloc>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	4b42      	ldr	r3, [pc, #264]	@ (8003574 <nmea_parse+0x148>)
 800346c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	3b01      	subs	r3, #1
 8003474:	4a3f      	ldr	r2, [pc, #252]	@ (8003574 <nmea_parse+0x148>)
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	4618      	mov	r0, r3
 800347e:	f018 fad8 	bl	801ba32 <strcpy>
        token = strtok(NULL, "$");
 8003482:	493d      	ldr	r1, [pc, #244]	@ (8003578 <nmea_parse+0x14c>)
 8003484:	2000      	movs	r0, #0
 8003486:	f018 f9db 	bl	801b840 <strtok>
 800348a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1de      	bne.n	8003450 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e052      	b.n	800353e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003498:	4a36      	ldr	r2, [pc, #216]	@ (8003574 <nmea_parse+0x148>)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a0:	4936      	ldr	r1, [pc, #216]	@ (800357c <nmea_parse+0x150>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f018 fa28 	bl	801b8f8 <strstr>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d044      	beq.n	8003538 <nmea_parse+0x10c>
 80034ae:	4a31      	ldr	r2, [pc, #196]	@ (8003574 <nmea_parse+0x148>)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fca0 	bl	8002dfc <gps_checksum>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d03a      	beq.n	8003538 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80034c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003574 <nmea_parse+0x148>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ca:	492d      	ldr	r1, [pc, #180]	@ (8003580 <nmea_parse+0x154>)
 80034cc:	4618      	mov	r0, r3
 80034ce:	f018 fa13 	bl	801b8f8 <strstr>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80034d8:	4a26      	ldr	r2, [pc, #152]	@ (8003574 <nmea_parse+0x148>)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ff30 	bl	8003348 <nmea_GNRMC>
 80034e8:	e026      	b.n	8003538 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80034ea:	4a22      	ldr	r2, [pc, #136]	@ (8003574 <nmea_parse+0x148>)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f2:	4924      	ldr	r1, [pc, #144]	@ (8003584 <nmea_parse+0x158>)
 80034f4:	4618      	mov	r0, r3
 80034f6:	f018 f9ff 	bl	801b8f8 <strstr>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8003500:	4a1c      	ldr	r2, [pc, #112]	@ (8003574 <nmea_parse+0x148>)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003508:	4619      	mov	r1, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff fe92 	bl	8003234 <nmea_GPGSA>
 8003510:	e012      	b.n	8003538 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8003512:	4a18      	ldr	r2, [pc, #96]	@ (8003574 <nmea_parse+0x148>)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	491b      	ldr	r1, [pc, #108]	@ (8003588 <nmea_parse+0x15c>)
 800351c:	4618      	mov	r0, r3
 800351e:	f018 f9eb 	bl	801b8f8 <strstr>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8003528:	4a12      	ldr	r2, [pc, #72]	@ (8003574 <nmea_parse+0x148>)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fcac 	bl	8002e90 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3301      	adds	r3, #1
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	429a      	cmp	r2, r3
 8003544:	dba8      	blt.n	8003498 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	e009      	b.n	8003560 <nmea_parse+0x134>
 800354c:	4a09      	ldr	r2, [pc, #36]	@ (8003574 <nmea_parse+0x148>)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003554:	4618      	mov	r0, r3
 8003556:	f016 f9e9 	bl	801992c <free>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	3301      	adds	r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	429a      	cmp	r2, r3
 8003566:	dbf1      	blt.n	800354c <nmea_parse+0x120>


}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd90      	pop	{r4, r7, pc}
 8003572:	bf00      	nop
 8003574:	20000cec 	.word	0x20000cec
 8003578:	0801fd68 	.word	0x0801fd68
 800357c:	0801fd6c 	.word	0x0801fd6c
 8003580:	0801fd70 	.word	0x0801fd70
 8003584:	0801fd78 	.word	0x0801fd78
 8003588:	0801fd80 	.word	0x0801fd80
 800358c:	00000000 	.word	0x00000000

08003590 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8003590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003594:	b08a      	sub	sp, #40	@ 0x28
 8003596:	af00      	add	r7, sp, #0
 8003598:	ed87 0b06 	vstr	d0, [r7, #24]
 800359c:	ed87 1b04 	vstr	d1, [r7, #16]
 80035a0:	ed87 2b02 	vstr	d2, [r7, #8]
 80035a4:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 80035b4:	a358      	add	r3, pc, #352	@ (adr r3, 8003718 <distancecalc+0x188>)
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035be:	f7fc fff3 	bl	80005a8 <__aeabi_dmul>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	ec43 2b17 	vmov	d7, r2, r3
 80035ca:	eeb0 0a47 	vmov.f32	s0, s14
 80035ce:	eef0 0a67 	vmov.f32	s1, s15
 80035d2:	f01a ff6f 	bl	801e4b4 <sinl>
 80035d6:	ec55 4b10 	vmov	r4, r5, d0
 80035da:	a34f      	add	r3, pc, #316	@ (adr r3, 8003718 <distancecalc+0x188>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035e4:	f7fc ffe0 	bl	80005a8 <__aeabi_dmul>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	ec43 2b17 	vmov	d7, r2, r3
 80035f0:	eeb0 0a47 	vmov.f32	s0, s14
 80035f4:	eef0 0a67 	vmov.f32	s1, s15
 80035f8:	f01a ff5c 	bl	801e4b4 <sinl>
 80035fc:	ec53 2b10 	vmov	r2, r3, d0
 8003600:	4620      	mov	r0, r4
 8003602:	4629      	mov	r1, r5
 8003604:	f7fc ffd0 	bl	80005a8 <__aeabi_dmul>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4614      	mov	r4, r2
 800360e:	461d      	mov	r5, r3
 8003610:	a341      	add	r3, pc, #260	@ (adr r3, 8003718 <distancecalc+0x188>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800361a:	f7fc ffc5 	bl	80005a8 <__aeabi_dmul>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	ec43 2b17 	vmov	d7, r2, r3
 8003626:	eeb0 0a47 	vmov.f32	s0, s14
 800362a:	eef0 0a67 	vmov.f32	s1, s15
 800362e:	f01a ff3f 	bl	801e4b0 <cosl>
 8003632:	ec59 8b10 	vmov	r8, r9, d0
 8003636:	a338      	add	r3, pc, #224	@ (adr r3, 8003718 <distancecalc+0x188>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003640:	f7fc ffb2 	bl	80005a8 <__aeabi_dmul>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	ec43 2b17 	vmov	d7, r2, r3
 800364c:	eeb0 0a47 	vmov.f32	s0, s14
 8003650:	eef0 0a67 	vmov.f32	s1, s15
 8003654:	f01a ff2c 	bl	801e4b0 <cosl>
 8003658:	ec53 2b10 	vmov	r2, r3, d0
 800365c:	4640      	mov	r0, r8
 800365e:	4649      	mov	r1, r9
 8003660:	f7fc ffa2 	bl	80005a8 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4690      	mov	r8, r2
 800366a:	4699      	mov	r9, r3
 800366c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003670:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003674:	f7fc fde0 	bl	8000238 <__aeabi_dsub>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	a325      	add	r3, pc, #148	@ (adr r3, 8003718 <distancecalc+0x188>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f7fc ff8f 	bl	80005a8 <__aeabi_dmul>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	ec43 2b17 	vmov	d7, r2, r3
 8003692:	eeb0 0a47 	vmov.f32	s0, s14
 8003696:	eef0 0a67 	vmov.f32	s1, s15
 800369a:	f01a ff09 	bl	801e4b0 <cosl>
 800369e:	ec53 2b10 	vmov	r2, r3, d0
 80036a2:	4640      	mov	r0, r8
 80036a4:	4649      	mov	r1, r9
 80036a6:	f7fc ff7f 	bl	80005a8 <__aeabi_dmul>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4620      	mov	r0, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	f7fc fdc3 	bl	800023c <__adddf3>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	ec43 2b17 	vmov	d7, r2, r3
 80036be:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8003710 <distancecalc+0x180>
 80036c2:	eeb0 0a47 	vmov.f32	s0, s14
 80036c6:	eef0 0a67 	vmov.f32	s1, s15
 80036ca:	f01a fe93 	bl	801e3f4 <fmin>
 80036ce:	eeb0 7a40 	vmov.f32	s14, s0
 80036d2:	eef0 7a60 	vmov.f32	s15, s1
 80036d6:	eeb0 0a47 	vmov.f32	s0, s14
 80036da:	eef0 0a67 	vmov.f32	s1, s15
 80036de:	f01a feeb 	bl	801e4b8 <acosl>
 80036e2:	ec51 0b10 	vmov	r0, r1, d0
 80036e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8003720 <distancecalc+0x190>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc ff5c 	bl	80005a8 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80036f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8003700:	eeb0 0a47 	vmov.f32	s0, s14
 8003704:	eef0 0a67 	vmov.f32	s1, s15
 8003708:	3728      	adds	r7, #40	@ 0x28
 800370a:	46bd      	mov	sp, r7
 800370c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003710:	00000000 	.word	0x00000000
 8003714:	3ff00000 	.word	0x3ff00000
 8003718:	a2529d39 	.word	0xa2529d39
 800371c:	3f91df46 	.word	0x3f91df46
 8003720:	00000000 	.word	0x00000000
 8003724:	41584dae 	.word	0x41584dae

08003728 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800373a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800374a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_APB1_GRP1_EnableClock>:
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003764:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003766:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4313      	orrs	r3, r2
 800376e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003774:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800377c:	68fb      	ldr	r3, [r7, #12]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003858 <MX_RTC_Init+0xcc>)
 80037a6:	4a2d      	ldr	r2, [pc, #180]	@ (800385c <MX_RTC_Init+0xd0>)
 80037a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003858 <MX_RTC_Init+0xcc>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80037b0:	4b29      	ldr	r3, [pc, #164]	@ (8003858 <MX_RTC_Init+0xcc>)
 80037b2:	227f      	movs	r2, #127	@ 0x7f
 80037b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80037b6:	4b28      	ldr	r3, [pc, #160]	@ (8003858 <MX_RTC_Init+0xcc>)
 80037b8:	f641 6284 	movw	r2, #7812	@ 0x1e84
 80037bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037be:	4b26      	ldr	r3, [pc, #152]	@ (8003858 <MX_RTC_Init+0xcc>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037c4:	4b24      	ldr	r3, [pc, #144]	@ (8003858 <MX_RTC_Init+0xcc>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037ca:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <MX_RTC_Init+0xcc>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037d0:	4b21      	ldr	r3, [pc, #132]	@ (8003858 <MX_RTC_Init+0xcc>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037d6:	4820      	ldr	r0, [pc, #128]	@ (8003858 <MX_RTC_Init+0xcc>)
 80037d8:	f009 ffea 	bl	800d7b0 <HAL_RTC_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80037e2:	f7ff fb05 	bl	8002df0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	2201      	movs	r2, #1
 8003802:	4619      	mov	r1, r3
 8003804:	4814      	ldr	r0, [pc, #80]	@ (8003858 <MX_RTC_Init+0xcc>)
 8003806:	f00a f883 	bl	800d910 <HAL_RTC_SetTime>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8003810:	f7ff faee 	bl	8002df0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003814:	2301      	movs	r3, #1
 8003816:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003818:	2301      	movs	r3, #1
 800381a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800381c:	2301      	movs	r3, #1
 800381e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003820:	2300      	movs	r3, #0
 8003822:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003824:	463b      	mov	r3, r7
 8003826:	2201      	movs	r2, #1
 8003828:	4619      	mov	r1, r3
 800382a:	480b      	ldr	r0, [pc, #44]	@ (8003858 <MX_RTC_Init+0xcc>)
 800382c:	f00a f934 	bl	800da98 <HAL_RTC_SetDate>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8003836:	f7ff fadb 	bl	8002df0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800383a:	2204      	movs	r2, #4
 800383c:	2100      	movs	r1, #0
 800383e:	4806      	ldr	r0, [pc, #24]	@ (8003858 <MX_RTC_Init+0xcc>)
 8003840:	f00a fa48 	bl	800dcd4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800384a:	f7ff fad1 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000d28 	.word	0x20000d28
 800385c:	40002800 	.word	0x40002800

08003860 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b096      	sub	sp, #88	@ 0x58
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003868:	f107 0308 	add.w	r3, r7, #8
 800386c:	2250      	movs	r2, #80	@ 0x50
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f017 ffca 	bl	801b80a <memset>
  if(rtcHandle->Instance==RTC)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a14      	ldr	r2, [pc, #80]	@ (80038cc <HAL_RTC_MspInit+0x6c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d121      	bne.n	80038c4 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003880:	f008 f9ba 	bl	800bbf8 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 8003884:	f008 f9b8 	bl	800bbf8 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003888:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800388c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800388e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003892:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003894:	f107 0308 	add.w	r3, r7, #8
 8003898:	4618      	mov	r0, r3
 800389a:	f009 fd02 	bl	800d2a2 <HAL_RCCEx_PeriphCLKConfig>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80038a4:	f7ff faa4 	bl	8002df0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038a8:	f7ff ff45 	bl	8003736 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80038ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80038b0:	f7ff ff52 	bl	8003758 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80038b4:	2200      	movs	r2, #0
 80038b6:	2100      	movs	r1, #0
 80038b8:	2003      	movs	r0, #3
 80038ba:	f005 f818 	bl	80088ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80038be:	2003      	movs	r0, #3
 80038c0:	f005 f82f 	bl	8008922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80038c4:	bf00      	nop
 80038c6:	3758      	adds	r7, #88	@ 0x58
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40002800 	.word	0x40002800

080038d0 <LL_AHB2_GRP1_EnableClock>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80038d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800390a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800390e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003910:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4313      	orrs	r3, r2
 8003918:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800391a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800391e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4013      	ands	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003926:	68fb      	ldr	r3, [r7, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003938:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <MX_SPI1_Init+0x74>)
 800393a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ac <MX_SPI1_Init+0x78>)
 800393c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800393e:	4b1a      	ldr	r3, [pc, #104]	@ (80039a8 <MX_SPI1_Init+0x74>)
 8003940:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003946:	4b18      	ldr	r3, [pc, #96]	@ (80039a8 <MX_SPI1_Init+0x74>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800394c:	4b16      	ldr	r3, [pc, #88]	@ (80039a8 <MX_SPI1_Init+0x74>)
 800394e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003952:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003954:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <MX_SPI1_Init+0x74>)
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800395a:	4b13      	ldr	r3, [pc, #76]	@ (80039a8 <MX_SPI1_Init+0x74>)
 800395c:	2200      	movs	r2, #0
 800395e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003960:	4b11      	ldr	r3, [pc, #68]	@ (80039a8 <MX_SPI1_Init+0x74>)
 8003962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003966:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003968:	4b0f      	ldr	r3, [pc, #60]	@ (80039a8 <MX_SPI1_Init+0x74>)
 800396a:	2210      	movs	r2, #16
 800396c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800396e:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <MX_SPI1_Init+0x74>)
 8003970:	2200      	movs	r2, #0
 8003972:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003974:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <MX_SPI1_Init+0x74>)
 8003976:	2200      	movs	r2, #0
 8003978:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <MX_SPI1_Init+0x74>)
 800397c:	2200      	movs	r2, #0
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003980:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <MX_SPI1_Init+0x74>)
 8003982:	2207      	movs	r2, #7
 8003984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003986:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <MX_SPI1_Init+0x74>)
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800398c:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <MX_SPI1_Init+0x74>)
 800398e:	2208      	movs	r2, #8
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003992:	4805      	ldr	r0, [pc, #20]	@ (80039a8 <MX_SPI1_Init+0x74>)
 8003994:	f00a fa5a 	bl	800de4c <HAL_SPI_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800399e:	f7ff fa27 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000d80 	.word	0x20000d80
 80039ac:	40013000 	.word	0x40013000

080039b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a46      	ldr	r2, [pc, #280]	@ (8003ae8 <HAL_SPI_MspInit+0x138>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	f040 8085 	bne.w	8003ade <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039d4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80039d8:	f7ff ff93 	bl	8003902 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039dc:	2001      	movs	r0, #1
 80039de:	f7ff ff77 	bl	80038d0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	2002      	movs	r0, #2
 80039e4:	f7ff ff74 	bl	80038d0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80039e8:	2342      	movs	r3, #66	@ 0x42
 80039ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039f8:	2305      	movs	r3, #5
 80039fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	4619      	mov	r1, r3
 8003a02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a06:	f005 fba5 	bl	8009154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a1a:	2305      	movs	r3, #5
 8003a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1e:	f107 030c 	add.w	r3, r7, #12
 8003a22:	4619      	mov	r1, r3
 8003a24:	4831      	ldr	r0, [pc, #196]	@ (8003aec <HAL_SPI_MspInit+0x13c>)
 8003a26:	f005 fb95 	bl	8009154 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003a2a:	4b31      	ldr	r3, [pc, #196]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a2c:	4a31      	ldr	r2, [pc, #196]	@ (8003af4 <HAL_SPI_MspInit+0x144>)
 8003a2e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003a30:	4b2f      	ldr	r3, [pc, #188]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a32:	2206      	movs	r2, #6
 8003a34:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a36:	4b2e      	ldr	r3, [pc, #184]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a42:	4b2b      	ldr	r3, [pc, #172]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a44:	2280      	movs	r2, #128	@ 0x80
 8003a46:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a48:	4b29      	ldr	r3, [pc, #164]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a4e:	4b28      	ldr	r3, [pc, #160]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003a54:	4b26      	ldr	r3, [pc, #152]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a5a:	4b25      	ldr	r3, [pc, #148]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003a60:	4823      	ldr	r0, [pc, #140]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a62:	f004 ffa3 	bl	80089ac <HAL_DMA_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003a6c:	f7ff f9c0 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a1f      	ldr	r2, [pc, #124]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a74:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a76:	4a1e      	ldr	r2, [pc, #120]	@ (8003af0 <HAL_SPI_MspInit+0x140>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003afc <HAL_SPI_MspInit+0x14c>)
 8003a80:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003a82:	4b1d      	ldr	r3, [pc, #116]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003a84:	2207      	movs	r2, #7
 8003a86:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a94:	4b18      	ldr	r3, [pc, #96]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003a96:	2280      	movs	r2, #128	@ 0x80
 8003a98:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a9a:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aa0:	4b15      	ldr	r3, [pc, #84]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003aa6:	4b14      	ldr	r3, [pc, #80]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003aac:	4b12      	ldr	r3, [pc, #72]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003ab2:	4811      	ldr	r0, [pc, #68]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003ab4:	f004 ff7a 	bl	80089ac <HAL_DMA_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8003abe:	f7ff f997 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003ac6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8003af8 <HAL_SPI_MspInit+0x148>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2103      	movs	r1, #3
 8003ad2:	2022      	movs	r0, #34	@ 0x22
 8003ad4:	f004 ff0b 	bl	80088ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003ad8:	2022      	movs	r0, #34	@ 0x22
 8003ada:	f004 ff22 	bl	8008922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40013000 	.word	0x40013000
 8003aec:	48000400 	.word	0x48000400
 8003af0:	20000de4 	.word	0x20000de4
 8003af4:	40020030 	.word	0x40020030
 8003af8:	20000e44 	.word	0x20000e44
 8003afc:	40020044 	.word	0x40020044

08003b00 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8003b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b04:	ed2d 8b02 	vpush	{d8}
 8003b08:	b0a7      	sub	sp, #156	@ 0x9c
 8003b0a:	af16      	add	r7, sp, #88	@ 0x58
 8003b0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8003b0e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8003b12:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003b16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b18:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b1a:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003b22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b24:	f7fc fce8 	bl	80004f8 <__aeabi_f2d>
 8003b28:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003b2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b2e:	f7fc fce3 	bl	80004f8 <__aeabi_f2d>
 8003b32:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fc fcdc 	bl	80004f8 <__aeabi_f2d>
 8003b40:	a332      	add	r3, pc, #200	@ (adr r3, 8003c0c <csvframe+0x10c>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f7fc fd2f 	bl	80005a8 <__aeabi_dmul>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	ec43 2b18 	vmov	d8, r2, r3
 8003b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b54:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fcc8 	bl	80004f8 <__aeabi_f2d>
 8003b68:	4682      	mov	sl, r0
 8003b6a:	468b      	mov	fp, r1
 8003b6c:	6a38      	ldr	r0, [r7, #32]
 8003b6e:	f7fc fcc3 	bl	80004f8 <__aeabi_f2d>
 8003b72:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf0 <csvframe+0xf0>)
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf4 <csvframe+0xf4>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf8 <csvframe+0xf8>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <csvframe+0xfc>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	461e      	mov	r6, r3
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <csvframe+0x100>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4b1c      	ldr	r3, [pc, #112]	@ (8003c04 <csvframe+0x104>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	9315      	str	r3, [sp, #84]	@ 0x54
 8003b96:	9214      	str	r2, [sp, #80]	@ 0x50
 8003b98:	9613      	str	r6, [sp, #76]	@ 0x4c
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	9212      	str	r2, [sp, #72]	@ 0x48
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	9211      	str	r2, [sp, #68]	@ 0x44
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	9310      	str	r3, [sp, #64]	@ 0x40
 8003ba6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	930c      	str	r3, [sp, #48]	@ 0x30
 8003bae:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003bb2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003bb6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003bba:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003bbe:	ed97 7b04 	vldr	d7, [r7, #16]
 8003bc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003bc6:	ed97 7b06 	vldr	d7, [r7, #24]
 8003bca:	ed8d 7b00 	vstr	d7, [sp]
 8003bce:	4a0e      	ldr	r2, [pc, #56]	@ (8003c08 <csvframe+0x108>)
 8003bd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bd4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003bd6:	f017 fd81 	bl	801b6dc <sniprintf>
 8003bda:	63f8      	str	r0, [r7, #60]	@ 0x3c
	return framesize;
 8003bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3744      	adds	r7, #68	@ 0x44
 8003be2:	46bd      	mov	sp, r7
 8003be4:	ecbd 8b02 	vpop	{d8}
 8003be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bec:	f3af 8000 	nop.w
 8003bf0:	20000012 	.word	0x20000012
 8003bf4:	20000011 	.word	0x20000011
 8003bf8:	20000010 	.word	0x20000010
 8003bfc:	20000b85 	.word	0x20000b85
 8003c00:	20000b86 	.word	0x20000b86
 8003c04:	20000b84 	.word	0x20000b84
 8003c08:	0801fd88 	.word	0x0801fd88
 8003c0c:	cccccccd 	.word	0xcccccccd
 8003c10:	400ccccc 	.word	0x400ccccc

08003c14 <storeindex>:


void storeindex(void){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b09c      	sub	sp, #112	@ 0x70
 8003c18:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8003c1a:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003c1e:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003c20:	463b      	mov	r3, r7
 8003c22:	2264      	movs	r2, #100	@ 0x64
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f017 fdef 	bl	801b80a <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8003c2c:	4b14      	ldr	r3, [pc, #80]	@ (8003c80 <storeindex+0x6c>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b14      	ldr	r3, [pc, #80]	@ (8003c84 <storeindex+0x70>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4638      	mov	r0, r7
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	4a13      	ldr	r2, [pc, #76]	@ (8003c88 <storeindex+0x74>)
 8003c3c:	2164      	movs	r1, #100	@ 0x64
 8003c3e:	f017 fd4d 	bl	801b6dc <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003c42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	da00      	bge.n	8003c4a <storeindex+0x36>
 8003c48:	330f      	adds	r3, #15
 8003c4a:	111b      	asrs	r3, r3, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fc fc41 	bl	80004d4 <__aeabi_i2d>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7fc ff55 	bl	8000b08 <__aeabi_d2iz>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4619      	mov	r1, r3
 8003c62:	480a      	ldr	r0, [pc, #40]	@ (8003c8c <storeindex+0x78>)
 8003c64:	f013 ffeb 	bl	8017c3e <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003c68:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003c6a:	463a      	mov	r2, r7
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2364      	movs	r3, #100	@ 0x64
 8003c72:	4806      	ldr	r0, [pc, #24]	@ (8003c8c <storeindex+0x78>)
 8003c74:	f014 f866 	bl	8017d44 <SPIF_WritePage>

}
 8003c78:	bf00      	nop
 8003c7a:	3768      	adds	r7, #104	@ 0x68
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000aa4 	.word	0x20000aa4
 8003c84:	20000aa8 	.word	0x20000aa8
 8003c88:	0801fddc 	.word	0x0801fddc
 8003c8c:	20000870 	.word	0x20000870

08003c90 <getindex>:

void getindex(void){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003c96:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003c9a:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	2332      	movs	r3, #50	@ 0x32
 8003ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8003d54 <getindex+0xc4>)
 8003ca6:	482c      	ldr	r0, [pc, #176]	@ (8003d58 <getindex+0xc8>)
 8003ca8:	f014 f86a 	bl	8017d80 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8003cac:	220a      	movs	r2, #10
 8003cae:	2124      	movs	r1, #36	@ 0x24
 8003cb0:	482a      	ldr	r0, [pc, #168]	@ (8003d5c <getindex+0xcc>)
 8003cb2:	f017 fdaa 	bl	801b80a <memset>
	memset(numbuf2,'$',10);
 8003cb6:	220a      	movs	r2, #10
 8003cb8:	2124      	movs	r1, #36	@ 0x24
 8003cba:	4829      	ldr	r0, [pc, #164]	@ (8003d60 <getindex+0xd0>)
 8003cbc:	f017 fda5 	bl	801b80a <memset>
	int cnt=0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003cc4:	4b23      	ldr	r3, [pc, #140]	@ (8003d54 <getindex+0xc4>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	2b09      	cmp	r3, #9
 8003cce:	dc3a      	bgt.n	8003d46 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003cd0:	e00b      	b.n	8003cea <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003cd2:	4a20      	ldr	r2, [pc, #128]	@ (8003d54 <getindex+0xc4>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	7819      	ldrb	r1, [r3, #0]
 8003cda:	4a20      	ldr	r2, [pc, #128]	@ (8003d5c <getindex+0xcc>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	460a      	mov	r2, r1
 8003ce2:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003cea:	4a1a      	ldr	r2, [pc, #104]	@ (8003d54 <getindex+0xc4>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b24      	cmp	r3, #36	@ 0x24
 8003cf4:	d1ed      	bne.n	8003cd2 <getindex+0x42>
		  }
		  cnt++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003d00:	e00e      	b.n	8003d20 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003d02:	4a14      	ldr	r2, [pc, #80]	@ (8003d54 <getindex+0xc4>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	7819      	ldrb	r1, [r3, #0]
 8003d0a:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <getindex+0xd0>)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4413      	add	r3, r2
 8003d10:	460a      	mov	r2, r1
 8003d12:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3301      	adds	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003d20:	4a0c      	ldr	r2, [pc, #48]	@ (8003d54 <getindex+0xc4>)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b24      	cmp	r3, #36	@ 0x24
 8003d2a:	d1ea      	bne.n	8003d02 <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003d2c:	480b      	ldr	r0, [pc, #44]	@ (8003d5c <getindex+0xcc>)
 8003d2e:	f015 fdf1 	bl	8019914 <atoi>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4a0b      	ldr	r2, [pc, #44]	@ (8003d64 <getindex+0xd4>)
 8003d36:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003d38:	4809      	ldr	r0, [pc, #36]	@ (8003d60 <getindex+0xd0>)
 8003d3a:	f015 fdeb 	bl	8019914 <atoi>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4a09      	ldr	r2, [pc, #36]	@ (8003d68 <getindex+0xd8>)
 8003d42:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003d44:	e001      	b.n	8003d4a <getindex+0xba>
		storeindex();
 8003d46:	f7ff ff65 	bl	8003c14 <storeindex>
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000d4c 	.word	0x20000d4c
 8003d58:	20000870 	.word	0x20000870
 8003d5c:	20000ab0 	.word	0x20000ab0
 8003d60:	20000abc 	.word	0x20000abc
 8003d64:	20000aa4 	.word	0x20000aa4
 8003d68:	20000aa8 	.word	0x20000aa8

08003d6c <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003d76:	4b3f      	ldr	r3, [pc, #252]	@ (8003e74 <writebuffertoflash+0x108>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11b      	bne.n	8003dbc <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003d84:	4b3c      	ldr	r3, [pc, #240]	@ (8003e78 <writebuffertoflash+0x10c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d117      	bne.n	8003dbc <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003d8c:	4b39      	ldr	r3, [pc, #228]	@ (8003e74 <writebuffertoflash+0x108>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da00      	bge.n	8003d98 <writebuffertoflash+0x2c>
 8003d96:	330f      	adds	r3, #15
 8003d98:	111b      	asrs	r3, r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fb9a 	bl	80004d4 <__aeabi_i2d>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	f7fc feae 	bl	8000b08 <__aeabi_d2iz>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4619      	mov	r1, r3
 8003db0:	4832      	ldr	r0, [pc, #200]	@ (8003e7c <writebuffertoflash+0x110>)
 8003db2:	f013 ff44 	bl	8017c3e <SPIF_EraseSector>
		sectoreraseen=1;
 8003db6:	4b30      	ldr	r3, [pc, #192]	@ (8003e78 <writebuffertoflash+0x10c>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003dbc:	4b30      	ldr	r3, [pc, #192]	@ (8003e80 <writebuffertoflash+0x114>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	2bff      	cmp	r3, #255	@ 0xff
 8003dc6:	dc11      	bgt.n	8003dec <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e74 <writebuffertoflash+0x108>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e80 <writebuffertoflash+0x114>)
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	9200      	str	r2, [sp, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4828      	ldr	r0, [pc, #160]	@ (8003e7c <writebuffertoflash+0x110>)
 8003dda:	f013 ffb3 	bl	8017d44 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003dde:	4b28      	ldr	r3, [pc, #160]	@ (8003e80 <writebuffertoflash+0x114>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	4a26      	ldr	r2, [pc, #152]	@ (8003e80 <writebuffertoflash+0x114>)
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e03c      	b.n	8003e66 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003dec:	4b21      	ldr	r3, [pc, #132]	@ (8003e74 <writebuffertoflash+0x108>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4619      	mov	r1, r3
 8003df2:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <writebuffertoflash+0x114>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <writebuffertoflash+0x114>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	481d      	ldr	r0, [pc, #116]	@ (8003e7c <writebuffertoflash+0x110>)
 8003e08:	f013 ff9c 	bl	8017d44 <SPIF_WritePage>
		HAL_Delay(100);
 8003e0c:	2064      	movs	r0, #100	@ 0x64
 8003e0e:	f7fd fc8e 	bl	800172e <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003e12:	4b18      	ldr	r3, [pc, #96]	@ (8003e74 <writebuffertoflash+0x108>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4618      	mov	r0, r3
 8003e1a:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <writebuffertoflash+0x114>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	1899      	adds	r1, r3, r2
 8003e28:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <writebuffertoflash+0x114>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	2300      	movs	r3, #0
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	460a      	mov	r2, r1
 8003e3e:	4601      	mov	r1, r0
 8003e40:	480e      	ldr	r0, [pc, #56]	@ (8003e7c <writebuffertoflash+0x110>)
 8003e42:	f013 ff7f 	bl	8017d44 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003e46:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <writebuffertoflash+0x108>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	4a09      	ldr	r2, [pc, #36]	@ (8003e74 <writebuffertoflash+0x108>)
 8003e4e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003e50:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <writebuffertoflash+0x10c>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003e56:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <writebuffertoflash+0x114>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	4a07      	ldr	r2, [pc, #28]	@ (8003e80 <writebuffertoflash+0x114>)
 8003e64:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003e66:	f7ff fed5 	bl	8003c14 <storeindex>

}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000aa8 	.word	0x20000aa8
 8003e78:	20000aac 	.word	0x20000aac
 8003e7c:	20000870 	.word	0x20000870
 8003e80:	20000aa4 	.word	0x20000aa4

08003e84 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af04      	add	r7, sp, #16
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	9302      	str	r3, [sp, #8]
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	1dfb      	adds	r3, r7, #7
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2301      	movs	r3, #1
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2178      	movs	r1, #120	@ 0x78
 8003eb2:	4803      	ldr	r0, [pc, #12]	@ (8003ec0 <ssd1306_WriteCommand+0x2c>)
 8003eb4:	f005 fcec 	bl	8009890 <HAL_I2C_Mem_Write>
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	2000054c 	.word	0x2000054c

08003ec4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af04      	add	r7, sp, #16
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed6:	9202      	str	r2, [sp, #8]
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2301      	movs	r3, #1
 8003ee0:	2240      	movs	r2, #64	@ 0x40
 8003ee2:	2178      	movs	r1, #120	@ 0x78
 8003ee4:	4803      	ldr	r0, [pc, #12]	@ (8003ef4 <ssd1306_WriteData+0x30>)
 8003ee6:	f005 fcd3 	bl	8009890 <HAL_I2C_Mem_Write>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000054c 	.word	0x2000054c

08003ef8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003efc:	f7ff ffc2 	bl	8003e84 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003f00:	2064      	movs	r0, #100	@ 0x64
 8003f02:	f7fd fc14 	bl	800172e <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003f06:	2000      	movs	r0, #0
 8003f08:	f000 fb1a 	bl	8004540 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003f0c:	2020      	movs	r0, #32
 8003f0e:	f7ff ffc1 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003f12:	2000      	movs	r0, #0
 8003f14:	f7ff ffbe 	bl	8003e94 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003f18:	20b0      	movs	r0, #176	@ 0xb0
 8003f1a:	f7ff ffbb 	bl	8003e94 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003f1e:	20c8      	movs	r0, #200	@ 0xc8
 8003f20:	f7ff ffb8 	bl	8003e94 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003f24:	2000      	movs	r0, #0
 8003f26:	f7ff ffb5 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003f2a:	2010      	movs	r0, #16
 8003f2c:	f7ff ffb2 	bl	8003e94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003f30:	2040      	movs	r0, #64	@ 0x40
 8003f32:	f7ff ffaf 	bl	8003e94 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003f36:	20ff      	movs	r0, #255	@ 0xff
 8003f38:	f000 faee 	bl	8004518 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003f3c:	20a1      	movs	r0, #161	@ 0xa1
 8003f3e:	f7ff ffa9 	bl	8003e94 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003f42:	20a6      	movs	r0, #166	@ 0xa6
 8003f44:	f7ff ffa6 	bl	8003e94 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003f48:	20a8      	movs	r0, #168	@ 0xa8
 8003f4a:	f7ff ffa3 	bl	8003e94 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003f4e:	203f      	movs	r0, #63	@ 0x3f
 8003f50:	f7ff ffa0 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003f54:	20a4      	movs	r0, #164	@ 0xa4
 8003f56:	f7ff ff9d 	bl	8003e94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003f5a:	20d3      	movs	r0, #211	@ 0xd3
 8003f5c:	f7ff ff9a 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003f60:	2000      	movs	r0, #0
 8003f62:	f7ff ff97 	bl	8003e94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003f66:	20d5      	movs	r0, #213	@ 0xd5
 8003f68:	f7ff ff94 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003f6c:	20f0      	movs	r0, #240	@ 0xf0
 8003f6e:	f7ff ff91 	bl	8003e94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003f72:	20d9      	movs	r0, #217	@ 0xd9
 8003f74:	f7ff ff8e 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003f78:	2022      	movs	r0, #34	@ 0x22
 8003f7a:	f7ff ff8b 	bl	8003e94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003f7e:	20da      	movs	r0, #218	@ 0xda
 8003f80:	f7ff ff88 	bl	8003e94 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003f84:	2012      	movs	r0, #18
 8003f86:	f7ff ff85 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003f8a:	20db      	movs	r0, #219	@ 0xdb
 8003f8c:	f7ff ff82 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003f90:	2020      	movs	r0, #32
 8003f92:	f7ff ff7f 	bl	8003e94 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003f96:	208d      	movs	r0, #141	@ 0x8d
 8003f98:	f7ff ff7c 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003f9c:	2014      	movs	r0, #20
 8003f9e:	f7ff ff79 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f000 facc 	bl	8004540 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f000 f80f 	bl	8003fcc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003fae:	f000 f825 	bl	8003ffc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003fb2:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <ssd1306_Init+0xd0>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	@ (8003fc8 <ssd1306_Init+0xd0>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003fbe:	4b02      	ldr	r3, [pc, #8]	@ (8003fc8 <ssd1306_Init+0xd0>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	711a      	strb	r2, [r3, #4]
}
 8003fc4:	bf00      	nop
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200012a4 	.word	0x200012a4

08003fcc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <ssd1306_Fill+0x14>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <ssd1306_Fill+0x16>
 8003fe0:	23ff      	movs	r3, #255	@ 0xff
 8003fe2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4803      	ldr	r0, [pc, #12]	@ (8003ff8 <ssd1306_Fill+0x2c>)
 8003fea:	f017 fc0e 	bl	801b80a <memset>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000ea4 	.word	0x20000ea4

08003ffc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004002:	2300      	movs	r3, #0
 8004004:	71fb      	strb	r3, [r7, #7]
 8004006:	e016      	b.n	8004036 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	3b50      	subs	r3, #80	@ 0x50
 800400c:	b2db      	uxtb	r3, r3
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff40 	bl	8003e94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004014:	2000      	movs	r0, #0
 8004016:	f7ff ff3d 	bl	8003e94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800401a:	2010      	movs	r0, #16
 800401c:	f7ff ff3a 	bl	8003e94 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	01db      	lsls	r3, r3, #7
 8004024:	4a08      	ldr	r2, [pc, #32]	@ (8004048 <ssd1306_UpdateScreen+0x4c>)
 8004026:	4413      	add	r3, r2
 8004028:	2180      	movs	r1, #128	@ 0x80
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff4a 	bl	8003ec4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	3301      	adds	r3, #1
 8004034:	71fb      	strb	r3, [r7, #7]
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2b07      	cmp	r3, #7
 800403a:	d9e5      	bls.n	8004008 <ssd1306_UpdateScreen+0xc>
    }
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000ea4 	.word	0x20000ea4

0800404c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
 8004056:	460b      	mov	r3, r1
 8004058:	71bb      	strb	r3, [r7, #6]
 800405a:	4613      	mov	r3, r2
 800405c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800405e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004062:	2b00      	cmp	r3, #0
 8004064:	db3d      	blt.n	80040e2 <ssd1306_DrawPixel+0x96>
 8004066:	79bb      	ldrb	r3, [r7, #6]
 8004068:	2b3f      	cmp	r3, #63	@ 0x3f
 800406a:	d83a      	bhi.n	80040e2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800406c:	797b      	ldrb	r3, [r7, #5]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d11a      	bne.n	80040a8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004072:	79fa      	ldrb	r2, [r7, #7]
 8004074:	79bb      	ldrb	r3, [r7, #6]
 8004076:	08db      	lsrs	r3, r3, #3
 8004078:	b2d8      	uxtb	r0, r3
 800407a:	4603      	mov	r3, r0
 800407c:	01db      	lsls	r3, r3, #7
 800407e:	4413      	add	r3, r2
 8004080:	4a1b      	ldr	r2, [pc, #108]	@ (80040f0 <ssd1306_DrawPixel+0xa4>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	b25a      	sxtb	r2, r3
 8004086:	79bb      	ldrb	r3, [r7, #6]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	2101      	movs	r1, #1
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	b25b      	sxtb	r3, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	b259      	sxtb	r1, r3
 8004098:	79fa      	ldrb	r2, [r7, #7]
 800409a:	4603      	mov	r3, r0
 800409c:	01db      	lsls	r3, r3, #7
 800409e:	4413      	add	r3, r2
 80040a0:	b2c9      	uxtb	r1, r1
 80040a2:	4a13      	ldr	r2, [pc, #76]	@ (80040f0 <ssd1306_DrawPixel+0xa4>)
 80040a4:	54d1      	strb	r1, [r2, r3]
 80040a6:	e01d      	b.n	80040e4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80040a8:	79fa      	ldrb	r2, [r7, #7]
 80040aa:	79bb      	ldrb	r3, [r7, #6]
 80040ac:	08db      	lsrs	r3, r3, #3
 80040ae:	b2d8      	uxtb	r0, r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	01db      	lsls	r3, r3, #7
 80040b4:	4413      	add	r3, r2
 80040b6:	4a0e      	ldr	r2, [pc, #56]	@ (80040f0 <ssd1306_DrawPixel+0xa4>)
 80040b8:	5cd3      	ldrb	r3, [r2, r3]
 80040ba:	b25a      	sxtb	r2, r3
 80040bc:	79bb      	ldrb	r3, [r7, #6]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	2101      	movs	r1, #1
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	4013      	ands	r3, r2
 80040d0:	b259      	sxtb	r1, r3
 80040d2:	79fa      	ldrb	r2, [r7, #7]
 80040d4:	4603      	mov	r3, r0
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	4413      	add	r3, r2
 80040da:	b2c9      	uxtb	r1, r1
 80040dc:	4a04      	ldr	r2, [pc, #16]	@ (80040f0 <ssd1306_DrawPixel+0xa4>)
 80040de:	54d1      	strb	r1, [r2, r3]
 80040e0:	e000      	b.n	80040e4 <ssd1306_DrawPixel+0x98>
        return;
 80040e2:	bf00      	nop
    }
}
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000ea4 	.word	0x20000ea4

080040f4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b089      	sub	sp, #36	@ 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4604      	mov	r4, r0
 80040fc:	1d38      	adds	r0, r7, #4
 80040fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8004102:	461a      	mov	r2, r3
 8004104:	4623      	mov	r3, r4
 8004106:	73fb      	strb	r3, [r7, #15]
 8004108:	4613      	mov	r3, r2
 800410a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b1f      	cmp	r3, #31
 8004110:	d902      	bls.n	8004118 <ssd1306_WriteChar+0x24>
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b7e      	cmp	r3, #126	@ 0x7e
 8004116:	d901      	bls.n	800411c <ssd1306_WriteChar+0x28>
        return 0;
 8004118:	2300      	movs	r3, #0
 800411a:	e06c      	b.n	80041f6 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800411c:	4b38      	ldr	r3, [pc, #224]	@ (8004200 <ssd1306_WriteChar+0x10c>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	793b      	ldrb	r3, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	2b80      	cmp	r3, #128	@ 0x80
 8004128:	dc06      	bgt.n	8004138 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800412a:	4b35      	ldr	r3, [pc, #212]	@ (8004200 <ssd1306_WriteChar+0x10c>)
 800412c:	885b      	ldrh	r3, [r3, #2]
 800412e:	461a      	mov	r2, r3
 8004130:	797b      	ldrb	r3, [r7, #5]
 8004132:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	dd01      	ble.n	800413c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004138:	2300      	movs	r3, #0
 800413a:	e05c      	b.n	80041f6 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	e04c      	b.n	80041dc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	3b20      	subs	r3, #32
 8004148:	7979      	ldrb	r1, [r7, #5]
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4619      	mov	r1, r3
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	440b      	add	r3, r1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800415c:	2300      	movs	r3, #0
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e034      	b.n	80041cc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d012      	beq.n	8004198 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004172:	4b23      	ldr	r3, [pc, #140]	@ (8004200 <ssd1306_WriteChar+0x10c>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	4413      	add	r3, r2
 800417e:	b2d8      	uxtb	r0, r3
 8004180:	4b1f      	ldr	r3, [pc, #124]	@ (8004200 <ssd1306_WriteChar+0x10c>)
 8004182:	885b      	ldrh	r3, [r3, #2]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	4413      	add	r3, r2
 800418c:	b2db      	uxtb	r3, r3
 800418e:	7bba      	ldrb	r2, [r7, #14]
 8004190:	4619      	mov	r1, r3
 8004192:	f7ff ff5b 	bl	800404c <ssd1306_DrawPixel>
 8004196:	e016      	b.n	80041c6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004198:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <ssd1306_WriteChar+0x10c>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	b2d8      	uxtb	r0, r3
 80041a6:	4b16      	ldr	r3, [pc, #88]	@ (8004200 <ssd1306_WriteChar+0x10c>)
 80041a8:	885b      	ldrh	r3, [r3, #2]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	b2d9      	uxtb	r1, r3
 80041b4:	7bbb      	ldrb	r3, [r7, #14]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	f7ff ff43 	bl	800404c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	793b      	ldrb	r3, [r7, #4]
 80041ce:	461a      	mov	r2, r3
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d3c5      	bcc.n	8004162 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3301      	adds	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	797b      	ldrb	r3, [r7, #5]
 80041de:	461a      	mov	r2, r3
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d3ad      	bcc.n	8004142 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80041e6:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <ssd1306_WriteChar+0x10c>)
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	793a      	ldrb	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	4b03      	ldr	r3, [pc, #12]	@ (8004200 <ssd1306_WriteChar+0x10c>)
 80041f2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	@ 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd90      	pop	{r4, r7, pc}
 80041fe:	bf00      	nop
 8004200:	200012a4 	.word	0x200012a4

08004204 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	1d38      	adds	r0, r7, #4
 800420e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004212:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004214:	e012      	b.n	800423c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	7818      	ldrb	r0, [r3, #0]
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	1d3a      	adds	r2, r7, #4
 800421e:	ca06      	ldmia	r2, {r1, r2}
 8004220:	f7ff ff68 	bl	80040f4 <ssd1306_WriteChar>
 8004224:	4603      	mov	r3, r0
 8004226:	461a      	mov	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d002      	beq.n	8004236 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	e008      	b.n	8004248 <ssd1306_WriteString+0x44>
        }
        str++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e8      	bne.n	8004216 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	781b      	ldrb	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	460a      	mov	r2, r1
 800425a:	71fb      	strb	r3, [r7, #7]
 800425c:	4613      	mov	r3, r2
 800425e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	b29a      	uxth	r2, r3
 8004264:	4b05      	ldr	r3, [pc, #20]	@ (800427c <ssd1306_SetCursor+0x2c>)
 8004266:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004268:	79bb      	ldrb	r3, [r7, #6]
 800426a:	b29a      	uxth	r2, r3
 800426c:	4b03      	ldr	r3, [pc, #12]	@ (800427c <ssd1306_SetCursor+0x2c>)
 800426e:	805a      	strh	r2, [r3, #2]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	200012a4 	.word	0x200012a4

08004280 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b089      	sub	sp, #36	@ 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	4604      	mov	r4, r0
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	461a      	mov	r2, r3
 800428e:	4623      	mov	r3, r4
 8004290:	71fb      	strb	r3, [r7, #7]
 8004292:	4603      	mov	r3, r0
 8004294:	71bb      	strb	r3, [r7, #6]
 8004296:	460b      	mov	r3, r1
 8004298:	717b      	strb	r3, [r7, #5]
 800429a:	4613      	mov	r3, r2
 800429c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800429e:	797a      	ldrb	r2, [r7, #5]
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bfb8      	it	lt
 80042a8:	425b      	neglt	r3, r3
 80042aa:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80042ac:	793a      	ldrb	r2, [r7, #4]
 80042ae:	79bb      	ldrb	r3, [r7, #6]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bfb8      	it	lt
 80042b6:	425b      	neglt	r3, r3
 80042b8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80042ba:	79fa      	ldrb	r2, [r7, #7]
 80042bc:	797b      	ldrb	r3, [r7, #5]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d201      	bcs.n	80042c6 <ssd1306_Line+0x46>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e001      	b.n	80042ca <ssd1306_Line+0x4a>
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ca:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80042cc:	79ba      	ldrb	r2, [r7, #6]
 80042ce:	793b      	ldrb	r3, [r7, #4]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d201      	bcs.n	80042d8 <ssd1306_Line+0x58>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e001      	b.n	80042dc <ssd1306_Line+0x5c>
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80042e6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80042ea:	7939      	ldrb	r1, [r7, #4]
 80042ec:	797b      	ldrb	r3, [r7, #5]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff feac 	bl	800404c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80042f4:	e024      	b.n	8004340 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80042f6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80042fa:	79b9      	ldrb	r1, [r7, #6]
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fea4 	bl	800404c <ssd1306_DrawPixel>
        error2 = error * 2;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	425b      	negs	r3, r3
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	dd08      	ble.n	8004326 <ssd1306_Line+0xa6>
            error -= deltaY;
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	4413      	add	r3, r2
 8004324:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	429a      	cmp	r2, r3
 800432c:	da08      	bge.n	8004340 <ssd1306_Line+0xc0>
            error += deltaX;
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	4413      	add	r3, r2
 8004334:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	b2da      	uxtb	r2, r3
 800433a:	79bb      	ldrb	r3, [r7, #6]
 800433c:	4413      	add	r3, r2
 800433e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004340:	79fa      	ldrb	r2, [r7, #7]
 8004342:	797b      	ldrb	r3, [r7, #5]
 8004344:	429a      	cmp	r2, r3
 8004346:	d1d6      	bne.n	80042f6 <ssd1306_Line+0x76>
 8004348:	79ba      	ldrb	r2, [r7, #6]
 800434a:	793b      	ldrb	r3, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d1d2      	bne.n	80042f6 <ssd1306_Line+0x76>
        }
    }
    return;
 8004350:	bf00      	nop
}
 8004352:	3724      	adds	r7, #36	@ 0x24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd90      	pop	{r4, r7, pc}

08004358 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b085      	sub	sp, #20
 800435c:	af02      	add	r7, sp, #8
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	4611      	mov	r1, r2
 8004364:	461a      	mov	r2, r3
 8004366:	4623      	mov	r3, r4
 8004368:	71fb      	strb	r3, [r7, #7]
 800436a:	4603      	mov	r3, r0
 800436c:	71bb      	strb	r3, [r7, #6]
 800436e:	460b      	mov	r3, r1
 8004370:	717b      	strb	r3, [r7, #5]
 8004372:	4613      	mov	r3, r2
 8004374:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004376:	79bc      	ldrb	r4, [r7, #6]
 8004378:	797a      	ldrb	r2, [r7, #5]
 800437a:	79b9      	ldrb	r1, [r7, #6]
 800437c:	79f8      	ldrb	r0, [r7, #7]
 800437e:	7e3b      	ldrb	r3, [r7, #24]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	4623      	mov	r3, r4
 8004384:	f7ff ff7c 	bl	8004280 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004388:	793c      	ldrb	r4, [r7, #4]
 800438a:	797a      	ldrb	r2, [r7, #5]
 800438c:	79b9      	ldrb	r1, [r7, #6]
 800438e:	7978      	ldrb	r0, [r7, #5]
 8004390:	7e3b      	ldrb	r3, [r7, #24]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	4623      	mov	r3, r4
 8004396:	f7ff ff73 	bl	8004280 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800439a:	793c      	ldrb	r4, [r7, #4]
 800439c:	79fa      	ldrb	r2, [r7, #7]
 800439e:	7939      	ldrb	r1, [r7, #4]
 80043a0:	7978      	ldrb	r0, [r7, #5]
 80043a2:	7e3b      	ldrb	r3, [r7, #24]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4623      	mov	r3, r4
 80043a8:	f7ff ff6a 	bl	8004280 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80043ac:	79bc      	ldrb	r4, [r7, #6]
 80043ae:	79fa      	ldrb	r2, [r7, #7]
 80043b0:	7939      	ldrb	r1, [r7, #4]
 80043b2:	79f8      	ldrb	r0, [r7, #7]
 80043b4:	7e3b      	ldrb	r3, [r7, #24]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	4623      	mov	r3, r4
 80043ba:	f7ff ff61 	bl	8004280 <ssd1306_Line>

    return;
 80043be:	bf00      	nop
}
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd90      	pop	{r4, r7, pc}

080043c6 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80043c6:	b590      	push	{r4, r7, lr}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4604      	mov	r4, r0
 80043ce:	4608      	mov	r0, r1
 80043d0:	4611      	mov	r1, r2
 80043d2:	461a      	mov	r2, r3
 80043d4:	4623      	mov	r3, r4
 80043d6:	71fb      	strb	r3, [r7, #7]
 80043d8:	4603      	mov	r3, r0
 80043da:	71bb      	strb	r3, [r7, #6]
 80043dc:	460b      	mov	r3, r1
 80043de:	717b      	strb	r3, [r7, #5]
 80043e0:	4613      	mov	r3, r2
 80043e2:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80043e4:	79fa      	ldrb	r2, [r7, #7]
 80043e6:	797b      	ldrb	r3, [r7, #5]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bf28      	it	cs
 80043ec:	4613      	movcs	r3, r2
 80043ee:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80043f0:	797a      	ldrb	r2, [r7, #5]
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	4293      	cmp	r3, r2
 80043f6:	bf38      	it	cc
 80043f8:	4613      	movcc	r3, r2
 80043fa:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80043fc:	79ba      	ldrb	r2, [r7, #6]
 80043fe:	793b      	ldrb	r3, [r7, #4]
 8004400:	4293      	cmp	r3, r2
 8004402:	bf28      	it	cs
 8004404:	4613      	movcs	r3, r2
 8004406:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004408:	793a      	ldrb	r2, [r7, #4]
 800440a:	79bb      	ldrb	r3, [r7, #6]
 800440c:	4293      	cmp	r3, r2
 800440e:	bf38      	it	cc
 8004410:	4613      	movcc	r3, r2
 8004412:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004414:	7afb      	ldrb	r3, [r7, #11]
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e017      	b.n	800444a <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800441a:	7b7b      	ldrb	r3, [r7, #13]
 800441c:	73bb      	strb	r3, [r7, #14]
 800441e:	e009      	b.n	8004434 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004420:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004424:	7bf9      	ldrb	r1, [r7, #15]
 8004426:	7bbb      	ldrb	r3, [r7, #14]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fe0f 	bl	800404c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800442e:	7bbb      	ldrb	r3, [r7, #14]
 8004430:	3301      	adds	r3, #1
 8004432:	73bb      	strb	r3, [r7, #14]
 8004434:	7bba      	ldrb	r2, [r7, #14]
 8004436:	7b3b      	ldrb	r3, [r7, #12]
 8004438:	429a      	cmp	r2, r3
 800443a:	d803      	bhi.n	8004444 <ssd1306_FillRectangle+0x7e>
 800443c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004440:	2b00      	cmp	r3, #0
 8004442:	daed      	bge.n	8004420 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	3301      	adds	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
 800444a:	7bfa      	ldrb	r2, [r7, #15]
 800444c:	7abb      	ldrb	r3, [r7, #10]
 800444e:	429a      	cmp	r2, r3
 8004450:	d803      	bhi.n	800445a <ssd1306_FillRectangle+0x94>
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b3f      	cmp	r3, #63	@ 0x3f
 8004456:	d9e0      	bls.n	800441a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004458:	bf00      	nop
 800445a:	bf00      	nop
}
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bd90      	pop	{r4, r7, pc}

08004462 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	603a      	str	r2, [r7, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	4603      	mov	r3, r0
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	460b      	mov	r3, r1
 8004472:	71bb      	strb	r3, [r7, #6]
 8004474:	4613      	mov	r3, r2
 8004476:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004478:	797b      	ldrb	r3, [r7, #5]
 800447a:	3307      	adds	r3, #7
 800447c:	2b00      	cmp	r3, #0
 800447e:	da00      	bge.n	8004482 <ssd1306_DrawBitmap+0x20>
 8004480:	3307      	adds	r3, #7
 8004482:	10db      	asrs	r3, r3, #3
 8004484:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	2b00      	cmp	r3, #0
 8004490:	db3e      	blt.n	8004510 <ssd1306_DrawBitmap+0xae>
 8004492:	79bb      	ldrb	r3, [r7, #6]
 8004494:	2b3f      	cmp	r3, #63	@ 0x3f
 8004496:	d83b      	bhi.n	8004510 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8004498:	2300      	movs	r3, #0
 800449a:	73bb      	strb	r3, [r7, #14]
 800449c:	e033      	b.n	8004506 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800449e:	2300      	movs	r3, #0
 80044a0:	737b      	strb	r3, [r7, #13]
 80044a2:	e026      	b.n	80044f2 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80044a4:	7b7b      	ldrb	r3, [r7, #13]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e00d      	b.n	80044d2 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80044b6:	7bbb      	ldrb	r3, [r7, #14]
 80044b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044bc:	fb02 f303 	mul.w	r3, r2, r3
 80044c0:	7b7a      	ldrb	r2, [r7, #13]
 80044c2:	08d2      	lsrs	r2, r2, #3
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	4413      	add	r3, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	4413      	add	r3, r2
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80044d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	da08      	bge.n	80044ec <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80044da:	79fa      	ldrb	r2, [r7, #7]
 80044dc:	7b7b      	ldrb	r3, [r7, #13]
 80044de:	4413      	add	r3, r2
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	7f3a      	ldrb	r2, [r7, #28]
 80044e4:	79b9      	ldrb	r1, [r7, #6]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fdb0 	bl	800404c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80044ec:	7b7b      	ldrb	r3, [r7, #13]
 80044ee:	3301      	adds	r3, #1
 80044f0:	737b      	strb	r3, [r7, #13]
 80044f2:	7b7a      	ldrb	r2, [r7, #13]
 80044f4:	797b      	ldrb	r3, [r7, #5]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d3d4      	bcc.n	80044a4 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80044fa:	7bbb      	ldrb	r3, [r7, #14]
 80044fc:	3301      	adds	r3, #1
 80044fe:	73bb      	strb	r3, [r7, #14]
 8004500:	79bb      	ldrb	r3, [r7, #6]
 8004502:	3301      	adds	r3, #1
 8004504:	71bb      	strb	r3, [r7, #6]
 8004506:	7bba      	ldrb	r2, [r7, #14]
 8004508:	7e3b      	ldrb	r3, [r7, #24]
 800450a:	429a      	cmp	r2, r3
 800450c:	d3c7      	bcc.n	800449e <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800450e:	e000      	b.n	8004512 <ssd1306_DrawBitmap+0xb0>
        return;
 8004510:	bf00      	nop
}
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004522:	2381      	movs	r3, #129	@ 0x81
 8004524:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fcb3 	bl	8003e94 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fcaf 	bl	8003e94 <ssd1306_WriteCommand>
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004550:	23af      	movs	r3, #175	@ 0xaf
 8004552:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004554:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <ssd1306_SetDisplayOn+0x38>)
 8004556:	2201      	movs	r2, #1
 8004558:	715a      	strb	r2, [r3, #5]
 800455a:	e004      	b.n	8004566 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800455c:	23ae      	movs	r3, #174	@ 0xae
 800455e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <ssd1306_SetDisplayOn+0x38>)
 8004562:	2200      	movs	r2, #0
 8004564:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fc93 	bl	8003e94 <ssd1306_WriteCommand>
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	200012a4 	.word	0x200012a4
 800457c:	00000000 	.word	0x00000000

08004580 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b087      	sub	sp, #28
 8004584:	af02      	add	r7, sp, #8
 8004586:	ed87 0a03 	vstr	s0, [r7, #12]
 800458a:	60b8      	str	r0, [r7, #8]
 800458c:	6079      	str	r1, [r7, #4]
 800458e:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	330f      	adds	r3, #15
 8004596:	b2d8      	uxtb	r0, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3301      	adds	r3, #1
 800459e:	b2d9      	uxtb	r1, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	330f      	adds	r3, #15
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	3305      	adds	r3, #5
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2401      	movs	r4, #1
 80045b2:	9400      	str	r4, [sp, #0]
 80045b4:	f7ff fe64 	bl	8004280 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3310      	adds	r3, #16
 80045be:	b2d8      	uxtb	r0, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	3301      	adds	r3, #1
 80045c6:	b2d9      	uxtb	r1, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3310      	adds	r3, #16
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3305      	adds	r3, #5
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2401      	movs	r4, #1
 80045da:	9400      	str	r4, [sp, #0]
 80045dc:	f7ff fe50 	bl	8004280 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	b2d8      	uxtb	r0, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	b2d9      	uxtb	r1, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	330e      	adds	r3, #14
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3306      	adds	r3, #6
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2401      	movs	r4, #1
 80045fa:	9400      	str	r4, [sp, #0]
 80045fc:	f7ff feac 	bl	8004358 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7fb ff79 	bl	80004f8 <__aeabi_f2d>
 8004606:	a396      	add	r3, pc, #600	@ (adr r3, 8004860 <batterygauge+0x2e0>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f7fc fa48 	bl	8000aa0 <__aeabi_dcmple>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d02a      	beq.n	800466c <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	3302      	adds	r3, #2
 800461c:	b2d8      	uxtb	r0, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	3302      	adds	r3, #2
 8004624:	b2d9      	uxtb	r1, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	3303      	adds	r3, #3
 800462c:	b2da      	uxtb	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	3304      	adds	r3, #4
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2401      	movs	r4, #1
 8004638:	9400      	str	r4, [sp, #0]
 800463a:	f7ff fe8d 	bl	8004358 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d113      	bne.n	800466c <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	3302      	adds	r3, #2
 800464a:	b2d8      	uxtb	r0, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	3302      	adds	r3, #2
 8004652:	b2d9      	uxtb	r1, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	3303      	adds	r3, #3
 800465a:	b2da      	uxtb	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	3304      	adds	r3, #4
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2401      	movs	r4, #1
 8004666:	9400      	str	r4, [sp, #0]
 8004668:	f7ff fe76 	bl	8004358 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7fb ff43 	bl	80004f8 <__aeabi_f2d>
 8004672:	a37b      	add	r3, pc, #492	@ (adr r3, 8004860 <batterygauge+0x2e0>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fc fa26 	bl	8000ac8 <__aeabi_dcmpgt>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d035      	beq.n	80046ee <batterygauge+0x16e>
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7fb ff38 	bl	80004f8 <__aeabi_f2d>
 8004688:	a377      	add	r3, pc, #476	@ (adr r3, 8004868 <batterygauge+0x2e8>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fc fa07 	bl	8000aa0 <__aeabi_dcmple>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d02a      	beq.n	80046ee <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	3302      	adds	r3, #2
 800469e:	b2d8      	uxtb	r0, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	3302      	adds	r3, #2
 80046a6:	b2d9      	uxtb	r1, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	3303      	adds	r3, #3
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	3304      	adds	r3, #4
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2401      	movs	r4, #1
 80046ba:	9400      	str	r4, [sp, #0]
 80046bc:	f7ff fe4c 	bl	8004358 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d113      	bne.n	80046ee <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	3305      	adds	r3, #5
 80046cc:	b2d8      	uxtb	r0, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	3302      	adds	r3, #2
 80046d4:	b2d9      	uxtb	r1, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	3306      	adds	r3, #6
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	3304      	adds	r3, #4
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2401      	movs	r4, #1
 80046e8:	9400      	str	r4, [sp, #0]
 80046ea:	f7ff fe35 	bl	8004358 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7fb ff02 	bl	80004f8 <__aeabi_f2d>
 80046f4:	a35c      	add	r3, pc, #368	@ (adr r3, 8004868 <batterygauge+0x2e8>)
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	f7fc f9e5 	bl	8000ac8 <__aeabi_dcmpgt>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d049      	beq.n	8004798 <batterygauge+0x218>
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7fb fef7 	bl	80004f8 <__aeabi_f2d>
 800470a:	a359      	add	r3, pc, #356	@ (adr r3, 8004870 <batterygauge+0x2f0>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f7fc f9c6 	bl	8000aa0 <__aeabi_dcmple>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d03e      	beq.n	8004798 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	3302      	adds	r3, #2
 8004720:	b2d8      	uxtb	r0, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	3302      	adds	r3, #2
 8004728:	b2d9      	uxtb	r1, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3303      	adds	r3, #3
 8004730:	b2da      	uxtb	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	3304      	adds	r3, #4
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2401      	movs	r4, #1
 800473c:	9400      	str	r4, [sp, #0]
 800473e:	f7ff fe0b 	bl	8004358 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3305      	adds	r3, #5
 8004748:	b2d8      	uxtb	r0, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	3302      	adds	r3, #2
 8004750:	b2d9      	uxtb	r1, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	3306      	adds	r3, #6
 8004758:	b2da      	uxtb	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	3304      	adds	r3, #4
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2401      	movs	r4, #1
 8004764:	9400      	str	r4, [sp, #0]
 8004766:	f7ff fdf7 	bl	8004358 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d113      	bne.n	8004798 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3308      	adds	r3, #8
 8004776:	b2d8      	uxtb	r0, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3302      	adds	r3, #2
 800477e:	b2d9      	uxtb	r1, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	3309      	adds	r3, #9
 8004786:	b2da      	uxtb	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3304      	adds	r3, #4
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2401      	movs	r4, #1
 8004792:	9400      	str	r4, [sp, #0]
 8004794:	f7ff fde0 	bl	8004358 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7fb fead 	bl	80004f8 <__aeabi_f2d>
 800479e:	a334      	add	r3, pc, #208	@ (adr r3, 8004870 <batterygauge+0x2f0>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f7fc f990 	bl	8000ac8 <__aeabi_dcmpgt>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d100      	bne.n	80047b0 <batterygauge+0x230>
	}




}
 80047ae:	e052      	b.n	8004856 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	3302      	adds	r3, #2
 80047b6:	b2d8      	uxtb	r0, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	3302      	adds	r3, #2
 80047be:	b2d9      	uxtb	r1, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	3303      	adds	r3, #3
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3304      	adds	r3, #4
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2401      	movs	r4, #1
 80047d2:	9400      	str	r4, [sp, #0]
 80047d4:	f7ff fdc0 	bl	8004358 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3305      	adds	r3, #5
 80047de:	b2d8      	uxtb	r0, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3302      	adds	r3, #2
 80047e6:	b2d9      	uxtb	r1, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3306      	adds	r3, #6
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3304      	adds	r3, #4
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2401      	movs	r4, #1
 80047fa:	9400      	str	r4, [sp, #0]
 80047fc:	f7ff fdac 	bl	8004358 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	3308      	adds	r3, #8
 8004806:	b2d8      	uxtb	r0, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3302      	adds	r3, #2
 800480e:	b2d9      	uxtb	r1, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3309      	adds	r3, #9
 8004816:	b2da      	uxtb	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	3304      	adds	r3, #4
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2401      	movs	r4, #1
 8004822:	9400      	str	r4, [sp, #0]
 8004824:	f7ff fd98 	bl	8004358 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d113      	bne.n	8004856 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	330b      	adds	r3, #11
 8004834:	b2d8      	uxtb	r0, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	3302      	adds	r3, #2
 800483c:	b2d9      	uxtb	r1, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	330c      	adds	r3, #12
 8004844:	b2da      	uxtb	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	3304      	adds	r3, #4
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2401      	movs	r4, #1
 8004850:	9400      	str	r4, [sp, #0]
 8004852:	f7ff fd81 	bl	8004358 <ssd1306_DrawRectangle>
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	bd90      	pop	{r4, r7, pc}
 800485e:	bf00      	nop
 8004860:	9999999a 	.word	0x9999999a
 8004864:	400d9999 	.word	0x400d9999
 8004868:	33333333 	.word	0x33333333
 800486c:	400f3333 	.word	0x400f3333
 8004870:	66666666 	.word	0x66666666
 8004874:	40106666 	.word	0x40106666

08004878 <percentage>:

void percentage(float percent){
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af02      	add	r7, sp, #8
 800487e:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 20, floor(0.64*percent+32), 36, White);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fb fe38 	bl	80004f8 <__aeabi_f2d>
 8004888:	a329      	add	r3, pc, #164	@ (adr r3, 8004930 <percentage+0xb8>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	f7fb fe8b 	bl	80005a8 <__aeabi_dmul>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4610      	mov	r0, r2
 8004898:	4619      	mov	r1, r3
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	4b20      	ldr	r3, [pc, #128]	@ (8004920 <percentage+0xa8>)
 80048a0:	f7fb fccc 	bl	800023c <__adddf3>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	ec43 2b17 	vmov	d7, r2, r3
 80048ac:	eeb0 0a47 	vmov.f32	s0, s14
 80048b0:	eef0 0a67 	vmov.f32	s1, s15
 80048b4:	f019 fe04 	bl	801e4c0 <floor>
 80048b8:	ec53 2b10 	vmov	r2, r3, d0
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	f7fc f94a 	bl	8000b58 <__aeabi_d2uiz>
 80048c4:	4603      	mov	r3, r0
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	2301      	movs	r3, #1
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	2324      	movs	r3, #36	@ 0x24
 80048ce:	2114      	movs	r1, #20
 80048d0:	2020      	movs	r0, #32
 80048d2:	f7ff fd78 	bl	80043c6 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 20, 95, 36, White);
 80048d6:	2301      	movs	r3, #1
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2324      	movs	r3, #36	@ 0x24
 80048dc:	225f      	movs	r2, #95	@ 0x5f
 80048de:	2114      	movs	r1, #20
 80048e0:	2020      	movs	r0, #32
 80048e2:	f7ff fd39 	bl	8004358 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fb fe06 	bl	80004f8 <__aeabi_f2d>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	e9cd 2300 	strd	r2, r3, [sp]
 80048f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004924 <percentage+0xac>)
 80048f6:	2114      	movs	r1, #20
 80048f8:	480b      	ldr	r0, [pc, #44]	@ (8004928 <percentage+0xb0>)
 80048fa:	f016 feef 	bl	801b6dc <sniprintf>
	ssd1306_SetCursor(45,24);
 80048fe:	2118      	movs	r1, #24
 8004900:	202d      	movs	r0, #45	@ 0x2d
 8004902:	f7ff fca5 	bl	8004250 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8004906:	4a09      	ldr	r2, [pc, #36]	@ (800492c <percentage+0xb4>)
 8004908:	2301      	movs	r3, #1
 800490a:	ca06      	ldmia	r2, {r1, r2}
 800490c:	4806      	ldr	r0, [pc, #24]	@ (8004928 <percentage+0xb0>)
 800490e:	f7ff fc79 	bl	8004204 <ssd1306_WriteString>


}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	f3af 8000 	nop.w
 8004920:	40400000 	.word	0x40400000
 8004924:	0801fde4 	.word	0x0801fde4
 8004928:	20000ac8 	.word	0x20000ac8
 800492c:	20000014 	.word	0x20000014
 8004930:	47ae147b 	.word	0x47ae147b
 8004934:	3fe47ae1 	.word	0x3fe47ae1

08004938 <statemachine>:





void statemachine(void){
 8004938:	b5b0      	push	{r4, r5, r7, lr}
 800493a:	ed2d 8b02 	vpush	{d8}
 800493e:	b08a      	sub	sp, #40	@ 0x28
 8004940:	af04      	add	r7, sp, #16
	switch(state){
 8004942:	4b9f      	ldr	r3, [pc, #636]	@ (8004bc0 <statemachine+0x288>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b05      	cmp	r3, #5
 8004948:	f201 85c4 	bhi.w	80064d4 <statemachine+0x1b9c>
 800494c:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <statemachine+0x1c>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	0800496d 	.word	0x0800496d
 8004958:	08004d8b 	.word	0x08004d8b
 800495c:	080055ef 	.word	0x080055ef
 8004960:	08005cf5 	.word	0x08005cf5
 8004964:	08005f55 	.word	0x08005f55
 8004968:	080063fd 	.word	0x080063fd
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 800496c:	2000      	movs	r0, #0
 800496e:	f7ff fb2d 	bl	8003fcc <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8004972:	2120      	movs	r1, #32
 8004974:	2020      	movs	r0, #32
 8004976:	f7ff fc6b 	bl	8004250 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 800497a:	4992      	ldr	r1, [pc, #584]	@ (8004bc4 <statemachine+0x28c>)
 800497c:	4892      	ldr	r0, [pc, #584]	@ (8004bc8 <statemachine+0x290>)
 800497e:	f7fe fd55 	bl	800342c <nmea_parse>
				 if(myData.speed>=vitmax){
 8004982:	4b91      	ldr	r3, [pc, #580]	@ (8004bc8 <statemachine+0x290>)
 8004984:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004988:	4b90      	ldr	r3, [pc, #576]	@ (8004bcc <statemachine+0x294>)
 800498a:	edd3 7a00 	vldr	s15, [r3]
 800498e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	db03      	blt.n	80049a0 <statemachine+0x68>
									 vitmax=myData.speed;
 8004998:	4b8b      	ldr	r3, [pc, #556]	@ (8004bc8 <statemachine+0x290>)
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	4a8b      	ldr	r2, [pc, #556]	@ (8004bcc <statemachine+0x294>)
 800499e:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
								 float sec=0;
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 80049ac:	4b86      	ldr	r3, [pc, #536]	@ (8004bc8 <statemachine+0x290>)
 80049ae:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80049b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	d032      	beq.n	8004a22 <statemachine+0xea>
									 pace=1000/(60*myData.speed);
 80049bc:	4b82      	ldr	r3, [pc, #520]	@ (8004bc8 <statemachine+0x290>)
 80049be:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80049c2:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8004bd0 <statemachine+0x298>
 80049c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049ca:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8004bd4 <statemachine+0x29c>
 80049ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d2:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 80049d6:	6978      	ldr	r0, [r7, #20]
 80049d8:	f7fb fd8e 	bl	80004f8 <__aeabi_f2d>
 80049dc:	4604      	mov	r4, r0
 80049de:	460d      	mov	r5, r1
 80049e0:	6978      	ldr	r0, [r7, #20]
 80049e2:	f7fb fd89 	bl	80004f8 <__aeabi_f2d>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	ec43 2b10 	vmov	d0, r2, r3
 80049ee:	f019 fd67 	bl	801e4c0 <floor>
 80049f2:	ec53 2b10 	vmov	r2, r3, d0
 80049f6:	4620      	mov	r0, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	f7fb fc1d 	bl	8000238 <__aeabi_dsub>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	4b73      	ldr	r3, [pc, #460]	@ (8004bd8 <statemachine+0x2a0>)
 8004a0c:	f7fb fdcc 	bl	80005a8 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	f7fc f8be 	bl	8000b98 <__aeabi_d2f>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e001      	b.n	8004a26 <statemachine+0xee>
								 }
								 else {
									 pace=99;
 8004a22:	4b6e      	ldr	r3, [pc, #440]	@ (8004bdc <statemachine+0x2a4>)
 8004a24:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 8004a26:	4b6e      	ldr	r3, [pc, #440]	@ (8004be0 <statemachine+0x2a8>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	f000 80f0 	beq.w	8004c10 <statemachine+0x2d8>
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	f300 8164 	bgt.w	8004cfe <statemachine+0x3c6>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <statemachine+0x108>
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d05d      	beq.n	8004afa <statemachine+0x1c2>
 8004a3e:	e15e      	b.n	8004cfe <statemachine+0x3c6>


				 case STATE_GROS:


						ssd1306_SetCursor(32, 12);
 8004a40:	210c      	movs	r1, #12
 8004a42:	2020      	movs	r0, #32
 8004a44:	f7ff fc04 	bl	8004250 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004a48:	4b5f      	ldr	r3, [pc, #380]	@ (8004bc8 <statemachine+0x290>)
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fb fd53 	bl	80004f8 <__aeabi_f2d>
 8004a52:	a359      	add	r3, pc, #356	@ (adr r3, 8004bb8 <statemachine+0x280>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fda6 	bl	80005a8 <__aeabi_dmul>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	e9cd 2300 	strd	r2, r3, [sp]
 8004a64:	4a5f      	ldr	r2, [pc, #380]	@ (8004be4 <statemachine+0x2ac>)
 8004a66:	210f      	movs	r1, #15
 8004a68:	485f      	ldr	r0, [pc, #380]	@ (8004be8 <statemachine+0x2b0>)
 8004a6a:	f016 fe37 	bl	801b6dc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8004a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bec <statemachine+0x2b4>)
 8004a70:	2301      	movs	r3, #1
 8004a72:	ca06      	ldmia	r2, {r1, r2}
 8004a74:	485c      	ldr	r0, [pc, #368]	@ (8004be8 <statemachine+0x2b0>)
 8004a76:	f7ff fbc5 	bl	8004204 <ssd1306_WriteString>
						ssd1306_SetCursor(32, 30);
 8004a7a:	211e      	movs	r1, #30
 8004a7c:	2020      	movs	r0, #32
 8004a7e:	f7ff fbe7 	bl	8004250 <ssd1306_SetCursor>
						ssd1306_WriteString("vit(kmh)", Font_6x8, White);
 8004a82:	4a5b      	ldr	r2, [pc, #364]	@ (8004bf0 <statemachine+0x2b8>)
 8004a84:	2301      	movs	r3, #1
 8004a86:	ca06      	ldmia	r2, {r1, r2}
 8004a88:	485a      	ldr	r0, [pc, #360]	@ (8004bf4 <statemachine+0x2bc>)
 8004a8a:	f7ff fbbb 	bl	8004204 <ssd1306_WriteString>
						ssd1306_SetCursor(32, 38);
 8004a8e:	2126      	movs	r1, #38	@ 0x26
 8004a90:	2020      	movs	r0, #32
 8004a92:	f7ff fbdd 	bl	8004250 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "max=%0.1fkmh",(vitmax)*3.6);
 8004a96:	4b4d      	ldr	r3, [pc, #308]	@ (8004bcc <statemachine+0x294>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fb fd2c 	bl	80004f8 <__aeabi_f2d>
 8004aa0:	a345      	add	r3, pc, #276	@ (adr r3, 8004bb8 <statemachine+0x280>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fb fd7f 	bl	80005a8 <__aeabi_dmul>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	e9cd 2300 	strd	r2, r3, [sp]
 8004ab2:	4a51      	ldr	r2, [pc, #324]	@ (8004bf8 <statemachine+0x2c0>)
 8004ab4:	210f      	movs	r1, #15
 8004ab6:	484c      	ldr	r0, [pc, #304]	@ (8004be8 <statemachine+0x2b0>)
 8004ab8:	f016 fe10 	bl	801b6dc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004abc:	4a4c      	ldr	r2, [pc, #304]	@ (8004bf0 <statemachine+0x2b8>)
 8004abe:	2301      	movs	r3, #1
 8004ac0:	ca06      	ldmia	r2, {r1, r2}
 8004ac2:	4849      	ldr	r0, [pc, #292]	@ (8004be8 <statemachine+0x2b0>)
 8004ac4:	f7ff fb9e 	bl	8004204 <ssd1306_WriteString>
						batterygauge(vbat,83, 30,1);
 8004ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8004bfc <statemachine+0x2c4>)
 8004aca:	edd3 7a00 	vldr	s15, [r3]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	211e      	movs	r1, #30
 8004ad2:	2053      	movs	r0, #83	@ 0x53
 8004ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad8:	f7ff fd52 	bl	8004580 <batterygauge>

					 if(BTN_B>=1){
 8004adc:	4b48      	ldr	r3, [pc, #288]	@ (8004c00 <statemachine+0x2c8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f340 8107 	ble.w	8004cf4 <statemachine+0x3bc>
							spdstate++;
 8004ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8004be0 <statemachine+0x2a8>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	4b3c      	ldr	r3, [pc, #240]	@ (8004be0 <statemachine+0x2a8>)
 8004af0:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8004af2:	4b43      	ldr	r3, [pc, #268]	@ (8004c00 <statemachine+0x2c8>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
					 					 				  	}




				  break;
 8004af8:	e0fc      	b.n	8004cf4 <statemachine+0x3bc>
				 case STATE_GROS1:

					 ssd1306_SetCursor(32, 12);
 8004afa:	210c      	movs	r1, #12
 8004afc:	2020      	movs	r0, #32
 8004afe:	f7ff fba7 	bl	8004250 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1fkmh",vitmax*3.6);
 8004b02:	4b32      	ldr	r3, [pc, #200]	@ (8004bcc <statemachine+0x294>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fb fcf6 	bl	80004f8 <__aeabi_f2d>
 8004b0c:	a32a      	add	r3, pc, #168	@ (adr r3, 8004bb8 <statemachine+0x280>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fd49 	bl	80005a8 <__aeabi_dmul>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	e9cd 2300 	strd	r2, r3, [sp]
 8004b1e:	4a39      	ldr	r2, [pc, #228]	@ (8004c04 <statemachine+0x2cc>)
 8004b20:	210f      	movs	r1, #15
 8004b22:	4831      	ldr	r0, [pc, #196]	@ (8004be8 <statemachine+0x2b0>)
 8004b24:	f016 fdda 	bl	801b6dc <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8004b28:	4a30      	ldr	r2, [pc, #192]	@ (8004bec <statemachine+0x2b4>)
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	ca06      	ldmia	r2, {r1, r2}
 8004b2e:	482e      	ldr	r0, [pc, #184]	@ (8004be8 <statemachine+0x2b0>)
 8004b30:	f7ff fb68 	bl	8004204 <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 30);
 8004b34:	211e      	movs	r1, #30
 8004b36:	2020      	movs	r0, #32
 8004b38:	f7ff fb8a 	bl	8004250 <ssd1306_SetCursor>
					 ssd1306_WriteString("maxspeed", Font_6x8, White);
 8004b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf0 <statemachine+0x2b8>)
 8004b3e:	2301      	movs	r3, #1
 8004b40:	ca06      	ldmia	r2, {r1, r2}
 8004b42:	4831      	ldr	r0, [pc, #196]	@ (8004c08 <statemachine+0x2d0>)
 8004b44:	f7ff fb5e 	bl	8004204 <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 38);
 8004b48:	2126      	movs	r1, #38	@ 0x26
 8004b4a:	2020      	movs	r0, #32
 8004b4c:	f7ff fb80 	bl	8004250 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "V=%0.1fkmh",(myData.speed)*3.6);
 8004b50:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc8 <statemachine+0x290>)
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fb fccf 	bl	80004f8 <__aeabi_f2d>
 8004b5a:	a317      	add	r3, pc, #92	@ (adr r3, 8004bb8 <statemachine+0x280>)
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f7fb fd22 	bl	80005a8 <__aeabi_dmul>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	e9cd 2300 	strd	r2, r3, [sp]
 8004b6c:	4a27      	ldr	r2, [pc, #156]	@ (8004c0c <statemachine+0x2d4>)
 8004b6e:	210f      	movs	r1, #15
 8004b70:	481d      	ldr	r0, [pc, #116]	@ (8004be8 <statemachine+0x2b0>)
 8004b72:	f016 fdb3 	bl	801b6dc <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004b76:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf0 <statemachine+0x2b8>)
 8004b78:	2301      	movs	r3, #1
 8004b7a:	ca06      	ldmia	r2, {r1, r2}
 8004b7c:	481a      	ldr	r0, [pc, #104]	@ (8004be8 <statemachine+0x2b0>)
 8004b7e:	f7ff fb41 	bl	8004204 <ssd1306_WriteString>
					 batterygauge(vbat,83, 30,1);
 8004b82:	4b1e      	ldr	r3, [pc, #120]	@ (8004bfc <statemachine+0x2c4>)
 8004b84:	edd3 7a00 	vldr	s15, [r3]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	211e      	movs	r1, #30
 8004b8c:	2053      	movs	r0, #83	@ 0x53
 8004b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b92:	f7ff fcf5 	bl	8004580 <batterygauge>





					 if(BTN_B>=1){
 8004b96:	4b1a      	ldr	r3, [pc, #104]	@ (8004c00 <statemachine+0x2c8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f340 80ac 	ble.w	8004cf8 <statemachine+0x3c0>
					 							spdstate++;
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8004be0 <statemachine+0x2a8>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <statemachine+0x2a8>)
 8004baa:	701a      	strb	r2, [r3, #0]
					 							BTN_B=0;
 8004bac:	4b14      	ldr	r3, [pc, #80]	@ (8004c00 <statemachine+0x2c8>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

					 					 					 				  	}



					 break;
 8004bb2:	e0a1      	b.n	8004cf8 <statemachine+0x3c0>
 8004bb4:	f3af 8000 	nop.w
 8004bb8:	cccccccd 	.word	0xcccccccd
 8004bbc:	400ccccc 	.word	0x400ccccc
 8004bc0:	200005dc 	.word	0x200005dc
 8004bc4:	20000628 	.word	0x20000628
 8004bc8:	20000828 	.word	0x20000828
 8004bcc:	20000b3c 	.word	0x20000b3c
 8004bd0:	42700000 	.word	0x42700000
 8004bd4:	447a0000 	.word	0x447a0000
 8004bd8:	404e0000 	.word	0x404e0000
 8004bdc:	42c60000 	.word	0x42c60000
 8004be0:	200005dd 	.word	0x200005dd
 8004be4:	0801fdf0 	.word	0x0801fdf0
 8004be8:	20000ac8 	.word	0x20000ac8
 8004bec:	20000024 	.word	0x20000024
 8004bf0:	20000014 	.word	0x20000014
 8004bf4:	0801fdf8 	.word	0x0801fdf8
 8004bf8:	0801fe04 	.word	0x0801fe04
 8004bfc:	200008a0 	.word	0x200008a0
 8004c00:	2000086c 	.word	0x2000086c
 8004c04:	0801fe14 	.word	0x0801fe14
 8004c08:	0801fe20 	.word	0x0801fe20
 8004c0c:	0801fe2c 	.word	0x0801fe2c
				  case STATE_SUMMARY:
				  						ssd1306_SetCursor(32, 12);
 8004c10:	210c      	movs	r1, #12
 8004c12:	2020      	movs	r0, #32
 8004c14:	f7ff fb1c 	bl	8004250 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 8004c18:	6978      	ldr	r0, [r7, #20]
 8004c1a:	f7fb fc6d 	bl	80004f8 <__aeabi_f2d>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	ec43 2b10 	vmov	d0, r2, r3
 8004c26:	f019 fc4b 	bl	801e4c0 <floor>
 8004c2a:	eeb0 8a40 	vmov.f32	s16, s0
 8004c2e:	eef0 8a60 	vmov.f32	s17, s1
 8004c32:	6938      	ldr	r0, [r7, #16]
 8004c34:	f7fb fc60 	bl	80004f8 <__aeabi_f2d>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	ec43 2b10 	vmov	d0, r2, r3
 8004c40:	f019 fc3e 	bl	801e4c0 <floor>
 8004c44:	eeb0 7a40 	vmov.f32	s14, s0
 8004c48:	eef0 7a60 	vmov.f32	s15, s1
 8004c4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c50:	ed8d 8b00 	vstr	d8, [sp]
 8004c54:	4a7e      	ldr	r2, [pc, #504]	@ (8004e50 <statemachine+0x518>)
 8004c56:	210f      	movs	r1, #15
 8004c58:	487e      	ldr	r0, [pc, #504]	@ (8004e54 <statemachine+0x51c>)
 8004c5a:	f016 fd3f 	bl	801b6dc <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8004c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e58 <statemachine+0x520>)
 8004c60:	2301      	movs	r3, #1
 8004c62:	ca06      	ldmia	r2, {r1, r2}
 8004c64:	487b      	ldr	r0, [pc, #492]	@ (8004e54 <statemachine+0x51c>)
 8004c66:	f7ff facd 	bl	8004204 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 30);
 8004c6a:	211e      	movs	r1, #30
 8004c6c:	2020      	movs	r0, #32
 8004c6e:	f7ff faef 	bl	8004250 <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 8004c72:	4a7a      	ldr	r2, [pc, #488]	@ (8004e5c <statemachine+0x524>)
 8004c74:	2301      	movs	r3, #1
 8004c76:	ca06      	ldmia	r2, {r1, r2}
 8004c78:	4879      	ldr	r0, [pc, #484]	@ (8004e60 <statemachine+0x528>)
 8004c7a:	f7ff fac3 	bl	8004204 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 38);
 8004c7e:	2126      	movs	r1, #38	@ 0x26
 8004c80:	2020      	movs	r0, #32
 8004c82:	f7ff fae5 	bl	8004250 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 8004c86:	4b77      	ldr	r3, [pc, #476]	@ (8004e64 <statemachine+0x52c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fb fc34 	bl	80004f8 <__aeabi_f2d>
 8004c90:	a36d      	add	r3, pc, #436	@ (adr r3, 8004e48 <statemachine+0x510>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fc87 	bl	80005a8 <__aeabi_dmul>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	e9cd 2300 	strd	r2, r3, [sp]
 8004ca2:	4a71      	ldr	r2, [pc, #452]	@ (8004e68 <statemachine+0x530>)
 8004ca4:	210f      	movs	r1, #15
 8004ca6:	486b      	ldr	r0, [pc, #428]	@ (8004e54 <statemachine+0x51c>)
 8004ca8:	f016 fd18 	bl	801b6dc <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004cac:	4a6b      	ldr	r2, [pc, #428]	@ (8004e5c <statemachine+0x524>)
 8004cae:	2301      	movs	r3, #1
 8004cb0:	ca06      	ldmia	r2, {r1, r2}
 8004cb2:	4868      	ldr	r0, [pc, #416]	@ (8004e54 <statemachine+0x51c>)
 8004cb4:	f7ff faa6 	bl	8004204 <ssd1306_WriteString>
				  						batterygauge(vbat,83, 30,1);
 8004cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8004e6c <statemachine+0x534>)
 8004cba:	edd3 7a00 	vldr	s15, [r3]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	211e      	movs	r1, #30
 8004cc2:	2053      	movs	r0, #83	@ 0x53
 8004cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc8:	f7ff fc5a 	bl	8004580 <batterygauge>



				  					 if(BTN_B>=1){
 8004ccc:	4b68      	ldr	r3, [pc, #416]	@ (8004e70 <statemachine+0x538>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	dd13      	ble.n	8004cfc <statemachine+0x3c4>
				  								spdstate--;
 8004cd4:	4b67      	ldr	r3, [pc, #412]	@ (8004e74 <statemachine+0x53c>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	4b65      	ldr	r3, [pc, #404]	@ (8004e74 <statemachine+0x53c>)
 8004cde:	701a      	strb	r2, [r3, #0]
				  								spdstate--;
 8004ce0:	4b64      	ldr	r3, [pc, #400]	@ (8004e74 <statemachine+0x53c>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	4b62      	ldr	r3, [pc, #392]	@ (8004e74 <statemachine+0x53c>)
 8004cea:	701a      	strb	r2, [r3, #0]
				  								BTN_B=0;
 8004cec:	4b60      	ldr	r3, [pc, #384]	@ (8004e70 <statemachine+0x538>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
				  					 					 				  	}




				  					 break;
 8004cf2:	e003      	b.n	8004cfc <statemachine+0x3c4>
				  break;
 8004cf4:	bf00      	nop
 8004cf6:	e002      	b.n	8004cfe <statemachine+0x3c6>
					 break;
 8004cf8:	bf00      	nop
 8004cfa:	e000      	b.n	8004cfe <statemachine+0x3c6>
				  					 break;
 8004cfc:	bf00      	nop
				  }
				  					if(BTN_A>=1){
 8004cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8004e78 <statemachine+0x540>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	dd0b      	ble.n	8004d1e <statemachine+0x3e6>
				  									 					state++;
 8004d06:	4b5d      	ldr	r3, [pc, #372]	@ (8004e7c <statemachine+0x544>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e7c <statemachine+0x544>)
 8004d10:	701a      	strb	r2, [r3, #0]
				  									 					BTN_A=0;
 8004d12:	4b59      	ldr	r3, [pc, #356]	@ (8004e78 <statemachine+0x540>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
				  									 					BTN_B=0;
 8004d18:	4b55      	ldr	r3, [pc, #340]	@ (8004e70 <statemachine+0x538>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
				  									  	}
				  									 	 if(BTN_A_LONG>=1){
 8004d1e:	4b58      	ldr	r3, [pc, #352]	@ (8004e80 <statemachine+0x548>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dd23      	ble.n	8004d6e <statemachine+0x436>
				  									 						 				 									state++;
 8004d26:	4b55      	ldr	r3, [pc, #340]	@ (8004e7c <statemachine+0x544>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	4b53      	ldr	r3, [pc, #332]	@ (8004e7c <statemachine+0x544>)
 8004d30:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004d32:	4b52      	ldr	r3, [pc, #328]	@ (8004e7c <statemachine+0x544>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	3301      	adds	r3, #1
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	4b50      	ldr	r3, [pc, #320]	@ (8004e7c <statemachine+0x544>)
 8004d3c:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004d3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e7c <statemachine+0x544>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	3301      	adds	r3, #1
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	4b4d      	ldr	r3, [pc, #308]	@ (8004e7c <statemachine+0x544>)
 8004d48:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e7c <statemachine+0x544>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	4b4a      	ldr	r3, [pc, #296]	@ (8004e7c <statemachine+0x544>)
 8004d54:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004d56:	4b49      	ldr	r3, [pc, #292]	@ (8004e7c <statemachine+0x544>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	4b47      	ldr	r3, [pc, #284]	@ (8004e7c <statemachine+0x544>)
 8004d60:	701a      	strb	r2, [r3, #0]

				  									 						 				 									  			 	BTN_A_LONG=0;
 8004d62:	4b47      	ldr	r3, [pc, #284]	@ (8004e80 <statemachine+0x548>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
				  									 						 				 									  			 	BTN_B=0;
 8004d68:	4b41      	ldr	r3, [pc, #260]	@ (8004e70 <statemachine+0x538>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
				  									 						 				 									  	}
				  									 	 if(BTN_B_LONG>=1){
 8004d6e:	4b45      	ldr	r3, [pc, #276]	@ (8004e84 <statemachine+0x54c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f341 83a2 	ble.w	80064bc <statemachine+0x1b84>
				  									 					  							  vitmax=0;
 8004d78:	4b3a      	ldr	r3, [pc, #232]	@ (8004e64 <statemachine+0x52c>)
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
				  									 					  							BTN_B_LONG=0;
 8004d80:	4b40      	ldr	r3, [pc, #256]	@ (8004e84 <statemachine+0x54c>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
				  									 					  						}

				  									 	 break;
 8004d86:	f001 bb99 	b.w	80064bc <statemachine+0x1b84>


				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7ff f91e 	bl	8003fcc <ssd1306_Fill>

					  if(settimeen==0){
 8004d90:	4b3d      	ldr	r3, [pc, #244]	@ (8004e88 <statemachine+0x550>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d145      	bne.n	8004e24 <statemachine+0x4ec>

						  if(myData.fix==1){
 8004d98:	4b3c      	ldr	r3, [pc, #240]	@ (8004e8c <statemachine+0x554>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d141      	bne.n	8004e24 <statemachine+0x4ec>
							settimeen=1;
 8004da0:	4b39      	ldr	r3, [pc, #228]	@ (8004e88 <statemachine+0x550>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004da6:	4b39      	ldr	r3, [pc, #228]	@ (8004e8c <statemachine+0x554>)
 8004da8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	0092      	lsls	r2, r2, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	4b33      	ldr	r3, [pc, #204]	@ (8004e8c <statemachine+0x554>)
 8004dbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	4413      	add	r3, r2
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	4b30      	ldr	r3, [pc, #192]	@ (8004e90 <statemachine+0x558>)
 8004dce:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e8c <statemachine+0x554>)
 8004dd2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	0092      	lsls	r2, r2, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4b29      	ldr	r3, [pc, #164]	@ (8004e8c <statemachine+0x554>)
 8004de8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	4b27      	ldr	r3, [pc, #156]	@ (8004e94 <statemachine+0x55c>)
 8004df8:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004dfa:	4b24      	ldr	r3, [pc, #144]	@ (8004e8c <statemachine+0x554>)
 8004dfc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	0092      	lsls	r2, r2, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	4b1e      	ldr	r3, [pc, #120]	@ (8004e8c <statemachine+0x554>)
 8004e12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	4b1d      	ldr	r3, [pc, #116]	@ (8004e98 <statemachine+0x560>)
 8004e22:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8004e24:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <statemachine+0x564>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	f000 8388 	beq.w	800553e <statemachine+0xc06>
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	f301 8346 	bgt.w	80064c0 <statemachine+0x1b88>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d033      	beq.n	8004ea0 <statemachine+0x568>
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	f000 8098 	beq.w	8004f6e <statemachine+0x636>
						  				 									 									  	}

					  }


					  break;
 8004e3e:	f001 bb3f 	b.w	80064c0 <statemachine+0x1b88>
 8004e42:	bf00      	nop
 8004e44:	f3af 8000 	nop.w
 8004e48:	cccccccd 	.word	0xcccccccd
 8004e4c:	400ccccc 	.word	0x400ccccc
 8004e50:	0801fe38 	.word	0x0801fe38
 8004e54:	20000ac8 	.word	0x20000ac8
 8004e58:	20000024 	.word	0x20000024
 8004e5c:	20000014 	.word	0x20000014
 8004e60:	0801fe48 	.word	0x0801fe48
 8004e64:	20000b3c 	.word	0x20000b3c
 8004e68:	0801fe2c 	.word	0x0801fe2c
 8004e6c:	200008a0 	.word	0x200008a0
 8004e70:	2000086c 	.word	0x2000086c
 8004e74:	200005dd 	.word	0x200005dd
 8004e78:	20000868 	.word	0x20000868
 8004e7c:	200005dc 	.word	0x200005dc
 8004e80:	20000ba0 	.word	0x20000ba0
 8004e84:	20000b9c 	.word	0x20000b9c
 8004e88:	20000b88 	.word	0x20000b88
 8004e8c:	20000828 	.word	0x20000828
 8004e90:	20000b85 	.word	0x20000b85
 8004e94:	20000b86 	.word	0x20000b86
 8004e98:	20000b84 	.word	0x20000b84
 8004e9c:	200005e1 	.word	0x200005e1
						  ssd1306_SetCursor(32,12);
 8004ea0:	210c      	movs	r1, #12
 8004ea2:	2020      	movs	r0, #32
 8004ea4:	f7ff f9d4 	bl	8004250 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004ea8:	4aa7      	ldr	r2, [pc, #668]	@ (8005148 <statemachine+0x810>)
 8004eaa:	2301      	movs	r3, #1
 8004eac:	ca06      	ldmia	r2, {r1, r2}
 8004eae:	48a7      	ldr	r0, [pc, #668]	@ (800514c <statemachine+0x814>)
 8004eb0:	f7ff f9a8 	bl	8004204 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8004eb4:	4ba6      	ldr	r3, [pc, #664]	@ (8005150 <statemachine+0x818>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4aa6      	ldr	r2, [pc, #664]	@ (8005154 <statemachine+0x81c>)
 8004eba:	2132      	movs	r1, #50	@ 0x32
 8004ebc:	48a6      	ldr	r0, [pc, #664]	@ (8005158 <statemachine+0x820>)
 8004ebe:	f016 fc0d 	bl	801b6dc <sniprintf>
						  ssd1306_SetCursor(32,22);
 8004ec2:	2116      	movs	r1, #22
 8004ec4:	2020      	movs	r0, #32
 8004ec6:	f7ff f9c3 	bl	8004250 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004eca:	4aa4      	ldr	r2, [pc, #656]	@ (800515c <statemachine+0x824>)
 8004ecc:	2301      	movs	r3, #1
 8004ece:	ca06      	ldmia	r2, {r1, r2}
 8004ed0:	48a1      	ldr	r0, [pc, #644]	@ (8005158 <statemachine+0x820>)
 8004ed2:	f7ff f997 	bl	8004204 <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004ed6:	4ba2      	ldr	r3, [pc, #648]	@ (8005160 <statemachine+0x828>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4aa2      	ldr	r2, [pc, #648]	@ (8005164 <statemachine+0x82c>)
 8004edc:	2132      	movs	r1, #50	@ 0x32
 8004ede:	489e      	ldr	r0, [pc, #632]	@ (8005158 <statemachine+0x820>)
 8004ee0:	f016 fbfc 	bl	801b6dc <sniprintf>
						  ssd1306_SetCursor(32,32);
 8004ee4:	2120      	movs	r1, #32
 8004ee6:	2020      	movs	r0, #32
 8004ee8:	f7ff f9b2 	bl	8004250 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004eec:	4a9b      	ldr	r2, [pc, #620]	@ (800515c <statemachine+0x824>)
 8004eee:	2301      	movs	r3, #1
 8004ef0:	ca06      	ldmia	r2, {r1, r2}
 8004ef2:	4899      	ldr	r0, [pc, #612]	@ (8005158 <statemachine+0x820>)
 8004ef4:	f7ff f986 	bl	8004204 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8004ef8:	4b9b      	ldr	r3, [pc, #620]	@ (8005168 <statemachine+0x830>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dd0e      	ble.n	8004f1e <statemachine+0x5e6>
							balisestate++;
 8004f00:	4b9a      	ldr	r3, [pc, #616]	@ (800516c <statemachine+0x834>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	3301      	adds	r3, #1
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	4b98      	ldr	r3, [pc, #608]	@ (800516c <statemachine+0x834>)
 8004f0a:	701a      	strb	r2, [r3, #0]
							BTN_B_LONG=0;
 8004f0c:	4b96      	ldr	r3, [pc, #600]	@ (8005168 <statemachine+0x830>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8004f12:	4b97      	ldr	r3, [pc, #604]	@ (8005170 <statemachine+0x838>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8004f18:	4896      	ldr	r0, [pc, #600]	@ (8005174 <statemachine+0x83c>)
 8004f1a:	f00a f8ff 	bl	800f11c <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8004f1e:	4b94      	ldr	r3, [pc, #592]	@ (8005170 <statemachine+0x838>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	dd0e      	ble.n	8004f44 <statemachine+0x60c>
						  				  			 	state++;
 8004f26:	4b94      	ldr	r3, [pc, #592]	@ (8005178 <statemachine+0x840>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4b92      	ldr	r3, [pc, #584]	@ (8005178 <statemachine+0x840>)
 8004f30:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004f32:	4b8f      	ldr	r3, [pc, #572]	@ (8005170 <statemachine+0x838>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004f38:	4b90      	ldr	r3, [pc, #576]	@ (800517c <statemachine+0x844>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004f3e:	4b90      	ldr	r3, [pc, #576]	@ (8005180 <statemachine+0x848>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004f44:	4b8f      	ldr	r3, [pc, #572]	@ (8005184 <statemachine+0x84c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f340 834a 	ble.w	80055e2 <statemachine+0xcaa>
									  state--;
 8004f4e:	4b8a      	ldr	r3, [pc, #552]	@ (8005178 <statemachine+0x840>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	4b88      	ldr	r3, [pc, #544]	@ (8005178 <statemachine+0x840>)
 8004f58:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8005184 <statemachine+0x84c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8004f60:	4b86      	ldr	r3, [pc, #536]	@ (800517c <statemachine+0x844>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004f66:	4b86      	ldr	r3, [pc, #536]	@ (8005180 <statemachine+0x848>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
						  break;
 8004f6c:	e339      	b.n	80055e2 <statemachine+0xcaa>
						  if(myData.speed>=vitmax){
 8004f6e:	4b86      	ldr	r3, [pc, #536]	@ (8005188 <statemachine+0x850>)
 8004f70:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004f74:	4b85      	ldr	r3, [pc, #532]	@ (800518c <statemachine+0x854>)
 8004f76:	edd3 7a00 	vldr	s15, [r3]
 8004f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	db03      	blt.n	8004f8c <statemachine+0x654>
						  									 vitmax=myData.speed;
 8004f84:	4b80      	ldr	r3, [pc, #512]	@ (8005188 <statemachine+0x850>)
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	4a80      	ldr	r2, [pc, #512]	@ (800518c <statemachine+0x854>)
 8004f8a:	6013      	str	r3, [r2, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004f8c:	4b74      	ldr	r3, [pc, #464]	@ (8005160 <statemachine+0x828>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8004f94:	4293      	cmp	r3, r2
 8004f96:	dd05      	ble.n	8004fa4 <statemachine+0x66c>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8004f98:	4876      	ldr	r0, [pc, #472]	@ (8005174 <statemachine+0x83c>)
 8004f9a:	f00a f90d 	bl	800f1b8 <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8004f9e:	4b73      	ldr	r3, [pc, #460]	@ (800516c <statemachine+0x834>)
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8004fa4:	4b7a      	ldr	r3, [pc, #488]	@ (8005190 <statemachine+0x858>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	f040 80b0 	bne.w	800510e <statemachine+0x7d6>
							  oldlat=myData.latitude;
 8004fae:	4b76      	ldr	r3, [pc, #472]	@ (8005188 <statemachine+0x850>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	4977      	ldr	r1, [pc, #476]	@ (8005194 <statemachine+0x85c>)
 8004fb6:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8004fba:	4b73      	ldr	r3, [pc, #460]	@ (8005188 <statemachine+0x850>)
 8004fbc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004fc0:	4975      	ldr	r1, [pc, #468]	@ (8005198 <statemachine+0x860>)
 8004fc2:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8004fc6:	4975      	ldr	r1, [pc, #468]	@ (800519c <statemachine+0x864>)
 8004fc8:	486f      	ldr	r0, [pc, #444]	@ (8005188 <statemachine+0x850>)
 8004fca:	f7fe fa2f 	bl	800342c <nmea_parse>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004fce:	4b71      	ldr	r3, [pc, #452]	@ (8005194 <statemachine+0x85c>)
 8004fd0:	ed93 7b00 	vldr	d7, [r3]
 8004fd4:	4b6c      	ldr	r3, [pc, #432]	@ (8005188 <statemachine+0x850>)
 8004fd6:	ed93 6b00 	vldr	d6, [r3]
 8004fda:	4b6f      	ldr	r3, [pc, #444]	@ (8005198 <statemachine+0x860>)
 8004fdc:	ed93 5b00 	vldr	d5, [r3]
 8004fe0:	4b69      	ldr	r3, [pc, #420]	@ (8005188 <statemachine+0x850>)
 8004fe2:	ed93 4b04 	vldr	d4, [r3, #16]
 8004fe6:	eeb0 3a44 	vmov.f32	s6, s8
 8004fea:	eef0 3a64 	vmov.f32	s7, s9
 8004fee:	eeb0 2a45 	vmov.f32	s4, s10
 8004ff2:	eef0 2a65 	vmov.f32	s5, s11
 8004ff6:	eeb0 1a46 	vmov.f32	s2, s12
 8004ffa:	eef0 1a66 	vmov.f32	s3, s13
 8004ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8005002:	eef0 0a67 	vmov.f32	s1, s15
 8005006:	f7fe fac3 	bl	8003590 <distancecalc>
 800500a:	ec51 0b10 	vmov	r0, r1, d0
 800500e:	a34c      	add	r3, pc, #304	@ (adr r3, 8005140 <statemachine+0x808>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb fd58 	bl	8000ac8 <__aeabi_dcmpgt>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d02b      	beq.n	8005076 <statemachine+0x73e>
								  myData.latitude=oldlat;
 800501e:	4b5d      	ldr	r3, [pc, #372]	@ (8005194 <statemachine+0x85c>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	4958      	ldr	r1, [pc, #352]	@ (8005188 <statemachine+0x850>)
 8005026:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 800502a:	4b5b      	ldr	r3, [pc, #364]	@ (8005198 <statemachine+0x860>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	4955      	ldr	r1, [pc, #340]	@ (8005188 <statemachine+0x850>)
 8005032:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8005036:	4b5a      	ldr	r3, [pc, #360]	@ (80051a0 <statemachine+0x868>)
 8005038:	edd3 7a00 	vldr	s15, [r3]
 800503c:	4b59      	ldr	r3, [pc, #356]	@ (80051a4 <statemachine+0x86c>)
 800503e:	ed93 7a00 	vldr	s14, [r3]
 8005042:	4b51      	ldr	r3, [pc, #324]	@ (8005188 <statemachine+0x850>)
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	4a50      	ldr	r2, [pc, #320]	@ (8005188 <statemachine+0x850>)
 8005048:	edd2 6a08 	vldr	s13, [r2, #32]
 800504c:	eeb0 1a66 	vmov.f32	s2, s13
 8005050:	461a      	mov	r2, r3
 8005052:	494d      	ldr	r1, [pc, #308]	@ (8005188 <statemachine+0x850>)
 8005054:	eef0 0a47 	vmov.f32	s1, s14
 8005058:	eeb0 0a67 	vmov.f32	s0, s15
 800505c:	4852      	ldr	r0, [pc, #328]	@ (80051a8 <statemachine+0x870>)
 800505e:	f7fe fd4f 	bl	8003b00 <csvframe>
 8005062:	4603      	mov	r3, r0
 8005064:	4a51      	ldr	r2, [pc, #324]	@ (80051ac <statemachine+0x874>)
 8005066:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8005068:	4b50      	ldr	r3, [pc, #320]	@ (80051ac <statemachine+0x874>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4619      	mov	r1, r3
 800506e:	484e      	ldr	r0, [pc, #312]	@ (80051a8 <statemachine+0x870>)
 8005070:	f7fe fe7c 	bl	8003d6c <writebuffertoflash>
 8005074:	e048      	b.n	8005108 <statemachine+0x7d0>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8005076:	4b47      	ldr	r3, [pc, #284]	@ (8005194 <statemachine+0x85c>)
 8005078:	ed93 7b00 	vldr	d7, [r3]
 800507c:	4b42      	ldr	r3, [pc, #264]	@ (8005188 <statemachine+0x850>)
 800507e:	ed93 6b00 	vldr	d6, [r3]
 8005082:	4b45      	ldr	r3, [pc, #276]	@ (8005198 <statemachine+0x860>)
 8005084:	ed93 5b00 	vldr	d5, [r3]
 8005088:	4b3f      	ldr	r3, [pc, #252]	@ (8005188 <statemachine+0x850>)
 800508a:	ed93 4b04 	vldr	d4, [r3, #16]
 800508e:	eeb0 3a44 	vmov.f32	s6, s8
 8005092:	eef0 3a64 	vmov.f32	s7, s9
 8005096:	eeb0 2a45 	vmov.f32	s4, s10
 800509a:	eef0 2a65 	vmov.f32	s5, s11
 800509e:	eeb0 1a46 	vmov.f32	s2, s12
 80050a2:	eef0 1a66 	vmov.f32	s3, s13
 80050a6:	eeb0 0a47 	vmov.f32	s0, s14
 80050aa:	eef0 0a67 	vmov.f32	s1, s15
 80050ae:	f7fe fa6f 	bl	8003590 <distancecalc>
 80050b2:	ec51 0b10 	vmov	r0, r1, d0
 80050b6:	4b3e      	ldr	r3, [pc, #248]	@ (80051b0 <statemachine+0x878>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb f8be 	bl	800023c <__adddf3>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	493a      	ldr	r1, [pc, #232]	@ (80051b0 <statemachine+0x878>)
 80050c6:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 80050ca:	4b35      	ldr	r3, [pc, #212]	@ (80051a0 <statemachine+0x868>)
 80050cc:	edd3 7a00 	vldr	s15, [r3]
 80050d0:	4b34      	ldr	r3, [pc, #208]	@ (80051a4 <statemachine+0x86c>)
 80050d2:	ed93 7a00 	vldr	s14, [r3]
 80050d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005188 <statemachine+0x850>)
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	4a2b      	ldr	r2, [pc, #172]	@ (8005188 <statemachine+0x850>)
 80050dc:	edd2 6a08 	vldr	s13, [r2, #32]
 80050e0:	eeb0 1a66 	vmov.f32	s2, s13
 80050e4:	461a      	mov	r2, r3
 80050e6:	4928      	ldr	r1, [pc, #160]	@ (8005188 <statemachine+0x850>)
 80050e8:	eef0 0a47 	vmov.f32	s1, s14
 80050ec:	eeb0 0a67 	vmov.f32	s0, s15
 80050f0:	482d      	ldr	r0, [pc, #180]	@ (80051a8 <statemachine+0x870>)
 80050f2:	f7fe fd05 	bl	8003b00 <csvframe>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4a2c      	ldr	r2, [pc, #176]	@ (80051ac <statemachine+0x874>)
 80050fa:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 80050fc:	4b2b      	ldr	r3, [pc, #172]	@ (80051ac <statemachine+0x874>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4619      	mov	r1, r3
 8005102:	4829      	ldr	r0, [pc, #164]	@ (80051a8 <statemachine+0x870>)
 8005104:	f7fe fe32 	bl	8003d6c <writebuffertoflash>
							  enablewrite=0;
 8005108:	4b21      	ldr	r3, [pc, #132]	@ (8005190 <statemachine+0x858>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
						  ssd1306_SetCursor(32,12);
 800510e:	210c      	movs	r1, #12
 8005110:	2020      	movs	r0, #32
 8005112:	f7ff f89d 	bl	8004250 <ssd1306_SetCursor>
						  switch(ecranstate){
 8005116:	4b27      	ldr	r3, [pc, #156]	@ (80051b4 <statemachine+0x87c>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b05      	cmp	r3, #5
 800511c:	f200 81c3 	bhi.w	80054a6 <statemachine+0xb6e>
 8005120:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <statemachine+0x7f0>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	080051b9 	.word	0x080051b9
 800512c:	0800520b 	.word	0x0800520b
 8005130:	08005271 	.word	0x08005271
 8005134:	080052db 	.word	0x080052db
 8005138:	0800533b 	.word	0x0800533b
 800513c:	08005399 	.word	0x08005399
 8005140:	00000000 	.word	0x00000000
 8005144:	40616000 	.word	0x40616000
 8005148:	20000014 	.word	0x20000014
 800514c:	0801fe50 	.word	0x0801fe50
 8005150:	20000aa4 	.word	0x20000aa4
 8005154:	0801fe58 	.word	0x0801fe58
 8005158:	20000ac8 	.word	0x20000ac8
 800515c:	2000001c 	.word	0x2000001c
 8005160:	20000aa8 	.word	0x20000aa8
 8005164:	0801fe64 	.word	0x0801fe64
 8005168:	20000b9c 	.word	0x20000b9c
 800516c:	200005e1 	.word	0x200005e1
 8005170:	20000868 	.word	0x20000868
 8005174:	20001348 	.word	0x20001348
 8005178:	200005dc 	.word	0x200005dc
 800517c:	2000086c 	.word	0x2000086c
 8005180:	20000b88 	.word	0x20000b88
 8005184:	20000ba0 	.word	0x20000ba0
 8005188:	20000828 	.word	0x20000828
 800518c:	20000b3c 	.word	0x20000b3c
 8005190:	20000b80 	.word	0x20000b80
 8005194:	20000b70 	.word	0x20000b70
 8005198:	20000b78 	.word	0x20000b78
 800519c:	20000628 	.word	0x20000628
 80051a0:	20000898 	.word	0x20000898
 80051a4:	200008a0 	.word	0x200008a0
 80051a8:	200008a4 	.word	0x200008a4
 80051ac:	20000b54 	.word	0x20000b54
 80051b0:	20000b68 	.word	0x20000b68
 80051b4:	20000ce8 	.word	0x20000ce8
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 80051b8:	4ba5      	ldr	r3, [pc, #660]	@ (8005450 <statemachine+0xb18>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4aa5      	ldr	r2, [pc, #660]	@ (8005454 <statemachine+0xb1c>)
 80051be:	2132      	movs	r1, #50	@ 0x32
 80051c0:	48a5      	ldr	r0, [pc, #660]	@ (8005458 <statemachine+0xb20>)
 80051c2:	f016 fa8b 	bl	801b6dc <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 80051c6:	4aa5      	ldr	r2, [pc, #660]	@ (800545c <statemachine+0xb24>)
 80051c8:	2301      	movs	r3, #1
 80051ca:	ca06      	ldmia	r2, {r1, r2}
 80051cc:	48a2      	ldr	r0, [pc, #648]	@ (8005458 <statemachine+0xb20>)
 80051ce:	f7ff f819 	bl	8004204 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,30);
 80051d2:	211e      	movs	r1, #30
 80051d4:	2020      	movs	r0, #32
 80051d6:	f7ff f83b 	bl	8004250 <ssd1306_SetCursor>
							  ssd1306_WriteString("pagenum",Font_6x8,White);
 80051da:	4aa1      	ldr	r2, [pc, #644]	@ (8005460 <statemachine+0xb28>)
 80051dc:	2301      	movs	r3, #1
 80051de:	ca06      	ldmia	r2, {r1, r2}
 80051e0:	48a0      	ldr	r0, [pc, #640]	@ (8005464 <statemachine+0xb2c>)
 80051e2:	f7ff f80f 	bl	8004204 <ssd1306_WriteString>
							  if(BTN_B>=1){
 80051e6:	4ba0      	ldr	r3, [pc, #640]	@ (8005468 <statemachine+0xb30>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f340 8120 	ble.w	8005430 <statemachine+0xaf8>
														  ecranstate++;
 80051f0:	4b9e      	ldr	r3, [pc, #632]	@ (800546c <statemachine+0xb34>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b9c      	ldr	r3, [pc, #624]	@ (800546c <statemachine+0xb34>)
 80051fa:	701a      	strb	r2, [r3, #0]
													  	BTN_B=0;
 80051fc:	4b9a      	ldr	r3, [pc, #616]	@ (8005468 <statemachine+0xb30>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
													  	BTN_A=0;
 8005202:	4b9b      	ldr	r3, [pc, #620]	@ (8005470 <statemachine+0xb38>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
							  break;
 8005208:	e112      	b.n	8005430 <statemachine+0xaf8>
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 800520a:	4b9a      	ldr	r3, [pc, #616]	@ (8005474 <statemachine+0xb3c>)
 800520c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	4b98      	ldr	r3, [pc, #608]	@ (8005478 <statemachine+0xb40>)
 8005216:	f7fb faf1 	bl	80007fc <__aeabi_ddiv>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	e9cd 2300 	strd	r2, r3, [sp]
 8005222:	4a96      	ldr	r2, [pc, #600]	@ (800547c <statemachine+0xb44>)
 8005224:	2132      	movs	r1, #50	@ 0x32
 8005226:	488c      	ldr	r0, [pc, #560]	@ (8005458 <statemachine+0xb20>)
 8005228:	f016 fa58 	bl	801b6dc <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 800522c:	4a8b      	ldr	r2, [pc, #556]	@ (800545c <statemachine+0xb24>)
 800522e:	2301      	movs	r3, #1
 8005230:	ca06      	ldmia	r2, {r1, r2}
 8005232:	4889      	ldr	r0, [pc, #548]	@ (8005458 <statemachine+0xb20>)
 8005234:	f7fe ffe6 	bl	8004204 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,30);
 8005238:	211e      	movs	r1, #30
 800523a:	2020      	movs	r0, #32
 800523c:	f7ff f808 	bl	8004250 <ssd1306_SetCursor>
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 8005240:	4a87      	ldr	r2, [pc, #540]	@ (8005460 <statemachine+0xb28>)
 8005242:	2301      	movs	r3, #1
 8005244:	ca06      	ldmia	r2, {r1, r2}
 8005246:	488e      	ldr	r0, [pc, #568]	@ (8005480 <statemachine+0xb48>)
 8005248:	f7fe ffdc 	bl	8004204 <ssd1306_WriteString>
							  if(BTN_B>=1){
 800524c:	4b86      	ldr	r3, [pc, #536]	@ (8005468 <statemachine+0xb30>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f340 80ef 	ble.w	8005434 <statemachine+0xafc>
							  														  ecranstate++;
 8005256:	4b85      	ldr	r3, [pc, #532]	@ (800546c <statemachine+0xb34>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	b2da      	uxtb	r2, r3
 800525e:	4b83      	ldr	r3, [pc, #524]	@ (800546c <statemachine+0xb34>)
 8005260:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005262:	4b81      	ldr	r3, [pc, #516]	@ (8005468 <statemachine+0xb30>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005268:	4b81      	ldr	r3, [pc, #516]	@ (8005470 <statemachine+0xb38>)
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
							  break;
 800526e:	e0e1      	b.n	8005434 <statemachine+0xafc>
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.speed*3.6);
 8005270:	4b84      	ldr	r3, [pc, #528]	@ (8005484 <statemachine+0xb4c>)
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb f93f 	bl	80004f8 <__aeabi_f2d>
 800527a:	a373      	add	r3, pc, #460	@ (adr r3, 8005448 <statemachine+0xb10>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fb f992 	bl	80005a8 <__aeabi_dmul>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	e9cd 2300 	strd	r2, r3, [sp]
 800528c:	4a7e      	ldr	r2, [pc, #504]	@ (8005488 <statemachine+0xb50>)
 800528e:	2132      	movs	r1, #50	@ 0x32
 8005290:	4871      	ldr	r0, [pc, #452]	@ (8005458 <statemachine+0xb20>)
 8005292:	f016 fa23 	bl	801b6dc <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 8005296:	4a71      	ldr	r2, [pc, #452]	@ (800545c <statemachine+0xb24>)
 8005298:	2301      	movs	r3, #1
 800529a:	ca06      	ldmia	r2, {r1, r2}
 800529c:	486e      	ldr	r0, [pc, #440]	@ (8005458 <statemachine+0xb20>)
 800529e:	f7fe ffb1 	bl	8004204 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,30);
 80052a2:	211e      	movs	r1, #30
 80052a4:	2020      	movs	r0, #32
 80052a6:	f7fe ffd3 	bl	8004250 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 80052aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005460 <statemachine+0xb28>)
 80052ac:	2301      	movs	r3, #1
 80052ae:	ca06      	ldmia	r2, {r1, r2}
 80052b0:	4876      	ldr	r0, [pc, #472]	@ (800548c <statemachine+0xb54>)
 80052b2:	f7fe ffa7 	bl	8004204 <ssd1306_WriteString>
							  if(BTN_B>=1){
 80052b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005468 <statemachine+0xb30>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f340 80bc 	ble.w	8005438 <statemachine+0xb00>
							  														  ecranstate++;
 80052c0:	4b6a      	ldr	r3, [pc, #424]	@ (800546c <statemachine+0xb34>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	3301      	adds	r3, #1
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	4b68      	ldr	r3, [pc, #416]	@ (800546c <statemachine+0xb34>)
 80052ca:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80052cc:	4b66      	ldr	r3, [pc, #408]	@ (8005468 <statemachine+0xb30>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80052d2:	4b67      	ldr	r3, [pc, #412]	@ (8005470 <statemachine+0xb38>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
							  break;
 80052d8:	e0ae      	b.n	8005438 <statemachine+0xb00>
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.altitude);
 80052da:	4b6a      	ldr	r3, [pc, #424]	@ (8005484 <statemachine+0xb4c>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fb f90a 	bl	80004f8 <__aeabi_f2d>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	e9cd 2300 	strd	r2, r3, [sp]
 80052ec:	4a66      	ldr	r2, [pc, #408]	@ (8005488 <statemachine+0xb50>)
 80052ee:	2132      	movs	r1, #50	@ 0x32
 80052f0:	4859      	ldr	r0, [pc, #356]	@ (8005458 <statemachine+0xb20>)
 80052f2:	f016 f9f3 	bl	801b6dc <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 80052f6:	4a59      	ldr	r2, [pc, #356]	@ (800545c <statemachine+0xb24>)
 80052f8:	2301      	movs	r3, #1
 80052fa:	ca06      	ldmia	r2, {r1, r2}
 80052fc:	4856      	ldr	r0, [pc, #344]	@ (8005458 <statemachine+0xb20>)
 80052fe:	f7fe ff81 	bl	8004204 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,30);
 8005302:	211e      	movs	r1, #30
 8005304:	2020      	movs	r0, #32
 8005306:	f7fe ffa3 	bl	8004250 <ssd1306_SetCursor>
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 800530a:	4a55      	ldr	r2, [pc, #340]	@ (8005460 <statemachine+0xb28>)
 800530c:	2301      	movs	r3, #1
 800530e:	ca06      	ldmia	r2, {r1, r2}
 8005310:	485f      	ldr	r0, [pc, #380]	@ (8005490 <statemachine+0xb58>)
 8005312:	f7fe ff77 	bl	8004204 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005316:	4b54      	ldr	r3, [pc, #336]	@ (8005468 <statemachine+0xb30>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f340 808e 	ble.w	800543c <statemachine+0xb04>
							  														  ecranstate++;
 8005320:	4b52      	ldr	r3, [pc, #328]	@ (800546c <statemachine+0xb34>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	3301      	adds	r3, #1
 8005326:	b2da      	uxtb	r2, r3
 8005328:	4b50      	ldr	r3, [pc, #320]	@ (800546c <statemachine+0xb34>)
 800532a:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 800532c:	4b4e      	ldr	r3, [pc, #312]	@ (8005468 <statemachine+0xb30>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005332:	4b4f      	ldr	r3, [pc, #316]	@ (8005470 <statemachine+0xb38>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
							  break;
 8005338:	e080      	b.n	800543c <statemachine+0xb04>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 800533a:	4b56      	ldr	r3, [pc, #344]	@ (8005494 <statemachine+0xb5c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fb f8da 	bl	80004f8 <__aeabi_f2d>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	e9cd 2300 	strd	r2, r3, [sp]
 800534c:	4a4e      	ldr	r2, [pc, #312]	@ (8005488 <statemachine+0xb50>)
 800534e:	2132      	movs	r1, #50	@ 0x32
 8005350:	4841      	ldr	r0, [pc, #260]	@ (8005458 <statemachine+0xb20>)
 8005352:	f016 f9c3 	bl	801b6dc <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 8005356:	4a41      	ldr	r2, [pc, #260]	@ (800545c <statemachine+0xb24>)
 8005358:	2301      	movs	r3, #1
 800535a:	ca06      	ldmia	r2, {r1, r2}
 800535c:	483e      	ldr	r0, [pc, #248]	@ (8005458 <statemachine+0xb20>)
 800535e:	f7fe ff51 	bl	8004204 <ssd1306_WriteString>
							  ssd1306_SetCursor(32,30);
 8005362:	211e      	movs	r1, #30
 8005364:	2020      	movs	r0, #32
 8005366:	f7fe ff73 	bl	8004250 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 800536a:	4a3d      	ldr	r2, [pc, #244]	@ (8005460 <statemachine+0xb28>)
 800536c:	2301      	movs	r3, #1
 800536e:	ca06      	ldmia	r2, {r1, r2}
 8005370:	4849      	ldr	r0, [pc, #292]	@ (8005498 <statemachine+0xb60>)
 8005372:	f7fe ff47 	bl	8004204 <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005376:	4b3c      	ldr	r3, [pc, #240]	@ (8005468 <statemachine+0xb30>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	dd60      	ble.n	8005440 <statemachine+0xb08>
							  														  ecranstate++;
 800537e:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <statemachine+0xb34>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	b2da      	uxtb	r2, r3
 8005386:	4b39      	ldr	r3, [pc, #228]	@ (800546c <statemachine+0xb34>)
 8005388:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 800538a:	4b37      	ldr	r3, [pc, #220]	@ (8005468 <statemachine+0xb30>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005390:	4b37      	ldr	r3, [pc, #220]	@ (8005470 <statemachine+0xb38>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
							  break;
 8005396:	e053      	b.n	8005440 <statemachine+0xb08>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 8005398:	4b40      	ldr	r3, [pc, #256]	@ (800549c <statemachine+0xb64>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f7fb f8ab 	bl	80004f8 <__aeabi_f2d>
 80053a2:	a329      	add	r3, pc, #164	@ (adr r3, 8005448 <statemachine+0xb10>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f7fb f8fe 	bl	80005a8 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	e9cd 2300 	strd	r2, r3, [sp]
 80053b4:	4a34      	ldr	r2, [pc, #208]	@ (8005488 <statemachine+0xb50>)
 80053b6:	2132      	movs	r1, #50	@ 0x32
 80053b8:	4827      	ldr	r0, [pc, #156]	@ (8005458 <statemachine+0xb20>)
 80053ba:	f016 f98f 	bl	801b6dc <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 80053be:	4a27      	ldr	r2, [pc, #156]	@ (800545c <statemachine+0xb24>)
 80053c0:	2301      	movs	r3, #1
 80053c2:	ca06      	ldmia	r2, {r1, r2}
 80053c4:	4824      	ldr	r0, [pc, #144]	@ (8005458 <statemachine+0xb20>)
 80053c6:	f7fe ff1d 	bl	8004204 <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,30);
 80053ca:	211e      	movs	r1, #30
 80053cc:	2020      	movs	r0, #32
 80053ce:	f7fe ff3f 	bl	8004250 <ssd1306_SetCursor>
							  							ssd1306_WriteString("MaxV(kmh)",Font_6x8,White);
 80053d2:	4a23      	ldr	r2, [pc, #140]	@ (8005460 <statemachine+0xb28>)
 80053d4:	2301      	movs	r3, #1
 80053d6:	ca06      	ldmia	r2, {r1, r2}
 80053d8:	4831      	ldr	r0, [pc, #196]	@ (80054a0 <statemachine+0xb68>)
 80053da:	f7fe ff13 	bl	8004204 <ssd1306_WriteString>
							  if(BTN_B>=1){
 80053de:	4b22      	ldr	r3, [pc, #136]	@ (8005468 <statemachine+0xb30>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	dd5e      	ble.n	80054a4 <statemachine+0xb6c>
							  														ecranstate--;
 80053e6:	4b21      	ldr	r3, [pc, #132]	@ (800546c <statemachine+0xb34>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	4b1f      	ldr	r3, [pc, #124]	@ (800546c <statemachine+0xb34>)
 80053f0:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80053f2:	4b1e      	ldr	r3, [pc, #120]	@ (800546c <statemachine+0xb34>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4b1c      	ldr	r3, [pc, #112]	@ (800546c <statemachine+0xb34>)
 80053fc:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80053fe:	4b1b      	ldr	r3, [pc, #108]	@ (800546c <statemachine+0xb34>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	3b01      	subs	r3, #1
 8005404:	b2da      	uxtb	r2, r3
 8005406:	4b19      	ldr	r3, [pc, #100]	@ (800546c <statemachine+0xb34>)
 8005408:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800540a:	4b18      	ldr	r3, [pc, #96]	@ (800546c <statemachine+0xb34>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	3b01      	subs	r3, #1
 8005410:	b2da      	uxtb	r2, r3
 8005412:	4b16      	ldr	r3, [pc, #88]	@ (800546c <statemachine+0xb34>)
 8005414:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005416:	4b15      	ldr	r3, [pc, #84]	@ (800546c <statemachine+0xb34>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	3b01      	subs	r3, #1
 800541c:	b2da      	uxtb	r2, r3
 800541e:	4b13      	ldr	r3, [pc, #76]	@ (800546c <statemachine+0xb34>)
 8005420:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005422:	4b11      	ldr	r3, [pc, #68]	@ (8005468 <statemachine+0xb30>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005428:	4b11      	ldr	r3, [pc, #68]	@ (8005470 <statemachine+0xb38>)
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
							  break;
 800542e:	e039      	b.n	80054a4 <statemachine+0xb6c>
							  break;
 8005430:	bf00      	nop
 8005432:	e038      	b.n	80054a6 <statemachine+0xb6e>
							  break;
 8005434:	bf00      	nop
 8005436:	e036      	b.n	80054a6 <statemachine+0xb6e>
							  break;
 8005438:	bf00      	nop
 800543a:	e034      	b.n	80054a6 <statemachine+0xb6e>
							  break;
 800543c:	bf00      	nop
 800543e:	e032      	b.n	80054a6 <statemachine+0xb6e>
							  break;
 8005440:	bf00      	nop
 8005442:	e030      	b.n	80054a6 <statemachine+0xb6e>
 8005444:	f3af 8000 	nop.w
 8005448:	cccccccd 	.word	0xcccccccd
 800544c:	400ccccc 	.word	0x400ccccc
 8005450:	20000aa8 	.word	0x20000aa8
 8005454:	0801fe6c 	.word	0x0801fe6c
 8005458:	20000ac8 	.word	0x20000ac8
 800545c:	20000024 	.word	0x20000024
 8005460:	20000014 	.word	0x20000014
 8005464:	0801fe70 	.word	0x0801fe70
 8005468:	2000086c 	.word	0x2000086c
 800546c:	20000ce8 	.word	0x20000ce8
 8005470:	20000868 	.word	0x20000868
 8005474:	20000b68 	.word	0x20000b68
 8005478:	408f4000 	.word	0x408f4000
 800547c:	0801fe78 	.word	0x0801fe78
 8005480:	0801fe80 	.word	0x0801fe80
 8005484:	20000828 	.word	0x20000828
 8005488:	0801fdf0 	.word	0x0801fdf0
 800548c:	0801fe8c 	.word	0x0801fe8c
 8005490:	0801fe98 	.word	0x0801fe98
 8005494:	200008a0 	.word	0x200008a0
 8005498:	0801fea0 	.word	0x0801fea0
 800549c:	20000b3c 	.word	0x20000b3c
 80054a0:	0801fea8 	.word	0x0801fea8
							  break;
 80054a4:	bf00      	nop
						 	batterygauge(vbat,85, 30,1);
 80054a6:	4b8a      	ldr	r3, [pc, #552]	@ (80056d0 <statemachine+0xd98>)
 80054a8:	edd3 7a00 	vldr	s15, [r3]
 80054ac:	2201      	movs	r2, #1
 80054ae:	211e      	movs	r1, #30
 80054b0:	2055      	movs	r0, #85	@ 0x55
 80054b2:	eeb0 0a67 	vmov.f32	s0, s15
 80054b6:	f7ff f863 	bl	8004580 <batterygauge>
						 	ssd1306_SetCursor(32,38);
 80054ba:	2126      	movs	r1, #38	@ 0x26
 80054bc:	2020      	movs	r0, #32
 80054be:	f7fe fec7 	bl	8004250 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 80054c2:	4b83      	ldr	r3, [pc, #524]	@ (80056d0 <statemachine+0xd98>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fb f816 	bl	80004f8 <__aeabi_f2d>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	e9cd 2300 	strd	r2, r3, [sp]
 80054d4:	4a7f      	ldr	r2, [pc, #508]	@ (80056d4 <statemachine+0xd9c>)
 80054d6:	2132      	movs	r1, #50	@ 0x32
 80054d8:	487f      	ldr	r0, [pc, #508]	@ (80056d8 <statemachine+0xda0>)
 80054da:	f016 f8ff 	bl	801b6dc <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80054de:	4a7f      	ldr	r2, [pc, #508]	@ (80056dc <statemachine+0xda4>)
 80054e0:	2301      	movs	r3, #1
 80054e2:	ca06      	ldmia	r2, {r1, r2}
 80054e4:	487c      	ldr	r0, [pc, #496]	@ (80056d8 <statemachine+0xda0>)
 80054e6:	f7fe fe8d 	bl	8004204 <ssd1306_WriteString>
						 	ssd1306_SetCursor(65,38);
 80054ea:	2126      	movs	r1, #38	@ 0x26
 80054ec:	2041      	movs	r0, #65	@ 0x41
 80054ee:	f7fe feaf 	bl	8004250 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 80054f2:	4b7b      	ldr	r3, [pc, #492]	@ (80056e0 <statemachine+0xda8>)
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	4a7b      	ldr	r2, [pc, #492]	@ (80056e4 <statemachine+0xdac>)
 80054f8:	2132      	movs	r1, #50	@ 0x32
 80054fa:	4877      	ldr	r0, [pc, #476]	@ (80056d8 <statemachine+0xda0>)
 80054fc:	f016 f8ee 	bl	801b6dc <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005500:	4a76      	ldr	r2, [pc, #472]	@ (80056dc <statemachine+0xda4>)
 8005502:	2301      	movs	r3, #1
 8005504:	ca06      	ldmia	r2, {r1, r2}
 8005506:	4874      	ldr	r0, [pc, #464]	@ (80056d8 <statemachine+0xda0>)
 8005508:	f7fe fe7c 	bl	8004204 <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 800550c:	4b76      	ldr	r3, [pc, #472]	@ (80056e8 <statemachine+0xdb0>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	dd69      	ble.n	80055e8 <statemachine+0xcb0>
						  						  balisestate--;
 8005514:	4b75      	ldr	r3, [pc, #468]	@ (80056ec <statemachine+0xdb4>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	3b01      	subs	r3, #1
 800551a:	b2da      	uxtb	r2, r3
 800551c:	4b73      	ldr	r3, [pc, #460]	@ (80056ec <statemachine+0xdb4>)
 800551e:	701a      	strb	r2, [r3, #0]
						  						  BTN_B_LONG=0;
 8005520:	4b71      	ldr	r3, [pc, #452]	@ (80056e8 <statemachine+0xdb0>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 8005526:	4b72      	ldr	r3, [pc, #456]	@ (80056f0 <statemachine+0xdb8>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 800552c:	4871      	ldr	r0, [pc, #452]	@ (80056f4 <statemachine+0xdbc>)
 800552e:	f009 fe43 	bl	800f1b8 <HAL_TIM_Base_Stop_IT>
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8005532:	2200      	movs	r2, #0
 8005534:	2102      	movs	r1, #2
 8005536:	4870      	ldr	r0, [pc, #448]	@ (80056f8 <statemachine+0xdc0>)
 8005538:	f004 f872 	bl	8009620 <HAL_GPIO_WritePin>
						  break;
 800553c:	e054      	b.n	80055e8 <statemachine+0xcb0>
						  ssd1306_SetCursor(32,12);
 800553e:	210c      	movs	r1, #12
 8005540:	2020      	movs	r0, #32
 8005542:	f7fe fe85 	bl	8004250 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 8005546:	4a65      	ldr	r2, [pc, #404]	@ (80056dc <statemachine+0xda4>)
 8005548:	2301      	movs	r3, #1
 800554a:	ca06      	ldmia	r2, {r1, r2}
 800554c:	486b      	ldr	r0, [pc, #428]	@ (80056fc <statemachine+0xdc4>)
 800554e:	f7fe fe59 	bl	8004204 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,20);
 8005552:	2114      	movs	r1, #20
 8005554:	2020      	movs	r0, #32
 8005556:	f7fe fe7b 	bl	8004250 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 800555a:	4a60      	ldr	r2, [pc, #384]	@ (80056dc <statemachine+0xda4>)
 800555c:	2301      	movs	r3, #1
 800555e:	ca06      	ldmia	r2, {r1, r2}
 8005560:	4867      	ldr	r0, [pc, #412]	@ (8005700 <statemachine+0xdc8>)
 8005562:	f7fe fe4f 	bl	8004204 <ssd1306_WriteString>
						  ssd1306_SetCursor(32,28);
 8005566:	211c      	movs	r1, #28
 8005568:	2020      	movs	r0, #32
 800556a:	f7fe fe71 	bl	8004250 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 800556e:	4b65      	ldr	r3, [pc, #404]	@ (8005704 <statemachine+0xdcc>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b65      	ldr	r3, [pc, #404]	@ (8005708 <statemachine+0xdd0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	4a64      	ldr	r2, [pc, #400]	@ (800570c <statemachine+0xdd4>)
 800557c:	2132      	movs	r1, #50	@ 0x32
 800557e:	4856      	ldr	r0, [pc, #344]	@ (80056d8 <statemachine+0xda0>)
 8005580:	f016 f8ac 	bl	801b6dc <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005584:	4a55      	ldr	r2, [pc, #340]	@ (80056dc <statemachine+0xda4>)
 8005586:	2301      	movs	r3, #1
 8005588:	ca06      	ldmia	r2, {r1, r2}
 800558a:	4853      	ldr	r0, [pc, #332]	@ (80056d8 <statemachine+0xda0>)
 800558c:	f7fe fe3a 	bl	8004204 <ssd1306_WriteString>
						  if(BTN_A>=1){
 8005590:	4b57      	ldr	r3, [pc, #348]	@ (80056f0 <statemachine+0xdb8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	dd0e      	ble.n	80055b6 <statemachine+0xc7e>
						  				  			 	state++;
 8005598:	4b5d      	ldr	r3, [pc, #372]	@ (8005710 <statemachine+0xdd8>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005710 <statemachine+0xdd8>)
 80055a2:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 80055a4:	4b52      	ldr	r3, [pc, #328]	@ (80056f0 <statemachine+0xdb8>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 80055aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005714 <statemachine+0xddc>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 80055b0:	4b59      	ldr	r3, [pc, #356]	@ (8005718 <statemachine+0xde0>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 80055b6:	4b59      	ldr	r3, [pc, #356]	@ (800571c <statemachine+0xde4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f340 8780 	ble.w	80064c0 <statemachine+0x1b88>
						  				 									 									  			 	state--;
 80055c0:	4b53      	ldr	r3, [pc, #332]	@ (8005710 <statemachine+0xdd8>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	4b51      	ldr	r3, [pc, #324]	@ (8005710 <statemachine+0xdd8>)
 80055ca:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 80055cc:	4b48      	ldr	r3, [pc, #288]	@ (80056f0 <statemachine+0xdb8>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 80055d2:	4b50      	ldr	r3, [pc, #320]	@ (8005714 <statemachine+0xddc>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 80055d8:	4b50      	ldr	r3, [pc, #320]	@ (800571c <statemachine+0xde4>)
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
					  break;
 80055de:	f000 bf6f 	b.w	80064c0 <statemachine+0x1b88>
						  break;
 80055e2:	bf00      	nop
 80055e4:	f000 bf6c 	b.w	80064c0 <statemachine+0x1b88>
						  break;
 80055e8:	bf00      	nop
					  break;
 80055ea:	f000 bf69 	b.w	80064c0 <statemachine+0x1b88>

	case STATE_POS:
			  ssd1306_Fill(Black);
 80055ee:	2000      	movs	r0, #0
 80055f0:	f7fe fcec 	bl	8003fcc <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80055f4:	494a      	ldr	r1, [pc, #296]	@ (8005720 <statemachine+0xde8>)
 80055f6:	483a      	ldr	r0, [pc, #232]	@ (80056e0 <statemachine+0xda8>)
 80055f8:	f7fd ff18 	bl	800342c <nmea_parse>
			  switch(posstate){
 80055fc:	4b49      	ldr	r3, [pc, #292]	@ (8005724 <statemachine+0xdec>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b05      	cmp	r3, #5
 8005602:	f200 8352 	bhi.w	8005caa <statemachine+0x1372>
 8005606:	a201      	add	r2, pc, #4	@ (adr r2, 800560c <statemachine+0xcd4>)
 8005608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560c:	08005625 	.word	0x08005625
 8005610:	08005735 	.word	0x08005735
 8005614:	0800580b 	.word	0x0800580b
 8005618:	080058c9 	.word	0x080058c9
 800561c:	080059d1 	.word	0x080059d1
 8005620:	08005ad9 	.word	0x08005ad9

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 12);
 8005624:	210c      	movs	r1, #12
 8005626:	2020      	movs	r0, #32
 8005628:	f7fe fe12 	bl	8004250 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 800562c:	4a3e      	ldr	r2, [pc, #248]	@ (8005728 <statemachine+0xdf0>)
 800562e:	210f      	movs	r1, #15
 8005630:	4829      	ldr	r0, [pc, #164]	@ (80056d8 <statemachine+0xda0>)
 8005632:	f016 f853 	bl	801b6dc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005636:	4a29      	ldr	r2, [pc, #164]	@ (80056dc <statemachine+0xda4>)
 8005638:	2301      	movs	r3, #1
 800563a:	ca06      	ldmia	r2, {r1, r2}
 800563c:	4826      	ldr	r0, [pc, #152]	@ (80056d8 <statemachine+0xda0>)
 800563e:	f7fe fde1 	bl	8004204 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005642:	4b27      	ldr	r3, [pc, #156]	@ (80056e0 <statemachine+0xda8>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	e9cd 2300 	strd	r2, r3, [sp]
 800564c:	4a37      	ldr	r2, [pc, #220]	@ (800572c <statemachine+0xdf4>)
 800564e:	210f      	movs	r1, #15
 8005650:	4821      	ldr	r0, [pc, #132]	@ (80056d8 <statemachine+0xda0>)
 8005652:	f016 f843 	bl	801b6dc <sniprintf>
						ssd1306_SetCursor(32, 20);
 8005656:	2114      	movs	r1, #20
 8005658:	2020      	movs	r0, #32
 800565a:	f7fe fdf9 	bl	8004250 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800565e:	4a1f      	ldr	r2, [pc, #124]	@ (80056dc <statemachine+0xda4>)
 8005660:	2301      	movs	r3, #1
 8005662:	ca06      	ldmia	r2, {r1, r2}
 8005664:	481c      	ldr	r0, [pc, #112]	@ (80056d8 <statemachine+0xda0>)
 8005666:	f7fe fdcd 	bl	8004204 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 800566a:	4a31      	ldr	r2, [pc, #196]	@ (8005730 <statemachine+0xdf8>)
 800566c:	210f      	movs	r1, #15
 800566e:	481a      	ldr	r0, [pc, #104]	@ (80056d8 <statemachine+0xda0>)
 8005670:	f016 f834 	bl	801b6dc <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005674:	211c      	movs	r1, #28
 8005676:	2020      	movs	r0, #32
 8005678:	f7fe fdea 	bl	8004250 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800567c:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <statemachine+0xda4>)
 800567e:	2301      	movs	r3, #1
 8005680:	ca06      	ldmia	r2, {r1, r2}
 8005682:	4815      	ldr	r0, [pc, #84]	@ (80056d8 <statemachine+0xda0>)
 8005684:	f7fe fdbe 	bl	8004204 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005688:	4b15      	ldr	r3, [pc, #84]	@ (80056e0 <statemachine+0xda8>)
 800568a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800568e:	e9cd 2300 	strd	r2, r3, [sp]
 8005692:	4a26      	ldr	r2, [pc, #152]	@ (800572c <statemachine+0xdf4>)
 8005694:	210f      	movs	r1, #15
 8005696:	4810      	ldr	r0, [pc, #64]	@ (80056d8 <statemachine+0xda0>)
 8005698:	f016 f820 	bl	801b6dc <sniprintf>
						ssd1306_SetCursor(32, 36);
 800569c:	2124      	movs	r1, #36	@ 0x24
 800569e:	2020      	movs	r0, #32
 80056a0:	f7fe fdd6 	bl	8004250 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80056a4:	4a0d      	ldr	r2, [pc, #52]	@ (80056dc <statemachine+0xda4>)
 80056a6:	2301      	movs	r3, #1
 80056a8:	ca06      	ldmia	r2, {r1, r2}
 80056aa:	480b      	ldr	r0, [pc, #44]	@ (80056d8 <statemachine+0xda0>)
 80056ac:	f7fe fdaa 	bl	8004204 <ssd1306_WriteString>
				  if(BTN_B>=1){
 80056b0:	4b18      	ldr	r3, [pc, #96]	@ (8005714 <statemachine+0xddc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f340 82c0 	ble.w	8005c3a <statemachine+0x1302>
					  posstate++;
 80056ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005724 <statemachine+0xdec>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	3301      	adds	r3, #1
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	4b18      	ldr	r3, [pc, #96]	@ (8005724 <statemachine+0xdec>)
 80056c4:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 80056c6:	4b13      	ldr	r3, [pc, #76]	@ (8005714 <statemachine+0xddc>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
				  }



				  break;
 80056cc:	e2b5      	b.n	8005c3a <statemachine+0x1302>
 80056ce:	bf00      	nop
 80056d0:	200008a0 	.word	0x200008a0
 80056d4:	0801feb4 	.word	0x0801feb4
 80056d8:	20000ac8 	.word	0x20000ac8
 80056dc:	20000014 	.word	0x20000014
 80056e0:	20000828 	.word	0x20000828
 80056e4:	0801febc 	.word	0x0801febc
 80056e8:	20000b9c 	.word	0x20000b9c
 80056ec:	200005e1 	.word	0x200005e1
 80056f0:	20000868 	.word	0x20000868
 80056f4:	20001348 	.word	0x20001348
 80056f8:	48000400 	.word	0x48000400
 80056fc:	0801fec4 	.word	0x0801fec4
 8005700:	0801fecc 	.word	0x0801fecc
 8005704:	20000aa4 	.word	0x20000aa4
 8005708:	20000aa8 	.word	0x20000aa8
 800570c:	0801fed4 	.word	0x0801fed4
 8005710:	200005dc 	.word	0x200005dc
 8005714:	2000086c 	.word	0x2000086c
 8005718:	20000b88 	.word	0x20000b88
 800571c:	20000ba0 	.word	0x20000ba0
 8005720:	20000628 	.word	0x20000628
 8005724:	200005de 	.word	0x200005de
 8005728:	0801fedc 	.word	0x0801fedc
 800572c:	0801fee8 	.word	0x0801fee8
 8005730:	0801fef0 	.word	0x0801fef0
			  case STATE_INFO:
				  ssd1306_Fill(Black);
 8005734:	2000      	movs	r0, #0
 8005736:	f7fe fc49 	bl	8003fcc <ssd1306_Fill>
				  nmea_parse(&myData, DataBuffer);
 800573a:	4993      	ldr	r1, [pc, #588]	@ (8005988 <statemachine+0x1050>)
 800573c:	4893      	ldr	r0, [pc, #588]	@ (800598c <statemachine+0x1054>)
 800573e:	f7fd fe75 	bl	800342c <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005742:	4b92      	ldr	r3, [pc, #584]	@ (800598c <statemachine+0x1054>)
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	4618      	mov	r0, r3
 8005748:	f7fa fed6 	bl	80004f8 <__aeabi_f2d>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	e9cd 2300 	strd	r2, r3, [sp]
 8005754:	4a8e      	ldr	r2, [pc, #568]	@ (8005990 <statemachine+0x1058>)
 8005756:	210f      	movs	r1, #15
 8005758:	488e      	ldr	r0, [pc, #568]	@ (8005994 <statemachine+0x105c>)
 800575a:	f015 ffbf 	bl	801b6dc <sniprintf>
				ssd1306_SetCursor(32, 12);
 800575e:	210c      	movs	r1, #12
 8005760:	2020      	movs	r0, #32
 8005762:	f7fe fd75 	bl	8004250 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005766:	4a8c      	ldr	r2, [pc, #560]	@ (8005998 <statemachine+0x1060>)
 8005768:	2301      	movs	r3, #1
 800576a:	ca06      	ldmia	r2, {r1, r2}
 800576c:	4889      	ldr	r0, [pc, #548]	@ (8005994 <statemachine+0x105c>)
 800576e:	f7fe fd49 	bl	8004204 <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005772:	4b8a      	ldr	r3, [pc, #552]	@ (800599c <statemachine+0x1064>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fa febe 	bl	80004f8 <__aeabi_f2d>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	e9cd 2300 	strd	r2, r3, [sp]
 8005784:	4a86      	ldr	r2, [pc, #536]	@ (80059a0 <statemachine+0x1068>)
 8005786:	2114      	movs	r1, #20
 8005788:	4882      	ldr	r0, [pc, #520]	@ (8005994 <statemachine+0x105c>)
 800578a:	f015 ffa7 	bl	801b6dc <sniprintf>
				ssd1306_SetCursor(32, 20);
 800578e:	2114      	movs	r1, #20
 8005790:	2020      	movs	r0, #32
 8005792:	f7fe fd5d 	bl	8004250 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005796:	4a80      	ldr	r2, [pc, #512]	@ (8005998 <statemachine+0x1060>)
 8005798:	2301      	movs	r3, #1
 800579a:	ca06      	ldmia	r2, {r1, r2}
 800579c:	487d      	ldr	r0, [pc, #500]	@ (8005994 <statemachine+0x105c>)
 800579e:	f7fe fd31 	bl	8004204 <ssd1306_WriteString>
				ssd1306_SetCursor(32, 28);
 80057a2:	211c      	movs	r1, #28
 80057a4:	2020      	movs	r0, #32
 80057a6:	f7fe fd53 	bl	8004250 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 80057aa:	4b7e      	ldr	r3, [pc, #504]	@ (80059a4 <statemachine+0x106c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fa fea2 	bl	80004f8 <__aeabi_f2d>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	e9cd 2300 	strd	r2, r3, [sp]
 80057bc:	4a7a      	ldr	r2, [pc, #488]	@ (80059a8 <statemachine+0x1070>)
 80057be:	210f      	movs	r1, #15
 80057c0:	4874      	ldr	r0, [pc, #464]	@ (8005994 <statemachine+0x105c>)
 80057c2:	f015 ff8b 	bl	801b6dc <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80057c6:	4a74      	ldr	r2, [pc, #464]	@ (8005998 <statemachine+0x1060>)
 80057c8:	2301      	movs	r3, #1
 80057ca:	ca06      	ldmia	r2, {r1, r2}
 80057cc:	4871      	ldr	r0, [pc, #452]	@ (8005994 <statemachine+0x105c>)
 80057ce:	f7fe fd19 	bl	8004204 <ssd1306_WriteString>
				 if(BTN_B>=1){
 80057d2:	4b76      	ldr	r3, [pc, #472]	@ (80059ac <statemachine+0x1074>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dd08      	ble.n	80057ec <statemachine+0xeb4>
								  					  posstate++;
 80057da:	4b75      	ldr	r3, [pc, #468]	@ (80059b0 <statemachine+0x1078>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	3301      	adds	r3, #1
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	4b73      	ldr	r3, [pc, #460]	@ (80059b0 <statemachine+0x1078>)
 80057e4:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 80057e6:	4b71      	ldr	r3, [pc, #452]	@ (80059ac <statemachine+0x1074>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 80057ec:	4b71      	ldr	r3, [pc, #452]	@ (80059b4 <statemachine+0x107c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f340 8224 	ble.w	8005c3e <statemachine+0x1306>
													  posstate--;
 80057f6:	4b6e      	ldr	r3, [pc, #440]	@ (80059b0 <statemachine+0x1078>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	4b6c      	ldr	r3, [pc, #432]	@ (80059b0 <statemachine+0x1078>)
 8005800:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 8005802:	4b6c      	ldr	r3, [pc, #432]	@ (80059b4 <statemachine+0x107c>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
												}

				  break;
 8005808:	e219      	b.n	8005c3e <statemachine+0x1306>
			  case STATE_LAT:
						ssd1306_SetCursor(32, 12);
 800580a:	210c      	movs	r1, #12
 800580c:	2020      	movs	r0, #32
 800580e:	f7fe fd1f 	bl	8004250 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8005812:	4a69      	ldr	r2, [pc, #420]	@ (80059b8 <statemachine+0x1080>)
 8005814:	210f      	movs	r1, #15
 8005816:	485f      	ldr	r0, [pc, #380]	@ (8005994 <statemachine+0x105c>)
 8005818:	f015 ff60 	bl	801b6dc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800581c:	4a5e      	ldr	r2, [pc, #376]	@ (8005998 <statemachine+0x1060>)
 800581e:	2301      	movs	r3, #1
 8005820:	ca06      	ldmia	r2, {r1, r2}
 8005822:	485c      	ldr	r0, [pc, #368]	@ (8005994 <statemachine+0x105c>)
 8005824:	f7fe fcee 	bl	8004204 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005828:	4b58      	ldr	r3, [pc, #352]	@ (800598c <statemachine+0x1054>)
 800582a:	7a1b      	ldrb	r3, [r3, #8]
 800582c:	4a63      	ldr	r2, [pc, #396]	@ (80059bc <statemachine+0x1084>)
 800582e:	210f      	movs	r1, #15
 8005830:	4858      	ldr	r0, [pc, #352]	@ (8005994 <statemachine+0x105c>)
 8005832:	f015 ff53 	bl	801b6dc <sniprintf>
						ssd1306_SetCursor(32, 20);
 8005836:	2114      	movs	r1, #20
 8005838:	2020      	movs	r0, #32
 800583a:	f7fe fd09 	bl	8004250 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800583e:	4a56      	ldr	r2, [pc, #344]	@ (8005998 <statemachine+0x1060>)
 8005840:	2301      	movs	r3, #1
 8005842:	ca06      	ldmia	r2, {r1, r2}
 8005844:	4853      	ldr	r0, [pc, #332]	@ (8005994 <statemachine+0x105c>)
 8005846:	f7fe fcdd 	bl	8004204 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 800584a:	4a5d      	ldr	r2, [pc, #372]	@ (80059c0 <statemachine+0x1088>)
 800584c:	210f      	movs	r1, #15
 800584e:	4851      	ldr	r0, [pc, #324]	@ (8005994 <statemachine+0x105c>)
 8005850:	f015 ff44 	bl	801b6dc <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005854:	211c      	movs	r1, #28
 8005856:	2020      	movs	r0, #32
 8005858:	f7fe fcfa 	bl	8004250 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800585c:	4a4e      	ldr	r2, [pc, #312]	@ (8005998 <statemachine+0x1060>)
 800585e:	2301      	movs	r3, #1
 8005860:	ca06      	ldmia	r2, {r1, r2}
 8005862:	484c      	ldr	r0, [pc, #304]	@ (8005994 <statemachine+0x105c>)
 8005864:	f7fe fcce 	bl	8004204 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 8005868:	4b48      	ldr	r3, [pc, #288]	@ (800598c <statemachine+0x1054>)
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	e9cd 2300 	strd	r2, r3, [sp]
 8005872:	4a54      	ldr	r2, [pc, #336]	@ (80059c4 <statemachine+0x108c>)
 8005874:	210f      	movs	r1, #15
 8005876:	4847      	ldr	r0, [pc, #284]	@ (8005994 <statemachine+0x105c>)
 8005878:	f015 ff30 	bl	801b6dc <sniprintf>
						ssd1306_SetCursor(32, 36);
 800587c:	2124      	movs	r1, #36	@ 0x24
 800587e:	2020      	movs	r0, #32
 8005880:	f7fe fce6 	bl	8004250 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005884:	4a44      	ldr	r2, [pc, #272]	@ (8005998 <statemachine+0x1060>)
 8005886:	2301      	movs	r3, #1
 8005888:	ca06      	ldmia	r2, {r1, r2}
 800588a:	4842      	ldr	r0, [pc, #264]	@ (8005994 <statemachine+0x105c>)
 800588c:	f7fe fcba 	bl	8004204 <ssd1306_WriteString>


				  if(BTN_B>=1){
 8005890:	4b46      	ldr	r3, [pc, #280]	@ (80059ac <statemachine+0x1074>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	dd08      	ble.n	80058aa <statemachine+0xf72>
				  					  posstate++;
 8005898:	4b45      	ldr	r3, [pc, #276]	@ (80059b0 <statemachine+0x1078>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	3301      	adds	r3, #1
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	4b43      	ldr	r3, [pc, #268]	@ (80059b0 <statemachine+0x1078>)
 80058a2:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80058a4:	4b41      	ldr	r3, [pc, #260]	@ (80059ac <statemachine+0x1074>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80058aa:	4b42      	ldr	r3, [pc, #264]	@ (80059b4 <statemachine+0x107c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f340 81c7 	ble.w	8005c42 <statemachine+0x130a>
									  posstate--;
 80058b4:	4b3e      	ldr	r3, [pc, #248]	@ (80059b0 <statemachine+0x1078>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	4b3c      	ldr	r3, [pc, #240]	@ (80059b0 <statemachine+0x1078>)
 80058be:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 80058c0:	4b3c      	ldr	r3, [pc, #240]	@ (80059b4 <statemachine+0x107c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
								}



				  break;
 80058c6:	e1bc      	b.n	8005c42 <statemachine+0x130a>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 12);
 80058c8:	210c      	movs	r1, #12
 80058ca:	2020      	movs	r0, #32
 80058cc:	f7fe fcc0 	bl	8004250 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 80058d0:	4a3d      	ldr	r2, [pc, #244]	@ (80059c8 <statemachine+0x1090>)
 80058d2:	210f      	movs	r1, #15
 80058d4:	482f      	ldr	r0, [pc, #188]	@ (8005994 <statemachine+0x105c>)
 80058d6:	f015 ff01 	bl	801b6dc <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80058da:	4a2f      	ldr	r2, [pc, #188]	@ (8005998 <statemachine+0x1060>)
 80058dc:	2301      	movs	r3, #1
 80058de:	ca06      	ldmia	r2, {r1, r2}
 80058e0:	482c      	ldr	r0, [pc, #176]	@ (8005994 <statemachine+0x105c>)
 80058e2:	f7fe fc8f 	bl	8004204 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80058e6:	4b29      	ldr	r3, [pc, #164]	@ (800598c <statemachine+0x1054>)
 80058e8:	7e1b      	ldrb	r3, [r3, #24]
 80058ea:	4a34      	ldr	r2, [pc, #208]	@ (80059bc <statemachine+0x1084>)
 80058ec:	210f      	movs	r1, #15
 80058ee:	4829      	ldr	r0, [pc, #164]	@ (8005994 <statemachine+0x105c>)
 80058f0:	f015 fef4 	bl	801b6dc <sniprintf>
					ssd1306_SetCursor(32, 20);
 80058f4:	2114      	movs	r1, #20
 80058f6:	2020      	movs	r0, #32
 80058f8:	f7fe fcaa 	bl	8004250 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80058fc:	4a26      	ldr	r2, [pc, #152]	@ (8005998 <statemachine+0x1060>)
 80058fe:	2301      	movs	r3, #1
 8005900:	ca06      	ldmia	r2, {r1, r2}
 8005902:	4824      	ldr	r0, [pc, #144]	@ (8005994 <statemachine+0x105c>)
 8005904:	f7fe fc7e 	bl	8004204 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 8005908:	4a30      	ldr	r2, [pc, #192]	@ (80059cc <statemachine+0x1094>)
 800590a:	210f      	movs	r1, #15
 800590c:	4821      	ldr	r0, [pc, #132]	@ (8005994 <statemachine+0x105c>)
 800590e:	f015 fee5 	bl	801b6dc <sniprintf>
					ssd1306_SetCursor(32, 28);
 8005912:	211c      	movs	r1, #28
 8005914:	2020      	movs	r0, #32
 8005916:	f7fe fc9b 	bl	8004250 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800591a:	4a1f      	ldr	r2, [pc, #124]	@ (8005998 <statemachine+0x1060>)
 800591c:	2301      	movs	r3, #1
 800591e:	ca06      	ldmia	r2, {r1, r2}
 8005920:	481c      	ldr	r0, [pc, #112]	@ (8005994 <statemachine+0x105c>)
 8005922:	f7fe fc6f 	bl	8004204 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005926:	4b19      	ldr	r3, [pc, #100]	@ (800598c <statemachine+0x1054>)
 8005928:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800592c:	e9cd 2300 	strd	r2, r3, [sp]
 8005930:	4a24      	ldr	r2, [pc, #144]	@ (80059c4 <statemachine+0x108c>)
 8005932:	210f      	movs	r1, #15
 8005934:	4817      	ldr	r0, [pc, #92]	@ (8005994 <statemachine+0x105c>)
 8005936:	f015 fed1 	bl	801b6dc <sniprintf>
					ssd1306_SetCursor(32, 36);
 800593a:	2124      	movs	r1, #36	@ 0x24
 800593c:	2020      	movs	r0, #32
 800593e:	f7fe fc87 	bl	8004250 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005942:	4a15      	ldr	r2, [pc, #84]	@ (8005998 <statemachine+0x1060>)
 8005944:	2301      	movs	r3, #1
 8005946:	ca06      	ldmia	r2, {r1, r2}
 8005948:	4812      	ldr	r0, [pc, #72]	@ (8005994 <statemachine+0x105c>)
 800594a:	f7fe fc5b 	bl	8004204 <ssd1306_WriteString>

				  if(BTN_B>=1){
 800594e:	4b17      	ldr	r3, [pc, #92]	@ (80059ac <statemachine+0x1074>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	dd08      	ble.n	8005968 <statemachine+0x1030>
				  					  posstate++;
 8005956:	4b16      	ldr	r3, [pc, #88]	@ (80059b0 <statemachine+0x1078>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	b2da      	uxtb	r2, r3
 800595e:	4b14      	ldr	r3, [pc, #80]	@ (80059b0 <statemachine+0x1078>)
 8005960:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005962:	4b12      	ldr	r3, [pc, #72]	@ (80059ac <statemachine+0x1074>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005968:	4b12      	ldr	r3, [pc, #72]	@ (80059b4 <statemachine+0x107c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f340 816a 	ble.w	8005c46 <statemachine+0x130e>
									  posstate--;
 8005972:	4b0f      	ldr	r3, [pc, #60]	@ (80059b0 <statemachine+0x1078>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	3b01      	subs	r3, #1
 8005978:	b2da      	uxtb	r2, r3
 800597a:	4b0d      	ldr	r3, [pc, #52]	@ (80059b0 <statemachine+0x1078>)
 800597c:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <statemachine+0x107c>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
								}

				  break;
 8005984:	e15f      	b.n	8005c46 <statemachine+0x130e>
 8005986:	bf00      	nop
 8005988:	20000628 	.word	0x20000628
 800598c:	20000828 	.word	0x20000828
 8005990:	0801fefc 	.word	0x0801fefc
 8005994:	20000ac8 	.word	0x20000ac8
 8005998:	20000014 	.word	0x20000014
 800599c:	200008a0 	.word	0x200008a0
 80059a0:	0801ff08 	.word	0x0801ff08
 80059a4:	20000898 	.word	0x20000898
 80059a8:	0801ff14 	.word	0x0801ff14
 80059ac:	2000086c 	.word	0x2000086c
 80059b0:	200005de 	.word	0x200005de
 80059b4:	20000b9c 	.word	0x20000b9c
 80059b8:	0801ff20 	.word	0x0801ff20
 80059bc:	0801ff2c 	.word	0x0801ff2c
 80059c0:	0801fedc 	.word	0x0801fedc
 80059c4:	0801fee8 	.word	0x0801fee8
 80059c8:	0801ff30 	.word	0x0801ff30
 80059cc:	0801fef0 	.word	0x0801fef0
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 12);
 80059d0:	210c      	movs	r1, #12
 80059d2:	2020      	movs	r0, #32
 80059d4:	f7fe fc3c 	bl	8004250 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 80059d8:	4a9f      	ldr	r2, [pc, #636]	@ (8005c58 <statemachine+0x1320>)
 80059da:	210f      	movs	r1, #15
 80059dc:	489f      	ldr	r0, [pc, #636]	@ (8005c5c <statemachine+0x1324>)
 80059de:	f015 fe7d 	bl	801b6dc <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80059e2:	4a9f      	ldr	r2, [pc, #636]	@ (8005c60 <statemachine+0x1328>)
 80059e4:	2301      	movs	r3, #1
 80059e6:	ca06      	ldmia	r2, {r1, r2}
 80059e8:	489c      	ldr	r0, [pc, #624]	@ (8005c5c <statemachine+0x1324>)
 80059ea:	f7fe fc0b 	bl	8004204 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80059ee:	4b9d      	ldr	r3, [pc, #628]	@ (8005c64 <statemachine+0x132c>)
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fa fd80 	bl	80004f8 <__aeabi_f2d>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	e9cd 2300 	strd	r2, r3, [sp]
 8005a00:	4a99      	ldr	r2, [pc, #612]	@ (8005c68 <statemachine+0x1330>)
 8005a02:	210f      	movs	r1, #15
 8005a04:	4895      	ldr	r0, [pc, #596]	@ (8005c5c <statemachine+0x1324>)
 8005a06:	f015 fe69 	bl	801b6dc <sniprintf>
				  						ssd1306_SetCursor(32, 20);
 8005a0a:	2114      	movs	r1, #20
 8005a0c:	2020      	movs	r0, #32
 8005a0e:	f7fe fc1f 	bl	8004250 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005a12:	4a93      	ldr	r2, [pc, #588]	@ (8005c60 <statemachine+0x1328>)
 8005a14:	2301      	movs	r3, #1
 8005a16:	ca06      	ldmia	r2, {r1, r2}
 8005a18:	4890      	ldr	r0, [pc, #576]	@ (8005c5c <statemachine+0x1324>)
 8005a1a:	f7fe fbf3 	bl	8004204 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 8005a1e:	4a93      	ldr	r2, [pc, #588]	@ (8005c6c <statemachine+0x1334>)
 8005a20:	210f      	movs	r1, #15
 8005a22:	488e      	ldr	r0, [pc, #568]	@ (8005c5c <statemachine+0x1324>)
 8005a24:	f015 fe5a 	bl	801b6dc <sniprintf>
				  						ssd1306_SetCursor(32, 28);
 8005a28:	211c      	movs	r1, #28
 8005a2a:	2020      	movs	r0, #32
 8005a2c:	f7fe fc10 	bl	8004250 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005a30:	4a8b      	ldr	r2, [pc, #556]	@ (8005c60 <statemachine+0x1328>)
 8005a32:	2301      	movs	r3, #1
 8005a34:	ca06      	ldmia	r2, {r1, r2}
 8005a36:	4889      	ldr	r0, [pc, #548]	@ (8005c5c <statemachine+0x1324>)
 8005a38:	f7fe fbe4 	bl	8004204 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8005a3c:	4b89      	ldr	r3, [pc, #548]	@ (8005c64 <statemachine+0x132c>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fa fd59 	bl	80004f8 <__aeabi_f2d>
 8005a46:	a382      	add	r3, pc, #520	@ (adr r3, 8005c50 <statemachine+0x1318>)
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f7fa fdac 	bl	80005a8 <__aeabi_dmul>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	f7fb f89e 	bl	8000b98 <__aeabi_d2f>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	ee00 3a10 	vmov	s0, r3
 8005a62:	f018 fc91 	bl	801e388 <expf>
 8005a66:	eef0 7a40 	vmov.f32	s15, s0
 8005a6a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8005c70 <statemachine+0x1338>
 8005a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a72:	ee17 0a90 	vmov	r0, s15
 8005a76:	f7fa fd3f 	bl	80004f8 <__aeabi_f2d>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	e9cd 2300 	strd	r2, r3, [sp]
 8005a82:	4a7c      	ldr	r2, [pc, #496]	@ (8005c74 <statemachine+0x133c>)
 8005a84:	210f      	movs	r1, #15
 8005a86:	4875      	ldr	r0, [pc, #468]	@ (8005c5c <statemachine+0x1324>)
 8005a88:	f015 fe28 	bl	801b6dc <sniprintf>
				  						ssd1306_SetCursor(32, 36);
 8005a8c:	2124      	movs	r1, #36	@ 0x24
 8005a8e:	2020      	movs	r0, #32
 8005a90:	f7fe fbde 	bl	8004250 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005a94:	4a72      	ldr	r2, [pc, #456]	@ (8005c60 <statemachine+0x1328>)
 8005a96:	2301      	movs	r3, #1
 8005a98:	ca06      	ldmia	r2, {r1, r2}
 8005a9a:	4870      	ldr	r0, [pc, #448]	@ (8005c5c <statemachine+0x1324>)
 8005a9c:	f7fe fbb2 	bl	8004204 <ssd1306_WriteString>

				  if(BTN_B>=1){
 8005aa0:	4b75      	ldr	r3, [pc, #468]	@ (8005c78 <statemachine+0x1340>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dd08      	ble.n	8005aba <statemachine+0x1182>
				  					posstate++;
 8005aa8:	4b74      	ldr	r3, [pc, #464]	@ (8005c7c <statemachine+0x1344>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	4b72      	ldr	r3, [pc, #456]	@ (8005c7c <statemachine+0x1344>)
 8005ab2:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8005ab4:	4b70      	ldr	r3, [pc, #448]	@ (8005c78 <statemachine+0x1340>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005aba:	4b71      	ldr	r3, [pc, #452]	@ (8005c80 <statemachine+0x1348>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f340 80c3 	ble.w	8005c4a <statemachine+0x1312>
					  posstate--;
 8005ac4:	4b6d      	ldr	r3, [pc, #436]	@ (8005c7c <statemachine+0x1344>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	4b6b      	ldr	r3, [pc, #428]	@ (8005c7c <statemachine+0x1344>)
 8005ace:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8005ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8005c80 <statemachine+0x1348>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
				}
				  break;
 8005ad6:	e0b8      	b.n	8005c4a <statemachine+0x1312>
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 8005ad8:	2000      	movs	r0, #0
 8005ada:	f7fe fa77 	bl	8003fcc <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 8005ade:	4969      	ldr	r1, [pc, #420]	@ (8005c84 <statemachine+0x134c>)
 8005ae0:	4860      	ldr	r0, [pc, #384]	@ (8005c64 <statemachine+0x132c>)
 8005ae2:	f7fd fca3 	bl	800342c <nmea_parse>
			  			  if(settimeen==0){
 8005ae6:	4b68      	ldr	r3, [pc, #416]	@ (8005c88 <statemachine+0x1350>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d141      	bne.n	8005b72 <statemachine+0x123a>

			  							settimeen=1;
 8005aee:	4b66      	ldr	r3, [pc, #408]	@ (8005c88 <statemachine+0x1350>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005af4:	4b5b      	ldr	r3, [pc, #364]	@ (8005c64 <statemachine+0x132c>)
 8005af6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4b56      	ldr	r3, [pc, #344]	@ (8005c64 <statemachine+0x132c>)
 8005b0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	4413      	add	r3, r2
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8005c8c <statemachine+0x1354>)
 8005b1c:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005b1e:	4b51      	ldr	r3, [pc, #324]	@ (8005c64 <statemachine+0x132c>)
 8005b20:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	0092      	lsls	r2, r2, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	4b4b      	ldr	r3, [pc, #300]	@ (8005c64 <statemachine+0x132c>)
 8005b36:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	4b52      	ldr	r3, [pc, #328]	@ (8005c90 <statemachine+0x1358>)
 8005b46:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8005b48:	4b46      	ldr	r3, [pc, #280]	@ (8005c64 <statemachine+0x132c>)
 8005b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	0092      	lsls	r2, r2, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	4b41      	ldr	r3, [pc, #260]	@ (8005c64 <statemachine+0x132c>)
 8005b60:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	4b49      	ldr	r3, [pc, #292]	@ (8005c94 <statemachine+0x135c>)
 8005b70:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 12);
 8005b72:	210c      	movs	r1, #12
 8005b74:	2020      	movs	r0, #32
 8005b76:	f7fe fb6b 	bl	8004250 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 8005b7a:	4a39      	ldr	r2, [pc, #228]	@ (8005c60 <statemachine+0x1328>)
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	ca06      	ldmia	r2, {r1, r2}
 8005b80:	4845      	ldr	r0, [pc, #276]	@ (8005c98 <statemachine+0x1360>)
 8005b82:	f7fe fb3f 	bl	8004204 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 22);
 8005b86:	2116      	movs	r1, #22
 8005b88:	2020      	movs	r0, #32
 8005b8a:	f7fe fb61 	bl	8004250 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8005b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8005c8c <statemachine+0x1354>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	4b3e      	ldr	r3, [pc, #248]	@ (8005c90 <statemachine+0x1358>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c9c <statemachine+0x1364>)
 8005b9e:	210f      	movs	r1, #15
 8005ba0:	482e      	ldr	r0, [pc, #184]	@ (8005c5c <statemachine+0x1324>)
 8005ba2:	f015 fd9b 	bl	801b6dc <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8005ca0 <statemachine+0x1368>)
 8005ba8:	2301      	movs	r3, #1
 8005baa:	ca06      	ldmia	r2, {r1, r2}
 8005bac:	482b      	ldr	r0, [pc, #172]	@ (8005c5c <statemachine+0x1324>)
 8005bae:	f7fe fb29 	bl	8004204 <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 32);
 8005bb2:	2120      	movs	r1, #32
 8005bb4:	2020      	movs	r0, #32
 8005bb6:	f7fe fb4b 	bl	8004250 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 8005bba:	4b36      	ldr	r3, [pc, #216]	@ (8005c94 <statemachine+0x135c>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	4a39      	ldr	r2, [pc, #228]	@ (8005ca4 <statemachine+0x136c>)
 8005bc0:	210f      	movs	r1, #15
 8005bc2:	4826      	ldr	r0, [pc, #152]	@ (8005c5c <statemachine+0x1324>)
 8005bc4:	f015 fd8a 	bl	801b6dc <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005bc8:	4a25      	ldr	r2, [pc, #148]	@ (8005c60 <statemachine+0x1328>)
 8005bca:	2301      	movs	r3, #1
 8005bcc:	ca06      	ldmia	r2, {r1, r2}
 8005bce:	4823      	ldr	r0, [pc, #140]	@ (8005c5c <statemachine+0x1324>)
 8005bd0:	f7fe fb18 	bl	8004204 <ssd1306_WriteString>
			  				if(BTN_B>=1){
 8005bd4:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <statemachine+0x1340>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dd20      	ble.n	8005c1e <statemachine+0x12e6>
			  					posstate--;
 8005bdc:	4b27      	ldr	r3, [pc, #156]	@ (8005c7c <statemachine+0x1344>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	4b25      	ldr	r3, [pc, #148]	@ (8005c7c <statemachine+0x1344>)
 8005be6:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005be8:	4b24      	ldr	r3, [pc, #144]	@ (8005c7c <statemachine+0x1344>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b22      	ldr	r3, [pc, #136]	@ (8005c7c <statemachine+0x1344>)
 8005bf2:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005bf4:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <statemachine+0x1344>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8005c7c <statemachine+0x1344>)
 8005bfe:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005c00:	4b1e      	ldr	r3, [pc, #120]	@ (8005c7c <statemachine+0x1344>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	4b1c      	ldr	r3, [pc, #112]	@ (8005c7c <statemachine+0x1344>)
 8005c0a:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c7c <statemachine+0x1344>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	4b19      	ldr	r3, [pc, #100]	@ (8005c7c <statemachine+0x1344>)
 8005c16:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 8005c18:	4b17      	ldr	r3, [pc, #92]	@ (8005c78 <statemachine+0x1340>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8005c1e:	4b18      	ldr	r3, [pc, #96]	@ (8005c80 <statemachine+0x1348>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dd40      	ble.n	8005ca8 <statemachine+0x1370>
			  							  					posstate--;
 8005c26:	4b15      	ldr	r3, [pc, #84]	@ (8005c7c <statemachine+0x1344>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4b13      	ldr	r3, [pc, #76]	@ (8005c7c <statemachine+0x1344>)
 8005c30:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 8005c32:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <statemachine+0x1348>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 8005c38:	e036      	b.n	8005ca8 <statemachine+0x1370>
				  break;
 8005c3a:	bf00      	nop
 8005c3c:	e035      	b.n	8005caa <statemachine+0x1372>
				  break;
 8005c3e:	bf00      	nop
 8005c40:	e033      	b.n	8005caa <statemachine+0x1372>
				  break;
 8005c42:	bf00      	nop
 8005c44:	e031      	b.n	8005caa <statemachine+0x1372>
				  break;
 8005c46:	bf00      	nop
 8005c48:	e02f      	b.n	8005caa <statemachine+0x1372>
				  break;
 8005c4a:	bf00      	nop
 8005c4c:	e02d      	b.n	8005caa <statemachine+0x1372>
 8005c4e:	bf00      	nop
 8005c50:	fb798882 	.word	0xfb798882
 8005c54:	bf1e1818 	.word	0xbf1e1818
 8005c58:	0801ff3c 	.word	0x0801ff3c
 8005c5c:	20000ac8 	.word	0x20000ac8
 8005c60:	20000014 	.word	0x20000014
 8005c64:	20000828 	.word	0x20000828
 8005c68:	0801ff48 	.word	0x0801ff48
 8005c6c:	0801ff50 	.word	0x0801ff50
 8005c70:	447a0000 	.word	0x447a0000
 8005c74:	0801ff5c 	.word	0x0801ff5c
 8005c78:	2000086c 	.word	0x2000086c
 8005c7c:	200005de 	.word	0x200005de
 8005c80:	20000b9c 	.word	0x20000b9c
 8005c84:	20000628 	.word	0x20000628
 8005c88:	20000b88 	.word	0x20000b88
 8005c8c:	20000b85 	.word	0x20000b85
 8005c90:	20000b86 	.word	0x20000b86
 8005c94:	20000b84 	.word	0x20000b84
 8005c98:	0801ff68 	.word	0x0801ff68
 8005c9c:	0801ff70 	.word	0x0801ff70
 8005ca0:	2000001c 	.word	0x2000001c
 8005ca4:	0801ff7c 	.word	0x0801ff7c
			  			break;
 8005ca8:	bf00      	nop
			  }

					if(BTN_A>=1){
 8005caa:	4b95      	ldr	r3, [pc, #596]	@ (8005f00 <statemachine+0x15c8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd0b      	ble.n	8005cca <statemachine+0x1392>
							state++;
 8005cb2:	4b94      	ldr	r3, [pc, #592]	@ (8005f04 <statemachine+0x15cc>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	4b92      	ldr	r3, [pc, #584]	@ (8005f04 <statemachine+0x15cc>)
 8005cbc:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005cbe:	4b90      	ldr	r3, [pc, #576]	@ (8005f00 <statemachine+0x15c8>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005cc4:	4b90      	ldr	r3, [pc, #576]	@ (8005f08 <statemachine+0x15d0>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8005cca:	4b90      	ldr	r3, [pc, #576]	@ (8005f0c <statemachine+0x15d4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f340 83f8 	ble.w	80064c4 <statemachine+0x1b8c>
									 									 									  			 	state--;
 8005cd4:	4b8b      	ldr	r3, [pc, #556]	@ (8005f04 <statemachine+0x15cc>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	4b89      	ldr	r3, [pc, #548]	@ (8005f04 <statemachine+0x15cc>)
 8005cde:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8005ce0:	4b87      	ldr	r3, [pc, #540]	@ (8005f00 <statemachine+0x15c8>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8005ce6:	4b88      	ldr	r3, [pc, #544]	@ (8005f08 <statemachine+0x15d0>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8005cec:	4b87      	ldr	r3, [pc, #540]	@ (8005f0c <statemachine+0x15d4>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8005cf2:	e3e7      	b.n	80064c4 <statemachine+0x1b8c>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	f7fe f969 	bl	8003fcc <ssd1306_Fill>
			  ssd1306_SetCursor(32, 12);
 8005cfa:	210c      	movs	r1, #12
 8005cfc:	2020      	movs	r0, #32
 8005cfe:	f7fe faa7 	bl	8004250 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8005d02:	4a83      	ldr	r2, [pc, #524]	@ (8005f10 <statemachine+0x15d8>)
 8005d04:	2301      	movs	r3, #1
 8005d06:	ca06      	ldmia	r2, {r1, r2}
 8005d08:	4882      	ldr	r0, [pc, #520]	@ (8005f14 <statemachine+0x15dc>)
 8005d0a:	f7fe fa7b 	bl	8004204 <ssd1306_WriteString>
			  ssd1306_SetCursor(32,20);
 8005d0e:	2114      	movs	r1, #20
 8005d10:	2020      	movs	r0, #32
 8005d12:	f7fe fa9d 	bl	8004250 <ssd1306_SetCursor>

			  switch(chronostate){
 8005d16:	4b80      	ldr	r3, [pc, #512]	@ (8005f18 <statemachine+0x15e0>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d03b      	beq.n	8005d96 <statemachine+0x145e>
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	dc6a      	bgt.n	8005df8 <statemachine+0x14c0>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <statemachine+0x13f4>
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d01d      	beq.n	8005d66 <statemachine+0x142e>
 8005d2a:	e065      	b.n	8005df8 <statemachine+0x14c0>
			  case STATE_RESET:
				  min=0;
 8005d2c:	4b7b      	ldr	r3, [pc, #492]	@ (8005f1c <statemachine+0x15e4>)
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005d34:	4b7a      	ldr	r3, [pc, #488]	@ (8005f20 <statemachine+0x15e8>)
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8005d3c:	4b79      	ldr	r3, [pc, #484]	@ (8005f24 <statemachine+0x15ec>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005d42:	4b71      	ldr	r3, [pc, #452]	@ (8005f08 <statemachine+0x15d0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	dd51      	ble.n	8005dee <statemachine+0x14b6>
				  		chronostate++;
 8005d4a:	4b73      	ldr	r3, [pc, #460]	@ (8005f18 <statemachine+0x15e0>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4b71      	ldr	r3, [pc, #452]	@ (8005f18 <statemachine+0x15e0>)
 8005d54:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005d56:	4b6c      	ldr	r3, [pc, #432]	@ (8005f08 <statemachine+0x15d0>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8005d5c:	4b72      	ldr	r3, [pc, #456]	@ (8005f28 <statemachine+0x15f0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a72      	ldr	r2, [pc, #456]	@ (8005f2c <statemachine+0x15f4>)
 8005d62:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005d64:	e043      	b.n	8005dee <statemachine+0x14b6>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005d66:	4b70      	ldr	r3, [pc, #448]	@ (8005f28 <statemachine+0x15f0>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4b70      	ldr	r3, [pc, #448]	@ (8005f2c <statemachine+0x15f4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	4b6f      	ldr	r3, [pc, #444]	@ (8005f30 <statemachine+0x15f8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4413      	add	r3, r2
 8005d76:	4a6b      	ldr	r2, [pc, #428]	@ (8005f24 <statemachine+0x15ec>)
 8005d78:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005d7a:	4b63      	ldr	r3, [pc, #396]	@ (8005f08 <statemachine+0x15d0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	dd37      	ble.n	8005df2 <statemachine+0x14ba>
				  		chronostate++;
 8005d82:	4b65      	ldr	r3, [pc, #404]	@ (8005f18 <statemachine+0x15e0>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	3301      	adds	r3, #1
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4b63      	ldr	r3, [pc, #396]	@ (8005f18 <statemachine+0x15e0>)
 8005d8c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005d8e:	4b5e      	ldr	r3, [pc, #376]	@ (8005f08 <statemachine+0x15d0>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8005d94:	e02d      	b.n	8005df2 <statemachine+0x14ba>
			  case STATE_PAUSE:
				  timehandler=calctime;
 8005d96:	4b63      	ldr	r3, [pc, #396]	@ (8005f24 <statemachine+0x15ec>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a65      	ldr	r2, [pc, #404]	@ (8005f30 <statemachine+0x15f8>)
 8005d9c:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005d9e:	4b5a      	ldr	r3, [pc, #360]	@ (8005f08 <statemachine+0x15d0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	dd0c      	ble.n	8005dc0 <statemachine+0x1488>
				  			chronostate--;
 8005da6:	4b5c      	ldr	r3, [pc, #368]	@ (8005f18 <statemachine+0x15e0>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b5a      	ldr	r3, [pc, #360]	@ (8005f18 <statemachine+0x15e0>)
 8005db0:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8005db2:	4b55      	ldr	r3, [pc, #340]	@ (8005f08 <statemachine+0x15d0>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8005db8:	4b5b      	ldr	r3, [pc, #364]	@ (8005f28 <statemachine+0x15f0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a5b      	ldr	r2, [pc, #364]	@ (8005f2c <statemachine+0x15f4>)
 8005dbe:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8005f34 <statemachine+0x15fc>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	dd16      	ble.n	8005df6 <statemachine+0x14be>
				  				  	chronostate--;
 8005dc8:	4b53      	ldr	r3, [pc, #332]	@ (8005f18 <statemachine+0x15e0>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	4b51      	ldr	r3, [pc, #324]	@ (8005f18 <statemachine+0x15e0>)
 8005dd2:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005dd4:	4b50      	ldr	r3, [pc, #320]	@ (8005f18 <statemachine+0x15e0>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8005f18 <statemachine+0x15e0>)
 8005dde:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005de0:	4b54      	ldr	r3, [pc, #336]	@ (8005f34 <statemachine+0x15fc>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005de6:	4b52      	ldr	r3, [pc, #328]	@ (8005f30 <statemachine+0x15f8>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005dec:	e003      	b.n	8005df6 <statemachine+0x14be>
				  break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <statemachine+0x14c0>
				  break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <statemachine+0x14c0>
				  break;
 8005df6:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005df8:	4b4a      	ldr	r3, [pc, #296]	@ (8005f24 <statemachine+0x15ec>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e04:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8005f38 <statemachine+0x1600>
 8005e08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e0c:	ee16 0a90 	vmov	r0, s13
 8005e10:	f7fa fb72 	bl	80004f8 <__aeabi_f2d>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	ec43 2b10 	vmov	d0, r2, r3
 8005e1c:	f018 fb50 	bl	801e4c0 <floor>
 8005e20:	ec53 2b10 	vmov	r2, r3, d0
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	f7fa feb6 	bl	8000b98 <__aeabi_d2f>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8005f1c <statemachine+0x15e4>)
 8005e30:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005e32:	4b3c      	ldr	r3, [pc, #240]	@ (8005f24 <statemachine+0x15ec>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e3e:	4b37      	ldr	r3, [pc, #220]	@ (8005f1c <statemachine+0x15e4>)
 8005e40:	edd3 7a00 	vldr	s15, [r3]
 8005e44:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8005f38 <statemachine+0x1600>
 8005e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005e4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e50:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8005f3c <statemachine+0x1604>
 8005e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e58:	4b31      	ldr	r3, [pc, #196]	@ (8005f20 <statemachine+0x15e8>)
 8005e5a:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f1c <statemachine+0x15e4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fa fb48 	bl	80004f8 <__aeabi_f2d>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	e9cd 2300 	strd	r2, r3, [sp]
 8005e70:	4a33      	ldr	r2, [pc, #204]	@ (8005f40 <statemachine+0x1608>)
 8005e72:	210f      	movs	r1, #15
 8005e74:	4833      	ldr	r0, [pc, #204]	@ (8005f44 <statemachine+0x160c>)
 8005e76:	f015 fc31 	bl	801b6dc <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8005e7a:	4a33      	ldr	r2, [pc, #204]	@ (8005f48 <statemachine+0x1610>)
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	ca06      	ldmia	r2, {r1, r2}
 8005e80:	4830      	ldr	r0, [pc, #192]	@ (8005f44 <statemachine+0x160c>)
 8005e82:	f7fe f9bf 	bl	8004204 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 36);
 8005e86:	2124      	movs	r1, #36	@ 0x24
 8005e88:	2020      	movs	r0, #32
 8005e8a:	f7fe f9e1 	bl	8004250 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8005e8e:	4b24      	ldr	r3, [pc, #144]	@ (8005f20 <statemachine+0x15e8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fa fb30 	bl	80004f8 <__aeabi_f2d>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8005ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f4c <statemachine+0x1614>)
 8005ea2:	210f      	movs	r1, #15
 8005ea4:	4827      	ldr	r0, [pc, #156]	@ (8005f44 <statemachine+0x160c>)
 8005ea6:	f015 fc19 	bl	801b6dc <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005eaa:	4a29      	ldr	r2, [pc, #164]	@ (8005f50 <statemachine+0x1618>)
 8005eac:	2301      	movs	r3, #1
 8005eae:	ca06      	ldmia	r2, {r1, r2}
 8005eb0:	4824      	ldr	r0, [pc, #144]	@ (8005f44 <statemachine+0x160c>)
 8005eb2:	f7fe f9a7 	bl	8004204 <ssd1306_WriteString>


			  if(BTN_A>=1){
 8005eb6:	4b12      	ldr	r3, [pc, #72]	@ (8005f00 <statemachine+0x15c8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	dd0b      	ble.n	8005ed6 <statemachine+0x159e>
			 	state++;
 8005ebe:	4b11      	ldr	r3, [pc, #68]	@ (8005f04 <statemachine+0x15cc>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <statemachine+0x15cc>)
 8005ec8:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <statemachine+0x15c8>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8005f08 <statemachine+0x15d0>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <statemachine+0x15d4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f340 82f4 	ble.w	80064c8 <statemachine+0x1b90>
			  				 									 									  			 	state--;
 8005ee0:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <statemachine+0x15cc>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <statemachine+0x15cc>)
 8005eea:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005eec:	4b04      	ldr	r3, [pc, #16]	@ (8005f00 <statemachine+0x15c8>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005ef2:	4b05      	ldr	r3, [pc, #20]	@ (8005f08 <statemachine+0x15d0>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005ef8:	4b04      	ldr	r3, [pc, #16]	@ (8005f0c <statemachine+0x15d4>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005efe:	e2e3      	b.n	80064c8 <statemachine+0x1b90>
 8005f00:	20000868 	.word	0x20000868
 8005f04:	200005dc 	.word	0x200005dc
 8005f08:	2000086c 	.word	0x2000086c
 8005f0c:	20000ba0 	.word	0x20000ba0
 8005f10:	20000014 	.word	0x20000014
 8005f14:	0801ff88 	.word	0x0801ff88
 8005f18:	200005df 	.word	0x200005df
 8005f1c:	20000b44 	.word	0x20000b44
 8005f20:	20000b40 	.word	0x20000b40
 8005f24:	20000b4c 	.word	0x20000b4c
 8005f28:	2000151c 	.word	0x2000151c
 8005f2c:	20000b48 	.word	0x20000b48
 8005f30:	20000b50 	.word	0x20000b50
 8005f34:	20000b9c 	.word	0x20000b9c
 8005f38:	476a6000 	.word	0x476a6000
 8005f3c:	447a0000 	.word	0x447a0000
 8005f40:	0801ff90 	.word	0x0801ff90
 8005f44:	20000ac8 	.word	0x20000ac8
 8005f48:	20000024 	.word	0x20000024
 8005f4c:	0801ff9c 	.word	0x0801ff9c
 8005f50:	2000001c 	.word	0x2000001c




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005f54:	2000      	movs	r0, #0
 8005f56:	f7fe f839 	bl	8003fcc <ssd1306_Fill>
				  ssd1306_SetCursor(32,12);
 8005f5a:	210c      	movs	r1, #12
 8005f5c:	2020      	movs	r0, #32
 8005f5e:	f7fe f977 	bl	8004250 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005f62:	4aa8      	ldr	r2, [pc, #672]	@ (8006204 <statemachine+0x18cc>)
 8005f64:	2301      	movs	r3, #1
 8005f66:	ca06      	ldmia	r2, {r1, r2}
 8005f68:	48a7      	ldr	r0, [pc, #668]	@ (8006208 <statemachine+0x18d0>)
 8005f6a:	f7fe f94b 	bl	8004204 <ssd1306_WriteString>
				  switch(usbstate){
 8005f6e:	4ba7      	ldr	r3, [pc, #668]	@ (800620c <statemachine+0x18d4>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	f000 812b 	beq.w	80061ce <statemachine+0x1896>
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	f300 82a7 	bgt.w	80064cc <statemachine+0x1b94>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <statemachine+0x1650>
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d042      	beq.n	800600c <statemachine+0x16d4>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005f86:	e2a1      	b.n	80064cc <statemachine+0x1b94>
				 					  ssd1306_SetCursor(32,20);
 8005f88:	2114      	movs	r1, #20
 8005f8a:	2020      	movs	r0, #32
 8005f8c:	f7fe f960 	bl	8004250 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005f90:	4a9c      	ldr	r2, [pc, #624]	@ (8006204 <statemachine+0x18cc>)
 8005f92:	2301      	movs	r3, #1
 8005f94:	ca06      	ldmia	r2, {r1, r2}
 8005f96:	489e      	ldr	r0, [pc, #632]	@ (8006210 <statemachine+0x18d8>)
 8005f98:	f7fe f934 	bl	8004204 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005f9c:	4b9d      	ldr	r3, [pc, #628]	@ (8006214 <statemachine+0x18dc>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8005fa2:	4b9d      	ldr	r3, [pc, #628]	@ (8006218 <statemachine+0x18e0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dd0b      	ble.n	8005fc2 <statemachine+0x168a>
				 						  usbstate++;
 8005faa:	4b98      	ldr	r3, [pc, #608]	@ (800620c <statemachine+0x18d4>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b96      	ldr	r3, [pc, #600]	@ (800620c <statemachine+0x18d4>)
 8005fb4:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005fb6:	4b98      	ldr	r3, [pc, #608]	@ (8006218 <statemachine+0x18e0>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005fbc:	4b97      	ldr	r3, [pc, #604]	@ (800621c <statemachine+0x18e4>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005fc2:	4b96      	ldr	r3, [pc, #600]	@ (800621c <statemachine+0x18e4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dd0b      	ble.n	8005fe2 <statemachine+0x16aa>
				 						 state++;
 8005fca:	4b95      	ldr	r3, [pc, #596]	@ (8006220 <statemachine+0x18e8>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	4b93      	ldr	r3, [pc, #588]	@ (8006220 <statemachine+0x18e8>)
 8005fd4:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005fd6:	4b91      	ldr	r3, [pc, #580]	@ (800621c <statemachine+0x18e4>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8006218 <statemachine+0x18e0>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005fe2:	4b90      	ldr	r3, [pc, #576]	@ (8006224 <statemachine+0x18ec>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f340 8202 	ble.w	80063f0 <statemachine+0x1ab8>
				 									 									 									  			 	state--;
 8005fec:	4b8c      	ldr	r3, [pc, #560]	@ (8006220 <statemachine+0x18e8>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	4b8a      	ldr	r3, [pc, #552]	@ (8006220 <statemachine+0x18e8>)
 8005ff6:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005ff8:	4b88      	ldr	r3, [pc, #544]	@ (800621c <statemachine+0x18e4>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005ffe:	4b86      	ldr	r3, [pc, #536]	@ (8006218 <statemachine+0x18e0>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8006004:	4b87      	ldr	r3, [pc, #540]	@ (8006224 <statemachine+0x18ec>)
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
				 					  break;
 800600a:	e1f1      	b.n	80063f0 <statemachine+0x1ab8>
				 					 ssd1306_SetCursor(32,20);
 800600c:	2114      	movs	r1, #20
 800600e:	2020      	movs	r0, #32
 8006010:	f7fe f91e 	bl	8004250 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8006014:	4a7b      	ldr	r2, [pc, #492]	@ (8006204 <statemachine+0x18cc>)
 8006016:	2301      	movs	r3, #1
 8006018:	ca06      	ldmia	r2, {r1, r2}
 800601a:	4883      	ldr	r0, [pc, #524]	@ (8006228 <statemachine+0x18f0>)
 800601c:	f7fe f8f2 	bl	8004204 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,28);
 8006020:	211c      	movs	r1, #28
 8006022:	2020      	movs	r0, #32
 8006024:	f7fe f914 	bl	8004250 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8006028:	4a76      	ldr	r2, [pc, #472]	@ (8006204 <statemachine+0x18cc>)
 800602a:	2301      	movs	r3, #1
 800602c:	ca06      	ldmia	r2, {r1, r2}
 800602e:	487f      	ldr	r0, [pc, #508]	@ (800622c <statemachine+0x18f4>)
 8006030:	f7fe f8e8 	bl	8004204 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8006034:	4b7e      	ldr	r3, [pc, #504]	@ (8006230 <statemachine+0x18f8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d137      	bne.n	80060ac <statemachine+0x1774>
					 					 ssd1306_Fill(Black);
 800603c:	2000      	movs	r0, #0
 800603e:	f7fd ffc5 	bl	8003fcc <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,12);
 8006042:	210c      	movs	r1, #12
 8006044:	2020      	movs	r0, #32
 8006046:	f7fe f903 	bl	8004250 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 800604a:	4a6e      	ldr	r2, [pc, #440]	@ (8006204 <statemachine+0x18cc>)
 800604c:	2301      	movs	r3, #1
 800604e:	ca06      	ldmia	r2, {r1, r2}
 8006050:	486d      	ldr	r0, [pc, #436]	@ (8006208 <statemachine+0x18d0>)
 8006052:	f7fe f8d7 	bl	8004204 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,20);
 8006056:	2114      	movs	r1, #20
 8006058:	2020      	movs	r0, #32
 800605a:	f7fe f8f9 	bl	8004250 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 800605e:	4a75      	ldr	r2, [pc, #468]	@ (8006234 <statemachine+0x18fc>)
 8006060:	2301      	movs	r3, #1
 8006062:	ca06      	ldmia	r2, {r1, r2}
 8006064:	4874      	ldr	r0, [pc, #464]	@ (8006238 <statemachine+0x1900>)
 8006066:	f7fe f8cd 	bl	8004204 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,30);
 800606a:	211e      	movs	r1, #30
 800606c:	2020      	movs	r0, #32
 800606e:	f7fe f8ef 	bl	8004250 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8006072:	4b72      	ldr	r3, [pc, #456]	@ (800623c <statemachine+0x1904>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800607e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8006240 <statemachine+0x1908>
 8006082:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006086:	ee16 0a90 	vmov	r0, s13
 800608a:	f7fa fa35 	bl	80004f8 <__aeabi_f2d>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	e9cd 2300 	strd	r2, r3, [sp]
 8006096:	4a6b      	ldr	r2, [pc, #428]	@ (8006244 <statemachine+0x190c>)
 8006098:	2132      	movs	r1, #50	@ 0x32
 800609a:	486b      	ldr	r0, [pc, #428]	@ (8006248 <statemachine+0x1910>)
 800609c:	f015 fb1e 	bl	801b6dc <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80060a0:	4a58      	ldr	r2, [pc, #352]	@ (8006204 <statemachine+0x18cc>)
 80060a2:	2301      	movs	r3, #1
 80060a4:	ca06      	ldmia	r2, {r1, r2}
 80060a6:	4868      	ldr	r0, [pc, #416]	@ (8006248 <statemachine+0x1910>)
 80060a8:	f7fe f8ac 	bl	8004204 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 80060ac:	4b5b      	ldr	r3, [pc, #364]	@ (800621c <statemachine+0x18e4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dd7a      	ble.n	80061aa <statemachine+0x1872>
				 						erasetime=HAL_GetTick();
 80060b4:	f001 fa3c 	bl	8007530 <HAL_GetTick>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	4b5f      	ldr	r3, [pc, #380]	@ (800623c <statemachine+0x1904>)
 80060be:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	e03f      	b.n	8006146 <statemachine+0x180e>
				 							ssd1306_Fill(Black);
 80060c6:	2000      	movs	r0, #0
 80060c8:	f7fd ff80 	bl	8003fcc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 80060cc:	2120      	movs	r1, #32
 80060ce:	2020      	movs	r0, #32
 80060d0:	f7fe f8be 	bl	8004250 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 80060d4:	4a4b      	ldr	r2, [pc, #300]	@ (8006204 <statemachine+0x18cc>)
 80060d6:	2301      	movs	r3, #1
 80060d8:	ca06      	ldmia	r2, {r1, r2}
 80060da:	484b      	ldr	r0, [pc, #300]	@ (8006208 <statemachine+0x18d0>)
 80060dc:	f7fe f892 	bl	8004204 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4619      	mov	r1, r3
 80060e4:	4859      	ldr	r0, [pc, #356]	@ (800624c <statemachine+0x1914>)
 80060e6:	f011 fdaa 	bl	8017c3e <SPIF_EraseSector>
				 							if(i>=1){
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dd21      	ble.n	8006134 <statemachine+0x17fc>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2264      	movs	r2, #100	@ 0x64
 80060f4:	fb02 f303 	mul.w	r3, r2, r3
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006100:	4b53      	ldr	r3, [pc, #332]	@ (8006250 <statemachine+0x1918>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	da00      	bge.n	800610a <statemachine+0x17d2>
 8006108:	330f      	adds	r3, #15
 800610a:	111b      	asrs	r3, r3, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f7fa f9e1 	bl	80004d4 <__aeabi_i2d>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4610      	mov	r0, r2
 8006118:	4619      	mov	r1, r3
 800611a:	f7fa fcf5 	bl	8000b08 <__aeabi_d2iz>
 800611e:	ee07 0a90 	vmov	s15, r0
 8006122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006126:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800612a:	eeb0 0a47 	vmov.f32	s0, s14
 800612e:	f7fe fba3 	bl	8004878 <percentage>
 8006132:	e003      	b.n	800613c <statemachine+0x1804>
				 								percentage((float) 0);
 8006134:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8006254 <statemachine+0x191c>
 8006138:	f7fe fb9e 	bl	8004878 <percentage>
				 							ssd1306_UpdateScreen();
 800613c:	f7fd ff5e 	bl	8003ffc <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	4b42      	ldr	r3, [pc, #264]	@ (8006250 <statemachine+0x1918>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da00      	bge.n	8006150 <statemachine+0x1818>
 800614e:	330f      	adds	r3, #15
 8006150:	111b      	asrs	r3, r3, #4
 8006152:	4618      	mov	r0, r3
 8006154:	f7fa f9be 	bl	80004d4 <__aeabi_i2d>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4610      	mov	r0, r2
 800615e:	4619      	mov	r1, r3
 8006160:	f7fa fcd2 	bl	8000b08 <__aeabi_d2iz>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4293      	cmp	r3, r2
 800616a:	ddac      	ble.n	80060c6 <statemachine+0x178e>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 800616c:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8006170:	4836      	ldr	r0, [pc, #216]	@ (800624c <statemachine+0x1914>)
 8006172:	f011 fd64 	bl	8017c3e <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8006176:	f001 f9db 	bl	8007530 <HAL_GetTick>
 800617a:	4603      	mov	r3, r0
 800617c:	4a2f      	ldr	r2, [pc, #188]	@ (800623c <statemachine+0x1904>)
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	461a      	mov	r2, r3
 8006184:	4b2d      	ldr	r3, [pc, #180]	@ (800623c <statemachine+0x1904>)
 8006186:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8006188:	4b29      	ldr	r3, [pc, #164]	@ (8006230 <statemachine+0x18f8>)
 800618a:	2201      	movs	r2, #1
 800618c:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 800618e:	4b32      	ldr	r3, [pc, #200]	@ (8006258 <statemachine+0x1920>)
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8006194:	4b2e      	ldr	r3, [pc, #184]	@ (8006250 <statemachine+0x1918>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
				 						storeindex();
 800619a:	f7fd fd3b 	bl	8003c14 <storeindex>
				 						BTN_A=0;
 800619e:	4b1f      	ldr	r3, [pc, #124]	@ (800621c <statemachine+0x18e4>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 80061a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006218 <statemachine+0x18e0>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 80061aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006218 <statemachine+0x18e0>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f340 8120 	ble.w	80063f4 <statemachine+0x1abc>
					 						usbstate++;
 80061b4:	4b15      	ldr	r3, [pc, #84]	@ (800620c <statemachine+0x18d4>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	3301      	adds	r3, #1
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	4b13      	ldr	r3, [pc, #76]	@ (800620c <statemachine+0x18d4>)
 80061be:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 80061c0:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <statemachine+0x18e0>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 80061c6:	4b15      	ldr	r3, [pc, #84]	@ (800621c <statemachine+0x18e4>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
				 			  break;
 80061cc:	e112      	b.n	80063f4 <statemachine+0x1abc>
				 					ssd1306_Fill(Black);
 80061ce:	2000      	movs	r0, #0
 80061d0:	f7fd fefc 	bl	8003fcc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,20);
 80061d4:	2114      	movs	r1, #20
 80061d6:	2020      	movs	r0, #32
 80061d8:	f7fe f83a 	bl	8004250 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 80061dc:	4a09      	ldr	r2, [pc, #36]	@ (8006204 <statemachine+0x18cc>)
 80061de:	2301      	movs	r3, #1
 80061e0:	ca06      	ldmia	r2, {r1, r2}
 80061e2:	481e      	ldr	r0, [pc, #120]	@ (800625c <statemachine+0x1924>)
 80061e4:	f7fe f80e 	bl	8004204 <ssd1306_WriteString>
				 					if(pagenumber>0){
 80061e8:	4b19      	ldr	r3, [pc, #100]	@ (8006250 <statemachine+0x1918>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f340 80ae 	ble.w	800634e <statemachine+0x1a16>
				 					int i=0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 80061f6:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <statemachine+0x18dc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 8095 	bne.w	800632a <statemachine+0x19f2>
				 						while(i<pagenumber){
 8006200:	e065      	b.n	80062ce <statemachine+0x1996>
 8006202:	bf00      	nop
 8006204:	20000014 	.word	0x20000014
 8006208:	0801ffa4 	.word	0x0801ffa4
 800620c:	200005e0 	.word	0x200005e0
 8006210:	0801ffa8 	.word	0x0801ffa8
 8006214:	20000b60 	.word	0x20000b60
 8006218:	2000086c 	.word	0x2000086c
 800621c:	20000868 	.word	0x20000868
 8006220:	200005dc 	.word	0x200005dc
 8006224:	20000ba0 	.word	0x20000ba0
 8006228:	0801ffb4 	.word	0x0801ffb4
 800622c:	0801ffbc 	.word	0x0801ffbc
 8006230:	20000b5c 	.word	0x20000b5c
 8006234:	2000001c 	.word	0x2000001c
 8006238:	0801ffc8 	.word	0x0801ffc8
 800623c:	20000b58 	.word	0x20000b58
 8006240:	447a0000 	.word	0x447a0000
 8006244:	0801ffcc 	.word	0x0801ffcc
 8006248:	20000ac8 	.word	0x20000ac8
 800624c:	20000870 	.word	0x20000870
 8006250:	20000aa8 	.word	0x20000aa8
 8006254:	00000000 	.word	0x00000000
 8006258:	20000aa4 	.word	0x20000aa4
 800625c:	0801ffd4 	.word	0x0801ffd4
				 							ssd1306_Fill(Black);
 8006260:	2000      	movs	r0, #0
 8006262:	f7fd feb3 	bl	8003fcc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,12);
 8006266:	210c      	movs	r1, #12
 8006268:	2020      	movs	r0, #32
 800626a:	f7fd fff1 	bl	8004250 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 800626e:	4a9c      	ldr	r2, [pc, #624]	@ (80064e0 <statemachine+0x1ba8>)
 8006270:	2301      	movs	r3, #1
 8006272:	ca06      	ldmia	r2, {r1, r2}
 8006274:	489b      	ldr	r0, [pc, #620]	@ (80064e4 <statemachine+0x1bac>)
 8006276:	f7fd ffc5 	bl	8004204 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006284:	4a98      	ldr	r2, [pc, #608]	@ (80064e8 <statemachine+0x1bb0>)
 8006286:	4899      	ldr	r0, [pc, #612]	@ (80064ec <statemachine+0x1bb4>)
 8006288:	f011 fd7a 	bl	8017d80 <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 800628c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006290:	4895      	ldr	r0, [pc, #596]	@ (80064e8 <statemachine+0x1bb0>)
 8006292:	f012 fc67 	bl	8018b64 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2264      	movs	r2, #100	@ 0x64
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062a6:	4b92      	ldr	r3, [pc, #584]	@ (80064f0 <statemachine+0x1bb8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80062b6:	eeb0 0a66 	vmov.f32	s0, s13
 80062ba:	f7fe fadd 	bl	8004878 <percentage>
				 							ssd1306_UpdateScreen();
 80062be:	f7fd fe9d 	bl	8003ffc <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 80062c2:	207d      	movs	r0, #125	@ 0x7d
 80062c4:	f7fb fa33 	bl	800172e <HAL_Delay>
				 							i++;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 80062ce:	4b88      	ldr	r3, [pc, #544]	@ (80064f0 <statemachine+0x1bb8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	dbc3      	blt.n	8006260 <statemachine+0x1928>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 80062d8:	4b85      	ldr	r3, [pc, #532]	@ (80064f0 <statemachine+0x1bb8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4619      	mov	r1, r3
 80062de:	4b85      	ldr	r3, [pc, #532]	@ (80064f4 <statemachine+0x1bbc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	2300      	movs	r3, #0
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	4a7f      	ldr	r2, [pc, #508]	@ (80064e8 <statemachine+0x1bb0>)
 80062ec:	487f      	ldr	r0, [pc, #508]	@ (80064ec <statemachine+0x1bb4>)
 80062ee:	f011 fd47 	bl	8017d80 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 80062f2:	4b80      	ldr	r3, [pc, #512]	@ (80064f4 <statemachine+0x1bbc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4619      	mov	r1, r3
 80062fa:	487b      	ldr	r0, [pc, #492]	@ (80064e8 <statemachine+0x1bb0>)
 80062fc:	f012 fc32 	bl	8018b64 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8006300:	207d      	movs	r0, #125	@ 0x7d
 8006302:	f7fb fa14 	bl	800172e <HAL_Delay>
				 						int taillefin=0;
 8006306:	2300      	movs	r3, #0
 8006308:	607b      	str	r3, [r7, #4]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 800630a:	4a7b      	ldr	r2, [pc, #492]	@ (80064f8 <statemachine+0x1bc0>)
 800630c:	2140      	movs	r1, #64	@ 0x40
 800630e:	487b      	ldr	r0, [pc, #492]	@ (80064fc <statemachine+0x1bc4>)
 8006310:	f015 f9e4 	bl	801b6dc <sniprintf>
 8006314:	6078      	str	r0, [r7, #4]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	b29b      	uxth	r3, r3
 800631a:	4619      	mov	r1, r3
 800631c:	4877      	ldr	r0, [pc, #476]	@ (80064fc <statemachine+0x1bc4>)
 800631e:	f012 fc21 	bl	8018b64 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8006322:	4b77      	ldr	r3, [pc, #476]	@ (8006500 <statemachine+0x1bc8>)
 8006324:	2201      	movs	r2, #1
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e003      	b.n	8006332 <statemachine+0x19fa>
				 						usbpercent=1;
 800632a:	4b76      	ldr	r3, [pc, #472]	@ (8006504 <statemachine+0x1bcc>)
 800632c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006330:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8006332:	2000      	movs	r0, #0
 8006334:	f7fd fe4a 	bl	8003fcc <ssd1306_Fill>
				 					ssd1306_SetCursor(32,35);
 8006338:	2123      	movs	r1, #35	@ 0x23
 800633a:	2020      	movs	r0, #32
 800633c:	f7fd ff88 	bl	8004250 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8006340:	4a71      	ldr	r2, [pc, #452]	@ (8006508 <statemachine+0x1bd0>)
 8006342:	2301      	movs	r3, #1
 8006344:	ca06      	ldmia	r2, {r1, r2}
 8006346:	4871      	ldr	r0, [pc, #452]	@ (800650c <statemachine+0x1bd4>)
 8006348:	f7fd ff5c 	bl	8004204 <ssd1306_WriteString>
 800634c:	e016      	b.n	800637c <statemachine+0x1a44>
				 							ssd1306_Fill(Black);
 800634e:	2000      	movs	r0, #0
 8006350:	f7fd fe3c 	bl	8003fcc <ssd1306_Fill>
				 							ssd1306_SetCursor(32,20);
 8006354:	2114      	movs	r1, #20
 8006356:	2020      	movs	r0, #32
 8006358:	f7fd ff7a 	bl	8004250 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 800635c:	4a60      	ldr	r2, [pc, #384]	@ (80064e0 <statemachine+0x1ba8>)
 800635e:	2301      	movs	r3, #1
 8006360:	ca06      	ldmia	r2, {r1, r2}
 8006362:	4860      	ldr	r0, [pc, #384]	@ (80064e4 <statemachine+0x1bac>)
 8006364:	f7fd ff4e 	bl	8004204 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,28);
 8006368:	211c      	movs	r1, #28
 800636a:	2020      	movs	r0, #32
 800636c:	f7fd ff70 	bl	8004250 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 8006370:	4a5b      	ldr	r2, [pc, #364]	@ (80064e0 <statemachine+0x1ba8>)
 8006372:	2301      	movs	r3, #1
 8006374:	ca06      	ldmia	r2, {r1, r2}
 8006376:	4866      	ldr	r0, [pc, #408]	@ (8006510 <statemachine+0x1bd8>)
 8006378:	f7fd ff44 	bl	8004204 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 800637c:	4b65      	ldr	r3, [pc, #404]	@ (8006514 <statemachine+0x1bdc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	dd11      	ble.n	80063a8 <statemachine+0x1a70>
				 									 						usbstate--;
 8006384:	4b64      	ldr	r3, [pc, #400]	@ (8006518 <statemachine+0x1be0>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	3b01      	subs	r3, #1
 800638a:	b2da      	uxtb	r2, r3
 800638c:	4b62      	ldr	r3, [pc, #392]	@ (8006518 <statemachine+0x1be0>)
 800638e:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8006390:	4b61      	ldr	r3, [pc, #388]	@ (8006518 <statemachine+0x1be0>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	3b01      	subs	r3, #1
 8006396:	b2da      	uxtb	r2, r3
 8006398:	4b5f      	ldr	r3, [pc, #380]	@ (8006518 <statemachine+0x1be0>)
 800639a:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 800639c:	4b5d      	ldr	r3, [pc, #372]	@ (8006514 <statemachine+0x1bdc>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 80063a2:	4b5e      	ldr	r3, [pc, #376]	@ (800651c <statemachine+0x1be4>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80063a8:	4b5c      	ldr	r3, [pc, #368]	@ (800651c <statemachine+0x1be4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dd0b      	ble.n	80063c8 <statemachine+0x1a90>
				 									  			 	state++;
 80063b0:	4b5b      	ldr	r3, [pc, #364]	@ (8006520 <statemachine+0x1be8>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	4b59      	ldr	r3, [pc, #356]	@ (8006520 <statemachine+0x1be8>)
 80063ba:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 80063bc:	4b57      	ldr	r3, [pc, #348]	@ (800651c <statemachine+0x1be4>)
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 80063c2:	4b54      	ldr	r3, [pc, #336]	@ (8006514 <statemachine+0x1bdc>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 80063c8:	4b56      	ldr	r3, [pc, #344]	@ (8006524 <statemachine+0x1bec>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dd13      	ble.n	80063f8 <statemachine+0x1ac0>
				 									 									  			 	state--;
 80063d0:	4b53      	ldr	r3, [pc, #332]	@ (8006520 <statemachine+0x1be8>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	4b51      	ldr	r3, [pc, #324]	@ (8006520 <statemachine+0x1be8>)
 80063da:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 80063dc:	4b4f      	ldr	r3, [pc, #316]	@ (800651c <statemachine+0x1be4>)
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 80063e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006514 <statemachine+0x1bdc>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 80063e8:	4b4e      	ldr	r3, [pc, #312]	@ (8006524 <statemachine+0x1bec>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
				 					 break;
 80063ee:	e003      	b.n	80063f8 <statemachine+0x1ac0>
				 					  break;
 80063f0:	bf00      	nop
 80063f2:	e06b      	b.n	80064cc <statemachine+0x1b94>
				 			  break;
 80063f4:	bf00      	nop
 80063f6:	e069      	b.n	80064cc <statemachine+0x1b94>
				 					 break;
 80063f8:	bf00      	nop
				  break;
 80063fa:	e067      	b.n	80064cc <statemachine+0x1b94>

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 80063fc:	2000      	movs	r0, #0
 80063fe:	f7fd fde5 	bl	8003fcc <ssd1306_Fill>
					  ssd1306_SetCursor(32,12);
 8006402:	210c      	movs	r1, #12
 8006404:	2020      	movs	r0, #32
 8006406:	f7fd ff23 	bl	8004250 <ssd1306_SetCursor>
					  ssd1306_WriteString("bluetooth",Font_6x8,White);
 800640a:	4a35      	ldr	r2, [pc, #212]	@ (80064e0 <statemachine+0x1ba8>)
 800640c:	2301      	movs	r3, #1
 800640e:	ca06      	ldmia	r2, {r1, r2}
 8006410:	4845      	ldr	r0, [pc, #276]	@ (8006528 <statemachine+0x1bf0>)
 8006412:	f7fd fef7 	bl	8004204 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,20);
 8006416:	2114      	movs	r1, #20
 8006418:	2020      	movs	r0, #32
 800641a:	f7fd ff19 	bl	8004250 <ssd1306_SetCursor>

					  ssd1306_WriteString((char *) blereceivebuf, Font_7x10, White);
 800641e:	4a3a      	ldr	r2, [pc, #232]	@ (8006508 <statemachine+0x1bd0>)
 8006420:	2301      	movs	r3, #1
 8006422:	ca06      	ldmia	r2, {r1, r2}
 8006424:	4841      	ldr	r0, [pc, #260]	@ (800652c <statemachine+0x1bf4>)
 8006426:	f7fd feed 	bl	8004204 <ssd1306_WriteString>



					  if(BTN_B>=1){
 800642a:	4b3a      	ldr	r3, [pc, #232]	@ (8006514 <statemachine+0x1bdc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	dd08      	ble.n	8006444 <statemachine+0x1b0c>


						  bluetoothsend=1;
 8006432:	4b3f      	ldr	r3, [pc, #252]	@ (8006530 <statemachine+0x1bf8>)
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]
						  BTN_B=0;
 8006438:	4b36      	ldr	r3, [pc, #216]	@ (8006514 <statemachine+0x1bdc>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
						  BTN_B_LONG=0;
 800643e:	4b3d      	ldr	r3, [pc, #244]	@ (8006534 <statemachine+0x1bfc>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]
					  }


				  if(BTN_A>=1){
 8006444:	4b35      	ldr	r3, [pc, #212]	@ (800651c <statemachine+0x1be4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	dd23      	ble.n	8006494 <statemachine+0x1b5c>
						state--;
 800644c:	4b34      	ldr	r3, [pc, #208]	@ (8006520 <statemachine+0x1be8>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	3b01      	subs	r3, #1
 8006452:	b2da      	uxtb	r2, r3
 8006454:	4b32      	ldr	r3, [pc, #200]	@ (8006520 <statemachine+0x1be8>)
 8006456:	701a      	strb	r2, [r3, #0]
						state--;
 8006458:	4b31      	ldr	r3, [pc, #196]	@ (8006520 <statemachine+0x1be8>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	3b01      	subs	r3, #1
 800645e:	b2da      	uxtb	r2, r3
 8006460:	4b2f      	ldr	r3, [pc, #188]	@ (8006520 <statemachine+0x1be8>)
 8006462:	701a      	strb	r2, [r3, #0]
						state--;
 8006464:	4b2e      	ldr	r3, [pc, #184]	@ (8006520 <statemachine+0x1be8>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	3b01      	subs	r3, #1
 800646a:	b2da      	uxtb	r2, r3
 800646c:	4b2c      	ldr	r3, [pc, #176]	@ (8006520 <statemachine+0x1be8>)
 800646e:	701a      	strb	r2, [r3, #0]
						state--;
 8006470:	4b2b      	ldr	r3, [pc, #172]	@ (8006520 <statemachine+0x1be8>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	3b01      	subs	r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	4b29      	ldr	r3, [pc, #164]	@ (8006520 <statemachine+0x1be8>)
 800647a:	701a      	strb	r2, [r3, #0]
						state--;
 800647c:	4b28      	ldr	r3, [pc, #160]	@ (8006520 <statemachine+0x1be8>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	3b01      	subs	r3, #1
 8006482:	b2da      	uxtb	r2, r3
 8006484:	4b26      	ldr	r3, [pc, #152]	@ (8006520 <statemachine+0x1be8>)
 8006486:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 8006488:	4b24      	ldr	r3, [pc, #144]	@ (800651c <statemachine+0x1be4>)
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 800648e:	4b21      	ldr	r3, [pc, #132]	@ (8006514 <statemachine+0x1bdc>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 8006494:	4b23      	ldr	r3, [pc, #140]	@ (8006524 <statemachine+0x1bec>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	dd19      	ble.n	80064d0 <statemachine+0x1b98>
							state--;
 800649c:	4b20      	ldr	r3, [pc, #128]	@ (8006520 <statemachine+0x1be8>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006520 <statemachine+0x1be8>)
 80064a6:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80064a8:	4b1c      	ldr	r3, [pc, #112]	@ (800651c <statemachine+0x1be4>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 80064ae:	4b19      	ldr	r3, [pc, #100]	@ (8006514 <statemachine+0x1bdc>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 80064b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006524 <statemachine+0x1bec>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
							}



					  break;
 80064ba:	e009      	b.n	80064d0 <statemachine+0x1b98>
				  									 	 break;
 80064bc:	bf00      	nop
 80064be:	e008      	b.n	80064d2 <statemachine+0x1b9a>
					  break;
 80064c0:	bf00      	nop
 80064c2:	e006      	b.n	80064d2 <statemachine+0x1b9a>
			  break;
 80064c4:	bf00      	nop
 80064c6:	e004      	b.n	80064d2 <statemachine+0x1b9a>
			  break;
 80064c8:	bf00      	nop
 80064ca:	e002      	b.n	80064d2 <statemachine+0x1b9a>
				  break;
 80064cc:	bf00      	nop
 80064ce:	e000      	b.n	80064d2 <statemachine+0x1b9a>
					  break;
 80064d0:	bf00      	nop




	}
return ;
 80064d2:	bf00      	nop
 80064d4:	bf00      	nop
}
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	ecbd 8b02 	vpop	{d8}
 80064de:	bdb0      	pop	{r4, r5, r7, pc}
 80064e0:	20000014 	.word	0x20000014
 80064e4:	0801ffd4 	.word	0x0801ffd4
 80064e8:	200009a4 	.word	0x200009a4
 80064ec:	20000870 	.word	0x20000870
 80064f0:	20000aa8 	.word	0x20000aa8
 80064f4:	20000aa4 	.word	0x20000aa4
 80064f8:	0801ffdc 	.word	0x0801ffdc
 80064fc:	20000afc 	.word	0x20000afc
 8006500:	20000b60 	.word	0x20000b60
 8006504:	20000b64 	.word	0x20000b64
 8006508:	2000001c 	.word	0x2000001c
 800650c:	0801ffec 	.word	0x0801ffec
 8006510:	0801fff4 	.word	0x0801fff4
 8006514:	2000086c 	.word	0x2000086c
 8006518:	200005e0 	.word	0x200005e0
 800651c:	20000868 	.word	0x20000868
 8006520:	200005dc 	.word	0x200005dc
 8006524:	20000ba0 	.word	0x20000ba0
 8006528:	0801fffc 	.word	0x0801fffc
 800652c:	20000ba8 	.word	0x20000ba8
 8006530:	20000ba4 	.word	0x20000ba4
 8006534:	20000b9c 	.word	0x20000b9c

08006538 <LL_AHB3_GRP1_EnableClock>:
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006544:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006546:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4313      	orrs	r3, r2
 800654e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4013      	ands	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800655c:	68fb      	ldr	r3, [r7, #12]
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800656e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006572:	f7ff ffe1 	bl	8006538 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8006576:	2200      	movs	r2, #0
 8006578:	2100      	movs	r1, #0
 800657a:	202e      	movs	r0, #46	@ 0x2e
 800657c:	f002 f9b7 	bl	80088ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006580:	202e      	movs	r0, #46	@ 0x2e
 8006582:	f002 f9ce 	bl	8008922 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006586:	bf00      	nop
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 8006590:	2114      	movs	r1, #20
 8006592:	2020      	movs	r0, #32
 8006594:	f7fd fe5c 	bl	8004250 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 8006598:	4a04      	ldr	r2, [pc, #16]	@ (80065ac <NMI_Handler+0x20>)
 800659a:	2301      	movs	r3, #1
 800659c:	ca06      	ldmia	r2, {r1, r2}
 800659e:	4804      	ldr	r0, [pc, #16]	@ (80065b0 <NMI_Handler+0x24>)
 80065a0:	f7fd fe30 	bl	8004204 <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 80065a4:	f7fd fd2a 	bl	8003ffc <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 80065a8:	bf00      	nop
 80065aa:	e7f1      	b.n	8006590 <NMI_Handler+0x4>
 80065ac:	2000001c 	.word	0x2000001c
 80065b0:	08020008 	.word	0x08020008

080065b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80065b8:	2114      	movs	r1, #20
 80065ba:	2020      	movs	r0, #32
 80065bc:	f7fd fe48 	bl	8004250 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80065c0:	4a04      	ldr	r2, [pc, #16]	@ (80065d4 <HardFault_Handler+0x20>)
 80065c2:	2301      	movs	r3, #1
 80065c4:	ca06      	ldmia	r2, {r1, r2}
 80065c6:	4804      	ldr	r0, [pc, #16]	@ (80065d8 <HardFault_Handler+0x24>)
 80065c8:	f7fd fe1c 	bl	8004204 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80065cc:	f7fd fd16 	bl	8003ffc <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80065d0:	bf00      	nop
 80065d2:	e7f1      	b.n	80065b8 <HardFault_Handler+0x4>
 80065d4:	2000001c 	.word	0x2000001c
 80065d8:	0802000c 	.word	0x0802000c

080065dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80065e0:	2114      	movs	r1, #20
 80065e2:	2020      	movs	r0, #32
 80065e4:	f7fd fe34 	bl	8004250 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 80065e8:	4a04      	ldr	r2, [pc, #16]	@ (80065fc <MemManage_Handler+0x20>)
 80065ea:	2301      	movs	r3, #1
 80065ec:	ca06      	ldmia	r2, {r1, r2}
 80065ee:	4804      	ldr	r0, [pc, #16]	@ (8006600 <MemManage_Handler+0x24>)
 80065f0:	f7fd fe08 	bl	8004204 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80065f4:	f7fd fd02 	bl	8003ffc <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80065f8:	bf00      	nop
 80065fa:	e7f1      	b.n	80065e0 <MemManage_Handler+0x4>
 80065fc:	2000001c 	.word	0x2000001c
 8006600:	08020018 	.word	0x08020018

08006604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006608:	2114      	movs	r1, #20
 800660a:	2020      	movs	r0, #32
 800660c:	f7fd fe20 	bl	8004250 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8006610:	4a04      	ldr	r2, [pc, #16]	@ (8006624 <BusFault_Handler+0x20>)
 8006612:	2301      	movs	r3, #1
 8006614:	ca06      	ldmia	r2, {r1, r2}
 8006616:	4804      	ldr	r0, [pc, #16]	@ (8006628 <BusFault_Handler+0x24>)
 8006618:	f7fd fdf4 	bl	8004204 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 800661c:	f7fd fcee 	bl	8003ffc <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006620:	bf00      	nop
 8006622:	e7f1      	b.n	8006608 <BusFault_Handler+0x4>
 8006624:	2000001c 	.word	0x2000001c
 8006628:	0802001c 	.word	0x0802001c

0800662c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006630:	2114      	movs	r1, #20
 8006632:	2020      	movs	r0, #32
 8006634:	f7fd fe0c 	bl	8004250 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 8006638:	4a04      	ldr	r2, [pc, #16]	@ (800664c <UsageFault_Handler+0x20>)
 800663a:	2301      	movs	r3, #1
 800663c:	ca06      	ldmia	r2, {r1, r2}
 800663e:	4804      	ldr	r0, [pc, #16]	@ (8006650 <UsageFault_Handler+0x24>)
 8006640:	f7fd fde0 	bl	8004204 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006644:	f7fd fcda 	bl	8003ffc <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006648:	bf00      	nop
 800664a:	e7f1      	b.n	8006630 <UsageFault_Handler+0x4>
 800664c:	2000001c 	.word	0x2000001c
 8006650:	08020020 	.word	0x08020020

08006654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006658:	bf00      	nop
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006662:	b480      	push	{r7}
 8006664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006666:	bf00      	nop
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006674:	bf00      	nop
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006682:	f000 ff41 	bl	8007508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006686:	bf00      	nop
 8006688:	bd80      	pop	{r7, pc}

0800668a <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800668e:	f7fb fcaf 	bl	8001ff0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8006692:	bf00      	nop
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800669c:	4802      	ldr	r0, [pc, #8]	@ (80066a8 <DMA1_Channel1_IRQHandler+0x10>)
 800669e:	f002 fbfc 	bl	8008e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200003f8 	.word	0x200003f8

080066ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80066b0:	4802      	ldr	r0, [pc, #8]	@ (80066bc <DMA1_Channel2_IRQHandler+0x10>)
 80066b2:	f002 fbf2 	bl	8008e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80066b6:	bf00      	nop
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	200014bc 	.word	0x200014bc

080066c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80066c4:	4802      	ldr	r0, [pc, #8]	@ (80066d0 <DMA1_Channel3_IRQHandler+0x10>)
 80066c6:	f002 fbe8 	bl	8008e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80066ca:	bf00      	nop
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000de4 	.word	0x20000de4

080066d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80066d8:	4802      	ldr	r0, [pc, #8]	@ (80066e4 <DMA1_Channel4_IRQHandler+0x10>)
 80066da:	f002 fbde 	bl	8008e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000e44 	.word	0x20000e44

080066e8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80066ec:	4802      	ldr	r0, [pc, #8]	@ (80066f8 <USB_LP_IRQHandler+0x10>)
 80066ee:	f003 fe71 	bl	800a3d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80066f2:	bf00      	nop
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20002b0c 	.word	0x20002b0c

080066fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006700:	4806      	ldr	r0, [pc, #24]	@ (800671c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8006702:	f008 fd88 	bl	800f216 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 8006706:	f000 fa75 	bl	8006bf4 <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800670a:	2101      	movs	r1, #1
 800670c:	4804      	ldr	r0, [pc, #16]	@ (8006720 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800670e:	f002 ff9f 	bl	8009650 <HAL_GPIO_TogglePin>
  bluetoothsend=1;
 8006712:	4b04      	ldr	r3, [pc, #16]	@ (8006724 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8006714:	2201      	movs	r2, #1
 8006716:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006718:	bf00      	nop
 800671a:	bd80      	pop	{r7, pc}
 800671c:	200012fc 	.word	0x200012fc
 8006720:	48000400 	.word	0x48000400
 8006724:	20000ba4 	.word	0x20000ba4

08006728 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800672c:	4805      	ldr	r0, [pc, #20]	@ (8006744 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 800672e:	f008 fd72 	bl	800f216 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8006732:	2102      	movs	r1, #2
 8006734:	4804      	ldr	r0, [pc, #16]	@ (8006748 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 8006736:	f002 ff8b 	bl	8009650 <HAL_GPIO_TogglePin>
  enablewrite=1;
 800673a:	4b04      	ldr	r3, [pc, #16]	@ (800674c <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 800673c:	2201      	movs	r2, #1
 800673e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8006740:	bf00      	nop
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20001348 	.word	0x20001348
 8006748:	48000400 	.word	0x48000400
 800674c:	20000b80 	.word	0x20000b80

08006750 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006754:	4802      	ldr	r0, [pc, #8]	@ (8006760 <SPI1_IRQHandler+0x10>)
 8006756:	f007 fff1 	bl	800e73c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000d80 	.word	0x20000d80

08006764 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006768:	4802      	ldr	r0, [pc, #8]	@ (8006774 <LPUART1_IRQHandler+0x10>)
 800676a:	f009 faeb 	bl	800fd44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800676e:	bf00      	nop
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20001394 	.word	0x20001394

08006778 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800677c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006780:	f002 ff80 	bl	8009684 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006784:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006788:	f002 ff7c 	bl	8009684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800678c:	bf00      	nop
 800678e:	bd80      	pop	{r7, pc}

08006790 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8006794:	f011 ffd4 	bl	8018740 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8006798:	bf00      	nop
 800679a:	bd80      	pop	{r7, pc}

0800679c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80067a0:	f012 f804 	bl	80187ac <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80067a4:	bf00      	nop
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80067ac:	f002 ff82 	bl	80096b4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80067b0:	bf00      	nop
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  return 1;
 80067b8:	2301      	movs	r3, #1
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <_kill>:

int _kill(int pid, int sig)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80067ce:	f015 f903 	bl	801b9d8 <__errno>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2216      	movs	r2, #22
 80067d6:	601a      	str	r2, [r3, #0]
  return -1;
 80067d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <_exit>:

void _exit (int status)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80067ec:	f04f 31ff 	mov.w	r1, #4294967295
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ffe7 	bl	80067c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <_exit+0x12>

080067fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	e00a      	b.n	8006822 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800680c:	f3af 8000 	nop.w
 8006810:	4601      	mov	r1, r0
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	60ba      	str	r2, [r7, #8]
 8006818:	b2ca      	uxtb	r2, r1
 800681a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	3301      	adds	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	dbf0      	blt.n	800680c <_read+0x12>
  }

  return len;
 800682a:	687b      	ldr	r3, [r7, #4]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e009      	b.n	800685a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	60ba      	str	r2, [r7, #8]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	3301      	adds	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	429a      	cmp	r2, r3
 8006860:	dbf1      	blt.n	8006846 <_write+0x12>
  }
  return len;
 8006862:	687b      	ldr	r3, [r7, #4]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <_close>:

int _close(int file)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006894:	605a      	str	r2, [r3, #4]
  return 0;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <_isatty>:

int _isatty(int file)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80068ac:	2301      	movs	r3, #1
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068dc:	4a14      	ldr	r2, [pc, #80]	@ (8006930 <_sbrk+0x5c>)
 80068de:	4b15      	ldr	r3, [pc, #84]	@ (8006934 <_sbrk+0x60>)
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068e8:	4b13      	ldr	r3, [pc, #76]	@ (8006938 <_sbrk+0x64>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80068f0:	4b11      	ldr	r3, [pc, #68]	@ (8006938 <_sbrk+0x64>)
 80068f2:	4a12      	ldr	r2, [pc, #72]	@ (800693c <_sbrk+0x68>)
 80068f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068f6:	4b10      	ldr	r3, [pc, #64]	@ (8006938 <_sbrk+0x64>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	d207      	bcs.n	8006914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006904:	f015 f868 	bl	801b9d8 <__errno>
 8006908:	4603      	mov	r3, r0
 800690a:	220c      	movs	r2, #12
 800690c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800690e:	f04f 33ff 	mov.w	r3, #4294967295
 8006912:	e009      	b.n	8006928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006914:	4b08      	ldr	r3, [pc, #32]	@ (8006938 <_sbrk+0x64>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800691a:	4b07      	ldr	r3, [pc, #28]	@ (8006938 <_sbrk+0x64>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4413      	add	r3, r2
 8006922:	4a05      	ldr	r2, [pc, #20]	@ (8006938 <_sbrk+0x64>)
 8006924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006926:	68fb      	ldr	r3, [r7, #12]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20030000 	.word	0x20030000
 8006934:	00000400 	.word	0x00000400
 8006938:	200012ac 	.word	0x200012ac
 800693c:	200031f8 	.word	0x200031f8

08006940 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8006944:	4b24      	ldr	r3, [pc, #144]	@ (80069d8 <SystemInit+0x98>)
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694a:	4a23      	ldr	r2, [pc, #140]	@ (80069d8 <SystemInit+0x98>)
 800694c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006968:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800696c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800696e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006978:	4b18      	ldr	r3, [pc, #96]	@ (80069dc <SystemInit+0x9c>)
 800697a:	4013      	ands	r3, r2
 800697c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800697e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800698a:	f023 0305 	bic.w	r3, r3, #5
 800698e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006996:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800699a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800699e:	f023 0301 	bic.w	r3, r3, #1
 80069a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80069a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069aa:	4a0d      	ldr	r2, [pc, #52]	@ (80069e0 <SystemInit+0xa0>)
 80069ac:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80069ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b2:	4a0b      	ldr	r2, [pc, #44]	@ (80069e0 <SystemInit+0xa0>)
 80069b4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80069b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80069c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ca:	2200      	movs	r2, #0
 80069cc:	619a      	str	r2, [r3, #24]
}
 80069ce:	bf00      	nop
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	e000ed00 	.word	0xe000ed00
 80069dc:	faf6fefb 	.word	0xfaf6fefb
 80069e0:	22041000 	.word	0x22041000

080069e4 <LL_APB1_GRP1_EnableClock>:
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80069ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80069f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80069fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4013      	ands	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a08:	68fb      	ldr	r3, [r7, #12]
}
 8006a0a:	bf00      	nop
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <LL_APB2_GRP1_EnableClock>:
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4013      	ands	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a4e:	f107 0310 	add.w	r3, r7, #16
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	605a      	str	r2, [r3, #4]
 8006a58:	609a      	str	r2, [r3, #8]
 8006a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a5c:	1d3b      	adds	r3, r7, #4
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	605a      	str	r2, [r3, #4]
 8006a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006a66:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae0 <MX_TIM2_Init+0x98>)
 8006a68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006a6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8006a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae0 <MX_TIM2_Init+0x98>)
 8006a70:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8006a74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a76:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae0 <MX_TIM2_Init+0x98>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8006a7c:	4b18      	ldr	r3, [pc, #96]	@ (8006ae0 <MX_TIM2_Init+0x98>)
 8006a7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a84:	4b16      	ldr	r3, [pc, #88]	@ (8006ae0 <MX_TIM2_Init+0x98>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a8a:	4b15      	ldr	r3, [pc, #84]	@ (8006ae0 <MX_TIM2_Init+0x98>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006a90:	4813      	ldr	r0, [pc, #76]	@ (8006ae0 <MX_TIM2_Init+0x98>)
 8006a92:	f008 faa5 	bl	800efe0 <HAL_TIM_Base_Init>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006a9c:	f7fc f9a8 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006aa6:	f107 0310 	add.w	r3, r7, #16
 8006aaa:	4619      	mov	r1, r3
 8006aac:	480c      	ldr	r0, [pc, #48]	@ (8006ae0 <MX_TIM2_Init+0x98>)
 8006aae:	f008 fcb9 	bl	800f424 <HAL_TIM_ConfigClockSource>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8006ab8:	f7fc f99a 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006abc:	2320      	movs	r3, #32
 8006abe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006ac4:	1d3b      	adds	r3, r7, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4805      	ldr	r0, [pc, #20]	@ (8006ae0 <MX_TIM2_Init+0x98>)
 8006aca:	f008 feb3 	bl	800f834 <HAL_TIMEx_MasterConfigSynchronization>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8006ad4:	f7fc f98c 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006ad8:	bf00      	nop
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	200012b0 	.word	0x200012b0

08006ae4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006ae8:	4b10      	ldr	r3, [pc, #64]	@ (8006b2c <MX_TIM16_Init+0x48>)
 8006aea:	4a11      	ldr	r2, [pc, #68]	@ (8006b30 <MX_TIM16_Init+0x4c>)
 8006aec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 8006aee:	4b0f      	ldr	r3, [pc, #60]	@ (8006b2c <MX_TIM16_Init+0x48>)
 8006af0:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006af4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006af6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b2c <MX_TIM16_Init+0x48>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006afc:	4b0b      	ldr	r3, [pc, #44]	@ (8006b2c <MX_TIM16_Init+0x48>)
 8006afe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006b02:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b04:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <MX_TIM16_Init+0x48>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006b0a:	4b08      	ldr	r3, [pc, #32]	@ (8006b2c <MX_TIM16_Init+0x48>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b10:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <MX_TIM16_Init+0x48>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006b16:	4805      	ldr	r0, [pc, #20]	@ (8006b2c <MX_TIM16_Init+0x48>)
 8006b18:	f008 fa62 	bl	800efe0 <HAL_TIM_Base_Init>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8006b22:	f7fc f965 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006b26:	bf00      	nop
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200012fc 	.word	0x200012fc
 8006b30:	40014400 	.word	0x40014400

08006b34 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006b38:	4b10      	ldr	r3, [pc, #64]	@ (8006b7c <MX_TIM17_Init+0x48>)
 8006b3a:	4a11      	ldr	r2, [pc, #68]	@ (8006b80 <MX_TIM17_Init+0x4c>)
 8006b3c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8006b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b7c <MX_TIM17_Init+0x48>)
 8006b40:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006b44:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b46:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <MX_TIM17_Init+0x48>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b7c <MX_TIM17_Init+0x48>)
 8006b4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006b52:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b54:	4b09      	ldr	r3, [pc, #36]	@ (8006b7c <MX_TIM17_Init+0x48>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006b5a:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <MX_TIM17_Init+0x48>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b60:	4b06      	ldr	r3, [pc, #24]	@ (8006b7c <MX_TIM17_Init+0x48>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006b66:	4805      	ldr	r0, [pc, #20]	@ (8006b7c <MX_TIM17_Init+0x48>)
 8006b68:	f008 fa3a 	bl	800efe0 <HAL_TIM_Base_Init>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8006b72:	f7fc f93d 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006b76:	bf00      	nop
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20001348 	.word	0x20001348
 8006b80:	40014800 	.word	0x40014800

08006b84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b94:	d103      	bne.n	8006b9e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b96:	2001      	movs	r0, #1
 8006b98:	f7ff ff24 	bl	80069e4 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006b9c:	e022      	b.n	8006be4 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a12      	ldr	r2, [pc, #72]	@ (8006bec <HAL_TIM_Base_MspInit+0x68>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d10c      	bne.n	8006bc2 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006ba8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006bac:	f7ff ff33 	bl	8006a16 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2104      	movs	r1, #4
 8006bb4:	2019      	movs	r0, #25
 8006bb6:	f001 fe9a 	bl	80088ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006bba:	2019      	movs	r0, #25
 8006bbc:	f001 feb1 	bl	8008922 <HAL_NVIC_EnableIRQ>
}
 8006bc0:	e010      	b.n	8006be4 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8006bf0 <HAL_TIM_Base_MspInit+0x6c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d10b      	bne.n	8006be4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006bcc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8006bd0:	f7ff ff21 	bl	8006a16 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	201a      	movs	r0, #26
 8006bda:	f001 fe88 	bl	80088ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006bde:	201a      	movs	r0, #26
 8006be0:	f001 fe9f 	bl	8008922 <HAL_NVIC_EnableIRQ>
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800

08006bf4 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0

	SEC+=1;
 8006bf8:	4b98      	ldr	r3, [pc, #608]	@ (8006e5c <updatedate+0x268>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	4b96      	ldr	r3, [pc, #600]	@ (8006e5c <updatedate+0x268>)
 8006c02:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006c04:	4b95      	ldr	r3, [pc, #596]	@ (8006e5c <updatedate+0x268>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b3b      	cmp	r3, #59	@ 0x3b
 8006c0a:	d908      	bls.n	8006c1e <updatedate+0x2a>
		SEC=0;
 8006c0c:	4b93      	ldr	r3, [pc, #588]	@ (8006e5c <updatedate+0x268>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006c12:	4b93      	ldr	r3, [pc, #588]	@ (8006e60 <updatedate+0x26c>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	3301      	adds	r3, #1
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	4b91      	ldr	r3, [pc, #580]	@ (8006e60 <updatedate+0x26c>)
 8006c1c:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8006c1e:	4b90      	ldr	r3, [pc, #576]	@ (8006e60 <updatedate+0x26c>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b3b      	cmp	r3, #59	@ 0x3b
 8006c24:	d908      	bls.n	8006c38 <updatedate+0x44>

		MINUTE=0;
 8006c26:	4b8e      	ldr	r3, [pc, #568]	@ (8006e60 <updatedate+0x26c>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8006c2c:	4b8d      	ldr	r3, [pc, #564]	@ (8006e64 <updatedate+0x270>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	4b8b      	ldr	r3, [pc, #556]	@ (8006e64 <updatedate+0x270>)
 8006c36:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8006c38:	4b8a      	ldr	r3, [pc, #552]	@ (8006e64 <updatedate+0x270>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b17      	cmp	r3, #23
 8006c3e:	d908      	bls.n	8006c52 <updatedate+0x5e>
		HR=0;
 8006c40:	4b88      	ldr	r3, [pc, #544]	@ (8006e64 <updatedate+0x270>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8006c46:	4b88      	ldr	r3, [pc, #544]	@ (8006e68 <updatedate+0x274>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	4b86      	ldr	r3, [pc, #536]	@ (8006e68 <updatedate+0x274>)
 8006c50:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8006c52:	4b86      	ldr	r3, [pc, #536]	@ (8006e6c <updatedate+0x278>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b0b      	cmp	r3, #11
 8006c58:	f200 8137 	bhi.w	8006eca <updatedate+0x2d6>
 8006c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c64 <updatedate+0x70>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c95 	.word	0x08006c95
 8006c68:	08006cbf 	.word	0x08006cbf
 8006c6c:	08006ce9 	.word	0x08006ce9
 8006c70:	08006d13 	.word	0x08006d13
 8006c74:	08006d3d 	.word	0x08006d3d
 8006c78:	08006d67 	.word	0x08006d67
 8006c7c:	08006d91 	.word	0x08006d91
 8006c80:	08006dbb 	.word	0x08006dbb
 8006c84:	08006de3 	.word	0x08006de3
 8006c88:	08006e0b 	.word	0x08006e0b
 8006c8c:	08006e33 	.word	0x08006e33
 8006c90:	08006e75 	.word	0x08006e75

	case JANVIER:
		if(JOURS>31){
 8006c94:	4b74      	ldr	r3, [pc, #464]	@ (8006e68 <updatedate+0x274>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b1f      	cmp	r3, #31
 8006c9a:	f240 80ff 	bls.w	8006e9c <updatedate+0x2a8>
			JOURS=1;
 8006c9e:	4b72      	ldr	r3, [pc, #456]	@ (8006e68 <updatedate+0x274>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	701a      	strb	r2, [r3, #0]
			mois++;
 8006ca4:	4b71      	ldr	r3, [pc, #452]	@ (8006e6c <updatedate+0x278>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	4b6f      	ldr	r3, [pc, #444]	@ (8006e6c <updatedate+0x278>)
 8006cae:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8006cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8006e70 <updatedate+0x27c>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	4b6d      	ldr	r3, [pc, #436]	@ (8006e70 <updatedate+0x27c>)
 8006cba:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006cbc:	e0ee      	b.n	8006e9c <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8006cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8006e68 <updatedate+0x274>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b1d      	cmp	r3, #29
 8006cc4:	f240 80ec 	bls.w	8006ea0 <updatedate+0x2ac>
					JOURS=1;
 8006cc8:	4b67      	ldr	r3, [pc, #412]	@ (8006e68 <updatedate+0x274>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	701a      	strb	r2, [r3, #0]
					mois++;
 8006cce:	4b67      	ldr	r3, [pc, #412]	@ (8006e6c <updatedate+0x278>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	4b65      	ldr	r3, [pc, #404]	@ (8006e6c <updatedate+0x278>)
 8006cd8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006cda:	4b65      	ldr	r3, [pc, #404]	@ (8006e70 <updatedate+0x27c>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4b63      	ldr	r3, [pc, #396]	@ (8006e70 <updatedate+0x27c>)
 8006ce4:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006ce6:	e0db      	b.n	8006ea0 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8006ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8006e68 <updatedate+0x274>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b1f      	cmp	r3, #31
 8006cee:	f240 80d9 	bls.w	8006ea4 <updatedate+0x2b0>
					JOURS=1;
 8006cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8006e68 <updatedate+0x274>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
					mois++;
 8006cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8006e6c <updatedate+0x278>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	4b5a      	ldr	r3, [pc, #360]	@ (8006e6c <updatedate+0x278>)
 8006d02:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d04:	4b5a      	ldr	r3, [pc, #360]	@ (8006e70 <updatedate+0x27c>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	4b58      	ldr	r3, [pc, #352]	@ (8006e70 <updatedate+0x27c>)
 8006d0e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d10:	e0c8      	b.n	8006ea4 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006d12:	4b55      	ldr	r3, [pc, #340]	@ (8006e68 <updatedate+0x274>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b1e      	cmp	r3, #30
 8006d18:	f240 80c6 	bls.w	8006ea8 <updatedate+0x2b4>
					JOURS=1;
 8006d1c:	4b52      	ldr	r3, [pc, #328]	@ (8006e68 <updatedate+0x274>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d22:	4b52      	ldr	r3, [pc, #328]	@ (8006e6c <updatedate+0x278>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	3301      	adds	r3, #1
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	4b50      	ldr	r3, [pc, #320]	@ (8006e6c <updatedate+0x278>)
 8006d2c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d2e:	4b50      	ldr	r3, [pc, #320]	@ (8006e70 <updatedate+0x27c>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	3301      	adds	r3, #1
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	4b4e      	ldr	r3, [pc, #312]	@ (8006e70 <updatedate+0x27c>)
 8006d38:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d3a:	e0b5      	b.n	8006ea8 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8006d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8006e68 <updatedate+0x274>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b1f      	cmp	r3, #31
 8006d42:	f240 80b3 	bls.w	8006eac <updatedate+0x2b8>
					JOURS=1;
 8006d46:	4b48      	ldr	r3, [pc, #288]	@ (8006e68 <updatedate+0x274>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d4c:	4b47      	ldr	r3, [pc, #284]	@ (8006e6c <updatedate+0x278>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	4b45      	ldr	r3, [pc, #276]	@ (8006e6c <updatedate+0x278>)
 8006d56:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d58:	4b45      	ldr	r3, [pc, #276]	@ (8006e70 <updatedate+0x27c>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	4b43      	ldr	r3, [pc, #268]	@ (8006e70 <updatedate+0x27c>)
 8006d62:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d64:	e0a2      	b.n	8006eac <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8006d66:	4b40      	ldr	r3, [pc, #256]	@ (8006e68 <updatedate+0x274>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b1e      	cmp	r3, #30
 8006d6c:	f240 80a0 	bls.w	8006eb0 <updatedate+0x2bc>
					JOURS=1;
 8006d70:	4b3d      	ldr	r3, [pc, #244]	@ (8006e68 <updatedate+0x274>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d76:	4b3d      	ldr	r3, [pc, #244]	@ (8006e6c <updatedate+0x278>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e6c <updatedate+0x278>)
 8006d80:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d82:	4b3b      	ldr	r3, [pc, #236]	@ (8006e70 <updatedate+0x27c>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	4b39      	ldr	r3, [pc, #228]	@ (8006e70 <updatedate+0x27c>)
 8006d8c:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d8e:	e08f      	b.n	8006eb0 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006d90:	4b35      	ldr	r3, [pc, #212]	@ (8006e68 <updatedate+0x274>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b1f      	cmp	r3, #31
 8006d96:	f240 808d 	bls.w	8006eb4 <updatedate+0x2c0>
					JOURS=1;
 8006d9a:	4b33      	ldr	r3, [pc, #204]	@ (8006e68 <updatedate+0x274>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006da0:	4b32      	ldr	r3, [pc, #200]	@ (8006e6c <updatedate+0x278>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	4b30      	ldr	r3, [pc, #192]	@ (8006e6c <updatedate+0x278>)
 8006daa:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006dac:	4b30      	ldr	r3, [pc, #192]	@ (8006e70 <updatedate+0x27c>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	4b2e      	ldr	r3, [pc, #184]	@ (8006e70 <updatedate+0x27c>)
 8006db6:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006db8:	e07c      	b.n	8006eb4 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8006dba:	4b2b      	ldr	r3, [pc, #172]	@ (8006e68 <updatedate+0x274>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b1f      	cmp	r3, #31
 8006dc0:	d97a      	bls.n	8006eb8 <updatedate+0x2c4>
					JOURS=1;
 8006dc2:	4b29      	ldr	r3, [pc, #164]	@ (8006e68 <updatedate+0x274>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	701a      	strb	r2, [r3, #0]
					mois++;
 8006dc8:	4b28      	ldr	r3, [pc, #160]	@ (8006e6c <updatedate+0x278>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	4b26      	ldr	r3, [pc, #152]	@ (8006e6c <updatedate+0x278>)
 8006dd2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006dd4:	4b26      	ldr	r3, [pc, #152]	@ (8006e70 <updatedate+0x27c>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	4b24      	ldr	r3, [pc, #144]	@ (8006e70 <updatedate+0x27c>)
 8006dde:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006de0:	e06a      	b.n	8006eb8 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006de2:	4b21      	ldr	r3, [pc, #132]	@ (8006e68 <updatedate+0x274>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b1e      	cmp	r3, #30
 8006de8:	d968      	bls.n	8006ebc <updatedate+0x2c8>
					JOURS=1;
 8006dea:	4b1f      	ldr	r3, [pc, #124]	@ (8006e68 <updatedate+0x274>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]
					mois++;
 8006df0:	4b1e      	ldr	r3, [pc, #120]	@ (8006e6c <updatedate+0x278>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	4b1c      	ldr	r3, [pc, #112]	@ (8006e6c <updatedate+0x278>)
 8006dfa:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8006e70 <updatedate+0x27c>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	4b1a      	ldr	r3, [pc, #104]	@ (8006e70 <updatedate+0x27c>)
 8006e06:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e08:	e058      	b.n	8006ebc <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8006e0a:	4b17      	ldr	r3, [pc, #92]	@ (8006e68 <updatedate+0x274>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b1f      	cmp	r3, #31
 8006e10:	d956      	bls.n	8006ec0 <updatedate+0x2cc>
					JOURS=1;
 8006e12:	4b15      	ldr	r3, [pc, #84]	@ (8006e68 <updatedate+0x274>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e18:	4b14      	ldr	r3, [pc, #80]	@ (8006e6c <updatedate+0x278>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	4b12      	ldr	r3, [pc, #72]	@ (8006e6c <updatedate+0x278>)
 8006e22:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e24:	4b12      	ldr	r3, [pc, #72]	@ (8006e70 <updatedate+0x27c>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	4b10      	ldr	r3, [pc, #64]	@ (8006e70 <updatedate+0x27c>)
 8006e2e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e30:	e046      	b.n	8006ec0 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006e32:	4b0d      	ldr	r3, [pc, #52]	@ (8006e68 <updatedate+0x274>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b1e      	cmp	r3, #30
 8006e38:	d944      	bls.n	8006ec4 <updatedate+0x2d0>
					JOURS=1;
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <updatedate+0x274>)
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e40:	4b0a      	ldr	r3, [pc, #40]	@ (8006e6c <updatedate+0x278>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	4b08      	ldr	r3, [pc, #32]	@ (8006e6c <updatedate+0x278>)
 8006e4a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e4c:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <updatedate+0x27c>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	3301      	adds	r3, #1
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <updatedate+0x27c>)
 8006e56:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e58:	e034      	b.n	8006ec4 <updatedate+0x2d0>
 8006e5a:	bf00      	nop
 8006e5c:	20000b84 	.word	0x20000b84
 8006e60:	20000b86 	.word	0x20000b86
 8006e64:	20000b85 	.word	0x20000b85
 8006e68:	20000010 	.word	0x20000010
 8006e6c:	20000b87 	.word	0x20000b87
 8006e70:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8006e74:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef4 <updatedate+0x300>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b1f      	cmp	r3, #31
 8006e7a:	d925      	bls.n	8006ec8 <updatedate+0x2d4>
					JOURS=1;
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef4 <updatedate+0x300>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e82:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef8 <updatedate+0x304>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	3301      	adds	r3, #1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef8 <updatedate+0x304>)
 8006e8c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006efc <updatedate+0x308>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	4b19      	ldr	r3, [pc, #100]	@ (8006efc <updatedate+0x308>)
 8006e98:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e9a:	e015      	b.n	8006ec8 <updatedate+0x2d4>
		break;
 8006e9c:	bf00      	nop
 8006e9e:	e014      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006ea0:	bf00      	nop
 8006ea2:	e012      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006ea4:	bf00      	nop
 8006ea6:	e010      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006ea8:	bf00      	nop
 8006eaa:	e00e      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006eac:	bf00      	nop
 8006eae:	e00c      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006eb0:	bf00      	nop
 8006eb2:	e00a      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006eb4:	bf00      	nop
 8006eb6:	e008      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006eb8:	bf00      	nop
 8006eba:	e006      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006ebc:	bf00      	nop
 8006ebe:	e004      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006ec0:	bf00      	nop
 8006ec2:	e002      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <updatedate+0x2d6>
		break;
 8006ec8:	bf00      	nop

	}

	if(MOIS>12){
 8006eca:	4b0c      	ldr	r3, [pc, #48]	@ (8006efc <updatedate+0x308>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b0c      	cmp	r3, #12
 8006ed0:	d90b      	bls.n	8006eea <updatedate+0x2f6>
		mois=JANVIER;
 8006ed2:	4b09      	ldr	r3, [pc, #36]	@ (8006ef8 <updatedate+0x304>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8006ed8:	4b08      	ldr	r3, [pc, #32]	@ (8006efc <updatedate+0x308>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8006ede:	4b08      	ldr	r3, [pc, #32]	@ (8006f00 <updatedate+0x30c>)
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <updatedate+0x30c>)
 8006ee8:	801a      	strh	r2, [r3, #0]
	}
}
 8006eea:	bf00      	nop
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	20000010 	.word	0x20000010
 8006ef8:	20000b87 	.word	0x20000b87
 8006efc:	20000011 	.word	0x20000011
 8006f00:	20000012 	.word	0x20000012

08006f04 <LL_AHB2_GRP1_EnableClock>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4013      	ands	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f28:	68fb      	ldr	r3, [r7, #12]
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <LL_APB1_GRP2_EnableClock>:
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4013      	ands	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <LL_APB1_GRP2_DisableClock>:
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8006f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f7e:	4013      	ands	r3, r2
 8006f80:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <LL_APB2_GRP1_EnableClock>:
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006faa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
}
 8006fb4:	bf00      	nop
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8006fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fcc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006fec:	4b22      	ldr	r3, [pc, #136]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8006fee:	4a23      	ldr	r2, [pc, #140]	@ (800707c <MX_LPUART1_UART_Init+0x94>)
 8006ff0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8006ff2:	4b21      	ldr	r3, [pc, #132]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8006ff4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006ff8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007000:	4b1d      	ldr	r3, [pc, #116]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8007002:	2200      	movs	r2, #0
 8007004:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8007006:	4b1c      	ldr	r3, [pc, #112]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8007008:	2200      	movs	r2, #0
 800700a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800700c:	4b1a      	ldr	r3, [pc, #104]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 800700e:	220c      	movs	r2, #12
 8007010:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007012:	4b19      	ldr	r3, [pc, #100]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8007014:	2200      	movs	r2, #0
 8007016:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007018:	4b17      	ldr	r3, [pc, #92]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 800701a:	2200      	movs	r2, #0
 800701c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800701e:	4b16      	ldr	r3, [pc, #88]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8007020:	2200      	movs	r2, #0
 8007022:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007024:	4b14      	ldr	r3, [pc, #80]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8007026:	2200      	movs	r2, #0
 8007028:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800702a:	4b13      	ldr	r3, [pc, #76]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 800702c:	2200      	movs	r2, #0
 800702e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8007030:	4811      	ldr	r0, [pc, #68]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8007032:	f008 fc9d 	bl	800f970 <HAL_UART_Init>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800703c:	f7fb fed8 	bl	8002df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007040:	2100      	movs	r1, #0
 8007042:	480d      	ldr	r0, [pc, #52]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8007044:	f00a f8a2 	bl	801118c <HAL_UARTEx_SetTxFifoThreshold>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800704e:	f7fb fecf 	bl	8002df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007052:	2100      	movs	r1, #0
 8007054:	4808      	ldr	r0, [pc, #32]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8007056:	f00a f8d7 	bl	8011208 <HAL_UARTEx_SetRxFifoThreshold>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007060:	f7fb fec6 	bl	8002df0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007064:	4804      	ldr	r0, [pc, #16]	@ (8007078 <MX_LPUART1_UART_Init+0x90>)
 8007066:	f00a f858 	bl	801111a <HAL_UARTEx_DisableFifoMode>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007070:	f7fb febe 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007074:	bf00      	nop
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20001394 	.word	0x20001394
 800707c:	40008000 	.word	0x40008000

08007080 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007084:	4b22      	ldr	r3, [pc, #136]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 8007086:	4a23      	ldr	r2, [pc, #140]	@ (8007114 <MX_USART1_UART_Init+0x94>)
 8007088:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800708a:	4b21      	ldr	r3, [pc, #132]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 800708c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007090:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007092:	4b1f      	ldr	r3, [pc, #124]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 8007094:	2200      	movs	r2, #0
 8007096:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007098:	4b1d      	ldr	r3, [pc, #116]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 800709a:	2200      	movs	r2, #0
 800709c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800709e:	4b1c      	ldr	r3, [pc, #112]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80070a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070a6:	220c      	movs	r2, #12
 80070a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80070aa:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80070b0:	4b17      	ldr	r3, [pc, #92]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80070b6:	4b16      	ldr	r3, [pc, #88]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80070bc:	4b14      	ldr	r3, [pc, #80]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070be:	2200      	movs	r2, #0
 80070c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80070c2:	4b13      	ldr	r3, [pc, #76]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80070c8:	4811      	ldr	r0, [pc, #68]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070ca:	f008 fc51 	bl	800f970 <HAL_UART_Init>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80070d4:	f7fb fe8c 	bl	8002df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070d8:	2100      	movs	r1, #0
 80070da:	480d      	ldr	r0, [pc, #52]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070dc:	f00a f856 	bl	801118c <HAL_UARTEx_SetTxFifoThreshold>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80070e6:	f7fb fe83 	bl	8002df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070ea:	2100      	movs	r1, #0
 80070ec:	4808      	ldr	r0, [pc, #32]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070ee:	f00a f88b 	bl	8011208 <HAL_UARTEx_SetRxFifoThreshold>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80070f8:	f7fb fe7a 	bl	8002df0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80070fc:	4804      	ldr	r0, [pc, #16]	@ (8007110 <MX_USART1_UART_Init+0x90>)
 80070fe:	f00a f80c 	bl	801111a <HAL_UARTEx_DisableFifoMode>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007108:	f7fb fe72 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800710c:	bf00      	nop
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20001428 	.word	0x20001428
 8007114:	40013800 	.word	0x40013800

08007118 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b09c      	sub	sp, #112	@ 0x70
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007120:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	609a      	str	r2, [r3, #8]
 800712c:	60da      	str	r2, [r3, #12]
 800712e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	2250      	movs	r2, #80	@ 0x50
 8007136:	2100      	movs	r1, #0
 8007138:	4618      	mov	r0, r3
 800713a:	f014 fb66 	bl	801b80a <memset>
  if(uartHandle->Instance==LPUART1)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a46      	ldr	r2, [pc, #280]	@ (800725c <HAL_UART_MspInit+0x144>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d158      	bne.n	80071fa <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007148:	2302      	movs	r3, #2
 800714a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800714c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007150:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007152:	f107 030c 	add.w	r3, r7, #12
 8007156:	4618      	mov	r0, r3
 8007158:	f006 f8a3 	bl	800d2a2 <HAL_RCCEx_PeriphCLKConfig>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007162:	f7fb fe45 	bl	8002df0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007166:	2001      	movs	r0, #1
 8007168:	f7ff fee5 	bl	8006f36 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800716c:	2001      	movs	r0, #1
 800716e:	f7ff fec9 	bl	8006f04 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007172:	230c      	movs	r3, #12
 8007174:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007176:	2302      	movs	r3, #2
 8007178:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800717a:	2300      	movs	r3, #0
 800717c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800717e:	2300      	movs	r3, #0
 8007180:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8007182:	2308      	movs	r3, #8
 8007184:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007186:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800718a:	4619      	mov	r1, r3
 800718c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007190:	f001 ffe0 	bl	8009154 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8007194:	4b32      	ldr	r3, [pc, #200]	@ (8007260 <HAL_UART_MspInit+0x148>)
 8007196:	4a33      	ldr	r2, [pc, #204]	@ (8007264 <HAL_UART_MspInit+0x14c>)
 8007198:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800719a:	4b31      	ldr	r3, [pc, #196]	@ (8007260 <HAL_UART_MspInit+0x148>)
 800719c:	2210      	movs	r2, #16
 800719e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80071a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071a6:	4b2e      	ldr	r3, [pc, #184]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80071ac:	4b2c      	ldr	r3, [pc, #176]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071ae:	2280      	movs	r2, #128	@ 0x80
 80071b0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80071b2:	4b2b      	ldr	r3, [pc, #172]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80071b8:	4b29      	ldr	r3, [pc, #164]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80071be:	4b28      	ldr	r3, [pc, #160]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071c0:	2220      	movs	r2, #32
 80071c2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80071c4:	4b26      	ldr	r3, [pc, #152]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80071ca:	4825      	ldr	r0, [pc, #148]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071cc:	f001 fbee 	bl	80089ac <HAL_DMA_Init>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80071d6:	f7fb fe0b 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a20      	ldr	r2, [pc, #128]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80071e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007260 <HAL_UART_MspInit+0x148>)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 80071e8:	2200      	movs	r2, #0
 80071ea:	2102      	movs	r1, #2
 80071ec:	2025      	movs	r0, #37	@ 0x25
 80071ee:	f001 fb7e 	bl	80088ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80071f2:	2025      	movs	r0, #37	@ 0x25
 80071f4:	f001 fb95 	bl	8008922 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80071f8:	e02b      	b.n	8007252 <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART1)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007268 <HAL_UART_MspInit+0x150>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d126      	bne.n	8007252 <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007204:	2301      	movs	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007208:	2300      	movs	r3, #0
 800720a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	4618      	mov	r0, r3
 8007212:	f006 f846 	bl	800d2a2 <HAL_RCCEx_PeriphCLKConfig>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <HAL_UART_MspInit+0x108>
      Error_Handler();
 800721c:	f7fb fde8 	bl	8002df0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007220:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007224:	f7ff feb3 	bl	8006f8e <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007228:	2001      	movs	r0, #1
 800722a:	f7ff fe6b 	bl	8006f04 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800722e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007232:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007234:	2302      	movs	r3, #2
 8007236:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007238:	2300      	movs	r3, #0
 800723a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800723c:	2300      	movs	r3, #0
 800723e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007240:	2307      	movs	r3, #7
 8007242:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007244:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007248:	4619      	mov	r1, r3
 800724a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800724e:	f001 ff81 	bl	8009154 <HAL_GPIO_Init>
}
 8007252:	bf00      	nop
 8007254:	3770      	adds	r7, #112	@ 0x70
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40008000 	.word	0x40008000
 8007260:	200014bc 	.word	0x200014bc
 8007264:	4002001c 	.word	0x4002001c
 8007268:	40013800 	.word	0x40013800

0800726c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a13      	ldr	r2, [pc, #76]	@ (80072c8 <HAL_UART_MspDeInit+0x5c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d111      	bne.n	80072a2 <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800727e:	2001      	movs	r0, #1
 8007280:	f7ff fe72 	bl	8006f68 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8007284:	210c      	movs	r1, #12
 8007286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800728a:	f002 f8d3 	bl	8009434 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007294:	4618      	mov	r0, r3
 8007296:	f001 fc31 	bl	8008afc <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800729a:	2025      	movs	r0, #37	@ 0x25
 800729c:	f001 fb4f 	bl	800893e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80072a0:	e00e      	b.n	80072c0 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART1)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a09      	ldr	r2, [pc, #36]	@ (80072cc <HAL_UART_MspDeInit+0x60>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d109      	bne.n	80072c0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART1_CLK_DISABLE();
 80072ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80072b0:	f7ff fe86 	bl	8006fc0 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80072b4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80072b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80072bc:	f002 f8ba 	bl	8009434 <HAL_GPIO_DeInit>
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40008000 	.word	0x40008000
 80072cc:	40013800 	.word	0x40013800

080072d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80072d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 80072d8:	4b3a      	ldr	r3, [pc, #232]	@ (80073c4 <HAL_UART_RxCpltCallback+0xf4>)
 80072da:	881a      	ldrh	r2, [r3, #0]
 80072dc:	4b3a      	ldr	r3, [pc, #232]	@ (80073c8 <HAL_UART_RxCpltCallback+0xf8>)
 80072de:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80072e0:	4b39      	ldr	r3, [pc, #228]	@ (80073c8 <HAL_UART_RxCpltCallback+0xf8>)
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80072e8:	d922      	bls.n	8007330 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80072ea:	4b37      	ldr	r3, [pc, #220]	@ (80073c8 <HAL_UART_RxCpltCallback+0xf8>)
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80072f2:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80072f4:	4b34      	ldr	r3, [pc, #208]	@ (80073c8 <HAL_UART_RxCpltCallback+0xf8>)
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	4b34      	ldr	r3, [pc, #208]	@ (80073cc <HAL_UART_RxCpltCallback+0xfc>)
 80072fc:	4413      	add	r3, r2
 80072fe:	89fa      	ldrh	r2, [r7, #14]
 8007300:	4933      	ldr	r1, [pc, #204]	@ (80073d0 <HAL_UART_RxCpltCallback+0x100>)
 8007302:	4618      	mov	r0, r3
 8007304:	f014 fb9d 	bl	801ba42 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8007308:	4b2f      	ldr	r3, [pc, #188]	@ (80073c8 <HAL_UART_RxCpltCallback+0xf8>)
 800730a:	2200      	movs	r2, #0
 800730c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800730e:	89fb      	ldrh	r3, [r7, #14]
 8007310:	4a2f      	ldr	r2, [pc, #188]	@ (80073d0 <HAL_UART_RxCpltCallback+0x100>)
 8007312:	1899      	adds	r1, r3, r2
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800731a:	461a      	mov	r2, r3
 800731c:	482b      	ldr	r0, [pc, #172]	@ (80073cc <HAL_UART_RxCpltCallback+0xfc>)
 800731e:	f014 fb90 	bl	801ba42 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8007322:	89fb      	ldrh	r3, [r7, #14]
 8007324:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8007328:	b29a      	uxth	r2, r3
 800732a:	4b26      	ldr	r3, [pc, #152]	@ (80073c4 <HAL_UART_RxCpltCallback+0xf4>)
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e01e      	b.n	800736e <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8007330:	4b25      	ldr	r3, [pc, #148]	@ (80073c8 <HAL_UART_RxCpltCallback+0xf8>)
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	4b25      	ldr	r3, [pc, #148]	@ (80073cc <HAL_UART_RxCpltCallback+0xfc>)
 8007338:	441a      	add	r2, r3
 800733a:	4b25      	ldr	r3, [pc, #148]	@ (80073d0 <HAL_UART_RxCpltCallback+0x100>)
 800733c:	4610      	mov	r0, r2
 800733e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8007342:	4602      	mov	r2, r0
 8007344:	4619      	mov	r1, r3
 8007346:	f8d1 c000 	ldr.w	ip, [r1]
 800734a:	684e      	ldr	r6, [r1, #4]
 800734c:	688d      	ldr	r5, [r1, #8]
 800734e:	68c9      	ldr	r1, [r1, #12]
 8007350:	f8c2 c000 	str.w	ip, [r2]
 8007354:	6056      	str	r6, [r2, #4]
 8007356:	6095      	str	r5, [r2, #8]
 8007358:	60d1      	str	r1, [r2, #12]
 800735a:	3310      	adds	r3, #16
 800735c:	3010      	adds	r0, #16
 800735e:	42a3      	cmp	r3, r4
 8007360:	d1ef      	bne.n	8007342 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8007362:	4b19      	ldr	r3, [pc, #100]	@ (80073c8 <HAL_UART_RxCpltCallback+0xf8>)
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	3340      	adds	r3, #64	@ 0x40
 8007368:	b29a      	uxth	r2, r3
 800736a:	4b16      	ldr	r3, [pc, #88]	@ (80073c4 <HAL_UART_RxCpltCallback+0xf4>)
 800736c:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 800736e:	2240      	movs	r2, #64	@ 0x40
 8007370:	4917      	ldr	r1, [pc, #92]	@ (80073d0 <HAL_UART_RxCpltCallback+0x100>)
 8007372:	4818      	ldr	r0, [pc, #96]	@ (80073d4 <HAL_UART_RxCpltCallback+0x104>)
 8007374:	f008 fb8c 	bl	800fa90 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8007378:	4b17      	ldr	r3, [pc, #92]	@ (80073d8 <HAL_UART_RxCpltCallback+0x108>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b16      	ldr	r3, [pc, #88]	@ (80073d8 <HAL_UART_RxCpltCallback+0x108>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0204 	bic.w	r2, r2, #4
 8007386:	601a      	str	r2, [r3, #0]
			memcpy((uint8_t *) receivedtrame,(uint8_t *)RxBuffer,64);
 8007388:	4a14      	ldr	r2, [pc, #80]	@ (80073dc <HAL_UART_RxCpltCallback+0x10c>)
 800738a:	4b11      	ldr	r3, [pc, #68]	@ (80073d0 <HAL_UART_RxCpltCallback+0x100>)
 800738c:	4610      	mov	r0, r2
 800738e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8007392:	4602      	mov	r2, r0
 8007394:	4619      	mov	r1, r3
 8007396:	f8d1 c000 	ldr.w	ip, [r1]
 800739a:	684e      	ldr	r6, [r1, #4]
 800739c:	688d      	ldr	r5, [r1, #8]
 800739e:	68c9      	ldr	r1, [r1, #12]
 80073a0:	f8c2 c000 	str.w	ip, [r2]
 80073a4:	6056      	str	r6, [r2, #4]
 80073a6:	6095      	str	r5, [r2, #8]
 80073a8:	60d1      	str	r1, [r2, #12]
 80073aa:	3310      	adds	r3, #16
 80073ac:	3010      	adds	r0, #16
 80073ae:	42a3      	cmp	r3, r4
 80073b0:	d1ef      	bne.n	8007392 <HAL_UART_RxCpltCallback+0xc2>

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80073b2:	2240      	movs	r2, #64	@ 0x40
 80073b4:	4906      	ldr	r1, [pc, #24]	@ (80073d0 <HAL_UART_RxCpltCallback+0x100>)
 80073b6:	4807      	ldr	r0, [pc, #28]	@ (80073d4 <HAL_UART_RxCpltCallback+0x104>)
 80073b8:	f008 fb6a 	bl	800fa90 <HAL_UART_Receive_DMA>
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c4:	200005e4 	.word	0x200005e4
 80073c8:	200005e2 	.word	0x200005e2
 80073cc:	20000628 	.word	0x20000628
 80073d0:	200005e8 	.word	0x200005e8
 80073d4:	20001394 	.word	0x20001394
 80073d8:	200014bc 	.word	0x200014bc
 80073dc:	20000ca8 	.word	0x20000ca8

080073e0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80073e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073e4:	3304      	adds	r3, #4

080073e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073e8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80073ea:	d3f9      	bcc.n	80073e0 <CopyDataInit>
  bx lr
 80073ec:	4770      	bx	lr

080073ee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80073ee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80073f0:	3004      	adds	r0, #4

080073f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80073f2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80073f4:	d3fb      	bcc.n	80073ee <FillZerobss>
  bx lr
 80073f6:	4770      	bx	lr

080073f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80073f8:	480c      	ldr	r0, [pc, #48]	@ (800742c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80073fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80073fc:	f7ff faa0 	bl	8006940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007400:	480b      	ldr	r0, [pc, #44]	@ (8007430 <LoopForever+0x6>)
 8007402:	490c      	ldr	r1, [pc, #48]	@ (8007434 <LoopForever+0xa>)
 8007404:	4a0c      	ldr	r2, [pc, #48]	@ (8007438 <LoopForever+0xe>)
 8007406:	2300      	movs	r3, #0
 8007408:	f7ff ffed 	bl	80073e6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800740c:	480b      	ldr	r0, [pc, #44]	@ (800743c <LoopForever+0x12>)
 800740e:	490c      	ldr	r1, [pc, #48]	@ (8007440 <LoopForever+0x16>)
 8007410:	4a0c      	ldr	r2, [pc, #48]	@ (8007444 <LoopForever+0x1a>)
 8007412:	2300      	movs	r3, #0
 8007414:	f7ff ffe7 	bl	80073e6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007418:	480b      	ldr	r0, [pc, #44]	@ (8007448 <LoopForever+0x1e>)
 800741a:	490c      	ldr	r1, [pc, #48]	@ (800744c <LoopForever+0x22>)
 800741c:	2300      	movs	r3, #0
 800741e:	f7ff ffe8 	bl	80073f2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007422:	f014 fadf 	bl	801b9e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007426:	f7fb fb8b 	bl	8002b40 <main>

0800742a <LoopForever>:

LoopForever:
  b LoopForever
 800742a:	e7fe      	b.n	800742a <LoopForever>
  ldr   r0, =_estack
 800742c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007430:	20000008 	.word	0x20000008
 8007434:	20000320 	.word	0x20000320
 8007438:	080225b8 	.word	0x080225b8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800743c:	200301e4 	.word	0x200301e4
 8007440:	20030a67 	.word	0x20030a67
 8007444:	0802291e 	.word	0x0802291e
  INIT_BSS _sbss, _ebss
 8007448:	20000378 	.word	0x20000378
 800744c:	200031f4 	.word	0x200031f4

08007450 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007450:	e7fe      	b.n	8007450 <ADC1_IRQHandler>
	...

08007454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800745e:	4b0c      	ldr	r3, [pc, #48]	@ (8007490 <HAL_Init+0x3c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a0b      	ldr	r2, [pc, #44]	@ (8007490 <HAL_Init+0x3c>)
 8007464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007468:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800746a:	2003      	movs	r0, #3
 800746c:	f001 fa34 	bl	80088d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007470:	200f      	movs	r0, #15
 8007472:	f000 f80f 	bl	8007494 <HAL_InitTick>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	71fb      	strb	r3, [r7, #7]
 8007480:	e001      	b.n	8007486 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007482:	f7ff f872 	bl	800656a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007486:	79fb      	ldrb	r3, [r7, #7]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	58004000 	.word	0x58004000

08007494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80074a0:	4b17      	ldr	r3, [pc, #92]	@ (8007500 <HAL_InitTick+0x6c>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d024      	beq.n	80074f2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80074a8:	f005 fc6a 	bl	800cd80 <HAL_RCC_GetHCLKFreq>
 80074ac:	4602      	mov	r2, r0
 80074ae:	4b14      	ldr	r3, [pc, #80]	@ (8007500 <HAL_InitTick+0x6c>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	4619      	mov	r1, r3
 80074b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80074b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80074bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c0:	4618      	mov	r0, r3
 80074c2:	f001 fa4a 	bl	800895a <HAL_SYSTICK_Config>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10f      	bne.n	80074ec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b0f      	cmp	r3, #15
 80074d0:	d809      	bhi.n	80074e6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074d2:	2200      	movs	r2, #0
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	f001 fa08 	bl	80088ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80074de:	4a09      	ldr	r2, [pc, #36]	@ (8007504 <HAL_InitTick+0x70>)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	e007      	b.n	80074f6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	73fb      	strb	r3, [r7, #15]
 80074ea:	e004      	b.n	80074f6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	73fb      	strb	r3, [r7, #15]
 80074f0:	e001      	b.n	80074f6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000034 	.word	0x20000034
 8007504:	20000030 	.word	0x20000030

08007508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <HAL_IncTick+0x20>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	4b06      	ldr	r3, [pc, #24]	@ (800752c <HAL_IncTick+0x24>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4413      	add	r3, r2
 8007518:	4a04      	ldr	r2, [pc, #16]	@ (800752c <HAL_IncTick+0x24>)
 800751a:	6013      	str	r3, [r2, #0]
}
 800751c:	bf00      	nop
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000034 	.word	0x20000034
 800752c:	2000151c 	.word	0x2000151c

08007530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  return uwTick;
 8007534:	4b03      	ldr	r3, [pc, #12]	@ (8007544 <HAL_GetTick+0x14>)
 8007536:	681b      	ldr	r3, [r3, #0]
}
 8007538:	4618      	mov	r0, r3
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	2000151c 	.word	0x2000151c

08007548 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800754c:	4b03      	ldr	r3, [pc, #12]	@ (800755c <HAL_GetTickPrio+0x14>)
 800754e:	681b      	ldr	r3, [r3, #0]
}
 8007550:	4618      	mov	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000030 	.word	0x20000030

08007560 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007564:	4b03      	ldr	r3, [pc, #12]	@ (8007574 <HAL_GetTickFreq+0x14>)
 8007566:	781b      	ldrb	r3, [r3, #0]
}
 8007568:	4618      	mov	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000034 	.word	0x20000034

08007578 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3360      	adds	r3, #96	@ 0x60
 80075f2:	461a      	mov	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	4b08      	ldr	r3, [pc, #32]	@ (8007624 <LL_ADC_SetOffset+0x44>)
 8007602:	4013      	ands	r3, r2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	4313      	orrs	r3, r2
 8007610:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007618:	bf00      	nop
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	03fff000 	.word	0x03fff000

08007628 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3360      	adds	r3, #96	@ 0x60
 8007636:	461a      	mov	r2, r3
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3360      	adds	r3, #96	@ 0x60
 8007664:	461a      	mov	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	431a      	orrs	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80076a2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3330      	adds	r3, #48	@ 0x30
 80076c0:	461a      	mov	r2, r3
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	0a1b      	lsrs	r3, r3, #8
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	f003 030c 	and.w	r3, r3, #12
 80076cc:	4413      	add	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f003 031f 	and.w	r3, r3, #31
 80076da:	211f      	movs	r1, #31
 80076dc:	fa01 f303 	lsl.w	r3, r1, r3
 80076e0:	43db      	mvns	r3, r3
 80076e2:	401a      	ands	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	0e9b      	lsrs	r3, r3, #26
 80076e8:	f003 011f 	and.w	r1, r3, #31
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	fa01 f303 	lsl.w	r3, r1, r3
 80076f6:	431a      	orrs	r2, r3
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80076fc:	bf00      	nop
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3314      	adds	r3, #20
 8007718:	461a      	mov	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	0e5b      	lsrs	r3, r3, #25
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	4413      	add	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	0d1b      	lsrs	r3, r3, #20
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2107      	movs	r1, #7
 8007736:	fa01 f303 	lsl.w	r3, r1, r3
 800773a:	43db      	mvns	r3, r3
 800773c:	401a      	ands	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	0d1b      	lsrs	r3, r3, #20
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	fa01 f303 	lsl.w	r3, r1, r3
 800774c:	431a      	orrs	r2, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007778:	43db      	mvns	r3, r3
 800777a:	401a      	ands	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f003 0318 	and.w	r3, r3, #24
 8007782:	4908      	ldr	r1, [pc, #32]	@ (80077a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007784:	40d9      	lsrs	r1, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	400b      	ands	r3, r1
 800778a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800778e:	431a      	orrs	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	0007ffff 	.word	0x0007ffff

080077a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80077b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6093      	str	r3, [r2, #8]
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077e0:	d101      	bne.n	80077e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007804:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007808:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800782c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007830:	d101      	bne.n	8007836 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007854:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007858:	f043 0201 	orr.w	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <LL_ADC_IsEnabled+0x18>
 8007880:	2301      	movs	r3, #1
 8007882:	e000      	b.n	8007886 <LL_ADC_IsEnabled+0x1a>
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80078a6:	f043 0204 	orr.w	r2, r3, #4
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d101      	bne.n	80078d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d101      	bne.n	80078f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e000      	b.n	80078fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
	...

08007908 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8007914:	2300      	movs	r3, #0
 8007916:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007918:	2300      	movs	r3, #0
 800791a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e12e      	b.n	8007b84 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7f9 fbcd 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f7ff ff3d 	bl	80077cc <LL_ADC_IsDeepPowerDownEnabled>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff ff23 	bl	80077a8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff ff58 	bl	800781c <LL_ADC_IsInternalRegulatorEnabled>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d115      	bne.n	800799e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff ff3c 	bl	80077f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800797c:	4b83      	ldr	r3, [pc, #524]	@ (8007b8c <HAL_ADC_Init+0x284>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	099b      	lsrs	r3, r3, #6
 8007982:	4a83      	ldr	r2, [pc, #524]	@ (8007b90 <HAL_ADC_Init+0x288>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	099b      	lsrs	r3, r3, #6
 800798a:	3301      	adds	r3, #1
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007990:	e002      	b.n	8007998 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3b01      	subs	r3, #1
 8007996:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1f9      	bne.n	8007992 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7ff ff3a 	bl	800781c <LL_ADC_IsInternalRegulatorEnabled>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10d      	bne.n	80079ca <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b2:	f043 0210 	orr.w	r2, r3, #16
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079be:	f043 0201 	orr.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff ff73 	bl	80078ba <LL_ADC_REG_IsConversionOngoing>
 80079d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079da:	f003 0310 	and.w	r3, r3, #16
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 80c7 	bne.w	8007b72 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f040 80c3 	bne.w	8007b72 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80079f4:	f043 0202 	orr.w	r2, r3, #2
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff ff33 	bl	800786c <LL_ADC_IsEnabled>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10b      	bne.n	8007a24 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a0c:	4861      	ldr	r0, [pc, #388]	@ (8007b94 <HAL_ADC_Init+0x28c>)
 8007a0e:	f7ff ff2d 	bl	800786c <LL_ADC_IsEnabled>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	485e      	ldr	r0, [pc, #376]	@ (8007b98 <HAL_ADC_Init+0x290>)
 8007a20:	f7ff fdaa 	bl	8007578 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7e5b      	ldrb	r3, [r3, #25]
 8007a28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007a2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007a34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007a3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a42:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8007a44:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d106      	bne.n	8007a64 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	045b      	lsls	r3, r3, #17
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d009      	beq.n	8007a80 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a78:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	4b45      	ldr	r3, [pc, #276]	@ (8007b9c <HAL_ADC_Init+0x294>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	69b9      	ldr	r1, [r7, #24]
 8007a90:	430b      	orrs	r3, r1
 8007a92:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff ff0e 	bl	80078ba <LL_ADC_REG_IsConversionOngoing>
 8007a9e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff ff1b 	bl	80078e0 <LL_ADC_INJ_IsConversionOngoing>
 8007aaa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d13d      	bne.n	8007b2e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d13a      	bne.n	8007b2e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007abc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ac4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ad4:	f023 0302 	bic.w	r3, r3, #2
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	69b9      	ldr	r1, [r7, #24]
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d118      	bne.n	8007b1e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007af6:	f023 0304 	bic.w	r3, r3, #4
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007b02:	4311      	orrs	r1, r2
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007b08:	4311      	orrs	r1, r2
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	611a      	str	r2, [r3, #16]
 8007b1c:	e007      	b.n	8007b2e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	691a      	ldr	r2, [r3, #16]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d10c      	bne.n	8007b50 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3c:	f023 010f 	bic.w	r1, r3, #15
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	69db      	ldr	r3, [r3, #28]
 8007b44:	1e5a      	subs	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b4e:	e007      	b.n	8007b60 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 020f 	bic.w	r2, r2, #15
 8007b5e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b64:	f023 0303 	bic.w	r3, r3, #3
 8007b68:	f043 0201 	orr.w	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007b70:	e007      	b.n	8007b82 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b76:	f043 0210 	orr.w	r2, r3, #16
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007b82:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3720      	adds	r7, #32
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	2000002c 	.word	0x2000002c
 8007b90:	053e2d63 	.word	0x053e2d63
 8007b94:	50040000 	.word	0x50040000
 8007b98:	50040300 	.word	0x50040300
 8007b9c:	fff0c007 	.word	0xfff0c007

08007ba0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fe82 	bl	80078ba <LL_ADC_REG_IsConversionOngoing>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d167      	bne.n	8007c8c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <HAL_ADC_Start_DMA+0x2a>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e063      	b.n	8007c92 <HAL_ADC_Start_DMA+0xf2>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fc42 	bl	800845c <ADC_Enable>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d14f      	bne.n	8007c82 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007bea:	f023 0301 	bic.w	r3, r3, #1
 8007bee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d006      	beq.n	8007c10 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c06:	f023 0206 	bic.w	r2, r3, #6
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007c0e:	e002      	b.n	8007c16 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1a:	4a20      	ldr	r2, [pc, #128]	@ (8007c9c <HAL_ADC_Start_DMA+0xfc>)
 8007c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c22:	4a1f      	ldr	r2, [pc, #124]	@ (8007ca0 <HAL_ADC_Start_DMA+0x100>)
 8007c24:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca4 <HAL_ADC_Start_DMA+0x104>)
 8007c2c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	221c      	movs	r2, #28
 8007c34:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0210 	orr.w	r2, r2, #16
 8007c4c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f042 0201 	orr.w	r2, r2, #1
 8007c5c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3340      	adds	r3, #64	@ 0x40
 8007c68:	4619      	mov	r1, r3
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f000 ffdb 	bl	8008c28 <HAL_DMA_Start_IT>
 8007c72:	4603      	mov	r3, r0
 8007c74:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fe09 	bl	8007892 <LL_ADC_REG_StartConversion>
 8007c80:	e006      	b.n	8007c90 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007c8a:	e001      	b.n	8007c90 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	08008551 	.word	0x08008551
 8007ca0:	08008629 	.word	0x08008629
 8007ca4:	08008645 	.word	0x08008645

08007ca8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b0b6      	sub	sp, #216	@ 0xd8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_ADC_ConfigChannel+0x22>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e39f      	b.n	8008432 <HAL_ADC_ConfigChannel+0x762>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fddb 	bl	80078ba <LL_ADC_REG_IsConversionOngoing>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f040 8384 	bne.w	8008414 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	6859      	ldr	r1, [r3, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f7ff fcc9 	bl	80076b0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff fdc9 	bl	80078ba <LL_ADC_REG_IsConversionOngoing>
 8007d28:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff fdd5 	bl	80078e0 <LL_ADC_INJ_IsConversionOngoing>
 8007d36:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007d3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f040 81a6 	bne.w	8008090 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f040 81a1 	bne.w	8008090 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	6819      	ldr	r1, [r3, #0]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f7ff fcd4 	bl	8007708 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695a      	ldr	r2, [r3, #20]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	08db      	lsrs	r3, r3, #3
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	fa02 f303 	lsl.w	r3, r2, r3
 8007d76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d00a      	beq.n	8007d98 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	6919      	ldr	r1, [r3, #16]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d92:	f7ff fc25 	bl	80075e0 <LL_ADC_SetOffset>
 8007d96:	e17b      	b.n	8008090 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff fc42 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007da4:	4603      	mov	r3, r0
 8007da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <HAL_ADC_ConfigChannel+0xf4>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff fc37 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	0e9b      	lsrs	r3, r3, #26
 8007dbe:	f003 021f 	and.w	r2, r3, #31
 8007dc2:	e01e      	b.n	8007e02 <HAL_ADC_ConfigChannel+0x132>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff fc2c 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007dda:	fa93 f3a3 	rbit	r3, r3
 8007dde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8007de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007de6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8007dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8007df2:	2320      	movs	r3, #32
 8007df4:	e004      	b.n	8007e00 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8007df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007dfa:	fab3 f383 	clz	r3, r3
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d105      	bne.n	8007e1a <HAL_ADC_ConfigChannel+0x14a>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	0e9b      	lsrs	r3, r3, #26
 8007e14:	f003 031f 	and.w	r3, r3, #31
 8007e18:	e018      	b.n	8007e4c <HAL_ADC_ConfigChannel+0x17c>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e26:	fa93 f3a3 	rbit	r3, r3
 8007e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007e3e:	2320      	movs	r3, #32
 8007e40:	e004      	b.n	8007e4c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e46:	fab3 f383 	clz	r3, r3
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d106      	bne.n	8007e5e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff fbfb 	bl	8007654 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2101      	movs	r1, #1
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff fbdf 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <HAL_ADC_ConfigChannel+0x1ba>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2101      	movs	r1, #1
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff fbd4 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007e80:	4603      	mov	r3, r0
 8007e82:	0e9b      	lsrs	r3, r3, #26
 8007e84:	f003 021f 	and.w	r2, r3, #31
 8007e88:	e01e      	b.n	8007ec8 <HAL_ADC_ConfigChannel+0x1f8>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2101      	movs	r1, #1
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fbc9 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007ea0:	fa93 f3a3 	rbit	r3, r3
 8007ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007ea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007eac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007eb8:	2320      	movs	r3, #32
 8007eba:	e004      	b.n	8007ec6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ec0:	fab3 f383 	clz	r3, r3
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d105      	bne.n	8007ee0 <HAL_ADC_ConfigChannel+0x210>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	0e9b      	lsrs	r3, r3, #26
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	e018      	b.n	8007f12 <HAL_ADC_ConfigChannel+0x242>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007eec:	fa93 f3a3 	rbit	r3, r3
 8007ef0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ef8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007f04:	2320      	movs	r3, #32
 8007f06:	e004      	b.n	8007f12 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f0c:	fab3 f383 	clz	r3, r3
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d106      	bne.n	8007f24 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff fb98 	bl	8007654 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2102      	movs	r1, #2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff fb7c 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <HAL_ADC_ConfigChannel+0x280>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2102      	movs	r1, #2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff fb71 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007f46:	4603      	mov	r3, r0
 8007f48:	0e9b      	lsrs	r3, r3, #26
 8007f4a:	f003 021f 	and.w	r2, r3, #31
 8007f4e:	e01e      	b.n	8007f8e <HAL_ADC_ConfigChannel+0x2be>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2102      	movs	r1, #2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7ff fb66 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f66:	fa93 f3a3 	rbit	r3, r3
 8007f6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007f7e:	2320      	movs	r3, #32
 8007f80:	e004      	b.n	8007f8c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f86:	fab3 f383 	clz	r3, r3
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <HAL_ADC_ConfigChannel+0x2d6>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	0e9b      	lsrs	r3, r3, #26
 8007fa0:	f003 031f 	and.w	r3, r3, #31
 8007fa4:	e016      	b.n	8007fd4 <HAL_ADC_ConfigChannel+0x304>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fb2:	fa93 f3a3 	rbit	r3, r3
 8007fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007fb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007fc6:	2320      	movs	r3, #32
 8007fc8:	e004      	b.n	8007fd4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fce:	fab3 f383 	clz	r3, r3
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d106      	bne.n	8007fe6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2102      	movs	r1, #2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff fb37 	bl	8007654 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2103      	movs	r1, #3
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff fb1b 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <HAL_ADC_ConfigChannel+0x342>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2103      	movs	r1, #3
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff fb10 	bl	8007628 <LL_ADC_GetOffsetChannel>
 8008008:	4603      	mov	r3, r0
 800800a:	0e9b      	lsrs	r3, r3, #26
 800800c:	f003 021f 	and.w	r2, r3, #31
 8008010:	e017      	b.n	8008042 <HAL_ADC_ConfigChannel+0x372>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2103      	movs	r1, #3
 8008018:	4618      	mov	r0, r3
 800801a:	f7ff fb05 	bl	8007628 <LL_ADC_GetOffsetChannel>
 800801e:	4603      	mov	r3, r0
 8008020:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008024:	fa93 f3a3 	rbit	r3, r3
 8008028:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800802a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800802c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800802e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8008034:	2320      	movs	r3, #32
 8008036:	e003      	b.n	8008040 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8008038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800803a:	fab3 f383 	clz	r3, r3
 800803e:	b2db      	uxtb	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800804a:	2b00      	cmp	r3, #0
 800804c:	d105      	bne.n	800805a <HAL_ADC_ConfigChannel+0x38a>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	0e9b      	lsrs	r3, r3, #26
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	e011      	b.n	800807e <HAL_ADC_ConfigChannel+0x3ae>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008060:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008062:	fa93 f3a3 	rbit	r3, r3
 8008066:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008068:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800806a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800806c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8008072:	2320      	movs	r3, #32
 8008074:	e003      	b.n	800807e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8008076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008078:	fab3 f383 	clz	r3, r3
 800807c:	b2db      	uxtb	r3, r3
 800807e:	429a      	cmp	r2, r3
 8008080:	d106      	bne.n	8008090 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2200      	movs	r2, #0
 8008088:	2103      	movs	r1, #3
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fae2 	bl	8007654 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff fbe9 	bl	800786c <LL_ADC_IsEnabled>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 81c2 	bne.w	8008426 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6819      	ldr	r1, [r3, #0]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f7ff fb56 	bl	8007760 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	4a8e      	ldr	r2, [pc, #568]	@ (80082f4 <HAL_ADC_ConfigChannel+0x624>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	f040 8130 	bne.w	8008320 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10b      	bne.n	80080e8 <HAL_ADC_ConfigChannel+0x418>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	0e9b      	lsrs	r3, r3, #26
 80080d6:	3301      	adds	r3, #1
 80080d8:	f003 031f 	and.w	r3, r3, #31
 80080dc:	2b09      	cmp	r3, #9
 80080de:	bf94      	ite	ls
 80080e0:	2301      	movls	r3, #1
 80080e2:	2300      	movhi	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	e019      	b.n	800811c <HAL_ADC_ConfigChannel+0x44c>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080f0:	fa93 f3a3 	rbit	r3, r3
 80080f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80080f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80080fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8008100:	2320      	movs	r3, #32
 8008102:	e003      	b.n	800810c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8008104:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008106:	fab3 f383 	clz	r3, r3
 800810a:	b2db      	uxtb	r3, r3
 800810c:	3301      	adds	r3, #1
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	2b09      	cmp	r3, #9
 8008114:	bf94      	ite	ls
 8008116:	2301      	movls	r3, #1
 8008118:	2300      	movhi	r3, #0
 800811a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800811c:	2b00      	cmp	r3, #0
 800811e:	d079      	beq.n	8008214 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008128:	2b00      	cmp	r3, #0
 800812a:	d107      	bne.n	800813c <HAL_ADC_ConfigChannel+0x46c>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	0e9b      	lsrs	r3, r3, #26
 8008132:	3301      	adds	r3, #1
 8008134:	069b      	lsls	r3, r3, #26
 8008136:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800813a:	e015      	b.n	8008168 <HAL_ADC_ConfigChannel+0x498>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008144:	fa93 f3a3 	rbit	r3, r3
 8008148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800814a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800814c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800814e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008154:	2320      	movs	r3, #32
 8008156:	e003      	b.n	8008160 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800815a:	fab3 f383 	clz	r3, r3
 800815e:	b2db      	uxtb	r3, r3
 8008160:	3301      	adds	r3, #1
 8008162:	069b      	lsls	r3, r3, #26
 8008164:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008170:	2b00      	cmp	r3, #0
 8008172:	d109      	bne.n	8008188 <HAL_ADC_ConfigChannel+0x4b8>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	0e9b      	lsrs	r3, r3, #26
 800817a:	3301      	adds	r3, #1
 800817c:	f003 031f 	and.w	r3, r3, #31
 8008180:	2101      	movs	r1, #1
 8008182:	fa01 f303 	lsl.w	r3, r1, r3
 8008186:	e017      	b.n	80081b8 <HAL_ADC_ConfigChannel+0x4e8>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800818e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008190:	fa93 f3a3 	rbit	r3, r3
 8008194:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8008196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008198:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800819a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80081a0:	2320      	movs	r3, #32
 80081a2:	e003      	b.n	80081ac <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80081a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081a6:	fab3 f383 	clz	r3, r3
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	3301      	adds	r3, #1
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	2101      	movs	r1, #1
 80081b4:	fa01 f303 	lsl.w	r3, r1, r3
 80081b8:	ea42 0103 	orr.w	r1, r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <HAL_ADC_ConfigChannel+0x50e>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	0e9b      	lsrs	r3, r3, #26
 80081ce:	3301      	adds	r3, #1
 80081d0:	f003 021f 	and.w	r2, r3, #31
 80081d4:	4613      	mov	r3, r2
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	4413      	add	r3, r2
 80081da:	051b      	lsls	r3, r3, #20
 80081dc:	e018      	b.n	8008210 <HAL_ADC_ConfigChannel+0x540>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	fa93 f3a3 	rbit	r3, r3
 80081ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80081ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80081f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80081f6:	2320      	movs	r3, #32
 80081f8:	e003      	b.n	8008202 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80081fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fc:	fab3 f383 	clz	r3, r3
 8008200:	b2db      	uxtb	r3, r3
 8008202:	3301      	adds	r3, #1
 8008204:	f003 021f 	and.w	r2, r3, #31
 8008208:	4613      	mov	r3, r2
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	4413      	add	r3, r2
 800820e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008210:	430b      	orrs	r3, r1
 8008212:	e080      	b.n	8008316 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800821c:	2b00      	cmp	r3, #0
 800821e:	d107      	bne.n	8008230 <HAL_ADC_ConfigChannel+0x560>
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	0e9b      	lsrs	r3, r3, #26
 8008226:	3301      	adds	r3, #1
 8008228:	069b      	lsls	r3, r3, #26
 800822a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800822e:	e015      	b.n	800825c <HAL_ADC_ConfigChannel+0x58c>
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008238:	fa93 f3a3 	rbit	r3, r3
 800823c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800823e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008240:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8008248:	2320      	movs	r3, #32
 800824a:	e003      	b.n	8008254 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	fab3 f383 	clz	r3, r3
 8008252:	b2db      	uxtb	r3, r3
 8008254:	3301      	adds	r3, #1
 8008256:	069b      	lsls	r3, r3, #26
 8008258:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <HAL_ADC_ConfigChannel+0x5ac>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	0e9b      	lsrs	r3, r3, #26
 800826e:	3301      	adds	r3, #1
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2101      	movs	r1, #1
 8008276:	fa01 f303 	lsl.w	r3, r1, r3
 800827a:	e017      	b.n	80082ac <HAL_ADC_ConfigChannel+0x5dc>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	fa93 f3a3 	rbit	r3, r3
 8008288:	61fb      	str	r3, [r7, #28]
  return result;
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8008294:	2320      	movs	r3, #32
 8008296:	e003      	b.n	80082a0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	fab3 f383 	clz	r3, r3
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	3301      	adds	r3, #1
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2101      	movs	r1, #1
 80082a8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ac:	ea42 0103 	orr.w	r1, r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10d      	bne.n	80082d8 <HAL_ADC_ConfigChannel+0x608>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	0e9b      	lsrs	r3, r3, #26
 80082c2:	3301      	adds	r3, #1
 80082c4:	f003 021f 	and.w	r2, r3, #31
 80082c8:	4613      	mov	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4413      	add	r3, r2
 80082ce:	3b1e      	subs	r3, #30
 80082d0:	051b      	lsls	r3, r3, #20
 80082d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80082d6:	e01d      	b.n	8008314 <HAL_ADC_ConfigChannel+0x644>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	fa93 f3a3 	rbit	r3, r3
 80082e4:	613b      	str	r3, [r7, #16]
  return result;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d103      	bne.n	80082f8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80082f0:	2320      	movs	r3, #32
 80082f2:	e005      	b.n	8008300 <HAL_ADC_ConfigChannel+0x630>
 80082f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	fab3 f383 	clz	r3, r3
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	3301      	adds	r3, #1
 8008302:	f003 021f 	and.w	r2, r3, #31
 8008306:	4613      	mov	r3, r2
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	4413      	add	r3, r2
 800830c:	3b1e      	subs	r3, #30
 800830e:	051b      	lsls	r3, r3, #20
 8008310:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008314:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800831a:	4619      	mov	r1, r3
 800831c:	f7ff f9f4 	bl	8007708 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	4b45      	ldr	r3, [pc, #276]	@ (800843c <HAL_ADC_ConfigChannel+0x76c>)
 8008326:	4013      	ands	r3, r2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d07c      	beq.n	8008426 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800832c:	4844      	ldr	r0, [pc, #272]	@ (8008440 <HAL_ADC_ConfigChannel+0x770>)
 800832e:	f7ff f949 	bl	80075c4 <LL_ADC_GetCommonPathInternalCh>
 8008332:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008336:	4843      	ldr	r0, [pc, #268]	@ (8008444 <HAL_ADC_ConfigChannel+0x774>)
 8008338:	f7ff fa98 	bl	800786c <LL_ADC_IsEnabled>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d15e      	bne.n	8008400 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a40      	ldr	r2, [pc, #256]	@ (8008448 <HAL_ADC_ConfigChannel+0x778>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d127      	bne.n	800839c <HAL_ADC_ConfigChannel+0x6cc>
 800834c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d121      	bne.n	800839c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a39      	ldr	r2, [pc, #228]	@ (8008444 <HAL_ADC_ConfigChannel+0x774>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d161      	bne.n	8008426 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008366:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800836a:	4619      	mov	r1, r3
 800836c:	4834      	ldr	r0, [pc, #208]	@ (8008440 <HAL_ADC_ConfigChannel+0x770>)
 800836e:	f7ff f916 	bl	800759e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008372:	4b36      	ldr	r3, [pc, #216]	@ (800844c <HAL_ADC_ConfigChannel+0x77c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	099b      	lsrs	r3, r3, #6
 8008378:	4a35      	ldr	r2, [pc, #212]	@ (8008450 <HAL_ADC_ConfigChannel+0x780>)
 800837a:	fba2 2303 	umull	r2, r3, r2, r3
 800837e:	099b      	lsrs	r3, r3, #6
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	4613      	mov	r3, r2
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800838c:	e002      	b.n	8008394 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3b01      	subs	r3, #1
 8008392:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1f9      	bne.n	800838e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800839a:	e044      	b.n	8008426 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008454 <HAL_ADC_ConfigChannel+0x784>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d113      	bne.n	80083ce <HAL_ADC_ConfigChannel+0x6fe>
 80083a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10d      	bne.n	80083ce <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a23      	ldr	r2, [pc, #140]	@ (8008444 <HAL_ADC_ConfigChannel+0x774>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d134      	bne.n	8008426 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80083bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083c4:	4619      	mov	r1, r3
 80083c6:	481e      	ldr	r0, [pc, #120]	@ (8008440 <HAL_ADC_ConfigChannel+0x770>)
 80083c8:	f7ff f8e9 	bl	800759e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083cc:	e02b      	b.n	8008426 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a21      	ldr	r2, [pc, #132]	@ (8008458 <HAL_ADC_ConfigChannel+0x788>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d126      	bne.n	8008426 <HAL_ADC_ConfigChannel+0x756>
 80083d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d120      	bne.n	8008426 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a16      	ldr	r2, [pc, #88]	@ (8008444 <HAL_ADC_ConfigChannel+0x774>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d11b      	bne.n	8008426 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80083ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80083f6:	4619      	mov	r1, r3
 80083f8:	4811      	ldr	r0, [pc, #68]	@ (8008440 <HAL_ADC_ConfigChannel+0x770>)
 80083fa:	f7ff f8d0 	bl	800759e <LL_ADC_SetCommonPathInternalCh>
 80083fe:	e012      	b.n	8008426 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008404:	f043 0220 	orr.w	r2, r3, #32
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008412:	e008      	b.n	8008426 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008418:	f043 0220 	orr.w	r2, r3, #32
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800842e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8008432:	4618      	mov	r0, r3
 8008434:	37d8      	adds	r7, #216	@ 0xd8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	80080000 	.word	0x80080000
 8008440:	50040300 	.word	0x50040300
 8008444:	50040000 	.word	0x50040000
 8008448:	c7520000 	.word	0xc7520000
 800844c:	2000002c 	.word	0x2000002c
 8008450:	053e2d63 	.word	0x053e2d63
 8008454:	cb840000 	.word	0xcb840000
 8008458:	80000001 	.word	0x80000001

0800845c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008464:	2300      	movs	r3, #0
 8008466:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f7ff f9fd 	bl	800786c <LL_ADC_IsEnabled>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d15e      	bne.n	8008536 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689a      	ldr	r2, [r3, #8]
 800847e:	4b30      	ldr	r3, [pc, #192]	@ (8008540 <ADC_Enable+0xe4>)
 8008480:	4013      	ands	r3, r2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00d      	beq.n	80084a2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800848a:	f043 0210 	orr.w	r2, r3, #16
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008496:	f043 0201 	orr.w	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e04a      	b.n	8008538 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff f9cc 	bl	8007844 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80084ac:	4825      	ldr	r0, [pc, #148]	@ (8008544 <ADC_Enable+0xe8>)
 80084ae:	f7ff f889 	bl	80075c4 <LL_ADC_GetCommonPathInternalCh>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00f      	beq.n	80084dc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80084bc:	4b22      	ldr	r3, [pc, #136]	@ (8008548 <ADC_Enable+0xec>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	099b      	lsrs	r3, r3, #6
 80084c2:	4a22      	ldr	r2, [pc, #136]	@ (800854c <ADC_Enable+0xf0>)
 80084c4:	fba2 2303 	umull	r2, r3, r2, r3
 80084c8:	099b      	lsrs	r3, r3, #6
 80084ca:	3301      	adds	r3, #1
 80084cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80084ce:	e002      	b.n	80084d6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f9      	bne.n	80084d0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80084dc:	f7ff f828 	bl	8007530 <HAL_GetTick>
 80084e0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80084e2:	e021      	b.n	8008528 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff f9bf 	bl	800786c <LL_ADC_IsEnabled>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d104      	bne.n	80084fe <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff f9a3 	bl	8007844 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80084fe:	f7ff f817 	bl	8007530 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d90d      	bls.n	8008528 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008510:	f043 0210 	orr.w	r2, r3, #16
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800851c:	f043 0201 	orr.w	r2, r3, #1
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e007      	b.n	8008538 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b01      	cmp	r3, #1
 8008534:	d1d6      	bne.n	80084e4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	8000003f 	.word	0x8000003f
 8008544:	50040300 	.word	0x50040300
 8008548:	2000002c 	.word	0x2000002c
 800854c:	053e2d63 	.word	0x053e2d63

08008550 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008562:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008566:	2b00      	cmp	r3, #0
 8008568:	d14b      	bne.n	8008602 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800856e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d021      	beq.n	80085c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff f87e 	bl	800768a <LL_ADC_REG_IsTriggerSourceSWStart>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d032      	beq.n	80085fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d12b      	bne.n	80085fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d11f      	bne.n	80085fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085be:	f043 0201 	orr.w	r2, r3, #1
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80085c6:	e018      	b.n	80085fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d111      	bne.n	80085fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d105      	bne.n	80085fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f2:	f043 0201 	orr.w	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7f8 fdc4 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008600:	e00e      	b.n	8008620 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008606:	f003 0310 	and.w	r3, r3, #16
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7ff fb54 	bl	8007cbc <HAL_ADC_ErrorCallback>
}
 8008614:	e004      	b.n	8008620 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800861a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	4798      	blx	r3
}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008634:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7ff fb36 	bl	8007ca8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800863c:	bf00      	nop
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008656:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008662:	f043 0204 	orr.w	r2, r3, #4
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f7ff fb26 	bl	8007cbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008670:	bf00      	nop
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008688:	4b0c      	ldr	r3, [pc, #48]	@ (80086bc <__NVIC_SetPriorityGrouping+0x44>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008694:	4013      	ands	r3, r2
 8008696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80086a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086aa:	4a04      	ldr	r2, [pc, #16]	@ (80086bc <__NVIC_SetPriorityGrouping+0x44>)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	60d3      	str	r3, [r2, #12]
}
 80086b0:	bf00      	nop
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	e000ed00 	.word	0xe000ed00

080086c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086c4:	4b04      	ldr	r3, [pc, #16]	@ (80086d8 <__NVIC_GetPriorityGrouping+0x18>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	0a1b      	lsrs	r3, r3, #8
 80086ca:	f003 0307 	and.w	r3, r3, #7
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	e000ed00 	.word	0xe000ed00

080086dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	db0b      	blt.n	8008706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	f003 021f 	and.w	r2, r3, #31
 80086f4:	4907      	ldr	r1, [pc, #28]	@ (8008714 <__NVIC_EnableIRQ+0x38>)
 80086f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	2001      	movs	r0, #1
 80086fe:	fa00 f202 	lsl.w	r2, r0, r2
 8008702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	e000e100 	.word	0xe000e100

08008718 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008726:	2b00      	cmp	r3, #0
 8008728:	db12      	blt.n	8008750 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	f003 021f 	and.w	r2, r3, #31
 8008730:	490a      	ldr	r1, [pc, #40]	@ (800875c <__NVIC_DisableIRQ+0x44>)
 8008732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008736:	095b      	lsrs	r3, r3, #5
 8008738:	2001      	movs	r0, #1
 800873a:	fa00 f202 	lsl.w	r2, r0, r2
 800873e:	3320      	adds	r3, #32
 8008740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008744:	f3bf 8f4f 	dsb	sy
}
 8008748:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800874a:	f3bf 8f6f 	isb	sy
}
 800874e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	e000e100 	.word	0xe000e100

08008760 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800876a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800876e:	2b00      	cmp	r3, #0
 8008770:	db0c      	blt.n	800878c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	f003 021f 	and.w	r2, r3, #31
 8008778:	4907      	ldr	r1, [pc, #28]	@ (8008798 <__NVIC_SetPendingIRQ+0x38>)
 800877a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	2001      	movs	r0, #1
 8008782:	fa00 f202 	lsl.w	r2, r0, r2
 8008786:	3340      	adds	r3, #64	@ 0x40
 8008788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	e000e100 	.word	0xe000e100

0800879c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	db0c      	blt.n	80087c8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	f003 021f 	and.w	r2, r3, #31
 80087b4:	4907      	ldr	r1, [pc, #28]	@ (80087d4 <__NVIC_ClearPendingIRQ+0x38>)
 80087b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ba:	095b      	lsrs	r3, r3, #5
 80087bc:	2001      	movs	r0, #1
 80087be:	fa00 f202 	lsl.w	r2, r0, r2
 80087c2:	3360      	adds	r3, #96	@ 0x60
 80087c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	e000e100 	.word	0xe000e100

080087d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	db0a      	blt.n	8008802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	490c      	ldr	r1, [pc, #48]	@ (8008824 <__NVIC_SetPriority+0x4c>)
 80087f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087f6:	0112      	lsls	r2, r2, #4
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	440b      	add	r3, r1
 80087fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008800:	e00a      	b.n	8008818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	b2da      	uxtb	r2, r3
 8008806:	4908      	ldr	r1, [pc, #32]	@ (8008828 <__NVIC_SetPriority+0x50>)
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	f003 030f 	and.w	r3, r3, #15
 800880e:	3b04      	subs	r3, #4
 8008810:	0112      	lsls	r2, r2, #4
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	440b      	add	r3, r1
 8008816:	761a      	strb	r2, [r3, #24]
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	e000e100 	.word	0xe000e100
 8008828:	e000ed00 	.word	0xe000ed00

0800882c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800882c:	b480      	push	{r7}
 800882e:	b089      	sub	sp, #36	@ 0x24
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f1c3 0307 	rsb	r3, r3, #7
 8008846:	2b04      	cmp	r3, #4
 8008848:	bf28      	it	cs
 800884a:	2304      	movcs	r3, #4
 800884c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	3304      	adds	r3, #4
 8008852:	2b06      	cmp	r3, #6
 8008854:	d902      	bls.n	800885c <NVIC_EncodePriority+0x30>
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	3b03      	subs	r3, #3
 800885a:	e000      	b.n	800885e <NVIC_EncodePriority+0x32>
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008860:	f04f 32ff 	mov.w	r2, #4294967295
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	fa02 f303 	lsl.w	r3, r2, r3
 800886a:	43da      	mvns	r2, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	401a      	ands	r2, r3
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008874:	f04f 31ff 	mov.w	r1, #4294967295
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	fa01 f303 	lsl.w	r3, r1, r3
 800887e:	43d9      	mvns	r1, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008884:	4313      	orrs	r3, r2
         );
}
 8008886:	4618      	mov	r0, r3
 8008888:	3724      	adds	r7, #36	@ 0x24
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
	...

08008894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3b01      	subs	r3, #1
 80088a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088a4:	d301      	bcc.n	80088aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80088a6:	2301      	movs	r3, #1
 80088a8:	e00f      	b.n	80088ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088aa:	4a0a      	ldr	r2, [pc, #40]	@ (80088d4 <SysTick_Config+0x40>)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088b2:	210f      	movs	r1, #15
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295
 80088b8:	f7ff ff8e 	bl	80087d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088bc:	4b05      	ldr	r3, [pc, #20]	@ (80088d4 <SysTick_Config+0x40>)
 80088be:	2200      	movs	r2, #0
 80088c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088c2:	4b04      	ldr	r3, [pc, #16]	@ (80088d4 <SysTick_Config+0x40>)
 80088c4:	2207      	movs	r2, #7
 80088c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	e000e010 	.word	0xe000e010

080088d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fec9 	bl	8008678 <__NVIC_SetPriorityGrouping>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b086      	sub	sp, #24
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	4603      	mov	r3, r0
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
 80088fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80088fc:	f7ff fee0 	bl	80086c0 <__NVIC_GetPriorityGrouping>
 8008900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	6978      	ldr	r0, [r7, #20]
 8008908:	f7ff ff90 	bl	800882c <NVIC_EncodePriority>
 800890c:	4602      	mov	r2, r0
 800890e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff ff5f 	bl	80087d8 <__NVIC_SetPriority>
}
 800891a:	bf00      	nop
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b082      	sub	sp, #8
 8008926:	af00      	add	r7, sp, #0
 8008928:	4603      	mov	r3, r0
 800892a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800892c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff fed3 	bl	80086dc <__NVIC_EnableIRQ>
}
 8008936:	bf00      	nop
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	4603      	mov	r3, r0
 8008946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fee3 	bl	8008718 <__NVIC_DisableIRQ>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff ff96 	bl	8008894 <SysTick_Config>
 8008968:	4603      	mov	r3, r0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	4603      	mov	r3, r0
 800897a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800897c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff feed 	bl	8008760 <__NVIC_SetPendingIRQ>
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	4603      	mov	r3, r0
 8008996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800899c:	4618      	mov	r0, r3
 800899e:	f7ff fefd 	bl	800879c <__NVIC_ClearPendingIRQ>
}
 80089a2:	bf00      	nop
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e08e      	b.n	8008adc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	4b47      	ldr	r3, [pc, #284]	@ (8008ae4 <HAL_DMA_Init+0x138>)
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d80f      	bhi.n	80089ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	4b45      	ldr	r3, [pc, #276]	@ (8008ae8 <HAL_DMA_Init+0x13c>)
 80089d2:	4413      	add	r3, r2
 80089d4:	4a45      	ldr	r2, [pc, #276]	@ (8008aec <HAL_DMA_Init+0x140>)
 80089d6:	fba2 2303 	umull	r2, r3, r2, r3
 80089da:	091b      	lsrs	r3, r3, #4
 80089dc:	009a      	lsls	r2, r3, #2
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a42      	ldr	r2, [pc, #264]	@ (8008af0 <HAL_DMA_Init+0x144>)
 80089e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80089e8:	e00e      	b.n	8008a08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	4b40      	ldr	r3, [pc, #256]	@ (8008af4 <HAL_DMA_Init+0x148>)
 80089f2:	4413      	add	r3, r2
 80089f4:	4a3d      	ldr	r2, [pc, #244]	@ (8008aec <HAL_DMA_Init+0x140>)
 80089f6:	fba2 2303 	umull	r2, r3, r2, r3
 80089fa:	091b      	lsrs	r3, r3, #4
 80089fc:	009a      	lsls	r2, r3, #2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a3c      	ldr	r2, [pc, #240]	@ (8008af8 <HAL_DMA_Init+0x14c>)
 8008a06:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fb16 	bl	800908c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a68:	d102      	bne.n	8008a70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a78:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008a7c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008a86:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d010      	beq.n	8008ab2 <HAL_DMA_Init+0x106>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d80c      	bhi.n	8008ab2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fb35 	bl	8009108 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008aae:	605a      	str	r2, [r3, #4]
 8008ab0:	e008      	b.n	8008ac4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40020407 	.word	0x40020407
 8008ae8:	bffdfff8 	.word	0xbffdfff8
 8008aec:	cccccccd 	.word	0xcccccccd
 8008af0:	40020000 	.word	0x40020000
 8008af4:	bffdfbf8 	.word	0xbffdfbf8
 8008af8:	40020400 	.word	0x40020400

08008afc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e07b      	b.n	8008c06 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0201 	bic.w	r2, r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	4b3a      	ldr	r3, [pc, #232]	@ (8008c10 <HAL_DMA_DeInit+0x114>)
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d80f      	bhi.n	8008b4a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4b38      	ldr	r3, [pc, #224]	@ (8008c14 <HAL_DMA_DeInit+0x118>)
 8008b32:	4413      	add	r3, r2
 8008b34:	4a38      	ldr	r2, [pc, #224]	@ (8008c18 <HAL_DMA_DeInit+0x11c>)
 8008b36:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3a:	091b      	lsrs	r3, r3, #4
 8008b3c:	009a      	lsls	r2, r3, #2
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a35      	ldr	r2, [pc, #212]	@ (8008c1c <HAL_DMA_DeInit+0x120>)
 8008b46:	641a      	str	r2, [r3, #64]	@ 0x40
 8008b48:	e00e      	b.n	8008b68 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4b33      	ldr	r3, [pc, #204]	@ (8008c20 <HAL_DMA_DeInit+0x124>)
 8008b52:	4413      	add	r3, r2
 8008b54:	4a30      	ldr	r2, [pc, #192]	@ (8008c18 <HAL_DMA_DeInit+0x11c>)
 8008b56:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5a:	091b      	lsrs	r3, r3, #4
 8008b5c:	009a      	lsls	r2, r3, #2
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a2f      	ldr	r2, [pc, #188]	@ (8008c24 <HAL_DMA_DeInit+0x128>)
 8008b66:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b74:	f003 021c 	and.w	r2, r3, #28
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8008b82:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fa81 	bl	800908c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b9a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00f      	beq.n	8008bc4 <HAL_DMA_DeInit+0xc8>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d80b      	bhi.n	8008bc4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 faab 	bl	8009108 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008bc2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	40020407 	.word	0x40020407
 8008c14:	bffdfff8 	.word	0xbffdfff8
 8008c18:	cccccccd 	.word	0xcccccccd
 8008c1c:	40020000 	.word	0x40020000
 8008c20:	bffdfbf8 	.word	0xbffdfbf8
 8008c24:	40020400 	.word	0x40020400

08008c28 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_DMA_Start_IT+0x20>
 8008c44:	2302      	movs	r3, #2
 8008c46:	e066      	b.n	8008d16 <HAL_DMA_Start_IT+0xee>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d155      	bne.n	8008d08 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 0201 	bic.w	r2, r2, #1
 8008c78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 f9c5 	bl	8009010 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d008      	beq.n	8008ca0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 020e 	orr.w	r2, r2, #14
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	e00f      	b.n	8008cc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 0204 	bic.w	r2, r2, #4
 8008cae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f042 020a 	orr.w	r2, r2, #10
 8008cbe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cdc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d007      	beq.n	8008cf6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cf4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f042 0201 	orr.w	r2, r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	e005      	b.n	8008d14 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008d10:	2302      	movs	r3, #2
 8008d12:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b083      	sub	sp, #12
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e04f      	b.n	8008dd0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d008      	beq.n	8008d4e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2204      	movs	r2, #4
 8008d40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e040      	b.n	8008dd0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 020e 	bic.w	r2, r2, #14
 8008d5c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0201 	bic.w	r2, r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d82:	f003 021c 	and.w	r2, r3, #28
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8008d90:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008d9a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00c      	beq.n	8008dbe <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008db2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008dbc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d005      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2204      	movs	r2, #4
 8008df8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	e047      	b.n	8008e90 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 020e 	bic.w	r2, r2, #14
 8008e0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0201 	bic.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e34:	f003 021c 	and.w	r2, r3, #28
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8008e42:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008e4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00c      	beq.n	8008e70 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008e6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	4798      	blx	r3
    }
  }
  return status;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eb6:	f003 031c 	and.w	r3, r3, #28
 8008eba:	2204      	movs	r2, #4
 8008ebc:	409a      	lsls	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d026      	beq.n	8008f14 <HAL_DMA_IRQHandler+0x7a>
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d021      	beq.n	8008f14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d107      	bne.n	8008eee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0204 	bic.w	r2, r2, #4
 8008eec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ef2:	f003 021c 	and.w	r2, r3, #28
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efa:	2104      	movs	r1, #4
 8008efc:	fa01 f202 	lsl.w	r2, r1, r2
 8008f00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d071      	beq.n	8008fee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008f12:	e06c      	b.n	8008fee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f18:	f003 031c 	and.w	r3, r3, #28
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	409a      	lsls	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4013      	ands	r3, r2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d02e      	beq.n	8008f86 <HAL_DMA_IRQHandler+0xec>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d029      	beq.n	8008f86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0320 	and.w	r3, r3, #32
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10b      	bne.n	8008f58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 020a 	bic.w	r2, r2, #10
 8008f4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f5c:	f003 021c 	and.w	r2, r3, #28
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f64:	2102      	movs	r1, #2
 8008f66:	fa01 f202 	lsl.w	r2, r1, r2
 8008f6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d038      	beq.n	8008fee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008f84:	e033      	b.n	8008fee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f8a:	f003 031c 	and.w	r3, r3, #28
 8008f8e:	2208      	movs	r2, #8
 8008f90:	409a      	lsls	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4013      	ands	r3, r2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d02a      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x156>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f003 0308 	and.w	r3, r3, #8
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d025      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 020e 	bic.w	r2, r2, #14
 8008fb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb8:	f003 021c 	and.w	r2, r3, #28
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8008fc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d004      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
}
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009026:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009038:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800903e:	f003 021c 	and.w	r2, r3, #28
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009046:	2101      	movs	r1, #1
 8009048:	fa01 f202 	lsl.w	r2, r1, r2
 800904c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	2b10      	cmp	r3, #16
 800905c:	d108      	bne.n	8009070 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800906e:	e007      	b.n	8009080 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	60da      	str	r2, [r3, #12]
}
 8009080:	bf00      	nop
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	4b17      	ldr	r3, [pc, #92]	@ (80090f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800909c:	429a      	cmp	r2, r3
 800909e:	d80a      	bhi.n	80090b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090a4:	089b      	lsrs	r3, r3, #2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80090ac:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6493      	str	r3, [r2, #72]	@ 0x48
 80090b4:	e007      	b.n	80090c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ba:	089b      	lsrs	r3, r3, #2
 80090bc:	009a      	lsls	r2, r3, #2
 80090be:	4b0f      	ldr	r3, [pc, #60]	@ (80090fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80090c0:	4413      	add	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	3b08      	subs	r3, #8
 80090ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009100 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80090d0:	fba2 2303 	umull	r2, r3, r2, r3
 80090d4:	091b      	lsrs	r3, r3, #4
 80090d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a0a      	ldr	r2, [pc, #40]	@ (8009104 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80090dc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f003 031f 	and.w	r3, r3, #31
 80090e4:	2201      	movs	r2, #1
 80090e6:	409a      	lsls	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80090ec:	bf00      	nop
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	40020407 	.word	0x40020407
 80090fc:	4002081c 	.word	0x4002081c
 8009100:	cccccccd 	.word	0xcccccccd
 8009104:	40020880 	.word	0x40020880

08009108 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009118:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4b0b      	ldr	r3, [pc, #44]	@ (800914c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a09      	ldr	r2, [pc, #36]	@ (8009150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800912c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3b01      	subs	r3, #1
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2201      	movs	r2, #1
 8009138:	409a      	lsls	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800913e:	bf00      	nop
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	1000823f 	.word	0x1000823f
 8009150:	40020940 	.word	0x40020940

08009154 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009162:	e14c      	b.n	80093fe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	2101      	movs	r1, #1
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	fa01 f303 	lsl.w	r3, r1, r3
 8009170:	4013      	ands	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 813e 	beq.w	80093f8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f003 0303 	and.w	r3, r3, #3
 8009184:	2b01      	cmp	r3, #1
 8009186:	d005      	beq.n	8009194 <HAL_GPIO_Init+0x40>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	2b02      	cmp	r3, #2
 8009192:	d130      	bne.n	80091f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	2203      	movs	r2, #3
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	43db      	mvns	r3, r3
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	4013      	ands	r3, r2
 80091aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	68da      	ldr	r2, [r3, #12]
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	fa02 f303 	lsl.w	r3, r2, r3
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80091ca:	2201      	movs	r2, #1
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	fa02 f303 	lsl.w	r3, r2, r3
 80091d2:	43db      	mvns	r3, r3
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4013      	ands	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	091b      	lsrs	r3, r3, #4
 80091e0:	f003 0201 	and.w	r2, r3, #1
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d017      	beq.n	8009232 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	2203      	movs	r2, #3
 800920e:	fa02 f303 	lsl.w	r3, r2, r3
 8009212:	43db      	mvns	r3, r3
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	4013      	ands	r3, r2
 8009218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	4313      	orrs	r3, r2
 800922a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f003 0303 	and.w	r3, r3, #3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d123      	bne.n	8009286 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	08da      	lsrs	r2, r3, #3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	3208      	adds	r2, #8
 8009246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	220f      	movs	r2, #15
 8009256:	fa02 f303 	lsl.w	r3, r2, r3
 800925a:	43db      	mvns	r3, r3
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4013      	ands	r3, r2
 8009260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	691a      	ldr	r2, [r3, #16]
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	4313      	orrs	r3, r2
 8009276:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	08da      	lsrs	r2, r3, #3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3208      	adds	r2, #8
 8009280:	6939      	ldr	r1, [r7, #16]
 8009282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	2203      	movs	r2, #3
 8009292:	fa02 f303 	lsl.w	r3, r2, r3
 8009296:	43db      	mvns	r3, r3
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	4013      	ands	r3, r2
 800929c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f003 0203 	and.w	r2, r3, #3
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	fa02 f303 	lsl.w	r3, r2, r3
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f000 8098 	beq.w	80093f8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80092c8:	4a54      	ldr	r2, [pc, #336]	@ (800941c <HAL_GPIO_Init+0x2c8>)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	089b      	lsrs	r3, r3, #2
 80092ce:	3302      	adds	r3, #2
 80092d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f003 0303 	and.w	r3, r3, #3
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	220f      	movs	r2, #15
 80092e0:	fa02 f303 	lsl.w	r3, r2, r3
 80092e4:	43db      	mvns	r3, r3
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	4013      	ands	r3, r2
 80092ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80092f2:	d019      	beq.n	8009328 <HAL_GPIO_Init+0x1d4>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a4a      	ldr	r2, [pc, #296]	@ (8009420 <HAL_GPIO_Init+0x2cc>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d013      	beq.n	8009324 <HAL_GPIO_Init+0x1d0>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a49      	ldr	r2, [pc, #292]	@ (8009424 <HAL_GPIO_Init+0x2d0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d00d      	beq.n	8009320 <HAL_GPIO_Init+0x1cc>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a48      	ldr	r2, [pc, #288]	@ (8009428 <HAL_GPIO_Init+0x2d4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d007      	beq.n	800931c <HAL_GPIO_Init+0x1c8>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a47      	ldr	r2, [pc, #284]	@ (800942c <HAL_GPIO_Init+0x2d8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d101      	bne.n	8009318 <HAL_GPIO_Init+0x1c4>
 8009314:	2304      	movs	r3, #4
 8009316:	e008      	b.n	800932a <HAL_GPIO_Init+0x1d6>
 8009318:	2307      	movs	r3, #7
 800931a:	e006      	b.n	800932a <HAL_GPIO_Init+0x1d6>
 800931c:	2303      	movs	r3, #3
 800931e:	e004      	b.n	800932a <HAL_GPIO_Init+0x1d6>
 8009320:	2302      	movs	r3, #2
 8009322:	e002      	b.n	800932a <HAL_GPIO_Init+0x1d6>
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <HAL_GPIO_Init+0x1d6>
 8009328:	2300      	movs	r3, #0
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	f002 0203 	and.w	r2, r2, #3
 8009330:	0092      	lsls	r2, r2, #2
 8009332:	4093      	lsls	r3, r2
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	4313      	orrs	r3, r2
 8009338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800933a:	4938      	ldr	r1, [pc, #224]	@ (800941c <HAL_GPIO_Init+0x2c8>)
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	089b      	lsrs	r3, r3, #2
 8009340:	3302      	adds	r3, #2
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009348:	4b39      	ldr	r3, [pc, #228]	@ (8009430 <HAL_GPIO_Init+0x2dc>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	43db      	mvns	r3, r3
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	4013      	ands	r3, r2
 8009356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4313      	orrs	r3, r2
 800936a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800936c:	4a30      	ldr	r2, [pc, #192]	@ (8009430 <HAL_GPIO_Init+0x2dc>)
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009372:	4b2f      	ldr	r3, [pc, #188]	@ (8009430 <HAL_GPIO_Init+0x2dc>)
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	43db      	mvns	r3, r3
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	4013      	ands	r3, r2
 8009380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4313      	orrs	r3, r2
 8009394:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009396:	4a26      	ldr	r2, [pc, #152]	@ (8009430 <HAL_GPIO_Init+0x2dc>)
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800939c:	4b24      	ldr	r3, [pc, #144]	@ (8009430 <HAL_GPIO_Init+0x2dc>)
 800939e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	43db      	mvns	r3, r3
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	4013      	ands	r3, r2
 80093ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80093c2:	4a1b      	ldr	r2, [pc, #108]	@ (8009430 <HAL_GPIO_Init+0x2dc>)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80093ca:	4b19      	ldr	r3, [pc, #100]	@ (8009430 <HAL_GPIO_Init+0x2dc>)
 80093cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	43db      	mvns	r3, r3
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	4013      	ands	r3, r2
 80093da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d003      	beq.n	80093f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80093f0:	4a0f      	ldr	r2, [pc, #60]	@ (8009430 <HAL_GPIO_Init+0x2dc>)
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	3301      	adds	r3, #1
 80093fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	fa22 f303 	lsr.w	r3, r2, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	f47f aeab 	bne.w	8009164 <HAL_GPIO_Init+0x10>
  }
}
 800940e:	bf00      	nop
 8009410:	bf00      	nop
 8009412:	371c      	adds	r7, #28
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	40010000 	.word	0x40010000
 8009420:	48000400 	.word	0x48000400
 8009424:	48000800 	.word	0x48000800
 8009428:	48000c00 	.word	0x48000c00
 800942c:	48001000 	.word	0x48001000
 8009430:	58000800 	.word	0x58000800

08009434 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009442:	e0bb      	b.n	80095bc <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009444:	2201      	movs	r2, #1
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	fa02 f303 	lsl.w	r3, r2, r3
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	4013      	ands	r3, r2
 8009450:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 80ae 	beq.w	80095b6 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800945a:	4a5f      	ldr	r2, [pc, #380]	@ (80095d8 <HAL_GPIO_DeInit+0x1a4>)
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	089b      	lsrs	r3, r3, #2
 8009460:	3302      	adds	r3, #2
 8009462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009466:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	220f      	movs	r2, #15
 8009472:	fa02 f303 	lsl.w	r3, r2, r3
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	4013      	ands	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009482:	d019      	beq.n	80094b8 <HAL_GPIO_DeInit+0x84>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a55      	ldr	r2, [pc, #340]	@ (80095dc <HAL_GPIO_DeInit+0x1a8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d013      	beq.n	80094b4 <HAL_GPIO_DeInit+0x80>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a54      	ldr	r2, [pc, #336]	@ (80095e0 <HAL_GPIO_DeInit+0x1ac>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00d      	beq.n	80094b0 <HAL_GPIO_DeInit+0x7c>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a53      	ldr	r2, [pc, #332]	@ (80095e4 <HAL_GPIO_DeInit+0x1b0>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d007      	beq.n	80094ac <HAL_GPIO_DeInit+0x78>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a52      	ldr	r2, [pc, #328]	@ (80095e8 <HAL_GPIO_DeInit+0x1b4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d101      	bne.n	80094a8 <HAL_GPIO_DeInit+0x74>
 80094a4:	2304      	movs	r3, #4
 80094a6:	e008      	b.n	80094ba <HAL_GPIO_DeInit+0x86>
 80094a8:	2307      	movs	r3, #7
 80094aa:	e006      	b.n	80094ba <HAL_GPIO_DeInit+0x86>
 80094ac:	2303      	movs	r3, #3
 80094ae:	e004      	b.n	80094ba <HAL_GPIO_DeInit+0x86>
 80094b0:	2302      	movs	r3, #2
 80094b2:	e002      	b.n	80094ba <HAL_GPIO_DeInit+0x86>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e000      	b.n	80094ba <HAL_GPIO_DeInit+0x86>
 80094b8:	2300      	movs	r3, #0
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	f002 0203 	and.w	r2, r2, #3
 80094c0:	0092      	lsls	r2, r2, #2
 80094c2:	4093      	lsls	r3, r2
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d136      	bne.n	8009538 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80094ca:	4b48      	ldr	r3, [pc, #288]	@ (80095ec <HAL_GPIO_DeInit+0x1b8>)
 80094cc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	43db      	mvns	r3, r3
 80094d4:	4945      	ldr	r1, [pc, #276]	@ (80095ec <HAL_GPIO_DeInit+0x1b8>)
 80094d6:	4013      	ands	r3, r2
 80094d8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80094dc:	4b43      	ldr	r3, [pc, #268]	@ (80095ec <HAL_GPIO_DeInit+0x1b8>)
 80094de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	43db      	mvns	r3, r3
 80094e6:	4941      	ldr	r1, [pc, #260]	@ (80095ec <HAL_GPIO_DeInit+0x1b8>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80094ee:	4b3f      	ldr	r3, [pc, #252]	@ (80095ec <HAL_GPIO_DeInit+0x1b8>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	43db      	mvns	r3, r3
 80094f6:	493d      	ldr	r1, [pc, #244]	@ (80095ec <HAL_GPIO_DeInit+0x1b8>)
 80094f8:	4013      	ands	r3, r2
 80094fa:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80094fc:	4b3b      	ldr	r3, [pc, #236]	@ (80095ec <HAL_GPIO_DeInit+0x1b8>)
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	43db      	mvns	r3, r3
 8009504:	4939      	ldr	r1, [pc, #228]	@ (80095ec <HAL_GPIO_DeInit+0x1b8>)
 8009506:	4013      	ands	r3, r2
 8009508:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	220f      	movs	r2, #15
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800951a:	4a2f      	ldr	r2, [pc, #188]	@ (80095d8 <HAL_GPIO_DeInit+0x1a4>)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	089b      	lsrs	r3, r3, #2
 8009520:	3302      	adds	r3, #2
 8009522:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	43da      	mvns	r2, r3
 800952a:	482b      	ldr	r0, [pc, #172]	@ (80095d8 <HAL_GPIO_DeInit+0x1a4>)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	089b      	lsrs	r3, r3, #2
 8009530:	400a      	ands	r2, r1
 8009532:	3302      	adds	r3, #2
 8009534:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	2103      	movs	r1, #3
 8009542:	fa01 f303 	lsl.w	r3, r1, r3
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	08da      	lsrs	r2, r3, #3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3208      	adds	r2, #8
 8009554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f003 0307 	and.w	r3, r3, #7
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	220f      	movs	r2, #15
 8009562:	fa02 f303 	lsl.w	r3, r2, r3
 8009566:	43db      	mvns	r3, r3
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	08d2      	lsrs	r2, r2, #3
 800956c:	4019      	ands	r1, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3208      	adds	r2, #8
 8009572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68da      	ldr	r2, [r3, #12]
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	2103      	movs	r1, #3
 8009580:	fa01 f303 	lsl.w	r3, r1, r3
 8009584:	43db      	mvns	r3, r3
 8009586:	401a      	ands	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	2101      	movs	r1, #1
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	fa01 f303 	lsl.w	r3, r1, r3
 8009598:	43db      	mvns	r3, r3
 800959a:	401a      	ands	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	2103      	movs	r1, #3
 80095aa:	fa01 f303 	lsl.w	r3, r1, r3
 80095ae:	43db      	mvns	r3, r3
 80095b0:	401a      	ands	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	3301      	adds	r3, #1
 80095ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	fa22 f303 	lsr.w	r3, r2, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f47f af3d 	bne.w	8009444 <HAL_GPIO_DeInit+0x10>
  }
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	371c      	adds	r7, #28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	40010000 	.word	0x40010000
 80095dc:	48000400 	.word	0x48000400
 80095e0:	48000800 	.word	0x48000800
 80095e4:	48000c00 	.word	0x48000c00
 80095e8:	48001000 	.word	0x48001000
 80095ec:	58000800 	.word	0x58000800

080095f0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691a      	ldr	r2, [r3, #16]
 8009600:	887b      	ldrh	r3, [r7, #2]
 8009602:	4013      	ands	r3, r2
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009608:	2301      	movs	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	e001      	b.n	8009612 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	807b      	strh	r3, [r7, #2]
 800962c:	4613      	mov	r3, r2
 800962e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009630:	787b      	ldrb	r3, [r7, #1]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009636:	887a      	ldrh	r2, [r7, #2]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800963c:	e002      	b.n	8009644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800963e:	887a      	ldrh	r2, [r7, #2]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009662:	887a      	ldrh	r2, [r7, #2]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4013      	ands	r3, r2
 8009668:	041a      	lsls	r2, r3, #16
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	43d9      	mvns	r1, r3
 800966e:	887b      	ldrh	r3, [r7, #2]
 8009670:	400b      	ands	r3, r1
 8009672:	431a      	orrs	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	619a      	str	r2, [r3, #24]
}
 8009678:	bf00      	nop
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800968e:	4b08      	ldr	r3, [pc, #32]	@ (80096b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	88fb      	ldrh	r3, [r7, #6]
 8009694:	4013      	ands	r3, r2
 8009696:	2b00      	cmp	r3, #0
 8009698:	d006      	beq.n	80096a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800969a:	4a05      	ldr	r2, [pc, #20]	@ (80096b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800969c:	88fb      	ldrh	r3, [r7, #6]
 800969e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80096a0:	88fb      	ldrh	r3, [r7, #6]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f9 f9c8 	bl	8002a38 <HAL_GPIO_EXTI_Callback>
  }
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	58000800 	.word	0x58000800

080096b4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80096ba:	4b0a      	ldr	r3, [pc, #40]	@ (80096e4 <HAL_HSEM_IRQHandler+0x30>)
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80096c0:	4b08      	ldr	r3, [pc, #32]	@ (80096e4 <HAL_HSEM_IRQHandler+0x30>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	43db      	mvns	r3, r3
 80096c8:	4906      	ldr	r1, [pc, #24]	@ (80096e4 <HAL_HSEM_IRQHandler+0x30>)
 80096ca:	4013      	ands	r3, r2
 80096cc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80096ce:	4a05      	ldr	r2, [pc, #20]	@ (80096e4 <HAL_HSEM_IRQHandler+0x30>)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f807 	bl	80096e8 <HAL_HSEM_FreeCallback>
}
 80096da:	bf00      	nop
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	58001500 	.word	0x58001500

080096e8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e08d      	b.n	800982a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d106      	bne.n	8009728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7f9 f860 	bl	80027e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2224      	movs	r2, #36	@ 0x24
 800972c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f022 0201 	bic.w	r2, r2, #1
 800973e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800974c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800975c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d107      	bne.n	8009776 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009772:	609a      	str	r2, [r3, #8]
 8009774:	e006      	b.n	8009784 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689a      	ldr	r2, [r3, #8]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009782:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d108      	bne.n	800979e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800979a:	605a      	str	r2, [r3, #4]
 800979c:	e007      	b.n	80097ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6812      	ldr	r2, [r2, #0]
 80097b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80097bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68da      	ldr	r2, [r3, #12]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	430a      	orrs	r2, r1
 80097ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69d9      	ldr	r1, [r3, #28]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a1a      	ldr	r2, [r3, #32]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2220      	movs	r2, #32
 8009816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e021      	b.n	8009888 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2224      	movs	r2, #36	@ 0x24
 8009848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f022 0201 	bic.w	r2, r2, #1
 800985a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7f9 f84d 	bl	80028fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af02      	add	r7, sp, #8
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	4608      	mov	r0, r1
 800989a:	4611      	mov	r1, r2
 800989c:	461a      	mov	r2, r3
 800989e:	4603      	mov	r3, r0
 80098a0:	817b      	strh	r3, [r7, #10]
 80098a2:	460b      	mov	r3, r1
 80098a4:	813b      	strh	r3, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b20      	cmp	r3, #32
 80098b4:	f040 80f9 	bne.w	8009aaa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <HAL_I2C_Mem_Write+0x34>
 80098be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d105      	bne.n	80098d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e0ed      	b.n	8009aac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d101      	bne.n	80098de <HAL_I2C_Mem_Write+0x4e>
 80098da:	2302      	movs	r3, #2
 80098dc:	e0e6      	b.n	8009aac <HAL_I2C_Mem_Write+0x21c>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80098e6:	f7fd fe23 	bl	8007530 <HAL_GetTick>
 80098ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2319      	movs	r3, #25
 80098f2:	2201      	movs	r2, #1
 80098f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 f955 	bl	8009ba8 <I2C_WaitOnFlagUntilTimeout>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e0d1      	b.n	8009aac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2221      	movs	r2, #33	@ 0x21
 800990c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2240      	movs	r2, #64	@ 0x40
 8009914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a3a      	ldr	r2, [r7, #32]
 8009922:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009928:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009930:	88f8      	ldrh	r0, [r7, #6]
 8009932:	893a      	ldrh	r2, [r7, #8]
 8009934:	8979      	ldrh	r1, [r7, #10]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	4603      	mov	r3, r0
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 f8b9 	bl	8009ab8 <I2C_RequestMemoryWrite>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d005      	beq.n	8009958 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e0a9      	b.n	8009aac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800995c:	b29b      	uxth	r3, r3
 800995e:	2bff      	cmp	r3, #255	@ 0xff
 8009960:	d90e      	bls.n	8009980 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	22ff      	movs	r2, #255	@ 0xff
 8009966:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800996c:	b2da      	uxtb	r2, r3
 800996e:	8979      	ldrh	r1, [r7, #10]
 8009970:	2300      	movs	r3, #0
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 fad9 	bl	8009f30 <I2C_TransferConfig>
 800997e:	e00f      	b.n	80099a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009984:	b29a      	uxth	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800998e:	b2da      	uxtb	r2, r3
 8009990:	8979      	ldrh	r1, [r7, #10]
 8009992:	2300      	movs	r3, #0
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 fac8 	bl	8009f30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f958 	bl	8009c5a <I2C_WaitOnTXISFlagUntilTimeout>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e07b      	b.n	8009aac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b8:	781a      	ldrb	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c4:	1c5a      	adds	r2, r3, #1
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	3b01      	subs	r3, #1
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099dc:	3b01      	subs	r3, #1
 80099de:	b29a      	uxth	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d034      	beq.n	8009a58 <HAL_I2C_Mem_Write+0x1c8>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d130      	bne.n	8009a58 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fc:	2200      	movs	r2, #0
 80099fe:	2180      	movs	r1, #128	@ 0x80
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f8d1 	bl	8009ba8 <I2C_WaitOnFlagUntilTimeout>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e04d      	b.n	8009aac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	2bff      	cmp	r3, #255	@ 0xff
 8009a18:	d90e      	bls.n	8009a38 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	22ff      	movs	r2, #255	@ 0xff
 8009a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	8979      	ldrh	r1, [r7, #10]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 fa7d 	bl	8009f30 <I2C_TransferConfig>
 8009a36:	e00f      	b.n	8009a58 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	8979      	ldrh	r1, [r7, #10]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 fa6c 	bl	8009f30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d19e      	bne.n	80099a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 f93e 	bl	8009ce8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e01a      	b.n	8009aac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6859      	ldr	r1, [r3, #4]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab4 <HAL_I2C_Mem_Write+0x224>)
 8009a8a:	400b      	ands	r3, r1
 8009a8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	e000      	b.n	8009aac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009aaa:	2302      	movs	r3, #2
  }
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	fe00e800 	.word	0xfe00e800

08009ab8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	4608      	mov	r0, r1
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	817b      	strh	r3, [r7, #10]
 8009aca:	460b      	mov	r3, r1
 8009acc:	813b      	strh	r3, [r7, #8]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	8979      	ldrh	r1, [r7, #10]
 8009ad8:	4b20      	ldr	r3, [pc, #128]	@ (8009b5c <I2C_RequestMemoryWrite+0xa4>)
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 fa25 	bl	8009f30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ae6:	69fa      	ldr	r2, [r7, #28]
 8009ae8:	69b9      	ldr	r1, [r7, #24]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 f8b5 	bl	8009c5a <I2C_WaitOnTXISFlagUntilTimeout>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e02c      	b.n	8009b54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009afa:	88fb      	ldrh	r3, [r7, #6]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d105      	bne.n	8009b0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b00:	893b      	ldrh	r3, [r7, #8]
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	629a      	str	r2, [r3, #40]	@ 0x28
 8009b0a:	e015      	b.n	8009b38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009b0c:	893b      	ldrh	r3, [r7, #8]
 8009b0e:	0a1b      	lsrs	r3, r3, #8
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b1a:	69fa      	ldr	r2, [r7, #28]
 8009b1c:	69b9      	ldr	r1, [r7, #24]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f89b 	bl	8009c5a <I2C_WaitOnTXISFlagUntilTimeout>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e012      	b.n	8009b54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b2e:	893b      	ldrh	r3, [r7, #8]
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2180      	movs	r1, #128	@ 0x80
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 f830 	bl	8009ba8 <I2C_WaitOnFlagUntilTimeout>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e000      	b.n	8009b54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	80002000 	.word	0x80002000

08009b60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d103      	bne.n	8009b7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d007      	beq.n	8009b9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	699a      	ldr	r2, [r3, #24]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0201 	orr.w	r2, r2, #1
 8009b9a:	619a      	str	r2, [r3, #24]
  }
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	603b      	str	r3, [r7, #0]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bb8:	e03b      	b.n	8009c32 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f8d6 	bl	8009d70 <I2C_IsErrorOccurred>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e041      	b.n	8009c52 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd4:	d02d      	beq.n	8009c32 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd6:	f7fd fcab 	bl	8007530 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d302      	bcc.n	8009bec <I2C_WaitOnFlagUntilTimeout+0x44>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d122      	bne.n	8009c32 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699a      	ldr	r2, [r3, #24]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	bf0c      	ite	eq
 8009bfc:	2301      	moveq	r3, #1
 8009bfe:	2300      	movne	r3, #0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	461a      	mov	r2, r3
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d113      	bne.n	8009c32 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c0e:	f043 0220 	orr.w	r2, r3, #32
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e00f      	b.n	8009c52 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	699a      	ldr	r2, [r3, #24]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	bf0c      	ite	eq
 8009c42:	2301      	moveq	r3, #1
 8009c44:	2300      	movne	r3, #0
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	461a      	mov	r2, r3
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d0b4      	beq.n	8009bba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c66:	e033      	b.n	8009cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	68b9      	ldr	r1, [r7, #8]
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 f87f 	bl	8009d70 <I2C_IsErrorOccurred>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e031      	b.n	8009ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c82:	d025      	beq.n	8009cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c84:	f7fd fc54 	bl	8007530 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d302      	bcc.n	8009c9a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d11a      	bne.n	8009cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d013      	beq.n	8009cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cac:	f043 0220 	orr.w	r2, r3, #32
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e007      	b.n	8009ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	f003 0302 	and.w	r3, r3, #2
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d1c4      	bne.n	8009c68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cf4:	e02f      	b.n	8009d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	68b9      	ldr	r1, [r7, #8]
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 f838 	bl	8009d70 <I2C_IsErrorOccurred>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e02d      	b.n	8009d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d0a:	f7fd fc11 	bl	8007530 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d302      	bcc.n	8009d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d11a      	bne.n	8009d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b20      	cmp	r3, #32
 8009d2c:	d013      	beq.n	8009d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d32:	f043 0220 	orr.w	r2, r3, #32
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e007      	b.n	8009d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	2b20      	cmp	r3, #32
 8009d62:	d1c8      	bne.n	8009cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08a      	sub	sp, #40	@ 0x28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d068      	beq.n	8009e6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2210      	movs	r2, #16
 8009da2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009da4:	e049      	b.n	8009e3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dac:	d045      	beq.n	8009e3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009dae:	f7fd fbbf 	bl	8007530 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d302      	bcc.n	8009dc4 <I2C_IsErrorOccurred+0x54>
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d13a      	bne.n	8009e3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009dd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009de6:	d121      	bne.n	8009e2c <I2C_IsErrorOccurred+0xbc>
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dee:	d01d      	beq.n	8009e2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009df0:	7cfb      	ldrb	r3, [r7, #19]
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d01a      	beq.n	8009e2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009e06:	f7fd fb93 	bl	8007530 <HAL_GetTick>
 8009e0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e0c:	e00e      	b.n	8009e2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009e0e:	f7fd fb8f 	bl	8007530 <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	2b19      	cmp	r3, #25
 8009e1a:	d907      	bls.n	8009e2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	f043 0320 	orr.w	r3, r3, #32
 8009e22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009e2a:	e006      	b.n	8009e3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	f003 0320 	and.w	r3, r3, #32
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	d1e9      	bne.n	8009e0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	f003 0320 	and.w	r3, r3, #32
 8009e44:	2b20      	cmp	r3, #32
 8009e46:	d003      	beq.n	8009e50 <I2C_IsErrorOccurred+0xe0>
 8009e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d0aa      	beq.n	8009da6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d103      	bne.n	8009e60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	f043 0304 	orr.w	r3, r3, #4
 8009e66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00b      	beq.n	8009e98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00b      	beq.n	8009eba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	f043 0308 	orr.w	r3, r3, #8
 8009ea8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009eb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00b      	beq.n	8009edc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	f043 0302 	orr.w	r3, r3, #2
 8009eca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ed4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d01c      	beq.n	8009f1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f7ff fe3b 	bl	8009b60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6859      	ldr	r1, [r3, #4]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8009f2c <I2C_IsErrorOccurred+0x1bc>)
 8009ef6:	400b      	ands	r3, r1
 8009ef8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	431a      	orrs	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2220      	movs	r2, #32
 8009f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3728      	adds	r7, #40	@ 0x28
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	fe00e800 	.word	0xfe00e800

08009f30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b087      	sub	sp, #28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	817b      	strh	r3, [r7, #10]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f42:	897b      	ldrh	r3, [r7, #10]
 8009f44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f48:	7a7b      	ldrb	r3, [r7, #9]
 8009f4a:	041b      	lsls	r3, r3, #16
 8009f4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	0d5b      	lsrs	r3, r3, #21
 8009f6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009f6e:	4b08      	ldr	r3, [pc, #32]	@ (8009f90 <I2C_TransferConfig+0x60>)
 8009f70:	430b      	orrs	r3, r1
 8009f72:	43db      	mvns	r3, r3
 8009f74:	ea02 0103 	and.w	r1, r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009f82:	bf00      	nop
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	03ff63ff 	.word	0x03ff63ff

08009f94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b20      	cmp	r3, #32
 8009fa8:	d138      	bne.n	800a01c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d101      	bne.n	8009fb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e032      	b.n	800a01e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2224      	movs	r2, #36	@ 0x24
 8009fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f022 0201 	bic.w	r2, r2, #1
 8009fd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009fe6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6819      	ldr	r1, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2220      	movs	r2, #32
 800a00c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	e000      	b.n	800a01e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a01c:	2302      	movs	r3, #2
  }
}
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b085      	sub	sp, #20
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	d139      	bne.n	800a0b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a046:	2b01      	cmp	r3, #1
 800a048:	d101      	bne.n	800a04e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a04a:	2302      	movs	r3, #2
 800a04c:	e033      	b.n	800a0b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2224      	movs	r2, #36	@ 0x24
 800a05a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0201 	bic.w	r2, r2, #1
 800a06c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a07c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	021b      	lsls	r3, r3, #8
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4313      	orrs	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f042 0201 	orr.w	r2, r2, #1
 800a09e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	e000      	b.n	800a0b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a0b4:	2302      	movs	r3, #2
  }
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
	...

0800a0c4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800a0cc:	4b05      	ldr	r3, [pc, #20]	@ (800a0e4 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	4904      	ldr	r1, [pc, #16]	@ (800a0e4 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	604b      	str	r3, [r1, #4]
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	40010000 	.word	0x40010000

0800a0e8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d01e      	beq.n	800a138 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a0fa:	4b13      	ldr	r3, [pc, #76]	@ (800a148 <HAL_IPCC_Init+0x60>)
 800a0fc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7f8 fc58 	bl	80029c0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800a110:	68b8      	ldr	r0, [r7, #8]
 800a112:	f000 f85b 	bl	800a1cc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f82c 	bl	800a180 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a136:	e001      	b.n	800a13c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	58000c00 	.word	0x58000c00

0800a14c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	4613      	mov	r3, r2
 800a158:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a166:	b480      	push	{r7}
 800a168:	b085      	sub	sp, #20
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	60f8      	str	r0, [r7, #12]
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	4613      	mov	r3, r2
 800a172:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a174:	bf00      	nop
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	e00f      	b.n	800a1ae <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	4a0b      	ldr	r2, [pc, #44]	@ (800a1c4 <IPCC_SetDefaultCallbacks+0x44>)
 800a198:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	3306      	adds	r3, #6
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	4a08      	ldr	r2, [pc, #32]	@ (800a1c8 <IPCC_SetDefaultCallbacks+0x48>)
 800a1a6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b05      	cmp	r3, #5
 800a1b2:	d9ec      	bls.n	800a18e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	0800a14d 	.word	0x0800a14d
 800a1c8:	0800a167 	.word	0x0800a167

0800a1cc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a1e0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	223f      	movs	r2, #63	@ 0x3f
 800a1e6:	609a      	str	r2, [r3, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d101      	bne.n	800a206 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e0c0      	b.n	800a388 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d106      	bne.n	800a220 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f00e fe1c 	bl	8018e58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2203      	movs	r2, #3
 800a224:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f007 f88e 	bl	801134e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a232:	2300      	movs	r3, #0
 800a234:	73fb      	strb	r3, [r7, #15]
 800a236:	e03e      	b.n	800a2b6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a238:	7bfa      	ldrb	r2, [r7, #15]
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	4613      	mov	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	440b      	add	r3, r1
 800a246:	3311      	adds	r3, #17
 800a248:	2201      	movs	r2, #1
 800a24a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a24c:	7bfa      	ldrb	r2, [r7, #15]
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	4613      	mov	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	440b      	add	r3, r1
 800a25a:	3310      	adds	r3, #16
 800a25c:	7bfa      	ldrb	r2, [r7, #15]
 800a25e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a260:	7bfa      	ldrb	r2, [r7, #15]
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	440b      	add	r3, r1
 800a26e:	3313      	adds	r3, #19
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a274:	7bfa      	ldrb	r2, [r7, #15]
 800a276:	6879      	ldr	r1, [r7, #4]
 800a278:	4613      	mov	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	440b      	add	r3, r1
 800a282:	3320      	adds	r3, #32
 800a284:	2200      	movs	r2, #0
 800a286:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a288:	7bfa      	ldrb	r2, [r7, #15]
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	440b      	add	r3, r1
 800a296:	3324      	adds	r3, #36	@ 0x24
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	00db      	lsls	r3, r3, #3
 800a2aa:	440b      	add	r3, r1
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	73fb      	strb	r3, [r7, #15]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	791b      	ldrb	r3, [r3, #4]
 800a2ba:	7bfa      	ldrb	r2, [r7, #15]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d3bb      	bcc.n	800a238 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73fb      	strb	r3, [r7, #15]
 800a2c4:	e044      	b.n	800a350 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a2c6:	7bfa      	ldrb	r2, [r7, #15]
 800a2c8:	6879      	ldr	r1, [r7, #4]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	440b      	add	r3, r1
 800a2d4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a2dc:	7bfa      	ldrb	r2, [r7, #15]
 800a2de:	6879      	ldr	r1, [r7, #4]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4413      	add	r3, r2
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	440b      	add	r3, r1
 800a2ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2ee:	7bfa      	ldrb	r2, [r7, #15]
 800a2f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a2f2:	7bfa      	ldrb	r2, [r7, #15]
 800a2f4:	6879      	ldr	r1, [r7, #4]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	00db      	lsls	r3, r3, #3
 800a2fe:	440b      	add	r3, r1
 800a300:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a304:	2200      	movs	r2, #0
 800a306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a308:	7bfa      	ldrb	r2, [r7, #15]
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	00db      	lsls	r3, r3, #3
 800a314:	440b      	add	r3, r1
 800a316:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a31e:	7bfa      	ldrb	r2, [r7, #15]
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	4613      	mov	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	440b      	add	r3, r1
 800a32c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a334:	7bfa      	ldrb	r2, [r7, #15]
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	4613      	mov	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	440b      	add	r3, r1
 800a342:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a346:	2200      	movs	r2, #0
 800a348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
 800a34c:	3301      	adds	r3, #1
 800a34e:	73fb      	strb	r3, [r7, #15]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	791b      	ldrb	r3, [r3, #4]
 800a354:	7bfa      	ldrb	r2, [r7, #15]
 800a356:	429a      	cmp	r2, r3
 800a358:	d3b5      	bcc.n	800a2c6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	3304      	adds	r3, #4
 800a362:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a366:	f007 f80d 	bl	8011384 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	7a9b      	ldrb	r3, [r3, #10]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d102      	bne.n	800a386 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 fc0e 	bl	800bba2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d101      	bne.n	800a3a6 <HAL_PCD_Start+0x16>
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	e012      	b.n	800a3cc <HAL_PCD_Start+0x3c>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f006 ffb4 	bl	8011320 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f008 fd91 	bl	8012ee4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f008 fd96 	bl	8012f12 <USB_ReadInterrupts>
 800a3e6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fb06 	bl	800aa04 <PCD_EP_ISR_Handler>

    return;
 800a3f8:	e110      	b.n	800a61c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a400:	2b00      	cmp	r3, #0
 800a402:	d013      	beq.n	800a42c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a416:	b292      	uxth	r2, r2
 800a418:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f00e fda8 	bl	8018f72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a422:	2100      	movs	r1, #0
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f8fc 	bl	800a622 <HAL_PCD_SetAddress>

    return;
 800a42a:	e0f7      	b.n	800a61c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00c      	beq.n	800a450 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a43e:	b29a      	uxth	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a448:	b292      	uxth	r2, r2
 800a44a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a44e:	e0e5      	b.n	800a61c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00c      	beq.n	800a474 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a462:	b29a      	uxth	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a46c:	b292      	uxth	r2, r2
 800a46e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a472:	e0d3      	b.n	800a61c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d034      	beq.n	800a4e8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a486:	b29a      	uxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f022 0204 	bic.w	r2, r2, #4
 800a490:	b292      	uxth	r2, r2
 800a492:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f022 0208 	bic.w	r2, r2, #8
 800a4a8:	b292      	uxth	r2, r2
 800a4aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d107      	bne.n	800a4c8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f00e ff4a 	bl	801935c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f00e fd8b 	bl	8018fe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a4e0:	b292      	uxth	r2, r2
 800a4e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a4e6:	e099      	b.n	800a61c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d027      	beq.n	800a542 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f042 0208 	orr.w	r2, r2, #8
 800a504:	b292      	uxth	r2, r2
 800a506:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a512:	b29a      	uxth	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a51c:	b292      	uxth	r2, r2
 800a51e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0204 	orr.w	r2, r2, #4
 800a534:	b292      	uxth	r2, r2
 800a536:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f00e fd38 	bl	8018fb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a540:	e06c      	b.n	800a61c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d040      	beq.n	800a5ce <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a554:	b29a      	uxth	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a55e:	b292      	uxth	r2, r2
 800a560:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d12b      	bne.n	800a5c6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a576:	b29a      	uxth	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f042 0204 	orr.w	r2, r2, #4
 800a580:	b292      	uxth	r2, r2
 800a582:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a58e:	b29a      	uxth	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f042 0208 	orr.w	r2, r2, #8
 800a598:	b292      	uxth	r2, r2
 800a59a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	089b      	lsrs	r3, r3, #2
 800a5b2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a5bc:	2101      	movs	r1, #1
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f00e fecc 	bl	801935c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a5c4:	e02a      	b.n	800a61c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f00e fcf2 	bl	8018fb0 <HAL_PCD_SuspendCallback>
    return;
 800a5cc:	e026      	b.n	800a61c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00f      	beq.n	800a5f8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a5ea:	b292      	uxth	r2, r2
 800a5ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f00e fcb0 	bl	8018f56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a5f6:	e011      	b.n	800a61c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00c      	beq.n	800a61c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a614:	b292      	uxth	r2, r2
 800a616:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a61a:	bf00      	nop
  }
}
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b082      	sub	sp, #8
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	460b      	mov	r3, r1
 800a62c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a634:	2b01      	cmp	r3, #1
 800a636:	d101      	bne.n	800a63c <HAL_PCD_SetAddress+0x1a>
 800a638:	2302      	movs	r3, #2
 800a63a:	e012      	b.n	800a662 <HAL_PCD_SetAddress+0x40>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	78fa      	ldrb	r2, [r7, #3]
 800a648:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	78fa      	ldrb	r2, [r7, #3]
 800a650:	4611      	mov	r1, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f008 fc32 	bl	8012ebc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	461a      	mov	r2, r3
 800a678:	4603      	mov	r3, r0
 800a67a:	70fb      	strb	r3, [r7, #3]
 800a67c:	460b      	mov	r3, r1
 800a67e:	803b      	strh	r3, [r7, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	da0e      	bge.n	800a6ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	f003 0207 	and.w	r2, r3, #7
 800a696:	4613      	mov	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	00db      	lsls	r3, r3, #3
 800a69e:	3310      	adds	r3, #16
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	705a      	strb	r2, [r3, #1]
 800a6ac:	e00e      	b.n	800a6cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	f003 0207 	and.w	r2, r3, #7
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	00db      	lsls	r3, r3, #3
 800a6bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	f003 0307 	and.w	r3, r3, #7
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a6d8:	883b      	ldrh	r3, [r7, #0]
 800a6da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	78ba      	ldrb	r2, [r7, #2]
 800a6e6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a6e8:	78bb      	ldrb	r3, [r7, #2]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d102      	bne.n	800a6f4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <HAL_PCD_EP_Open+0x98>
 800a6fe:	2302      	movs	r3, #2
 800a700:	e00e      	b.n	800a720 <HAL_PCD_EP_Open+0xb6>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68f9      	ldr	r1, [r7, #12]
 800a710:	4618      	mov	r0, r3
 800a712:	f006 fe55 	bl	80113c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a71e:	7afb      	ldrb	r3, [r7, #11]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	da0e      	bge.n	800a75a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	f003 0207 	and.w	r2, r3, #7
 800a742:	4613      	mov	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	3310      	adds	r3, #16
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	4413      	add	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2201      	movs	r2, #1
 800a756:	705a      	strb	r2, [r3, #1]
 800a758:	e00e      	b.n	800a778 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a75a:	78fb      	ldrb	r3, [r7, #3]
 800a75c:	f003 0207 	and.w	r2, r3, #7
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	4413      	add	r3, r2
 800a770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d101      	bne.n	800a792 <HAL_PCD_EP_Close+0x6a>
 800a78e:	2302      	movs	r3, #2
 800a790:	e00e      	b.n	800a7b0 <HAL_PCD_EP_Close+0x88>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68f9      	ldr	r1, [r7, #12]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f007 faf5 	bl	8011d90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	607a      	str	r2, [r7, #4]
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7c8:	7afb      	ldrb	r3, [r7, #11]
 800a7ca:	f003 0207 	and.w	r2, r3, #7
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	4413      	add	r3, r2
 800a7de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7f8:	7afb      	ldrb	r3, [r7, #11]
 800a7fa:	f003 0307 	and.w	r3, r3, #7
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6979      	ldr	r1, [r7, #20]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f007 fcad 	bl	801216a <USB_EPStartXfer>

  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3718      	adds	r7, #24
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a826:	78fb      	ldrb	r3, [r7, #3]
 800a828:	f003 0207 	and.w	r2, r3, #7
 800a82c:	6879      	ldr	r1, [r7, #4]
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	00db      	lsls	r3, r3, #3
 800a836:	440b      	add	r3, r1
 800a838:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a83c:	681b      	ldr	r3, [r3, #0]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b086      	sub	sp, #24
 800a84e:	af00      	add	r7, sp, #0
 800a850:	60f8      	str	r0, [r7, #12]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	603b      	str	r3, [r7, #0]
 800a856:	460b      	mov	r3, r1
 800a858:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a85a:	7afb      	ldrb	r3, [r7, #11]
 800a85c:	f003 0207 	and.w	r2, r3, #7
 800a860:	4613      	mov	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	3310      	adds	r3, #16
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	4413      	add	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	683a      	ldr	r2, [r7, #0]
 800a87a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2200      	movs	r2, #0
 800a88e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	2201      	movs	r2, #1
 800a894:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a896:	7afb      	ldrb	r3, [r7, #11]
 800a898:	f003 0307 	and.w	r3, r3, #7
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6979      	ldr	r1, [r7, #20]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f007 fc5e 	bl	801216a <USB_EPStartXfer>

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	7912      	ldrb	r2, [r2, #4]
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d901      	bls.n	800a8d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e03e      	b.n	800a954 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a8d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	da0e      	bge.n	800a8fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8de:	78fb      	ldrb	r3, [r7, #3]
 800a8e0:	f003 0207 	and.w	r2, r3, #7
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	00db      	lsls	r3, r3, #3
 800a8ec:	3310      	adds	r3, #16
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	705a      	strb	r2, [r3, #1]
 800a8fa:	e00c      	b.n	800a916 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a8fc:	78fa      	ldrb	r2, [r7, #3]
 800a8fe:	4613      	mov	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	4413      	add	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2201      	movs	r2, #1
 800a91a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a91c:	78fb      	ldrb	r3, [r7, #3]
 800a91e:	f003 0307 	and.w	r3, r3, #7
 800a922:	b2da      	uxtb	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d101      	bne.n	800a936 <HAL_PCD_EP_SetStall+0x7e>
 800a932:	2302      	movs	r3, #2
 800a934:	e00e      	b.n	800a954 <HAL_PCD_EP_SetStall+0x9c>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68f9      	ldr	r1, [r7, #12]
 800a944:	4618      	mov	r0, r3
 800a946:	f008 f9bf 	bl	8012cc8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a968:	78fb      	ldrb	r3, [r7, #3]
 800a96a:	f003 030f 	and.w	r3, r3, #15
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	7912      	ldrb	r2, [r2, #4]
 800a972:	4293      	cmp	r3, r2
 800a974:	d901      	bls.n	800a97a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e040      	b.n	800a9fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a97a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	da0e      	bge.n	800a9a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	f003 0207 	and.w	r2, r3, #7
 800a988:	4613      	mov	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	00db      	lsls	r3, r3, #3
 800a990:	3310      	adds	r3, #16
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	4413      	add	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2201      	movs	r2, #1
 800a99c:	705a      	strb	r2, [r3, #1]
 800a99e:	e00e      	b.n	800a9be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	f003 0207 	and.w	r2, r3, #7
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4413      	add	r3, r2
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d101      	bne.n	800a9de <HAL_PCD_EP_ClrStall+0x82>
 800a9da:	2302      	movs	r3, #2
 800a9dc:	e00e      	b.n	800a9fc <HAL_PCD_EP_ClrStall+0xa0>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68f9      	ldr	r1, [r7, #12]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f008 f9bc 	bl	8012d6a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b092      	sub	sp, #72	@ 0x48
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800aa0c:	e333      	b.n	800b076 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aa16:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800aa18:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f003 030f 	and.w	r3, r3, #15
 800aa20:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800aa24:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f040 8108 	bne.w	800ac3e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800aa2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aa30:	f003 0310 	and.w	r3, r3, #16
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d14c      	bne.n	800aad2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800aa44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa48:	813b      	strh	r3, [r7, #8]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	893b      	ldrh	r3, [r7, #8]
 800aa50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3310      	adds	r3, #16
 800aa60:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	4413      	add	r3, r2
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	6812      	ldr	r2, [r2, #0]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aa86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800aa8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa8c:	695a      	ldr	r2, [r3, #20]
 800aa8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	441a      	add	r2, r3
 800aa94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa96:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800aa98:	2100      	movs	r1, #0
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f00e fa41 	bl	8018f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7b1b      	ldrb	r3, [r3, #12]
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 82e5 	beq.w	800b076 <PCD_EP_ISR_Handler+0x672>
 800aaac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f040 82e0 	bne.w	800b076 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	7b1b      	ldrb	r3, [r3, #12]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	731a      	strb	r2, [r3, #12]
 800aad0:	e2d1      	b.n	800b076 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aad8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800aae2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d032      	beq.n	800ab52 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	00db      	lsls	r3, r3, #3
 800aafe:	4413      	add	r3, r2
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	6812      	ldr	r2, [r2, #0]
 800ab04:	4413      	add	r3, r2
 800ab06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab12:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800ab1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab20:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800ab22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab24:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	f008 fa45 	bl	8012fb6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	881b      	ldrh	r3, [r3, #0]
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ab38:	4013      	ands	r3, r2
 800ab3a:	817b      	strh	r3, [r7, #10]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	897a      	ldrh	r2, [r7, #10]
 800ab42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ab46:	b292      	uxth	r2, r2
 800ab48:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f00e f9bc 	bl	8018ec8 <HAL_PCD_SetupStageCallback>
 800ab50:	e291      	b.n	800b076 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ab52:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f280 828d 	bge.w	800b076 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ab68:	4013      	ands	r3, r2
 800ab6a:	81fb      	strh	r3, [r7, #14]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	89fa      	ldrh	r2, [r7, #14]
 800ab72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ab76:	b292      	uxth	r2, r2
 800ab78:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	461a      	mov	r2, r3
 800ab86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	00db      	lsls	r3, r3, #3
 800ab8c:	4413      	add	r3, r2
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	6812      	ldr	r2, [r2, #0]
 800ab92:	4413      	add	r3, r2
 800ab94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aba0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800aba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d019      	beq.n	800abde <PCD_EP_ISR_Handler+0x1da>
 800abaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d015      	beq.n	800abde <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6818      	ldr	r0, [r3, #0]
 800abb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abb8:	6959      	ldr	r1, [r3, #20]
 800abba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abbc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800abbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abc0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	f008 f9f7 	bl	8012fb6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800abc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abca:	695a      	ldr	r2, [r3, #20]
 800abcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	441a      	add	r2, r3
 800abd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abd4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800abd6:	2100      	movs	r1, #0
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f00e f987 	bl	8018eec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800abe6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800abe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abec:	2b00      	cmp	r3, #0
 800abee:	f040 8242 	bne.w	800b076 <PCD_EP_ISR_Handler+0x672>
 800abf2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800abf4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800abf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800abfc:	f000 823b 	beq.w	800b076 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac10:	81bb      	strh	r3, [r7, #12]
 800ac12:	89bb      	ldrh	r3, [r7, #12]
 800ac14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac18:	81bb      	strh	r3, [r7, #12]
 800ac1a:	89bb      	ldrh	r3, [r7, #12]
 800ac1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac20:	81bb      	strh	r3, [r7, #12]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	89bb      	ldrh	r3, [r7, #12]
 800ac28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	8013      	strh	r3, [r2, #0]
 800ac3c:	e21b      	b.n	800b076 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	461a      	mov	r2, r3
 800ac44:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ac50:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f280 80f1 	bge.w	800ae3c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ac70:	4013      	ands	r3, r2
 800ac72:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ac84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ac88:	b292      	uxth	r2, r2
 800ac8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ac8c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ac90:	4613      	mov	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	4413      	add	r3, r2
 800aca0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800aca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aca4:	7b1b      	ldrb	r3, [r3, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d123      	bne.n	800acf2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	461a      	mov	r2, r3
 800acb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	4413      	add	r3, r2
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	6812      	ldr	r2, [r2, #0]
 800acc2:	4413      	add	r3, r2
 800acc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800acd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 808b 	beq.w	800adf2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6818      	ldr	r0, [r3, #0]
 800ace0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ace2:	6959      	ldr	r1, [r3, #20]
 800ace4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ace6:	88da      	ldrh	r2, [r3, #6]
 800ace8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800acec:	f008 f963 	bl	8012fb6 <USB_ReadPMA>
 800acf0:	e07f      	b.n	800adf2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800acf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acf4:	78db      	ldrb	r3, [r3, #3]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d109      	bne.n	800ad0e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800acfa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800acfc:	461a      	mov	r2, r3
 800acfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f9c6 	bl	800b092 <HAL_PCD_EP_DB_Receive>
 800ad06:	4603      	mov	r3, r0
 800ad08:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ad0c:	e071      	b.n	800adf2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad28:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	441a      	add	r2, r3
 800ad38:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ad3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d022      	beq.n	800adae <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	461a      	mov	r2, r3
 800ad74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	4413      	add	r3, r2
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	6812      	ldr	r2, [r2, #0]
 800ad80:	4413      	add	r3, r2
 800ad82:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad8c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ad90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d02c      	beq.n	800adf2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad9e:	6959      	ldr	r1, [r3, #20]
 800ada0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ada2:	891a      	ldrh	r2, [r3, #8]
 800ada4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ada8:	f008 f905 	bl	8012fb6 <USB_ReadPMA>
 800adac:	e021      	b.n	800adf2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	461a      	mov	r2, r3
 800adba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	4413      	add	r3, r2
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	6812      	ldr	r2, [r2, #0]
 800adc6:	4413      	add	r3, r2
 800adc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800add2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800add6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800adda:	2b00      	cmp	r3, #0
 800addc:	d009      	beq.n	800adf2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6818      	ldr	r0, [r3, #0]
 800ade2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ade4:	6959      	ldr	r1, [r3, #20]
 800ade6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ade8:	895a      	ldrh	r2, [r3, #10]
 800adea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800adee:	f008 f8e2 	bl	8012fb6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800adf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adf4:	69da      	ldr	r2, [r3, #28]
 800adf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800adfa:	441a      	add	r2, r3
 800adfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ae00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae02:	695a      	ldr	r2, [r3, #20]
 800ae04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ae08:	441a      	add	r2, r3
 800ae0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae0c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ae0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d005      	beq.n	800ae22 <PCD_EP_ISR_Handler+0x41e>
 800ae16:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ae1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d206      	bcs.n	800ae30 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ae22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f00e f85f 	bl	8018eec <HAL_PCD_DataOutStageCallback>
 800ae2e:	e005      	b.n	800ae3c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae36:	4618      	mov	r0, r3
 800ae38:	f007 f997 	bl	801216a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ae3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 8117 	beq.w	800b076 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800ae48:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	3310      	adds	r3, #16
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	4413      	add	r3, r2
 800ae5a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800ae72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	441a      	add	r2, r3
 800ae86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ae88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ae94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae96:	78db      	ldrb	r3, [r3, #3]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	f040 80a1 	bne.w	800afe0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800ae9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aea0:	2200      	movs	r2, #0
 800aea2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800aea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aea6:	7b1b      	ldrb	r3, [r3, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 8092 	beq.w	800afd2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800aeae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d046      	beq.n	800af46 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aeb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeba:	785b      	ldrb	r3, [r3, #1]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d126      	bne.n	800af0e <PCD_EP_ISR_Handler+0x50a>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	617b      	str	r3, [r7, #20]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aece:	b29b      	uxth	r3, r3
 800aed0:	461a      	mov	r2, r3
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	4413      	add	r3, r2
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	00da      	lsls	r2, r3, #3
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	4413      	add	r3, r2
 800aee2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aee6:	613b      	str	r3, [r7, #16]
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	801a      	strh	r2, [r3, #0]
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af06:	b29a      	uxth	r2, r3
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	801a      	strh	r2, [r3, #0]
 800af0c:	e061      	b.n	800afd2 <PCD_EP_ISR_Handler+0x5ce>
 800af0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af10:	785b      	ldrb	r3, [r3, #1]
 800af12:	2b01      	cmp	r3, #1
 800af14:	d15d      	bne.n	800afd2 <PCD_EP_ISR_Handler+0x5ce>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	61fb      	str	r3, [r7, #28]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af24:	b29b      	uxth	r3, r3
 800af26:	461a      	mov	r2, r3
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	4413      	add	r3, r2
 800af2c:	61fb      	str	r3, [r7, #28]
 800af2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	00da      	lsls	r2, r3, #3
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	4413      	add	r3, r2
 800af38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af3c:	61bb      	str	r3, [r7, #24]
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	2200      	movs	r2, #0
 800af42:	801a      	strh	r2, [r3, #0]
 800af44:	e045      	b.n	800afd2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af4e:	785b      	ldrb	r3, [r3, #1]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d126      	bne.n	800afa2 <PCD_EP_ISR_Handler+0x59e>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	627b      	str	r3, [r7, #36]	@ 0x24
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af62:	b29b      	uxth	r3, r3
 800af64:	461a      	mov	r2, r3
 800af66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af68:	4413      	add	r3, r2
 800af6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800af6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	00da      	lsls	r2, r3, #3
 800af72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af74:	4413      	add	r3, r2
 800af76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af7a:	623b      	str	r3, [r7, #32]
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	b29b      	uxth	r3, r3
 800af82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af86:	b29a      	uxth	r2, r3
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	801a      	strh	r2, [r3, #0]
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	b29b      	uxth	r3, r3
 800af92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	801a      	strh	r2, [r3, #0]
 800afa0:	e017      	b.n	800afd2 <PCD_EP_ISR_Handler+0x5ce>
 800afa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d113      	bne.n	800afd2 <PCD_EP_ISR_Handler+0x5ce>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	461a      	mov	r2, r3
 800afb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb8:	4413      	add	r3, r2
 800afba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	00da      	lsls	r2, r3, #3
 800afc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc4:	4413      	add	r3, r2
 800afc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800afca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afce:	2200      	movs	r2, #0
 800afd0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800afd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f00d ffa2 	bl	8018f22 <HAL_PCD_DataInStageCallback>
 800afde:	e04a      	b.n	800b076 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800afe0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d13f      	bne.n	800b06a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	461a      	mov	r2, r3
 800aff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	4413      	add	r3, r2
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	6812      	ldr	r2, [r2, #0]
 800b002:	4413      	add	r3, r2
 800b004:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b008:	881b      	ldrh	r3, [r3, #0]
 800b00a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b00e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800b010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b016:	429a      	cmp	r2, r3
 800b018:	d906      	bls.n	800b028 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800b01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b01c:	699a      	ldr	r2, [r3, #24]
 800b01e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b020:	1ad2      	subs	r2, r2, r3
 800b022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b024:	619a      	str	r2, [r3, #24]
 800b026:	e002      	b.n	800b02e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800b028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b02a:	2200      	movs	r2, #0
 800b02c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800b02e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d106      	bne.n	800b044 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f00d ff70 	bl	8018f22 <HAL_PCD_DataInStageCallback>
 800b042:	e018      	b.n	800b076 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800b044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b046:	695a      	ldr	r2, [r3, #20]
 800b048:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b04a:	441a      	add	r2, r3
 800b04c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b04e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800b050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b052:	69da      	ldr	r2, [r3, #28]
 800b054:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b056:	441a      	add	r2, r3
 800b058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b05a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b062:	4618      	mov	r0, r3
 800b064:	f007 f881 	bl	801216a <USB_EPStartXfer>
 800b068:	e005      	b.n	800b076 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b06a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b06c:	461a      	mov	r2, r3
 800b06e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f917 	bl	800b2a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b07e:	b29b      	uxth	r3, r3
 800b080:	b21b      	sxth	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	f6ff acc3 	blt.w	800aa0e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3748      	adds	r7, #72	@ 0x48
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b088      	sub	sp, #32
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	4613      	mov	r3, r2
 800b09e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b0a0:	88fb      	ldrh	r3, [r7, #6]
 800b0a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d07c      	beq.n	800b1a4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	00db      	lsls	r3, r3, #3
 800b0bc:	4413      	add	r3, r2
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	6812      	ldr	r2, [r2, #0]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	699a      	ldr	r2, [r3, #24]
 800b0d4:	8b7b      	ldrh	r3, [r7, #26]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d306      	bcc.n	800b0e8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	699a      	ldr	r2, [r3, #24]
 800b0de:	8b7b      	ldrh	r3, [r7, #26]
 800b0e0:	1ad2      	subs	r2, r2, r3
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	619a      	str	r2, [r3, #24]
 800b0e6:	e002      	b.n	800b0ee <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d123      	bne.n	800b13e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	b29b      	uxth	r3, r3
 800b108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b10c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b110:	833b      	strh	r3, [r7, #24]
 800b112:	8b3b      	ldrh	r3, [r7, #24]
 800b114:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b118:	833b      	strh	r3, [r7, #24]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	441a      	add	r2, r3
 800b128:	8b3b      	ldrh	r3, [r7, #24]
 800b12a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b12e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b13e:	88fb      	ldrh	r3, [r7, #6]
 800b140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b144:	2b00      	cmp	r3, #0
 800b146:	d01f      	beq.n	800b188 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	461a      	mov	r2, r3
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b15e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b162:	82fb      	strh	r3, [r7, #22]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	461a      	mov	r2, r3
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	441a      	add	r2, r3
 800b172:	8afb      	ldrh	r3, [r7, #22]
 800b174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b17c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b180:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b184:	b29b      	uxth	r3, r3
 800b186:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b188:	8b7b      	ldrh	r3, [r7, #26]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 8085 	beq.w	800b29a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	6959      	ldr	r1, [r3, #20]
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	891a      	ldrh	r2, [r3, #8]
 800b19c:	8b7b      	ldrh	r3, [r7, #26]
 800b19e:	f007 ff0a 	bl	8012fb6 <USB_ReadPMA>
 800b1a2:	e07a      	b.n	800b29a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	4413      	add	r3, r2
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	6812      	ldr	r2, [r2, #0]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	699a      	ldr	r2, [r3, #24]
 800b1ce:	8b7b      	ldrh	r3, [r7, #26]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d306      	bcc.n	800b1e2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	699a      	ldr	r2, [r3, #24]
 800b1d8:	8b7b      	ldrh	r3, [r7, #26]
 800b1da:	1ad2      	subs	r2, r2, r3
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	619a      	str	r2, [r3, #24]
 800b1e0:	e002      	b.n	800b1e8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d123      	bne.n	800b238 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29b      	uxth	r3, r3
 800b202:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b20a:	83fb      	strh	r3, [r7, #30]
 800b20c:	8bfb      	ldrh	r3, [r7, #30]
 800b20e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b212:	83fb      	strh	r3, [r7, #30]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	461a      	mov	r2, r3
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	441a      	add	r2, r3
 800b222:	8bfb      	ldrh	r3, [r7, #30]
 800b224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b22c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b234:	b29b      	uxth	r3, r3
 800b236:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b238:	88fb      	ldrh	r3, [r7, #6]
 800b23a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d11f      	bne.n	800b282 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	b29b      	uxth	r3, r3
 800b254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b25c:	83bb      	strh	r3, [r7, #28]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	441a      	add	r2, r3
 800b26c:	8bbb      	ldrh	r3, [r7, #28]
 800b26e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b272:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b27a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b27e:	b29b      	uxth	r3, r3
 800b280:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b282:	8b7b      	ldrh	r3, [r7, #26]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d008      	beq.n	800b29a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6818      	ldr	r0, [r3, #0]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	6959      	ldr	r1, [r3, #20]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	895a      	ldrh	r2, [r3, #10]
 800b294:	8b7b      	ldrh	r3, [r7, #26]
 800b296:	f007 fe8e 	bl	8012fb6 <USB_ReadPMA>
    }
  }

  return count;
 800b29a:	8b7b      	ldrh	r3, [r7, #26]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3720      	adds	r7, #32
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b0a6      	sub	sp, #152	@ 0x98
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b2b2:	88fb      	ldrh	r3, [r7, #6]
 800b2b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 81f7 	beq.w	800b6ac <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	4413      	add	r3, r2
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	6812      	ldr	r2, [r2, #0]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2e2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	699a      	ldr	r2, [r3, #24]
 800b2ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d907      	bls.n	800b302 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	699a      	ldr	r2, [r3, #24]
 800b2f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b2fa:	1ad2      	subs	r2, r2, r3
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	619a      	str	r2, [r3, #24]
 800b300:	e002      	b.n	800b308 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2200      	movs	r2, #0
 800b306:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f040 80e1 	bne.w	800b4d4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	785b      	ldrb	r3, [r3, #1]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d126      	bne.n	800b368 <HAL_PCD_EP_DB_Transmit+0xc4>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b328:	b29b      	uxth	r3, r3
 800b32a:	461a      	mov	r2, r3
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	4413      	add	r3, r2
 800b330:	633b      	str	r3, [r7, #48]	@ 0x30
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	00da      	lsls	r2, r3, #3
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	4413      	add	r3, r2
 800b33c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	b29b      	uxth	r3, r3
 800b348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b350:	801a      	strh	r2, [r3, #0]
 800b352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	b29b      	uxth	r3, r3
 800b358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b35c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b360:	b29a      	uxth	r2, r3
 800b362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b364:	801a      	strh	r2, [r3, #0]
 800b366:	e01a      	b.n	800b39e <HAL_PCD_EP_DB_Transmit+0xfa>
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	785b      	ldrb	r3, [r3, #1]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d116      	bne.n	800b39e <HAL_PCD_EP_DB_Transmit+0xfa>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b37e:	b29b      	uxth	r3, r3
 800b380:	461a      	mov	r2, r3
 800b382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b384:	4413      	add	r3, r2
 800b386:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	00da      	lsls	r2, r3, #3
 800b38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b390:	4413      	add	r3, r2
 800b392:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b396:	637b      	str	r3, [r7, #52]	@ 0x34
 800b398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b39a:	2200      	movs	r2, #0
 800b39c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	785b      	ldrb	r3, [r3, #1]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d126      	bne.n	800b3fa <HAL_PCD_EP_DB_Transmit+0x156>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	623b      	str	r3, [r7, #32]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	623b      	str	r3, [r7, #32]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	00da      	lsls	r2, r3, #3
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b3d2:	61fb      	str	r3, [r7, #28]
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	801a      	strh	r2, [r3, #0]
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	801a      	strh	r2, [r3, #0]
 800b3f8:	e017      	b.n	800b42a <HAL_PCD_EP_DB_Transmit+0x186>
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	785b      	ldrb	r3, [r3, #1]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d113      	bne.n	800b42a <HAL_PCD_EP_DB_Transmit+0x186>
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	461a      	mov	r2, r3
 800b40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b410:	4413      	add	r3, r2
 800b412:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	00da      	lsls	r2, r3, #3
 800b41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41c:	4413      	add	r3, r2
 800b41e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b422:	627b      	str	r3, [r7, #36]	@ 0x24
 800b424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b426:	2200      	movs	r2, #0
 800b428:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	78db      	ldrb	r3, [r3, #3]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d123      	bne.n	800b47a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	b29b      	uxth	r3, r3
 800b444:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b44c:	837b      	strh	r3, [r7, #26]
 800b44e:	8b7b      	ldrh	r3, [r7, #26]
 800b450:	f083 0320 	eor.w	r3, r3, #32
 800b454:	837b      	strh	r3, [r7, #26]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	461a      	mov	r2, r3
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	441a      	add	r2, r3
 800b464:	8b7b      	ldrh	r3, [r7, #26]
 800b466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b46a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b46e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b476:	b29b      	uxth	r3, r3
 800b478:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	4619      	mov	r1, r3
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f00d fd4e 	bl	8018f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d01f      	beq.n	800b4d0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	461a      	mov	r2, r3
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4aa:	833b      	strh	r3, [r7, #24]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	441a      	add	r2, r3
 800b4ba:	8b3b      	ldrh	r3, [r7, #24]
 800b4bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b4c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	e31f      	b.n	800bb14 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b4d4:	88fb      	ldrh	r3, [r7, #6]
 800b4d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d021      	beq.n	800b522 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	881b      	ldrh	r3, [r3, #0]
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	461a      	mov	r2, r3
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	441a      	add	r2, r3
 800b50a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b50e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b51e:	b29b      	uxth	r3, r3
 800b520:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b528:	2b01      	cmp	r3, #1
 800b52a:	f040 82ca 	bne.w	800bac2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	695a      	ldr	r2, [r3, #20]
 800b532:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b536:	441a      	add	r2, r3
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	69da      	ldr	r2, [r3, #28]
 800b540:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b544:	441a      	add	r2, r3
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	6a1a      	ldr	r2, [r3, #32]
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	429a      	cmp	r2, r3
 800b554:	d309      	bcc.n	800b56a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	6a1a      	ldr	r2, [r3, #32]
 800b560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b562:	1ad2      	subs	r2, r2, r3
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	621a      	str	r2, [r3, #32]
 800b568:	e015      	b.n	800b596 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d107      	bne.n	800b582 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b572:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b576:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b580:	e009      	b.n	800b596 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2200      	movs	r2, #0
 800b594:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	785b      	ldrb	r3, [r3, #1]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d15f      	bne.n	800b65e <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5b2:	4413      	add	r3, r2
 800b5b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	00da      	lsls	r2, r3, #3
 800b5bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5be:	4413      	add	r3, r2
 800b5c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5d4:	801a      	strh	r2, [r3, #0]
 800b5d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <HAL_PCD_EP_DB_Transmit+0x34e>
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ee:	801a      	strh	r2, [r3, #0]
 800b5f0:	e051      	b.n	800b696 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b5f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5f6:	d816      	bhi.n	800b626 <HAL_PCD_EP_DB_Transmit+0x382>
 800b5f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5fa:	085b      	lsrs	r3, r3, #1
 800b5fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b600:	f003 0301 	and.w	r3, r3, #1
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <HAL_PCD_EP_DB_Transmit+0x36a>
 800b608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b60a:	3301      	adds	r3, #1
 800b60c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	b29a      	uxth	r2, r3
 800b614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b616:	b29b      	uxth	r3, r3
 800b618:	029b      	lsls	r3, r3, #10
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	4313      	orrs	r3, r2
 800b61e:	b29a      	uxth	r2, r3
 800b620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b622:	801a      	strh	r2, [r3, #0]
 800b624:	e037      	b.n	800b696 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b628:	095b      	lsrs	r3, r3, #5
 800b62a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b62c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b62e:	f003 031f 	and.w	r3, r3, #31
 800b632:	2b00      	cmp	r3, #0
 800b634:	d102      	bne.n	800b63c <HAL_PCD_EP_DB_Transmit+0x398>
 800b636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b638:	3b01      	subs	r3, #1
 800b63a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	b29a      	uxth	r2, r3
 800b642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b644:	b29b      	uxth	r3, r3
 800b646:	029b      	lsls	r3, r3, #10
 800b648:	b29b      	uxth	r3, r3
 800b64a:	4313      	orrs	r3, r2
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b656:	b29a      	uxth	r2, r3
 800b658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b65a:	801a      	strh	r2, [r3, #0]
 800b65c:	e01b      	b.n	800b696 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	785b      	ldrb	r3, [r3, #1]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d117      	bne.n	800b696 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b674:	b29b      	uxth	r3, r3
 800b676:	461a      	mov	r2, r3
 800b678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b67a:	4413      	add	r3, r2
 800b67c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	00da      	lsls	r2, r3, #3
 800b684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b686:	4413      	add	r3, r2
 800b688:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b68c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b68e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b690:	b29a      	uxth	r2, r3
 800b692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b694:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	6959      	ldr	r1, [r3, #20]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	891a      	ldrh	r2, [r3, #8]
 800b6a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	f007 fc44 	bl	8012f32 <USB_WritePMA>
 800b6aa:	e20a      	b.n	800bac2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	4413      	add	r3, r2
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	6812      	ldr	r2, [r2, #0]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6d0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	699a      	ldr	r2, [r3, #24]
 800b6d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d307      	bcc.n	800b6f0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	699a      	ldr	r2, [r3, #24]
 800b6e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b6e8:	1ad2      	subs	r2, r2, r3
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	619a      	str	r2, [r3, #24]
 800b6ee:	e002      	b.n	800b6f6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f040 80f6 	bne.w	800b8ec <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	785b      	ldrb	r3, [r3, #1]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d126      	bne.n	800b756 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	677b      	str	r3, [r7, #116]	@ 0x74
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b716:	b29b      	uxth	r3, r3
 800b718:	461a      	mov	r2, r3
 800b71a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b71c:	4413      	add	r3, r2
 800b71e:	677b      	str	r3, [r7, #116]	@ 0x74
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	00da      	lsls	r2, r3, #3
 800b726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b728:	4413      	add	r3, r2
 800b72a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b72e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b730:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	b29b      	uxth	r3, r3
 800b736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b73e:	801a      	strh	r2, [r3, #0]
 800b740:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b742:	881b      	ldrh	r3, [r3, #0]
 800b744:	b29b      	uxth	r3, r3
 800b746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b74e:	b29a      	uxth	r2, r3
 800b750:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b752:	801a      	strh	r2, [r3, #0]
 800b754:	e01a      	b.n	800b78c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	785b      	ldrb	r3, [r3, #1]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d116      	bne.n	800b78c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	461a      	mov	r2, r3
 800b770:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b772:	4413      	add	r3, r2
 800b774:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	00da      	lsls	r2, r3, #3
 800b77c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b77e:	4413      	add	r3, r2
 800b780:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b784:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b788:	2200      	movs	r2, #0
 800b78a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	785b      	ldrb	r3, [r3, #1]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d12f      	bne.n	800b7fc <HAL_PCD_EP_DB_Transmit+0x558>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	00da      	lsls	r2, r3, #3
 800b7c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b7ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b7e0:	801a      	strh	r2, [r3, #0]
 800b7e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b7f8:	801a      	strh	r2, [r3, #0]
 800b7fa:	e01c      	b.n	800b836 <HAL_PCD_EP_DB_Transmit+0x592>
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	785b      	ldrb	r3, [r3, #1]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d118      	bne.n	800b836 <HAL_PCD_EP_DB_Transmit+0x592>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	461a      	mov	r2, r3
 800b810:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b814:	4413      	add	r3, r2
 800b816:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	00da      	lsls	r2, r3, #3
 800b820:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b824:	4413      	add	r3, r2
 800b826:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b82a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b82e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b832:	2200      	movs	r2, #0
 800b834:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	78db      	ldrb	r3, [r3, #3]
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d127      	bne.n	800b88e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	4413      	add	r3, r2
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b858:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b85c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b860:	f083 0320 	eor.w	r3, r3, #32
 800b864:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	461a      	mov	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	441a      	add	r2, r3
 800b876:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b87a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b87e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	4619      	mov	r1, r3
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f00d fb44 	bl	8018f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b89a:	88fb      	ldrh	r3, [r7, #6]
 800b89c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d121      	bne.n	800b8e8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8be:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	441a      	add	r2, r3
 800b8d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b8d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b8e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e113      	b.n	800bb14 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b8ec:	88fb      	ldrh	r3, [r7, #6]
 800b8ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d121      	bne.n	800b93a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	b29b      	uxth	r3, r3
 800b908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b90c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b910:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	461a      	mov	r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	441a      	add	r2, r3
 800b922:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b92a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b92e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b936:	b29b      	uxth	r3, r3
 800b938:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b940:	2b01      	cmp	r3, #1
 800b942:	f040 80be 	bne.w	800bac2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	695a      	ldr	r2, [r3, #20]
 800b94a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b94e:	441a      	add	r2, r3
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	69da      	ldr	r2, [r3, #28]
 800b958:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b95c:	441a      	add	r2, r3
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	6a1a      	ldr	r2, [r3, #32]
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d309      	bcc.n	800b982 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	6a1a      	ldr	r2, [r3, #32]
 800b978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b97a:	1ad2      	subs	r2, r2, r3
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	621a      	str	r2, [r3, #32]
 800b980:	e015      	b.n	800b9ae <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d107      	bne.n	800b99a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b98a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b98e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b998:	e009      	b.n	800b9ae <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	785b      	ldrb	r3, [r3, #1]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d15f      	bne.n	800ba7c <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9d0:	4413      	add	r3, r2
 800b9d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	00da      	lsls	r2, r3, #3
 800b9da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9dc:	4413      	add	r3, r2
 800b9de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b9e2:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9f2:	801a      	strh	r2, [r3, #0]
 800b9f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10a      	bne.n	800ba10 <HAL_PCD_EP_DB_Transmit+0x76c>
 800b9fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba0c:	801a      	strh	r2, [r3, #0]
 800ba0e:	e04e      	b.n	800baae <HAL_PCD_EP_DB_Transmit+0x80a>
 800ba10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba12:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba14:	d816      	bhi.n	800ba44 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800ba16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba18:	085b      	lsrs	r3, r3, #1
 800ba1a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <HAL_PCD_EP_DB_Transmit+0x788>
 800ba26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba28:	3301      	adds	r3, #1
 800ba2a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	029b      	lsls	r3, r3, #10
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba40:	801a      	strh	r2, [r3, #0]
 800ba42:	e034      	b.n	800baae <HAL_PCD_EP_DB_Transmit+0x80a>
 800ba44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba46:	095b      	lsrs	r3, r3, #5
 800ba48:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba4c:	f003 031f 	and.w	r3, r3, #31
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d102      	bne.n	800ba5a <HAL_PCD_EP_DB_Transmit+0x7b6>
 800ba54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba56:	3b01      	subs	r3, #1
 800ba58:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	029b      	lsls	r3, r3, #10
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba78:	801a      	strh	r2, [r3, #0]
 800ba7a:	e018      	b.n	800baae <HAL_PCD_EP_DB_Transmit+0x80a>
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	785b      	ldrb	r3, [r3, #1]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d114      	bne.n	800baae <HAL_PCD_EP_DB_Transmit+0x80a>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba92:	4413      	add	r3, r2
 800ba94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	00da      	lsls	r2, r3, #3
 800ba9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba9e:	4413      	add	r3, r2
 800baa0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800baa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800baa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	6959      	ldr	r1, [r3, #20]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	895a      	ldrh	r2, [r3, #10]
 800baba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800babc:	b29b      	uxth	r3, r3
 800babe:	f007 fa38 	bl	8012f32 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	461a      	mov	r2, r3
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	881b      	ldrh	r3, [r3, #0]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800badc:	82fb      	strh	r3, [r7, #22]
 800bade:	8afb      	ldrh	r3, [r7, #22]
 800bae0:	f083 0310 	eor.w	r3, r3, #16
 800bae4:	82fb      	strh	r3, [r7, #22]
 800bae6:	8afb      	ldrh	r3, [r7, #22]
 800bae8:	f083 0320 	eor.w	r3, r3, #32
 800baec:	82fb      	strh	r3, [r7, #22]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	441a      	add	r2, r3
 800bafc:	8afb      	ldrh	r3, [r7, #22]
 800bafe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3798      	adds	r7, #152	@ 0x98
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	607b      	str	r3, [r7, #4]
 800bb26:	460b      	mov	r3, r1
 800bb28:	817b      	strh	r3, [r7, #10]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800bb2e:	897b      	ldrh	r3, [r7, #10]
 800bb30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00b      	beq.n	800bb52 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb3a:	897b      	ldrh	r3, [r7, #10]
 800bb3c:	f003 0207 	and.w	r2, r3, #7
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	00db      	lsls	r3, r3, #3
 800bb48:	3310      	adds	r3, #16
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	617b      	str	r3, [r7, #20]
 800bb50:	e009      	b.n	800bb66 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bb52:	897a      	ldrh	r2, [r7, #10]
 800bb54:	4613      	mov	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	00db      	lsls	r3, r3, #3
 800bb5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4413      	add	r3, r2
 800bb64:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bb66:	893b      	ldrh	r3, [r7, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d107      	bne.n	800bb7c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	80da      	strh	r2, [r3, #6]
 800bb7a:	e00b      	b.n	800bb94 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	0c1b      	lsrs	r3, r3, #16
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b085      	sub	sp, #20
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	f043 0301 	orr.w	r3, r3, #1
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	f043 0302 	orr.w	r3, r3, #2
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
	...

0800bbf8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbfc:	4b05      	ldr	r3, [pc, #20]	@ (800bc14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a04      	ldr	r2, [pc, #16]	@ (800bc14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bc02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc06:	6013      	str	r3, [r2, #0]
}
 800bc08:	bf00      	nop
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	58000400 	.word	0x58000400

0800bc18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800bc1c:	4b04      	ldr	r3, [pc, #16]	@ (800bc30 <HAL_PWREx_GetVoltageRange+0x18>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	58000400 	.word	0x58000400

0800bc34 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bc34:	b480      	push	{r7}
 800bc36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bc38:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	4a04      	ldr	r2, [pc, #16]	@ (800bc50 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bc3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bc42:	6053      	str	r3, [r2, #4]
}
 800bc44:	bf00      	nop
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	58000400 	.word	0x58000400

0800bc54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bc58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc66:	d101      	bne.n	800bc6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e000      	b.n	800bc6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <LL_RCC_HSE_Enable>:
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bc7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc8a:	6013      	str	r3, [r2, #0]
}
 800bc8c:	bf00      	nop
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <LL_RCC_HSE_Disable>:
{
 800bc96:	b480      	push	{r7}
 800bc98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bc9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bca8:	6013      	str	r3, [r2, #0]
}
 800bcaa:	bf00      	nop
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <LL_RCC_HSE_IsReady>:
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bcb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bcc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcc6:	d101      	bne.n	800bccc <LL_RCC_HSE_IsReady+0x18>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e000      	b.n	800bcce <LL_RCC_HSE_IsReady+0x1a>
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <LL_RCC_HSI_Enable>:
{
 800bcd8:	b480      	push	{r7}
 800bcda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800bcdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcea:	6013      	str	r3, [r2, #0]
}
 800bcec:	bf00      	nop
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <LL_RCC_HSI_Disable>:
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800bcfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd08:	6013      	str	r3, [r2, #0]
}
 800bd0a:	bf00      	nop
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <LL_RCC_HSI_IsReady>:
{
 800bd14:	b480      	push	{r7}
 800bd16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd26:	d101      	bne.n	800bd2c <LL_RCC_HSI_IsReady+0x18>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e000      	b.n	800bd2e <LL_RCC_HSI_IsReady+0x1a>
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <LL_RCC_HSI_SetCalibTrimming>:
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800bd40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	061b      	lsls	r3, r3, #24
 800bd4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd52:	4313      	orrs	r3, r2
 800bd54:	604b      	str	r3, [r1, #4]
}
 800bd56:	bf00      	nop
 800bd58:	370c      	adds	r7, #12
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <LL_RCC_HSI48_Enable>:
{
 800bd62:	b480      	push	{r7}
 800bd64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bd66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd72:	f043 0301 	orr.w	r3, r3, #1
 800bd76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bd7a:	bf00      	nop
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <LL_RCC_HSI48_Disable>:
{
 800bd84:	b480      	push	{r7}
 800bd86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bd88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd94:	f023 0301 	bic.w	r3, r3, #1
 800bd98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bd9c:	bf00      	nop
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr

0800bda6 <LL_RCC_HSI48_IsReady>:
{
 800bda6:	b480      	push	{r7}
 800bda8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800bdaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdb2:	f003 0302 	and.w	r3, r3, #2
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d101      	bne.n	800bdbe <LL_RCC_HSI48_IsReady+0x18>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <LL_RCC_HSI48_IsReady+0x1a>
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <LL_RCC_LSE_Enable>:
{
 800bdca:	b480      	push	{r7}
 800bdcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bdce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdda:	f043 0301 	orr.w	r3, r3, #1
 800bdde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bde2:	bf00      	nop
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <LL_RCC_LSE_Disable>:
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bdf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdfc:	f023 0301 	bic.w	r3, r3, #1
 800be00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800be04:	bf00      	nop
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <LL_RCC_LSE_EnableBypass>:
{
 800be0e:	b480      	push	{r7}
 800be10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800be12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be1e:	f043 0304 	orr.w	r3, r3, #4
 800be22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800be26:	bf00      	nop
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <LL_RCC_LSE_DisableBypass>:
{
 800be30:	b480      	push	{r7}
 800be32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800be34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be40:	f023 0304 	bic.w	r3, r3, #4
 800be44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800be48:	bf00      	nop
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <LL_RCC_LSE_IsReady>:
{
 800be52:	b480      	push	{r7}
 800be54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800be56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be5e:	f003 0302 	and.w	r3, r3, #2
 800be62:	2b02      	cmp	r3, #2
 800be64:	d101      	bne.n	800be6a <LL_RCC_LSE_IsReady+0x18>
 800be66:	2301      	movs	r3, #1
 800be68:	e000      	b.n	800be6c <LL_RCC_LSE_IsReady+0x1a>
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <LL_RCC_LSI1_Enable>:
{
 800be76:	b480      	push	{r7}
 800be78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800be7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be86:	f043 0301 	orr.w	r3, r3, #1
 800be8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800be8e:	bf00      	nop
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <LL_RCC_LSI1_Disable>:
{
 800be98:	b480      	push	{r7}
 800be9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800be9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bea4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bea8:	f023 0301 	bic.w	r3, r3, #1
 800beac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800beb0:	bf00      	nop
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <LL_RCC_LSI1_IsReady>:
{
 800beba:	b480      	push	{r7}
 800bebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800bebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bec6:	f003 0302 	and.w	r3, r3, #2
 800beca:	2b02      	cmp	r3, #2
 800becc:	d101      	bne.n	800bed2 <LL_RCC_LSI1_IsReady+0x18>
 800bece:	2301      	movs	r3, #1
 800bed0:	e000      	b.n	800bed4 <LL_RCC_LSI1_IsReady+0x1a>
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <LL_RCC_LSI2_Enable>:
{
 800bede:	b480      	push	{r7}
 800bee0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800beea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800beee:	f043 0304 	orr.w	r3, r3, #4
 800bef2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bef6:	bf00      	nop
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <LL_RCC_LSI2_Disable>:
{
 800bf00:	b480      	push	{r7}
 800bf02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bf04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf10:	f023 0304 	bic.w	r3, r3, #4
 800bf14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bf18:	bf00      	nop
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <LL_RCC_LSI2_IsReady>:
{
 800bf22:	b480      	push	{r7}
 800bf24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800bf26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf2e:	f003 0308 	and.w	r3, r3, #8
 800bf32:	2b08      	cmp	r3, #8
 800bf34:	d101      	bne.n	800bf3a <LL_RCC_LSI2_IsReady+0x18>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e000      	b.n	800bf3c <LL_RCC_LSI2_IsReady+0x1a>
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <LL_RCC_LSI2_SetTrimming>:
{
 800bf46:	b480      	push	{r7}
 800bf48:	b083      	sub	sp, #12
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800bf4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	021b      	lsls	r3, r3, #8
 800bf5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf62:	4313      	orrs	r3, r2
 800bf64:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <LL_RCC_MSI_Enable>:
{
 800bf74:	b480      	push	{r7}
 800bf76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bf78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf82:	f043 0301 	orr.w	r3, r3, #1
 800bf86:	6013      	str	r3, [r2, #0]
}
 800bf88:	bf00      	nop
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <LL_RCC_MSI_Disable>:
{
 800bf92:	b480      	push	{r7}
 800bf94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800bf96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bfa0:	f023 0301 	bic.w	r3, r3, #1
 800bfa4:	6013      	str	r3, [r2, #0]
}
 800bfa6:	bf00      	nop
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <LL_RCC_MSI_IsReady>:
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800bfb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 0302 	and.w	r3, r3, #2
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d101      	bne.n	800bfc6 <LL_RCC_MSI_IsReady+0x16>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e000      	b.n	800bfc8 <LL_RCC_MSI_IsReady+0x18>
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <LL_RCC_MSI_SetRange>:
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b083      	sub	sp, #12
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bfda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bfe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	600b      	str	r3, [r1, #0]
}
 800bfee:	bf00      	nop
 800bff0:	370c      	adds	r7, #12
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <LL_RCC_MSI_GetRange>:
{
 800bffa:	b480      	push	{r7}
 800bffc:	b083      	sub	sp, #12
 800bffe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c00a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2bb0      	cmp	r3, #176	@ 0xb0
 800c010:	d901      	bls.n	800c016 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800c012:	23b0      	movs	r3, #176	@ 0xb0
 800c014:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c016:	687b      	ldr	r3, [r7, #4]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c02c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	021b      	lsls	r3, r3, #8
 800c03a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c03e:	4313      	orrs	r3, r2
 800c040:	604b      	str	r3, [r1, #4]
}
 800c042:	bf00      	nop
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <LL_RCC_SetSysClkSource>:
{
 800c04e:	b480      	push	{r7}
 800c050:	b083      	sub	sp, #12
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f023 0203 	bic.w	r2, r3, #3
 800c060:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4313      	orrs	r3, r2
 800c068:	608b      	str	r3, [r1, #8]
}
 800c06a:	bf00      	nop
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <LL_RCC_GetSysClkSource>:
{
 800c076:	b480      	push	{r7}
 800c078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c07a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	f003 030c 	and.w	r3, r3, #12
}
 800c084:	4618      	mov	r0, r3
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <LL_RCC_SetAHBPrescaler>:
{
 800c08e:	b480      	push	{r7}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c0a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	608b      	str	r3, [r1, #8]
}
 800c0aa:	bf00      	nop
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b083      	sub	sp, #12
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c0be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c0c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c0ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c0d6:	bf00      	nop
 800c0d8:	370c      	adds	r7, #12
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <LL_RCC_SetAHB4Prescaler>:
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b083      	sub	sp, #12
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c0ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c0f2:	f023 020f 	bic.w	r2, r3, #15
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	091b      	lsrs	r3, r3, #4
 800c0fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0fe:	4313      	orrs	r3, r2
 800c100:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <LL_RCC_SetAPB1Prescaler>:
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c122:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4313      	orrs	r3, r2
 800c12a:	608b      	str	r3, [r1, #8]
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <LL_RCC_SetAPB2Prescaler>:
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c14a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4313      	orrs	r3, r2
 800c152:	608b      	str	r3, [r1, #8]
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <LL_RCC_GetAHBPrescaler>:
{
 800c160:	b480      	push	{r7}
 800c162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <LL_RCC_GetAHB4Prescaler>:
{
 800c178:	b480      	push	{r7}
 800c17a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c17c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c180:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c184:	011b      	lsls	r3, r3, #4
 800c186:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <LL_RCC_GetAPB1Prescaler>:
{
 800c194:	b480      	push	{r7}
 800c196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <LL_RCC_GetAPB2Prescaler>:
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c1b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c1c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c1d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c1d6:	6013      	str	r3, [r2, #0]
}
 800c1d8:	bf00      	nop
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c1e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c1f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c1f4:	6013      	str	r3, [r2, #0]
}
 800c1f6:	bf00      	nop
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c200:	b480      	push	{r7}
 800c202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c20e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c212:	d101      	bne.n	800c218 <LL_RCC_PLL_IsReady+0x18>
 800c214:	2301      	movs	r3, #1
 800c216:	e000      	b.n	800c21a <LL_RCC_PLL_IsReady+0x1a>
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c224:	b480      	push	{r7}
 800c226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	0a1b      	lsrs	r3, r3, #8
 800c230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800c234:	4618      	mov	r0, r3
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c23e:	b480      	push	{r7}
 800c240:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c256:	b480      	push	{r7}
 800c258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c25a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c264:	4618      	mov	r0, r3
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c26e:	b480      	push	{r7}
 800c270:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	f003 0303 	and.w	r3, r3, #3
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c286:	b480      	push	{r7}
 800c288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c28a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c298:	d101      	bne.n	800c29e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c29a:	2301      	movs	r3, #1
 800c29c:	e000      	b.n	800c2a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c2aa:	b480      	push	{r7}
 800c2ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c2ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c2b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2be:	d101      	bne.n	800c2c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e000      	b.n	800c2c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c2d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c2dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c2e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2e4:	d101      	bne.n	800c2ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e000      	b.n	800c2ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c2fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c308:	d101      	bne.n	800c30e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e000      	b.n	800c310 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c31a:	b480      	push	{r7}
 800c31c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c31e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c328:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c32c:	d101      	bne.n	800c332 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c32e:	2301      	movs	r3, #1
 800c330:	e000      	b.n	800c334 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
	...

0800c340 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c340:	b590      	push	{r4, r7, lr}
 800c342:	b08d      	sub	sp, #52	@ 0x34
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	e363      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 0320 	and.w	r3, r3, #32
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 808d 	beq.w	800c47a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c360:	f7ff fe89 	bl	800c076 <LL_RCC_GetSysClkSource>
 800c364:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c366:	f7ff ff82 	bl	800c26e <LL_RCC_PLL_GetMainSource>
 800c36a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d005      	beq.n	800c37e <HAL_RCC_OscConfig+0x3e>
 800c372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c374:	2b0c      	cmp	r3, #12
 800c376:	d147      	bne.n	800c408 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d144      	bne.n	800c408 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	69db      	ldr	r3, [r3, #28]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e347      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c38e:	f7ff fe34 	bl	800bffa <LL_RCC_MSI_GetRange>
 800c392:	4603      	mov	r3, r0
 800c394:	429c      	cmp	r4, r3
 800c396:	d914      	bls.n	800c3c2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 fd2f 	bl	800ce00 <RCC_SetFlashLatencyFromMSIRange>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d001      	beq.n	800c3ac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e336      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7ff fe0e 	bl	800bfd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7ff fe32 	bl	800c024 <LL_RCC_MSI_SetCalibTrimming>
 800c3c0:	e013      	b.n	800c3ea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff fe03 	bl	800bfd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a1b      	ldr	r3, [r3, #32]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff fe27 	bl	800c024 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 fd10 	bl	800ce00 <RCC_SetFlashLatencyFromMSIRange>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e317      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c3ea:	f000 fcc9 	bl	800cd80 <HAL_RCC_GetHCLKFreq>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	4aa4      	ldr	r2, [pc, #656]	@ (800c684 <HAL_RCC_OscConfig+0x344>)
 800c3f2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c3f4:	4ba4      	ldr	r3, [pc, #656]	@ (800c688 <HAL_RCC_OscConfig+0x348>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7fb f84b 	bl	8007494 <HAL_InitTick>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d039      	beq.n	800c478 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	e308      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	69db      	ldr	r3, [r3, #28]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d01e      	beq.n	800c44e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c410:	f7ff fdb0 	bl	800bf74 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c414:	f7fb f88c 	bl	8007530 <HAL_GetTick>
 800c418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c41a:	e008      	b.n	800c42e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c41c:	f7fb f888 	bl	8007530 <HAL_GetTick>
 800c420:	4602      	mov	r2, r0
 800c422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	2b02      	cmp	r3, #2
 800c428:	d901      	bls.n	800c42e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c42a:	2303      	movs	r3, #3
 800c42c:	e2f5      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c42e:	f7ff fdbf 	bl	800bfb0 <LL_RCC_MSI_IsReady>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d0f1      	beq.n	800c41c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff fdc8 	bl	800bfd2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fdec 	bl	800c024 <LL_RCC_MSI_SetCalibTrimming>
 800c44c:	e015      	b.n	800c47a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c44e:	f7ff fda0 	bl	800bf92 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c452:	f7fb f86d 	bl	8007530 <HAL_GetTick>
 800c456:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c458:	e008      	b.n	800c46c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c45a:	f7fb f869 	bl	8007530 <HAL_GetTick>
 800c45e:	4602      	mov	r2, r0
 800c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	2b02      	cmp	r3, #2
 800c466:	d901      	bls.n	800c46c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	e2d6      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c46c:	f7ff fda0 	bl	800bfb0 <LL_RCC_MSI_IsReady>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1f1      	bne.n	800c45a <HAL_RCC_OscConfig+0x11a>
 800c476:	e000      	b.n	800c47a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c478:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 0301 	and.w	r3, r3, #1
 800c482:	2b00      	cmp	r3, #0
 800c484:	d047      	beq.n	800c516 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c486:	f7ff fdf6 	bl	800c076 <LL_RCC_GetSysClkSource>
 800c48a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c48c:	f7ff feef 	bl	800c26e <LL_RCC_PLL_GetMainSource>
 800c490:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	2b08      	cmp	r3, #8
 800c496:	d005      	beq.n	800c4a4 <HAL_RCC_OscConfig+0x164>
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	2b0c      	cmp	r3, #12
 800c49c:	d108      	bne.n	800c4b0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d105      	bne.n	800c4b0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d134      	bne.n	800c516 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e2b4      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4b8:	d102      	bne.n	800c4c0 <HAL_RCC_OscConfig+0x180>
 800c4ba:	f7ff fbdd 	bl	800bc78 <LL_RCC_HSE_Enable>
 800c4be:	e001      	b.n	800c4c4 <HAL_RCC_OscConfig+0x184>
 800c4c0:	f7ff fbe9 	bl	800bc96 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d012      	beq.n	800c4f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4cc:	f7fb f830 	bl	8007530 <HAL_GetTick>
 800c4d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c4d2:	e008      	b.n	800c4e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4d4:	f7fb f82c 	bl	8007530 <HAL_GetTick>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	2b64      	cmp	r3, #100	@ 0x64
 800c4e0:	d901      	bls.n	800c4e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e299      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c4e6:	f7ff fbe5 	bl	800bcb4 <LL_RCC_HSE_IsReady>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d0f1      	beq.n	800c4d4 <HAL_RCC_OscConfig+0x194>
 800c4f0:	e011      	b.n	800c516 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4f2:	f7fb f81d 	bl	8007530 <HAL_GetTick>
 800c4f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c4f8:	e008      	b.n	800c50c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4fa:	f7fb f819 	bl	8007530 <HAL_GetTick>
 800c4fe:	4602      	mov	r2, r0
 800c500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	2b64      	cmp	r3, #100	@ 0x64
 800c506:	d901      	bls.n	800c50c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	e286      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c50c:	f7ff fbd2 	bl	800bcb4 <LL_RCC_HSE_IsReady>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1f1      	bne.n	800c4fa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 0302 	and.w	r3, r3, #2
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d04c      	beq.n	800c5bc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c522:	f7ff fda8 	bl	800c076 <LL_RCC_GetSysClkSource>
 800c526:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c528:	f7ff fea1 	bl	800c26e <LL_RCC_PLL_GetMainSource>
 800c52c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d005      	beq.n	800c540 <HAL_RCC_OscConfig+0x200>
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	2b0c      	cmp	r3, #12
 800c538:	d10e      	bne.n	800c558 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d10b      	bne.n	800c558 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	e266      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	4618      	mov	r0, r3
 800c552:	f7ff fbf1 	bl	800bd38 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c556:	e031      	b.n	800c5bc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d019      	beq.n	800c594 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c560:	f7ff fbba 	bl	800bcd8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c564:	f7fa ffe4 	bl	8007530 <HAL_GetTick>
 800c568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c56a:	e008      	b.n	800c57e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c56c:	f7fa ffe0 	bl	8007530 <HAL_GetTick>
 800c570:	4602      	mov	r2, r0
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	2b02      	cmp	r3, #2
 800c578:	d901      	bls.n	800c57e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e24d      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c57e:	f7ff fbc9 	bl	800bd14 <LL_RCC_HSI_IsReady>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d0f1      	beq.n	800c56c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff fbd3 	bl	800bd38 <LL_RCC_HSI_SetCalibTrimming>
 800c592:	e013      	b.n	800c5bc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c594:	f7ff fbaf 	bl	800bcf6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c598:	f7fa ffca 	bl	8007530 <HAL_GetTick>
 800c59c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c59e:	e008      	b.n	800c5b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5a0:	f7fa ffc6 	bl	8007530 <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d901      	bls.n	800c5b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	e233      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c5b2:	f7ff fbaf 	bl	800bd14 <LL_RCC_HSI_IsReady>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1f1      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 0308 	and.w	r3, r3, #8
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d106      	bne.n	800c5d6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 80a3 	beq.w	800c71c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d076      	beq.n	800c6cc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 0310 	and.w	r3, r3, #16
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d046      	beq.n	800c678 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c5ea:	f7ff fc66 	bl	800beba <LL_RCC_LSI1_IsReady>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d113      	bne.n	800c61c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c5f4:	f7ff fc3f 	bl	800be76 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c5f8:	f7fa ff9a 	bl	8007530 <HAL_GetTick>
 800c5fc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c5fe:	e008      	b.n	800c612 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c600:	f7fa ff96 	bl	8007530 <HAL_GetTick>
 800c604:	4602      	mov	r2, r0
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d901      	bls.n	800c612 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c60e:	2303      	movs	r3, #3
 800c610:	e203      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c612:	f7ff fc52 	bl	800beba <LL_RCC_LSI1_IsReady>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0f1      	beq.n	800c600 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c61c:	f7ff fc5f 	bl	800bede <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c620:	f7fa ff86 	bl	8007530 <HAL_GetTick>
 800c624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c626:	e008      	b.n	800c63a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c628:	f7fa ff82 	bl	8007530 <HAL_GetTick>
 800c62c:	4602      	mov	r2, r0
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	2b03      	cmp	r3, #3
 800c634:	d901      	bls.n	800c63a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c636:	2303      	movs	r3, #3
 800c638:	e1ef      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c63a:	f7ff fc72 	bl	800bf22 <LL_RCC_LSI2_IsReady>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d0f1      	beq.n	800c628 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff fc7c 	bl	800bf46 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c64e:	f7ff fc23 	bl	800be98 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c652:	f7fa ff6d 	bl	8007530 <HAL_GetTick>
 800c656:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c658:	e008      	b.n	800c66c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c65a:	f7fa ff69 	bl	8007530 <HAL_GetTick>
 800c65e:	4602      	mov	r2, r0
 800c660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	2b02      	cmp	r3, #2
 800c666:	d901      	bls.n	800c66c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c668:	2303      	movs	r3, #3
 800c66a:	e1d6      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c66c:	f7ff fc25 	bl	800beba <LL_RCC_LSI1_IsReady>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1f1      	bne.n	800c65a <HAL_RCC_OscConfig+0x31a>
 800c676:	e051      	b.n	800c71c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c678:	f7ff fbfd 	bl	800be76 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c67c:	f7fa ff58 	bl	8007530 <HAL_GetTick>
 800c680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c682:	e00c      	b.n	800c69e <HAL_RCC_OscConfig+0x35e>
 800c684:	2000002c 	.word	0x2000002c
 800c688:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c68c:	f7fa ff50 	bl	8007530 <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	2b02      	cmp	r3, #2
 800c698:	d901      	bls.n	800c69e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e1bd      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c69e:	f7ff fc0c 	bl	800beba <LL_RCC_LSI1_IsReady>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d0f1      	beq.n	800c68c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c6a8:	f7ff fc2a 	bl	800bf00 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c6ac:	e008      	b.n	800c6c0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c6ae:	f7fa ff3f 	bl	8007530 <HAL_GetTick>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d901      	bls.n	800c6c0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e1ac      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c6c0:	f7ff fc2f 	bl	800bf22 <LL_RCC_LSI2_IsReady>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1f1      	bne.n	800c6ae <HAL_RCC_OscConfig+0x36e>
 800c6ca:	e027      	b.n	800c71c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c6cc:	f7ff fc18 	bl	800bf00 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6d0:	f7fa ff2e 	bl	8007530 <HAL_GetTick>
 800c6d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c6d6:	e008      	b.n	800c6ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c6d8:	f7fa ff2a 	bl	8007530 <HAL_GetTick>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	d901      	bls.n	800c6ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e197      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c6ea:	f7ff fc1a 	bl	800bf22 <LL_RCC_LSI2_IsReady>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1f1      	bne.n	800c6d8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c6f4:	f7ff fbd0 	bl	800be98 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6f8:	f7fa ff1a 	bl	8007530 <HAL_GetTick>
 800c6fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c6fe:	e008      	b.n	800c712 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c700:	f7fa ff16 	bl	8007530 <HAL_GetTick>
 800c704:	4602      	mov	r2, r0
 800c706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d901      	bls.n	800c712 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c70e:	2303      	movs	r3, #3
 800c710:	e183      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c712:	f7ff fbd2 	bl	800beba <LL_RCC_LSI1_IsReady>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1f1      	bne.n	800c700 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 0304 	and.w	r3, r3, #4
 800c724:	2b00      	cmp	r3, #0
 800c726:	d05b      	beq.n	800c7e0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c728:	4ba7      	ldr	r3, [pc, #668]	@ (800c9c8 <HAL_RCC_OscConfig+0x688>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c730:	2b00      	cmp	r3, #0
 800c732:	d114      	bne.n	800c75e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c734:	f7ff fa60 	bl	800bbf8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c738:	f7fa fefa 	bl	8007530 <HAL_GetTick>
 800c73c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c73e:	e008      	b.n	800c752 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c740:	f7fa fef6 	bl	8007530 <HAL_GetTick>
 800c744:	4602      	mov	r2, r0
 800c746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c748:	1ad3      	subs	r3, r2, r3
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d901      	bls.n	800c752 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e163      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c752:	4b9d      	ldr	r3, [pc, #628]	@ (800c9c8 <HAL_RCC_OscConfig+0x688>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0f0      	beq.n	800c740 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d102      	bne.n	800c76c <HAL_RCC_OscConfig+0x42c>
 800c766:	f7ff fb30 	bl	800bdca <LL_RCC_LSE_Enable>
 800c76a:	e00c      	b.n	800c786 <HAL_RCC_OscConfig+0x446>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	2b05      	cmp	r3, #5
 800c772:	d104      	bne.n	800c77e <HAL_RCC_OscConfig+0x43e>
 800c774:	f7ff fb4b 	bl	800be0e <LL_RCC_LSE_EnableBypass>
 800c778:	f7ff fb27 	bl	800bdca <LL_RCC_LSE_Enable>
 800c77c:	e003      	b.n	800c786 <HAL_RCC_OscConfig+0x446>
 800c77e:	f7ff fb35 	bl	800bdec <LL_RCC_LSE_Disable>
 800c782:	f7ff fb55 	bl	800be30 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d014      	beq.n	800c7b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c78e:	f7fa fecf 	bl	8007530 <HAL_GetTick>
 800c792:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c794:	e00a      	b.n	800c7ac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c796:	f7fa fecb 	bl	8007530 <HAL_GetTick>
 800c79a:	4602      	mov	r2, r0
 800c79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d901      	bls.n	800c7ac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e136      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c7ac:	f7ff fb51 	bl	800be52 <LL_RCC_LSE_IsReady>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d0ef      	beq.n	800c796 <HAL_RCC_OscConfig+0x456>
 800c7b6:	e013      	b.n	800c7e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7b8:	f7fa feba 	bl	8007530 <HAL_GetTick>
 800c7bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c7be:	e00a      	b.n	800c7d6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7c0:	f7fa feb6 	bl	8007530 <HAL_GetTick>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d901      	bls.n	800c7d6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	e121      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c7d6:	f7ff fb3c 	bl	800be52 <LL_RCC_LSE_IsReady>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1ef      	bne.n	800c7c0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d02c      	beq.n	800c846 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d014      	beq.n	800c81e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c7f4:	f7ff fab5 	bl	800bd62 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7f8:	f7fa fe9a 	bl	8007530 <HAL_GetTick>
 800c7fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c7fe:	e008      	b.n	800c812 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c800:	f7fa fe96 	bl	8007530 <HAL_GetTick>
 800c804:	4602      	mov	r2, r0
 800c806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	d901      	bls.n	800c812 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c80e:	2303      	movs	r3, #3
 800c810:	e103      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c812:	f7ff fac8 	bl	800bda6 <LL_RCC_HSI48_IsReady>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0f1      	beq.n	800c800 <HAL_RCC_OscConfig+0x4c0>
 800c81c:	e013      	b.n	800c846 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c81e:	f7ff fab1 	bl	800bd84 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c822:	f7fa fe85 	bl	8007530 <HAL_GetTick>
 800c826:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c828:	e008      	b.n	800c83c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c82a:	f7fa fe81 	bl	8007530 <HAL_GetTick>
 800c82e:	4602      	mov	r2, r0
 800c830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	2b02      	cmp	r3, #2
 800c836:	d901      	bls.n	800c83c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c838:	2303      	movs	r3, #3
 800c83a:	e0ee      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c83c:	f7ff fab3 	bl	800bda6 <LL_RCC_HSI48_IsReady>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1f1      	bne.n	800c82a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 80e4 	beq.w	800ca18 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c850:	f7ff fc11 	bl	800c076 <LL_RCC_GetSysClkSource>
 800c854:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c862:	2b02      	cmp	r3, #2
 800c864:	f040 80b4 	bne.w	800c9d0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f003 0203 	and.w	r2, r3, #3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c872:	429a      	cmp	r2, r3
 800c874:	d123      	bne.n	800c8be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c880:	429a      	cmp	r2, r3
 800c882:	d11c      	bne.n	800c8be <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	0a1b      	lsrs	r3, r3, #8
 800c888:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c890:	429a      	cmp	r2, r3
 800c892:	d114      	bne.n	800c8be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d10d      	bne.n	800c8be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d106      	bne.n	800c8be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d05d      	beq.n	800c97a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2b0c      	cmp	r3, #12
 800c8c2:	d058      	beq.n	800c976 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c8c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e0a1      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c8d6:	f7ff fc84 	bl	800c1e2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c8da:	f7fa fe29 	bl	8007530 <HAL_GetTick>
 800c8de:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8e0:	e008      	b.n	800c8f4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8e2:	f7fa fe25 	bl	8007530 <HAL_GetTick>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d901      	bls.n	800c8f4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	e092      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1ef      	bne.n	800c8e2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c906:	68da      	ldr	r2, [r3, #12]
 800c908:	4b30      	ldr	r3, [pc, #192]	@ (800c9cc <HAL_RCC_OscConfig+0x68c>)
 800c90a:	4013      	ands	r3, r2
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c914:	4311      	orrs	r1, r2
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c91a:	0212      	lsls	r2, r2, #8
 800c91c:	4311      	orrs	r1, r2
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c922:	4311      	orrs	r1, r2
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c928:	4311      	orrs	r1, r2
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c92e:	430a      	orrs	r2, r1
 800c930:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c934:	4313      	orrs	r3, r2
 800c936:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c938:	f7ff fc44 	bl	800c1c4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c93c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c94a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c94c:	f7fa fdf0 	bl	8007530 <HAL_GetTick>
 800c950:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c952:	e008      	b.n	800c966 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c954:	f7fa fdec 	bl	8007530 <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d901      	bls.n	800c966 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e059      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c970:	2b00      	cmp	r3, #0
 800c972:	d0ef      	beq.n	800c954 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c974:	e050      	b.n	800ca18 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	e04f      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c97a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c984:	2b00      	cmp	r3, #0
 800c986:	d147      	bne.n	800ca18 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c988:	f7ff fc1c 	bl	800c1c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c98c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c99a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c99c:	f7fa fdc8 	bl	8007530 <HAL_GetTick>
 800c9a0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c9a2:	e008      	b.n	800c9b6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9a4:	f7fa fdc4 	bl	8007530 <HAL_GetTick>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d901      	bls.n	800c9b6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e031      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c9b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d0ef      	beq.n	800c9a4 <HAL_RCC_OscConfig+0x664>
 800c9c4:	e028      	b.n	800ca18 <HAL_RCC_OscConfig+0x6d8>
 800c9c6:	bf00      	nop
 800c9c8:	58000400 	.word	0x58000400
 800c9cc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	2b0c      	cmp	r3, #12
 800c9d4:	d01e      	beq.n	800ca14 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9d6:	f7ff fc04 	bl	800c1e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9da:	f7fa fda9 	bl	8007530 <HAL_GetTick>
 800c9de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9e0:	e008      	b.n	800c9f4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9e2:	f7fa fda5 	bl	8007530 <HAL_GetTick>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d901      	bls.n	800c9f4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	e012      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1ef      	bne.n	800c9e2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800ca02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca06:	68da      	ldr	r2, [r3, #12]
 800ca08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca0c:	4b05      	ldr	r3, [pc, #20]	@ (800ca24 <HAL_RCC_OscConfig+0x6e4>)
 800ca0e:	4013      	ands	r3, r2
 800ca10:	60cb      	str	r3, [r1, #12]
 800ca12:	e001      	b.n	800ca18 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e000      	b.n	800ca1a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3734      	adds	r7, #52	@ 0x34
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd90      	pop	{r4, r7, pc}
 800ca22:	bf00      	nop
 800ca24:	eefefffc 	.word	0xeefefffc

0800ca28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d101      	bne.n	800ca3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e12d      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca3c:	4b98      	ldr	r3, [pc, #608]	@ (800cca0 <HAL_RCC_ClockConfig+0x278>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 0307 	and.w	r3, r3, #7
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d91b      	bls.n	800ca82 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca4a:	4b95      	ldr	r3, [pc, #596]	@ (800cca0 <HAL_RCC_ClockConfig+0x278>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f023 0207 	bic.w	r2, r3, #7
 800ca52:	4993      	ldr	r1, [pc, #588]	@ (800cca0 <HAL_RCC_ClockConfig+0x278>)
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca5a:	f7fa fd69 	bl	8007530 <HAL_GetTick>
 800ca5e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca60:	e008      	b.n	800ca74 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ca62:	f7fa fd65 	bl	8007530 <HAL_GetTick>
 800ca66:	4602      	mov	r2, r0
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d901      	bls.n	800ca74 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800ca70:	2303      	movs	r3, #3
 800ca72:	e111      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca74:	4b8a      	ldr	r3, [pc, #552]	@ (800cca0 <HAL_RCC_ClockConfig+0x278>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 0307 	and.w	r3, r3, #7
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d1ef      	bne.n	800ca62 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 0302 	and.w	r3, r3, #2
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d016      	beq.n	800cabc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff fafb 	bl	800c08e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca98:	f7fa fd4a 	bl	8007530 <HAL_GetTick>
 800ca9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ca9e:	e008      	b.n	800cab2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800caa0:	f7fa fd46 	bl	8007530 <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d901      	bls.n	800cab2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e0f2      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cab2:	f7ff fbe8 	bl	800c286 <LL_RCC_IsActiveFlag_HPRE>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d0f1      	beq.n	800caa0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f003 0320 	and.w	r3, r3, #32
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d016      	beq.n	800caf6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	695b      	ldr	r3, [r3, #20]
 800cacc:	4618      	mov	r0, r3
 800cace:	f7ff faf2 	bl	800c0b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cad2:	f7fa fd2d 	bl	8007530 <HAL_GetTick>
 800cad6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cad8:	e008      	b.n	800caec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cada:	f7fa fd29 	bl	8007530 <HAL_GetTick>
 800cade:	4602      	mov	r2, r0
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	1ad3      	subs	r3, r2, r3
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d901      	bls.n	800caec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800cae8:	2303      	movs	r3, #3
 800caea:	e0d5      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800caec:	f7ff fbdd 	bl	800c2aa <LL_RCC_IsActiveFlag_C2HPRE>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d0f1      	beq.n	800cada <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d016      	beq.n	800cb30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7ff faeb 	bl	800c0e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb0c:	f7fa fd10 	bl	8007530 <HAL_GetTick>
 800cb10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cb12:	e008      	b.n	800cb26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb14:	f7fa fd0c 	bl	8007530 <HAL_GetTick>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d901      	bls.n	800cb26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e0b8      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cb26:	f7ff fbd3 	bl	800c2d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d0f1      	beq.n	800cb14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 0304 	and.w	r3, r3, #4
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d016      	beq.n	800cb6a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7ff fae5 	bl	800c110 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb46:	f7fa fcf3 	bl	8007530 <HAL_GetTick>
 800cb4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cb4c:	e008      	b.n	800cb60 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb4e:	f7fa fcef 	bl	8007530 <HAL_GetTick>
 800cb52:	4602      	mov	r2, r0
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d901      	bls.n	800cb60 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	e09b      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cb60:	f7ff fbc9 	bl	800c2f6 <LL_RCC_IsActiveFlag_PPRE1>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d0f1      	beq.n	800cb4e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 0308 	and.w	r3, r3, #8
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d017      	beq.n	800cba6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7ff fadb 	bl	800c138 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb82:	f7fa fcd5 	bl	8007530 <HAL_GetTick>
 800cb86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cb88:	e008      	b.n	800cb9c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb8a:	f7fa fcd1 	bl	8007530 <HAL_GetTick>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d901      	bls.n	800cb9c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800cb98:	2303      	movs	r3, #3
 800cb9a:	e07d      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cb9c:	f7ff fbbd 	bl	800c31a <LL_RCC_IsActiveFlag_PPRE2>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d0f1      	beq.n	800cb8a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 0301 	and.w	r3, r3, #1
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d043      	beq.n	800cc3a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d106      	bne.n	800cbc8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cbba:	f7ff f87b 	bl	800bcb4 <LL_RCC_HSE_IsReady>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d11e      	bne.n	800cc02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e067      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	2b03      	cmp	r3, #3
 800cbce:	d106      	bne.n	800cbde <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cbd0:	f7ff fb16 	bl	800c200 <LL_RCC_PLL_IsReady>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d113      	bne.n	800cc02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e05c      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cbe6:	f7ff f9e3 	bl	800bfb0 <LL_RCC_MSI_IsReady>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d108      	bne.n	800cc02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e051      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cbf4:	f7ff f88e 	bl	800bd14 <LL_RCC_HSI_IsReady>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e04a      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7ff fa21 	bl	800c04e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc0c:	f7fa fc90 	bl	8007530 <HAL_GetTick>
 800cc10:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc12:	e00a      	b.n	800cc2a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc14:	f7fa fc8c 	bl	8007530 <HAL_GetTick>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d901      	bls.n	800cc2a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800cc26:	2303      	movs	r3, #3
 800cc28:	e036      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc2a:	f7ff fa24 	bl	800c076 <LL_RCC_GetSysClkSource>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d1ec      	bne.n	800cc14 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc3a:	4b19      	ldr	r3, [pc, #100]	@ (800cca0 <HAL_RCC_ClockConfig+0x278>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f003 0307 	and.w	r3, r3, #7
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d21b      	bcs.n	800cc80 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc48:	4b15      	ldr	r3, [pc, #84]	@ (800cca0 <HAL_RCC_ClockConfig+0x278>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f023 0207 	bic.w	r2, r3, #7
 800cc50:	4913      	ldr	r1, [pc, #76]	@ (800cca0 <HAL_RCC_ClockConfig+0x278>)
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc58:	f7fa fc6a 	bl	8007530 <HAL_GetTick>
 800cc5c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc5e:	e008      	b.n	800cc72 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cc60:	f7fa fc66 	bl	8007530 <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	d901      	bls.n	800cc72 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800cc6e:	2303      	movs	r3, #3
 800cc70:	e012      	b.n	800cc98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc72:	4b0b      	ldr	r3, [pc, #44]	@ (800cca0 <HAL_RCC_ClockConfig+0x278>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f003 0307 	and.w	r3, r3, #7
 800cc7a:	683a      	ldr	r2, [r7, #0]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d1ef      	bne.n	800cc60 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cc80:	f000 f87e 	bl	800cd80 <HAL_RCC_GetHCLKFreq>
 800cc84:	4603      	mov	r3, r0
 800cc86:	4a07      	ldr	r2, [pc, #28]	@ (800cca4 <HAL_RCC_ClockConfig+0x27c>)
 800cc88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800cc8a:	f7fa fc5d 	bl	8007548 <HAL_GetTickPrio>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fa fbff 	bl	8007494 <HAL_InitTick>
 800cc96:	4603      	mov	r3, r0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	58004000 	.word	0x58004000
 800cca4:	2000002c 	.word	0x2000002c

0800cca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cca8:	b590      	push	{r4, r7, lr}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ccae:	f7ff f9e2 	bl	800c076 <LL_RCC_GetSysClkSource>
 800ccb2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10a      	bne.n	800ccd0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ccba:	f7ff f99e 	bl	800bffa <LL_RCC_MSI_GetRange>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	091b      	lsrs	r3, r3, #4
 800ccc2:	f003 030f 	and.w	r3, r3, #15
 800ccc6:	4a2b      	ldr	r2, [pc, #172]	@ (800cd74 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ccc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cccc:	60fb      	str	r3, [r7, #12]
 800ccce:	e04b      	b.n	800cd68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b04      	cmp	r3, #4
 800ccd4:	d102      	bne.n	800ccdc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ccd6:	4b28      	ldr	r3, [pc, #160]	@ (800cd78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	e045      	b.n	800cd68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b08      	cmp	r3, #8
 800cce0:	d10a      	bne.n	800ccf8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cce2:	f7fe ffb7 	bl	800bc54 <LL_RCC_HSE_IsEnabledDiv2>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d102      	bne.n	800ccf2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800ccec:	4b22      	ldr	r3, [pc, #136]	@ (800cd78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ccee:	60fb      	str	r3, [r7, #12]
 800ccf0:	e03a      	b.n	800cd68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800ccf2:	4b22      	ldr	r3, [pc, #136]	@ (800cd7c <HAL_RCC_GetSysClockFreq+0xd4>)
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	e037      	b.n	800cd68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800ccf8:	f7ff fab9 	bl	800c26e <LL_RCC_PLL_GetMainSource>
 800ccfc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d003      	beq.n	800cd0c <HAL_RCC_GetSysClockFreq+0x64>
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d003      	beq.n	800cd12 <HAL_RCC_GetSysClockFreq+0x6a>
 800cd0a:	e00d      	b.n	800cd28 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800cd0c:	4b1a      	ldr	r3, [pc, #104]	@ (800cd78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cd0e:	60bb      	str	r3, [r7, #8]
        break;
 800cd10:	e015      	b.n	800cd3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cd12:	f7fe ff9f 	bl	800bc54 <LL_RCC_HSE_IsEnabledDiv2>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d102      	bne.n	800cd22 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800cd1c:	4b16      	ldr	r3, [pc, #88]	@ (800cd78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cd1e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800cd20:	e00d      	b.n	800cd3e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800cd22:	4b16      	ldr	r3, [pc, #88]	@ (800cd7c <HAL_RCC_GetSysClockFreq+0xd4>)
 800cd24:	60bb      	str	r3, [r7, #8]
        break;
 800cd26:	e00a      	b.n	800cd3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cd28:	f7ff f967 	bl	800bffa <LL_RCC_MSI_GetRange>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	091b      	lsrs	r3, r3, #4
 800cd30:	f003 030f 	and.w	r3, r3, #15
 800cd34:	4a0f      	ldr	r2, [pc, #60]	@ (800cd74 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd3a:	60bb      	str	r3, [r7, #8]
        break;
 800cd3c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800cd3e:	f7ff fa71 	bl	800c224 <LL_RCC_PLL_GetN>
 800cd42:	4602      	mov	r2, r0
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	fb03 f402 	mul.w	r4, r3, r2
 800cd4a:	f7ff fa84 	bl	800c256 <LL_RCC_PLL_GetDivider>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	091b      	lsrs	r3, r3, #4
 800cd52:	3301      	adds	r3, #1
 800cd54:	fbb4 f4f3 	udiv	r4, r4, r3
 800cd58:	f7ff fa71 	bl	800c23e <LL_RCC_PLL_GetR>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	0f5b      	lsrs	r3, r3, #29
 800cd60:	3301      	adds	r3, #1
 800cd62:	fbb4 f3f3 	udiv	r3, r4, r3
 800cd66:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800cd68:	68fb      	ldr	r3, [r7, #12]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd90      	pop	{r4, r7, pc}
 800cd72:	bf00      	nop
 800cd74:	08021e90 	.word	0x08021e90
 800cd78:	00f42400 	.word	0x00f42400
 800cd7c:	01e84800 	.word	0x01e84800

0800cd80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd80:	b598      	push	{r3, r4, r7, lr}
 800cd82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800cd84:	f7ff ff90 	bl	800cca8 <HAL_RCC_GetSysClockFreq>
 800cd88:	4604      	mov	r4, r0
 800cd8a:	f7ff f9e9 	bl	800c160 <LL_RCC_GetAHBPrescaler>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	091b      	lsrs	r3, r3, #4
 800cd92:	f003 030f 	and.w	r3, r3, #15
 800cd96:	4a03      	ldr	r2, [pc, #12]	@ (800cda4 <HAL_RCC_GetHCLKFreq+0x24>)
 800cd98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	bd98      	pop	{r3, r4, r7, pc}
 800cda4:	08021e30 	.word	0x08021e30

0800cda8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cda8:	b598      	push	{r3, r4, r7, lr}
 800cdaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800cdac:	f7ff ffe8 	bl	800cd80 <HAL_RCC_GetHCLKFreq>
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	f7ff f9ef 	bl	800c194 <LL_RCC_GetAPB1Prescaler>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	0a1b      	lsrs	r3, r3, #8
 800cdba:	f003 0307 	and.w	r3, r3, #7
 800cdbe:	4a04      	ldr	r2, [pc, #16]	@ (800cdd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdc4:	f003 031f 	and.w	r3, r3, #31
 800cdc8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	bd98      	pop	{r3, r4, r7, pc}
 800cdd0:	08021e70 	.word	0x08021e70

0800cdd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cdd4:	b598      	push	{r3, r4, r7, lr}
 800cdd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800cdd8:	f7ff ffd2 	bl	800cd80 <HAL_RCC_GetHCLKFreq>
 800cddc:	4604      	mov	r4, r0
 800cdde:	f7ff f9e5 	bl	800c1ac <LL_RCC_GetAPB2Prescaler>
 800cde2:	4603      	mov	r3, r0
 800cde4:	0adb      	lsrs	r3, r3, #11
 800cde6:	f003 0307 	and.w	r3, r3, #7
 800cdea:	4a04      	ldr	r2, [pc, #16]	@ (800cdfc <HAL_RCC_GetPCLK2Freq+0x28>)
 800cdec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf0:	f003 031f 	and.w	r3, r3, #31
 800cdf4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	bd98      	pop	{r3, r4, r7, pc}
 800cdfc:	08021e70 	.word	0x08021e70

0800ce00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ce00:	b590      	push	{r4, r7, lr}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2bb0      	cmp	r3, #176	@ 0xb0
 800ce0c:	d903      	bls.n	800ce16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ce0e:	4b15      	ldr	r3, [pc, #84]	@ (800ce64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ce10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	e007      	b.n	800ce26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	091b      	lsrs	r3, r3, #4
 800ce1a:	f003 030f 	and.w	r3, r3, #15
 800ce1e:	4a11      	ldr	r2, [pc, #68]	@ (800ce64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ce20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ce26:	f7ff f9a7 	bl	800c178 <LL_RCC_GetAHB4Prescaler>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	091b      	lsrs	r3, r3, #4
 800ce2e:	f003 030f 	and.w	r3, r3, #15
 800ce32:	4a0d      	ldr	r2, [pc, #52]	@ (800ce68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ce34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	4a0a      	ldr	r2, [pc, #40]	@ (800ce6c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ce44:	fba2 2303 	umull	r2, r3, r2, r3
 800ce48:	0c9c      	lsrs	r4, r3, #18
 800ce4a:	f7fe fee5 	bl	800bc18 <HAL_PWREx_GetVoltageRange>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	4619      	mov	r1, r3
 800ce52:	4620      	mov	r0, r4
 800ce54:	f000 f80c 	bl	800ce70 <RCC_SetFlashLatency>
 800ce58:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3714      	adds	r7, #20
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd90      	pop	{r4, r7, pc}
 800ce62:	bf00      	nop
 800ce64:	08021e90 	.word	0x08021e90
 800ce68:	08021e30 	.word	0x08021e30
 800ce6c:	431bde83 	.word	0x431bde83

0800ce70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ce70:	b590      	push	{r4, r7, lr}
 800ce72:	b093      	sub	sp, #76	@ 0x4c
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ce7a:	4b37      	ldr	r3, [pc, #220]	@ (800cf58 <RCC_SetFlashLatency+0xe8>)
 800ce7c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800ce80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ce86:	4a35      	ldr	r2, [pc, #212]	@ (800cf5c <RCC_SetFlashLatency+0xec>)
 800ce88:	f107 031c 	add.w	r3, r7, #28
 800ce8c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ce92:	4b33      	ldr	r3, [pc, #204]	@ (800cf60 <RCC_SetFlashLatency+0xf0>)
 800ce94:	f107 040c 	add.w	r4, r7, #12
 800ce98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ce9e:	2300      	movs	r3, #0
 800cea0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cea8:	d11a      	bne.n	800cee0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ceaa:	2300      	movs	r3, #0
 800ceac:	643b      	str	r3, [r7, #64]	@ 0x40
 800ceae:	e013      	b.n	800ced8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ceb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	3348      	adds	r3, #72	@ 0x48
 800ceb6:	443b      	add	r3, r7
 800ceb8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d807      	bhi.n	800ced2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	3348      	adds	r3, #72	@ 0x48
 800cec8:	443b      	add	r3, r7
 800ceca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cece:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800ced0:	e020      	b.n	800cf14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ced2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ced4:	3301      	adds	r3, #1
 800ced6:	643b      	str	r3, [r7, #64]	@ 0x40
 800ced8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d9e8      	bls.n	800ceb0 <RCC_SetFlashLatency+0x40>
 800cede:	e019      	b.n	800cf14 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cee0:	2300      	movs	r3, #0
 800cee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cee4:	e013      	b.n	800cf0e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800cee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	3348      	adds	r3, #72	@ 0x48
 800ceec:	443b      	add	r3, r7
 800ceee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d807      	bhi.n	800cf08 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	3348      	adds	r3, #72	@ 0x48
 800cefe:	443b      	add	r3, r7
 800cf00:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cf04:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800cf06:	e005      	b.n	800cf14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cf08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d9e8      	bls.n	800cee6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800cf14:	4b13      	ldr	r3, [pc, #76]	@ (800cf64 <RCC_SetFlashLatency+0xf4>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f023 0207 	bic.w	r2, r3, #7
 800cf1c:	4911      	ldr	r1, [pc, #68]	@ (800cf64 <RCC_SetFlashLatency+0xf4>)
 800cf1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf20:	4313      	orrs	r3, r2
 800cf22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cf24:	f7fa fb04 	bl	8007530 <HAL_GetTick>
 800cf28:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cf2a:	e008      	b.n	800cf3e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cf2c:	f7fa fb00 	bl	8007530 <HAL_GetTick>
 800cf30:	4602      	mov	r2, r0
 800cf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d901      	bls.n	800cf3e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e007      	b.n	800cf4e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cf3e:	4b09      	ldr	r3, [pc, #36]	@ (800cf64 <RCC_SetFlashLatency+0xf4>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 0307 	and.w	r3, r3, #7
 800cf46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d1ef      	bne.n	800cf2c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	374c      	adds	r7, #76	@ 0x4c
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd90      	pop	{r4, r7, pc}
 800cf56:	bf00      	nop
 800cf58:	08020028 	.word	0x08020028
 800cf5c:	08020038 	.word	0x08020038
 800cf60:	08020044 	.word	0x08020044
 800cf64:	58004000 	.word	0x58004000

0800cf68 <LL_RCC_LSE_IsEnabled>:
{
 800cf68:	b480      	push	{r7}
 800cf6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cf6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf74:	f003 0301 	and.w	r3, r3, #1
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d101      	bne.n	800cf80 <LL_RCC_LSE_IsEnabled+0x18>
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e000      	b.n	800cf82 <LL_RCC_LSE_IsEnabled+0x1a>
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <LL_RCC_LSE_IsReady>:
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cf90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf98:	f003 0302 	and.w	r3, r3, #2
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d101      	bne.n	800cfa4 <LL_RCC_LSE_IsReady+0x18>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e000      	b.n	800cfa6 <LL_RCC_LSE_IsReady+0x1a>
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <LL_RCC_SetRFWKPClockSource>:
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800cfb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cfc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cfc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <LL_RCC_SetSMPSClockSource>:
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800cfe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfea:	f023 0203 	bic.w	r2, r3, #3
 800cfee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <LL_RCC_SetSMPSPrescaler>:
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d00c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d012:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d016:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4313      	orrs	r3, r2
 800d01e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <LL_RCC_SetUSARTClockSource>:
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d03c:	f023 0203 	bic.w	r2, r3, #3
 800d040:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4313      	orrs	r3, r2
 800d048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d04c:	bf00      	nop
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <LL_RCC_SetLPUARTClockSource>:
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d068:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d06c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4313      	orrs	r3, r2
 800d074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <LL_RCC_SetI2CClockSource>:
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d08c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d090:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	091b      	lsrs	r3, r3, #4
 800d098:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d09c:	43db      	mvns	r3, r3
 800d09e:	401a      	ands	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	011b      	lsls	r3, r3, #4
 800d0a4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d0a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d0b2:	bf00      	nop
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <LL_RCC_SetLPTIMClockSource>:
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d0c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	0c1b      	lsrs	r3, r3, #16
 800d0d2:	041b      	lsls	r3, r3, #16
 800d0d4:	43db      	mvns	r3, r3
 800d0d6:	401a      	ands	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	041b      	lsls	r3, r3, #16
 800d0dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d0e6:	bf00      	nop
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <LL_RCC_SetSAIClockSource>:
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b083      	sub	sp, #12
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d0fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d102:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d106:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d112:	bf00      	nop
 800d114:	370c      	adds	r7, #12
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <LL_RCC_SetRNGClockSource>:
{
 800d11e:	b480      	push	{r7}
 800d120:	b083      	sub	sp, #12
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d12e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d132:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4313      	orrs	r3, r2
 800d13a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <LL_RCC_SetCLK48ClockSource>:
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d15a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d15e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4313      	orrs	r3, r2
 800d166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d16a:	bf00      	nop
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr

0800d176 <LL_RCC_SetUSBClockSource>:
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b082      	sub	sp, #8
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7ff ffe3 	bl	800d14a <LL_RCC_SetCLK48ClockSource>
}
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <LL_RCC_SetADCClockSource>:
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d19c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d1a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <LL_RCC_SetRTCClockSource>:
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d1c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d1cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800d1d8:	bf00      	nop
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <LL_RCC_GetRTCClockSource>:
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d1e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <LL_RCC_ForceBackupDomainReset>:
{
 800d1fe:	b480      	push	{r7}
 800d200:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d20a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d20e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d212:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d216:	bf00      	nop
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d220:	b480      	push	{r7}
 800d222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d22c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d238:	bf00      	nop
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr

0800d242 <LL_RCC_PLLSAI1_Enable>:
{
 800d242:	b480      	push	{r7}
 800d244:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d250:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d254:	6013      	str	r3, [r2, #0]
}
 800d256:	bf00      	nop
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <LL_RCC_PLLSAI1_Disable>:
{
 800d260:	b480      	push	{r7}
 800d262:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d26e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d272:	6013      	str	r3, [r2, #0]
}
 800d274:	bf00      	nop
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <LL_RCC_PLLSAI1_IsReady>:
{
 800d27e:	b480      	push	{r7}
 800d280:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d28c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d290:	d101      	bne.n	800d296 <LL_RCC_PLLSAI1_IsReady+0x18>
 800d292:	2301      	movs	r3, #1
 800d294:	e000      	b.n	800d298 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d296:	2300      	movs	r3, #0
}
 800d298:	4618      	mov	r0, r3
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b088      	sub	sp, #32
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d034      	beq.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d2c6:	d021      	beq.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d2c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d2cc:	d81b      	bhi.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d2ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d2d2:	d01d      	beq.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d2d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d2d8:	d815      	bhi.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00b      	beq.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d2de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d2e2:	d110      	bne.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d2e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2f2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d2f4:	e00d      	b.n	800d312 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f000 f947 	bl	800d58e <RCCEx_PLLSAI1_ConfigNP>
 800d300:	4603      	mov	r3, r0
 800d302:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d304:	e005      	b.n	800d312 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d306:	2301      	movs	r3, #1
 800d308:	77fb      	strb	r3, [r7, #31]
        break;
 800d30a:	e002      	b.n	800d312 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d30c:	bf00      	nop
 800d30e:	e000      	b.n	800d312 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d310:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d312:	7ffb      	ldrb	r3, [r7, #31]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d105      	bne.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7ff fee8 	bl	800d0f2 <LL_RCC_SetSAIClockSource>
 800d322:	e001      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d324:	7ffb      	ldrb	r3, [r7, #31]
 800d326:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d330:	2b00      	cmp	r3, #0
 800d332:	d046      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d334:	f7ff ff56 	bl	800d1e4 <LL_RCC_GetRTCClockSource>
 800d338:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d33e:	69ba      	ldr	r2, [r7, #24]
 800d340:	429a      	cmp	r2, r3
 800d342:	d03c      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d344:	f7fe fc58 	bl	800bbf8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d105      	bne.n	800d35a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d352:	4618      	mov	r0, r3
 800d354:	f7ff ff30 	bl	800d1b8 <LL_RCC_SetRTCClockSource>
 800d358:	e02e      	b.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d35a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d362:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d364:	f7ff ff4b 	bl	800d1fe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d368:	f7ff ff5a 	bl	800d220 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d376:	4313      	orrs	r3, r2
 800d378:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d37a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d384:	f7ff fdf0 	bl	800cf68 <LL_RCC_LSE_IsEnabled>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d114      	bne.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d38e:	f7fa f8cf 	bl	8007530 <HAL_GetTick>
 800d392:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d394:	e00b      	b.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d396:	f7fa f8cb 	bl	8007530 <HAL_GetTick>
 800d39a:	4602      	mov	r2, r0
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d902      	bls.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	77fb      	strb	r3, [r7, #31]
              break;
 800d3ac:	e004      	b.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d3ae:	f7ff fded 	bl	800cf8c <LL_RCC_LSE_IsReady>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d1ee      	bne.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d3b8:	7ffb      	ldrb	r3, [r7, #31]
 800d3ba:	77bb      	strb	r3, [r7, #30]
 800d3bc:	e001      	b.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3be:	7ffb      	ldrb	r3, [r7, #31]
 800d3c0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d004      	beq.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7ff fe2a 	bl	800d02c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f003 0302 	and.w	r3, r3, #2
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d004      	beq.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7ff fe35 	bl	800d058 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f003 0310 	and.w	r3, r3, #16
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d004      	beq.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fe5d 	bl	800d0be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 0320 	and.w	r3, r3, #32
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d004      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff fe52 	bl	800d0be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f003 0304 	and.w	r3, r3, #4
 800d422:	2b00      	cmp	r3, #0
 800d424:	d004      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6a1b      	ldr	r3, [r3, #32]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7ff fe2a 	bl	800d084 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f003 0308 	and.w	r3, r3, #8
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d004      	beq.n	800d446 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff fe1f 	bl	800d084 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d022      	beq.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d456:	4618      	mov	r0, r3
 800d458:	f7ff fe8d 	bl	800d176 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d460:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d464:	d107      	bne.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d470:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d474:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d47a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d47e:	d10b      	bne.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3304      	adds	r3, #4
 800d484:	4618      	mov	r0, r3
 800d486:	f000 f8dd 	bl	800d644 <RCCEx_PLLSAI1_ConfigNQ>
 800d48a:	4603      	mov	r3, r0
 800d48c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d48e:	7ffb      	ldrb	r3, [r7, #31]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d494:	7ffb      	ldrb	r3, [r7, #31]
 800d496:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d02b      	beq.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4ac:	d008      	beq.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d4b6:	d003      	beq.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d105      	bne.n	800d4cc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7ff fe2a 	bl	800d11e <LL_RCC_SetRNGClockSource>
 800d4ca:	e00a      	b.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	f7ff fe21 	bl	800d11e <LL_RCC_SetRNGClockSource>
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f7ff fe34 	bl	800d14a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4e6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d4ea:	d107      	bne.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d4ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d4f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d4fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d504:	2b00      	cmp	r3, #0
 800d506:	d022      	beq.n	800d54e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff fe3d 	bl	800d18c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d51a:	d107      	bne.n	800d52c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d51c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d52a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d534:	d10b      	bne.n	800d54e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3304      	adds	r3, #4
 800d53a:	4618      	mov	r0, r3
 800d53c:	f000 f8dd 	bl	800d6fa <RCCEx_PLLSAI1_ConfigNR>
 800d540:	4603      	mov	r3, r0
 800d542:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d544:	7ffb      	ldrb	r3, [r7, #31]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d001      	beq.n	800d54e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d54a:	7ffb      	ldrb	r3, [r7, #31]
 800d54c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d556:	2b00      	cmp	r3, #0
 800d558:	d004      	beq.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d55e:	4618      	mov	r0, r3
 800d560:	f7ff fd26 	bl	800cfb0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d009      	beq.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fd45 	bl	800d004 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff fd2c 	bl	800cfdc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d584:	7fbb      	ldrb	r3, [r7, #30]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3720      	adds	r7, #32
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b084      	sub	sp, #16
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d596:	2300      	movs	r3, #0
 800d598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d59a:	f7ff fe61 	bl	800d260 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d59e:	f7f9 ffc7 	bl	8007530 <HAL_GetTick>
 800d5a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5a4:	e009      	b.n	800d5ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d5a6:	f7f9 ffc3 	bl	8007530 <HAL_GetTick>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d902      	bls.n	800d5ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d5b8:	e004      	b.n	800d5c4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5ba:	f7ff fe60 	bl	800d27e <LL_RCC_PLLSAI1_IsReady>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1f0      	bne.n	800d5a6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d137      	bne.n	800d63a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d5ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	021b      	lsls	r3, r3, #8
 800d5da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d5e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d5f8:	f7ff fe23 	bl	800d242 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5fc:	f7f9 ff98 	bl	8007530 <HAL_GetTick>
 800d600:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d602:	e009      	b.n	800d618 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d604:	f7f9 ff94 	bl	8007530 <HAL_GetTick>
 800d608:	4602      	mov	r2, r0
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	1ad3      	subs	r3, r2, r3
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d902      	bls.n	800d618 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d612:	2303      	movs	r3, #3
 800d614:	73fb      	strb	r3, [r7, #15]
        break;
 800d616:	e004      	b.n	800d622 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d618:	f7ff fe31 	bl	800d27e <LL_RCC_PLLSAI1_IsReady>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d1f0      	bne.n	800d604 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d622:	7bfb      	ldrb	r3, [r7, #15]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d108      	bne.n	800d63a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d62c:	691a      	ldr	r2, [r3, #16]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d636:	4313      	orrs	r3, r2
 800d638:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d650:	f7ff fe06 	bl	800d260 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d654:	f7f9 ff6c 	bl	8007530 <HAL_GetTick>
 800d658:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d65a:	e009      	b.n	800d670 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d65c:	f7f9 ff68 	bl	8007530 <HAL_GetTick>
 800d660:	4602      	mov	r2, r0
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	2b02      	cmp	r3, #2
 800d668:	d902      	bls.n	800d670 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d66a:	2303      	movs	r3, #3
 800d66c:	73fb      	strb	r3, [r7, #15]
      break;
 800d66e:	e004      	b.n	800d67a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d670:	f7ff fe05 	bl	800d27e <LL_RCC_PLLSAI1_IsReady>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1f0      	bne.n	800d65c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d137      	bne.n	800d6f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	021b      	lsls	r3, r3, #8
 800d690:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d694:	4313      	orrs	r3, r2
 800d696:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	689b      	ldr	r3, [r3, #8]
 800d6a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d6ae:	f7ff fdc8 	bl	800d242 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6b2:	f7f9 ff3d 	bl	8007530 <HAL_GetTick>
 800d6b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6b8:	e009      	b.n	800d6ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d6ba:	f7f9 ff39 	bl	8007530 <HAL_GetTick>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	1ad3      	subs	r3, r2, r3
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d902      	bls.n	800d6ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d6c8:	2303      	movs	r3, #3
 800d6ca:	73fb      	strb	r3, [r7, #15]
        break;
 800d6cc:	e004      	b.n	800d6d8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6ce:	f7ff fdd6 	bl	800d27e <LL_RCC_PLLSAI1_IsReady>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d1f0      	bne.n	800d6ba <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d6d8:	7bfb      	ldrb	r3, [r7, #15]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d108      	bne.n	800d6f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d6de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6e2:	691a      	ldr	r2, [r3, #16]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d706:	f7ff fdab 	bl	800d260 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d70a:	f7f9 ff11 	bl	8007530 <HAL_GetTick>
 800d70e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d710:	e009      	b.n	800d726 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d712:	f7f9 ff0d 	bl	8007530 <HAL_GetTick>
 800d716:	4602      	mov	r2, r0
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	1ad3      	subs	r3, r2, r3
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d902      	bls.n	800d726 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d720:	2303      	movs	r3, #3
 800d722:	73fb      	strb	r3, [r7, #15]
      break;
 800d724:	e004      	b.n	800d730 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d726:	f7ff fdaa 	bl	800d27e <LL_RCC_PLLSAI1_IsReady>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1f0      	bne.n	800d712 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d730:	7bfb      	ldrb	r3, [r7, #15]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d137      	bne.n	800d7a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	021b      	lsls	r3, r3, #8
 800d746:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d74a:	4313      	orrs	r3, r2
 800d74c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d74e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d752:	691b      	ldr	r3, [r3, #16]
 800d754:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d760:	4313      	orrs	r3, r2
 800d762:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d764:	f7ff fd6d 	bl	800d242 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d768:	f7f9 fee2 	bl	8007530 <HAL_GetTick>
 800d76c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d76e:	e009      	b.n	800d784 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d770:	f7f9 fede 	bl	8007530 <HAL_GetTick>
 800d774:	4602      	mov	r2, r0
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d902      	bls.n	800d784 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	73fb      	strb	r3, [r7, #15]
        break;
 800d782:	e004      	b.n	800d78e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d784:	f7ff fd7b 	bl	800d27e <LL_RCC_PLLSAI1_IsReady>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d1f0      	bne.n	800d770 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d108      	bne.n	800d7a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d798:	691a      	ldr	r2, [r3, #16]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d101      	bne.n	800d7c2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e09f      	b.n	800d902 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d106      	bne.n	800d7dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7f6 f842 	bl	8003860 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2202      	movs	r2, #2
 800d7e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d7e4:	4b49      	ldr	r3, [pc, #292]	@ (800d90c <HAL_RTC_Init+0x15c>)
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	f003 0310 	and.w	r3, r3, #16
 800d7ec:	2b10      	cmp	r3, #16
 800d7ee:	d07e      	beq.n	800d8ee <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	22ca      	movs	r2, #202	@ 0xca
 800d7f6:	625a      	str	r2, [r3, #36]	@ 0x24
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2253      	movs	r2, #83	@ 0x53
 800d7fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 fa1d 	bl	800dc40 <RTC_EnterInitMode>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00a      	beq.n	800d822 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	22ff      	movs	r2, #255	@ 0xff
 800d812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2204      	movs	r2, #4
 800d818:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	73fb      	strb	r3, [r7, #15]
 800d820:	e067      	b.n	800d8f2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	6812      	ldr	r2, [r2, #0]
 800d82c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d834:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6899      	ldr	r1, [r3, #8]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685a      	ldr	r2, [r3, #4]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	431a      	orrs	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	431a      	orrs	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	430a      	orrs	r2, r1
 800d852:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	68d2      	ldr	r2, [r2, #12]
 800d85c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	6919      	ldr	r1, [r3, #16]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	041a      	lsls	r2, r3, #16
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	430a      	orrs	r2, r1
 800d870:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68da      	ldr	r2, [r3, #12]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d880:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f022 0203 	bic.w	r2, r2, #3
 800d890:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	69da      	ldr	r2, [r3, #28]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	695b      	ldr	r3, [r3, #20]
 800d8a0:	431a      	orrs	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	430a      	orrs	r2, r1
 800d8a8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	f003 0320 	and.w	r3, r3, #32
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d113      	bne.n	800d8e0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f99b 	bl	800dbf4 <HAL_RTC_WaitForSynchro>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00d      	beq.n	800d8e0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	22ff      	movs	r2, #255	@ 0xff
 800d8ca:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2204      	movs	r2, #4
 800d8d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e010      	b.n	800d902 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	22ff      	movs	r2, #255	@ 0xff
 800d8e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73fb      	strb	r3, [r7, #15]
 800d8ec:	e001      	b.n	800d8f2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d8f2:	7bfb      	ldrb	r3, [r7, #15]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d103      	bne.n	800d900 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d900:	7bfb      	ldrb	r3, [r7, #15]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	40002800 	.word	0x40002800

0800d910 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d910:	b590      	push	{r4, r7, lr}
 800d912:	b087      	sub	sp, #28
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d101      	bne.n	800d92a <HAL_RTC_SetTime+0x1a>
 800d926:	2302      	movs	r3, #2
 800d928:	e0b2      	b.n	800da90 <HAL_RTC_SetTime+0x180>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2201      	movs	r2, #1
 800d92e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2202      	movs	r2, #2
 800d936:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d126      	bne.n	800d98e <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d102      	bne.n	800d954 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2200      	movs	r2, #0
 800d952:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 f99b 	bl	800dc94 <RTC_ByteToBcd2>
 800d95e:	4603      	mov	r3, r0
 800d960:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	785b      	ldrb	r3, [r3, #1]
 800d966:	4618      	mov	r0, r3
 800d968:	f000 f994 	bl	800dc94 <RTC_ByteToBcd2>
 800d96c:	4603      	mov	r3, r0
 800d96e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d970:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	789b      	ldrb	r3, [r3, #2]
 800d976:	4618      	mov	r0, r3
 800d978:	f000 f98c 	bl	800dc94 <RTC_ByteToBcd2>
 800d97c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d97e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	78db      	ldrb	r3, [r3, #3]
 800d986:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d988:	4313      	orrs	r3, r2
 800d98a:	617b      	str	r3, [r7, #20]
 800d98c:	e018      	b.n	800d9c0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d102      	bne.n	800d9a2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	785b      	ldrb	r3, [r3, #1]
 800d9ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d9ae:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d9b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	78db      	ldrb	r3, [r3, #3]
 800d9ba:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	22ca      	movs	r2, #202	@ 0xca
 800d9c6:	625a      	str	r2, [r3, #36]	@ 0x24
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2253      	movs	r2, #83	@ 0x53
 800d9ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f000 f935 	bl	800dc40 <RTC_EnterInitMode>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00d      	beq.n	800d9f8 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	22ff      	movs	r2, #255	@ 0xff
 800d9e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2204      	movs	r2, #4
 800d9e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e04b      	b.n	800da90 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800da02:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800da06:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	689a      	ldr	r2, [r3, #8]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800da16:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	6899      	ldr	r1, [r3, #8]
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	68da      	ldr	r2, [r3, #12]
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	431a      	orrs	r2, r3
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	430a      	orrs	r2, r1
 800da2e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68da      	ldr	r2, [r3, #12]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800da3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	f003 0320 	and.w	r3, r3, #32
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d113      	bne.n	800da76 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f000 f8d0 	bl	800dbf4 <HAL_RTC_WaitForSynchro>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00d      	beq.n	800da76 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	22ff      	movs	r2, #255	@ 0xff
 800da60:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2204      	movs	r2, #4
 800da66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800da72:	2301      	movs	r3, #1
 800da74:	e00c      	b.n	800da90 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	22ff      	movs	r2, #255	@ 0xff
 800da7c:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2201      	movs	r2, #1
 800da82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2200      	movs	r2, #0
 800da8a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800da8e:	2300      	movs	r3, #0
  }
}
 800da90:	4618      	mov	r0, r3
 800da92:	371c      	adds	r7, #28
 800da94:	46bd      	mov	sp, r7
 800da96:	bd90      	pop	{r4, r7, pc}

0800da98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800da98:	b590      	push	{r4, r7, lr}
 800da9a:	b087      	sub	sp, #28
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d101      	bne.n	800dab2 <HAL_RTC_SetDate+0x1a>
 800daae:	2302      	movs	r3, #2
 800dab0:	e09c      	b.n	800dbec <HAL_RTC_SetDate+0x154>
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2201      	movs	r2, #1
 800dab6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2202      	movs	r2, #2
 800dabe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10e      	bne.n	800dae6 <HAL_RTC_SetDate+0x4e>
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	785b      	ldrb	r3, [r3, #1]
 800dacc:	f003 0310 	and.w	r3, r3, #16
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d008      	beq.n	800dae6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	785b      	ldrb	r3, [r3, #1]
 800dad8:	f023 0310 	bic.w	r3, r3, #16
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	330a      	adds	r3, #10
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d11c      	bne.n	800db26 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	78db      	ldrb	r3, [r3, #3]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f000 f8cf 	bl	800dc94 <RTC_ByteToBcd2>
 800daf6:	4603      	mov	r3, r0
 800daf8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	785b      	ldrb	r3, [r3, #1]
 800dafe:	4618      	mov	r0, r3
 800db00:	f000 f8c8 	bl	800dc94 <RTC_ByteToBcd2>
 800db04:	4603      	mov	r3, r0
 800db06:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800db08:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	789b      	ldrb	r3, [r3, #2]
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 f8c0 	bl	800dc94 <RTC_ByteToBcd2>
 800db14:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800db16:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800db20:	4313      	orrs	r3, r2
 800db22:	617b      	str	r3, [r7, #20]
 800db24:	e00e      	b.n	800db44 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	78db      	ldrb	r3, [r3, #3]
 800db2a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	785b      	ldrb	r3, [r3, #1]
 800db30:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800db32:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800db38:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800db40:	4313      	orrs	r3, r2
 800db42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	22ca      	movs	r2, #202	@ 0xca
 800db4a:	625a      	str	r2, [r3, #36]	@ 0x24
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2253      	movs	r2, #83	@ 0x53
 800db52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 f873 	bl	800dc40 <RTC_EnterInitMode>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00d      	beq.n	800db7c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	22ff      	movs	r2, #255	@ 0xff
 800db66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2204      	movs	r2, #4
 800db6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800db78:	2301      	movs	r3, #1
 800db7a:	e037      	b.n	800dbec <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800db86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800db8a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68da      	ldr	r2, [r3, #12]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800db9a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d113      	bne.n	800dbd2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f000 f822 	bl	800dbf4 <HAL_RTC_WaitForSynchro>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00d      	beq.n	800dbd2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	22ff      	movs	r2, #255	@ 0xff
 800dbbc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2204      	movs	r2, #4
 800dbc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e00c      	b.n	800dbec <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	22ff      	movs	r2, #255	@ 0xff
 800dbd8:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800dbea:	2300      	movs	r3, #0
  }
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	371c      	adds	r7, #28
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd90      	pop	{r4, r7, pc}

0800dbf4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	68da      	ldr	r2, [r3, #12]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800dc0a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dc0c:	f7f9 fc90 	bl	8007530 <HAL_GetTick>
 800dc10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dc12:	e009      	b.n	800dc28 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dc14:	f7f9 fc8c 	bl	8007530 <HAL_GetTick>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc22:	d901      	bls.n	800dc28 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800dc24:	2303      	movs	r3, #3
 800dc26:	e007      	b.n	800dc38 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	f003 0320 	and.w	r3, r3, #32
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d0ee      	beq.n	800dc14 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d119      	bne.n	800dc8a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc5e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dc60:	f7f9 fc66 	bl	8007530 <HAL_GetTick>
 800dc64:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc66:	e009      	b.n	800dc7c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dc68:	f7f9 fc62 	bl	8007530 <HAL_GetTick>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc76:	d901      	bls.n	800dc7c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800dc78:	2303      	movs	r3, #3
 800dc7a:	e007      	b.n	800dc8c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0ee      	beq.n	800dc68 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800dca2:	79fb      	ldrb	r3, [r7, #7]
 800dca4:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800dca6:	e005      	b.n	800dcb4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800dcae:	7afb      	ldrb	r3, [r7, #11]
 800dcb0:	3b0a      	subs	r3, #10
 800dcb2:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800dcb4:	7afb      	ldrb	r3, [r7, #11]
 800dcb6:	2b09      	cmp	r3, #9
 800dcb8:	d8f6      	bhi.n	800dca8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	011b      	lsls	r3, r3, #4
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	7afb      	ldrb	r3, [r7, #11]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	b2db      	uxtb	r3, r3
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3714      	adds	r7, #20
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b086      	sub	sp, #24
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d101      	bne.n	800dcee <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800dcea:	2302      	movs	r3, #2
 800dcec:	e0a8      	b.n	800de40 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2202      	movs	r2, #2
 800dcfa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	22ca      	movs	r2, #202	@ 0xca
 800dd04:	625a      	str	r2, [r3, #36]	@ 0x24
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2253      	movs	r2, #83	@ 0x53
 800dd0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d020      	beq.n	800dd5e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800dd1c:	f7f9 fc08 	bl	8007530 <HAL_GetTick>
 800dd20:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dd22:	e015      	b.n	800dd50 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dd24:	f7f9 fc04 	bl	8007530 <HAL_GetTick>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	1ad3      	subs	r3, r2, r3
 800dd2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dd32:	d90d      	bls.n	800dd50 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	22ff      	movs	r2, #255	@ 0xff
 800dd3a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2203      	movs	r2, #3
 800dd40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800dd4c:	2303      	movs	r3, #3
 800dd4e:	e077      	b.n	800de40 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	f003 0304 	and.w	r3, r3, #4
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1e2      	bne.n	800dd24 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	689a      	ldr	r2, [r3, #8]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd6c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	b2da      	uxtb	r2, r3
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800dd7e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dd80:	f7f9 fbd6 	bl	8007530 <HAL_GetTick>
 800dd84:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dd86:	e015      	b.n	800ddb4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dd88:	f7f9 fbd2 	bl	8007530 <HAL_GetTick>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	1ad3      	subs	r3, r2, r3
 800dd92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dd96:	d90d      	bls.n	800ddb4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	22ff      	movs	r2, #255	@ 0xff
 800dd9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2203      	movs	r2, #3
 800dda4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e045      	b.n	800de40 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	f003 0304 	and.w	r3, r3, #4
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d0e2      	beq.n	800dd88 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	689a      	ldr	r2, [r3, #8]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f022 0207 	bic.w	r2, r2, #7
 800ddd8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	6899      	ldr	r1, [r3, #8]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	430a      	orrs	r2, r1
 800dde8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ddea:	4b17      	ldr	r3, [pc, #92]	@ (800de48 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ddec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddf0:	4a15      	ldr	r2, [pc, #84]	@ (800de48 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ddf2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ddf6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800ddfa:	4b13      	ldr	r3, [pc, #76]	@ (800de48 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a12      	ldr	r2, [pc, #72]	@ (800de48 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800de00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800de04:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	689a      	ldr	r2, [r3, #8]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800de14:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	689a      	ldr	r2, [r3, #8]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800de24:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	22ff      	movs	r2, #255	@ 0xff
 800de2c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2201      	movs	r2, #1
 800de32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3718      	adds	r7, #24
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	58000800 	.word	0x58000800

0800de4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e095      	b.n	800df8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de62:	2b00      	cmp	r3, #0
 800de64:	d108      	bne.n	800de78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800de6e:	d009      	beq.n	800de84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	61da      	str	r2, [r3, #28]
 800de76:	e005      	b.n	800de84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2200      	movs	r2, #0
 800de9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f7f5 fd86 	bl	80039b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2202      	movs	r2, #2
 800dea8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800deba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dec4:	d902      	bls.n	800decc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dec6:	2300      	movs	r3, #0
 800dec8:	60fb      	str	r3, [r7, #12]
 800deca:	e002      	b.n	800ded2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800decc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ded0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800deda:	d007      	beq.n	800deec <HAL_SPI_Init+0xa0>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dee4:	d002      	beq.n	800deec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800defc:	431a      	orrs	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	691b      	ldr	r3, [r3, #16]
 800df02:	f003 0302 	and.w	r3, r3, #2
 800df06:	431a      	orrs	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	695b      	ldr	r3, [r3, #20]
 800df0c:	f003 0301 	and.w	r3, r3, #1
 800df10:	431a      	orrs	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	699b      	ldr	r3, [r3, #24]
 800df16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800df1a:	431a      	orrs	r2, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	69db      	ldr	r3, [r3, #28]
 800df20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df24:	431a      	orrs	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a1b      	ldr	r3, [r3, #32]
 800df2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df2e:	ea42 0103 	orr.w	r1, r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	430a      	orrs	r2, r1
 800df40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	699b      	ldr	r3, [r3, #24]
 800df46:	0c1b      	lsrs	r3, r3, #16
 800df48:	f003 0204 	and.w	r2, r3, #4
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df50:	f003 0310 	and.w	r3, r3, #16
 800df54:	431a      	orrs	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df5a:	f003 0308 	and.w	r3, r3, #8
 800df5e:	431a      	orrs	r2, r3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800df68:	ea42 0103 	orr.w	r1, r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	430a      	orrs	r2, r1
 800df78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800df88:	2300      	movs	r3, #0
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d001      	beq.n	800dfb2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800dfae:	2302      	movs	r3, #2
 800dfb0:	e0d4      	b.n	800e15c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <HAL_SPI_Transmit_DMA+0x2a>
 800dfb8:	88fb      	ldrh	r3, [r7, #6]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e0cc      	b.n	800e15c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d101      	bne.n	800dfd0 <HAL_SPI_Transmit_DMA+0x3c>
 800dfcc:	2302      	movs	r3, #2
 800dfce:	e0c5      	b.n	800e15c <HAL_SPI_Transmit_DMA+0x1c8>
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2203      	movs	r2, #3
 800dfdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	68ba      	ldr	r2, [r7, #8]
 800dfea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	88fa      	ldrh	r2, [r7, #6]
 800dff0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	88fa      	ldrh	r2, [r7, #6]
 800dff6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2200      	movs	r2, #0
 800dffc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2200      	movs	r2, #0
 800e002:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2200      	movs	r2, #0
 800e008:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	689b      	ldr	r3, [r3, #8]
 800e01e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e022:	d10f      	bne.n	800e044 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e032:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e042:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e048:	4a46      	ldr	r2, [pc, #280]	@ (800e164 <HAL_SPI_Transmit_DMA+0x1d0>)
 800e04a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e050:	4a45      	ldr	r2, [pc, #276]	@ (800e168 <HAL_SPI_Transmit_DMA+0x1d4>)
 800e052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e058:	4a44      	ldr	r2, [pc, #272]	@ (800e16c <HAL_SPI_Transmit_DMA+0x1d8>)
 800e05a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e060:	2200      	movs	r2, #0
 800e062:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685a      	ldr	r2, [r3, #4]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e072:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e07c:	d82d      	bhi.n	800e0da <HAL_SPI_Transmit_DMA+0x146>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e082:	699b      	ldr	r3, [r3, #24]
 800e084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e088:	d127      	bne.n	800e0da <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e08e:	b29b      	uxth	r3, r3
 800e090:	f003 0301 	and.w	r3, r3, #1
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10f      	bne.n	800e0b8 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	685a      	ldr	r2, [r3, #4]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e0a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	085b      	lsrs	r3, r3, #1
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e0b6:	e010      	b.n	800e0da <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	685a      	ldr	r2, [r3, #4]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e0c6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	085b      	lsrs	r3, r3, #1
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	330c      	adds	r3, #12
 800e0ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e0f2:	f7fa fd99 	bl	8008c28 <HAL_DMA_Start_IT>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d00b      	beq.n	800e114 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e100:	f043 0210 	orr.w	r2, r3, #16
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e023      	b.n	800e15c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e11e:	2b40      	cmp	r3, #64	@ 0x40
 800e120:	d007      	beq.n	800e132 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e130:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	685a      	ldr	r2, [r3, #4]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f042 0220 	orr.w	r2, r2, #32
 800e148:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f042 0202 	orr.w	r2, r2, #2
 800e158:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e15a:	2300      	movs	r3, #0
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	0800ebab 	.word	0x0800ebab
 800e168:	0800e9cd 	.word	0x0800e9cd
 800e16c:	0800ebff 	.word	0x0800ebff

0800e170 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	4613      	mov	r3, r2
 800e17c:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e184:	b2db      	uxtb	r3, r3
 800e186:	2b01      	cmp	r3, #1
 800e188:	d001      	beq.n	800e18e <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800e18a:	2302      	movs	r3, #2
 800e18c:	e105      	b.n	800e39a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <HAL_SPI_Receive_DMA+0x2a>
 800e194:	88fb      	ldrh	r3, [r7, #6]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	e0fd      	b.n	800e39a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d110      	bne.n	800e1c8 <HAL_SPI_Receive_DMA+0x58>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e1ae:	d10b      	bne.n	800e1c8 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2204      	movs	r2, #4
 800e1b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800e1b8:	88fb      	ldrh	r3, [r7, #6]
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	68b9      	ldr	r1, [r7, #8]
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f000 f8f6 	bl	800e3b0 <HAL_SPI_TransmitReceive_DMA>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	e0e8      	b.n	800e39a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d101      	bne.n	800e1d6 <HAL_SPI_Receive_DMA+0x66>
 800e1d2:	2302      	movs	r3, #2
 800e1d4:	e0e1      	b.n	800e39a <HAL_SPI_Receive_DMA+0x22a>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2204      	movs	r2, #4
 800e1e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	88fa      	ldrh	r2, [r7, #6]
 800e1f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	88fa      	ldrh	r2, [r7, #6]
 800e1fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2200      	movs	r2, #0
 800e206:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2200      	movs	r2, #0
 800e20c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2200      	movs	r2, #0
 800e212:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e222:	d10f      	bne.n	800e244 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e232:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e242:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	685a      	ldr	r2, [r3, #4]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e252:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e25c:	d908      	bls.n	800e270 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e26c:	605a      	str	r2, [r3, #4]
 800e26e:	e042      	b.n	800e2f6 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	685a      	ldr	r2, [r3, #4]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e27e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e284:	699b      	ldr	r3, [r3, #24]
 800e286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e28a:	d134      	bne.n	800e2f6 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	685a      	ldr	r2, [r3, #4]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e29a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	f003 0301 	and.w	r3, r3, #1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d111      	bne.n	800e2d0 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e2ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	085b      	lsrs	r3, r3, #1
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e2ce:	e012      	b.n	800e2f6 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	685a      	ldr	r2, [r3, #4]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e2de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	085b      	lsrs	r3, r3, #1
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2fa:	4a2a      	ldr	r2, [pc, #168]	@ (800e3a4 <HAL_SPI_Receive_DMA+0x234>)
 800e2fc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e302:	4a29      	ldr	r2, [pc, #164]	@ (800e3a8 <HAL_SPI_Receive_DMA+0x238>)
 800e304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e30a:	4a28      	ldr	r2, [pc, #160]	@ (800e3ac <HAL_SPI_Receive_DMA+0x23c>)
 800e30c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e312:	2200      	movs	r2, #0
 800e314:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	330c      	adds	r3, #12
 800e320:	4619      	mov	r1, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e326:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e32e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e330:	f7fa fc7a 	bl	8008c28 <HAL_DMA_Start_IT>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00b      	beq.n	800e352 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e33e:	f043 0210 	orr.w	r2, r3, #16
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2200      	movs	r2, #0
 800e34a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e34e:	2301      	movs	r3, #1
 800e350:	e023      	b.n	800e39a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e35c:	2b40      	cmp	r3, #64	@ 0x40
 800e35e:	d007      	beq.n	800e370 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e36e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2200      	movs	r2, #0
 800e374:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	685a      	ldr	r2, [r3, #4]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f042 0220 	orr.w	r2, r2, #32
 800e386:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f042 0201 	orr.w	r2, r2, #1
 800e396:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	0800ebc7 	.word	0x0800ebc7
 800e3a8:	0800ea73 	.word	0x0800ea73
 800e3ac:	0800ebff 	.word	0x0800ebff

0800e3b0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e3c4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e3cc:	7dfb      	ldrb	r3, [r7, #23]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d00c      	beq.n	800e3ec <HAL_SPI_TransmitReceive_DMA+0x3c>
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e3d8:	d106      	bne.n	800e3e8 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d102      	bne.n	800e3e8 <HAL_SPI_TransmitReceive_DMA+0x38>
 800e3e2:	7dfb      	ldrb	r3, [r7, #23]
 800e3e4:	2b04      	cmp	r3, #4
 800e3e6:	d001      	beq.n	800e3ec <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	e158      	b.n	800e69e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d005      	beq.n	800e3fe <HAL_SPI_TransmitReceive_DMA+0x4e>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <HAL_SPI_TransmitReceive_DMA+0x4e>
 800e3f8:	887b      	ldrh	r3, [r7, #2]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d101      	bne.n	800e402 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e14d      	b.n	800e69e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d101      	bne.n	800e410 <HAL_SPI_TransmitReceive_DMA+0x60>
 800e40c:	2302      	movs	r3, #2
 800e40e:	e146      	b.n	800e69e <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2201      	movs	r2, #1
 800e414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	2b04      	cmp	r3, #4
 800e422:	d003      	beq.n	800e42c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2205      	movs	r2, #5
 800e428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	68ba      	ldr	r2, [r7, #8]
 800e436:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	887a      	ldrh	r2, [r7, #2]
 800e43c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	887a      	ldrh	r2, [r7, #2]
 800e442:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	887a      	ldrh	r2, [r7, #2]
 800e44e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	887a      	ldrh	r2, [r7, #2]
 800e456:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2200      	movs	r2, #0
 800e464:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800e474:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e47e:	d908      	bls.n	800e492 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	685a      	ldr	r2, [r3, #4]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e48e:	605a      	str	r2, [r3, #4]
 800e490:	e06f      	b.n	800e572 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	685a      	ldr	r2, [r3, #4]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e4a0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4ac:	d126      	bne.n	800e4fc <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800e4b2:	f003 0301 	and.w	r3, r3, #1
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10f      	bne.n	800e4da <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	685a      	ldr	r2, [r3, #4]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e4c8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	085b      	lsrs	r3, r3, #1
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e4d8:	e010      	b.n	800e4fc <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	685a      	ldr	r2, [r3, #4]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e4e8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	085b      	lsrs	r3, r3, #1
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e500:	699b      	ldr	r3, [r3, #24]
 800e502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e506:	d134      	bne.n	800e572 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	685a      	ldr	r2, [r3, #4]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e516:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e51e:	b29b      	uxth	r3, r3
 800e520:	f003 0301 	and.w	r3, r3, #1
 800e524:	2b00      	cmp	r3, #0
 800e526:	d111      	bne.n	800e54c <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	685a      	ldr	r2, [r3, #4]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e536:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e53e:	b29b      	uxth	r3, r3
 800e540:	085b      	lsrs	r3, r3, #1
 800e542:	b29a      	uxth	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e54a:	e012      	b.n	800e572 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	685a      	ldr	r2, [r3, #4]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e55a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e562:	b29b      	uxth	r3, r3
 800e564:	085b      	lsrs	r3, r3, #1
 800e566:	b29b      	uxth	r3, r3
 800e568:	3301      	adds	r3, #1
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b04      	cmp	r3, #4
 800e57c:	d108      	bne.n	800e590 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e582:	4a49      	ldr	r2, [pc, #292]	@ (800e6a8 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800e584:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e58a:	4a48      	ldr	r2, [pc, #288]	@ (800e6ac <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800e58c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e58e:	e007      	b.n	800e5a0 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e594:	4a46      	ldr	r2, [pc, #280]	@ (800e6b0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800e596:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e59c:	4a45      	ldr	r2, [pc, #276]	@ (800e6b4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e59e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5a4:	4a44      	ldr	r2, [pc, #272]	@ (800e6b8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e5a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	330c      	adds	r3, #12
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5c0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e5c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e5ca:	f7fa fb2d 	bl	8008c28 <HAL_DMA_Start_IT>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00b      	beq.n	800e5ec <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5d8:	f043 0210 	orr.w	r2, r3, #16
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	e058      	b.n	800e69e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f042 0201 	orr.w	r2, r2, #1
 800e5fa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e600:	2200      	movs	r2, #0
 800e602:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e608:	2200      	movs	r2, #0
 800e60a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e610:	2200      	movs	r2, #0
 800e612:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e618:	2200      	movs	r2, #0
 800e61a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e624:	4619      	mov	r1, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	330c      	adds	r3, #12
 800e62c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e632:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e634:	f7fa faf8 	bl	8008c28 <HAL_DMA_Start_IT>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00b      	beq.n	800e656 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e642:	f043 0210 	orr.w	r2, r3, #16
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2200      	movs	r2, #0
 800e64e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e652:	2301      	movs	r3, #1
 800e654:	e023      	b.n	800e69e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e660:	2b40      	cmp	r3, #64	@ 0x40
 800e662:	d007      	beq.n	800e674 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e672:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2200      	movs	r2, #0
 800e678:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	685a      	ldr	r2, [r3, #4]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f042 0220 	orr.w	r2, r2, #32
 800e68a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f042 0202 	orr.w	r2, r2, #2
 800e69a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3718      	adds	r7, #24
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	0800ebc7 	.word	0x0800ebc7
 800e6ac:	0800ea73 	.word	0x0800ea73
 800e6b0:	0800ebe3 	.word	0x0800ebe3
 800e6b4:	0800eb1b 	.word	0x0800eb1b
 800e6b8:	0800ebff 	.word	0x0800ebff

0800e6bc <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d00f      	beq.n	800e6f0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fa fb22 	bl	8008d1e <HAL_DMA_Abort>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d007      	beq.n	800e6f0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e6e4:	f043 0210 	orr.w	r2, r3, #16
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00f      	beq.n	800e718 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fa fb0e 	bl	8008d1e <HAL_DMA_Abort>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d007      	beq.n	800e718 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e70c:	f043 0210 	orr.w	r2, r3, #16
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	685a      	ldr	r2, [r3, #4]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f022 0203 	bic.w	r2, r2, #3
 800e726:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2201      	movs	r2, #1
 800e72c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 800e730:	7bfb      	ldrb	r3, [r7, #15]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
	...

0800e73c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b088      	sub	sp, #32
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	689b      	ldr	r3, [r3, #8]
 800e752:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10e      	bne.n	800e77c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e764:	2b00      	cmp	r3, #0
 800e766:	d009      	beq.n	800e77c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d004      	beq.n	800e77c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	4798      	blx	r3
    return;
 800e77a:	e0ce      	b.n	800e91a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	f003 0302 	and.w	r3, r3, #2
 800e782:	2b00      	cmp	r3, #0
 800e784:	d009      	beq.n	800e79a <HAL_SPI_IRQHandler+0x5e>
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d004      	beq.n	800e79a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	4798      	blx	r3
    return;
 800e798:	e0bf      	b.n	800e91a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	f003 0320 	and.w	r3, r3, #32
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10a      	bne.n	800e7ba <HAL_SPI_IRQHandler+0x7e>
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d105      	bne.n	800e7ba <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f000 80b0 	beq.w	800e91a <HAL_SPI_IRQHandler+0x1de>
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	f003 0320 	and.w	r3, r3, #32
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 80aa 	beq.w	800e91a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d023      	beq.n	800e818 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	2b03      	cmp	r3, #3
 800e7da:	d011      	beq.n	800e800 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e7e0:	f043 0204 	orr.w	r2, r3, #4
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	617b      	str	r3, [r7, #20]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	689b      	ldr	r3, [r3, #8]
 800e7fa:	617b      	str	r3, [r7, #20]
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	e00b      	b.n	800e818 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e800:	2300      	movs	r3, #0
 800e802:	613b      	str	r3, [r7, #16]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	68db      	ldr	r3, [r3, #12]
 800e80a:	613b      	str	r3, [r7, #16]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	613b      	str	r3, [r7, #16]
 800e814:	693b      	ldr	r3, [r7, #16]
        return;
 800e816:	e080      	b.n	800e91a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	f003 0320 	and.w	r3, r3, #32
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d014      	beq.n	800e84c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e826:	f043 0201 	orr.w	r2, r3, #1
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e82e:	2300      	movs	r3, #0
 800e830:	60fb      	str	r3, [r7, #12]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	60fb      	str	r3, [r7, #12]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00c      	beq.n	800e870 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e85a:	f043 0208 	orr.w	r2, r3, #8
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e862:	2300      	movs	r3, #0
 800e864:	60bb      	str	r3, [r7, #8]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	60bb      	str	r3, [r7, #8]
 800e86e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e874:	2b00      	cmp	r3, #0
 800e876:	d04f      	beq.n	800e918 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	685a      	ldr	r2, [r3, #4]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e886:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	f003 0302 	and.w	r3, r3, #2
 800e896:	2b00      	cmp	r3, #0
 800e898:	d104      	bne.n	800e8a4 <HAL_SPI_IRQHandler+0x168>
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	f003 0301 	and.w	r3, r3, #1
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d034      	beq.n	800e90e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	685a      	ldr	r2, [r3, #4]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f022 0203 	bic.w	r2, r2, #3
 800e8b2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d011      	beq.n	800e8e0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8c0:	4a17      	ldr	r2, [pc, #92]	@ (800e920 <HAL_SPI_IRQHandler+0x1e4>)
 800e8c2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fa fa87 	bl	8008ddc <HAL_DMA_Abort_IT>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d005      	beq.n	800e8e0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d016      	beq.n	800e916 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8ec:	4a0c      	ldr	r2, [pc, #48]	@ (800e920 <HAL_SPI_IRQHandler+0x1e4>)
 800e8ee:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fa fa71 	bl	8008ddc <HAL_DMA_Abort_IT>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00a      	beq.n	800e916 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e904:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800e90c:	e003      	b.n	800e916 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 f844 	bl	800e99c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e914:	e000      	b.n	800e918 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800e916:	bf00      	nop
    return;
 800e918:	bf00      	nop
  }
}
 800e91a:	3720      	adds	r7, #32
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	0800ec3f 	.word	0x0800ec3f

0800e924 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e92c:	bf00      	nop
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e954:	bf00      	nop
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e968:	bf00      	nop
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e988:	b480      	push	{r7}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e990:	bf00      	nop
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e9a4:	bf00      	nop
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e9be:	b2db      	uxtb	r3, r3
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e9da:	f7f8 fda9 	bl	8007530 <HAL_GetTick>
 800e9de:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f003 0320 	and.w	r3, r3, #32
 800e9ea:	2b20      	cmp	r3, #32
 800e9ec:	d03b      	beq.n	800ea66 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	685a      	ldr	r2, [r3, #4]
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f022 0220 	bic.w	r2, r2, #32
 800e9fc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	685a      	ldr	r2, [r3, #4]
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f022 0202 	bic.w	r2, r2, #2
 800ea0c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ea0e:	693a      	ldr	r2, [r7, #16]
 800ea10:	2164      	movs	r1, #100	@ 0x64
 800ea12:	6978      	ldr	r0, [r7, #20]
 800ea14:	f000 fa9e 	bl	800ef54 <SPI_EndRxTxTransaction>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d005      	beq.n	800ea2a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea22:	f043 0220 	orr.w	r2, r3, #32
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d10a      	bne.n	800ea48 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea32:	2300      	movs	r3, #0
 800ea34:	60fb      	str	r3, [r7, #12]
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	60fb      	str	r3, [r7, #12]
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	60fb      	str	r3, [r7, #12]
 800ea46:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d003      	beq.n	800ea66 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ea5e:	6978      	ldr	r0, [r7, #20]
 800ea60:	f7ff ff9c 	bl	800e99c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ea64:	e002      	b.n	800ea6c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ea66:	6978      	ldr	r0, [r7, #20]
 800ea68:	f7ff ff5c 	bl	800e924 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea6c:	3718      	adds	r7, #24
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b084      	sub	sp, #16
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea7e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea80:	f7f8 fd56 	bl	8007530 <HAL_GetTick>
 800ea84:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f003 0320 	and.w	r3, r3, #32
 800ea90:	2b20      	cmp	r3, #32
 800ea92:	d03c      	beq.n	800eb0e <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	685a      	ldr	r2, [r3, #4]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f022 0220 	bic.w	r2, r2, #32
 800eaa2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10d      	bne.n	800eac8 <SPI_DMAReceiveCplt+0x56>
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eab4:	d108      	bne.n	800eac8 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f022 0203 	bic.w	r2, r2, #3
 800eac4:	605a      	str	r2, [r3, #4]
 800eac6:	e007      	b.n	800ead8 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	685a      	ldr	r2, [r3, #4]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f022 0201 	bic.w	r2, r2, #1
 800ead6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	2164      	movs	r1, #100	@ 0x64
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f000 f9e1 	bl	800eea4 <SPI_EndRxTransaction>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2220      	movs	r2, #32
 800eaec:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d003      	beq.n	800eb0e <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f7ff ff48 	bl	800e99c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800eb0c:	e002      	b.n	800eb14 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f7ff ff12 	bl	800e938 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b084      	sub	sp, #16
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb26:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb28:	f7f8 fd02 	bl	8007530 <HAL_GetTick>
 800eb2c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f003 0320 	and.w	r3, r3, #32
 800eb38:	2b20      	cmp	r3, #32
 800eb3a:	d030      	beq.n	800eb9e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	685a      	ldr	r2, [r3, #4]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f022 0220 	bic.w	r2, r2, #32
 800eb4a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	2164      	movs	r1, #100	@ 0x64
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f000 f9ff 	bl	800ef54 <SPI_EndRxTxTransaction>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d005      	beq.n	800eb68 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb60:	f043 0220 	orr.w	r2, r3, #32
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	685a      	ldr	r2, [r3, #4]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f022 0203 	bic.w	r2, r2, #3
 800eb76:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d003      	beq.n	800eb9e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f7ff ff00 	bl	800e99c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800eb9c:	e002      	b.n	800eba4 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f7ff fed4 	bl	800e94c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b084      	sub	sp, #16
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebb6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f7ff fed1 	bl	800e960 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ebbe:	bf00      	nop
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b084      	sub	sp, #16
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebd2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7ff fecd 	bl	800e974 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ebda:	bf00      	nop
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebee:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f7ff fec9 	bl	800e988 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ebf6:	bf00      	nop
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b084      	sub	sp, #16
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec0a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685a      	ldr	r2, [r3, #4]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f022 0203 	bic.w	r2, r2, #3
 800ec1a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec20:	f043 0210 	orr.w	r2, r3, #16
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f7ff feb3 	bl	800e99c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ec36:	bf00      	nop
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b084      	sub	sp, #16
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec4a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f7ff fe9e 	bl	800e99c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ec60:	bf00      	nop
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	603b      	str	r3, [r7, #0]
 800ec74:	4613      	mov	r3, r2
 800ec76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ec78:	f7f8 fc5a 	bl	8007530 <HAL_GetTick>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec80:	1a9b      	subs	r3, r3, r2
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	4413      	add	r3, r2
 800ec86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ec88:	f7f8 fc52 	bl	8007530 <HAL_GetTick>
 800ec8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ec8e:	4b39      	ldr	r3, [pc, #228]	@ (800ed74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	015b      	lsls	r3, r3, #5
 800ec94:	0d1b      	lsrs	r3, r3, #20
 800ec96:	69fa      	ldr	r2, [r7, #28]
 800ec98:	fb02 f303 	mul.w	r3, r2, r3
 800ec9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec9e:	e054      	b.n	800ed4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca6:	d050      	beq.n	800ed4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eca8:	f7f8 fc42 	bl	8007530 <HAL_GetTick>
 800ecac:	4602      	mov	r2, r0
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	69fa      	ldr	r2, [r7, #28]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d902      	bls.n	800ecbe <SPI_WaitFlagStateUntilTimeout+0x56>
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d13d      	bne.n	800ed3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800eccc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ecd6:	d111      	bne.n	800ecfc <SPI_WaitFlagStateUntilTimeout+0x94>
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	689b      	ldr	r3, [r3, #8]
 800ecdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ece0:	d004      	beq.n	800ecec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ecea:	d107      	bne.n	800ecfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ecfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed04:	d10f      	bne.n	800ed26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ed14:	601a      	str	r2, [r3, #0]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ed24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ed36:	2303      	movs	r3, #3
 800ed38:	e017      	b.n	800ed6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ed40:	2300      	movs	r3, #0
 800ed42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	3b01      	subs	r3, #1
 800ed48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	689a      	ldr	r2, [r3, #8]
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	4013      	ands	r3, r2
 800ed54:	68ba      	ldr	r2, [r7, #8]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	bf0c      	ite	eq
 800ed5a:	2301      	moveq	r3, #1
 800ed5c:	2300      	movne	r3, #0
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	461a      	mov	r2, r3
 800ed62:	79fb      	ldrb	r3, [r7, #7]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d19b      	bne.n	800eca0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3720      	adds	r7, #32
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	2000002c 	.word	0x2000002c

0800ed78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b08a      	sub	sp, #40	@ 0x28
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	60b9      	str	r1, [r7, #8]
 800ed82:	607a      	str	r2, [r7, #4]
 800ed84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ed86:	2300      	movs	r3, #0
 800ed88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ed8a:	f7f8 fbd1 	bl	8007530 <HAL_GetTick>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed92:	1a9b      	subs	r3, r3, r2
 800ed94:	683a      	ldr	r2, [r7, #0]
 800ed96:	4413      	add	r3, r2
 800ed98:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ed9a:	f7f8 fbc9 	bl	8007530 <HAL_GetTick>
 800ed9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	330c      	adds	r3, #12
 800eda6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800eda8:	4b3d      	ldr	r3, [pc, #244]	@ (800eea0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	4613      	mov	r3, r2
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4413      	add	r3, r2
 800edb2:	00da      	lsls	r2, r3, #3
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	0d1b      	lsrs	r3, r3, #20
 800edb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edba:	fb02 f303 	mul.w	r3, r2, r3
 800edbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800edc0:	e060      	b.n	800ee84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800edc8:	d107      	bne.n	800edda <SPI_WaitFifoStateUntilTimeout+0x62>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d104      	bne.n	800edda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800edd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede0:	d050      	beq.n	800ee84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ede2:	f7f8 fba5 	bl	8007530 <HAL_GetTick>
 800ede6:	4602      	mov	r2, r0
 800ede8:	6a3b      	ldr	r3, [r7, #32]
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edee:	429a      	cmp	r2, r3
 800edf0:	d902      	bls.n	800edf8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800edf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d13d      	bne.n	800ee74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	685a      	ldr	r2, [r3, #4]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ee06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ee10:	d111      	bne.n	800ee36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	689b      	ldr	r3, [r3, #8]
 800ee16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee1a:	d004      	beq.n	800ee26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee24:	d107      	bne.n	800ee36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ee34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee3e:	d10f      	bne.n	800ee60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ee4e:	601a      	str	r2, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ee5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ee70:	2303      	movs	r3, #3
 800ee72:	e010      	b.n	800ee96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d101      	bne.n	800ee7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	3b01      	subs	r3, #1
 800ee82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	689a      	ldr	r2, [r3, #8]
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d196      	bne.n	800edc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3728      	adds	r7, #40	@ 0x28
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	2000002c 	.word	0x2000002c

0800eea4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af02      	add	r7, sp, #8
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eeb8:	d111      	bne.n	800eede <SPI_EndRxTransaction+0x3a>
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eec2:	d004      	beq.n	800eece <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eecc:	d107      	bne.n	800eede <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eedc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2200      	movs	r2, #0
 800eee6:	2180      	movs	r1, #128	@ 0x80
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f7ff febd 	bl	800ec68 <SPI_WaitFlagStateUntilTimeout>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d007      	beq.n	800ef04 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eef8:	f043 0220 	orr.w	r2, r3, #32
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ef00:	2303      	movs	r3, #3
 800ef02:	e023      	b.n	800ef4c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ef0c:	d11d      	bne.n	800ef4a <SPI_EndRxTransaction+0xa6>
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef16:	d004      	beq.n	800ef22 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef20:	d113      	bne.n	800ef4a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	9300      	str	r3, [sp, #0]
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f7ff ff22 	bl	800ed78 <SPI_WaitFifoStateUntilTimeout>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d007      	beq.n	800ef4a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef3e:	f043 0220 	orr.w	r2, r3, #32
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ef46:	2303      	movs	r3, #3
 800ef48:	e000      	b.n	800ef4c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af02      	add	r7, sp, #8
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f7ff ff03 	bl	800ed78 <SPI_WaitFifoStateUntilTimeout>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d007      	beq.n	800ef88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef7c:	f043 0220 	orr.w	r2, r3, #32
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ef84:	2303      	movs	r3, #3
 800ef86:	e027      	b.n	800efd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	2180      	movs	r1, #128	@ 0x80
 800ef92:	68f8      	ldr	r0, [r7, #12]
 800ef94:	f7ff fe68 	bl	800ec68 <SPI_WaitFlagStateUntilTimeout>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d007      	beq.n	800efae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efa2:	f043 0220 	orr.w	r2, r3, #32
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800efaa:	2303      	movs	r3, #3
 800efac:	e014      	b.n	800efd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f7ff fedc 	bl	800ed78 <SPI_WaitFifoStateUntilTimeout>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d007      	beq.n	800efd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efca:	f043 0220 	orr.w	r2, r3, #32
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800efd2:	2303      	movs	r3, #3
 800efd4:	e000      	b.n	800efd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800efd6:	2300      	movs	r3, #0
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d101      	bne.n	800eff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800efee:	2301      	movs	r3, #1
 800eff0:	e049      	b.n	800f086 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b00      	cmp	r3, #0
 800effc:	d106      	bne.n	800f00c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7f7 fdbc 	bl	8006b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2202      	movs	r2, #2
 800f010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	3304      	adds	r3, #4
 800f01c:	4619      	mov	r1, r3
 800f01e:	4610      	mov	r0, r2
 800f020:	f000 fafc 	bl	800f61c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2201      	movs	r2, #1
 800f030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2201      	movs	r2, #1
 800f070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3708      	adds	r7, #8
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
	...

0800f090 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f090:	b480      	push	{r7}
 800f092:	b085      	sub	sp, #20
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d001      	beq.n	800f0a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e02e      	b.n	800f106 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2202      	movs	r2, #2
 800f0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4a17      	ldr	r2, [pc, #92]	@ (800f114 <HAL_TIM_Base_Start+0x84>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d004      	beq.n	800f0c4 <HAL_TIM_Base_Start+0x34>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0c2:	d115      	bne.n	800f0f0 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	689a      	ldr	r2, [r3, #8]
 800f0ca:	4b13      	ldr	r3, [pc, #76]	@ (800f118 <HAL_TIM_Base_Start+0x88>)
 800f0cc:	4013      	ands	r3, r2
 800f0ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2b06      	cmp	r3, #6
 800f0d4:	d015      	beq.n	800f102 <HAL_TIM_Base_Start+0x72>
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0dc:	d011      	beq.n	800f102 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f042 0201 	orr.w	r2, r2, #1
 800f0ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0ee:	e008      	b.n	800f102 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f042 0201 	orr.w	r2, r2, #1
 800f0fe:	601a      	str	r2, [r3, #0]
 800f100:	e000      	b.n	800f104 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f102:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f104:	2300      	movs	r3, #0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3714      	adds	r7, #20
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	40012c00 	.word	0x40012c00
 800f118:	00010007 	.word	0x00010007

0800f11c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d001      	beq.n	800f134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f130:	2301      	movs	r3, #1
 800f132:	e036      	b.n	800f1a2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2202      	movs	r2, #2
 800f138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	68da      	ldr	r2, [r3, #12]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f042 0201 	orr.w	r2, r2, #1
 800f14a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4a17      	ldr	r2, [pc, #92]	@ (800f1b0 <HAL_TIM_Base_Start_IT+0x94>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d004      	beq.n	800f160 <HAL_TIM_Base_Start_IT+0x44>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f15e:	d115      	bne.n	800f18c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	689a      	ldr	r2, [r3, #8]
 800f166:	4b13      	ldr	r3, [pc, #76]	@ (800f1b4 <HAL_TIM_Base_Start_IT+0x98>)
 800f168:	4013      	ands	r3, r2
 800f16a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2b06      	cmp	r3, #6
 800f170:	d015      	beq.n	800f19e <HAL_TIM_Base_Start_IT+0x82>
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f178:	d011      	beq.n	800f19e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f042 0201 	orr.w	r2, r2, #1
 800f188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f18a:	e008      	b.n	800f19e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f042 0201 	orr.w	r2, r2, #1
 800f19a:	601a      	str	r2, [r3, #0]
 800f19c:	e000      	b.n	800f1a0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f19e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	40012c00 	.word	0x40012c00
 800f1b4:	00010007 	.word	0x00010007

0800f1b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	68da      	ldr	r2, [r3, #12]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f022 0201 	bic.w	r2, r2, #1
 800f1ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	6a1a      	ldr	r2, [r3, #32]
 800f1d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f1da:	4013      	ands	r3, r2
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d10f      	bne.n	800f200 <HAL_TIM_Base_Stop_IT+0x48>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	6a1a      	ldr	r2, [r3, #32]
 800f1e6:	f240 4344 	movw	r3, #1092	@ 0x444
 800f1ea:	4013      	ands	r3, r2
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d107      	bne.n	800f200 <HAL_TIM_Base_Stop_IT+0x48>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f022 0201 	bic.w	r2, r2, #1
 800f1fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2201      	movs	r2, #1
 800f204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	370c      	adds	r7, #12
 800f20e:	46bd      	mov	sp, r7
 800f210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f214:	4770      	bx	lr

0800f216 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	691b      	ldr	r3, [r3, #16]
 800f22c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	f003 0302 	and.w	r3, r3, #2
 800f234:	2b00      	cmp	r3, #0
 800f236:	d020      	beq.n	800f27a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f003 0302 	and.w	r3, r3, #2
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d01b      	beq.n	800f27a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f06f 0202 	mvn.w	r2, #2
 800f24a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	f003 0303 	and.w	r3, r3, #3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d003      	beq.n	800f268 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 f9bc 	bl	800f5de <HAL_TIM_IC_CaptureCallback>
 800f266:	e005      	b.n	800f274 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 f9ae 	bl	800f5ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 f9bf 	bl	800f5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2200      	movs	r2, #0
 800f278:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	f003 0304 	and.w	r3, r3, #4
 800f280:	2b00      	cmp	r3, #0
 800f282:	d020      	beq.n	800f2c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f003 0304 	and.w	r3, r3, #4
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d01b      	beq.n	800f2c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f06f 0204 	mvn.w	r2, #4
 800f296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2202      	movs	r2, #2
 800f29c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	699b      	ldr	r3, [r3, #24]
 800f2a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d003      	beq.n	800f2b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f000 f996 	bl	800f5de <HAL_TIM_IC_CaptureCallback>
 800f2b2:	e005      	b.n	800f2c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f988 	bl	800f5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 f999 	bl	800f5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	f003 0308 	and.w	r3, r3, #8
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d020      	beq.n	800f312 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f003 0308 	and.w	r3, r3, #8
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d01b      	beq.n	800f312 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f06f 0208 	mvn.w	r2, #8
 800f2e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2204      	movs	r2, #4
 800f2e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	69db      	ldr	r3, [r3, #28]
 800f2f0:	f003 0303 	and.w	r3, r3, #3
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d003      	beq.n	800f300 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 f970 	bl	800f5de <HAL_TIM_IC_CaptureCallback>
 800f2fe:	e005      	b.n	800f30c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 f962 	bl	800f5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 f973 	bl	800f5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	f003 0310 	and.w	r3, r3, #16
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d020      	beq.n	800f35e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f003 0310 	and.w	r3, r3, #16
 800f322:	2b00      	cmp	r3, #0
 800f324:	d01b      	beq.n	800f35e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f06f 0210 	mvn.w	r2, #16
 800f32e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2208      	movs	r2, #8
 800f334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	69db      	ldr	r3, [r3, #28]
 800f33c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f340:	2b00      	cmp	r3, #0
 800f342:	d003      	beq.n	800f34c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 f94a 	bl	800f5de <HAL_TIM_IC_CaptureCallback>
 800f34a:	e005      	b.n	800f358 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 f93c 	bl	800f5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 f94d 	bl	800f5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	f003 0301 	and.w	r3, r3, #1
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00c      	beq.n	800f382 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f003 0301 	and.w	r3, r3, #1
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d007      	beq.n	800f382 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f06f 0201 	mvn.w	r2, #1
 800f37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f91a 	bl	800f5b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d104      	bne.n	800f396 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00c      	beq.n	800f3b0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d007      	beq.n	800f3b0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f3a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 faac 	bl	800f908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00c      	beq.n	800f3d4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d007      	beq.n	800f3d4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 faa4 	bl	800f91c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00c      	beq.n	800f3f8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d007      	beq.n	800f3f8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 f907 	bl	800f606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	f003 0320 	and.w	r3, r3, #32
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00c      	beq.n	800f41c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f003 0320 	and.w	r3, r3, #32
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d007      	beq.n	800f41c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	f06f 0220 	mvn.w	r2, #32
 800f414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 fa6c 	bl	800f8f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f41c:	bf00      	nop
 800f41e:	3710      	adds	r7, #16
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f42e:	2300      	movs	r3, #0
 800f430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d101      	bne.n	800f440 <HAL_TIM_ConfigClockSource+0x1c>
 800f43c:	2302      	movs	r3, #2
 800f43e:	e0b6      	b.n	800f5ae <HAL_TIM_ConfigClockSource+0x18a>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2201      	movs	r2, #1
 800f444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2202      	movs	r2, #2
 800f44c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	689b      	ldr	r3, [r3, #8]
 800f456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f45e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f46a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	68ba      	ldr	r2, [r7, #8]
 800f472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f47c:	d03e      	beq.n	800f4fc <HAL_TIM_ConfigClockSource+0xd8>
 800f47e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f482:	f200 8087 	bhi.w	800f594 <HAL_TIM_ConfigClockSource+0x170>
 800f486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f48a:	f000 8086 	beq.w	800f59a <HAL_TIM_ConfigClockSource+0x176>
 800f48e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f492:	d87f      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x170>
 800f494:	2b70      	cmp	r3, #112	@ 0x70
 800f496:	d01a      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0xaa>
 800f498:	2b70      	cmp	r3, #112	@ 0x70
 800f49a:	d87b      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x170>
 800f49c:	2b60      	cmp	r3, #96	@ 0x60
 800f49e:	d050      	beq.n	800f542 <HAL_TIM_ConfigClockSource+0x11e>
 800f4a0:	2b60      	cmp	r3, #96	@ 0x60
 800f4a2:	d877      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x170>
 800f4a4:	2b50      	cmp	r3, #80	@ 0x50
 800f4a6:	d03c      	beq.n	800f522 <HAL_TIM_ConfigClockSource+0xfe>
 800f4a8:	2b50      	cmp	r3, #80	@ 0x50
 800f4aa:	d873      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x170>
 800f4ac:	2b40      	cmp	r3, #64	@ 0x40
 800f4ae:	d058      	beq.n	800f562 <HAL_TIM_ConfigClockSource+0x13e>
 800f4b0:	2b40      	cmp	r3, #64	@ 0x40
 800f4b2:	d86f      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x170>
 800f4b4:	2b30      	cmp	r3, #48	@ 0x30
 800f4b6:	d064      	beq.n	800f582 <HAL_TIM_ConfigClockSource+0x15e>
 800f4b8:	2b30      	cmp	r3, #48	@ 0x30
 800f4ba:	d86b      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x170>
 800f4bc:	2b20      	cmp	r3, #32
 800f4be:	d060      	beq.n	800f582 <HAL_TIM_ConfigClockSource+0x15e>
 800f4c0:	2b20      	cmp	r3, #32
 800f4c2:	d867      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x170>
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d05c      	beq.n	800f582 <HAL_TIM_ConfigClockSource+0x15e>
 800f4c8:	2b10      	cmp	r3, #16
 800f4ca:	d05a      	beq.n	800f582 <HAL_TIM_ConfigClockSource+0x15e>
 800f4cc:	e062      	b.n	800f594 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f4de:	f000 f989 	bl	800f7f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f4f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	68ba      	ldr	r2, [r7, #8]
 800f4f8:	609a      	str	r2, [r3, #8]
      break;
 800f4fa:	e04f      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f50c:	f000 f972 	bl	800f7f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	689a      	ldr	r2, [r3, #8]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f51e:	609a      	str	r2, [r3, #8]
      break;
 800f520:	e03c      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f52e:	461a      	mov	r2, r3
 800f530:	f000 f8e4 	bl	800f6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2150      	movs	r1, #80	@ 0x50
 800f53a:	4618      	mov	r0, r3
 800f53c:	f000 f93d 	bl	800f7ba <TIM_ITRx_SetConfig>
      break;
 800f540:	e02c      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f54e:	461a      	mov	r2, r3
 800f550:	f000 f903 	bl	800f75a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2160      	movs	r1, #96	@ 0x60
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 f92d 	bl	800f7ba <TIM_ITRx_SetConfig>
      break;
 800f560:	e01c      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f56e:	461a      	mov	r2, r3
 800f570:	f000 f8c4 	bl	800f6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2140      	movs	r1, #64	@ 0x40
 800f57a:	4618      	mov	r0, r3
 800f57c:	f000 f91d 	bl	800f7ba <TIM_ITRx_SetConfig>
      break;
 800f580:	e00c      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4619      	mov	r1, r3
 800f58c:	4610      	mov	r0, r2
 800f58e:	f000 f914 	bl	800f7ba <TIM_ITRx_SetConfig>
      break;
 800f592:	e003      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f594:	2301      	movs	r3, #1
 800f596:	73fb      	strb	r3, [r7, #15]
      break;
 800f598:	e000      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f59a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3710      	adds	r7, #16
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f5be:	bf00      	nop
 800f5c0:	370c      	adds	r7, #12
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr

0800f5ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f5ca:	b480      	push	{r7}
 800f5cc:	b083      	sub	sp, #12
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f5d2:	bf00      	nop
 800f5d4:	370c      	adds	r7, #12
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr

0800f5de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f5de:	b480      	push	{r7}
 800f5e0:	b083      	sub	sp, #12
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f5e6:	bf00      	nop
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr

0800f5f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f5f2:	b480      	push	{r7}
 800f5f4:	b083      	sub	sp, #12
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f5fa:	bf00      	nop
 800f5fc:	370c      	adds	r7, #12
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr

0800f606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f606:	b480      	push	{r7}
 800f608:	b083      	sub	sp, #12
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f60e:	bf00      	nop
 800f610:	370c      	adds	r7, #12
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr
	...

0800f61c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b085      	sub	sp, #20
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4a30      	ldr	r2, [pc, #192]	@ (800f6f0 <TIM_Base_SetConfig+0xd4>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d003      	beq.n	800f63c <TIM_Base_SetConfig+0x20>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f63a:	d108      	bne.n	800f64e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	4313      	orrs	r3, r2
 800f64c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4a27      	ldr	r2, [pc, #156]	@ (800f6f0 <TIM_Base_SetConfig+0xd4>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d00b      	beq.n	800f66e <TIM_Base_SetConfig+0x52>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f65c:	d007      	beq.n	800f66e <TIM_Base_SetConfig+0x52>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4a24      	ldr	r2, [pc, #144]	@ (800f6f4 <TIM_Base_SetConfig+0xd8>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d003      	beq.n	800f66e <TIM_Base_SetConfig+0x52>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4a23      	ldr	r2, [pc, #140]	@ (800f6f8 <TIM_Base_SetConfig+0xdc>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d108      	bne.n	800f680 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	4313      	orrs	r3, r2
 800f67e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	695b      	ldr	r3, [r3, #20]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	689a      	ldr	r2, [r3, #8]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	4a12      	ldr	r2, [pc, #72]	@ (800f6f0 <TIM_Base_SetConfig+0xd4>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d007      	beq.n	800f6bc <TIM_Base_SetConfig+0xa0>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4a11      	ldr	r2, [pc, #68]	@ (800f6f4 <TIM_Base_SetConfig+0xd8>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d003      	beq.n	800f6bc <TIM_Base_SetConfig+0xa0>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4a10      	ldr	r2, [pc, #64]	@ (800f6f8 <TIM_Base_SetConfig+0xdc>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d103      	bne.n	800f6c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	691a      	ldr	r2, [r3, #16]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	691b      	ldr	r3, [r3, #16]
 800f6ce:	f003 0301 	and.w	r3, r3, #1
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d105      	bne.n	800f6e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	691b      	ldr	r3, [r3, #16]
 800f6da:	f023 0201 	bic.w	r2, r3, #1
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	611a      	str	r2, [r3, #16]
  }
}
 800f6e2:	bf00      	nop
 800f6e4:	3714      	adds	r7, #20
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	40012c00 	.word	0x40012c00
 800f6f4:	40014400 	.word	0x40014400
 800f6f8:	40014800 	.word	0x40014800

0800f6fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b087      	sub	sp, #28
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	6a1b      	ldr	r3, [r3, #32]
 800f70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	f023 0201 	bic.w	r2, r3, #1
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	699b      	ldr	r3, [r3, #24]
 800f71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	011b      	lsls	r3, r3, #4
 800f72c:	693a      	ldr	r2, [r7, #16]
 800f72e:	4313      	orrs	r3, r2
 800f730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f023 030a 	bic.w	r3, r3, #10
 800f738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4313      	orrs	r3, r2
 800f740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	693a      	ldr	r2, [r7, #16]
 800f746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	621a      	str	r2, [r3, #32]
}
 800f74e:	bf00      	nop
 800f750:	371c      	adds	r7, #28
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr

0800f75a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f75a:	b480      	push	{r7}
 800f75c:	b087      	sub	sp, #28
 800f75e:	af00      	add	r7, sp, #0
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6a1b      	ldr	r3, [r3, #32]
 800f770:	f023 0210 	bic.w	r2, r3, #16
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	699b      	ldr	r3, [r3, #24]
 800f77c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	031b      	lsls	r3, r3, #12
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f796:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	011b      	lsls	r3, r3, #4
 800f79c:	697a      	ldr	r2, [r7, #20]
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	693a      	ldr	r2, [r7, #16]
 800f7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	697a      	ldr	r2, [r7, #20]
 800f7ac:	621a      	str	r2, [r3, #32]
}
 800f7ae:	bf00      	nop
 800f7b0:	371c      	adds	r7, #28
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr

0800f7ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f7ba:	b480      	push	{r7}
 800f7bc:	b085      	sub	sp, #20
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
 800f7c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f7d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f7d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f7d6:	683a      	ldr	r2, [r7, #0]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	f043 0307 	orr.w	r3, r3, #7
 800f7e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	609a      	str	r2, [r3, #8]
}
 800f7e8:	bf00      	nop
 800f7ea:	3714      	adds	r7, #20
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	607a      	str	r2, [r7, #4]
 800f800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	689b      	ldr	r3, [r3, #8]
 800f806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f80e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	021a      	lsls	r2, r3, #8
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	431a      	orrs	r2, r3
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	4313      	orrs	r3, r2
 800f820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	697a      	ldr	r2, [r7, #20]
 800f826:	609a      	str	r2, [r3, #8]
}
 800f828:	bf00      	nop
 800f82a:	371c      	adds	r7, #28
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f844:	2b01      	cmp	r3, #1
 800f846:	d101      	bne.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f848:	2302      	movs	r3, #2
 800f84a:	e04a      	b.n	800f8e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2201      	movs	r2, #1
 800f850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2202      	movs	r2, #2
 800f858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a1f      	ldr	r2, [pc, #124]	@ (800f8f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d108      	bne.n	800f888 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f87c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	4313      	orrs	r3, r2
 800f886:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f88e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68fa      	ldr	r2, [r7, #12]
 800f896:	4313      	orrs	r3, r2
 800f898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	68fa      	ldr	r2, [r7, #12]
 800f8a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4a12      	ldr	r2, [pc, #72]	@ (800f8f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d004      	beq.n	800f8b6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8b4:	d10c      	bne.n	800f8d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f8bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	68ba      	ldr	r2, [r7, #8]
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f8e0:	2300      	movs	r3, #0
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3714      	adds	r7, #20
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	40012c00 	.word	0x40012c00

0800f8f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f8fc:	bf00      	nop
 800f8fe:	370c      	adds	r7, #12
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f910:	bf00      	nop
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f924:	bf00      	nop
 800f926:	370c      	adds	r7, #12
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr

0800f930 <LL_RCC_GetUSARTClockSource>:
{
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f93c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4013      	ands	r3, r2
}
 800f944:	4618      	mov	r0, r3
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <LL_RCC_GetLPUARTClockSource>:
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f95c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4013      	ands	r3, r2
}
 800f964:	4618      	mov	r0, r3
 800f966:	370c      	adds	r7, #12
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d101      	bne.n	800f982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f97e:	2301      	movs	r3, #1
 800f980:	e042      	b.n	800fa08 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d106      	bne.n	800f99a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2200      	movs	r2, #0
 800f990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7f7 fbbf 	bl	8007118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2224      	movs	r2, #36	@ 0x24
 800f99e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f022 0201 	bic.w	r2, r2, #1
 800f9b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d002      	beq.n	800f9c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 ff56 	bl	801086c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 fd2b 	bl	801041c <UART_SetConfig>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d101      	bne.n	800f9d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e01b      	b.n	800fa08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	685a      	ldr	r2, [r3, #4]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f9de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	689a      	ldr	r2, [r3, #8]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f9ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f042 0201 	orr.w	r2, r2, #1
 800f9fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 ffd5 	bl	80109b0 <UART_CheckIdleState>
 800fa06:	4603      	mov	r3, r0
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d101      	bne.n	800fa22 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	e031      	b.n	800fa86 <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2224      	movs	r2, #36	@ 0x24
 800fa26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	681a      	ldr	r2, [r3, #0]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f022 0201 	bic.w	r2, r2, #1
 800fa38:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2200      	movs	r2, #0
 800fa48:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f7f7 fc0a 	bl	800726c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2200      	movs	r2, #0
 800fa74:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3708      	adds	r7, #8
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
	...

0800fa90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b08a      	sub	sp, #40	@ 0x28
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800faa4:	2b20      	cmp	r3, #32
 800faa6:	d137      	bne.n	800fb18 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <HAL_UART_Receive_DMA+0x24>
 800faae:	88fb      	ldrh	r3, [r7, #6]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d101      	bne.n	800fab8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	e030      	b.n	800fb1a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2200      	movs	r2, #0
 800fabc:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	4a18      	ldr	r2, [pc, #96]	@ (800fb24 <HAL_UART_Receive_DMA+0x94>)
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d01f      	beq.n	800fb08 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d018      	beq.n	800fb08 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	e853 3f00 	ldrex	r3, [r3]
 800fae2:	613b      	str	r3, [r7, #16]
   return(result);
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800faea:	627b      	str	r3, [r7, #36]	@ 0x24
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	461a      	mov	r2, r3
 800faf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf4:	623b      	str	r3, [r7, #32]
 800faf6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf8:	69f9      	ldr	r1, [r7, #28]
 800fafa:	6a3a      	ldr	r2, [r7, #32]
 800fafc:	e841 2300 	strex	r3, r2, [r1]
 800fb00:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb02:	69bb      	ldr	r3, [r7, #24]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1e6      	bne.n	800fad6 <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fb08:	88fb      	ldrh	r3, [r7, #6]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	68b9      	ldr	r1, [r7, #8]
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f001 f866 	bl	8010be0 <UART_Start_Receive_DMA>
 800fb14:	4603      	mov	r3, r0
 800fb16:	e000      	b.n	800fb1a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fb18:	2302      	movs	r3, #2
  }
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3728      	adds	r7, #40	@ 0x28
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	40008000 	.word	0x40008000

0800fb28 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b0a0      	sub	sp, #128	@ 0x80
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb38:	e853 3f00 	ldrex	r3, [r3]
 800fb3c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800fb3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb40:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800fb44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fb4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb50:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb52:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800fb54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fb56:	e841 2300 	strex	r3, r2, [r1]
 800fb5a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800fb5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d1e6      	bne.n	800fb30 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	3308      	adds	r3, #8
 800fb68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb6c:	e853 3f00 	ldrex	r3, [r3]
 800fb70:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fb72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb74:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800fb78:	f023 0301 	bic.w	r3, r3, #1
 800fb7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	3308      	adds	r3, #8
 800fb84:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800fb86:	657a      	str	r2, [r7, #84]	@ 0x54
 800fb88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fb8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fb8e:	e841 2300 	strex	r3, r2, [r1]
 800fb92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fb94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d1e3      	bne.n	800fb62 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d118      	bne.n	800fbd4 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbaa:	e853 3f00 	ldrex	r3, [r3]
 800fbae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb2:	f023 0310 	bic.w	r3, r3, #16
 800fbb6:	677b      	str	r3, [r7, #116]	@ 0x74
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fbc0:	643b      	str	r3, [r7, #64]	@ 0x40
 800fbc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fbc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fbc8:	e841 2300 	strex	r3, r2, [r1]
 800fbcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d1e6      	bne.n	800fba2 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	689b      	ldr	r3, [r3, #8]
 800fbda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbde:	2b80      	cmp	r3, #128	@ 0x80
 800fbe0:	d137      	bne.n	800fc52 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	3308      	adds	r3, #8
 800fbe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbea:	6a3b      	ldr	r3, [r7, #32]
 800fbec:	e853 3f00 	ldrex	r3, [r3]
 800fbf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fbf8:	673b      	str	r3, [r7, #112]	@ 0x70
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	3308      	adds	r3, #8
 800fc00:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fc02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc0a:	e841 2300 	strex	r3, r2, [r1]
 800fc0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d1e5      	bne.n	800fbe2 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d019      	beq.n	800fc52 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc22:	2200      	movs	r2, #0
 800fc24:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7f9 f877 	bl	8008d1e <HAL_DMA_Abort>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00d      	beq.n	800fc52 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7f9 f9dc 	bl	8008ff8 <HAL_DMA_GetError>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b20      	cmp	r3, #32
 800fc44:	d105      	bne.n	800fc52 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2210      	movs	r2, #16
 800fc4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fc4e:	2303      	movs	r3, #3
 800fc50:	e073      	b.n	800fd3a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc5c:	2b40      	cmp	r3, #64	@ 0x40
 800fc5e:	d13b      	bne.n	800fcd8 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	3308      	adds	r3, #8
 800fc66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	e853 3f00 	ldrex	r3, [r3]
 800fc6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	3308      	adds	r3, #8
 800fc7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fc80:	61ba      	str	r2, [r7, #24]
 800fc82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc84:	6979      	ldr	r1, [r7, #20]
 800fc86:	69ba      	ldr	r2, [r7, #24]
 800fc88:	e841 2300 	strex	r3, r2, [r1]
 800fc8c:	613b      	str	r3, [r7, #16]
   return(result);
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d1e5      	bne.n	800fc60 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d01c      	beq.n	800fcd8 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fca4:	2200      	movs	r2, #0
 800fca6:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7f9 f835 	bl	8008d1e <HAL_DMA_Abort>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00e      	beq.n	800fcd8 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7f9 f999 	bl	8008ff8 <HAL_DMA_GetError>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b20      	cmp	r3, #32
 800fcca:	d105      	bne.n	800fcd8 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2210      	movs	r2, #16
 800fcd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fcd4:	2303      	movs	r3, #3
 800fcd6:	e030      	b.n	800fd3a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	220f      	movs	r2, #15
 800fcee:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcf8:	d107      	bne.n	800fd0a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	699a      	ldr	r2, [r3, #24]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f042 0210 	orr.w	r2, r2, #16
 800fd08:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	699a      	ldr	r2, [r3, #24]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f042 0208 	orr.w	r2, r2, #8
 800fd18:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2220      	movs	r2, #32
 800fd1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2220      	movs	r2, #32
 800fd26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800fd38:	2300      	movs	r3, #0
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3780      	adds	r7, #128	@ 0x80
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
	...

0800fd44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b0ba      	sub	sp, #232	@ 0xe8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	69db      	ldr	r3, [r3, #28]
 800fd52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fd6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fd6e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fd72:	4013      	ands	r3, r2
 800fd74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fd78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d11b      	bne.n	800fdb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd84:	f003 0320 	and.w	r3, r3, #32
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d015      	beq.n	800fdb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd90:	f003 0320 	and.w	r3, r3, #32
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d105      	bne.n	800fda4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d009      	beq.n	800fdb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f000 8300 	beq.w	80103ae <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	4798      	blx	r3
      }
      return;
 800fdb6:	e2fa      	b.n	80103ae <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fdb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f000 8123 	beq.w	8010008 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fdc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fdc6:	4b8d      	ldr	r3, [pc, #564]	@ (800fffc <HAL_UART_IRQHandler+0x2b8>)
 800fdc8:	4013      	ands	r3, r2
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d106      	bne.n	800fddc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fdce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fdd2:	4b8b      	ldr	r3, [pc, #556]	@ (8010000 <HAL_UART_IRQHandler+0x2bc>)
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f000 8116 	beq.w	8010008 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fde0:	f003 0301 	and.w	r3, r3, #1
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d011      	beq.n	800fe0c <HAL_UART_IRQHandler+0xc8>
 800fde8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d00b      	beq.n	800fe0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe02:	f043 0201 	orr.w	r2, r3, #1
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe10:	f003 0302 	and.w	r3, r3, #2
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d011      	beq.n	800fe3c <HAL_UART_IRQHandler+0xf8>
 800fe18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe1c:	f003 0301 	and.w	r3, r3, #1
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00b      	beq.n	800fe3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	2202      	movs	r2, #2
 800fe2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe32:	f043 0204 	orr.w	r2, r3, #4
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe40:	f003 0304 	and.w	r3, r3, #4
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d011      	beq.n	800fe6c <HAL_UART_IRQHandler+0x128>
 800fe48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe4c:	f003 0301 	and.w	r3, r3, #1
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d00b      	beq.n	800fe6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2204      	movs	r2, #4
 800fe5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe62:	f043 0202 	orr.w	r2, r3, #2
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fe6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe70:	f003 0308 	and.w	r3, r3, #8
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d017      	beq.n	800fea8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe7c:	f003 0320 	and.w	r3, r3, #32
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d105      	bne.n	800fe90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fe84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fe88:	4b5c      	ldr	r3, [pc, #368]	@ (800fffc <HAL_UART_IRQHandler+0x2b8>)
 800fe8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d00b      	beq.n	800fea8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2208      	movs	r2, #8
 800fe96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe9e:	f043 0208 	orr.w	r2, r3, #8
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800feac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d012      	beq.n	800feda <HAL_UART_IRQHandler+0x196>
 800feb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800feb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00c      	beq.n	800feda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fed0:	f043 0220 	orr.w	r2, r3, #32
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	f000 8266 	beq.w	80103b2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800feea:	f003 0320 	and.w	r3, r3, #32
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d013      	beq.n	800ff1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fef6:	f003 0320 	and.w	r3, r3, #32
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d105      	bne.n	800ff0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fefe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d007      	beq.n	800ff1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d003      	beq.n	800ff1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	689b      	ldr	r3, [r3, #8]
 800ff2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff2e:	2b40      	cmp	r3, #64	@ 0x40
 800ff30:	d005      	beq.n	800ff3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ff32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ff36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d054      	beq.n	800ffe8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f000 ff35 	bl	8010dae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	689b      	ldr	r3, [r3, #8]
 800ff4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff4e:	2b40      	cmp	r3, #64	@ 0x40
 800ff50:	d146      	bne.n	800ffe0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	3308      	adds	r3, #8
 800ff58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ff60:	e853 3f00 	ldrex	r3, [r3]
 800ff64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ff68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ff6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3308      	adds	r3, #8
 800ff7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ff7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ff82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ff8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ff8e:	e841 2300 	strex	r3, r2, [r1]
 800ff92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ff96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d1d9      	bne.n	800ff52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d017      	beq.n	800ffd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffae:	4a15      	ldr	r2, [pc, #84]	@ (8010004 <HAL_UART_IRQHandler+0x2c0>)
 800ffb0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7f8 ff0f 	bl	8008ddc <HAL_DMA_Abort_IT>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d019      	beq.n	800fff8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ffd2:	4610      	mov	r0, r2
 800ffd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffd6:	e00f      	b.n	800fff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fa09 	bl	80103f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffde:	e00b      	b.n	800fff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 fa05 	bl	80103f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffe6:	e007      	b.n	800fff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f000 fa01 	bl	80103f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fff6:	e1dc      	b.n	80103b2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fff8:	bf00      	nop
    return;
 800fffa:	e1da      	b.n	80103b2 <HAL_UART_IRQHandler+0x66e>
 800fffc:	10000001 	.word	0x10000001
 8010000:	04000120 	.word	0x04000120
 8010004:	08011065 	.word	0x08011065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801000c:	2b01      	cmp	r3, #1
 801000e:	f040 8170 	bne.w	80102f2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010016:	f003 0310 	and.w	r3, r3, #16
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 8169 	beq.w	80102f2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010024:	f003 0310 	and.w	r3, r3, #16
 8010028:	2b00      	cmp	r3, #0
 801002a:	f000 8162 	beq.w	80102f2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2210      	movs	r2, #16
 8010034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	689b      	ldr	r3, [r3, #8]
 801003c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010040:	2b40      	cmp	r3, #64	@ 0x40
 8010042:	f040 80d8 	bne.w	80101f6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010058:	2b00      	cmp	r3, #0
 801005a:	f000 80af 	beq.w	80101bc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010068:	429a      	cmp	r2, r3
 801006a:	f080 80a7 	bcs.w	80101bc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f003 0320 	and.w	r3, r3, #32
 8010086:	2b00      	cmp	r3, #0
 8010088:	f040 8087 	bne.w	801019a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010098:	e853 3f00 	ldrex	r3, [r3]
 801009c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80100a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80100a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80100a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	461a      	mov	r2, r3
 80100b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80100b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80100ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80100c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80100c6:	e841 2300 	strex	r3, r2, [r1]
 80100ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80100ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1da      	bne.n	801008c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	3308      	adds	r3, #8
 80100dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80100e0:	e853 3f00 	ldrex	r3, [r3]
 80100e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80100e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80100e8:	f023 0301 	bic.w	r3, r3, #1
 80100ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3308      	adds	r3, #8
 80100f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80100fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80100fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010100:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010102:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010106:	e841 2300 	strex	r3, r2, [r1]
 801010a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801010c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1e1      	bne.n	80100d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	3308      	adds	r3, #8
 8010118:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801011a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801011c:	e853 3f00 	ldrex	r3, [r3]
 8010120:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3308      	adds	r3, #8
 8010132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010138:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801013a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801013c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801013e:	e841 2300 	strex	r3, r2, [r1]
 8010142:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010146:	2b00      	cmp	r3, #0
 8010148:	d1e3      	bne.n	8010112 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2220      	movs	r2, #32
 801014e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2200      	movs	r2, #0
 8010156:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801015e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010160:	e853 3f00 	ldrex	r3, [r3]
 8010164:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010168:	f023 0310 	bic.w	r3, r3, #16
 801016c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	461a      	mov	r2, r3
 8010176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801017a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801017c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801017e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010182:	e841 2300 	strex	r3, r2, [r1]
 8010186:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1e4      	bne.n	8010158 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010194:	4618      	mov	r0, r3
 8010196:	f7f8 fdc2 	bl	8008d1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2202      	movs	r2, #2
 801019e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	4619      	mov	r1, r3
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 f925 	bl	8010404 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80101ba:	e0fc      	b.n	80103b6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80101c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80101c6:	429a      	cmp	r2, r3
 80101c8:	f040 80f5 	bne.w	80103b6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f003 0320 	and.w	r3, r3, #32
 80101da:	2b20      	cmp	r3, #32
 80101dc:	f040 80eb 	bne.w	80103b6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2202      	movs	r2, #2
 80101e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80101ec:	4619      	mov	r1, r3
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 f908 	bl	8010404 <HAL_UARTEx_RxEventCallback>
      return;
 80101f4:	e0df      	b.n	80103b6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010202:	b29b      	uxth	r3, r3
 8010204:	1ad3      	subs	r3, r2, r3
 8010206:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010210:	b29b      	uxth	r3, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	f000 80d1 	beq.w	80103ba <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8010218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801021c:	2b00      	cmp	r3, #0
 801021e:	f000 80cc 	beq.w	80103ba <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801022a:	e853 3f00 	ldrex	r3, [r3]
 801022e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	461a      	mov	r2, r3
 8010240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010244:	647b      	str	r3, [r7, #68]	@ 0x44
 8010246:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010248:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801024a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801024c:	e841 2300 	strex	r3, r2, [r1]
 8010250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1e4      	bne.n	8010222 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	3308      	adds	r3, #8
 801025e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010262:	e853 3f00 	ldrex	r3, [r3]
 8010266:	623b      	str	r3, [r7, #32]
   return(result);
 8010268:	6a3b      	ldr	r3, [r7, #32]
 801026a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801026e:	f023 0301 	bic.w	r3, r3, #1
 8010272:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	3308      	adds	r3, #8
 801027c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010280:	633a      	str	r2, [r7, #48]	@ 0x30
 8010282:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010288:	e841 2300 	strex	r3, r2, [r1]
 801028c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801028e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1e1      	bne.n	8010258 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2220      	movs	r2, #32
 8010298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2200      	movs	r2, #0
 80102a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	e853 3f00 	ldrex	r3, [r3]
 80102b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f023 0310 	bic.w	r3, r3, #16
 80102bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	461a      	mov	r2, r3
 80102c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80102ca:	61fb      	str	r3, [r7, #28]
 80102cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ce:	69b9      	ldr	r1, [r7, #24]
 80102d0:	69fa      	ldr	r2, [r7, #28]
 80102d2:	e841 2300 	strex	r3, r2, [r1]
 80102d6:	617b      	str	r3, [r7, #20]
   return(result);
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1e4      	bne.n	80102a8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2202      	movs	r2, #2
 80102e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80102e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80102e8:	4619      	mov	r1, r3
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f000 f88a 	bl	8010404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80102f0:	e063      	b.n	80103ba <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80102f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d00e      	beq.n	801031c <HAL_UART_IRQHandler+0x5d8>
 80102fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010306:	2b00      	cmp	r3, #0
 8010308:	d008      	beq.n	801031c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010312:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 fee2 	bl	80110de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801031a:	e051      	b.n	80103c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801031c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010324:	2b00      	cmp	r3, #0
 8010326:	d014      	beq.n	8010352 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801032c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010330:	2b00      	cmp	r3, #0
 8010332:	d105      	bne.n	8010340 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801033c:	2b00      	cmp	r3, #0
 801033e:	d008      	beq.n	8010352 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010344:	2b00      	cmp	r3, #0
 8010346:	d03a      	beq.n	80103be <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	4798      	blx	r3
    }
    return;
 8010350:	e035      	b.n	80103be <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801035a:	2b00      	cmp	r3, #0
 801035c:	d009      	beq.n	8010372 <HAL_UART_IRQHandler+0x62e>
 801035e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010366:	2b00      	cmp	r3, #0
 8010368:	d003      	beq.n	8010372 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f000 fe8c 	bl	8011088 <UART_EndTransmit_IT>
    return;
 8010370:	e026      	b.n	80103c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801037a:	2b00      	cmp	r3, #0
 801037c:	d009      	beq.n	8010392 <HAL_UART_IRQHandler+0x64e>
 801037e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010382:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010386:	2b00      	cmp	r3, #0
 8010388:	d003      	beq.n	8010392 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f000 febb 	bl	8011106 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010390:	e016      	b.n	80103c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010396:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801039a:	2b00      	cmp	r3, #0
 801039c:	d010      	beq.n	80103c0 <HAL_UART_IRQHandler+0x67c>
 801039e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	da0c      	bge.n	80103c0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 fea3 	bl	80110f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80103ac:	e008      	b.n	80103c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80103ae:	bf00      	nop
 80103b0:	e006      	b.n	80103c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80103b2:	bf00      	nop
 80103b4:	e004      	b.n	80103c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80103b6:	bf00      	nop
 80103b8:	e002      	b.n	80103c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80103ba:	bf00      	nop
 80103bc:	e000      	b.n	80103c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80103be:	bf00      	nop
  }
}
 80103c0:	37e8      	adds	r7, #232	@ 0xe8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop

080103c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80103d0:	bf00      	nop
 80103d2:	370c      	adds	r7, #12
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80103e4:	bf00      	nop
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80103f8:	bf00      	nop
 80103fa:	370c      	adds	r7, #12
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr

08010404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	460b      	mov	r3, r1
 801040e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010410:	bf00      	nop
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801041c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010420:	b08c      	sub	sp, #48	@ 0x30
 8010422:	af00      	add	r7, sp, #0
 8010424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010426:	2300      	movs	r3, #0
 8010428:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	689a      	ldr	r2, [r3, #8]
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	431a      	orrs	r2, r3
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	695b      	ldr	r3, [r3, #20]
 801043a:	431a      	orrs	r2, r3
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	69db      	ldr	r3, [r3, #28]
 8010440:	4313      	orrs	r3, r2
 8010442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	4baf      	ldr	r3, [pc, #700]	@ (8010708 <UART_SetConfig+0x2ec>)
 801044c:	4013      	ands	r3, r2
 801044e:	697a      	ldr	r2, [r7, #20]
 8010450:	6812      	ldr	r2, [r2, #0]
 8010452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010454:	430b      	orrs	r3, r1
 8010456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	68da      	ldr	r2, [r3, #12]
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	430a      	orrs	r2, r1
 801046c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	699b      	ldr	r3, [r3, #24]
 8010472:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4aa4      	ldr	r2, [pc, #656]	@ (801070c <UART_SetConfig+0x2f0>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d004      	beq.n	8010488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	6a1b      	ldr	r3, [r3, #32]
 8010482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010484:	4313      	orrs	r3, r2
 8010486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8010492:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	6812      	ldr	r2, [r2, #0]
 801049a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801049c:	430b      	orrs	r3, r1
 801049e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104a6:	f023 010f 	bic.w	r1, r3, #15
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	430a      	orrs	r2, r1
 80104b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4a95      	ldr	r2, [pc, #596]	@ (8010710 <UART_SetConfig+0x2f4>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d125      	bne.n	801050c <UART_SetConfig+0xf0>
 80104c0:	2003      	movs	r0, #3
 80104c2:	f7ff fa35 	bl	800f930 <LL_RCC_GetUSARTClockSource>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b03      	cmp	r3, #3
 80104ca:	d81b      	bhi.n	8010504 <UART_SetConfig+0xe8>
 80104cc:	a201      	add	r2, pc, #4	@ (adr r2, 80104d4 <UART_SetConfig+0xb8>)
 80104ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d2:	bf00      	nop
 80104d4:	080104e5 	.word	0x080104e5
 80104d8:	080104f5 	.word	0x080104f5
 80104dc:	080104ed 	.word	0x080104ed
 80104e0:	080104fd 	.word	0x080104fd
 80104e4:	2301      	movs	r3, #1
 80104e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104ea:	e042      	b.n	8010572 <UART_SetConfig+0x156>
 80104ec:	2302      	movs	r3, #2
 80104ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104f2:	e03e      	b.n	8010572 <UART_SetConfig+0x156>
 80104f4:	2304      	movs	r3, #4
 80104f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80104fa:	e03a      	b.n	8010572 <UART_SetConfig+0x156>
 80104fc:	2308      	movs	r3, #8
 80104fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010502:	e036      	b.n	8010572 <UART_SetConfig+0x156>
 8010504:	2310      	movs	r3, #16
 8010506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801050a:	e032      	b.n	8010572 <UART_SetConfig+0x156>
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4a7e      	ldr	r2, [pc, #504]	@ (801070c <UART_SetConfig+0x2f0>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d12a      	bne.n	801056c <UART_SetConfig+0x150>
 8010516:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801051a:	f7ff fa19 	bl	800f950 <LL_RCC_GetLPUARTClockSource>
 801051e:	4603      	mov	r3, r0
 8010520:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010524:	d01a      	beq.n	801055c <UART_SetConfig+0x140>
 8010526:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801052a:	d81b      	bhi.n	8010564 <UART_SetConfig+0x148>
 801052c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010530:	d00c      	beq.n	801054c <UART_SetConfig+0x130>
 8010532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010536:	d815      	bhi.n	8010564 <UART_SetConfig+0x148>
 8010538:	2b00      	cmp	r3, #0
 801053a:	d003      	beq.n	8010544 <UART_SetConfig+0x128>
 801053c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010540:	d008      	beq.n	8010554 <UART_SetConfig+0x138>
 8010542:	e00f      	b.n	8010564 <UART_SetConfig+0x148>
 8010544:	2300      	movs	r3, #0
 8010546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801054a:	e012      	b.n	8010572 <UART_SetConfig+0x156>
 801054c:	2302      	movs	r3, #2
 801054e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010552:	e00e      	b.n	8010572 <UART_SetConfig+0x156>
 8010554:	2304      	movs	r3, #4
 8010556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801055a:	e00a      	b.n	8010572 <UART_SetConfig+0x156>
 801055c:	2308      	movs	r3, #8
 801055e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010562:	e006      	b.n	8010572 <UART_SetConfig+0x156>
 8010564:	2310      	movs	r3, #16
 8010566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801056a:	e002      	b.n	8010572 <UART_SetConfig+0x156>
 801056c:	2310      	movs	r3, #16
 801056e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4a65      	ldr	r2, [pc, #404]	@ (801070c <UART_SetConfig+0x2f0>)
 8010578:	4293      	cmp	r3, r2
 801057a:	f040 8097 	bne.w	80106ac <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801057e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010582:	2b08      	cmp	r3, #8
 8010584:	d823      	bhi.n	80105ce <UART_SetConfig+0x1b2>
 8010586:	a201      	add	r2, pc, #4	@ (adr r2, 801058c <UART_SetConfig+0x170>)
 8010588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801058c:	080105b1 	.word	0x080105b1
 8010590:	080105cf 	.word	0x080105cf
 8010594:	080105b9 	.word	0x080105b9
 8010598:	080105cf 	.word	0x080105cf
 801059c:	080105bf 	.word	0x080105bf
 80105a0:	080105cf 	.word	0x080105cf
 80105a4:	080105cf 	.word	0x080105cf
 80105a8:	080105cf 	.word	0x080105cf
 80105ac:	080105c7 	.word	0x080105c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80105b0:	f7fc fbfa 	bl	800cda8 <HAL_RCC_GetPCLK1Freq>
 80105b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80105b6:	e010      	b.n	80105da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80105b8:	4b56      	ldr	r3, [pc, #344]	@ (8010714 <UART_SetConfig+0x2f8>)
 80105ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80105bc:	e00d      	b.n	80105da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80105be:	f7fc fb73 	bl	800cca8 <HAL_RCC_GetSysClockFreq>
 80105c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80105c4:	e009      	b.n	80105da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80105c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80105ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80105cc:	e005      	b.n	80105da <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80105ce:	2300      	movs	r3, #0
 80105d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80105d2:	2301      	movs	r3, #1
 80105d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80105d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80105da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105dc:	2b00      	cmp	r3, #0
 80105de:	f000 812b 	beq.w	8010838 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105e6:	4a4c      	ldr	r2, [pc, #304]	@ (8010718 <UART_SetConfig+0x2fc>)
 80105e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105ec:	461a      	mov	r2, r3
 80105ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80105f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	685a      	ldr	r2, [r3, #4]
 80105fa:	4613      	mov	r3, r2
 80105fc:	005b      	lsls	r3, r3, #1
 80105fe:	4413      	add	r3, r2
 8010600:	69ba      	ldr	r2, [r7, #24]
 8010602:	429a      	cmp	r2, r3
 8010604:	d305      	bcc.n	8010612 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801060c:	69ba      	ldr	r2, [r7, #24]
 801060e:	429a      	cmp	r2, r3
 8010610:	d903      	bls.n	801061a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8010612:	2301      	movs	r3, #1
 8010614:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010618:	e10e      	b.n	8010838 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801061a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801061c:	2200      	movs	r2, #0
 801061e:	60bb      	str	r3, [r7, #8]
 8010620:	60fa      	str	r2, [r7, #12]
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010626:	4a3c      	ldr	r2, [pc, #240]	@ (8010718 <UART_SetConfig+0x2fc>)
 8010628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801062c:	b29b      	uxth	r3, r3
 801062e:	2200      	movs	r2, #0
 8010630:	603b      	str	r3, [r7, #0]
 8010632:	607a      	str	r2, [r7, #4]
 8010634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010638:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801063c:	f7f0 fafc 	bl	8000c38 <__aeabi_uldivmod>
 8010640:	4602      	mov	r2, r0
 8010642:	460b      	mov	r3, r1
 8010644:	4610      	mov	r0, r2
 8010646:	4619      	mov	r1, r3
 8010648:	f04f 0200 	mov.w	r2, #0
 801064c:	f04f 0300 	mov.w	r3, #0
 8010650:	020b      	lsls	r3, r1, #8
 8010652:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010656:	0202      	lsls	r2, r0, #8
 8010658:	6979      	ldr	r1, [r7, #20]
 801065a:	6849      	ldr	r1, [r1, #4]
 801065c:	0849      	lsrs	r1, r1, #1
 801065e:	2000      	movs	r0, #0
 8010660:	460c      	mov	r4, r1
 8010662:	4605      	mov	r5, r0
 8010664:	eb12 0804 	adds.w	r8, r2, r4
 8010668:	eb43 0905 	adc.w	r9, r3, r5
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	2200      	movs	r2, #0
 8010672:	469a      	mov	sl, r3
 8010674:	4693      	mov	fp, r2
 8010676:	4652      	mov	r2, sl
 8010678:	465b      	mov	r3, fp
 801067a:	4640      	mov	r0, r8
 801067c:	4649      	mov	r1, r9
 801067e:	f7f0 fadb 	bl	8000c38 <__aeabi_uldivmod>
 8010682:	4602      	mov	r2, r0
 8010684:	460b      	mov	r3, r1
 8010686:	4613      	mov	r3, r2
 8010688:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801068a:	6a3b      	ldr	r3, [r7, #32]
 801068c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010690:	d308      	bcc.n	80106a4 <UART_SetConfig+0x288>
 8010692:	6a3b      	ldr	r3, [r7, #32]
 8010694:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010698:	d204      	bcs.n	80106a4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	6a3a      	ldr	r2, [r7, #32]
 80106a0:	60da      	str	r2, [r3, #12]
 80106a2:	e0c9      	b.n	8010838 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80106a4:	2301      	movs	r3, #1
 80106a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80106aa:	e0c5      	b.n	8010838 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	69db      	ldr	r3, [r3, #28]
 80106b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80106b4:	d16d      	bne.n	8010792 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80106b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80106ba:	3b01      	subs	r3, #1
 80106bc:	2b07      	cmp	r3, #7
 80106be:	d82d      	bhi.n	801071c <UART_SetConfig+0x300>
 80106c0:	a201      	add	r2, pc, #4	@ (adr r2, 80106c8 <UART_SetConfig+0x2ac>)
 80106c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106c6:	bf00      	nop
 80106c8:	080106e9 	.word	0x080106e9
 80106cc:	080106f1 	.word	0x080106f1
 80106d0:	0801071d 	.word	0x0801071d
 80106d4:	080106f7 	.word	0x080106f7
 80106d8:	0801071d 	.word	0x0801071d
 80106dc:	0801071d 	.word	0x0801071d
 80106e0:	0801071d 	.word	0x0801071d
 80106e4:	080106ff 	.word	0x080106ff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106e8:	f7fc fb74 	bl	800cdd4 <HAL_RCC_GetPCLK2Freq>
 80106ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80106ee:	e01b      	b.n	8010728 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80106f0:	4b08      	ldr	r3, [pc, #32]	@ (8010714 <UART_SetConfig+0x2f8>)
 80106f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80106f4:	e018      	b.n	8010728 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80106f6:	f7fc fad7 	bl	800cca8 <HAL_RCC_GetSysClockFreq>
 80106fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80106fc:	e014      	b.n	8010728 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80106fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010702:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010704:	e010      	b.n	8010728 <UART_SetConfig+0x30c>
 8010706:	bf00      	nop
 8010708:	cfff69f3 	.word	0xcfff69f3
 801070c:	40008000 	.word	0x40008000
 8010710:	40013800 	.word	0x40013800
 8010714:	00f42400 	.word	0x00f42400
 8010718:	08021ed0 	.word	0x08021ed0
      default:
        pclk = 0U;
 801071c:	2300      	movs	r3, #0
 801071e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010720:	2301      	movs	r3, #1
 8010722:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010726:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072a:	2b00      	cmp	r3, #0
 801072c:	f000 8084 	beq.w	8010838 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010734:	4a4b      	ldr	r2, [pc, #300]	@ (8010864 <UART_SetConfig+0x448>)
 8010736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801073a:	461a      	mov	r2, r3
 801073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010742:	005a      	lsls	r2, r3, #1
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	085b      	lsrs	r3, r3, #1
 801074a:	441a      	add	r2, r3
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	fbb2 f3f3 	udiv	r3, r2, r3
 8010754:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010756:	6a3b      	ldr	r3, [r7, #32]
 8010758:	2b0f      	cmp	r3, #15
 801075a:	d916      	bls.n	801078a <UART_SetConfig+0x36e>
 801075c:	6a3b      	ldr	r3, [r7, #32]
 801075e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010762:	d212      	bcs.n	801078a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010764:	6a3b      	ldr	r3, [r7, #32]
 8010766:	b29b      	uxth	r3, r3
 8010768:	f023 030f 	bic.w	r3, r3, #15
 801076c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801076e:	6a3b      	ldr	r3, [r7, #32]
 8010770:	085b      	lsrs	r3, r3, #1
 8010772:	b29b      	uxth	r3, r3
 8010774:	f003 0307 	and.w	r3, r3, #7
 8010778:	b29a      	uxth	r2, r3
 801077a:	8bfb      	ldrh	r3, [r7, #30]
 801077c:	4313      	orrs	r3, r2
 801077e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	8bfa      	ldrh	r2, [r7, #30]
 8010786:	60da      	str	r2, [r3, #12]
 8010788:	e056      	b.n	8010838 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801078a:	2301      	movs	r3, #1
 801078c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010790:	e052      	b.n	8010838 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010792:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010796:	3b01      	subs	r3, #1
 8010798:	2b07      	cmp	r3, #7
 801079a:	d822      	bhi.n	80107e2 <UART_SetConfig+0x3c6>
 801079c:	a201      	add	r2, pc, #4	@ (adr r2, 80107a4 <UART_SetConfig+0x388>)
 801079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a2:	bf00      	nop
 80107a4:	080107c5 	.word	0x080107c5
 80107a8:	080107cd 	.word	0x080107cd
 80107ac:	080107e3 	.word	0x080107e3
 80107b0:	080107d3 	.word	0x080107d3
 80107b4:	080107e3 	.word	0x080107e3
 80107b8:	080107e3 	.word	0x080107e3
 80107bc:	080107e3 	.word	0x080107e3
 80107c0:	080107db 	.word	0x080107db
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80107c4:	f7fc fb06 	bl	800cdd4 <HAL_RCC_GetPCLK2Freq>
 80107c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80107ca:	e010      	b.n	80107ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80107cc:	4b26      	ldr	r3, [pc, #152]	@ (8010868 <UART_SetConfig+0x44c>)
 80107ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80107d0:	e00d      	b.n	80107ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80107d2:	f7fc fa69 	bl	800cca8 <HAL_RCC_GetSysClockFreq>
 80107d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80107d8:	e009      	b.n	80107ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80107da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80107de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80107e0:	e005      	b.n	80107ee <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80107e2:	2300      	movs	r3, #0
 80107e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80107e6:	2301      	movs	r3, #1
 80107e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80107ec:	bf00      	nop
    }

    if (pclk != 0U)
 80107ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d021      	beq.n	8010838 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107f8:	4a1a      	ldr	r2, [pc, #104]	@ (8010864 <UART_SetConfig+0x448>)
 80107fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107fe:	461a      	mov	r2, r3
 8010800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010802:	fbb3 f2f2 	udiv	r2, r3, r2
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	085b      	lsrs	r3, r3, #1
 801080c:	441a      	add	r2, r3
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	fbb2 f3f3 	udiv	r3, r2, r3
 8010816:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	2b0f      	cmp	r3, #15
 801081c:	d909      	bls.n	8010832 <UART_SetConfig+0x416>
 801081e:	6a3b      	ldr	r3, [r7, #32]
 8010820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010824:	d205      	bcs.n	8010832 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	b29a      	uxth	r2, r3
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	60da      	str	r2, [r3, #12]
 8010830:	e002      	b.n	8010838 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010832:	2301      	movs	r3, #1
 8010834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	2201      	movs	r2, #1
 801083c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	2201      	movs	r2, #1
 8010844:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	2200      	movs	r2, #0
 801084c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	2200      	movs	r2, #0
 8010852:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010854:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010858:	4618      	mov	r0, r3
 801085a:	3730      	adds	r7, #48	@ 0x30
 801085c:	46bd      	mov	sp, r7
 801085e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010862:	bf00      	nop
 8010864:	08021ed0 	.word	0x08021ed0
 8010868:	00f42400 	.word	0x00f42400

0801086c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010878:	f003 0308 	and.w	r3, r3, #8
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00a      	beq.n	8010896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	430a      	orrs	r2, r1
 8010894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801089a:	f003 0301 	and.w	r3, r3, #1
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00a      	beq.n	80108b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	430a      	orrs	r2, r1
 80108b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108bc:	f003 0302 	and.w	r3, r3, #2
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d00a      	beq.n	80108da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	430a      	orrs	r2, r1
 80108d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108de:	f003 0304 	and.w	r3, r3, #4
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00a      	beq.n	80108fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	430a      	orrs	r2, r1
 80108fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010900:	f003 0310 	and.w	r3, r3, #16
 8010904:	2b00      	cmp	r3, #0
 8010906:	d00a      	beq.n	801091e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	430a      	orrs	r2, r1
 801091c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010922:	f003 0320 	and.w	r3, r3, #32
 8010926:	2b00      	cmp	r3, #0
 8010928:	d00a      	beq.n	8010940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	689b      	ldr	r3, [r3, #8]
 8010930:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	430a      	orrs	r2, r1
 801093e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010948:	2b00      	cmp	r3, #0
 801094a:	d01a      	beq.n	8010982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	430a      	orrs	r2, r1
 8010960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801096a:	d10a      	bne.n	8010982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	430a      	orrs	r2, r1
 8010980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00a      	beq.n	80109a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	430a      	orrs	r2, r1
 80109a2:	605a      	str	r2, [r3, #4]
  }
}
 80109a4:	bf00      	nop
 80109a6:	370c      	adds	r7, #12
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b098      	sub	sp, #96	@ 0x60
 80109b4:	af02      	add	r7, sp, #8
 80109b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80109c0:	f7f6 fdb6 	bl	8007530 <HAL_GetTick>
 80109c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f003 0308 	and.w	r3, r3, #8
 80109d0:	2b08      	cmp	r3, #8
 80109d2:	d12f      	bne.n	8010a34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80109d8:	9300      	str	r3, [sp, #0]
 80109da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109dc:	2200      	movs	r2, #0
 80109de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 f88e 	bl	8010b04 <UART_WaitOnFlagUntilTimeout>
 80109e8:	4603      	mov	r3, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d022      	beq.n	8010a34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f6:	e853 3f00 	ldrex	r3, [r3]
 80109fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80109fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010a02:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	461a      	mov	r2, r3
 8010a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010a12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a14:	e841 2300 	strex	r3, r2, [r1]
 8010a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d1e6      	bne.n	80109ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2220      	movs	r2, #32
 8010a24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a30:	2303      	movs	r3, #3
 8010a32:	e063      	b.n	8010afc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f003 0304 	and.w	r3, r3, #4
 8010a3e:	2b04      	cmp	r3, #4
 8010a40:	d149      	bne.n	8010ad6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a46:	9300      	str	r3, [sp, #0]
 8010a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f000 f857 	bl	8010b04 <UART_WaitOnFlagUntilTimeout>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d03c      	beq.n	8010ad6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a64:	e853 3f00 	ldrex	r3, [r3]
 8010a68:	623b      	str	r3, [r7, #32]
   return(result);
 8010a6a:	6a3b      	ldr	r3, [r7, #32]
 8010a6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	461a      	mov	r2, r3
 8010a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a82:	e841 2300 	strex	r3, r2, [r1]
 8010a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d1e6      	bne.n	8010a5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	3308      	adds	r3, #8
 8010a94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	e853 3f00 	ldrex	r3, [r3]
 8010a9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f023 0301 	bic.w	r3, r3, #1
 8010aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	3308      	adds	r3, #8
 8010aac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010aae:	61fa      	str	r2, [r7, #28]
 8010ab0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ab2:	69b9      	ldr	r1, [r7, #24]
 8010ab4:	69fa      	ldr	r2, [r7, #28]
 8010ab6:	e841 2300 	strex	r3, r2, [r1]
 8010aba:	617b      	str	r3, [r7, #20]
   return(result);
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d1e5      	bne.n	8010a8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2220      	movs	r2, #32
 8010ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ad2:	2303      	movs	r3, #3
 8010ad4:	e012      	b.n	8010afc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2220      	movs	r2, #32
 8010ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2220      	movs	r2, #32
 8010ae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2200      	movs	r2, #0
 8010af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010afa:	2300      	movs	r3, #0
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3758      	adds	r7, #88	@ 0x58
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	603b      	str	r3, [r7, #0]
 8010b10:	4613      	mov	r3, r2
 8010b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b14:	e04f      	b.n	8010bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b1c:	d04b      	beq.n	8010bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b1e:	f7f6 fd07 	bl	8007530 <HAL_GetTick>
 8010b22:	4602      	mov	r2, r0
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	1ad3      	subs	r3, r2, r3
 8010b28:	69ba      	ldr	r2, [r7, #24]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d302      	bcc.n	8010b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8010b2e:	69bb      	ldr	r3, [r7, #24]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d101      	bne.n	8010b38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010b34:	2303      	movs	r3, #3
 8010b36:	e04e      	b.n	8010bd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f003 0304 	and.w	r3, r3, #4
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d037      	beq.n	8010bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	2b80      	cmp	r3, #128	@ 0x80
 8010b4a:	d034      	beq.n	8010bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	2b40      	cmp	r3, #64	@ 0x40
 8010b50:	d031      	beq.n	8010bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	69db      	ldr	r3, [r3, #28]
 8010b58:	f003 0308 	and.w	r3, r3, #8
 8010b5c:	2b08      	cmp	r3, #8
 8010b5e:	d110      	bne.n	8010b82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2208      	movs	r2, #8
 8010b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010b68:	68f8      	ldr	r0, [r7, #12]
 8010b6a:	f000 f920 	bl	8010dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2208      	movs	r2, #8
 8010b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e029      	b.n	8010bd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	69db      	ldr	r3, [r3, #28]
 8010b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010b90:	d111      	bne.n	8010bb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010b9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f000 f906 	bl	8010dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2220      	movs	r2, #32
 8010ba6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2200      	movs	r2, #0
 8010bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010bb2:	2303      	movs	r3, #3
 8010bb4:	e00f      	b.n	8010bd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	69da      	ldr	r2, [r3, #28]
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	4013      	ands	r3, r2
 8010bc0:	68ba      	ldr	r2, [r7, #8]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	bf0c      	ite	eq
 8010bc6:	2301      	moveq	r3, #1
 8010bc8:	2300      	movne	r3, #0
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	461a      	mov	r2, r3
 8010bce:	79fb      	ldrb	r3, [r7, #7]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d0a0      	beq.n	8010b16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3710      	adds	r7, #16
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
	...

08010be0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b096      	sub	sp, #88	@ 0x58
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	4613      	mov	r3, r2
 8010bec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	68ba      	ldr	r2, [r7, #8]
 8010bf2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	88fa      	ldrh	r2, [r7, #6]
 8010bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2222      	movs	r2, #34	@ 0x22
 8010c08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d02d      	beq.n	8010c72 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c1c:	4a40      	ldr	r2, [pc, #256]	@ (8010d20 <UART_Start_Receive_DMA+0x140>)
 8010c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c26:	4a3f      	ldr	r2, [pc, #252]	@ (8010d24 <UART_Start_Receive_DMA+0x144>)
 8010c28:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c30:	4a3d      	ldr	r2, [pc, #244]	@ (8010d28 <UART_Start_Receive_DMA+0x148>)
 8010c32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	3324      	adds	r3, #36	@ 0x24
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c50:	461a      	mov	r2, r3
 8010c52:	88fb      	ldrh	r3, [r7, #6]
 8010c54:	f7f7 ffe8 	bl	8008c28 <HAL_DMA_Start_IT>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d009      	beq.n	8010c72 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	2210      	movs	r2, #16
 8010c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2220      	movs	r2, #32
 8010c6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	e051      	b.n	8010d16 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	691b      	ldr	r3, [r3, #16]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d018      	beq.n	8010cac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c82:	e853 3f00 	ldrex	r3, [r3]
 8010c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010c8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	461a      	mov	r2, r3
 8010c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c9a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ca0:	e841 2300 	strex	r3, r2, [r1]
 8010ca4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d1e6      	bne.n	8010c7a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	3308      	adds	r3, #8
 8010cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cb6:	e853 3f00 	ldrex	r3, [r3]
 8010cba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cbe:	f043 0301 	orr.w	r3, r3, #1
 8010cc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	3308      	adds	r3, #8
 8010cca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010ccc:	637a      	str	r2, [r7, #52]	@ 0x34
 8010cce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010cd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cd4:	e841 2300 	strex	r3, r2, [r1]
 8010cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d1e5      	bne.n	8010cac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	3308      	adds	r3, #8
 8010ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	e853 3f00 	ldrex	r3, [r3]
 8010cee:	613b      	str	r3, [r7, #16]
   return(result);
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	3308      	adds	r3, #8
 8010cfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010d00:	623a      	str	r2, [r7, #32]
 8010d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d04:	69f9      	ldr	r1, [r7, #28]
 8010d06:	6a3a      	ldr	r2, [r7, #32]
 8010d08:	e841 2300 	strex	r3, r2, [r1]
 8010d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1e5      	bne.n	8010ce0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3758      	adds	r7, #88	@ 0x58
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	08010e7b 	.word	0x08010e7b
 8010d24:	08010fa7 	.word	0x08010fa7
 8010d28:	08010fe5 	.word	0x08010fe5

08010d2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b08f      	sub	sp, #60	@ 0x3c
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d3a:	6a3b      	ldr	r3, [r7, #32]
 8010d3c:	e853 3f00 	ldrex	r3, [r3]
 8010d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d42:	69fb      	ldr	r3, [r7, #28]
 8010d44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d54:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d5a:	e841 2300 	strex	r3, r2, [r1]
 8010d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d1e6      	bne.n	8010d34 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	3308      	adds	r3, #8
 8010d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	e853 3f00 	ldrex	r3, [r3]
 8010d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	3308      	adds	r3, #8
 8010d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d86:	61ba      	str	r2, [r7, #24]
 8010d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d8a:	6979      	ldr	r1, [r7, #20]
 8010d8c:	69ba      	ldr	r2, [r7, #24]
 8010d8e:	e841 2300 	strex	r3, r2, [r1]
 8010d92:	613b      	str	r3, [r7, #16]
   return(result);
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d1e5      	bne.n	8010d66 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2220      	movs	r2, #32
 8010d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010da2:	bf00      	nop
 8010da4:	373c      	adds	r7, #60	@ 0x3c
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010dae:	b480      	push	{r7}
 8010db0:	b095      	sub	sp, #84	@ 0x54
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dbe:	e853 3f00 	ldrex	r3, [r3]
 8010dc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8010dd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010dda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ddc:	e841 2300 	strex	r3, r2, [r1]
 8010de0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d1e6      	bne.n	8010db6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	3308      	adds	r3, #8
 8010dee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010df0:	6a3b      	ldr	r3, [r7, #32]
 8010df2:	e853 3f00 	ldrex	r3, [r3]
 8010df6:	61fb      	str	r3, [r7, #28]
   return(result);
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010dfe:	f023 0301 	bic.w	r3, r3, #1
 8010e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	3308      	adds	r3, #8
 8010e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e14:	e841 2300 	strex	r3, r2, [r1]
 8010e18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d1e3      	bne.n	8010de8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d118      	bne.n	8010e5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	e853 3f00 	ldrex	r3, [r3]
 8010e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	f023 0310 	bic.w	r3, r3, #16
 8010e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	461a      	mov	r2, r3
 8010e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e46:	61bb      	str	r3, [r7, #24]
 8010e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e4a:	6979      	ldr	r1, [r7, #20]
 8010e4c:	69ba      	ldr	r2, [r7, #24]
 8010e4e:	e841 2300 	strex	r3, r2, [r1]
 8010e52:	613b      	str	r3, [r7, #16]
   return(result);
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d1e6      	bne.n	8010e28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2220      	movs	r2, #32
 8010e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2200      	movs	r2, #0
 8010e66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010e6e:	bf00      	nop
 8010e70:	3754      	adds	r7, #84	@ 0x54
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr

08010e7a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010e7a:	b580      	push	{r7, lr}
 8010e7c:	b09c      	sub	sp, #112	@ 0x70
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e86:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f003 0320 	and.w	r3, r3, #32
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d171      	bne.n	8010f7a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ea6:	e853 3f00 	ldrex	r3, [r3]
 8010eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010eae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	461a      	mov	r2, r3
 8010eba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010ebe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010ec2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010ec4:	e841 2300 	strex	r3, r2, [r1]
 8010ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d1e6      	bne.n	8010e9e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	3308      	adds	r3, #8
 8010ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eda:	e853 3f00 	ldrex	r3, [r3]
 8010ede:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ee2:	f023 0301 	bic.w	r3, r3, #1
 8010ee6:	667b      	str	r3, [r7, #100]	@ 0x64
 8010ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	3308      	adds	r3, #8
 8010eee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010ef0:	647a      	str	r2, [r7, #68]	@ 0x44
 8010ef2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010ef6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ef8:	e841 2300 	strex	r3, r2, [r1]
 8010efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d1e5      	bne.n	8010ed0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	3308      	adds	r3, #8
 8010f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f0e:	e853 3f00 	ldrex	r3, [r3]
 8010f12:	623b      	str	r3, [r7, #32]
   return(result);
 8010f14:	6a3b      	ldr	r3, [r7, #32]
 8010f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8010f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	3308      	adds	r3, #8
 8010f22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010f24:	633a      	str	r2, [r7, #48]	@ 0x30
 8010f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f2c:	e841 2300 	strex	r3, r2, [r1]
 8010f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1e5      	bne.n	8010f04 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f3a:	2220      	movs	r2, #32
 8010f3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f44:	2b01      	cmp	r3, #1
 8010f46:	d118      	bne.n	8010f7a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	e853 3f00 	ldrex	r3, [r3]
 8010f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f023 0310 	bic.w	r3, r3, #16
 8010f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	461a      	mov	r2, r3
 8010f64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f66:	61fb      	str	r3, [r7, #28]
 8010f68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f6a:	69b9      	ldr	r1, [r7, #24]
 8010f6c:	69fa      	ldr	r2, [r7, #28]
 8010f6e:	e841 2300 	strex	r3, r2, [r1]
 8010f72:	617b      	str	r3, [r7, #20]
   return(result);
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d1e6      	bne.n	8010f48 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d107      	bne.n	8010f98 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f8e:	4619      	mov	r1, r3
 8010f90:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010f92:	f7ff fa37 	bl	8010404 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f96:	e002      	b.n	8010f9e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010f98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010f9a:	f7f6 f999 	bl	80072d0 <HAL_UART_RxCpltCallback>
}
 8010f9e:	bf00      	nop
 8010fa0:	3770      	adds	r7, #112	@ 0x70
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}

08010fa6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010fa6:	b580      	push	{r7, lr}
 8010fa8:	b084      	sub	sp, #16
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fb2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d109      	bne.n	8010fd6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010fc8:	085b      	lsrs	r3, r3, #1
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	4619      	mov	r1, r3
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	f7ff fa18 	bl	8010404 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010fd4:	e002      	b.n	8010fdc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010fd6:	68f8      	ldr	r0, [r7, #12]
 8010fd8:	f7ff fa00 	bl	80103dc <HAL_UART_RxHalfCpltCallback>
}
 8010fdc:	bf00      	nop
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b086      	sub	sp, #24
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ff0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ff8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011000:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801100c:	2b80      	cmp	r3, #128	@ 0x80
 801100e:	d109      	bne.n	8011024 <UART_DMAError+0x40>
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	2b21      	cmp	r3, #33	@ 0x21
 8011014:	d106      	bne.n	8011024 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	2200      	movs	r2, #0
 801101a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 801101e:	6978      	ldr	r0, [r7, #20]
 8011020:	f7ff fe84 	bl	8010d2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801102e:	2b40      	cmp	r3, #64	@ 0x40
 8011030:	d109      	bne.n	8011046 <UART_DMAError+0x62>
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b22      	cmp	r3, #34	@ 0x22
 8011036:	d106      	bne.n	8011046 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	2200      	movs	r2, #0
 801103c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011040:	6978      	ldr	r0, [r7, #20]
 8011042:	f7ff feb4 	bl	8010dae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801104c:	f043 0210 	orr.w	r2, r3, #16
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011056:	6978      	ldr	r0, [r7, #20]
 8011058:	f7ff f9ca 	bl	80103f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801105c:	bf00      	nop
 801105e:	3718      	adds	r7, #24
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2200      	movs	r2, #0
 8011076:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801107a:	68f8      	ldr	r0, [r7, #12]
 801107c:	f7ff f9b8 	bl	80103f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011080:	bf00      	nop
 8011082:	3710      	adds	r7, #16
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b088      	sub	sp, #32
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	e853 3f00 	ldrex	r3, [r3]
 801109c:	60bb      	str	r3, [r7, #8]
   return(result);
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80110a4:	61fb      	str	r3, [r7, #28]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	461a      	mov	r2, r3
 80110ac:	69fb      	ldr	r3, [r7, #28]
 80110ae:	61bb      	str	r3, [r7, #24]
 80110b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110b2:	6979      	ldr	r1, [r7, #20]
 80110b4:	69ba      	ldr	r2, [r7, #24]
 80110b6:	e841 2300 	strex	r3, r2, [r1]
 80110ba:	613b      	str	r3, [r7, #16]
   return(result);
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d1e6      	bne.n	8011090 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2220      	movs	r2, #32
 80110c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f7ff f979 	bl	80103c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80110d6:	bf00      	nop
 80110d8:	3720      	adds	r7, #32
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80110de:	b480      	push	{r7}
 80110e0:	b083      	sub	sp, #12
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80110e6:	bf00      	nop
 80110e8:	370c      	adds	r7, #12
 80110ea:	46bd      	mov	sp, r7
 80110ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f0:	4770      	bx	lr

080110f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80110f2:	b480      	push	{r7}
 80110f4:	b083      	sub	sp, #12
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80110fa:	bf00      	nop
 80110fc:	370c      	adds	r7, #12
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr

08011106 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011106:	b480      	push	{r7}
 8011108:	b083      	sub	sp, #12
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801110e:	bf00      	nop
 8011110:	370c      	adds	r7, #12
 8011112:	46bd      	mov	sp, r7
 8011114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011118:	4770      	bx	lr

0801111a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801111a:	b480      	push	{r7}
 801111c:	b085      	sub	sp, #20
 801111e:	af00      	add	r7, sp, #0
 8011120:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011128:	2b01      	cmp	r3, #1
 801112a:	d101      	bne.n	8011130 <HAL_UARTEx_DisableFifoMode+0x16>
 801112c:	2302      	movs	r3, #2
 801112e:	e027      	b.n	8011180 <HAL_UARTEx_DisableFifoMode+0x66>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2201      	movs	r2, #1
 8011134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2224      	movs	r2, #36	@ 0x24
 801113c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	f022 0201 	bic.w	r2, r2, #1
 8011156:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801115e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2200      	movs	r2, #0
 8011164:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	68fa      	ldr	r2, [r7, #12]
 801116c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2220      	movs	r2, #32
 8011172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2200      	movs	r2, #0
 801117a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801117e:	2300      	movs	r3, #0
}
 8011180:	4618      	mov	r0, r3
 8011182:	3714      	adds	r7, #20
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr

0801118c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b084      	sub	sp, #16
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801119c:	2b01      	cmp	r3, #1
 801119e:	d101      	bne.n	80111a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80111a0:	2302      	movs	r3, #2
 80111a2:	e02d      	b.n	8011200 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2201      	movs	r2, #1
 80111a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2224      	movs	r2, #36	@ 0x24
 80111b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	f022 0201 	bic.w	r2, r2, #1
 80111ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	689b      	ldr	r3, [r3, #8]
 80111d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	683a      	ldr	r2, [r7, #0]
 80111dc:	430a      	orrs	r2, r1
 80111de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f000 f84f 	bl	8011284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2220      	movs	r2, #32
 80111f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80111fe:	2300      	movs	r3, #0
}
 8011200:	4618      	mov	r0, r3
 8011202:	3710      	adds	r7, #16
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011218:	2b01      	cmp	r3, #1
 801121a:	d101      	bne.n	8011220 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801121c:	2302      	movs	r3, #2
 801121e:	e02d      	b.n	801127c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2201      	movs	r2, #1
 8011224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2224      	movs	r2, #36	@ 0x24
 801122c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	681a      	ldr	r2, [r3, #0]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f022 0201 	bic.w	r2, r2, #1
 8011246:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	689b      	ldr	r3, [r3, #8]
 801124e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	683a      	ldr	r2, [r7, #0]
 8011258:	430a      	orrs	r2, r1
 801125a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 f811 	bl	8011284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2220      	movs	r2, #32
 801126e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2200      	movs	r2, #0
 8011276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801127a:	2300      	movs	r3, #0
}
 801127c:	4618      	mov	r0, r3
 801127e:	3710      	adds	r7, #16
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011284:	b480      	push	{r7}
 8011286:	b085      	sub	sp, #20
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011290:	2b00      	cmp	r3, #0
 8011292:	d108      	bne.n	80112a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2201      	movs	r2, #1
 8011298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2201      	movs	r2, #1
 80112a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80112a4:	e031      	b.n	801130a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80112a6:	2308      	movs	r3, #8
 80112a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80112aa:	2308      	movs	r3, #8
 80112ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	689b      	ldr	r3, [r3, #8]
 80112b4:	0e5b      	lsrs	r3, r3, #25
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	f003 0307 	and.w	r3, r3, #7
 80112bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	0f5b      	lsrs	r3, r3, #29
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	f003 0307 	and.w	r3, r3, #7
 80112cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80112ce:	7bbb      	ldrb	r3, [r7, #14]
 80112d0:	7b3a      	ldrb	r2, [r7, #12]
 80112d2:	4911      	ldr	r1, [pc, #68]	@ (8011318 <UARTEx_SetNbDataToProcess+0x94>)
 80112d4:	5c8a      	ldrb	r2, [r1, r2]
 80112d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80112da:	7b3a      	ldrb	r2, [r7, #12]
 80112dc:	490f      	ldr	r1, [pc, #60]	@ (801131c <UARTEx_SetNbDataToProcess+0x98>)
 80112de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80112e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112ec:	7bfb      	ldrb	r3, [r7, #15]
 80112ee:	7b7a      	ldrb	r2, [r7, #13]
 80112f0:	4909      	ldr	r1, [pc, #36]	@ (8011318 <UARTEx_SetNbDataToProcess+0x94>)
 80112f2:	5c8a      	ldrb	r2, [r1, r2]
 80112f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80112f8:	7b7a      	ldrb	r2, [r7, #13]
 80112fa:	4908      	ldr	r1, [pc, #32]	@ (801131c <UARTEx_SetNbDataToProcess+0x98>)
 80112fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8011302:	b29a      	uxth	r2, r3
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801130a:	bf00      	nop
 801130c:	3714      	adds	r7, #20
 801130e:	46bd      	mov	sp, r7
 8011310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop
 8011318:	08021ee8 	.word	0x08021ee8
 801131c:	08021ef0 	.word	0x08021ef0

08011320 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011320:	b480      	push	{r7}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011330:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011334:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	b29a      	uxth	r2, r3
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011340:	2300      	movs	r3, #0
}
 8011342:	4618      	mov	r0, r3
 8011344:	3714      	adds	r7, #20
 8011346:	46bd      	mov	sp, r7
 8011348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134c:	4770      	bx	lr

0801134e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801134e:	b480      	push	{r7}
 8011350:	b085      	sub	sp, #20
 8011352:	af00      	add	r7, sp, #0
 8011354:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011356:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801135a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8011362:	b29a      	uxth	r2, r3
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	b29b      	uxth	r3, r3
 8011368:	43db      	mvns	r3, r3
 801136a:	b29b      	uxth	r3, r3
 801136c:	4013      	ands	r3, r2
 801136e:	b29a      	uxth	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011376:	2300      	movs	r3, #0
}
 8011378:	4618      	mov	r0, r3
 801137a:	3714      	adds	r7, #20
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011384:	b480      	push	{r7}
 8011386:	b085      	sub	sp, #20
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	1d3b      	adds	r3, r7, #4
 801138e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	2201      	movs	r2, #1
 8011396:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2200      	movs	r2, #0
 801139e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	2200      	movs	r2, #0
 80113a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2200      	movs	r2, #0
 80113ae:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80113b2:	2300      	movs	r3, #0
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr

080113c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b0a7      	sub	sp, #156	@ 0x9c
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	4413      	add	r3, r2
 80113da:	881b      	ldrh	r3, [r3, #0]
 80113dc:	b29b      	uxth	r3, r3
 80113de:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80113e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113e6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	78db      	ldrb	r3, [r3, #3]
 80113ee:	2b03      	cmp	r3, #3
 80113f0:	d81f      	bhi.n	8011432 <USB_ActivateEndpoint+0x72>
 80113f2:	a201      	add	r2, pc, #4	@ (adr r2, 80113f8 <USB_ActivateEndpoint+0x38>)
 80113f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f8:	08011409 	.word	0x08011409
 80113fc:	08011425 	.word	0x08011425
 8011400:	0801143b 	.word	0x0801143b
 8011404:	08011417 	.word	0x08011417
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011408:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801140c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011410:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8011414:	e012      	b.n	801143c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011416:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801141a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 801141e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8011422:	e00b      	b.n	801143c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011424:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011428:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801142c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8011430:	e004      	b.n	801143c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8011432:	2301      	movs	r3, #1
 8011434:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8011438:	e000      	b.n	801143c <USB_ActivateEndpoint+0x7c>
      break;
 801143a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	441a      	add	r2, r3
 8011446:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801144a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801144e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801145a:	b29b      	uxth	r3, r3
 801145c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	4413      	add	r3, r2
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	b29b      	uxth	r3, r3
 801146c:	b21b      	sxth	r3, r3
 801146e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011476:	b21a      	sxth	r2, r3
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	781b      	ldrb	r3, [r3, #0]
 801147c:	b21b      	sxth	r3, r3
 801147e:	4313      	orrs	r3, r2
 8011480:	b21b      	sxth	r3, r3
 8011482:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	009b      	lsls	r3, r3, #2
 801148e:	441a      	add	r2, r3
 8011490:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8011494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801149c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	7b1b      	ldrb	r3, [r3, #12]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	f040 8180 	bne.w	80117b2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	785b      	ldrb	r3, [r3, #1]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	f000 8084 	beq.w	80115c4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	61bb      	str	r3, [r7, #24]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	461a      	mov	r2, r3
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	4413      	add	r3, r2
 80114ce:	61bb      	str	r3, [r7, #24]
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	00da      	lsls	r2, r3, #3
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	4413      	add	r3, r2
 80114da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80114de:	617b      	str	r3, [r7, #20]
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	88db      	ldrh	r3, [r3, #6]
 80114e4:	085b      	lsrs	r3, r3, #1
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	005b      	lsls	r3, r3, #1
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	4413      	add	r3, r2
 80114fa:	881b      	ldrh	r3, [r3, #0]
 80114fc:	827b      	strh	r3, [r7, #18]
 80114fe:	8a7b      	ldrh	r3, [r7, #18]
 8011500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011504:	2b00      	cmp	r3, #0
 8011506:	d01b      	beq.n	8011540 <USB_ActivateEndpoint+0x180>
 8011508:	687a      	ldr	r2, [r7, #4]
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	781b      	ldrb	r3, [r3, #0]
 801150e:	009b      	lsls	r3, r3, #2
 8011510:	4413      	add	r3, r2
 8011512:	881b      	ldrh	r3, [r3, #0]
 8011514:	b29b      	uxth	r3, r3
 8011516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801151a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801151e:	823b      	strh	r3, [r7, #16]
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	009b      	lsls	r3, r3, #2
 8011528:	441a      	add	r2, r3
 801152a:	8a3b      	ldrh	r3, [r7, #16]
 801152c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011538:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801153c:	b29b      	uxth	r3, r3
 801153e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	78db      	ldrb	r3, [r3, #3]
 8011544:	2b01      	cmp	r3, #1
 8011546:	d020      	beq.n	801158a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011548:	687a      	ldr	r2, [r7, #4]
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	4413      	add	r3, r2
 8011552:	881b      	ldrh	r3, [r3, #0]
 8011554:	b29b      	uxth	r3, r3
 8011556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801155a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801155e:	81bb      	strh	r3, [r7, #12]
 8011560:	89bb      	ldrh	r3, [r7, #12]
 8011562:	f083 0320 	eor.w	r3, r3, #32
 8011566:	81bb      	strh	r3, [r7, #12]
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	441a      	add	r2, r3
 8011572:	89bb      	ldrh	r3, [r7, #12]
 8011574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801157c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011584:	b29b      	uxth	r3, r3
 8011586:	8013      	strh	r3, [r2, #0]
 8011588:	e3f9      	b.n	8011d7e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	b29b      	uxth	r3, r3
 8011598:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801159c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80115a0:	81fb      	strh	r3, [r7, #14]
 80115a2:	687a      	ldr	r2, [r7, #4]
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	441a      	add	r2, r3
 80115ac:	89fb      	ldrh	r3, [r7, #14]
 80115ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115be:	b29b      	uxth	r3, r3
 80115c0:	8013      	strh	r3, [r2, #0]
 80115c2:	e3dc      	b.n	8011d7e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80115ce:	b29b      	uxth	r3, r3
 80115d0:	461a      	mov	r2, r3
 80115d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115d4:	4413      	add	r3, r2
 80115d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	00da      	lsls	r2, r3, #3
 80115de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115e0:	4413      	add	r3, r2
 80115e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80115e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	88db      	ldrh	r3, [r3, #6]
 80115ec:	085b      	lsrs	r3, r3, #1
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	005b      	lsls	r3, r3, #1
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011602:	b29b      	uxth	r3, r3
 8011604:	461a      	mov	r2, r3
 8011606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011608:	4413      	add	r3, r2
 801160a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	00da      	lsls	r2, r3, #3
 8011612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011614:	4413      	add	r3, r2
 8011616:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801161a:	627b      	str	r3, [r7, #36]	@ 0x24
 801161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801161e:	881b      	ldrh	r3, [r3, #0]
 8011620:	b29b      	uxth	r3, r3
 8011622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011626:	b29a      	uxth	r2, r3
 8011628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162a:	801a      	strh	r2, [r3, #0]
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	691b      	ldr	r3, [r3, #16]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d10a      	bne.n	801164a <USB_ActivateEndpoint+0x28a>
 8011634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011636:	881b      	ldrh	r3, [r3, #0]
 8011638:	b29b      	uxth	r3, r3
 801163a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801163e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011642:	b29a      	uxth	r2, r3
 8011644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011646:	801a      	strh	r2, [r3, #0]
 8011648:	e041      	b.n	80116ce <USB_ActivateEndpoint+0x30e>
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	691b      	ldr	r3, [r3, #16]
 801164e:	2b3e      	cmp	r3, #62	@ 0x3e
 8011650:	d81c      	bhi.n	801168c <USB_ActivateEndpoint+0x2cc>
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	691b      	ldr	r3, [r3, #16]
 8011656:	085b      	lsrs	r3, r3, #1
 8011658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	691b      	ldr	r3, [r3, #16]
 8011660:	f003 0301 	and.w	r3, r3, #1
 8011664:	2b00      	cmp	r3, #0
 8011666:	d004      	beq.n	8011672 <USB_ActivateEndpoint+0x2b2>
 8011668:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801166c:	3301      	adds	r3, #1
 801166e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011674:	881b      	ldrh	r3, [r3, #0]
 8011676:	b29a      	uxth	r2, r3
 8011678:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801167c:	b29b      	uxth	r3, r3
 801167e:	029b      	lsls	r3, r3, #10
 8011680:	b29b      	uxth	r3, r3
 8011682:	4313      	orrs	r3, r2
 8011684:	b29a      	uxth	r2, r3
 8011686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011688:	801a      	strh	r2, [r3, #0]
 801168a:	e020      	b.n	80116ce <USB_ActivateEndpoint+0x30e>
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	691b      	ldr	r3, [r3, #16]
 8011690:	095b      	lsrs	r3, r3, #5
 8011692:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	691b      	ldr	r3, [r3, #16]
 801169a:	f003 031f 	and.w	r3, r3, #31
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d104      	bne.n	80116ac <USB_ActivateEndpoint+0x2ec>
 80116a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80116a6:	3b01      	subs	r3, #1
 80116a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80116ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ae:	881b      	ldrh	r3, [r3, #0]
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	029b      	lsls	r3, r3, #10
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	4313      	orrs	r3, r2
 80116be:	b29b      	uxth	r3, r3
 80116c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	4413      	add	r3, r2
 80116d8:	881b      	ldrh	r3, [r3, #0]
 80116da:	847b      	strh	r3, [r7, #34]	@ 0x22
 80116dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80116de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d01b      	beq.n	801171e <USB_ActivateEndpoint+0x35e>
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4413      	add	r3, r2
 80116f0:	881b      	ldrh	r3, [r3, #0]
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116fc:	843b      	strh	r3, [r7, #32]
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	009b      	lsls	r3, r3, #2
 8011706:	441a      	add	r2, r3
 8011708:	8c3b      	ldrh	r3, [r7, #32]
 801170a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801170e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801171a:	b29b      	uxth	r3, r3
 801171c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d124      	bne.n	8011770 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011726:	687a      	ldr	r2, [r7, #4]
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	4413      	add	r3, r2
 8011730:	881b      	ldrh	r3, [r3, #0]
 8011732:	b29b      	uxth	r3, r3
 8011734:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801173c:	83bb      	strh	r3, [r7, #28]
 801173e:	8bbb      	ldrh	r3, [r7, #28]
 8011740:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011744:	83bb      	strh	r3, [r7, #28]
 8011746:	8bbb      	ldrh	r3, [r7, #28]
 8011748:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801174c:	83bb      	strh	r3, [r7, #28]
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	441a      	add	r2, r3
 8011758:	8bbb      	ldrh	r3, [r7, #28]
 801175a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801175e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801176a:	b29b      	uxth	r3, r3
 801176c:	8013      	strh	r3, [r2, #0]
 801176e:	e306      	b.n	8011d7e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	009b      	lsls	r3, r3, #2
 8011778:	4413      	add	r3, r2
 801177a:	881b      	ldrh	r3, [r3, #0]
 801177c:	b29b      	uxth	r3, r3
 801177e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011786:	83fb      	strh	r3, [r7, #30]
 8011788:	8bfb      	ldrh	r3, [r7, #30]
 801178a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801178e:	83fb      	strh	r3, [r7, #30]
 8011790:	687a      	ldr	r2, [r7, #4]
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	009b      	lsls	r3, r3, #2
 8011798:	441a      	add	r2, r3
 801179a:	8bfb      	ldrh	r3, [r7, #30]
 801179c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	8013      	strh	r3, [r2, #0]
 80117b0:	e2e5      	b.n	8011d7e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	78db      	ldrb	r3, [r3, #3]
 80117b6:	2b02      	cmp	r3, #2
 80117b8:	d11e      	bne.n	80117f8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	4413      	add	r3, r2
 80117c4:	881b      	ldrh	r3, [r3, #0]
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80117cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117d0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	441a      	add	r2, r3
 80117de:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80117e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80117ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	8013      	strh	r3, [r2, #0]
 80117f6:	e01d      	b.n	8011834 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	009b      	lsls	r3, r3, #2
 8011800:	4413      	add	r3, r2
 8011802:	881b      	ldrh	r3, [r3, #0]
 8011804:	b29b      	uxth	r3, r3
 8011806:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801180a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801180e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	441a      	add	r2, r3
 801181c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8011820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801182c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011830:	b29b      	uxth	r3, r3
 8011832:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801183e:	b29b      	uxth	r3, r3
 8011840:	461a      	mov	r2, r3
 8011842:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011844:	4413      	add	r3, r2
 8011846:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	00da      	lsls	r2, r3, #3
 801184e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011850:	4413      	add	r3, r2
 8011852:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011856:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	891b      	ldrh	r3, [r3, #8]
 801185c:	085b      	lsrs	r3, r3, #1
 801185e:	b29b      	uxth	r3, r3
 8011860:	005b      	lsls	r3, r3, #1
 8011862:	b29a      	uxth	r2, r3
 8011864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011866:	801a      	strh	r2, [r3, #0]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	677b      	str	r3, [r7, #116]	@ 0x74
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011872:	b29b      	uxth	r3, r3
 8011874:	461a      	mov	r2, r3
 8011876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011878:	4413      	add	r3, r2
 801187a:	677b      	str	r3, [r7, #116]	@ 0x74
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	00da      	lsls	r2, r3, #3
 8011882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011884:	4413      	add	r3, r2
 8011886:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801188a:	673b      	str	r3, [r7, #112]	@ 0x70
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	895b      	ldrh	r3, [r3, #10]
 8011890:	085b      	lsrs	r3, r3, #1
 8011892:	b29b      	uxth	r3, r3
 8011894:	005b      	lsls	r3, r3, #1
 8011896:	b29a      	uxth	r2, r3
 8011898:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801189a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	785b      	ldrb	r3, [r3, #1]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	f040 81af 	bne.w	8011c04 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	009b      	lsls	r3, r3, #2
 80118ae:	4413      	add	r3, r2
 80118b0:	881b      	ldrh	r3, [r3, #0]
 80118b2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80118b6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80118ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d01d      	beq.n	80118fe <USB_ActivateEndpoint+0x53e>
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	4413      	add	r3, r2
 80118cc:	881b      	ldrh	r3, [r3, #0]
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80118d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118d8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	009b      	lsls	r3, r3, #2
 80118e4:	441a      	add	r2, r3
 80118e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80118ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80118f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	4413      	add	r3, r2
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 801190e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8011912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011916:	2b00      	cmp	r3, #0
 8011918:	d01d      	beq.n	8011956 <USB_ActivateEndpoint+0x596>
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	4413      	add	r3, r2
 8011924:	881b      	ldrh	r3, [r3, #0]
 8011926:	b29b      	uxth	r3, r3
 8011928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801192c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011930:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8011934:	687a      	ldr	r2, [r7, #4]
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	441a      	add	r2, r3
 801193e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8011942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801194a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801194e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011952:	b29b      	uxth	r3, r3
 8011954:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	785b      	ldrb	r3, [r3, #1]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d16b      	bne.n	8011a36 <USB_ActivateEndpoint+0x676>
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011968:	b29b      	uxth	r3, r3
 801196a:	461a      	mov	r2, r3
 801196c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801196e:	4413      	add	r3, r2
 8011970:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	00da      	lsls	r2, r3, #3
 8011978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801197a:	4413      	add	r3, r2
 801197c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	b29b      	uxth	r3, r3
 8011988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801198c:	b29a      	uxth	r2, r3
 801198e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011990:	801a      	strh	r2, [r3, #0]
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	691b      	ldr	r3, [r3, #16]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d10a      	bne.n	80119b0 <USB_ActivateEndpoint+0x5f0>
 801199a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801199c:	881b      	ldrh	r3, [r3, #0]
 801199e:	b29b      	uxth	r3, r3
 80119a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119ac:	801a      	strh	r2, [r3, #0]
 80119ae:	e05d      	b.n	8011a6c <USB_ActivateEndpoint+0x6ac>
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	691b      	ldr	r3, [r3, #16]
 80119b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80119b6:	d81c      	bhi.n	80119f2 <USB_ActivateEndpoint+0x632>
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	691b      	ldr	r3, [r3, #16]
 80119bc:	085b      	lsrs	r3, r3, #1
 80119be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	f003 0301 	and.w	r3, r3, #1
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d004      	beq.n	80119d8 <USB_ActivateEndpoint+0x618>
 80119ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80119d2:	3301      	adds	r3, #1
 80119d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80119d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119da:	881b      	ldrh	r3, [r3, #0]
 80119dc:	b29a      	uxth	r2, r3
 80119de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	029b      	lsls	r3, r3, #10
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	4313      	orrs	r3, r2
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119ee:	801a      	strh	r2, [r3, #0]
 80119f0:	e03c      	b.n	8011a6c <USB_ActivateEndpoint+0x6ac>
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	691b      	ldr	r3, [r3, #16]
 80119f6:	095b      	lsrs	r3, r3, #5
 80119f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	691b      	ldr	r3, [r3, #16]
 8011a00:	f003 031f 	and.w	r3, r3, #31
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d104      	bne.n	8011a12 <USB_ActivateEndpoint+0x652>
 8011a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a0c:	3b01      	subs	r3, #1
 8011a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a14:	881b      	ldrh	r3, [r3, #0]
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	029b      	lsls	r3, r3, #10
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	4313      	orrs	r3, r2
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a32:	801a      	strh	r2, [r3, #0]
 8011a34:	e01a      	b.n	8011a6c <USB_ActivateEndpoint+0x6ac>
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	785b      	ldrb	r3, [r3, #1]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d116      	bne.n	8011a6c <USB_ActivateEndpoint+0x6ac>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a4e:	4413      	add	r3, r2
 8011a50:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	00da      	lsls	r2, r3, #3
 8011a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a5a:	4413      	add	r3, r2
 8011a5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011a60:	653b      	str	r3, [r7, #80]	@ 0x50
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	691b      	ldr	r3, [r3, #16]
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a6a:	801a      	strh	r2, [r3, #0]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	785b      	ldrb	r3, [r3, #1]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d16b      	bne.n	8011b50 <USB_ActivateEndpoint+0x790>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	461a      	mov	r2, r3
 8011a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a88:	4413      	add	r3, r2
 8011a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	00da      	lsls	r2, r3, #3
 8011a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a94:	4413      	add	r3, r2
 8011a96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011aa6:	b29a      	uxth	r2, r3
 8011aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aaa:	801a      	strh	r2, [r3, #0]
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	691b      	ldr	r3, [r3, #16]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d10a      	bne.n	8011aca <USB_ActivateEndpoint+0x70a>
 8011ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab6:	881b      	ldrh	r3, [r3, #0]
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ac6:	801a      	strh	r2, [r3, #0]
 8011ac8:	e05b      	b.n	8011b82 <USB_ActivateEndpoint+0x7c2>
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	691b      	ldr	r3, [r3, #16]
 8011ace:	2b3e      	cmp	r3, #62	@ 0x3e
 8011ad0:	d81c      	bhi.n	8011b0c <USB_ActivateEndpoint+0x74c>
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	691b      	ldr	r3, [r3, #16]
 8011ad6:	085b      	lsrs	r3, r3, #1
 8011ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	691b      	ldr	r3, [r3, #16]
 8011ae0:	f003 0301 	and.w	r3, r3, #1
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d004      	beq.n	8011af2 <USB_ActivateEndpoint+0x732>
 8011ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011aec:	3301      	adds	r3, #1
 8011aee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	029b      	lsls	r3, r3, #10
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	4313      	orrs	r3, r2
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b08:	801a      	strh	r2, [r3, #0]
 8011b0a:	e03a      	b.n	8011b82 <USB_ActivateEndpoint+0x7c2>
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	691b      	ldr	r3, [r3, #16]
 8011b10:	095b      	lsrs	r3, r3, #5
 8011b12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	691b      	ldr	r3, [r3, #16]
 8011b1a:	f003 031f 	and.w	r3, r3, #31
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d104      	bne.n	8011b2c <USB_ActivateEndpoint+0x76c>
 8011b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011b26:	3b01      	subs	r3, #1
 8011b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b2e:	881b      	ldrh	r3, [r3, #0]
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	029b      	lsls	r3, r3, #10
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b4c:	801a      	strh	r2, [r3, #0]
 8011b4e:	e018      	b.n	8011b82 <USB_ActivateEndpoint+0x7c2>
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	785b      	ldrb	r3, [r3, #1]
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d114      	bne.n	8011b82 <USB_ActivateEndpoint+0x7c2>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	461a      	mov	r2, r3
 8011b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b64:	4413      	add	r3, r2
 8011b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	00da      	lsls	r2, r3, #3
 8011b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b70:	4413      	add	r3, r2
 8011b72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	691b      	ldr	r3, [r3, #16]
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b80:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011b82:	687a      	ldr	r2, [r7, #4]
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	4413      	add	r3, r2
 8011b8c:	881b      	ldrh	r3, [r3, #0]
 8011b8e:	b29b      	uxth	r3, r3
 8011b90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b98:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011b9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011b9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011ba0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011ba2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011ba4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011ba8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011baa:	687a      	ldr	r2, [r7, #4]
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	441a      	add	r2, r3
 8011bb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011bca:	687a      	ldr	r2, [r7, #4]
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	4413      	add	r3, r2
 8011bd4:	881b      	ldrh	r3, [r3, #0]
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011be0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	441a      	add	r2, r3
 8011bec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	8013      	strh	r3, [r2, #0]
 8011c02:	e0bc      	b.n	8011d7e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	4413      	add	r3, r2
 8011c0e:	881b      	ldrh	r3, [r3, #0]
 8011c10:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8011c14:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d01d      	beq.n	8011c5c <USB_ActivateEndpoint+0x89c>
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	4413      	add	r3, r2
 8011c2a:	881b      	ldrh	r3, [r3, #0]
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c36:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8011c3a:	687a      	ldr	r2, [r7, #4]
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	441a      	add	r2, r3
 8011c44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	009b      	lsls	r3, r3, #2
 8011c64:	4413      	add	r3, r2
 8011c66:	881b      	ldrh	r3, [r3, #0]
 8011c68:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011c6c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d01d      	beq.n	8011cb4 <USB_ActivateEndpoint+0x8f4>
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	781b      	ldrb	r3, [r3, #0]
 8011c7e:	009b      	lsls	r3, r3, #2
 8011c80:	4413      	add	r3, r2
 8011c82:	881b      	ldrh	r3, [r3, #0]
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c8e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	441a      	add	r2, r3
 8011c9c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	78db      	ldrb	r3, [r3, #3]
 8011cb8:	2b01      	cmp	r3, #1
 8011cba:	d024      	beq.n	8011d06 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	009b      	lsls	r3, r3, #2
 8011cc4:	4413      	add	r3, r2
 8011cc6:	881b      	ldrh	r3, [r3, #0]
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011cd2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011cd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011cda:	f083 0320 	eor.w	r3, r3, #32
 8011cde:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	441a      	add	r2, r3
 8011cec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	8013      	strh	r3, [r2, #0]
 8011d04:	e01d      	b.n	8011d42 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	4413      	add	r3, r2
 8011d10:	881b      	ldrh	r3, [r3, #0]
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d1c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	441a      	add	r2, r3
 8011d2a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011d2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	4413      	add	r3, r2
 8011d4c:	881b      	ldrh	r3, [r3, #0]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d58:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011d5c:	687a      	ldr	r2, [r7, #4]
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	441a      	add	r2, r3
 8011d66:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011d7e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	379c      	adds	r7, #156	@ 0x9c
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr
 8011d8e:	bf00      	nop

08011d90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b08d      	sub	sp, #52	@ 0x34
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	7b1b      	ldrb	r3, [r3, #12]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f040 808e 	bne.w	8011ec0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	785b      	ldrb	r3, [r3, #1]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d044      	beq.n	8011e36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4413      	add	r3, r2
 8011db6:	881b      	ldrh	r3, [r3, #0]
 8011db8:	81bb      	strh	r3, [r7, #12]
 8011dba:	89bb      	ldrh	r3, [r7, #12]
 8011dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d01b      	beq.n	8011dfc <USB_DeactivateEndpoint+0x6c>
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	4413      	add	r3, r2
 8011dce:	881b      	ldrh	r3, [r3, #0]
 8011dd0:	b29b      	uxth	r3, r3
 8011dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011dda:	817b      	strh	r3, [r7, #10]
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	441a      	add	r2, r3
 8011de6:	897b      	ldrh	r3, [r7, #10]
 8011de8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011df0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011df4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011dfc:	687a      	ldr	r2, [r7, #4]
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	009b      	lsls	r3, r3, #2
 8011e04:	4413      	add	r3, r2
 8011e06:	881b      	ldrh	r3, [r3, #0]
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e12:	813b      	strh	r3, [r7, #8]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	441a      	add	r2, r3
 8011e1e:	893b      	ldrh	r3, [r7, #8]
 8011e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	8013      	strh	r3, [r2, #0]
 8011e34:	e192      	b.n	801215c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e36:	687a      	ldr	r2, [r7, #4]
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	4413      	add	r3, r2
 8011e40:	881b      	ldrh	r3, [r3, #0]
 8011e42:	827b      	strh	r3, [r7, #18]
 8011e44:	8a7b      	ldrh	r3, [r7, #18]
 8011e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d01b      	beq.n	8011e86 <USB_DeactivateEndpoint+0xf6>
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	009b      	lsls	r3, r3, #2
 8011e56:	4413      	add	r3, r2
 8011e58:	881b      	ldrh	r3, [r3, #0]
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e64:	823b      	strh	r3, [r7, #16]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	441a      	add	r2, r3
 8011e70:	8a3b      	ldrh	r3, [r7, #16]
 8011e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	4413      	add	r3, r2
 8011e90:	881b      	ldrh	r3, [r3, #0]
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e9c:	81fb      	strh	r3, [r7, #14]
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	441a      	add	r2, r3
 8011ea8:	89fb      	ldrh	r3, [r7, #14]
 8011eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	8013      	strh	r3, [r2, #0]
 8011ebe:	e14d      	b.n	801215c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	785b      	ldrb	r3, [r3, #1]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f040 80a5 	bne.w	8012014 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	4413      	add	r3, r2
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	843b      	strh	r3, [r7, #32]
 8011ed8:	8c3b      	ldrh	r3, [r7, #32]
 8011eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d01b      	beq.n	8011f1a <USB_DeactivateEndpoint+0x18a>
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	4413      	add	r3, r2
 8011eec:	881b      	ldrh	r3, [r3, #0]
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ef8:	83fb      	strh	r3, [r7, #30]
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	441a      	add	r2, r3
 8011f04:	8bfb      	ldrh	r3, [r7, #30]
 8011f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	009b      	lsls	r3, r3, #2
 8011f22:	4413      	add	r3, r2
 8011f24:	881b      	ldrh	r3, [r3, #0]
 8011f26:	83bb      	strh	r3, [r7, #28]
 8011f28:	8bbb      	ldrh	r3, [r7, #28]
 8011f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d01b      	beq.n	8011f6a <USB_DeactivateEndpoint+0x1da>
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	4413      	add	r3, r2
 8011f3c:	881b      	ldrh	r3, [r3, #0]
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f48:	837b      	strh	r3, [r7, #26]
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	009b      	lsls	r3, r3, #2
 8011f52:	441a      	add	r2, r3
 8011f54:	8b7b      	ldrh	r3, [r7, #26]
 8011f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4413      	add	r3, r2
 8011f74:	881b      	ldrh	r3, [r3, #0]
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f80:	833b      	strh	r3, [r7, #24]
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	009b      	lsls	r3, r3, #2
 8011f8a:	441a      	add	r2, r3
 8011f8c:	8b3b      	ldrh	r3, [r7, #24]
 8011f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	4413      	add	r3, r2
 8011fac:	881b      	ldrh	r3, [r3, #0]
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011fb8:	82fb      	strh	r3, [r7, #22]
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	441a      	add	r2, r3
 8011fc4:	8afb      	ldrh	r3, [r7, #22]
 8011fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	4413      	add	r3, r2
 8011fe4:	881b      	ldrh	r3, [r3, #0]
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ff0:	82bb      	strh	r3, [r7, #20]
 8011ff2:	687a      	ldr	r2, [r7, #4]
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	441a      	add	r2, r3
 8011ffc:	8abb      	ldrh	r3, [r7, #20]
 8011ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801200a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801200e:	b29b      	uxth	r3, r3
 8012010:	8013      	strh	r3, [r2, #0]
 8012012:	e0a3      	b.n	801215c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	4413      	add	r3, r2
 801201e:	881b      	ldrh	r3, [r3, #0]
 8012020:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012022:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012028:	2b00      	cmp	r3, #0
 801202a:	d01b      	beq.n	8012064 <USB_DeactivateEndpoint+0x2d4>
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	4413      	add	r3, r2
 8012036:	881b      	ldrh	r3, [r3, #0]
 8012038:	b29b      	uxth	r3, r3
 801203a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801203e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012042:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	441a      	add	r2, r3
 801204e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012058:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801205c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012060:	b29b      	uxth	r3, r3
 8012062:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	4413      	add	r3, r2
 801206e:	881b      	ldrh	r3, [r3, #0]
 8012070:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8012072:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012078:	2b00      	cmp	r3, #0
 801207a:	d01b      	beq.n	80120b4 <USB_DeactivateEndpoint+0x324>
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	4413      	add	r3, r2
 8012086:	881b      	ldrh	r3, [r3, #0]
 8012088:	b29b      	uxth	r3, r3
 801208a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801208e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012092:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	441a      	add	r2, r3
 801209e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80120a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80120a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80120a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80120ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	4413      	add	r3, r2
 80120be:	881b      	ldrh	r3, [r3, #0]
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80120c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80120ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	009b      	lsls	r3, r3, #2
 80120d4:	441a      	add	r2, r3
 80120d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80120d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80120dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80120e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80120e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	4413      	add	r3, r2
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80120fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012102:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	009b      	lsls	r3, r3, #2
 801210c:	441a      	add	r2, r3
 801210e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012110:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012114:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801211c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012120:	b29b      	uxth	r3, r3
 8012122:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	4413      	add	r3, r2
 801212e:	881b      	ldrh	r3, [r3, #0]
 8012130:	b29b      	uxth	r3, r3
 8012132:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801213a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	009b      	lsls	r3, r3, #2
 8012144:	441a      	add	r2, r3
 8012146:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801214c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012158:	b29b      	uxth	r3, r3
 801215a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801215c:	2300      	movs	r3, #0
}
 801215e:	4618      	mov	r0, r3
 8012160:	3734      	adds	r7, #52	@ 0x34
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr

0801216a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801216a:	b580      	push	{r7, lr}
 801216c:	b0ac      	sub	sp, #176	@ 0xb0
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
 8012172:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	785b      	ldrb	r3, [r3, #1]
 8012178:	2b01      	cmp	r3, #1
 801217a:	f040 84ca 	bne.w	8012b12 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	699a      	ldr	r2, [r3, #24]
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	691b      	ldr	r3, [r3, #16]
 8012186:	429a      	cmp	r2, r3
 8012188:	d904      	bls.n	8012194 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	691b      	ldr	r3, [r3, #16]
 801218e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012192:	e003      	b.n	801219c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	699b      	ldr	r3, [r3, #24]
 8012198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	7b1b      	ldrb	r3, [r3, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d122      	bne.n	80121ea <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	6959      	ldr	r1, [r3, #20]
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	88da      	ldrh	r2, [r3, #6]
 80121ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f000 febd 	bl	8012f32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	613b      	str	r3, [r7, #16]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80121c2:	b29b      	uxth	r3, r3
 80121c4:	461a      	mov	r2, r3
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	4413      	add	r3, r2
 80121ca:	613b      	str	r3, [r7, #16]
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	00da      	lsls	r2, r3, #3
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	4413      	add	r3, r2
 80121d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80121da:	60fb      	str	r3, [r7, #12]
 80121dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	801a      	strh	r2, [r3, #0]
 80121e6:	f000 bc6f 	b.w	8012ac8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	78db      	ldrb	r3, [r3, #3]
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	f040 831e 	bne.w	8012830 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	6a1a      	ldr	r2, [r3, #32]
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	691b      	ldr	r3, [r3, #16]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	f240 82cf 	bls.w	80127a0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	009b      	lsls	r3, r3, #2
 801220a:	4413      	add	r3, r2
 801220c:	881b      	ldrh	r3, [r3, #0]
 801220e:	b29b      	uxth	r3, r3
 8012210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012218:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	441a      	add	r2, r3
 8012226:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 801222a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801222e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012232:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8012236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801223a:	b29b      	uxth	r3, r3
 801223c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	6a1a      	ldr	r2, [r3, #32]
 8012242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012246:	1ad2      	subs	r2, r2, r3
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	009b      	lsls	r3, r3, #2
 8012254:	4413      	add	r3, r2
 8012256:	881b      	ldrh	r3, [r3, #0]
 8012258:	b29b      	uxth	r3, r3
 801225a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801225e:	2b00      	cmp	r3, #0
 8012260:	f000 814f 	beq.w	8012502 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	633b      	str	r3, [r7, #48]	@ 0x30
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	785b      	ldrb	r3, [r3, #1]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d16b      	bne.n	8012348 <USB_EPStartXfer+0x1de>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801227a:	b29b      	uxth	r3, r3
 801227c:	461a      	mov	r2, r3
 801227e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012280:	4413      	add	r3, r2
 8012282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	781b      	ldrb	r3, [r3, #0]
 8012288:	00da      	lsls	r2, r3, #3
 801228a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801228c:	4413      	add	r3, r2
 801228e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012292:	627b      	str	r3, [r7, #36]	@ 0x24
 8012294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012296:	881b      	ldrh	r3, [r3, #0]
 8012298:	b29b      	uxth	r3, r3
 801229a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801229e:	b29a      	uxth	r2, r3
 80122a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a2:	801a      	strh	r2, [r3, #0]
 80122a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d10a      	bne.n	80122c2 <USB_EPStartXfer+0x158>
 80122ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ae:	881b      	ldrh	r3, [r3, #0]
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80122b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122be:	801a      	strh	r2, [r3, #0]
 80122c0:	e05b      	b.n	801237a <USB_EPStartXfer+0x210>
 80122c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80122c8:	d81c      	bhi.n	8012304 <USB_EPStartXfer+0x19a>
 80122ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122ce:	085b      	lsrs	r3, r3, #1
 80122d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80122d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122d8:	f003 0301 	and.w	r3, r3, #1
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d004      	beq.n	80122ea <USB_EPStartXfer+0x180>
 80122e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80122e4:	3301      	adds	r3, #1
 80122e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80122ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ec:	881b      	ldrh	r3, [r3, #0]
 80122ee:	b29a      	uxth	r2, r3
 80122f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	029b      	lsls	r3, r3, #10
 80122f8:	b29b      	uxth	r3, r3
 80122fa:	4313      	orrs	r3, r2
 80122fc:	b29a      	uxth	r2, r3
 80122fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012300:	801a      	strh	r2, [r3, #0]
 8012302:	e03a      	b.n	801237a <USB_EPStartXfer+0x210>
 8012304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012308:	095b      	lsrs	r3, r3, #5
 801230a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801230e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012312:	f003 031f 	and.w	r3, r3, #31
 8012316:	2b00      	cmp	r3, #0
 8012318:	d104      	bne.n	8012324 <USB_EPStartXfer+0x1ba>
 801231a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801231e:	3b01      	subs	r3, #1
 8012320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012326:	881b      	ldrh	r3, [r3, #0]
 8012328:	b29a      	uxth	r2, r3
 801232a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801232e:	b29b      	uxth	r3, r3
 8012330:	029b      	lsls	r3, r3, #10
 8012332:	b29b      	uxth	r3, r3
 8012334:	4313      	orrs	r3, r2
 8012336:	b29b      	uxth	r3, r3
 8012338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801233c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012340:	b29a      	uxth	r2, r3
 8012342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012344:	801a      	strh	r2, [r3, #0]
 8012346:	e018      	b.n	801237a <USB_EPStartXfer+0x210>
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	785b      	ldrb	r3, [r3, #1]
 801234c:	2b01      	cmp	r3, #1
 801234e:	d114      	bne.n	801237a <USB_EPStartXfer+0x210>
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012356:	b29b      	uxth	r3, r3
 8012358:	461a      	mov	r2, r3
 801235a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801235c:	4413      	add	r3, r2
 801235e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	00da      	lsls	r2, r3, #3
 8012366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012368:	4413      	add	r3, r2
 801236a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012374:	b29a      	uxth	r2, r3
 8012376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012378:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	895b      	ldrh	r3, [r3, #10]
 801237e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	6959      	ldr	r1, [r3, #20]
 8012386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801238a:	b29b      	uxth	r3, r3
 801238c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 fdce 	bl	8012f32 <USB_WritePMA>
            ep->xfer_buff += len;
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	695a      	ldr	r2, [r3, #20]
 801239a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801239e:	441a      	add	r2, r3
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	6a1a      	ldr	r2, [r3, #32]
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	691b      	ldr	r3, [r3, #16]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d907      	bls.n	80123c0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	6a1a      	ldr	r2, [r3, #32]
 80123b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123b8:	1ad2      	subs	r2, r2, r3
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	621a      	str	r2, [r3, #32]
 80123be:	e006      	b.n	80123ce <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	6a1b      	ldr	r3, [r3, #32]
 80123c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	2200      	movs	r2, #0
 80123cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	785b      	ldrb	r3, [r3, #1]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d16b      	bne.n	80124ae <USB_EPStartXfer+0x344>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	61bb      	str	r3, [r7, #24]
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	461a      	mov	r2, r3
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	4413      	add	r3, r2
 80123e8:	61bb      	str	r3, [r7, #24]
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	00da      	lsls	r2, r3, #3
 80123f0:	69bb      	ldr	r3, [r7, #24]
 80123f2:	4413      	add	r3, r2
 80123f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80123f8:	617b      	str	r3, [r7, #20]
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	881b      	ldrh	r3, [r3, #0]
 80123fe:	b29b      	uxth	r3, r3
 8012400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012404:	b29a      	uxth	r2, r3
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	801a      	strh	r2, [r3, #0]
 801240a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801240e:	2b00      	cmp	r3, #0
 8012410:	d10a      	bne.n	8012428 <USB_EPStartXfer+0x2be>
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	881b      	ldrh	r3, [r3, #0]
 8012416:	b29b      	uxth	r3, r3
 8012418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801241c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012420:	b29a      	uxth	r2, r3
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	801a      	strh	r2, [r3, #0]
 8012426:	e05d      	b.n	80124e4 <USB_EPStartXfer+0x37a>
 8012428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801242c:	2b3e      	cmp	r3, #62	@ 0x3e
 801242e:	d81c      	bhi.n	801246a <USB_EPStartXfer+0x300>
 8012430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012434:	085b      	lsrs	r3, r3, #1
 8012436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801243a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801243e:	f003 0301 	and.w	r3, r3, #1
 8012442:	2b00      	cmp	r3, #0
 8012444:	d004      	beq.n	8012450 <USB_EPStartXfer+0x2e6>
 8012446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801244a:	3301      	adds	r3, #1
 801244c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	881b      	ldrh	r3, [r3, #0]
 8012454:	b29a      	uxth	r2, r3
 8012456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801245a:	b29b      	uxth	r3, r3
 801245c:	029b      	lsls	r3, r3, #10
 801245e:	b29b      	uxth	r3, r3
 8012460:	4313      	orrs	r3, r2
 8012462:	b29a      	uxth	r2, r3
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	801a      	strh	r2, [r3, #0]
 8012468:	e03c      	b.n	80124e4 <USB_EPStartXfer+0x37a>
 801246a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801246e:	095b      	lsrs	r3, r3, #5
 8012470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012478:	f003 031f 	and.w	r3, r3, #31
 801247c:	2b00      	cmp	r3, #0
 801247e:	d104      	bne.n	801248a <USB_EPStartXfer+0x320>
 8012480:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012484:	3b01      	subs	r3, #1
 8012486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	881b      	ldrh	r3, [r3, #0]
 801248e:	b29a      	uxth	r2, r3
 8012490:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012494:	b29b      	uxth	r3, r3
 8012496:	029b      	lsls	r3, r3, #10
 8012498:	b29b      	uxth	r3, r3
 801249a:	4313      	orrs	r3, r2
 801249c:	b29b      	uxth	r3, r3
 801249e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124a6:	b29a      	uxth	r2, r3
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	801a      	strh	r2, [r3, #0]
 80124ac:	e01a      	b.n	80124e4 <USB_EPStartXfer+0x37a>
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	785b      	ldrb	r3, [r3, #1]
 80124b2:	2b01      	cmp	r3, #1
 80124b4:	d116      	bne.n	80124e4 <USB_EPStartXfer+0x37a>
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	623b      	str	r3, [r7, #32]
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	461a      	mov	r2, r3
 80124c4:	6a3b      	ldr	r3, [r7, #32]
 80124c6:	4413      	add	r3, r2
 80124c8:	623b      	str	r3, [r7, #32]
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	00da      	lsls	r2, r3, #3
 80124d0:	6a3b      	ldr	r3, [r7, #32]
 80124d2:	4413      	add	r3, r2
 80124d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80124d8:	61fb      	str	r3, [r7, #28]
 80124da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124de:	b29a      	uxth	r2, r3
 80124e0:	69fb      	ldr	r3, [r7, #28]
 80124e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	891b      	ldrh	r3, [r3, #8]
 80124e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	6959      	ldr	r1, [r3, #20]
 80124f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124f4:	b29b      	uxth	r3, r3
 80124f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 fd19 	bl	8012f32 <USB_WritePMA>
 8012500:	e2e2      	b.n	8012ac8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	785b      	ldrb	r3, [r3, #1]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d16b      	bne.n	80125e2 <USB_EPStartXfer+0x478>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012514:	b29b      	uxth	r3, r3
 8012516:	461a      	mov	r2, r3
 8012518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801251a:	4413      	add	r3, r2
 801251c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	00da      	lsls	r2, r3, #3
 8012524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012526:	4413      	add	r3, r2
 8012528:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801252c:	647b      	str	r3, [r7, #68]	@ 0x44
 801252e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012530:	881b      	ldrh	r3, [r3, #0]
 8012532:	b29b      	uxth	r3, r3
 8012534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012538:	b29a      	uxth	r2, r3
 801253a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801253c:	801a      	strh	r2, [r3, #0]
 801253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012542:	2b00      	cmp	r3, #0
 8012544:	d10a      	bne.n	801255c <USB_EPStartXfer+0x3f2>
 8012546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012548:	881b      	ldrh	r3, [r3, #0]
 801254a:	b29b      	uxth	r3, r3
 801254c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012554:	b29a      	uxth	r2, r3
 8012556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012558:	801a      	strh	r2, [r3, #0]
 801255a:	e05d      	b.n	8012618 <USB_EPStartXfer+0x4ae>
 801255c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012560:	2b3e      	cmp	r3, #62	@ 0x3e
 8012562:	d81c      	bhi.n	801259e <USB_EPStartXfer+0x434>
 8012564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012568:	085b      	lsrs	r3, r3, #1
 801256a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801256e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012572:	f003 0301 	and.w	r3, r3, #1
 8012576:	2b00      	cmp	r3, #0
 8012578:	d004      	beq.n	8012584 <USB_EPStartXfer+0x41a>
 801257a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801257e:	3301      	adds	r3, #1
 8012580:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012586:	881b      	ldrh	r3, [r3, #0]
 8012588:	b29a      	uxth	r2, r3
 801258a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801258e:	b29b      	uxth	r3, r3
 8012590:	029b      	lsls	r3, r3, #10
 8012592:	b29b      	uxth	r3, r3
 8012594:	4313      	orrs	r3, r2
 8012596:	b29a      	uxth	r2, r3
 8012598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801259a:	801a      	strh	r2, [r3, #0]
 801259c:	e03c      	b.n	8012618 <USB_EPStartXfer+0x4ae>
 801259e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125a2:	095b      	lsrs	r3, r3, #5
 80125a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80125a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125ac:	f003 031f 	and.w	r3, r3, #31
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d104      	bne.n	80125be <USB_EPStartXfer+0x454>
 80125b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80125b8:	3b01      	subs	r3, #1
 80125ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80125be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125c0:	881b      	ldrh	r3, [r3, #0]
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	029b      	lsls	r3, r3, #10
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	4313      	orrs	r3, r2
 80125d0:	b29b      	uxth	r3, r3
 80125d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125da:	b29a      	uxth	r2, r3
 80125dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125de:	801a      	strh	r2, [r3, #0]
 80125e0:	e01a      	b.n	8012618 <USB_EPStartXfer+0x4ae>
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	785b      	ldrb	r3, [r3, #1]
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	d116      	bne.n	8012618 <USB_EPStartXfer+0x4ae>
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	461a      	mov	r2, r3
 80125f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80125fa:	4413      	add	r3, r2
 80125fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	00da      	lsls	r2, r3, #3
 8012604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012606:	4413      	add	r3, r2
 8012608:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801260c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801260e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012612:	b29a      	uxth	r2, r3
 8012614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012616:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	891b      	ldrh	r3, [r3, #8]
 801261c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	6959      	ldr	r1, [r3, #20]
 8012624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012628:	b29b      	uxth	r3, r3
 801262a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f000 fc7f 	bl	8012f32 <USB_WritePMA>
            ep->xfer_buff += len;
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	695a      	ldr	r2, [r3, #20]
 8012638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801263c:	441a      	add	r2, r3
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	6a1a      	ldr	r2, [r3, #32]
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	691b      	ldr	r3, [r3, #16]
 801264a:	429a      	cmp	r2, r3
 801264c:	d907      	bls.n	801265e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	6a1a      	ldr	r2, [r3, #32]
 8012652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012656:	1ad2      	subs	r2, r2, r3
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	621a      	str	r2, [r3, #32]
 801265c:	e006      	b.n	801266c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	6a1b      	ldr	r3, [r3, #32]
 8012662:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	2200      	movs	r2, #0
 801266a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	785b      	ldrb	r3, [r3, #1]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d16b      	bne.n	8012750 <USB_EPStartXfer+0x5e6>
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012682:	b29b      	uxth	r3, r3
 8012684:	461a      	mov	r2, r3
 8012686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012688:	4413      	add	r3, r2
 801268a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	00da      	lsls	r2, r3, #3
 8012692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012694:	4413      	add	r3, r2
 8012696:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801269a:	637b      	str	r3, [r7, #52]	@ 0x34
 801269c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801269e:	881b      	ldrh	r3, [r3, #0]
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80126a6:	b29a      	uxth	r2, r3
 80126a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126aa:	801a      	strh	r2, [r3, #0]
 80126ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d10a      	bne.n	80126ca <USB_EPStartXfer+0x560>
 80126b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126b6:	881b      	ldrh	r3, [r3, #0]
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126c2:	b29a      	uxth	r2, r3
 80126c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126c6:	801a      	strh	r2, [r3, #0]
 80126c8:	e05b      	b.n	8012782 <USB_EPStartXfer+0x618>
 80126ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80126d0:	d81c      	bhi.n	801270c <USB_EPStartXfer+0x5a2>
 80126d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126d6:	085b      	lsrs	r3, r3, #1
 80126d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80126dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126e0:	f003 0301 	and.w	r3, r3, #1
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d004      	beq.n	80126f2 <USB_EPStartXfer+0x588>
 80126e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80126ec:	3301      	adds	r3, #1
 80126ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80126f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	029b      	lsls	r3, r3, #10
 8012700:	b29b      	uxth	r3, r3
 8012702:	4313      	orrs	r3, r2
 8012704:	b29a      	uxth	r2, r3
 8012706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012708:	801a      	strh	r2, [r3, #0]
 801270a:	e03a      	b.n	8012782 <USB_EPStartXfer+0x618>
 801270c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012710:	095b      	lsrs	r3, r3, #5
 8012712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801271a:	f003 031f 	and.w	r3, r3, #31
 801271e:	2b00      	cmp	r3, #0
 8012720:	d104      	bne.n	801272c <USB_EPStartXfer+0x5c2>
 8012722:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012726:	3b01      	subs	r3, #1
 8012728:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801272c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801272e:	881b      	ldrh	r3, [r3, #0]
 8012730:	b29a      	uxth	r2, r3
 8012732:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012736:	b29b      	uxth	r3, r3
 8012738:	029b      	lsls	r3, r3, #10
 801273a:	b29b      	uxth	r3, r3
 801273c:	4313      	orrs	r3, r2
 801273e:	b29b      	uxth	r3, r3
 8012740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012748:	b29a      	uxth	r2, r3
 801274a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801274c:	801a      	strh	r2, [r3, #0]
 801274e:	e018      	b.n	8012782 <USB_EPStartXfer+0x618>
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	785b      	ldrb	r3, [r3, #1]
 8012754:	2b01      	cmp	r3, #1
 8012756:	d114      	bne.n	8012782 <USB_EPStartXfer+0x618>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801275e:	b29b      	uxth	r3, r3
 8012760:	461a      	mov	r2, r3
 8012762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012764:	4413      	add	r3, r2
 8012766:	643b      	str	r3, [r7, #64]	@ 0x40
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	00da      	lsls	r2, r3, #3
 801276e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012770:	4413      	add	r3, r2
 8012772:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801277c:	b29a      	uxth	r2, r3
 801277e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012780:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	895b      	ldrh	r3, [r3, #10]
 8012786:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	6959      	ldr	r1, [r3, #20]
 801278e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012792:	b29b      	uxth	r3, r3
 8012794:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 fbca 	bl	8012f32 <USB_WritePMA>
 801279e:	e193      	b.n	8012ac8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	6a1b      	ldr	r3, [r3, #32]
 80127a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80127a8:	687a      	ldr	r2, [r7, #4]
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	009b      	lsls	r3, r3, #2
 80127b0:	4413      	add	r3, r2
 80127b2:	881b      	ldrh	r3, [r3, #0]
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80127ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80127be:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	009b      	lsls	r3, r3, #2
 80127ca:	441a      	add	r2, r3
 80127cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80127d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80127d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80127d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80127dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	461a      	mov	r2, r3
 80127f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127f4:	4413      	add	r3, r2
 80127f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	00da      	lsls	r2, r3, #3
 80127fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012800:	4413      	add	r3, r2
 8012802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012806:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801280c:	b29a      	uxth	r2, r3
 801280e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012810:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	891b      	ldrh	r3, [r3, #8]
 8012816:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	6959      	ldr	r1, [r3, #20]
 801281e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012822:	b29b      	uxth	r3, r3
 8012824:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 fb82 	bl	8012f32 <USB_WritePMA>
 801282e:	e14b      	b.n	8012ac8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	6a1a      	ldr	r2, [r3, #32]
 8012834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012838:	1ad2      	subs	r2, r2, r3
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	4413      	add	r3, r2
 8012848:	881b      	ldrh	r3, [r3, #0]
 801284a:	b29b      	uxth	r3, r3
 801284c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012850:	2b00      	cmp	r3, #0
 8012852:	f000 809a 	beq.w	801298a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	673b      	str	r3, [r7, #112]	@ 0x70
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	785b      	ldrb	r3, [r3, #1]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d16b      	bne.n	801293a <USB_EPStartXfer+0x7d0>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801286c:	b29b      	uxth	r3, r3
 801286e:	461a      	mov	r2, r3
 8012870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012872:	4413      	add	r3, r2
 8012874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	781b      	ldrb	r3, [r3, #0]
 801287a:	00da      	lsls	r2, r3, #3
 801287c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801287e:	4413      	add	r3, r2
 8012880:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012884:	667b      	str	r3, [r7, #100]	@ 0x64
 8012886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012888:	881b      	ldrh	r3, [r3, #0]
 801288a:	b29b      	uxth	r3, r3
 801288c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012890:	b29a      	uxth	r2, r3
 8012892:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012894:	801a      	strh	r2, [r3, #0]
 8012896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801289a:	2b00      	cmp	r3, #0
 801289c:	d10a      	bne.n	80128b4 <USB_EPStartXfer+0x74a>
 801289e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80128a0:	881b      	ldrh	r3, [r3, #0]
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80128a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80128ac:	b29a      	uxth	r2, r3
 80128ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80128b0:	801a      	strh	r2, [r3, #0]
 80128b2:	e05b      	b.n	801296c <USB_EPStartXfer+0x802>
 80128b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80128ba:	d81c      	bhi.n	80128f6 <USB_EPStartXfer+0x78c>
 80128bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128c0:	085b      	lsrs	r3, r3, #1
 80128c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80128c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128ca:	f003 0301 	and.w	r3, r3, #1
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d004      	beq.n	80128dc <USB_EPStartXfer+0x772>
 80128d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80128d6:	3301      	adds	r3, #1
 80128d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80128dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80128de:	881b      	ldrh	r3, [r3, #0]
 80128e0:	b29a      	uxth	r2, r3
 80128e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	029b      	lsls	r3, r3, #10
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	4313      	orrs	r3, r2
 80128ee:	b29a      	uxth	r2, r3
 80128f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80128f2:	801a      	strh	r2, [r3, #0]
 80128f4:	e03a      	b.n	801296c <USB_EPStartXfer+0x802>
 80128f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128fa:	095b      	lsrs	r3, r3, #5
 80128fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012904:	f003 031f 	and.w	r3, r3, #31
 8012908:	2b00      	cmp	r3, #0
 801290a:	d104      	bne.n	8012916 <USB_EPStartXfer+0x7ac>
 801290c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012910:	3b01      	subs	r3, #1
 8012912:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012918:	881b      	ldrh	r3, [r3, #0]
 801291a:	b29a      	uxth	r2, r3
 801291c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012920:	b29b      	uxth	r3, r3
 8012922:	029b      	lsls	r3, r3, #10
 8012924:	b29b      	uxth	r3, r3
 8012926:	4313      	orrs	r3, r2
 8012928:	b29b      	uxth	r3, r3
 801292a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801292e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012932:	b29a      	uxth	r2, r3
 8012934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012936:	801a      	strh	r2, [r3, #0]
 8012938:	e018      	b.n	801296c <USB_EPStartXfer+0x802>
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	785b      	ldrb	r3, [r3, #1]
 801293e:	2b01      	cmp	r3, #1
 8012940:	d114      	bne.n	801296c <USB_EPStartXfer+0x802>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012948:	b29b      	uxth	r3, r3
 801294a:	461a      	mov	r2, r3
 801294c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801294e:	4413      	add	r3, r2
 8012950:	673b      	str	r3, [r7, #112]	@ 0x70
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	00da      	lsls	r2, r3, #3
 8012958:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801295a:	4413      	add	r3, r2
 801295c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012960:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012966:	b29a      	uxth	r2, r3
 8012968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801296a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	895b      	ldrh	r3, [r3, #10]
 8012970:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	6959      	ldr	r1, [r3, #20]
 8012978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801297c:	b29b      	uxth	r3, r3
 801297e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f000 fad5 	bl	8012f32 <USB_WritePMA>
 8012988:	e09e      	b.n	8012ac8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	785b      	ldrb	r3, [r3, #1]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d16b      	bne.n	8012a6a <USB_EPStartXfer+0x900>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801299c:	b29b      	uxth	r3, r3
 801299e:	461a      	mov	r2, r3
 80129a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80129a2:	4413      	add	r3, r2
 80129a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	00da      	lsls	r2, r3, #3
 80129ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80129ae:	4413      	add	r3, r2
 80129b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80129b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80129b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129b8:	881b      	ldrh	r3, [r3, #0]
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80129c0:	b29a      	uxth	r2, r3
 80129c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129c4:	801a      	strh	r2, [r3, #0]
 80129c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d10a      	bne.n	80129e4 <USB_EPStartXfer+0x87a>
 80129ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129d0:	881b      	ldrh	r3, [r3, #0]
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80129d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80129dc:	b29a      	uxth	r2, r3
 80129de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129e0:	801a      	strh	r2, [r3, #0]
 80129e2:	e063      	b.n	8012aac <USB_EPStartXfer+0x942>
 80129e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80129ea:	d81c      	bhi.n	8012a26 <USB_EPStartXfer+0x8bc>
 80129ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129f0:	085b      	lsrs	r3, r3, #1
 80129f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80129f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129fa:	f003 0301 	and.w	r3, r3, #1
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d004      	beq.n	8012a0c <USB_EPStartXfer+0x8a2>
 8012a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012a06:	3301      	adds	r3, #1
 8012a08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a0e:	881b      	ldrh	r3, [r3, #0]
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	029b      	lsls	r3, r3, #10
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	4313      	orrs	r3, r2
 8012a1e:	b29a      	uxth	r2, r3
 8012a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a22:	801a      	strh	r2, [r3, #0]
 8012a24:	e042      	b.n	8012aac <USB_EPStartXfer+0x942>
 8012a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a2a:	095b      	lsrs	r3, r3, #5
 8012a2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a34:	f003 031f 	and.w	r3, r3, #31
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d104      	bne.n	8012a46 <USB_EPStartXfer+0x8dc>
 8012a3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012a40:	3b01      	subs	r3, #1
 8012a42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a48:	881b      	ldrh	r3, [r3, #0]
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	029b      	lsls	r3, r3, #10
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	4313      	orrs	r3, r2
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a66:	801a      	strh	r2, [r3, #0]
 8012a68:	e020      	b.n	8012aac <USB_EPStartXfer+0x942>
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	785b      	ldrb	r3, [r3, #1]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d11c      	bne.n	8012aac <USB_EPStartXfer+0x942>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	461a      	mov	r2, r3
 8012a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012a86:	4413      	add	r3, r2
 8012a88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	00da      	lsls	r2, r3, #3
 8012a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012a96:	4413      	add	r3, r2
 8012a98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012aa4:	b29a      	uxth	r2, r3
 8012aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012aaa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	891b      	ldrh	r3, [r3, #8]
 8012ab0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	6959      	ldr	r1, [r3, #20]
 8012ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f000 fa35 	bl	8012f32 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	4413      	add	r3, r2
 8012ad2:	881b      	ldrh	r3, [r3, #0]
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012ade:	817b      	strh	r3, [r7, #10]
 8012ae0:	897b      	ldrh	r3, [r7, #10]
 8012ae2:	f083 0310 	eor.w	r3, r3, #16
 8012ae6:	817b      	strh	r3, [r7, #10]
 8012ae8:	897b      	ldrh	r3, [r7, #10]
 8012aea:	f083 0320 	eor.w	r3, r3, #32
 8012aee:	817b      	strh	r3, [r7, #10]
 8012af0:	687a      	ldr	r2, [r7, #4]
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	441a      	add	r2, r3
 8012afa:	897b      	ldrh	r3, [r7, #10]
 8012afc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	8013      	strh	r3, [r2, #0]
 8012b10:	e0d5      	b.n	8012cbe <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	7b1b      	ldrb	r3, [r3, #12]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d156      	bne.n	8012bc8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	699b      	ldr	r3, [r3, #24]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d122      	bne.n	8012b68 <USB_EPStartXfer+0x9fe>
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	78db      	ldrb	r3, [r3, #3]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d11e      	bne.n	8012b68 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	009b      	lsls	r3, r3, #2
 8012b32:	4413      	add	r3, r2
 8012b34:	881b      	ldrh	r3, [r3, #0]
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b40:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	441a      	add	r2, r3
 8012b4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b5a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8012b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	8013      	strh	r3, [r2, #0]
 8012b66:	e01d      	b.n	8012ba4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	009b      	lsls	r3, r3, #2
 8012b70:	4413      	add	r3, r2
 8012b72:	881b      	ldrh	r3, [r3, #0]
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b7e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	009b      	lsls	r3, r3, #2
 8012b8a:	441a      	add	r2, r3
 8012b8c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8012b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	699a      	ldr	r2, [r3, #24]
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	691b      	ldr	r3, [r3, #16]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d907      	bls.n	8012bc0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	699a      	ldr	r2, [r3, #24]
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	691b      	ldr	r3, [r3, #16]
 8012bb8:	1ad2      	subs	r2, r2, r3
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	619a      	str	r2, [r3, #24]
 8012bbe:	e054      	b.n	8012c6a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	619a      	str	r2, [r3, #24]
 8012bc6:	e050      	b.n	8012c6a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	78db      	ldrb	r3, [r3, #3]
 8012bcc:	2b02      	cmp	r3, #2
 8012bce:	d142      	bne.n	8012c56 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	69db      	ldr	r3, [r3, #28]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d048      	beq.n	8012c6a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	4413      	add	r3, r2
 8012be2:	881b      	ldrh	r3, [r3, #0]
 8012be4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012be8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d005      	beq.n	8012c00 <USB_EPStartXfer+0xa96>
 8012bf4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d10b      	bne.n	8012c18 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012c00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d12e      	bne.n	8012c6a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012c0c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d128      	bne.n	8012c6a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012c18:	687a      	ldr	r2, [r7, #4]
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	009b      	lsls	r3, r3, #2
 8012c20:	4413      	add	r3, r2
 8012c22:	881b      	ldrh	r3, [r3, #0]
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c2e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	009b      	lsls	r3, r3, #2
 8012c3a:	441a      	add	r2, r3
 8012c3c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	8013      	strh	r3, [r2, #0]
 8012c54:	e009      	b.n	8012c6a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	78db      	ldrb	r3, [r3, #3]
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d103      	bne.n	8012c66 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	2200      	movs	r2, #0
 8012c62:	619a      	str	r2, [r3, #24]
 8012c64:	e001      	b.n	8012c6a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8012c66:	2301      	movs	r3, #1
 8012c68:	e02a      	b.n	8012cc0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012c6a:	687a      	ldr	r2, [r7, #4]
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	009b      	lsls	r3, r3, #2
 8012c72:	4413      	add	r3, r2
 8012c74:	881b      	ldrh	r3, [r3, #0]
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c80:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012c84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012c88:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012c8c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012c90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012c94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012c98:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	441a      	add	r2, r3
 8012ca6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012cbe:	2300      	movs	r3, #0
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	37b0      	adds	r7, #176	@ 0xb0
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}

08012cc8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b085      	sub	sp, #20
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	785b      	ldrb	r3, [r3, #1]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d020      	beq.n	8012d1c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012cda:	687a      	ldr	r2, [r7, #4]
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	4413      	add	r3, r2
 8012ce4:	881b      	ldrh	r3, [r3, #0]
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012cf0:	81bb      	strh	r3, [r7, #12]
 8012cf2:	89bb      	ldrh	r3, [r7, #12]
 8012cf4:	f083 0310 	eor.w	r3, r3, #16
 8012cf8:	81bb      	strh	r3, [r7, #12]
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	441a      	add	r2, r3
 8012d04:	89bb      	ldrh	r3, [r7, #12]
 8012d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	8013      	strh	r3, [r2, #0]
 8012d1a:	e01f      	b.n	8012d5c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	009b      	lsls	r3, r3, #2
 8012d24:	4413      	add	r3, r2
 8012d26:	881b      	ldrh	r3, [r3, #0]
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012d32:	81fb      	strh	r3, [r7, #14]
 8012d34:	89fb      	ldrh	r3, [r7, #14]
 8012d36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012d3a:	81fb      	strh	r3, [r7, #14]
 8012d3c:	687a      	ldr	r2, [r7, #4]
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	441a      	add	r2, r3
 8012d46:	89fb      	ldrh	r3, [r7, #14]
 8012d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012d5c:	2300      	movs	r3, #0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3714      	adds	r7, #20
 8012d62:	46bd      	mov	sp, r7
 8012d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d68:	4770      	bx	lr

08012d6a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012d6a:	b480      	push	{r7}
 8012d6c:	b087      	sub	sp, #28
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
 8012d72:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	785b      	ldrb	r3, [r3, #1]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d04c      	beq.n	8012e16 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012d7c:	687a      	ldr	r2, [r7, #4]
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	781b      	ldrb	r3, [r3, #0]
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	4413      	add	r3, r2
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	823b      	strh	r3, [r7, #16]
 8012d8a:	8a3b      	ldrh	r3, [r7, #16]
 8012d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d01b      	beq.n	8012dcc <USB_EPClearStall+0x62>
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	4413      	add	r3, r2
 8012d9e:	881b      	ldrh	r3, [r3, #0]
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012daa:	81fb      	strh	r3, [r7, #14]
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	441a      	add	r2, r3
 8012db6:	89fb      	ldrh	r3, [r7, #14]
 8012db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012dc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	78db      	ldrb	r3, [r3, #3]
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d06c      	beq.n	8012eae <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012dd4:	687a      	ldr	r2, [r7, #4]
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	009b      	lsls	r3, r3, #2
 8012ddc:	4413      	add	r3, r2
 8012dde:	881b      	ldrh	r3, [r3, #0]
 8012de0:	b29b      	uxth	r3, r3
 8012de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012dea:	81bb      	strh	r3, [r7, #12]
 8012dec:	89bb      	ldrh	r3, [r7, #12]
 8012dee:	f083 0320 	eor.w	r3, r3, #32
 8012df2:	81bb      	strh	r3, [r7, #12]
 8012df4:	687a      	ldr	r2, [r7, #4]
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	441a      	add	r2, r3
 8012dfe:	89bb      	ldrh	r3, [r7, #12]
 8012e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e10:	b29b      	uxth	r3, r3
 8012e12:	8013      	strh	r3, [r2, #0]
 8012e14:	e04b      	b.n	8012eae <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	009b      	lsls	r3, r3, #2
 8012e1e:	4413      	add	r3, r2
 8012e20:	881b      	ldrh	r3, [r3, #0]
 8012e22:	82fb      	strh	r3, [r7, #22]
 8012e24:	8afb      	ldrh	r3, [r7, #22]
 8012e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d01b      	beq.n	8012e66 <USB_EPClearStall+0xfc>
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	009b      	lsls	r3, r3, #2
 8012e36:	4413      	add	r3, r2
 8012e38:	881b      	ldrh	r3, [r3, #0]
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012e44:	82bb      	strh	r3, [r7, #20]
 8012e46:	687a      	ldr	r2, [r7, #4]
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	009b      	lsls	r3, r3, #2
 8012e4e:	441a      	add	r2, r3
 8012e50:	8abb      	ldrh	r3, [r7, #20]
 8012e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012e5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	009b      	lsls	r3, r3, #2
 8012e6e:	4413      	add	r3, r2
 8012e70:	881b      	ldrh	r3, [r3, #0]
 8012e72:	b29b      	uxth	r3, r3
 8012e74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012e7c:	827b      	strh	r3, [r7, #18]
 8012e7e:	8a7b      	ldrh	r3, [r7, #18]
 8012e80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012e84:	827b      	strh	r3, [r7, #18]
 8012e86:	8a7b      	ldrh	r3, [r7, #18]
 8012e88:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012e8c:	827b      	strh	r3, [r7, #18]
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	441a      	add	r2, r3
 8012e98:	8a7b      	ldrh	r3, [r7, #18]
 8012e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012eae:	2300      	movs	r3, #0
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	371c      	adds	r7, #28
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eba:	4770      	bx	lr

08012ebc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b083      	sub	sp, #12
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012ec8:	78fb      	ldrb	r3, [r7, #3]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d103      	bne.n	8012ed6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2280      	movs	r2, #128	@ 0x80
 8012ed2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012ed6:	2300      	movs	r3, #0
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	370c      	adds	r7, #12
 8012edc:	46bd      	mov	sp, r7
 8012ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee2:	4770      	bx	lr

08012ee4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	370c      	adds	r7, #12
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr

08012f12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012f12:	b480      	push	{r7}
 8012f14:	b085      	sub	sp, #20
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012f24:	68fb      	ldr	r3, [r7, #12]
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3714      	adds	r7, #20
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f30:	4770      	bx	lr

08012f32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012f32:	b480      	push	{r7}
 8012f34:	b08b      	sub	sp, #44	@ 0x2c
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	60f8      	str	r0, [r7, #12]
 8012f3a:	60b9      	str	r1, [r7, #8]
 8012f3c:	4611      	mov	r1, r2
 8012f3e:	461a      	mov	r2, r3
 8012f40:	460b      	mov	r3, r1
 8012f42:	80fb      	strh	r3, [r7, #6]
 8012f44:	4613      	mov	r3, r2
 8012f46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012f48:	88bb      	ldrh	r3, [r7, #4]
 8012f4a:	3301      	adds	r3, #1
 8012f4c:	085b      	lsrs	r3, r3, #1
 8012f4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012f58:	88fa      	ldrh	r2, [r7, #6]
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012f62:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012f64:	69bb      	ldr	r3, [r7, #24]
 8012f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f68:	e01b      	b.n	8012fa2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012f6a:	69fb      	ldr	r3, [r7, #28]
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012f70:	69fb      	ldr	r3, [r7, #28]
 8012f72:	3301      	adds	r3, #1
 8012f74:	781b      	ldrb	r3, [r3, #0]
 8012f76:	021b      	lsls	r3, r3, #8
 8012f78:	b21a      	sxth	r2, r3
 8012f7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f7e:	4313      	orrs	r3, r2
 8012f80:	b21b      	sxth	r3, r3
 8012f82:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012f84:	6a3b      	ldr	r3, [r7, #32]
 8012f86:	8a7a      	ldrh	r2, [r7, #18]
 8012f88:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012f8a:	6a3b      	ldr	r3, [r7, #32]
 8012f8c:	3302      	adds	r3, #2
 8012f8e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012f90:	69fb      	ldr	r3, [r7, #28]
 8012f92:	3301      	adds	r3, #1
 8012f94:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012f96:	69fb      	ldr	r3, [r7, #28]
 8012f98:	3301      	adds	r3, #1
 8012f9a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f9e:	3b01      	subs	r3, #1
 8012fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d1e0      	bne.n	8012f6a <USB_WritePMA+0x38>
  }
}
 8012fa8:	bf00      	nop
 8012faa:	bf00      	nop
 8012fac:	372c      	adds	r7, #44	@ 0x2c
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb4:	4770      	bx	lr

08012fb6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012fb6:	b480      	push	{r7}
 8012fb8:	b08b      	sub	sp, #44	@ 0x2c
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	60f8      	str	r0, [r7, #12]
 8012fbe:	60b9      	str	r1, [r7, #8]
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	460b      	mov	r3, r1
 8012fc6:	80fb      	strh	r3, [r7, #6]
 8012fc8:	4613      	mov	r3, r2
 8012fca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012fcc:	88bb      	ldrh	r3, [r7, #4]
 8012fce:	085b      	lsrs	r3, r3, #1
 8012fd0:	b29b      	uxth	r3, r3
 8012fd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012fdc:	88fa      	ldrh	r2, [r7, #6]
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	4413      	add	r3, r2
 8012fe2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012fe6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012fe8:	69bb      	ldr	r3, [r7, #24]
 8012fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fec:	e018      	b.n	8013020 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012fee:	6a3b      	ldr	r3, [r7, #32]
 8012ff0:	881b      	ldrh	r3, [r3, #0]
 8012ff2:	b29b      	uxth	r3, r3
 8012ff4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012ff6:	6a3b      	ldr	r3, [r7, #32]
 8012ff8:	3302      	adds	r3, #2
 8012ffa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	b2da      	uxtb	r2, r3
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	3301      	adds	r3, #1
 8013008:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	0a1b      	lsrs	r3, r3, #8
 801300e:	b2da      	uxtb	r2, r3
 8013010:	69fb      	ldr	r3, [r7, #28]
 8013012:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013014:	69fb      	ldr	r3, [r7, #28]
 8013016:	3301      	adds	r3, #1
 8013018:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801301c:	3b01      	subs	r3, #1
 801301e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013022:	2b00      	cmp	r3, #0
 8013024:	d1e3      	bne.n	8012fee <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8013026:	88bb      	ldrh	r3, [r7, #4]
 8013028:	f003 0301 	and.w	r3, r3, #1
 801302c:	b29b      	uxth	r3, r3
 801302e:	2b00      	cmp	r3, #0
 8013030:	d007      	beq.n	8013042 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8013032:	6a3b      	ldr	r3, [r7, #32]
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	b29b      	uxth	r3, r3
 8013038:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	b2da      	uxtb	r2, r3
 801303e:	69fb      	ldr	r3, [r7, #28]
 8013040:	701a      	strb	r2, [r3, #0]
  }
}
 8013042:	bf00      	nop
 8013044:	372c      	adds	r7, #44	@ 0x2c
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr
	...

08013050 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	460b      	mov	r3, r1
 801305a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801305c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8013060:	f006 f9b2 	bl	80193c8 <USBD_static_malloc>
 8013064:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d109      	bne.n	8013080 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	32b0      	adds	r2, #176	@ 0xb0
 8013076:	2100      	movs	r1, #0
 8013078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801307c:	2302      	movs	r3, #2
 801307e:	e0d4      	b.n	801322a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013080:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8013084:	2100      	movs	r1, #0
 8013086:	68f8      	ldr	r0, [r7, #12]
 8013088:	f008 fbbf 	bl	801b80a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	32b0      	adds	r2, #176	@ 0xb0
 8013096:	68f9      	ldr	r1, [r7, #12]
 8013098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	32b0      	adds	r2, #176	@ 0xb0
 80130a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	7c1b      	ldrb	r3, [r3, #16]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d138      	bne.n	801312a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80130b8:	4b5e      	ldr	r3, [pc, #376]	@ (8013234 <USBD_CDC_Init+0x1e4>)
 80130ba:	7819      	ldrb	r1, [r3, #0]
 80130bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80130c0:	2202      	movs	r2, #2
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f006 f827 	bl	8019116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80130c8:	4b5a      	ldr	r3, [pc, #360]	@ (8013234 <USBD_CDC_Init+0x1e4>)
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	f003 020f 	and.w	r2, r3, #15
 80130d0:	6879      	ldr	r1, [r7, #4]
 80130d2:	4613      	mov	r3, r2
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	4413      	add	r3, r2
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	440b      	add	r3, r1
 80130dc:	3324      	adds	r3, #36	@ 0x24
 80130de:	2201      	movs	r2, #1
 80130e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80130e2:	4b55      	ldr	r3, [pc, #340]	@ (8013238 <USBD_CDC_Init+0x1e8>)
 80130e4:	7819      	ldrb	r1, [r3, #0]
 80130e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80130ea:	2202      	movs	r2, #2
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	f006 f812 	bl	8019116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80130f2:	4b51      	ldr	r3, [pc, #324]	@ (8013238 <USBD_CDC_Init+0x1e8>)
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	f003 020f 	and.w	r2, r3, #15
 80130fa:	6879      	ldr	r1, [r7, #4]
 80130fc:	4613      	mov	r3, r2
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	4413      	add	r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	440b      	add	r3, r1
 8013106:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801310a:	2201      	movs	r2, #1
 801310c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801310e:	4b4b      	ldr	r3, [pc, #300]	@ (801323c <USBD_CDC_Init+0x1ec>)
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	f003 020f 	and.w	r2, r3, #15
 8013116:	6879      	ldr	r1, [r7, #4]
 8013118:	4613      	mov	r3, r2
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	4413      	add	r3, r2
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	440b      	add	r3, r1
 8013122:	3326      	adds	r3, #38	@ 0x26
 8013124:	2210      	movs	r2, #16
 8013126:	801a      	strh	r2, [r3, #0]
 8013128:	e035      	b.n	8013196 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801312a:	4b42      	ldr	r3, [pc, #264]	@ (8013234 <USBD_CDC_Init+0x1e4>)
 801312c:	7819      	ldrb	r1, [r3, #0]
 801312e:	2340      	movs	r3, #64	@ 0x40
 8013130:	2202      	movs	r2, #2
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f005 ffef 	bl	8019116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013138:	4b3e      	ldr	r3, [pc, #248]	@ (8013234 <USBD_CDC_Init+0x1e4>)
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	f003 020f 	and.w	r2, r3, #15
 8013140:	6879      	ldr	r1, [r7, #4]
 8013142:	4613      	mov	r3, r2
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	4413      	add	r3, r2
 8013148:	009b      	lsls	r3, r3, #2
 801314a:	440b      	add	r3, r1
 801314c:	3324      	adds	r3, #36	@ 0x24
 801314e:	2201      	movs	r2, #1
 8013150:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013152:	4b39      	ldr	r3, [pc, #228]	@ (8013238 <USBD_CDC_Init+0x1e8>)
 8013154:	7819      	ldrb	r1, [r3, #0]
 8013156:	2340      	movs	r3, #64	@ 0x40
 8013158:	2202      	movs	r2, #2
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f005 ffdb 	bl	8019116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013160:	4b35      	ldr	r3, [pc, #212]	@ (8013238 <USBD_CDC_Init+0x1e8>)
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	f003 020f 	and.w	r2, r3, #15
 8013168:	6879      	ldr	r1, [r7, #4]
 801316a:	4613      	mov	r3, r2
 801316c:	009b      	lsls	r3, r3, #2
 801316e:	4413      	add	r3, r2
 8013170:	009b      	lsls	r3, r3, #2
 8013172:	440b      	add	r3, r1
 8013174:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013178:	2201      	movs	r2, #1
 801317a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801317c:	4b2f      	ldr	r3, [pc, #188]	@ (801323c <USBD_CDC_Init+0x1ec>)
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	f003 020f 	and.w	r2, r3, #15
 8013184:	6879      	ldr	r1, [r7, #4]
 8013186:	4613      	mov	r3, r2
 8013188:	009b      	lsls	r3, r3, #2
 801318a:	4413      	add	r3, r2
 801318c:	009b      	lsls	r3, r3, #2
 801318e:	440b      	add	r3, r1
 8013190:	3326      	adds	r3, #38	@ 0x26
 8013192:	2210      	movs	r2, #16
 8013194:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013196:	4b29      	ldr	r3, [pc, #164]	@ (801323c <USBD_CDC_Init+0x1ec>)
 8013198:	7819      	ldrb	r1, [r3, #0]
 801319a:	2308      	movs	r3, #8
 801319c:	2203      	movs	r2, #3
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f005 ffb9 	bl	8019116 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80131a4:	4b25      	ldr	r3, [pc, #148]	@ (801323c <USBD_CDC_Init+0x1ec>)
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	f003 020f 	and.w	r2, r3, #15
 80131ac:	6879      	ldr	r1, [r7, #4]
 80131ae:	4613      	mov	r3, r2
 80131b0:	009b      	lsls	r3, r3, #2
 80131b2:	4413      	add	r3, r2
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	440b      	add	r3, r1
 80131b8:	3324      	adds	r3, #36	@ 0x24
 80131ba:	2201      	movs	r2, #1
 80131bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	2200      	movs	r2, #0
 80131c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80131cc:	687a      	ldr	r2, [r7, #4]
 80131ce:	33b0      	adds	r3, #176	@ 0xb0
 80131d0:	009b      	lsls	r3, r3, #2
 80131d2:	4413      	add	r3, r2
 80131d4:	685b      	ldr	r3, [r3, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2200      	movs	r2, #0
 80131de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	2200      	movs	r2, #0
 80131e6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d101      	bne.n	80131f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80131f4:	2302      	movs	r3, #2
 80131f6:	e018      	b.n	801322a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	7c1b      	ldrb	r3, [r3, #16]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d10a      	bne.n	8013216 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013200:	4b0d      	ldr	r3, [pc, #52]	@ (8013238 <USBD_CDC_Init+0x1e8>)
 8013202:	7819      	ldrb	r1, [r3, #0]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801320a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f006 f870 	bl	80192f4 <USBD_LL_PrepareReceive>
 8013214:	e008      	b.n	8013228 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013216:	4b08      	ldr	r3, [pc, #32]	@ (8013238 <USBD_CDC_Init+0x1e8>)
 8013218:	7819      	ldrb	r1, [r3, #0]
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013220:	2340      	movs	r3, #64	@ 0x40
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f006 f866 	bl	80192f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013228:	2300      	movs	r3, #0
}
 801322a:	4618      	mov	r0, r3
 801322c:	3710      	adds	r7, #16
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	200000bf 	.word	0x200000bf
 8013238:	200000c0 	.word	0x200000c0
 801323c:	200000c1 	.word	0x200000c1

08013240 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	460b      	mov	r3, r1
 801324a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801324c:	4b3a      	ldr	r3, [pc, #232]	@ (8013338 <USBD_CDC_DeInit+0xf8>)
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	4619      	mov	r1, r3
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f005 ff85 	bl	8019162 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013258:	4b37      	ldr	r3, [pc, #220]	@ (8013338 <USBD_CDC_DeInit+0xf8>)
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	f003 020f 	and.w	r2, r3, #15
 8013260:	6879      	ldr	r1, [r7, #4]
 8013262:	4613      	mov	r3, r2
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	4413      	add	r3, r2
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	440b      	add	r3, r1
 801326c:	3324      	adds	r3, #36	@ 0x24
 801326e:	2200      	movs	r2, #0
 8013270:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013272:	4b32      	ldr	r3, [pc, #200]	@ (801333c <USBD_CDC_DeInit+0xfc>)
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	4619      	mov	r1, r3
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f005 ff72 	bl	8019162 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801327e:	4b2f      	ldr	r3, [pc, #188]	@ (801333c <USBD_CDC_DeInit+0xfc>)
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	f003 020f 	and.w	r2, r3, #15
 8013286:	6879      	ldr	r1, [r7, #4]
 8013288:	4613      	mov	r3, r2
 801328a:	009b      	lsls	r3, r3, #2
 801328c:	4413      	add	r3, r2
 801328e:	009b      	lsls	r3, r3, #2
 8013290:	440b      	add	r3, r1
 8013292:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013296:	2200      	movs	r2, #0
 8013298:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801329a:	4b29      	ldr	r3, [pc, #164]	@ (8013340 <USBD_CDC_DeInit+0x100>)
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	4619      	mov	r1, r3
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f005 ff5e 	bl	8019162 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80132a6:	4b26      	ldr	r3, [pc, #152]	@ (8013340 <USBD_CDC_DeInit+0x100>)
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	f003 020f 	and.w	r2, r3, #15
 80132ae:	6879      	ldr	r1, [r7, #4]
 80132b0:	4613      	mov	r3, r2
 80132b2:	009b      	lsls	r3, r3, #2
 80132b4:	4413      	add	r3, r2
 80132b6:	009b      	lsls	r3, r3, #2
 80132b8:	440b      	add	r3, r1
 80132ba:	3324      	adds	r3, #36	@ 0x24
 80132bc:	2200      	movs	r2, #0
 80132be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80132c0:	4b1f      	ldr	r3, [pc, #124]	@ (8013340 <USBD_CDC_DeInit+0x100>)
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	f003 020f 	and.w	r2, r3, #15
 80132c8:	6879      	ldr	r1, [r7, #4]
 80132ca:	4613      	mov	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	4413      	add	r3, r2
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	440b      	add	r3, r1
 80132d4:	3326      	adds	r3, #38	@ 0x26
 80132d6:	2200      	movs	r2, #0
 80132d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	32b0      	adds	r2, #176	@ 0xb0
 80132e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d01f      	beq.n	801332c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80132f2:	687a      	ldr	r2, [r7, #4]
 80132f4:	33b0      	adds	r3, #176	@ 0xb0
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	4413      	add	r3, r2
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	32b0      	adds	r2, #176	@ 0xb0
 801330a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801330e:	4618      	mov	r0, r3
 8013310:	f006 f868 	bl	80193e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	32b0      	adds	r2, #176	@ 0xb0
 801331e:	2100      	movs	r1, #0
 8013320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2200      	movs	r2, #0
 8013328:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801332c:	2300      	movs	r3, #0
}
 801332e:	4618      	mov	r0, r3
 8013330:	3708      	adds	r7, #8
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
 8013336:	bf00      	nop
 8013338:	200000bf 	.word	0x200000bf
 801333c:	200000c0 	.word	0x200000c0
 8013340:	200000c1 	.word	0x200000c1

08013344 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b086      	sub	sp, #24
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	32b0      	adds	r2, #176	@ 0xb0
 8013358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801335c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801335e:	2300      	movs	r3, #0
 8013360:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013362:	2300      	movs	r3, #0
 8013364:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013366:	2300      	movs	r3, #0
 8013368:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d101      	bne.n	8013374 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013370:	2303      	movs	r3, #3
 8013372:	e0bf      	b.n	80134f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801337c:	2b00      	cmp	r3, #0
 801337e:	d050      	beq.n	8013422 <USBD_CDC_Setup+0xde>
 8013380:	2b20      	cmp	r3, #32
 8013382:	f040 80af 	bne.w	80134e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	88db      	ldrh	r3, [r3, #6]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d03a      	beq.n	8013404 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	b25b      	sxtb	r3, r3
 8013394:	2b00      	cmp	r3, #0
 8013396:	da1b      	bge.n	80133d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	33b0      	adds	r3, #176	@ 0xb0
 80133a2:	009b      	lsls	r3, r3, #2
 80133a4:	4413      	add	r3, r2
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	689b      	ldr	r3, [r3, #8]
 80133aa:	683a      	ldr	r2, [r7, #0]
 80133ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80133ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80133b0:	683a      	ldr	r2, [r7, #0]
 80133b2:	88d2      	ldrh	r2, [r2, #6]
 80133b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	88db      	ldrh	r3, [r3, #6]
 80133ba:	2b07      	cmp	r3, #7
 80133bc:	bf28      	it	cs
 80133be:	2307      	movcs	r3, #7
 80133c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	89fa      	ldrh	r2, [r7, #14]
 80133c6:	4619      	mov	r1, r3
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f001 fd2b 	bl	8014e24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80133ce:	e090      	b.n	80134f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	785a      	ldrb	r2, [r3, #1]
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	88db      	ldrh	r3, [r3, #6]
 80133de:	2b3f      	cmp	r3, #63	@ 0x3f
 80133e0:	d803      	bhi.n	80133ea <USBD_CDC_Setup+0xa6>
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	88db      	ldrh	r3, [r3, #6]
 80133e6:	b2da      	uxtb	r2, r3
 80133e8:	e000      	b.n	80133ec <USBD_CDC_Setup+0xa8>
 80133ea:	2240      	movs	r2, #64	@ 0x40
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80133f2:	6939      	ldr	r1, [r7, #16]
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80133fa:	461a      	mov	r2, r3
 80133fc:	6878      	ldr	r0, [r7, #4]
 80133fe:	f001 fd3d 	bl	8014e7c <USBD_CtlPrepareRx>
      break;
 8013402:	e076      	b.n	80134f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	33b0      	adds	r3, #176	@ 0xb0
 801340e:	009b      	lsls	r3, r3, #2
 8013410:	4413      	add	r3, r2
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	689b      	ldr	r3, [r3, #8]
 8013416:	683a      	ldr	r2, [r7, #0]
 8013418:	7850      	ldrb	r0, [r2, #1]
 801341a:	2200      	movs	r2, #0
 801341c:	6839      	ldr	r1, [r7, #0]
 801341e:	4798      	blx	r3
      break;
 8013420:	e067      	b.n	80134f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	785b      	ldrb	r3, [r3, #1]
 8013426:	2b0b      	cmp	r3, #11
 8013428:	d851      	bhi.n	80134ce <USBD_CDC_Setup+0x18a>
 801342a:	a201      	add	r2, pc, #4	@ (adr r2, 8013430 <USBD_CDC_Setup+0xec>)
 801342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013430:	08013461 	.word	0x08013461
 8013434:	080134dd 	.word	0x080134dd
 8013438:	080134cf 	.word	0x080134cf
 801343c:	080134cf 	.word	0x080134cf
 8013440:	080134cf 	.word	0x080134cf
 8013444:	080134cf 	.word	0x080134cf
 8013448:	080134cf 	.word	0x080134cf
 801344c:	080134cf 	.word	0x080134cf
 8013450:	080134cf 	.word	0x080134cf
 8013454:	080134cf 	.word	0x080134cf
 8013458:	0801348b 	.word	0x0801348b
 801345c:	080134b5 	.word	0x080134b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013466:	b2db      	uxtb	r3, r3
 8013468:	2b03      	cmp	r3, #3
 801346a:	d107      	bne.n	801347c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801346c:	f107 030a 	add.w	r3, r7, #10
 8013470:	2202      	movs	r2, #2
 8013472:	4619      	mov	r1, r3
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f001 fcd5 	bl	8014e24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801347a:	e032      	b.n	80134e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801347c:	6839      	ldr	r1, [r7, #0]
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f001 fc53 	bl	8014d2a <USBD_CtlError>
            ret = USBD_FAIL;
 8013484:	2303      	movs	r3, #3
 8013486:	75fb      	strb	r3, [r7, #23]
          break;
 8013488:	e02b      	b.n	80134e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013490:	b2db      	uxtb	r3, r3
 8013492:	2b03      	cmp	r3, #3
 8013494:	d107      	bne.n	80134a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013496:	f107 030d 	add.w	r3, r7, #13
 801349a:	2201      	movs	r2, #1
 801349c:	4619      	mov	r1, r3
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f001 fcc0 	bl	8014e24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80134a4:	e01d      	b.n	80134e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80134a6:	6839      	ldr	r1, [r7, #0]
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f001 fc3e 	bl	8014d2a <USBD_CtlError>
            ret = USBD_FAIL;
 80134ae:	2303      	movs	r3, #3
 80134b0:	75fb      	strb	r3, [r7, #23]
          break;
 80134b2:	e016      	b.n	80134e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	2b03      	cmp	r3, #3
 80134be:	d00f      	beq.n	80134e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80134c0:	6839      	ldr	r1, [r7, #0]
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f001 fc31 	bl	8014d2a <USBD_CtlError>
            ret = USBD_FAIL;
 80134c8:	2303      	movs	r3, #3
 80134ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80134cc:	e008      	b.n	80134e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80134ce:	6839      	ldr	r1, [r7, #0]
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f001 fc2a 	bl	8014d2a <USBD_CtlError>
          ret = USBD_FAIL;
 80134d6:	2303      	movs	r3, #3
 80134d8:	75fb      	strb	r3, [r7, #23]
          break;
 80134da:	e002      	b.n	80134e2 <USBD_CDC_Setup+0x19e>
          break;
 80134dc:	bf00      	nop
 80134de:	e008      	b.n	80134f2 <USBD_CDC_Setup+0x1ae>
          break;
 80134e0:	bf00      	nop
      }
      break;
 80134e2:	e006      	b.n	80134f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80134e4:	6839      	ldr	r1, [r7, #0]
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f001 fc1f 	bl	8014d2a <USBD_CtlError>
      ret = USBD_FAIL;
 80134ec:	2303      	movs	r3, #3
 80134ee:	75fb      	strb	r3, [r7, #23]
      break;
 80134f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80134f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80134f4:	4618      	mov	r0, r3
 80134f6:	3718      	adds	r7, #24
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}

080134fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b084      	sub	sp, #16
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
 8013504:	460b      	mov	r3, r1
 8013506:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801350e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	32b0      	adds	r2, #176	@ 0xb0
 801351a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d101      	bne.n	8013526 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013522:	2303      	movs	r3, #3
 8013524:	e065      	b.n	80135f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	32b0      	adds	r2, #176	@ 0xb0
 8013530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013534:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013536:	78fb      	ldrb	r3, [r7, #3]
 8013538:	f003 020f 	and.w	r2, r3, #15
 801353c:	6879      	ldr	r1, [r7, #4]
 801353e:	4613      	mov	r3, r2
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	4413      	add	r3, r2
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	440b      	add	r3, r1
 8013548:	3318      	adds	r3, #24
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d02f      	beq.n	80135b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013550:	78fb      	ldrb	r3, [r7, #3]
 8013552:	f003 020f 	and.w	r2, r3, #15
 8013556:	6879      	ldr	r1, [r7, #4]
 8013558:	4613      	mov	r3, r2
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	4413      	add	r3, r2
 801355e:	009b      	lsls	r3, r3, #2
 8013560:	440b      	add	r3, r1
 8013562:	3318      	adds	r3, #24
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	78fb      	ldrb	r3, [r7, #3]
 8013568:	f003 010f 	and.w	r1, r3, #15
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	460b      	mov	r3, r1
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	440b      	add	r3, r1
 8013574:	00db      	lsls	r3, r3, #3
 8013576:	4403      	add	r3, r0
 8013578:	3320      	adds	r3, #32
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	fbb2 f1f3 	udiv	r1, r2, r3
 8013580:	fb01 f303 	mul.w	r3, r1, r3
 8013584:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013586:	2b00      	cmp	r3, #0
 8013588:	d112      	bne.n	80135b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801358a:	78fb      	ldrb	r3, [r7, #3]
 801358c:	f003 020f 	and.w	r2, r3, #15
 8013590:	6879      	ldr	r1, [r7, #4]
 8013592:	4613      	mov	r3, r2
 8013594:	009b      	lsls	r3, r3, #2
 8013596:	4413      	add	r3, r2
 8013598:	009b      	lsls	r3, r3, #2
 801359a:	440b      	add	r3, r1
 801359c:	3318      	adds	r3, #24
 801359e:	2200      	movs	r2, #0
 80135a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80135a2:	78f9      	ldrb	r1, [r7, #3]
 80135a4:	2300      	movs	r3, #0
 80135a6:	2200      	movs	r2, #0
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f005 fe82 	bl	80192b2 <USBD_LL_Transmit>
 80135ae:	e01f      	b.n	80135f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	2200      	movs	r2, #0
 80135b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	33b0      	adds	r3, #176	@ 0xb0
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	4413      	add	r3, r2
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	691b      	ldr	r3, [r3, #16]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d010      	beq.n	80135f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	33b0      	adds	r3, #176	@ 0xb0
 80135d8:	009b      	lsls	r3, r3, #2
 80135da:	4413      	add	r3, r2
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	691b      	ldr	r3, [r3, #16]
 80135e0:	68ba      	ldr	r2, [r7, #8]
 80135e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80135e6:	68ba      	ldr	r2, [r7, #8]
 80135e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80135ec:	78fa      	ldrb	r2, [r7, #3]
 80135ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80135f0:	2300      	movs	r3, #0
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3710      	adds	r7, #16
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}

080135fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80135fa:	b580      	push	{r7, lr}
 80135fc:	b084      	sub	sp, #16
 80135fe:	af00      	add	r7, sp, #0
 8013600:	6078      	str	r0, [r7, #4]
 8013602:	460b      	mov	r3, r1
 8013604:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	32b0      	adds	r2, #176	@ 0xb0
 8013610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013614:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	32b0      	adds	r2, #176	@ 0xb0
 8013620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d101      	bne.n	801362c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013628:	2303      	movs	r3, #3
 801362a:	e01a      	b.n	8013662 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801362c:	78fb      	ldrb	r3, [r7, #3]
 801362e:	4619      	mov	r1, r3
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f005 fe80 	bl	8019336 <USBD_LL_GetRxDataSize>
 8013636:	4602      	mov	r2, r0
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013644:	687a      	ldr	r2, [r7, #4]
 8013646:	33b0      	adds	r3, #176	@ 0xb0
 8013648:	009b      	lsls	r3, r3, #2
 801364a:	4413      	add	r3, r2
 801364c:	685b      	ldr	r3, [r3, #4]
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	68fa      	ldr	r2, [r7, #12]
 8013652:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8013656:	68fa      	ldr	r2, [r7, #12]
 8013658:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801365c:	4611      	mov	r1, r2
 801365e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013660:	2300      	movs	r3, #0
}
 8013662:	4618      	mov	r0, r3
 8013664:	3710      	adds	r7, #16
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}

0801366a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801366a:	b580      	push	{r7, lr}
 801366c:	b084      	sub	sp, #16
 801366e:	af00      	add	r7, sp, #0
 8013670:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	32b0      	adds	r2, #176	@ 0xb0
 801367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013680:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d101      	bne.n	801368c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013688:	2303      	movs	r3, #3
 801368a:	e024      	b.n	80136d6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013692:	687a      	ldr	r2, [r7, #4]
 8013694:	33b0      	adds	r3, #176	@ 0xb0
 8013696:	009b      	lsls	r3, r3, #2
 8013698:	4413      	add	r3, r2
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d019      	beq.n	80136d4 <USBD_CDC_EP0_RxReady+0x6a>
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80136a6:	2bff      	cmp	r3, #255	@ 0xff
 80136a8:	d014      	beq.n	80136d4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	33b0      	adds	r3, #176	@ 0xb0
 80136b4:	009b      	lsls	r3, r3, #2
 80136b6:	4413      	add	r3, r2
 80136b8:	685b      	ldr	r3, [r3, #4]
 80136ba:	689b      	ldr	r3, [r3, #8]
 80136bc:	68fa      	ldr	r2, [r7, #12]
 80136be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80136c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80136c4:	68fa      	ldr	r2, [r7, #12]
 80136c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80136ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	22ff      	movs	r2, #255	@ 0xff
 80136d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80136d4:	2300      	movs	r3, #0
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3710      	adds	r7, #16
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
	...

080136e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b086      	sub	sp, #24
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80136e8:	2182      	movs	r1, #130	@ 0x82
 80136ea:	4818      	ldr	r0, [pc, #96]	@ (801374c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80136ec:	f000 fcbd 	bl	801406a <USBD_GetEpDesc>
 80136f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80136f2:	2101      	movs	r1, #1
 80136f4:	4815      	ldr	r0, [pc, #84]	@ (801374c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80136f6:	f000 fcb8 	bl	801406a <USBD_GetEpDesc>
 80136fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80136fc:	2181      	movs	r1, #129	@ 0x81
 80136fe:	4813      	ldr	r0, [pc, #76]	@ (801374c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013700:	f000 fcb3 	bl	801406a <USBD_GetEpDesc>
 8013704:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d002      	beq.n	8013712 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	2210      	movs	r2, #16
 8013710:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d006      	beq.n	8013726 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	2200      	movs	r2, #0
 801371c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013720:	711a      	strb	r2, [r3, #4]
 8013722:	2200      	movs	r2, #0
 8013724:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d006      	beq.n	801373a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2200      	movs	r2, #0
 8013730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013734:	711a      	strb	r2, [r3, #4]
 8013736:	2200      	movs	r2, #0
 8013738:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2243      	movs	r2, #67	@ 0x43
 801373e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013740:	4b02      	ldr	r3, [pc, #8]	@ (801374c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013742:	4618      	mov	r0, r3
 8013744:	3718      	adds	r7, #24
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}
 801374a:	bf00      	nop
 801374c:	2000007c 	.word	0x2000007c

08013750 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b086      	sub	sp, #24
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013758:	2182      	movs	r1, #130	@ 0x82
 801375a:	4818      	ldr	r0, [pc, #96]	@ (80137bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 801375c:	f000 fc85 	bl	801406a <USBD_GetEpDesc>
 8013760:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013762:	2101      	movs	r1, #1
 8013764:	4815      	ldr	r0, [pc, #84]	@ (80137bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013766:	f000 fc80 	bl	801406a <USBD_GetEpDesc>
 801376a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801376c:	2181      	movs	r1, #129	@ 0x81
 801376e:	4813      	ldr	r0, [pc, #76]	@ (80137bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013770:	f000 fc7b 	bl	801406a <USBD_GetEpDesc>
 8013774:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d002      	beq.n	8013782 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	2210      	movs	r2, #16
 8013780:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d006      	beq.n	8013796 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	2200      	movs	r2, #0
 801378c:	711a      	strb	r2, [r3, #4]
 801378e:	2200      	movs	r2, #0
 8013790:	f042 0202 	orr.w	r2, r2, #2
 8013794:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d006      	beq.n	80137aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	2200      	movs	r2, #0
 80137a0:	711a      	strb	r2, [r3, #4]
 80137a2:	2200      	movs	r2, #0
 80137a4:	f042 0202 	orr.w	r2, r2, #2
 80137a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2243      	movs	r2, #67	@ 0x43
 80137ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80137b0:	4b02      	ldr	r3, [pc, #8]	@ (80137bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3718      	adds	r7, #24
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	2000007c 	.word	0x2000007c

080137c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b086      	sub	sp, #24
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80137c8:	2182      	movs	r1, #130	@ 0x82
 80137ca:	4818      	ldr	r0, [pc, #96]	@ (801382c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80137cc:	f000 fc4d 	bl	801406a <USBD_GetEpDesc>
 80137d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80137d2:	2101      	movs	r1, #1
 80137d4:	4815      	ldr	r0, [pc, #84]	@ (801382c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80137d6:	f000 fc48 	bl	801406a <USBD_GetEpDesc>
 80137da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80137dc:	2181      	movs	r1, #129	@ 0x81
 80137de:	4813      	ldr	r0, [pc, #76]	@ (801382c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80137e0:	f000 fc43 	bl	801406a <USBD_GetEpDesc>
 80137e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d002      	beq.n	80137f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	2210      	movs	r2, #16
 80137f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d006      	beq.n	8013806 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	2200      	movs	r2, #0
 80137fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013800:	711a      	strb	r2, [r3, #4]
 8013802:	2200      	movs	r2, #0
 8013804:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d006      	beq.n	801381a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2200      	movs	r2, #0
 8013810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013814:	711a      	strb	r2, [r3, #4]
 8013816:	2200      	movs	r2, #0
 8013818:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2243      	movs	r2, #67	@ 0x43
 801381e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013820:	4b02      	ldr	r3, [pc, #8]	@ (801382c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013822:	4618      	mov	r0, r3
 8013824:	3718      	adds	r7, #24
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	2000007c 	.word	0x2000007c

08013830 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013830:	b480      	push	{r7}
 8013832:	b083      	sub	sp, #12
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	220a      	movs	r2, #10
 801383c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801383e:	4b03      	ldr	r3, [pc, #12]	@ (801384c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013840:	4618      	mov	r0, r3
 8013842:	370c      	adds	r7, #12
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr
 801384c:	20000038 	.word	0x20000038

08013850 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013850:	b480      	push	{r7}
 8013852:	b083      	sub	sp, #12
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d101      	bne.n	8013864 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013860:	2303      	movs	r3, #3
 8013862:	e009      	b.n	8013878 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	33b0      	adds	r3, #176	@ 0xb0
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	4413      	add	r3, r2
 8013872:	683a      	ldr	r2, [r7, #0]
 8013874:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013876:	2300      	movs	r3, #0
}
 8013878:	4618      	mov	r0, r3
 801387a:	370c      	adds	r7, #12
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr

08013884 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013884:	b480      	push	{r7}
 8013886:	b087      	sub	sp, #28
 8013888:	af00      	add	r7, sp, #0
 801388a:	60f8      	str	r0, [r7, #12]
 801388c:	60b9      	str	r1, [r7, #8]
 801388e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	32b0      	adds	r2, #176	@ 0xb0
 801389a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801389e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d101      	bne.n	80138aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80138a6:	2303      	movs	r3, #3
 80138a8:	e008      	b.n	80138bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	68ba      	ldr	r2, [r7, #8]
 80138ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	371c      	adds	r7, #28
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80138c8:	b480      	push	{r7}
 80138ca:	b085      	sub	sp, #20
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	32b0      	adds	r2, #176	@ 0xb0
 80138dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d101      	bne.n	80138ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80138e8:	2303      	movs	r3, #3
 80138ea:	e004      	b.n	80138f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	683a      	ldr	r2, [r7, #0]
 80138f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80138f4:	2300      	movs	r3, #0
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3714      	adds	r7, #20
 80138fa:	46bd      	mov	sp, r7
 80138fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013900:	4770      	bx	lr
	...

08013904 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b084      	sub	sp, #16
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	32b0      	adds	r2, #176	@ 0xb0
 8013916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801391a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801391c:	2301      	movs	r3, #1
 801391e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d101      	bne.n	801392a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013926:	2303      	movs	r3, #3
 8013928:	e025      	b.n	8013976 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013930:	2b00      	cmp	r3, #0
 8013932:	d11f      	bne.n	8013974 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	2201      	movs	r2, #1
 8013938:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801393c:	4b10      	ldr	r3, [pc, #64]	@ (8013980 <USBD_CDC_TransmitPacket+0x7c>)
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	f003 020f 	and.w	r2, r3, #15
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	4613      	mov	r3, r2
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	4413      	add	r3, r2
 8013952:	009b      	lsls	r3, r3, #2
 8013954:	4403      	add	r3, r0
 8013956:	3318      	adds	r3, #24
 8013958:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801395a:	4b09      	ldr	r3, [pc, #36]	@ (8013980 <USBD_CDC_TransmitPacket+0x7c>)
 801395c:	7819      	ldrb	r1, [r3, #0]
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f005 fca1 	bl	80192b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013970:	2300      	movs	r3, #0
 8013972:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013974:	7bfb      	ldrb	r3, [r7, #15]
}
 8013976:	4618      	mov	r0, r3
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	200000bf 	.word	0x200000bf

08013984 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	32b0      	adds	r2, #176	@ 0xb0
 8013996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801399a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	32b0      	adds	r2, #176	@ 0xb0
 80139a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d101      	bne.n	80139b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80139ae:	2303      	movs	r3, #3
 80139b0:	e018      	b.n	80139e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	7c1b      	ldrb	r3, [r3, #16]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d10a      	bne.n	80139d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80139ba:	4b0c      	ldr	r3, [pc, #48]	@ (80139ec <USBD_CDC_ReceivePacket+0x68>)
 80139bc:	7819      	ldrb	r1, [r3, #0]
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80139c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f005 fc93 	bl	80192f4 <USBD_LL_PrepareReceive>
 80139ce:	e008      	b.n	80139e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80139d0:	4b06      	ldr	r3, [pc, #24]	@ (80139ec <USBD_CDC_ReceivePacket+0x68>)
 80139d2:	7819      	ldrb	r1, [r3, #0]
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80139da:	2340      	movs	r3, #64	@ 0x40
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f005 fc89 	bl	80192f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80139e2:	2300      	movs	r3, #0
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	3710      	adds	r7, #16
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}
 80139ec:	200000c0 	.word	0x200000c0

080139f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b086      	sub	sp, #24
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	60f8      	str	r0, [r7, #12]
 80139f8:	60b9      	str	r1, [r7, #8]
 80139fa:	4613      	mov	r3, r2
 80139fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d101      	bne.n	8013a08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013a04:	2303      	movs	r3, #3
 8013a06:	e01f      	b.n	8013a48 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2200      	movs	r2, #0
 8013a14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d003      	beq.n	8013a2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	68ba      	ldr	r2, [r7, #8]
 8013a2a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	2201      	movs	r2, #1
 8013a32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	79fa      	ldrb	r2, [r7, #7]
 8013a3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013a3c:	68f8      	ldr	r0, [r7, #12]
 8013a3e:	f005 faed 	bl	801901c <USBD_LL_Init>
 8013a42:	4603      	mov	r3, r0
 8013a44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3718      	adds	r7, #24
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
 8013a58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d101      	bne.n	8013a68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013a64:	2303      	movs	r3, #3
 8013a66:	e025      	b.n	8013ab4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	683a      	ldr	r2, [r7, #0]
 8013a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	32ae      	adds	r2, #174	@ 0xae
 8013a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d00f      	beq.n	8013aa4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	32ae      	adds	r2, #174	@ 0xae
 8013a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a94:	f107 020e 	add.w	r2, r7, #14
 8013a98:	4610      	mov	r0, r2
 8013a9a:	4798      	blx	r3
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013aaa:	1c5a      	adds	r2, r3, #1
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013ab2:	2300      	movs	r3, #0
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3710      	adds	r7, #16
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}

08013abc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f005 fb0b 	bl	80190e0 <USBD_LL_Start>
 8013aca:	4603      	mov	r3, r0
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b083      	sub	sp, #12
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013adc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	370c      	adds	r7, #12
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae8:	4770      	bx	lr

08013aea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b084      	sub	sp, #16
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]
 8013af2:	460b      	mov	r3, r1
 8013af4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013af6:	2300      	movs	r3, #0
 8013af8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d009      	beq.n	8013b18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	78fa      	ldrb	r2, [r7, #3]
 8013b0e:	4611      	mov	r1, r2
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	4798      	blx	r3
 8013b14:	4603      	mov	r3, r0
 8013b16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3710      	adds	r7, #16
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}

08013b22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b22:	b580      	push	{r7, lr}
 8013b24:	b084      	sub	sp, #16
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	6078      	str	r0, [r7, #4]
 8013b2a:	460b      	mov	r3, r1
 8013b2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	78fa      	ldrb	r2, [r7, #3]
 8013b3c:	4611      	mov	r1, r2
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	4798      	blx	r3
 8013b42:	4603      	mov	r3, r0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d001      	beq.n	8013b4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013b48:	2303      	movs	r3, #3
 8013b4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3710      	adds	r7, #16
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}

08013b56 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013b56:	b580      	push	{r7, lr}
 8013b58:	b084      	sub	sp, #16
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	6078      	str	r0, [r7, #4]
 8013b5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013b66:	6839      	ldr	r1, [r7, #0]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f001 f8a4 	bl	8014cb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2201      	movs	r2, #1
 8013b72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013b8a:	f003 031f 	and.w	r3, r3, #31
 8013b8e:	2b02      	cmp	r3, #2
 8013b90:	d01a      	beq.n	8013bc8 <USBD_LL_SetupStage+0x72>
 8013b92:	2b02      	cmp	r3, #2
 8013b94:	d822      	bhi.n	8013bdc <USBD_LL_SetupStage+0x86>
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d002      	beq.n	8013ba0 <USBD_LL_SetupStage+0x4a>
 8013b9a:	2b01      	cmp	r3, #1
 8013b9c:	d00a      	beq.n	8013bb4 <USBD_LL_SetupStage+0x5e>
 8013b9e:	e01d      	b.n	8013bdc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f000 fad1 	bl	8014150 <USBD_StdDevReq>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8013bb2:	e020      	b.n	8013bf6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013bba:	4619      	mov	r1, r3
 8013bbc:	6878      	ldr	r0, [r7, #4]
 8013bbe:	f000 fb39 	bl	8014234 <USBD_StdItfReq>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8013bc6:	e016      	b.n	8013bf6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013bce:	4619      	mov	r1, r3
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 fb9b 	bl	801430c <USBD_StdEPReq>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8013bda:	e00c      	b.n	8013bf6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013be2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013be6:	b2db      	uxtb	r3, r3
 8013be8:	4619      	mov	r1, r3
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f005 fad8 	bl	80191a0 <USBD_LL_StallEP>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8013bf4:	bf00      	nop
  }

  return ret;
 8013bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3710      	adds	r7, #16
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}

08013c00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b086      	sub	sp, #24
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	460b      	mov	r3, r1
 8013c0a:	607a      	str	r2, [r7, #4]
 8013c0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013c12:	7afb      	ldrb	r3, [r7, #11]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d16e      	bne.n	8013cf6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013c1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013c26:	2b03      	cmp	r3, #3
 8013c28:	f040 8098 	bne.w	8013d5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	689a      	ldr	r2, [r3, #8]
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d913      	bls.n	8013c60 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	689a      	ldr	r2, [r3, #8]
 8013c3c:	693b      	ldr	r3, [r7, #16]
 8013c3e:	68db      	ldr	r3, [r3, #12]
 8013c40:	1ad2      	subs	r2, r2, r3
 8013c42:	693b      	ldr	r3, [r7, #16]
 8013c44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013c46:	693b      	ldr	r3, [r7, #16]
 8013c48:	68da      	ldr	r2, [r3, #12]
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	689b      	ldr	r3, [r3, #8]
 8013c4e:	4293      	cmp	r3, r2
 8013c50:	bf28      	it	cs
 8013c52:	4613      	movcs	r3, r2
 8013c54:	461a      	mov	r2, r3
 8013c56:	6879      	ldr	r1, [r7, #4]
 8013c58:	68f8      	ldr	r0, [r7, #12]
 8013c5a:	f001 f92c 	bl	8014eb6 <USBD_CtlContinueRx>
 8013c5e:	e07d      	b.n	8013d5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013c66:	f003 031f 	and.w	r3, r3, #31
 8013c6a:	2b02      	cmp	r3, #2
 8013c6c:	d014      	beq.n	8013c98 <USBD_LL_DataOutStage+0x98>
 8013c6e:	2b02      	cmp	r3, #2
 8013c70:	d81d      	bhi.n	8013cae <USBD_LL_DataOutStage+0xae>
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d002      	beq.n	8013c7c <USBD_LL_DataOutStage+0x7c>
 8013c76:	2b01      	cmp	r3, #1
 8013c78:	d003      	beq.n	8013c82 <USBD_LL_DataOutStage+0x82>
 8013c7a:	e018      	b.n	8013cae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	75bb      	strb	r3, [r7, #22]
            break;
 8013c80:	e018      	b.n	8013cb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013c88:	b2db      	uxtb	r3, r3
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	68f8      	ldr	r0, [r7, #12]
 8013c8e:	f000 f9d2 	bl	8014036 <USBD_CoreFindIF>
 8013c92:	4603      	mov	r3, r0
 8013c94:	75bb      	strb	r3, [r7, #22]
            break;
 8013c96:	e00d      	b.n	8013cb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013c9e:	b2db      	uxtb	r3, r3
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	68f8      	ldr	r0, [r7, #12]
 8013ca4:	f000 f9d4 	bl	8014050 <USBD_CoreFindEP>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	75bb      	strb	r3, [r7, #22]
            break;
 8013cac:	e002      	b.n	8013cb4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	75bb      	strb	r3, [r7, #22]
            break;
 8013cb2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013cb4:	7dbb      	ldrb	r3, [r7, #22]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d119      	bne.n	8013cee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cc0:	b2db      	uxtb	r3, r3
 8013cc2:	2b03      	cmp	r3, #3
 8013cc4:	d113      	bne.n	8013cee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013cc6:	7dba      	ldrb	r2, [r7, #22]
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	32ae      	adds	r2, #174	@ 0xae
 8013ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cd0:	691b      	ldr	r3, [r3, #16]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d00b      	beq.n	8013cee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013cd6:	7dba      	ldrb	r2, [r7, #22]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013cde:	7dba      	ldrb	r2, [r7, #22]
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	32ae      	adds	r2, #174	@ 0xae
 8013ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ce8:	691b      	ldr	r3, [r3, #16]
 8013cea:	68f8      	ldr	r0, [r7, #12]
 8013cec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013cee:	68f8      	ldr	r0, [r7, #12]
 8013cf0:	f001 f8f2 	bl	8014ed8 <USBD_CtlSendStatus>
 8013cf4:	e032      	b.n	8013d5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013cf6:	7afb      	ldrb	r3, [r7, #11]
 8013cf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013cfc:	b2db      	uxtb	r3, r3
 8013cfe:	4619      	mov	r1, r3
 8013d00:	68f8      	ldr	r0, [r7, #12]
 8013d02:	f000 f9a5 	bl	8014050 <USBD_CoreFindEP>
 8013d06:	4603      	mov	r3, r0
 8013d08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d0a:	7dbb      	ldrb	r3, [r7, #22]
 8013d0c:	2bff      	cmp	r3, #255	@ 0xff
 8013d0e:	d025      	beq.n	8013d5c <USBD_LL_DataOutStage+0x15c>
 8013d10:	7dbb      	ldrb	r3, [r7, #22]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d122      	bne.n	8013d5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	2b03      	cmp	r3, #3
 8013d20:	d117      	bne.n	8013d52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013d22:	7dba      	ldrb	r2, [r7, #22]
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	32ae      	adds	r2, #174	@ 0xae
 8013d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d2c:	699b      	ldr	r3, [r3, #24]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d00f      	beq.n	8013d52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013d32:	7dba      	ldrb	r2, [r7, #22]
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013d3a:	7dba      	ldrb	r2, [r7, #22]
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	32ae      	adds	r2, #174	@ 0xae
 8013d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d44:	699b      	ldr	r3, [r3, #24]
 8013d46:	7afa      	ldrb	r2, [r7, #11]
 8013d48:	4611      	mov	r1, r2
 8013d4a:	68f8      	ldr	r0, [r7, #12]
 8013d4c:	4798      	blx	r3
 8013d4e:	4603      	mov	r3, r0
 8013d50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013d52:	7dfb      	ldrb	r3, [r7, #23]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d001      	beq.n	8013d5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013d58:	7dfb      	ldrb	r3, [r7, #23]
 8013d5a:	e000      	b.n	8013d5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013d5c:	2300      	movs	r3, #0
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3718      	adds	r7, #24
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}

08013d66 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013d66:	b580      	push	{r7, lr}
 8013d68:	b086      	sub	sp, #24
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	60f8      	str	r0, [r7, #12]
 8013d6e:	460b      	mov	r3, r1
 8013d70:	607a      	str	r2, [r7, #4]
 8013d72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013d74:	7afb      	ldrb	r3, [r7, #11]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d16f      	bne.n	8013e5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	3314      	adds	r3, #20
 8013d7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013d86:	2b02      	cmp	r3, #2
 8013d88:	d15a      	bne.n	8013e40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	689a      	ldr	r2, [r3, #8]
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	68db      	ldr	r3, [r3, #12]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d914      	bls.n	8013dc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	689a      	ldr	r2, [r3, #8]
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	1ad2      	subs	r2, r2, r3
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	461a      	mov	r2, r3
 8013daa:	6879      	ldr	r1, [r7, #4]
 8013dac:	68f8      	ldr	r0, [r7, #12]
 8013dae:	f001 f854 	bl	8014e5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013db2:	2300      	movs	r3, #0
 8013db4:	2200      	movs	r2, #0
 8013db6:	2100      	movs	r1, #0
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f005 fa9b 	bl	80192f4 <USBD_LL_PrepareReceive>
 8013dbe:	e03f      	b.n	8013e40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	68da      	ldr	r2, [r3, #12]
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	689b      	ldr	r3, [r3, #8]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d11c      	bne.n	8013e06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	685a      	ldr	r2, [r3, #4]
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	d316      	bcc.n	8013e06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	685a      	ldr	r2, [r3, #4]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d20f      	bcs.n	8013e06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013de6:	2200      	movs	r2, #0
 8013de8:	2100      	movs	r1, #0
 8013dea:	68f8      	ldr	r0, [r7, #12]
 8013dec:	f001 f835 	bl	8014e5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2200      	movs	r2, #0
 8013df4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013df8:	2300      	movs	r3, #0
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	68f8      	ldr	r0, [r7, #12]
 8013e00:	f005 fa78 	bl	80192f4 <USBD_LL_PrepareReceive>
 8013e04:	e01c      	b.n	8013e40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e0c:	b2db      	uxtb	r3, r3
 8013e0e:	2b03      	cmp	r3, #3
 8013e10:	d10f      	bne.n	8013e32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e18:	68db      	ldr	r3, [r3, #12]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d009      	beq.n	8013e32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e2c:	68db      	ldr	r3, [r3, #12]
 8013e2e:	68f8      	ldr	r0, [r7, #12]
 8013e30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e32:	2180      	movs	r1, #128	@ 0x80
 8013e34:	68f8      	ldr	r0, [r7, #12]
 8013e36:	f005 f9b3 	bl	80191a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f001 f85f 	bl	8014efe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d03a      	beq.n	8013ec0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013e4a:	68f8      	ldr	r0, [r7, #12]
 8013e4c:	f7ff fe42 	bl	8013ad4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2200      	movs	r2, #0
 8013e54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013e58:	e032      	b.n	8013ec0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013e5a:	7afb      	ldrb	r3, [r7, #11]
 8013e5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	4619      	mov	r1, r3
 8013e64:	68f8      	ldr	r0, [r7, #12]
 8013e66:	f000 f8f3 	bl	8014050 <USBD_CoreFindEP>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013e6e:	7dfb      	ldrb	r3, [r7, #23]
 8013e70:	2bff      	cmp	r3, #255	@ 0xff
 8013e72:	d025      	beq.n	8013ec0 <USBD_LL_DataInStage+0x15a>
 8013e74:	7dfb      	ldrb	r3, [r7, #23]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d122      	bne.n	8013ec0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e80:	b2db      	uxtb	r3, r3
 8013e82:	2b03      	cmp	r3, #3
 8013e84:	d11c      	bne.n	8013ec0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013e86:	7dfa      	ldrb	r2, [r7, #23]
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	32ae      	adds	r2, #174	@ 0xae
 8013e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e90:	695b      	ldr	r3, [r3, #20]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d014      	beq.n	8013ec0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013e96:	7dfa      	ldrb	r2, [r7, #23]
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013e9e:	7dfa      	ldrb	r2, [r7, #23]
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	32ae      	adds	r2, #174	@ 0xae
 8013ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ea8:	695b      	ldr	r3, [r3, #20]
 8013eaa:	7afa      	ldrb	r2, [r7, #11]
 8013eac:	4611      	mov	r1, r2
 8013eae:	68f8      	ldr	r0, [r7, #12]
 8013eb0:	4798      	blx	r3
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013eb6:	7dbb      	ldrb	r3, [r7, #22]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d001      	beq.n	8013ec0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013ebc:	7dbb      	ldrb	r3, [r7, #22]
 8013ebe:	e000      	b.n	8013ec2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013ec0:	2300      	movs	r3, #0
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3718      	adds	r7, #24
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}

08013eca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013eca:	b580      	push	{r7, lr}
 8013ecc:	b084      	sub	sp, #16
 8013ece:	af00      	add	r7, sp, #0
 8013ed0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2200      	movs	r2, #0
 8013ef0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d014      	beq.n	8013f30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d00e      	beq.n	8013f30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	6852      	ldr	r2, [r2, #4]
 8013f1e:	b2d2      	uxtb	r2, r2
 8013f20:	4611      	mov	r1, r2
 8013f22:	6878      	ldr	r0, [r7, #4]
 8013f24:	4798      	blx	r3
 8013f26:	4603      	mov	r3, r0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d001      	beq.n	8013f30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013f2c:	2303      	movs	r3, #3
 8013f2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f30:	2340      	movs	r3, #64	@ 0x40
 8013f32:	2200      	movs	r2, #0
 8013f34:	2100      	movs	r1, #0
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f005 f8ed 	bl	8019116 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2201      	movs	r2, #1
 8013f40:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2240      	movs	r2, #64	@ 0x40
 8013f48:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f4c:	2340      	movs	r3, #64	@ 0x40
 8013f4e:	2200      	movs	r2, #0
 8013f50:	2180      	movs	r1, #128	@ 0x80
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f005 f8df 	bl	8019116 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2201      	movs	r2, #1
 8013f5c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2240      	movs	r2, #64	@ 0x40
 8013f62:	621a      	str	r2, [r3, #32]

  return ret;
 8013f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f66:	4618      	mov	r0, r3
 8013f68:	3710      	adds	r7, #16
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}

08013f6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013f6e:	b480      	push	{r7}
 8013f70:	b083      	sub	sp, #12
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	6078      	str	r0, [r7, #4]
 8013f76:	460b      	mov	r3, r1
 8013f78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	78fa      	ldrb	r2, [r7, #3]
 8013f7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013f80:	2300      	movs	r3, #0
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	370c      	adds	r7, #12
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	2b04      	cmp	r3, #4
 8013fa0:	d006      	beq.n	8013fb0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fa8:	b2da      	uxtb	r2, r3
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2204      	movs	r2, #4
 8013fb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013fb8:	2300      	movs	r3, #0
}
 8013fba:	4618      	mov	r0, r3
 8013fbc:	370c      	adds	r7, #12
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc4:	4770      	bx	lr

08013fc6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013fc6:	b480      	push	{r7}
 8013fc8:	b083      	sub	sp, #12
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fd4:	b2db      	uxtb	r3, r3
 8013fd6:	2b04      	cmp	r3, #4
 8013fd8:	d106      	bne.n	8013fe8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013fe0:	b2da      	uxtb	r2, r3
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013fe8:	2300      	movs	r3, #0
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	370c      	adds	r7, #12
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff4:	4770      	bx	lr

08013ff6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013ff6:	b580      	push	{r7, lr}
 8013ff8:	b082      	sub	sp, #8
 8013ffa:	af00      	add	r7, sp, #0
 8013ffc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014004:	b2db      	uxtb	r3, r3
 8014006:	2b03      	cmp	r3, #3
 8014008:	d110      	bne.n	801402c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014010:	2b00      	cmp	r3, #0
 8014012:	d00b      	beq.n	801402c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801401a:	69db      	ldr	r3, [r3, #28]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d005      	beq.n	801402c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014026:	69db      	ldr	r3, [r3, #28]
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801402c:	2300      	movs	r3, #0
}
 801402e:	4618      	mov	r0, r3
 8014030:	3708      	adds	r7, #8
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}

08014036 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014036:	b480      	push	{r7}
 8014038:	b083      	sub	sp, #12
 801403a:	af00      	add	r7, sp, #0
 801403c:	6078      	str	r0, [r7, #4]
 801403e:	460b      	mov	r3, r1
 8014040:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014042:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014044:	4618      	mov	r0, r3
 8014046:	370c      	adds	r7, #12
 8014048:	46bd      	mov	sp, r7
 801404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404e:	4770      	bx	lr

08014050 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	460b      	mov	r3, r1
 801405a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801405c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801405e:	4618      	mov	r0, r3
 8014060:	370c      	adds	r7, #12
 8014062:	46bd      	mov	sp, r7
 8014064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014068:	4770      	bx	lr

0801406a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801406a:	b580      	push	{r7, lr}
 801406c:	b086      	sub	sp, #24
 801406e:	af00      	add	r7, sp, #0
 8014070:	6078      	str	r0, [r7, #4]
 8014072:	460b      	mov	r3, r1
 8014074:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801407e:	2300      	movs	r3, #0
 8014080:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	885b      	ldrh	r3, [r3, #2]
 8014086:	b29b      	uxth	r3, r3
 8014088:	68fa      	ldr	r2, [r7, #12]
 801408a:	7812      	ldrb	r2, [r2, #0]
 801408c:	4293      	cmp	r3, r2
 801408e:	d91f      	bls.n	80140d0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014096:	e013      	b.n	80140c0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014098:	f107 030a 	add.w	r3, r7, #10
 801409c:	4619      	mov	r1, r3
 801409e:	6978      	ldr	r0, [r7, #20]
 80140a0:	f000 f81b 	bl	80140da <USBD_GetNextDesc>
 80140a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	785b      	ldrb	r3, [r3, #1]
 80140aa:	2b05      	cmp	r3, #5
 80140ac:	d108      	bne.n	80140c0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80140b2:	693b      	ldr	r3, [r7, #16]
 80140b4:	789b      	ldrb	r3, [r3, #2]
 80140b6:	78fa      	ldrb	r2, [r7, #3]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d008      	beq.n	80140ce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80140bc:	2300      	movs	r3, #0
 80140be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	885b      	ldrh	r3, [r3, #2]
 80140c4:	b29a      	uxth	r2, r3
 80140c6:	897b      	ldrh	r3, [r7, #10]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d8e5      	bhi.n	8014098 <USBD_GetEpDesc+0x2e>
 80140cc:	e000      	b.n	80140d0 <USBD_GetEpDesc+0x66>
          break;
 80140ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80140d0:	693b      	ldr	r3, [r7, #16]
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3718      	adds	r7, #24
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}

080140da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80140da:	b480      	push	{r7}
 80140dc:	b085      	sub	sp, #20
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
 80140e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	881b      	ldrh	r3, [r3, #0]
 80140ec:	68fa      	ldr	r2, [r7, #12]
 80140ee:	7812      	ldrb	r2, [r2, #0]
 80140f0:	4413      	add	r3, r2
 80140f2:	b29a      	uxth	r2, r3
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	461a      	mov	r2, r3
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	4413      	add	r3, r2
 8014102:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014104:	68fb      	ldr	r3, [r7, #12]
}
 8014106:	4618      	mov	r0, r3
 8014108:	3714      	adds	r7, #20
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr

08014112 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014112:	b480      	push	{r7}
 8014114:	b087      	sub	sp, #28
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	3301      	adds	r3, #1
 8014128:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	781b      	ldrb	r3, [r3, #0]
 801412e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014130:	8a3b      	ldrh	r3, [r7, #16]
 8014132:	021b      	lsls	r3, r3, #8
 8014134:	b21a      	sxth	r2, r3
 8014136:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801413a:	4313      	orrs	r3, r2
 801413c:	b21b      	sxth	r3, r3
 801413e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014140:	89fb      	ldrh	r3, [r7, #14]
}
 8014142:	4618      	mov	r0, r3
 8014144:	371c      	adds	r7, #28
 8014146:	46bd      	mov	sp, r7
 8014148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414c:	4770      	bx	lr
	...

08014150 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801415a:	2300      	movs	r3, #0
 801415c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014166:	2b40      	cmp	r3, #64	@ 0x40
 8014168:	d005      	beq.n	8014176 <USBD_StdDevReq+0x26>
 801416a:	2b40      	cmp	r3, #64	@ 0x40
 801416c:	d857      	bhi.n	801421e <USBD_StdDevReq+0xce>
 801416e:	2b00      	cmp	r3, #0
 8014170:	d00f      	beq.n	8014192 <USBD_StdDevReq+0x42>
 8014172:	2b20      	cmp	r3, #32
 8014174:	d153      	bne.n	801421e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	32ae      	adds	r2, #174	@ 0xae
 8014180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014184:	689b      	ldr	r3, [r3, #8]
 8014186:	6839      	ldr	r1, [r7, #0]
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	4798      	blx	r3
 801418c:	4603      	mov	r3, r0
 801418e:	73fb      	strb	r3, [r7, #15]
      break;
 8014190:	e04a      	b.n	8014228 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	785b      	ldrb	r3, [r3, #1]
 8014196:	2b09      	cmp	r3, #9
 8014198:	d83b      	bhi.n	8014212 <USBD_StdDevReq+0xc2>
 801419a:	a201      	add	r2, pc, #4	@ (adr r2, 80141a0 <USBD_StdDevReq+0x50>)
 801419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141a0:	080141f5 	.word	0x080141f5
 80141a4:	08014209 	.word	0x08014209
 80141a8:	08014213 	.word	0x08014213
 80141ac:	080141ff 	.word	0x080141ff
 80141b0:	08014213 	.word	0x08014213
 80141b4:	080141d3 	.word	0x080141d3
 80141b8:	080141c9 	.word	0x080141c9
 80141bc:	08014213 	.word	0x08014213
 80141c0:	080141eb 	.word	0x080141eb
 80141c4:	080141dd 	.word	0x080141dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80141c8:	6839      	ldr	r1, [r7, #0]
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	f000 fa3c 	bl	8014648 <USBD_GetDescriptor>
          break;
 80141d0:	e024      	b.n	801421c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80141d2:	6839      	ldr	r1, [r7, #0]
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f000 fbcb 	bl	8014970 <USBD_SetAddress>
          break;
 80141da:	e01f      	b.n	801421c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80141dc:	6839      	ldr	r1, [r7, #0]
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f000 fc0a 	bl	80149f8 <USBD_SetConfig>
 80141e4:	4603      	mov	r3, r0
 80141e6:	73fb      	strb	r3, [r7, #15]
          break;
 80141e8:	e018      	b.n	801421c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80141ea:	6839      	ldr	r1, [r7, #0]
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f000 fcad 	bl	8014b4c <USBD_GetConfig>
          break;
 80141f2:	e013      	b.n	801421c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80141f4:	6839      	ldr	r1, [r7, #0]
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f000 fcde 	bl	8014bb8 <USBD_GetStatus>
          break;
 80141fc:	e00e      	b.n	801421c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80141fe:	6839      	ldr	r1, [r7, #0]
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f000 fd0d 	bl	8014c20 <USBD_SetFeature>
          break;
 8014206:	e009      	b.n	801421c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014208:	6839      	ldr	r1, [r7, #0]
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f000 fd31 	bl	8014c72 <USBD_ClrFeature>
          break;
 8014210:	e004      	b.n	801421c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014212:	6839      	ldr	r1, [r7, #0]
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 fd88 	bl	8014d2a <USBD_CtlError>
          break;
 801421a:	bf00      	nop
      }
      break;
 801421c:	e004      	b.n	8014228 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801421e:	6839      	ldr	r1, [r7, #0]
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f000 fd82 	bl	8014d2a <USBD_CtlError>
      break;
 8014226:	bf00      	nop
  }

  return ret;
 8014228:	7bfb      	ldrb	r3, [r7, #15]
}
 801422a:	4618      	mov	r0, r3
 801422c:	3710      	adds	r7, #16
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop

08014234 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b084      	sub	sp, #16
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
 801423c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801423e:	2300      	movs	r3, #0
 8014240:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	781b      	ldrb	r3, [r3, #0]
 8014246:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801424a:	2b40      	cmp	r3, #64	@ 0x40
 801424c:	d005      	beq.n	801425a <USBD_StdItfReq+0x26>
 801424e:	2b40      	cmp	r3, #64	@ 0x40
 8014250:	d852      	bhi.n	80142f8 <USBD_StdItfReq+0xc4>
 8014252:	2b00      	cmp	r3, #0
 8014254:	d001      	beq.n	801425a <USBD_StdItfReq+0x26>
 8014256:	2b20      	cmp	r3, #32
 8014258:	d14e      	bne.n	80142f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014260:	b2db      	uxtb	r3, r3
 8014262:	3b01      	subs	r3, #1
 8014264:	2b02      	cmp	r3, #2
 8014266:	d840      	bhi.n	80142ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	889b      	ldrh	r3, [r3, #4]
 801426c:	b2db      	uxtb	r3, r3
 801426e:	2b01      	cmp	r3, #1
 8014270:	d836      	bhi.n	80142e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014272:	683b      	ldr	r3, [r7, #0]
 8014274:	889b      	ldrh	r3, [r3, #4]
 8014276:	b2db      	uxtb	r3, r3
 8014278:	4619      	mov	r1, r3
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f7ff fedb 	bl	8014036 <USBD_CoreFindIF>
 8014280:	4603      	mov	r3, r0
 8014282:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014284:	7bbb      	ldrb	r3, [r7, #14]
 8014286:	2bff      	cmp	r3, #255	@ 0xff
 8014288:	d01d      	beq.n	80142c6 <USBD_StdItfReq+0x92>
 801428a:	7bbb      	ldrb	r3, [r7, #14]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d11a      	bne.n	80142c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014290:	7bba      	ldrb	r2, [r7, #14]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	32ae      	adds	r2, #174	@ 0xae
 8014296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801429a:	689b      	ldr	r3, [r3, #8]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d00f      	beq.n	80142c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80142a0:	7bba      	ldrb	r2, [r7, #14]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80142a8:	7bba      	ldrb	r2, [r7, #14]
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	32ae      	adds	r2, #174	@ 0xae
 80142ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142b2:	689b      	ldr	r3, [r3, #8]
 80142b4:	6839      	ldr	r1, [r7, #0]
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	4798      	blx	r3
 80142ba:	4603      	mov	r3, r0
 80142bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80142be:	e004      	b.n	80142ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80142c0:	2303      	movs	r3, #3
 80142c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80142c4:	e001      	b.n	80142ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80142c6:	2303      	movs	r3, #3
 80142c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	88db      	ldrh	r3, [r3, #6]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d110      	bne.n	80142f4 <USBD_StdItfReq+0xc0>
 80142d2:	7bfb      	ldrb	r3, [r7, #15]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d10d      	bne.n	80142f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f000 fdfd 	bl	8014ed8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80142de:	e009      	b.n	80142f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80142e0:	6839      	ldr	r1, [r7, #0]
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f000 fd21 	bl	8014d2a <USBD_CtlError>
          break;
 80142e8:	e004      	b.n	80142f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80142ea:	6839      	ldr	r1, [r7, #0]
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f000 fd1c 	bl	8014d2a <USBD_CtlError>
          break;
 80142f2:	e000      	b.n	80142f6 <USBD_StdItfReq+0xc2>
          break;
 80142f4:	bf00      	nop
      }
      break;
 80142f6:	e004      	b.n	8014302 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80142f8:	6839      	ldr	r1, [r7, #0]
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f000 fd15 	bl	8014d2a <USBD_CtlError>
      break;
 8014300:	bf00      	nop
  }

  return ret;
 8014302:	7bfb      	ldrb	r3, [r7, #15]
}
 8014304:	4618      	mov	r0, r3
 8014306:	3710      	adds	r7, #16
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}

0801430c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014316:	2300      	movs	r3, #0
 8014318:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	889b      	ldrh	r3, [r3, #4]
 801431e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014328:	2b40      	cmp	r3, #64	@ 0x40
 801432a:	d007      	beq.n	801433c <USBD_StdEPReq+0x30>
 801432c:	2b40      	cmp	r3, #64	@ 0x40
 801432e:	f200 817f 	bhi.w	8014630 <USBD_StdEPReq+0x324>
 8014332:	2b00      	cmp	r3, #0
 8014334:	d02a      	beq.n	801438c <USBD_StdEPReq+0x80>
 8014336:	2b20      	cmp	r3, #32
 8014338:	f040 817a 	bne.w	8014630 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801433c:	7bbb      	ldrb	r3, [r7, #14]
 801433e:	4619      	mov	r1, r3
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f7ff fe85 	bl	8014050 <USBD_CoreFindEP>
 8014346:	4603      	mov	r3, r0
 8014348:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801434a:	7b7b      	ldrb	r3, [r7, #13]
 801434c:	2bff      	cmp	r3, #255	@ 0xff
 801434e:	f000 8174 	beq.w	801463a <USBD_StdEPReq+0x32e>
 8014352:	7b7b      	ldrb	r3, [r7, #13]
 8014354:	2b00      	cmp	r3, #0
 8014356:	f040 8170 	bne.w	801463a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801435a:	7b7a      	ldrb	r2, [r7, #13]
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014362:	7b7a      	ldrb	r2, [r7, #13]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	32ae      	adds	r2, #174	@ 0xae
 8014368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801436c:	689b      	ldr	r3, [r3, #8]
 801436e:	2b00      	cmp	r3, #0
 8014370:	f000 8163 	beq.w	801463a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014374:	7b7a      	ldrb	r2, [r7, #13]
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	32ae      	adds	r2, #174	@ 0xae
 801437a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801437e:	689b      	ldr	r3, [r3, #8]
 8014380:	6839      	ldr	r1, [r7, #0]
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	4798      	blx	r3
 8014386:	4603      	mov	r3, r0
 8014388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801438a:	e156      	b.n	801463a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	785b      	ldrb	r3, [r3, #1]
 8014390:	2b03      	cmp	r3, #3
 8014392:	d008      	beq.n	80143a6 <USBD_StdEPReq+0x9a>
 8014394:	2b03      	cmp	r3, #3
 8014396:	f300 8145 	bgt.w	8014624 <USBD_StdEPReq+0x318>
 801439a:	2b00      	cmp	r3, #0
 801439c:	f000 809b 	beq.w	80144d6 <USBD_StdEPReq+0x1ca>
 80143a0:	2b01      	cmp	r3, #1
 80143a2:	d03c      	beq.n	801441e <USBD_StdEPReq+0x112>
 80143a4:	e13e      	b.n	8014624 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80143ac:	b2db      	uxtb	r3, r3
 80143ae:	2b02      	cmp	r3, #2
 80143b0:	d002      	beq.n	80143b8 <USBD_StdEPReq+0xac>
 80143b2:	2b03      	cmp	r3, #3
 80143b4:	d016      	beq.n	80143e4 <USBD_StdEPReq+0xd8>
 80143b6:	e02c      	b.n	8014412 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80143b8:	7bbb      	ldrb	r3, [r7, #14]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00d      	beq.n	80143da <USBD_StdEPReq+0xce>
 80143be:	7bbb      	ldrb	r3, [r7, #14]
 80143c0:	2b80      	cmp	r3, #128	@ 0x80
 80143c2:	d00a      	beq.n	80143da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80143c4:	7bbb      	ldrb	r3, [r7, #14]
 80143c6:	4619      	mov	r1, r3
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f004 fee9 	bl	80191a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80143ce:	2180      	movs	r1, #128	@ 0x80
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f004 fee5 	bl	80191a0 <USBD_LL_StallEP>
 80143d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80143d8:	e020      	b.n	801441c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80143da:	6839      	ldr	r1, [r7, #0]
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f000 fca4 	bl	8014d2a <USBD_CtlError>
              break;
 80143e2:	e01b      	b.n	801441c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	885b      	ldrh	r3, [r3, #2]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d10e      	bne.n	801440a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80143ec:	7bbb      	ldrb	r3, [r7, #14]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d00b      	beq.n	801440a <USBD_StdEPReq+0xfe>
 80143f2:	7bbb      	ldrb	r3, [r7, #14]
 80143f4:	2b80      	cmp	r3, #128	@ 0x80
 80143f6:	d008      	beq.n	801440a <USBD_StdEPReq+0xfe>
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	88db      	ldrh	r3, [r3, #6]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d104      	bne.n	801440a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014400:	7bbb      	ldrb	r3, [r7, #14]
 8014402:	4619      	mov	r1, r3
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f004 fecb 	bl	80191a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f000 fd64 	bl	8014ed8 <USBD_CtlSendStatus>

              break;
 8014410:	e004      	b.n	801441c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014412:	6839      	ldr	r1, [r7, #0]
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f000 fc88 	bl	8014d2a <USBD_CtlError>
              break;
 801441a:	bf00      	nop
          }
          break;
 801441c:	e107      	b.n	801462e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014424:	b2db      	uxtb	r3, r3
 8014426:	2b02      	cmp	r3, #2
 8014428:	d002      	beq.n	8014430 <USBD_StdEPReq+0x124>
 801442a:	2b03      	cmp	r3, #3
 801442c:	d016      	beq.n	801445c <USBD_StdEPReq+0x150>
 801442e:	e04b      	b.n	80144c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014430:	7bbb      	ldrb	r3, [r7, #14]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d00d      	beq.n	8014452 <USBD_StdEPReq+0x146>
 8014436:	7bbb      	ldrb	r3, [r7, #14]
 8014438:	2b80      	cmp	r3, #128	@ 0x80
 801443a:	d00a      	beq.n	8014452 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801443c:	7bbb      	ldrb	r3, [r7, #14]
 801443e:	4619      	mov	r1, r3
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f004 fead 	bl	80191a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014446:	2180      	movs	r1, #128	@ 0x80
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f004 fea9 	bl	80191a0 <USBD_LL_StallEP>
 801444e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014450:	e040      	b.n	80144d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014452:	6839      	ldr	r1, [r7, #0]
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f000 fc68 	bl	8014d2a <USBD_CtlError>
              break;
 801445a:	e03b      	b.n	80144d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	885b      	ldrh	r3, [r3, #2]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d136      	bne.n	80144d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014464:	7bbb      	ldrb	r3, [r7, #14]
 8014466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801446a:	2b00      	cmp	r3, #0
 801446c:	d004      	beq.n	8014478 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801446e:	7bbb      	ldrb	r3, [r7, #14]
 8014470:	4619      	mov	r1, r3
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f004 feb3 	bl	80191de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f000 fd2d 	bl	8014ed8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801447e:	7bbb      	ldrb	r3, [r7, #14]
 8014480:	4619      	mov	r1, r3
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f7ff fde4 	bl	8014050 <USBD_CoreFindEP>
 8014488:	4603      	mov	r3, r0
 801448a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801448c:	7b7b      	ldrb	r3, [r7, #13]
 801448e:	2bff      	cmp	r3, #255	@ 0xff
 8014490:	d01f      	beq.n	80144d2 <USBD_StdEPReq+0x1c6>
 8014492:	7b7b      	ldrb	r3, [r7, #13]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d11c      	bne.n	80144d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014498:	7b7a      	ldrb	r2, [r7, #13]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80144a0:	7b7a      	ldrb	r2, [r7, #13]
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	32ae      	adds	r2, #174	@ 0xae
 80144a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144aa:	689b      	ldr	r3, [r3, #8]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d010      	beq.n	80144d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80144b0:	7b7a      	ldrb	r2, [r7, #13]
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	32ae      	adds	r2, #174	@ 0xae
 80144b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144ba:	689b      	ldr	r3, [r3, #8]
 80144bc:	6839      	ldr	r1, [r7, #0]
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	4798      	blx	r3
 80144c2:	4603      	mov	r3, r0
 80144c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80144c6:	e004      	b.n	80144d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80144c8:	6839      	ldr	r1, [r7, #0]
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f000 fc2d 	bl	8014d2a <USBD_CtlError>
              break;
 80144d0:	e000      	b.n	80144d4 <USBD_StdEPReq+0x1c8>
              break;
 80144d2:	bf00      	nop
          }
          break;
 80144d4:	e0ab      	b.n	801462e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	2b02      	cmp	r3, #2
 80144e0:	d002      	beq.n	80144e8 <USBD_StdEPReq+0x1dc>
 80144e2:	2b03      	cmp	r3, #3
 80144e4:	d032      	beq.n	801454c <USBD_StdEPReq+0x240>
 80144e6:	e097      	b.n	8014618 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80144e8:	7bbb      	ldrb	r3, [r7, #14]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d007      	beq.n	80144fe <USBD_StdEPReq+0x1f2>
 80144ee:	7bbb      	ldrb	r3, [r7, #14]
 80144f0:	2b80      	cmp	r3, #128	@ 0x80
 80144f2:	d004      	beq.n	80144fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80144f4:	6839      	ldr	r1, [r7, #0]
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 fc17 	bl	8014d2a <USBD_CtlError>
                break;
 80144fc:	e091      	b.n	8014622 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014502:	2b00      	cmp	r3, #0
 8014504:	da0b      	bge.n	801451e <USBD_StdEPReq+0x212>
 8014506:	7bbb      	ldrb	r3, [r7, #14]
 8014508:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801450c:	4613      	mov	r3, r2
 801450e:	009b      	lsls	r3, r3, #2
 8014510:	4413      	add	r3, r2
 8014512:	009b      	lsls	r3, r3, #2
 8014514:	3310      	adds	r3, #16
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	4413      	add	r3, r2
 801451a:	3304      	adds	r3, #4
 801451c:	e00b      	b.n	8014536 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801451e:	7bbb      	ldrb	r3, [r7, #14]
 8014520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014524:	4613      	mov	r3, r2
 8014526:	009b      	lsls	r3, r3, #2
 8014528:	4413      	add	r3, r2
 801452a:	009b      	lsls	r3, r3, #2
 801452c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014530:	687a      	ldr	r2, [r7, #4]
 8014532:	4413      	add	r3, r2
 8014534:	3304      	adds	r3, #4
 8014536:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	2200      	movs	r2, #0
 801453c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	2202      	movs	r2, #2
 8014542:	4619      	mov	r1, r3
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f000 fc6d 	bl	8014e24 <USBD_CtlSendData>
              break;
 801454a:	e06a      	b.n	8014622 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801454c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014550:	2b00      	cmp	r3, #0
 8014552:	da11      	bge.n	8014578 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014554:	7bbb      	ldrb	r3, [r7, #14]
 8014556:	f003 020f 	and.w	r2, r3, #15
 801455a:	6879      	ldr	r1, [r7, #4]
 801455c:	4613      	mov	r3, r2
 801455e:	009b      	lsls	r3, r3, #2
 8014560:	4413      	add	r3, r2
 8014562:	009b      	lsls	r3, r3, #2
 8014564:	440b      	add	r3, r1
 8014566:	3324      	adds	r3, #36	@ 0x24
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d117      	bne.n	801459e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801456e:	6839      	ldr	r1, [r7, #0]
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f000 fbda 	bl	8014d2a <USBD_CtlError>
                  break;
 8014576:	e054      	b.n	8014622 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014578:	7bbb      	ldrb	r3, [r7, #14]
 801457a:	f003 020f 	and.w	r2, r3, #15
 801457e:	6879      	ldr	r1, [r7, #4]
 8014580:	4613      	mov	r3, r2
 8014582:	009b      	lsls	r3, r3, #2
 8014584:	4413      	add	r3, r2
 8014586:	009b      	lsls	r3, r3, #2
 8014588:	440b      	add	r3, r1
 801458a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801458e:	881b      	ldrh	r3, [r3, #0]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d104      	bne.n	801459e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014594:	6839      	ldr	r1, [r7, #0]
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f000 fbc7 	bl	8014d2a <USBD_CtlError>
                  break;
 801459c:	e041      	b.n	8014622 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801459e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	da0b      	bge.n	80145be <USBD_StdEPReq+0x2b2>
 80145a6:	7bbb      	ldrb	r3, [r7, #14]
 80145a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80145ac:	4613      	mov	r3, r2
 80145ae:	009b      	lsls	r3, r3, #2
 80145b0:	4413      	add	r3, r2
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	3310      	adds	r3, #16
 80145b6:	687a      	ldr	r2, [r7, #4]
 80145b8:	4413      	add	r3, r2
 80145ba:	3304      	adds	r3, #4
 80145bc:	e00b      	b.n	80145d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80145be:	7bbb      	ldrb	r3, [r7, #14]
 80145c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80145c4:	4613      	mov	r3, r2
 80145c6:	009b      	lsls	r3, r3, #2
 80145c8:	4413      	add	r3, r2
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80145d0:	687a      	ldr	r2, [r7, #4]
 80145d2:	4413      	add	r3, r2
 80145d4:	3304      	adds	r3, #4
 80145d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80145d8:	7bbb      	ldrb	r3, [r7, #14]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d002      	beq.n	80145e4 <USBD_StdEPReq+0x2d8>
 80145de:	7bbb      	ldrb	r3, [r7, #14]
 80145e0:	2b80      	cmp	r3, #128	@ 0x80
 80145e2:	d103      	bne.n	80145ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	2200      	movs	r2, #0
 80145e8:	601a      	str	r2, [r3, #0]
 80145ea:	e00e      	b.n	801460a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80145ec:	7bbb      	ldrb	r3, [r7, #14]
 80145ee:	4619      	mov	r1, r3
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f004 fe13 	bl	801921c <USBD_LL_IsStallEP>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d003      	beq.n	8014604 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	2201      	movs	r2, #1
 8014600:	601a      	str	r2, [r3, #0]
 8014602:	e002      	b.n	801460a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	2200      	movs	r2, #0
 8014608:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	2202      	movs	r2, #2
 801460e:	4619      	mov	r1, r3
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f000 fc07 	bl	8014e24 <USBD_CtlSendData>
              break;
 8014616:	e004      	b.n	8014622 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014618:	6839      	ldr	r1, [r7, #0]
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f000 fb85 	bl	8014d2a <USBD_CtlError>
              break;
 8014620:	bf00      	nop
          }
          break;
 8014622:	e004      	b.n	801462e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014624:	6839      	ldr	r1, [r7, #0]
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f000 fb7f 	bl	8014d2a <USBD_CtlError>
          break;
 801462c:	bf00      	nop
      }
      break;
 801462e:	e005      	b.n	801463c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014630:	6839      	ldr	r1, [r7, #0]
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f000 fb79 	bl	8014d2a <USBD_CtlError>
      break;
 8014638:	e000      	b.n	801463c <USBD_StdEPReq+0x330>
      break;
 801463a:	bf00      	nop
  }

  return ret;
 801463c:	7bfb      	ldrb	r3, [r7, #15]
}
 801463e:	4618      	mov	r0, r3
 8014640:	3710      	adds	r7, #16
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
	...

08014648 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b084      	sub	sp, #16
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
 8014650:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014652:	2300      	movs	r3, #0
 8014654:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014656:	2300      	movs	r3, #0
 8014658:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801465a:	2300      	movs	r3, #0
 801465c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	885b      	ldrh	r3, [r3, #2]
 8014662:	0a1b      	lsrs	r3, r3, #8
 8014664:	b29b      	uxth	r3, r3
 8014666:	3b01      	subs	r3, #1
 8014668:	2b0e      	cmp	r3, #14
 801466a:	f200 8152 	bhi.w	8014912 <USBD_GetDescriptor+0x2ca>
 801466e:	a201      	add	r2, pc, #4	@ (adr r2, 8014674 <USBD_GetDescriptor+0x2c>)
 8014670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014674:	080146e5 	.word	0x080146e5
 8014678:	080146fd 	.word	0x080146fd
 801467c:	0801473d 	.word	0x0801473d
 8014680:	08014913 	.word	0x08014913
 8014684:	08014913 	.word	0x08014913
 8014688:	080148b3 	.word	0x080148b3
 801468c:	080148df 	.word	0x080148df
 8014690:	08014913 	.word	0x08014913
 8014694:	08014913 	.word	0x08014913
 8014698:	08014913 	.word	0x08014913
 801469c:	08014913 	.word	0x08014913
 80146a0:	08014913 	.word	0x08014913
 80146a4:	08014913 	.word	0x08014913
 80146a8:	08014913 	.word	0x08014913
 80146ac:	080146b1 	.word	0x080146b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146b6:	69db      	ldr	r3, [r3, #28]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d00b      	beq.n	80146d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146c2:	69db      	ldr	r3, [r3, #28]
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	7c12      	ldrb	r2, [r2, #16]
 80146c8:	f107 0108 	add.w	r1, r7, #8
 80146cc:	4610      	mov	r0, r2
 80146ce:	4798      	blx	r3
 80146d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80146d2:	e126      	b.n	8014922 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80146d4:	6839      	ldr	r1, [r7, #0]
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f000 fb27 	bl	8014d2a <USBD_CtlError>
        err++;
 80146dc:	7afb      	ldrb	r3, [r7, #11]
 80146de:	3301      	adds	r3, #1
 80146e0:	72fb      	strb	r3, [r7, #11]
      break;
 80146e2:	e11e      	b.n	8014922 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	687a      	ldr	r2, [r7, #4]
 80146ee:	7c12      	ldrb	r2, [r2, #16]
 80146f0:	f107 0108 	add.w	r1, r7, #8
 80146f4:	4610      	mov	r0, r2
 80146f6:	4798      	blx	r3
 80146f8:	60f8      	str	r0, [r7, #12]
      break;
 80146fa:	e112      	b.n	8014922 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	7c1b      	ldrb	r3, [r3, #16]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d10d      	bne.n	8014720 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801470c:	f107 0208 	add.w	r2, r7, #8
 8014710:	4610      	mov	r0, r2
 8014712:	4798      	blx	r3
 8014714:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	3301      	adds	r3, #1
 801471a:	2202      	movs	r2, #2
 801471c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801471e:	e100      	b.n	8014922 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014728:	f107 0208 	add.w	r2, r7, #8
 801472c:	4610      	mov	r0, r2
 801472e:	4798      	blx	r3
 8014730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	3301      	adds	r3, #1
 8014736:	2202      	movs	r2, #2
 8014738:	701a      	strb	r2, [r3, #0]
      break;
 801473a:	e0f2      	b.n	8014922 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	885b      	ldrh	r3, [r3, #2]
 8014740:	b2db      	uxtb	r3, r3
 8014742:	2b05      	cmp	r3, #5
 8014744:	f200 80ac 	bhi.w	80148a0 <USBD_GetDescriptor+0x258>
 8014748:	a201      	add	r2, pc, #4	@ (adr r2, 8014750 <USBD_GetDescriptor+0x108>)
 801474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801474e:	bf00      	nop
 8014750:	08014769 	.word	0x08014769
 8014754:	0801479d 	.word	0x0801479d
 8014758:	080147d1 	.word	0x080147d1
 801475c:	08014805 	.word	0x08014805
 8014760:	08014839 	.word	0x08014839
 8014764:	0801486d 	.word	0x0801486d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d00b      	beq.n	801478c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801477a:	685b      	ldr	r3, [r3, #4]
 801477c:	687a      	ldr	r2, [r7, #4]
 801477e:	7c12      	ldrb	r2, [r2, #16]
 8014780:	f107 0108 	add.w	r1, r7, #8
 8014784:	4610      	mov	r0, r2
 8014786:	4798      	blx	r3
 8014788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801478a:	e091      	b.n	80148b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801478c:	6839      	ldr	r1, [r7, #0]
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f000 facb 	bl	8014d2a <USBD_CtlError>
            err++;
 8014794:	7afb      	ldrb	r3, [r7, #11]
 8014796:	3301      	adds	r3, #1
 8014798:	72fb      	strb	r3, [r7, #11]
          break;
 801479a:	e089      	b.n	80148b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147a2:	689b      	ldr	r3, [r3, #8]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d00b      	beq.n	80147c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147ae:	689b      	ldr	r3, [r3, #8]
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	7c12      	ldrb	r2, [r2, #16]
 80147b4:	f107 0108 	add.w	r1, r7, #8
 80147b8:	4610      	mov	r0, r2
 80147ba:	4798      	blx	r3
 80147bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147be:	e077      	b.n	80148b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147c0:	6839      	ldr	r1, [r7, #0]
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f000 fab1 	bl	8014d2a <USBD_CtlError>
            err++;
 80147c8:	7afb      	ldrb	r3, [r7, #11]
 80147ca:	3301      	adds	r3, #1
 80147cc:	72fb      	strb	r3, [r7, #11]
          break;
 80147ce:	e06f      	b.n	80148b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d00b      	beq.n	80147f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147e2:	68db      	ldr	r3, [r3, #12]
 80147e4:	687a      	ldr	r2, [r7, #4]
 80147e6:	7c12      	ldrb	r2, [r2, #16]
 80147e8:	f107 0108 	add.w	r1, r7, #8
 80147ec:	4610      	mov	r0, r2
 80147ee:	4798      	blx	r3
 80147f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147f2:	e05d      	b.n	80148b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147f4:	6839      	ldr	r1, [r7, #0]
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f000 fa97 	bl	8014d2a <USBD_CtlError>
            err++;
 80147fc:	7afb      	ldrb	r3, [r7, #11]
 80147fe:	3301      	adds	r3, #1
 8014800:	72fb      	strb	r3, [r7, #11]
          break;
 8014802:	e055      	b.n	80148b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801480a:	691b      	ldr	r3, [r3, #16]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d00b      	beq.n	8014828 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014816:	691b      	ldr	r3, [r3, #16]
 8014818:	687a      	ldr	r2, [r7, #4]
 801481a:	7c12      	ldrb	r2, [r2, #16]
 801481c:	f107 0108 	add.w	r1, r7, #8
 8014820:	4610      	mov	r0, r2
 8014822:	4798      	blx	r3
 8014824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014826:	e043      	b.n	80148b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014828:	6839      	ldr	r1, [r7, #0]
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f000 fa7d 	bl	8014d2a <USBD_CtlError>
            err++;
 8014830:	7afb      	ldrb	r3, [r7, #11]
 8014832:	3301      	adds	r3, #1
 8014834:	72fb      	strb	r3, [r7, #11]
          break;
 8014836:	e03b      	b.n	80148b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801483e:	695b      	ldr	r3, [r3, #20]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d00b      	beq.n	801485c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801484a:	695b      	ldr	r3, [r3, #20]
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	7c12      	ldrb	r2, [r2, #16]
 8014850:	f107 0108 	add.w	r1, r7, #8
 8014854:	4610      	mov	r0, r2
 8014856:	4798      	blx	r3
 8014858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801485a:	e029      	b.n	80148b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801485c:	6839      	ldr	r1, [r7, #0]
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f000 fa63 	bl	8014d2a <USBD_CtlError>
            err++;
 8014864:	7afb      	ldrb	r3, [r7, #11]
 8014866:	3301      	adds	r3, #1
 8014868:	72fb      	strb	r3, [r7, #11]
          break;
 801486a:	e021      	b.n	80148b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014872:	699b      	ldr	r3, [r3, #24]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d00b      	beq.n	8014890 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801487e:	699b      	ldr	r3, [r3, #24]
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	7c12      	ldrb	r2, [r2, #16]
 8014884:	f107 0108 	add.w	r1, r7, #8
 8014888:	4610      	mov	r0, r2
 801488a:	4798      	blx	r3
 801488c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801488e:	e00f      	b.n	80148b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014890:	6839      	ldr	r1, [r7, #0]
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f000 fa49 	bl	8014d2a <USBD_CtlError>
            err++;
 8014898:	7afb      	ldrb	r3, [r7, #11]
 801489a:	3301      	adds	r3, #1
 801489c:	72fb      	strb	r3, [r7, #11]
          break;
 801489e:	e007      	b.n	80148b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80148a0:	6839      	ldr	r1, [r7, #0]
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f000 fa41 	bl	8014d2a <USBD_CtlError>
          err++;
 80148a8:	7afb      	ldrb	r3, [r7, #11]
 80148aa:	3301      	adds	r3, #1
 80148ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80148ae:	bf00      	nop
      }
      break;
 80148b0:	e037      	b.n	8014922 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	7c1b      	ldrb	r3, [r3, #16]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d109      	bne.n	80148ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80148c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148c2:	f107 0208 	add.w	r2, r7, #8
 80148c6:	4610      	mov	r0, r2
 80148c8:	4798      	blx	r3
 80148ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80148cc:	e029      	b.n	8014922 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80148ce:	6839      	ldr	r1, [r7, #0]
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f000 fa2a 	bl	8014d2a <USBD_CtlError>
        err++;
 80148d6:	7afb      	ldrb	r3, [r7, #11]
 80148d8:	3301      	adds	r3, #1
 80148da:	72fb      	strb	r3, [r7, #11]
      break;
 80148dc:	e021      	b.n	8014922 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	7c1b      	ldrb	r3, [r3, #16]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d10d      	bne.n	8014902 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80148ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148ee:	f107 0208 	add.w	r2, r7, #8
 80148f2:	4610      	mov	r0, r2
 80148f4:	4798      	blx	r3
 80148f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	3301      	adds	r3, #1
 80148fc:	2207      	movs	r2, #7
 80148fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014900:	e00f      	b.n	8014922 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014902:	6839      	ldr	r1, [r7, #0]
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f000 fa10 	bl	8014d2a <USBD_CtlError>
        err++;
 801490a:	7afb      	ldrb	r3, [r7, #11]
 801490c:	3301      	adds	r3, #1
 801490e:	72fb      	strb	r3, [r7, #11]
      break;
 8014910:	e007      	b.n	8014922 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014912:	6839      	ldr	r1, [r7, #0]
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f000 fa08 	bl	8014d2a <USBD_CtlError>
      err++;
 801491a:	7afb      	ldrb	r3, [r7, #11]
 801491c:	3301      	adds	r3, #1
 801491e:	72fb      	strb	r3, [r7, #11]
      break;
 8014920:	bf00      	nop
  }

  if (err != 0U)
 8014922:	7afb      	ldrb	r3, [r7, #11]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d11e      	bne.n	8014966 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	88db      	ldrh	r3, [r3, #6]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d016      	beq.n	801495e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014930:	893b      	ldrh	r3, [r7, #8]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d00e      	beq.n	8014954 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	88da      	ldrh	r2, [r3, #6]
 801493a:	893b      	ldrh	r3, [r7, #8]
 801493c:	4293      	cmp	r3, r2
 801493e:	bf28      	it	cs
 8014940:	4613      	movcs	r3, r2
 8014942:	b29b      	uxth	r3, r3
 8014944:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014946:	893b      	ldrh	r3, [r7, #8]
 8014948:	461a      	mov	r2, r3
 801494a:	68f9      	ldr	r1, [r7, #12]
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f000 fa69 	bl	8014e24 <USBD_CtlSendData>
 8014952:	e009      	b.n	8014968 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014954:	6839      	ldr	r1, [r7, #0]
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f000 f9e7 	bl	8014d2a <USBD_CtlError>
 801495c:	e004      	b.n	8014968 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f000 faba 	bl	8014ed8 <USBD_CtlSendStatus>
 8014964:	e000      	b.n	8014968 <USBD_GetDescriptor+0x320>
    return;
 8014966:	bf00      	nop
  }
}
 8014968:	3710      	adds	r7, #16
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}
 801496e:	bf00      	nop

08014970 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b084      	sub	sp, #16
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	889b      	ldrh	r3, [r3, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d131      	bne.n	80149e6 <USBD_SetAddress+0x76>
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	88db      	ldrh	r3, [r3, #6]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d12d      	bne.n	80149e6 <USBD_SetAddress+0x76>
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	885b      	ldrh	r3, [r3, #2]
 801498e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014990:	d829      	bhi.n	80149e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	885b      	ldrh	r3, [r3, #2]
 8014996:	b2db      	uxtb	r3, r3
 8014998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801499c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	2b03      	cmp	r3, #3
 80149a8:	d104      	bne.n	80149b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80149aa:	6839      	ldr	r1, [r7, #0]
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f000 f9bc 	bl	8014d2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149b2:	e01d      	b.n	80149f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	7bfa      	ldrb	r2, [r7, #15]
 80149b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80149bc:	7bfb      	ldrb	r3, [r7, #15]
 80149be:	4619      	mov	r1, r3
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f004 fc57 	bl	8019274 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 fa86 	bl	8014ed8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80149cc:	7bfb      	ldrb	r3, [r7, #15]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d004      	beq.n	80149dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2202      	movs	r2, #2
 80149d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149da:	e009      	b.n	80149f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2201      	movs	r2, #1
 80149e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149e4:	e004      	b.n	80149f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80149e6:	6839      	ldr	r1, [r7, #0]
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f000 f99e 	bl	8014d2a <USBD_CtlError>
  }
}
 80149ee:	bf00      	nop
 80149f0:	bf00      	nop
 80149f2:	3710      	adds	r7, #16
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}

080149f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b084      	sub	sp, #16
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a02:	2300      	movs	r3, #0
 8014a04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	885b      	ldrh	r3, [r3, #2]
 8014a0a:	b2da      	uxtb	r2, r3
 8014a0c:	4b4e      	ldr	r3, [pc, #312]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014a0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014a10:	4b4d      	ldr	r3, [pc, #308]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	d905      	bls.n	8014a24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014a18:	6839      	ldr	r1, [r7, #0]
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f000 f985 	bl	8014d2a <USBD_CtlError>
    return USBD_FAIL;
 8014a20:	2303      	movs	r3, #3
 8014a22:	e08c      	b.n	8014b3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a2a:	b2db      	uxtb	r3, r3
 8014a2c:	2b02      	cmp	r3, #2
 8014a2e:	d002      	beq.n	8014a36 <USBD_SetConfig+0x3e>
 8014a30:	2b03      	cmp	r3, #3
 8014a32:	d029      	beq.n	8014a88 <USBD_SetConfig+0x90>
 8014a34:	e075      	b.n	8014b22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014a36:	4b44      	ldr	r3, [pc, #272]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d020      	beq.n	8014a80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014a3e:	4b42      	ldr	r3, [pc, #264]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	461a      	mov	r2, r3
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014a48:	4b3f      	ldr	r3, [pc, #252]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f7ff f84b 	bl	8013aea <USBD_SetClassConfig>
 8014a54:	4603      	mov	r3, r0
 8014a56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014a58:	7bfb      	ldrb	r3, [r7, #15]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d008      	beq.n	8014a70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014a5e:	6839      	ldr	r1, [r7, #0]
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f000 f962 	bl	8014d2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2202      	movs	r2, #2
 8014a6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014a6e:	e065      	b.n	8014b3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f000 fa31 	bl	8014ed8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2203      	movs	r2, #3
 8014a7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014a7e:	e05d      	b.n	8014b3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f000 fa29 	bl	8014ed8 <USBD_CtlSendStatus>
      break;
 8014a86:	e059      	b.n	8014b3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014a88:	4b2f      	ldr	r3, [pc, #188]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014a8a:	781b      	ldrb	r3, [r3, #0]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d112      	bne.n	8014ab6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	2202      	movs	r2, #2
 8014a94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014a98:	4b2b      	ldr	r3, [pc, #172]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014aa2:	4b29      	ldr	r3, [pc, #164]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014aa4:	781b      	ldrb	r3, [r3, #0]
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f7ff f83a 	bl	8013b22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f000 fa12 	bl	8014ed8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014ab4:	e042      	b.n	8014b3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014ab6:	4b24      	ldr	r3, [pc, #144]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014ab8:	781b      	ldrb	r3, [r3, #0]
 8014aba:	461a      	mov	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	685b      	ldr	r3, [r3, #4]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d02a      	beq.n	8014b1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	685b      	ldr	r3, [r3, #4]
 8014ac8:	b2db      	uxtb	r3, r3
 8014aca:	4619      	mov	r1, r3
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f7ff f828 	bl	8013b22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014adc:	4b1a      	ldr	r3, [pc, #104]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014ade:	781b      	ldrb	r3, [r3, #0]
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f7ff f801 	bl	8013aea <USBD_SetClassConfig>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014aec:	7bfb      	ldrb	r3, [r7, #15]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d00f      	beq.n	8014b12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014af2:	6839      	ldr	r1, [r7, #0]
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f000 f918 	bl	8014d2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	b2db      	uxtb	r3, r3
 8014b00:	4619      	mov	r1, r3
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f7ff f80d 	bl	8013b22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	2202      	movs	r2, #2
 8014b0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014b10:	e014      	b.n	8014b3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f000 f9e0 	bl	8014ed8 <USBD_CtlSendStatus>
      break;
 8014b18:	e010      	b.n	8014b3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 f9dc 	bl	8014ed8 <USBD_CtlSendStatus>
      break;
 8014b20:	e00c      	b.n	8014b3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014b22:	6839      	ldr	r1, [r7, #0]
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f000 f900 	bl	8014d2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014b2a:	4b07      	ldr	r3, [pc, #28]	@ (8014b48 <USBD_SetConfig+0x150>)
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	4619      	mov	r1, r3
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f7fe fff6 	bl	8013b22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014b36:	2303      	movs	r3, #3
 8014b38:	73fb      	strb	r3, [r7, #15]
      break;
 8014b3a:	bf00      	nop
  }

  return ret;
 8014b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3710      	adds	r7, #16
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	20001520 	.word	0x20001520

08014b4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b082      	sub	sp, #8
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	88db      	ldrh	r3, [r3, #6]
 8014b5a:	2b01      	cmp	r3, #1
 8014b5c:	d004      	beq.n	8014b68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014b5e:	6839      	ldr	r1, [r7, #0]
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f000 f8e2 	bl	8014d2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014b66:	e023      	b.n	8014bb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014b6e:	b2db      	uxtb	r3, r3
 8014b70:	2b02      	cmp	r3, #2
 8014b72:	dc02      	bgt.n	8014b7a <USBD_GetConfig+0x2e>
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	dc03      	bgt.n	8014b80 <USBD_GetConfig+0x34>
 8014b78:	e015      	b.n	8014ba6 <USBD_GetConfig+0x5a>
 8014b7a:	2b03      	cmp	r3, #3
 8014b7c:	d00b      	beq.n	8014b96 <USBD_GetConfig+0x4a>
 8014b7e:	e012      	b.n	8014ba6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2200      	movs	r2, #0
 8014b84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	3308      	adds	r3, #8
 8014b8a:	2201      	movs	r2, #1
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f000 f948 	bl	8014e24 <USBD_CtlSendData>
        break;
 8014b94:	e00c      	b.n	8014bb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	3304      	adds	r3, #4
 8014b9a:	2201      	movs	r2, #1
 8014b9c:	4619      	mov	r1, r3
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f000 f940 	bl	8014e24 <USBD_CtlSendData>
        break;
 8014ba4:	e004      	b.n	8014bb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014ba6:	6839      	ldr	r1, [r7, #0]
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f000 f8be 	bl	8014d2a <USBD_CtlError>
        break;
 8014bae:	bf00      	nop
}
 8014bb0:	bf00      	nop
 8014bb2:	3708      	adds	r7, #8
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b082      	sub	sp, #8
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
 8014bc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014bc8:	b2db      	uxtb	r3, r3
 8014bca:	3b01      	subs	r3, #1
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d81e      	bhi.n	8014c0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	88db      	ldrh	r3, [r3, #6]
 8014bd4:	2b02      	cmp	r3, #2
 8014bd6:	d004      	beq.n	8014be2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014bd8:	6839      	ldr	r1, [r7, #0]
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f000 f8a5 	bl	8014d2a <USBD_CtlError>
        break;
 8014be0:	e01a      	b.n	8014c18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2201      	movs	r2, #1
 8014be6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d005      	beq.n	8014bfe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	68db      	ldr	r3, [r3, #12]
 8014bf6:	f043 0202 	orr.w	r2, r3, #2
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	330c      	adds	r3, #12
 8014c02:	2202      	movs	r2, #2
 8014c04:	4619      	mov	r1, r3
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f000 f90c 	bl	8014e24 <USBD_CtlSendData>
      break;
 8014c0c:	e004      	b.n	8014c18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014c0e:	6839      	ldr	r1, [r7, #0]
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f000 f88a 	bl	8014d2a <USBD_CtlError>
      break;
 8014c16:	bf00      	nop
  }
}
 8014c18:	bf00      	nop
 8014c1a:	3708      	adds	r7, #8
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}

08014c20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
 8014c28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	885b      	ldrh	r3, [r3, #2]
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d107      	bne.n	8014c42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	2201      	movs	r2, #1
 8014c36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f000 f94c 	bl	8014ed8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014c40:	e013      	b.n	8014c6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	885b      	ldrh	r3, [r3, #2]
 8014c46:	2b02      	cmp	r3, #2
 8014c48:	d10b      	bne.n	8014c62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014c4a:	683b      	ldr	r3, [r7, #0]
 8014c4c:	889b      	ldrh	r3, [r3, #4]
 8014c4e:	0a1b      	lsrs	r3, r3, #8
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	b2da      	uxtb	r2, r3
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f000 f93c 	bl	8014ed8 <USBD_CtlSendStatus>
}
 8014c60:	e003      	b.n	8014c6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014c62:	6839      	ldr	r1, [r7, #0]
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f000 f860 	bl	8014d2a <USBD_CtlError>
}
 8014c6a:	bf00      	nop
 8014c6c:	3708      	adds	r7, #8
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}

08014c72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c72:	b580      	push	{r7, lr}
 8014c74:	b082      	sub	sp, #8
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	6078      	str	r0, [r7, #4]
 8014c7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014c82:	b2db      	uxtb	r3, r3
 8014c84:	3b01      	subs	r3, #1
 8014c86:	2b02      	cmp	r3, #2
 8014c88:	d80b      	bhi.n	8014ca2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	885b      	ldrh	r3, [r3, #2]
 8014c8e:	2b01      	cmp	r3, #1
 8014c90:	d10c      	bne.n	8014cac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2200      	movs	r2, #0
 8014c96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f000 f91c 	bl	8014ed8 <USBD_CtlSendStatus>
      }
      break;
 8014ca0:	e004      	b.n	8014cac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014ca2:	6839      	ldr	r1, [r7, #0]
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f000 f840 	bl	8014d2a <USBD_CtlError>
      break;
 8014caa:	e000      	b.n	8014cae <USBD_ClrFeature+0x3c>
      break;
 8014cac:	bf00      	nop
  }
}
 8014cae:	bf00      	nop
 8014cb0:	3708      	adds	r7, #8
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}

08014cb6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014cb6:	b580      	push	{r7, lr}
 8014cb8:	b084      	sub	sp, #16
 8014cba:	af00      	add	r7, sp, #0
 8014cbc:	6078      	str	r0, [r7, #4]
 8014cbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	781a      	ldrb	r2, [r3, #0]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	781a      	ldrb	r2, [r3, #0]
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	3301      	adds	r3, #1
 8014cde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014ce0:	68f8      	ldr	r0, [r7, #12]
 8014ce2:	f7ff fa16 	bl	8014112 <SWAPBYTE>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	461a      	mov	r2, r3
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	3301      	adds	r3, #1
 8014cf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014cfa:	68f8      	ldr	r0, [r7, #12]
 8014cfc:	f7ff fa09 	bl	8014112 <SWAPBYTE>
 8014d00:	4603      	mov	r3, r0
 8014d02:	461a      	mov	r2, r3
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	3301      	adds	r3, #1
 8014d0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	3301      	adds	r3, #1
 8014d12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014d14:	68f8      	ldr	r0, [r7, #12]
 8014d16:	f7ff f9fc 	bl	8014112 <SWAPBYTE>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	461a      	mov	r2, r3
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	80da      	strh	r2, [r3, #6]
}
 8014d22:	bf00      	nop
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}

08014d2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b082      	sub	sp, #8
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
 8014d32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d34:	2180      	movs	r1, #128	@ 0x80
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f004 fa32 	bl	80191a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014d3c:	2100      	movs	r1, #0
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f004 fa2e 	bl	80191a0 <USBD_LL_StallEP>
}
 8014d44:	bf00      	nop
 8014d46:	3708      	adds	r7, #8
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b086      	sub	sp, #24
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	60f8      	str	r0, [r7, #12]
 8014d54:	60b9      	str	r1, [r7, #8]
 8014d56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d042      	beq.n	8014de8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014d66:	6938      	ldr	r0, [r7, #16]
 8014d68:	f000 f842 	bl	8014df0 <USBD_GetLen>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	3301      	adds	r3, #1
 8014d70:	005b      	lsls	r3, r3, #1
 8014d72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d76:	d808      	bhi.n	8014d8a <USBD_GetString+0x3e>
 8014d78:	6938      	ldr	r0, [r7, #16]
 8014d7a:	f000 f839 	bl	8014df0 <USBD_GetLen>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	3301      	adds	r3, #1
 8014d82:	b29b      	uxth	r3, r3
 8014d84:	005b      	lsls	r3, r3, #1
 8014d86:	b29a      	uxth	r2, r3
 8014d88:	e001      	b.n	8014d8e <USBD_GetString+0x42>
 8014d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014d92:	7dfb      	ldrb	r3, [r7, #23]
 8014d94:	68ba      	ldr	r2, [r7, #8]
 8014d96:	4413      	add	r3, r2
 8014d98:	687a      	ldr	r2, [r7, #4]
 8014d9a:	7812      	ldrb	r2, [r2, #0]
 8014d9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8014d9e:	7dfb      	ldrb	r3, [r7, #23]
 8014da0:	3301      	adds	r3, #1
 8014da2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014da4:	7dfb      	ldrb	r3, [r7, #23]
 8014da6:	68ba      	ldr	r2, [r7, #8]
 8014da8:	4413      	add	r3, r2
 8014daa:	2203      	movs	r2, #3
 8014dac:	701a      	strb	r2, [r3, #0]
  idx++;
 8014dae:	7dfb      	ldrb	r3, [r7, #23]
 8014db0:	3301      	adds	r3, #1
 8014db2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014db4:	e013      	b.n	8014dde <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014db6:	7dfb      	ldrb	r3, [r7, #23]
 8014db8:	68ba      	ldr	r2, [r7, #8]
 8014dba:	4413      	add	r3, r2
 8014dbc:	693a      	ldr	r2, [r7, #16]
 8014dbe:	7812      	ldrb	r2, [r2, #0]
 8014dc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	613b      	str	r3, [r7, #16]
    idx++;
 8014dc8:	7dfb      	ldrb	r3, [r7, #23]
 8014dca:	3301      	adds	r3, #1
 8014dcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014dce:	7dfb      	ldrb	r3, [r7, #23]
 8014dd0:	68ba      	ldr	r2, [r7, #8]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8014dd8:	7dfb      	ldrb	r3, [r7, #23]
 8014dda:	3301      	adds	r3, #1
 8014ddc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d1e7      	bne.n	8014db6 <USBD_GetString+0x6a>
 8014de6:	e000      	b.n	8014dea <USBD_GetString+0x9e>
    return;
 8014de8:	bf00      	nop
  }
}
 8014dea:	3718      	adds	r7, #24
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014df0:	b480      	push	{r7}
 8014df2:	b085      	sub	sp, #20
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014df8:	2300      	movs	r3, #0
 8014dfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014e00:	e005      	b.n	8014e0e <USBD_GetLen+0x1e>
  {
    len++;
 8014e02:	7bfb      	ldrb	r3, [r7, #15]
 8014e04:	3301      	adds	r3, #1
 8014e06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	781b      	ldrb	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d1f5      	bne.n	8014e02 <USBD_GetLen+0x12>
  }

  return len;
 8014e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	3714      	adds	r7, #20
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e22:	4770      	bx	lr

08014e24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b084      	sub	sp, #16
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	60f8      	str	r0, [r7, #12]
 8014e2c:	60b9      	str	r1, [r7, #8]
 8014e2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2202      	movs	r2, #2
 8014e34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	687a      	ldr	r2, [r7, #4]
 8014e3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	687a      	ldr	r2, [r7, #4]
 8014e42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	68ba      	ldr	r2, [r7, #8]
 8014e48:	2100      	movs	r1, #0
 8014e4a:	68f8      	ldr	r0, [r7, #12]
 8014e4c:	f004 fa31 	bl	80192b2 <USBD_LL_Transmit>

  return USBD_OK;
 8014e50:	2300      	movs	r3, #0
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3710      	adds	r7, #16
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}

08014e5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014e5a:	b580      	push	{r7, lr}
 8014e5c:	b084      	sub	sp, #16
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	60f8      	str	r0, [r7, #12]
 8014e62:	60b9      	str	r1, [r7, #8]
 8014e64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	68ba      	ldr	r2, [r7, #8]
 8014e6a:	2100      	movs	r1, #0
 8014e6c:	68f8      	ldr	r0, [r7, #12]
 8014e6e:	f004 fa20 	bl	80192b2 <USBD_LL_Transmit>

  return USBD_OK;
 8014e72:	2300      	movs	r3, #0
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3710      	adds	r7, #16
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}

08014e7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	60f8      	str	r0, [r7, #12]
 8014e84:	60b9      	str	r1, [r7, #8]
 8014e86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	2203      	movs	r2, #3
 8014e8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	687a      	ldr	r2, [r7, #4]
 8014e9c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	68ba      	ldr	r2, [r7, #8]
 8014ea4:	2100      	movs	r1, #0
 8014ea6:	68f8      	ldr	r0, [r7, #12]
 8014ea8:	f004 fa24 	bl	80192f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014eac:	2300      	movs	r3, #0
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3710      	adds	r7, #16
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}

08014eb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014eb6:	b580      	push	{r7, lr}
 8014eb8:	b084      	sub	sp, #16
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	60f8      	str	r0, [r7, #12]
 8014ebe:	60b9      	str	r1, [r7, #8]
 8014ec0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	68ba      	ldr	r2, [r7, #8]
 8014ec6:	2100      	movs	r1, #0
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f004 fa13 	bl	80192f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014ece:	2300      	movs	r3, #0
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3710      	adds	r7, #16
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2204      	movs	r2, #4
 8014ee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014ee8:	2300      	movs	r3, #0
 8014eea:	2200      	movs	r2, #0
 8014eec:	2100      	movs	r1, #0
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	f004 f9df 	bl	80192b2 <USBD_LL_Transmit>

  return USBD_OK;
 8014ef4:	2300      	movs	r3, #0
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3708      	adds	r7, #8
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}

08014efe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014efe:	b580      	push	{r7, lr}
 8014f00:	b082      	sub	sp, #8
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2205      	movs	r2, #5
 8014f0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014f0e:	2300      	movs	r3, #0
 8014f10:	2200      	movs	r2, #0
 8014f12:	2100      	movs	r1, #0
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f004 f9ed 	bl	80192f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014f1a:	2300      	movs	r3, #0
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	3708      	adds	r7, #8
 8014f20:	46bd      	mov	sp, r7
 8014f22:	bd80      	pop	{r7, pc}

08014f24 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b088      	sub	sp, #32
 8014f28:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f2e:	f107 0308 	add.w	r3, r7, #8
 8014f32:	2218      	movs	r2, #24
 8014f34:	2100      	movs	r1, #0
 8014f36:	4618      	mov	r0, r3
 8014f38:	f001 f8dd 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014f3c:	233f      	movs	r3, #63	@ 0x3f
 8014f3e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014f40:	2381      	movs	r3, #129	@ 0x81
 8014f42:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014f44:	1dfb      	adds	r3, r7, #7
 8014f46:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014f48:	2301      	movs	r3, #1
 8014f4a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f4c:	f107 0308 	add.w	r3, r7, #8
 8014f50:	2100      	movs	r1, #0
 8014f52:	4618      	mov	r0, r3
 8014f54:	f001 fc5e 	bl	8016814 <hci_send_req>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	da01      	bge.n	8014f62 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014f5e:	23ff      	movs	r3, #255	@ 0xff
 8014f60:	e000      	b.n	8014f64 <aci_gap_set_non_discoverable+0x40>
  return status;
 8014f62:	79fb      	ldrb	r3, [r7, #7]
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3720      	adds	r7, #32
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014f6c:	b5b0      	push	{r4, r5, r7, lr}
 8014f6e:	b0ce      	sub	sp, #312	@ 0x138
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	4605      	mov	r5, r0
 8014f74:	460c      	mov	r4, r1
 8014f76:	4610      	mov	r0, r2
 8014f78:	4619      	mov	r1, r3
 8014f7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f7e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014f82:	462a      	mov	r2, r5
 8014f84:	701a      	strb	r2, [r3, #0]
 8014f86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f8a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014f8e:	4622      	mov	r2, r4
 8014f90:	801a      	strh	r2, [r3, #0]
 8014f92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f96:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8014f9a:	4602      	mov	r2, r0
 8014f9c:	801a      	strh	r2, [r3, #0]
 8014f9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fa2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014fa6:	460a      	mov	r2, r1
 8014fa8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014faa:	f107 0310 	add.w	r3, r7, #16
 8014fae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014fb2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014fb6:	3308      	adds	r3, #8
 8014fb8:	f107 0210 	add.w	r2, r7, #16
 8014fbc:	4413      	add	r3, r2
 8014fbe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014fc2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014fc6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014fca:	4413      	add	r3, r2
 8014fcc:	3309      	adds	r3, #9
 8014fce:	f107 0210 	add.w	r2, r7, #16
 8014fd2:	4413      	add	r3, r2
 8014fd4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014fd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fdc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fee:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014ff2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014ff6:	7812      	ldrb	r2, [r2, #0]
 8014ff8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014ffa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ffe:	3301      	adds	r3, #1
 8015000:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8015004:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015008:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801500c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8015010:	8812      	ldrh	r2, [r2, #0]
 8015012:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8015016:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801501a:	3302      	adds	r3, #2
 801501c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8015020:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015024:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015028:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 801502c:	8812      	ldrh	r2, [r2, #0]
 801502e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8015032:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015036:	3302      	adds	r3, #2
 8015038:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 801503c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015040:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015044:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8015048:	7812      	ldrb	r2, [r2, #0]
 801504a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801504c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015050:	3301      	adds	r3, #1
 8015052:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8015056:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801505a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 801505e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8015060:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015064:	3301      	adds	r3, #1
 8015066:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 801506a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801506e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8015072:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8015074:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015078:	3301      	adds	r3, #1
 801507a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 801507e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015082:	3308      	adds	r3, #8
 8015084:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8015088:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 801508c:	4618      	mov	r0, r3
 801508e:	f001 f822 	bl	80160d6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8015092:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8015096:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801509a:	4413      	add	r3, r2
 801509c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80150a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150a4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80150a8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80150aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150ae:	3301      	adds	r3, #1
 80150b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80150b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150b8:	3301      	adds	r3, #1
 80150ba:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80150be:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80150c2:	4618      	mov	r0, r3
 80150c4:	f001 f807 	bl	80160d6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80150c8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80150cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80150d0:	4413      	add	r3, r2
 80150d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80150d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150da:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80150de:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80150e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150e4:	3302      	adds	r3, #2
 80150e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80150ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150ee:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80150f2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80150f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150f8:	3302      	adds	r3, #2
 80150fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80150fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015102:	2218      	movs	r2, #24
 8015104:	2100      	movs	r1, #0
 8015106:	4618      	mov	r0, r3
 8015108:	f000 fff5 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801510c:	233f      	movs	r3, #63	@ 0x3f
 801510e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8015112:	2383      	movs	r3, #131	@ 0x83
 8015114:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015118:	f107 0310 	add.w	r3, r7, #16
 801511c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015120:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015124:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015128:	f107 030f 	add.w	r3, r7, #15
 801512c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015130:	2301      	movs	r3, #1
 8015132:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015136:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801513a:	2100      	movs	r1, #0
 801513c:	4618      	mov	r0, r3
 801513e:	f001 fb69 	bl	8016814 <hci_send_req>
 8015142:	4603      	mov	r3, r0
 8015144:	2b00      	cmp	r3, #0
 8015146:	da01      	bge.n	801514c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8015148:	23ff      	movs	r3, #255	@ 0xff
 801514a:	e004      	b.n	8015156 <aci_gap_set_discoverable+0x1ea>
  return status;
 801514c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015150:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015154:	781b      	ldrb	r3, [r3, #0]
}
 8015156:	4618      	mov	r0, r3
 8015158:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 801515c:	46bd      	mov	sp, r7
 801515e:	bdb0      	pop	{r4, r5, r7, pc}

08015160 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b0cc      	sub	sp, #304	@ 0x130
 8015164:	af00      	add	r7, sp, #0
 8015166:	4602      	mov	r2, r0
 8015168:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801516c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015170:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8015172:	f107 0310 	add.w	r3, r7, #16
 8015176:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801517a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801517e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015182:	2200      	movs	r2, #0
 8015184:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015186:	2300      	movs	r3, #0
 8015188:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 801518c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015190:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015194:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015198:	7812      	ldrb	r2, [r2, #0]
 801519a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801519c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151a0:	3301      	adds	r3, #1
 80151a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80151a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80151aa:	2218      	movs	r2, #24
 80151ac:	2100      	movs	r1, #0
 80151ae:	4618      	mov	r0, r3
 80151b0:	f000 ffa1 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80151b4:	233f      	movs	r3, #63	@ 0x3f
 80151b6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80151ba:	2385      	movs	r3, #133	@ 0x85
 80151bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80151c0:	f107 0310 	add.w	r3, r7, #16
 80151c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80151c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80151d0:	f107 030f 	add.w	r3, r7, #15
 80151d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80151d8:	2301      	movs	r3, #1
 80151da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80151de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80151e2:	2100      	movs	r1, #0
 80151e4:	4618      	mov	r0, r3
 80151e6:	f001 fb15 	bl	8016814 <hci_send_req>
 80151ea:	4603      	mov	r3, r0
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	da01      	bge.n	80151f4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80151f0:	23ff      	movs	r3, #255	@ 0xff
 80151f2:	e004      	b.n	80151fe <aci_gap_set_io_capability+0x9e>
  return status;
 80151f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80151fc:	781b      	ldrb	r3, [r3, #0]
}
 80151fe:	4618      	mov	r0, r3
 8015200:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}

08015208 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8015208:	b5b0      	push	{r4, r5, r7, lr}
 801520a:	b0cc      	sub	sp, #304	@ 0x130
 801520c:	af00      	add	r7, sp, #0
 801520e:	4605      	mov	r5, r0
 8015210:	460c      	mov	r4, r1
 8015212:	4610      	mov	r0, r2
 8015214:	4619      	mov	r1, r3
 8015216:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801521a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801521e:	462a      	mov	r2, r5
 8015220:	701a      	strb	r2, [r3, #0]
 8015222:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015226:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801522a:	4622      	mov	r2, r4
 801522c:	701a      	strb	r2, [r3, #0]
 801522e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015232:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015236:	4602      	mov	r2, r0
 8015238:	701a      	strb	r2, [r3, #0]
 801523a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801523e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015242:	460a      	mov	r2, r1
 8015244:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8015246:	f107 0310 	add.w	r3, r7, #16
 801524a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801524e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015252:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015256:	2200      	movs	r2, #0
 8015258:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801525a:	2300      	movs	r3, #0
 801525c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8015260:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015264:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015268:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801526c:	7812      	ldrb	r2, [r2, #0]
 801526e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015270:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015274:	3301      	adds	r3, #1
 8015276:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 801527a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801527e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015282:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015286:	7812      	ldrb	r2, [r2, #0]
 8015288:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801528a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801528e:	3301      	adds	r3, #1
 8015290:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8015294:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015298:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801529c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80152a0:	7812      	ldrb	r2, [r2, #0]
 80152a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80152a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152a8:	3301      	adds	r3, #1
 80152aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80152ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80152b6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80152ba:	7812      	ldrb	r2, [r2, #0]
 80152bc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80152be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152c2:	3301      	adds	r3, #1
 80152c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80152c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152cc:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80152d0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80152d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152d6:	3301      	adds	r3, #1
 80152d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80152dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152e0:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80152e4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80152e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152ea:	3301      	adds	r3, #1
 80152ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80152f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152f4:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80152f8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80152fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152fe:	3301      	adds	r3, #1
 8015300:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8015304:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015308:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801530c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8015310:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015314:	3304      	adds	r3, #4
 8015316:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 801531a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801531e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8015322:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8015324:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015328:	3301      	adds	r3, #1
 801532a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801532e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015332:	2218      	movs	r2, #24
 8015334:	2100      	movs	r1, #0
 8015336:	4618      	mov	r0, r3
 8015338:	f000 fedd 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801533c:	233f      	movs	r3, #63	@ 0x3f
 801533e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8015342:	2386      	movs	r3, #134	@ 0x86
 8015344:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015348:	f107 0310 	add.w	r3, r7, #16
 801534c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015350:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015354:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015358:	f107 030f 	add.w	r3, r7, #15
 801535c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015360:	2301      	movs	r3, #1
 8015362:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015366:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801536a:	2100      	movs	r1, #0
 801536c:	4618      	mov	r0, r3
 801536e:	f001 fa51 	bl	8016814 <hci_send_req>
 8015372:	4603      	mov	r3, r0
 8015374:	2b00      	cmp	r3, #0
 8015376:	da01      	bge.n	801537c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8015378:	23ff      	movs	r3, #255	@ 0xff
 801537a:	e004      	b.n	8015386 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 801537c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015380:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015384:	781b      	ldrb	r3, [r3, #0]
}
 8015386:	4618      	mov	r0, r3
 8015388:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801538c:	46bd      	mov	sp, r7
 801538e:	bdb0      	pop	{r4, r5, r7, pc}

08015390 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8015390:	b590      	push	{r4, r7, lr}
 8015392:	b0cd      	sub	sp, #308	@ 0x134
 8015394:	af00      	add	r7, sp, #0
 8015396:	4604      	mov	r4, r0
 8015398:	4608      	mov	r0, r1
 801539a:	4611      	mov	r1, r2
 801539c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80153a0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80153a4:	6013      	str	r3, [r2, #0]
 80153a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153aa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80153ae:	4622      	mov	r2, r4
 80153b0:	701a      	strb	r2, [r3, #0]
 80153b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153b6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80153ba:	4602      	mov	r2, r0
 80153bc:	701a      	strb	r2, [r3, #0]
 80153be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153c2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80153c6:	460a      	mov	r2, r1
 80153c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80153ca:	f107 0310 	add.w	r3, r7, #16
 80153ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80153d2:	f107 0308 	add.w	r3, r7, #8
 80153d6:	2207      	movs	r2, #7
 80153d8:	2100      	movs	r1, #0
 80153da:	4618      	mov	r0, r3
 80153dc:	f000 fe8b 	bl	80160f6 <Osal_MemSet>
  int index_input = 0;
 80153e0:	2300      	movs	r3, #0
 80153e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80153e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80153ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80153ee:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80153f2:	7812      	ldrb	r2, [r2, #0]
 80153f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80153f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153fa:	3301      	adds	r3, #1
 80153fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8015400:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015404:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015408:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801540c:	7812      	ldrb	r2, [r2, #0]
 801540e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015410:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015414:	3301      	adds	r3, #1
 8015416:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 801541a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801541e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015422:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015426:	7812      	ldrb	r2, [r2, #0]
 8015428:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801542a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801542e:	3301      	adds	r3, #1
 8015430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015434:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015438:	2218      	movs	r2, #24
 801543a:	2100      	movs	r1, #0
 801543c:	4618      	mov	r0, r3
 801543e:	f000 fe5a 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015442:	233f      	movs	r3, #63	@ 0x3f
 8015444:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8015448:	238a      	movs	r3, #138	@ 0x8a
 801544a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801544e:	f107 0310 	add.w	r3, r7, #16
 8015452:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015456:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801545a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801545e:	f107 0308 	add.w	r3, r7, #8
 8015462:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8015466:	2307      	movs	r3, #7
 8015468:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801546c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015470:	2100      	movs	r1, #0
 8015472:	4618      	mov	r0, r3
 8015474:	f001 f9ce 	bl	8016814 <hci_send_req>
 8015478:	4603      	mov	r3, r0
 801547a:	2b00      	cmp	r3, #0
 801547c:	da01      	bge.n	8015482 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 801547e:	23ff      	movs	r3, #255	@ 0xff
 8015480:	e02e      	b.n	80154e0 <aci_gap_init+0x150>
  if ( resp.Status )
 8015482:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015486:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801548a:	781b      	ldrb	r3, [r3, #0]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d005      	beq.n	801549c <aci_gap_init+0x10c>
    return resp.Status;
 8015490:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015494:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015498:	781b      	ldrb	r3, [r3, #0]
 801549a:	e021      	b.n	80154e0 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 801549c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80154a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80154a8:	b29a      	uxth	r2, r3
 80154aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80154b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80154be:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80154c2:	b29a      	uxth	r2, r3
 80154c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80154c8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80154ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80154d2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80154d6:	b29a      	uxth	r2, r3
 80154d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80154dc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80154de:	2300      	movs	r3, #0
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd90      	pop	{r4, r7, pc}

080154ea <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	b0cc      	sub	sp, #304	@ 0x130
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	4602      	mov	r2, r0
 80154f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80154fa:	6019      	str	r1, [r3, #0]
 80154fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015500:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015504:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8015506:	f107 0310 	add.w	r3, r7, #16
 801550a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801550e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015512:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015516:	2200      	movs	r2, #0
 8015518:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801551a:	2300      	movs	r3, #0
 801551c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8015520:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015524:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015528:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801552c:	7812      	ldrb	r2, [r2, #0]
 801552e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015530:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015534:	3301      	adds	r3, #1
 8015536:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 801553a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801553e:	1c58      	adds	r0, r3, #1
 8015540:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015544:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015548:	781a      	ldrb	r2, [r3, #0]
 801554a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801554e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015552:	6819      	ldr	r1, [r3, #0]
 8015554:	f000 fdbf 	bl	80160d6 <Osal_MemCpy>
  index_input += AdvDataLen;
 8015558:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801555c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015566:	4413      	add	r3, r2
 8015568:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801556c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015570:	2218      	movs	r2, #24
 8015572:	2100      	movs	r1, #0
 8015574:	4618      	mov	r0, r3
 8015576:	f000 fdbe 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801557a:	233f      	movs	r3, #63	@ 0x3f
 801557c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8015580:	238e      	movs	r3, #142	@ 0x8e
 8015582:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015586:	f107 0310 	add.w	r3, r7, #16
 801558a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801558e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015592:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015596:	f107 030f 	add.w	r3, r7, #15
 801559a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801559e:	2301      	movs	r3, #1
 80155a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80155a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80155a8:	2100      	movs	r1, #0
 80155aa:	4618      	mov	r0, r3
 80155ac:	f001 f932 	bl	8016814 <hci_send_req>
 80155b0:	4603      	mov	r3, r0
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	da01      	bge.n	80155ba <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80155b6:	23ff      	movs	r3, #255	@ 0xff
 80155b8:	e004      	b.n	80155c4 <aci_gap_update_adv_data+0xda>
  return status;
 80155ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80155be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80155c2:	781b      	ldrb	r3, [r3, #0]
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b088      	sub	sp, #32
 80155d2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80155d4:	2300      	movs	r3, #0
 80155d6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80155d8:	f107 0308 	add.w	r3, r7, #8
 80155dc:	2218      	movs	r2, #24
 80155de:	2100      	movs	r1, #0
 80155e0:	4618      	mov	r0, r3
 80155e2:	f000 fd88 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80155e6:	233f      	movs	r3, #63	@ 0x3f
 80155e8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80155ea:	2392      	movs	r3, #146	@ 0x92
 80155ec:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80155ee:	1dfb      	adds	r3, r7, #7
 80155f0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80155f2:	2301      	movs	r3, #1
 80155f4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80155f6:	f107 0308 	add.w	r3, r7, #8
 80155fa:	2100      	movs	r1, #0
 80155fc:	4618      	mov	r0, r3
 80155fe:	f001 f909 	bl	8016814 <hci_send_req>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	da01      	bge.n	801560c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015608:	23ff      	movs	r3, #255	@ 0xff
 801560a:	e000      	b.n	801560e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 801560c:	79fb      	ldrb	r3, [r7, #7]
}
 801560e:	4618      	mov	r0, r3
 8015610:	3720      	adds	r7, #32
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}

08015616 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b088      	sub	sp, #32
 801561a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801561c:	2300      	movs	r3, #0
 801561e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015620:	f107 0308 	add.w	r3, r7, #8
 8015624:	2218      	movs	r2, #24
 8015626:	2100      	movs	r1, #0
 8015628:	4618      	mov	r0, r3
 801562a:	f000 fd64 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801562e:	233f      	movs	r3, #63	@ 0x3f
 8015630:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8015632:	f240 1301 	movw	r3, #257	@ 0x101
 8015636:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015638:	1dfb      	adds	r3, r7, #7
 801563a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801563c:	2301      	movs	r3, #1
 801563e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015640:	f107 0308 	add.w	r3, r7, #8
 8015644:	2100      	movs	r1, #0
 8015646:	4618      	mov	r0, r3
 8015648:	f001 f8e4 	bl	8016814 <hci_send_req>
 801564c:	4603      	mov	r3, r0
 801564e:	2b00      	cmp	r3, #0
 8015650:	da01      	bge.n	8015656 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8015652:	23ff      	movs	r3, #255	@ 0xff
 8015654:	e000      	b.n	8015658 <aci_gatt_init+0x42>
  return status;
 8015656:	79fb      	ldrb	r3, [r7, #7]
}
 8015658:	4618      	mov	r0, r3
 801565a:	3720      	adds	r7, #32
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8015660:	b590      	push	{r4, r7, lr}
 8015662:	b0cf      	sub	sp, #316	@ 0x13c
 8015664:	af00      	add	r7, sp, #0
 8015666:	4604      	mov	r4, r0
 8015668:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 801566c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8015670:	6001      	str	r1, [r0, #0]
 8015672:	4610      	mov	r0, r2
 8015674:	4619      	mov	r1, r3
 8015676:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801567a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801567e:	4622      	mov	r2, r4
 8015680:	701a      	strb	r2, [r3, #0]
 8015682:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015686:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801568a:	4602      	mov	r2, r0
 801568c:	701a      	strb	r2, [r3, #0]
 801568e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015692:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015696:	460a      	mov	r2, r1
 8015698:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801569a:	f107 0310 	add.w	r3, r7, #16
 801569e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80156a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156a6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	d00a      	beq.n	80156c6 <aci_gatt_add_service+0x66>
 80156b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156b4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80156b8:	781b      	ldrb	r3, [r3, #0]
 80156ba:	2b02      	cmp	r3, #2
 80156bc:	d101      	bne.n	80156c2 <aci_gatt_add_service+0x62>
 80156be:	2311      	movs	r3, #17
 80156c0:	e002      	b.n	80156c8 <aci_gatt_add_service+0x68>
 80156c2:	2301      	movs	r3, #1
 80156c4:	e000      	b.n	80156c8 <aci_gatt_add_service+0x68>
 80156c6:	2303      	movs	r3, #3
 80156c8:	f107 0210 	add.w	r2, r7, #16
 80156cc:	4413      	add	r3, r2
 80156ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80156d2:	f107 030c 	add.w	r3, r7, #12
 80156d6:	2203      	movs	r2, #3
 80156d8:	2100      	movs	r1, #0
 80156da:	4618      	mov	r0, r3
 80156dc:	f000 fd0b 	bl	80160f6 <Osal_MemSet>
  int index_input = 0;
 80156e0:	2300      	movs	r3, #0
 80156e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80156e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80156ea:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80156ee:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80156f2:	7812      	ldrb	r2, [r2, #0]
 80156f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80156f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156fa:	3301      	adds	r3, #1
 80156fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8015700:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015704:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	2b01      	cmp	r3, #1
 801570c:	d002      	beq.n	8015714 <aci_gatt_add_service+0xb4>
 801570e:	2b02      	cmp	r3, #2
 8015710:	d004      	beq.n	801571c <aci_gatt_add_service+0xbc>
 8015712:	e007      	b.n	8015724 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8015714:	2302      	movs	r3, #2
 8015716:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 801571a:	e005      	b.n	8015728 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 801571c:	2310      	movs	r3, #16
 801571e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8015722:	e001      	b.n	8015728 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8015724:	2397      	movs	r3, #151	@ 0x97
 8015726:	e06c      	b.n	8015802 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8015728:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801572c:	1c58      	adds	r0, r3, #1
 801572e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8015732:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015736:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801573a:	6819      	ldr	r1, [r3, #0]
 801573c:	f000 fccb 	bl	80160d6 <Osal_MemCpy>
    index_input += size;
 8015740:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8015744:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015748:	4413      	add	r3, r2
 801574a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 801574e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015752:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015756:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801575a:	7812      	ldrb	r2, [r2, #0]
 801575c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801575e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015762:	3301      	adds	r3, #1
 8015764:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8015768:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801576c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015770:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8015774:	7812      	ldrb	r2, [r2, #0]
 8015776:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8015778:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801577c:	3301      	adds	r3, #1
 801577e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015782:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015786:	2218      	movs	r2, #24
 8015788:	2100      	movs	r1, #0
 801578a:	4618      	mov	r0, r3
 801578c:	f000 fcb3 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015790:	233f      	movs	r3, #63	@ 0x3f
 8015792:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8015796:	f44f 7381 	mov.w	r3, #258	@ 0x102
 801579a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801579e:	f107 0310 	add.w	r3, r7, #16
 80157a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80157a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80157ae:	f107 030c 	add.w	r3, r7, #12
 80157b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80157b6:	2303      	movs	r3, #3
 80157b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80157bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80157c0:	2100      	movs	r1, #0
 80157c2:	4618      	mov	r0, r3
 80157c4:	f001 f826 	bl	8016814 <hci_send_req>
 80157c8:	4603      	mov	r3, r0
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	da01      	bge.n	80157d2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80157ce:	23ff      	movs	r3, #255	@ 0xff
 80157d0:	e017      	b.n	8015802 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80157d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d005      	beq.n	80157ec <aci_gatt_add_service+0x18c>
    return resp.Status;
 80157e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80157e8:	781b      	ldrb	r3, [r3, #0]
 80157ea:	e00a      	b.n	8015802 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80157ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80157f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80157f8:	b29a      	uxth	r2, r3
 80157fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80157fe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015800:	2300      	movs	r3, #0
}
 8015802:	4618      	mov	r0, r3
 8015804:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8015808:	46bd      	mov	sp, r7
 801580a:	bd90      	pop	{r4, r7, pc}

0801580c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 801580c:	b590      	push	{r4, r7, lr}
 801580e:	b0d1      	sub	sp, #324	@ 0x144
 8015810:	af00      	add	r7, sp, #0
 8015812:	4604      	mov	r4, r0
 8015814:	4608      	mov	r0, r1
 8015816:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801581a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 801581e:	600a      	str	r2, [r1, #0]
 8015820:	4619      	mov	r1, r3
 8015822:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015826:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801582a:	4622      	mov	r2, r4
 801582c:	801a      	strh	r2, [r3, #0]
 801582e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015832:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015836:	4602      	mov	r2, r0
 8015838:	701a      	strb	r2, [r3, #0]
 801583a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801583e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8015842:	460a      	mov	r2, r1
 8015844:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8015846:	f107 0318 	add.w	r3, r7, #24
 801584a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 801584e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015852:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015856:	781b      	ldrb	r3, [r3, #0]
 8015858:	2b01      	cmp	r3, #1
 801585a:	d00a      	beq.n	8015872 <aci_gatt_add_char+0x66>
 801585c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015860:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015864:	781b      	ldrb	r3, [r3, #0]
 8015866:	2b02      	cmp	r3, #2
 8015868:	d101      	bne.n	801586e <aci_gatt_add_char+0x62>
 801586a:	2313      	movs	r3, #19
 801586c:	e002      	b.n	8015874 <aci_gatt_add_char+0x68>
 801586e:	2303      	movs	r3, #3
 8015870:	e000      	b.n	8015874 <aci_gatt_add_char+0x68>
 8015872:	2305      	movs	r3, #5
 8015874:	f107 0218 	add.w	r2, r7, #24
 8015878:	4413      	add	r3, r2
 801587a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801587e:	f107 0314 	add.w	r3, r7, #20
 8015882:	2203      	movs	r2, #3
 8015884:	2100      	movs	r1, #0
 8015886:	4618      	mov	r0, r3
 8015888:	f000 fc35 	bl	80160f6 <Osal_MemSet>
  int index_input = 0;
 801588c:	2300      	movs	r3, #0
 801588e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8015892:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015896:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801589a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801589e:	8812      	ldrh	r2, [r2, #0]
 80158a0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80158a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80158a6:	3302      	adds	r3, #2
 80158a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80158ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80158b0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80158b4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80158b8:	7812      	ldrb	r2, [r2, #0]
 80158ba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80158bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80158c0:	3301      	adds	r3, #1
 80158c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80158c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158ca:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	d002      	beq.n	80158da <aci_gatt_add_char+0xce>
 80158d4:	2b02      	cmp	r3, #2
 80158d6:	d004      	beq.n	80158e2 <aci_gatt_add_char+0xd6>
 80158d8:	e007      	b.n	80158ea <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80158da:	2302      	movs	r3, #2
 80158dc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80158e0:	e005      	b.n	80158ee <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80158e2:	2310      	movs	r3, #16
 80158e4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80158e8:	e001      	b.n	80158ee <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80158ea:	2397      	movs	r3, #151	@ 0x97
 80158ec:	e091      	b.n	8015a12 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80158ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80158f2:	1cd8      	adds	r0, r3, #3
 80158f4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80158f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158fc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015900:	6819      	ldr	r1, [r3, #0]
 8015902:	f000 fbe8 	bl	80160d6 <Osal_MemCpy>
    index_input += size;
 8015906:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801590a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801590e:	4413      	add	r3, r2
 8015910:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8015914:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015918:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801591c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8015920:	8812      	ldrh	r2, [r2, #0]
 8015922:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8015924:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015928:	3302      	adds	r3, #2
 801592a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 801592e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015932:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8015936:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8015938:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801593c:	3301      	adds	r3, #1
 801593e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8015942:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015946:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 801594a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 801594c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015950:	3301      	adds	r3, #1
 8015952:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8015956:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801595a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 801595e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8015960:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015964:	3301      	adds	r3, #1
 8015966:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 801596a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801596e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8015972:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8015974:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015978:	3301      	adds	r3, #1
 801597a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 801597e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015982:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8015986:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8015988:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801598c:	3301      	adds	r3, #1
 801598e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015992:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015996:	2218      	movs	r2, #24
 8015998:	2100      	movs	r1, #0
 801599a:	4618      	mov	r0, r3
 801599c:	f000 fbab 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80159a0:	233f      	movs	r3, #63	@ 0x3f
 80159a2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80159a6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80159aa:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80159ae:	f107 0318 	add.w	r3, r7, #24
 80159b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80159b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80159be:	f107 0314 	add.w	r3, r7, #20
 80159c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80159c6:	2303      	movs	r3, #3
 80159c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80159cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80159d0:	2100      	movs	r1, #0
 80159d2:	4618      	mov	r0, r3
 80159d4:	f000 ff1e 	bl	8016814 <hci_send_req>
 80159d8:	4603      	mov	r3, r0
 80159da:	2b00      	cmp	r3, #0
 80159dc:	da01      	bge.n	80159e2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80159de:	23ff      	movs	r3, #255	@ 0xff
 80159e0:	e017      	b.n	8015a12 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80159e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80159e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80159ea:	781b      	ldrb	r3, [r3, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d005      	beq.n	80159fc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80159f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80159f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	e00a      	b.n	8015a12 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80159fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015a00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015a04:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015a08:	b29a      	uxth	r2, r3
 8015a0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8015a0e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015a10:	2300      	movs	r3, #0
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd90      	pop	{r4, r7, pc}

08015a1c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8015a1c:	b5b0      	push	{r4, r5, r7, lr}
 8015a1e:	b0cc      	sub	sp, #304	@ 0x130
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	4605      	mov	r5, r0
 8015a24:	460c      	mov	r4, r1
 8015a26:	4610      	mov	r0, r2
 8015a28:	4619      	mov	r1, r3
 8015a2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a2e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015a32:	462a      	mov	r2, r5
 8015a34:	801a      	strh	r2, [r3, #0]
 8015a36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015a3e:	4622      	mov	r2, r4
 8015a40:	801a      	strh	r2, [r3, #0]
 8015a42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a46:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	701a      	strb	r2, [r3, #0]
 8015a4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a52:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015a56:	460a      	mov	r2, r1
 8015a58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8015a5a:	f107 0310 	add.w	r3, r7, #16
 8015a5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015a62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8015a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015a80:	8812      	ldrh	r2, [r2, #0]
 8015a82:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a88:	3302      	adds	r3, #2
 8015a8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8015a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a96:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8015a9a:	8812      	ldrh	r2, [r2, #0]
 8015a9c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8015a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015aa2:	3302      	adds	r3, #2
 8015aa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8015aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015aac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015ab0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8015ab4:	7812      	ldrb	r2, [r2, #0]
 8015ab6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8015ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015abc:	3301      	adds	r3, #1
 8015abe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8015ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ac6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015aca:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8015ace:	7812      	ldrb	r2, [r2, #0]
 8015ad0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8015ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ad6:	3301      	adds	r3, #1
 8015ad8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8015adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ae0:	1d98      	adds	r0, r3, #6
 8015ae2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ae6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015aea:	781b      	ldrb	r3, [r3, #0]
 8015aec:	461a      	mov	r2, r3
 8015aee:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8015af2:	f000 faf0 	bl	80160d6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8015af6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015afa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015b04:	4413      	add	r3, r2
 8015b06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015b0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b0e:	2218      	movs	r2, #24
 8015b10:	2100      	movs	r1, #0
 8015b12:	4618      	mov	r0, r3
 8015b14:	f000 faef 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015b18:	233f      	movs	r3, #63	@ 0x3f
 8015b1a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8015b1e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8015b22:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015b26:	f107 0310 	add.w	r3, r7, #16
 8015b2a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015b36:	f107 030f 	add.w	r3, r7, #15
 8015b3a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015b3e:	2301      	movs	r3, #1
 8015b40:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b48:	2100      	movs	r1, #0
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f000 fe62 	bl	8016814 <hci_send_req>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	da01      	bge.n	8015b5a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8015b56:	23ff      	movs	r3, #255	@ 0xff
 8015b58:	e004      	b.n	8015b64 <aci_gatt_update_char_value+0x148>
  return status;
 8015b5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b5e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b62:	781b      	ldrb	r3, [r3, #0]
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bdb0      	pop	{r4, r5, r7, pc}

08015b6e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8015b6e:	b580      	push	{r7, lr}
 8015b70:	b0cc      	sub	sp, #304	@ 0x130
 8015b72:	af00      	add	r7, sp, #0
 8015b74:	4602      	mov	r2, r0
 8015b76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b7a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b7e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8015b80:	f107 0310 	add.w	r3, r7, #16
 8015b84:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015b88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b90:	2200      	movs	r2, #0
 8015b92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015b94:	2300      	movs	r3, #0
 8015b96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015ba2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015ba6:	8812      	ldrh	r2, [r2, #0]
 8015ba8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bae:	3302      	adds	r3, #2
 8015bb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015bb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015bb8:	2218      	movs	r2, #24
 8015bba:	2100      	movs	r1, #0
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f000 fa9a 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015bc2:	233f      	movs	r3, #63	@ 0x3f
 8015bc4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8015bc8:	f240 1325 	movw	r3, #293	@ 0x125
 8015bcc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015bd0:	f107 0310 	add.w	r3, r7, #16
 8015bd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015be0:	f107 030f 	add.w	r3, r7, #15
 8015be4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015be8:	2301      	movs	r3, #1
 8015bea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015bee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015bf2:	2100      	movs	r1, #0
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f000 fe0d 	bl	8016814 <hci_send_req>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	da01      	bge.n	8015c04 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8015c00:	23ff      	movs	r3, #255	@ 0xff
 8015c02:	e004      	b.n	8015c0e <aci_gatt_confirm_indication+0xa0>
  return status;
 8015c04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c0c:	781b      	ldrb	r3, [r3, #0]
}
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bd80      	pop	{r7, pc}

08015c18 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b0cc      	sub	sp, #304	@ 0x130
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015c26:	601a      	str	r2, [r3, #0]
 8015c28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c2c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015c30:	4602      	mov	r2, r0
 8015c32:	701a      	strb	r2, [r3, #0]
 8015c34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c38:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015c3c:	460a      	mov	r2, r1
 8015c3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8015c40:	f107 0310 	add.w	r3, r7, #16
 8015c44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015c48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c4c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c50:	2200      	movs	r2, #0
 8015c52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015c54:	2300      	movs	r3, #0
 8015c56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8015c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c62:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015c66:	7812      	ldrb	r2, [r2, #0]
 8015c68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015c6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c6e:	3301      	adds	r3, #1
 8015c70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8015c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015c80:	7812      	ldrb	r2, [r2, #0]
 8015c82:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015c84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c88:	3301      	adds	r3, #1
 8015c8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8015c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c92:	1c98      	adds	r0, r3, #2
 8015c94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c98:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015c9c:	781a      	ldrb	r2, [r3, #0]
 8015c9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ca2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015ca6:	6819      	ldr	r1, [r3, #0]
 8015ca8:	f000 fa15 	bl	80160d6 <Osal_MemCpy>
  index_input += Length;
 8015cac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015cb0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015cba:	4413      	add	r3, r2
 8015cbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015cc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015cc4:	2218      	movs	r2, #24
 8015cc6:	2100      	movs	r1, #0
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f000 fa14 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015cce:	233f      	movs	r3, #63	@ 0x3f
 8015cd0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8015cd4:	230c      	movs	r3, #12
 8015cd6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015cda:	f107 0310 	add.w	r3, r7, #16
 8015cde:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ce6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015cea:	f107 030f 	add.w	r3, r7, #15
 8015cee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015cf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015cfc:	2100      	movs	r1, #0
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f000 fd88 	bl	8016814 <hci_send_req>
 8015d04:	4603      	mov	r3, r0
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	da01      	bge.n	8015d0e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8015d0a:	23ff      	movs	r3, #255	@ 0xff
 8015d0c:	e004      	b.n	8015d18 <aci_hal_write_config_data+0x100>
  return status;
 8015d0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d12:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015d16:	781b      	ldrb	r3, [r3, #0]
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015d22:	b580      	push	{r7, lr}
 8015d24:	b0cc      	sub	sp, #304	@ 0x130
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	4602      	mov	r2, r0
 8015d2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d2e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015d32:	701a      	strb	r2, [r3, #0]
 8015d34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d38:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015d3c:	460a      	mov	r2, r1
 8015d3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015d40:	f107 0310 	add.w	r3, r7, #16
 8015d44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015d48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d4c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015d50:	2200      	movs	r2, #0
 8015d52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015d54:	2300      	movs	r3, #0
 8015d56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8015d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015d62:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015d66:	7812      	ldrb	r2, [r2, #0]
 8015d68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d6e:	3301      	adds	r3, #1
 8015d70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8015d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015d7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015d80:	7812      	ldrb	r2, [r2, #0]
 8015d82:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d88:	3301      	adds	r3, #1
 8015d8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015d8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015d92:	2218      	movs	r2, #24
 8015d94:	2100      	movs	r1, #0
 8015d96:	4618      	mov	r0, r3
 8015d98:	f000 f9ad 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015d9c:	233f      	movs	r3, #63	@ 0x3f
 8015d9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8015da2:	230f      	movs	r3, #15
 8015da4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015da8:	f107 0310 	add.w	r3, r7, #16
 8015dac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015db0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015db4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015db8:	f107 030f 	add.w	r3, r7, #15
 8015dbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015dc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015dca:	2100      	movs	r1, #0
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f000 fd21 	bl	8016814 <hci_send_req>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	da01      	bge.n	8015ddc <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015dd8:	23ff      	movs	r3, #255	@ 0xff
 8015dda:	e004      	b.n	8015de6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015ddc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015de0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015de4:	781b      	ldrb	r3, [r3, #0]
}
 8015de6:	4618      	mov	r0, r3
 8015de8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015dec:	46bd      	mov	sp, r7
 8015dee:	bd80      	pop	{r7, pc}

08015df0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b0cc      	sub	sp, #304	@ 0x130
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	4602      	mov	r2, r0
 8015df8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015dfc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015e00:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015e02:	f107 0310 	add.w	r3, r7, #16
 8015e06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015e0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e0e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015e12:	2200      	movs	r2, #0
 8015e14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015e16:	2300      	movs	r3, #0
 8015e18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015e20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015e24:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015e28:	8812      	ldrh	r2, [r2, #0]
 8015e2a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e30:	3302      	adds	r3, #2
 8015e32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015e36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e3a:	2218      	movs	r2, #24
 8015e3c:	2100      	movs	r1, #0
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f000 f959 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8015e44:	233f      	movs	r3, #63	@ 0x3f
 8015e46:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8015e4a:	2318      	movs	r3, #24
 8015e4c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015e50:	f107 0310 	add.w	r3, r7, #16
 8015e54:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e5c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015e60:	f107 030f 	add.w	r3, r7, #15
 8015e64:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015e68:	2301      	movs	r3, #1
 8015e6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015e6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e72:	2100      	movs	r1, #0
 8015e74:	4618      	mov	r0, r3
 8015e76:	f000 fccd 	bl	8016814 <hci_send_req>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	da01      	bge.n	8015e84 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015e80:	23ff      	movs	r3, #255	@ 0xff
 8015e82:	e004      	b.n	8015e8e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015e84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e88:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015e8c:	781b      	ldrb	r3, [r3, #0]
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bd80      	pop	{r7, pc}

08015e98 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b088      	sub	sp, #32
 8015e9c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015ea2:	f107 0308 	add.w	r3, r7, #8
 8015ea6:	2218      	movs	r2, #24
 8015ea8:	2100      	movs	r1, #0
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f000 f923 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x03;
 8015eb0:	2303      	movs	r3, #3
 8015eb2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015eb4:	2303      	movs	r3, #3
 8015eb6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015eb8:	1dfb      	adds	r3, r7, #7
 8015eba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015ec0:	f107 0308 	add.w	r3, r7, #8
 8015ec4:	2100      	movs	r1, #0
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f000 fca4 	bl	8016814 <hci_send_req>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	da01      	bge.n	8015ed6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015ed2:	23ff      	movs	r3, #255	@ 0xff
 8015ed4:	e000      	b.n	8015ed8 <hci_reset+0x40>
  return status;
 8015ed6:	79fb      	ldrb	r3, [r7, #7]
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	3720      	adds	r7, #32
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}

08015ee0 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b0ce      	sub	sp, #312	@ 0x138
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015eea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015eee:	6019      	str	r1, [r3, #0]
 8015ef0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015ef4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015ef8:	601a      	str	r2, [r3, #0]
 8015efa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015efe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015f02:	4602      	mov	r2, r0
 8015f04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8015f06:	f107 0318 	add.w	r3, r7, #24
 8015f0a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015f0e:	f107 0310 	add.w	r3, r7, #16
 8015f12:	2205      	movs	r2, #5
 8015f14:	2100      	movs	r1, #0
 8015f16:	4618      	mov	r0, r3
 8015f18:	f000 f8ed 	bl	80160f6 <Osal_MemSet>
  int index_input = 0;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 8015f22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015f26:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015f2a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015f2e:	8812      	ldrh	r2, [r2, #0]
 8015f30:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015f32:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015f36:	3302      	adds	r3, #2
 8015f38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015f3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015f40:	2218      	movs	r2, #24
 8015f42:	2100      	movs	r1, #0
 8015f44:	4618      	mov	r0, r3
 8015f46:	f000 f8d6 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x08;
 8015f4a:	2308      	movs	r3, #8
 8015f4c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 8015f50:	2330      	movs	r3, #48	@ 0x30
 8015f52:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8015f56:	f107 0318 	add.w	r3, r7, #24
 8015f5a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8015f5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015f62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8015f66:	f107 0310 	add.w	r3, r7, #16
 8015f6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8015f6e:	2305      	movs	r3, #5
 8015f70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015f74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015f78:	2100      	movs	r1, #0
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	f000 fc4a 	bl	8016814 <hci_send_req>
 8015f80:	4603      	mov	r3, r0
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	da01      	bge.n	8015f8a <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8015f86:	23ff      	movs	r3, #255	@ 0xff
 8015f88:	e023      	b.n	8015fd2 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 8015f8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015f92:	781b      	ldrb	r3, [r3, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d005      	beq.n	8015fa4 <hci_le_read_phy+0xc4>
    return resp.Status;
 8015f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f9c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	e016      	b.n	8015fd2 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8015fa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015fa8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015fac:	78da      	ldrb	r2, [r3, #3]
 8015fae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015fb2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8015fba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015fbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015fc2:	791a      	ldrb	r2, [r3, #4]
 8015fc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015fc8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015fd0:	2300      	movs	r3, #0
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015fdc:	b590      	push	{r4, r7, lr}
 8015fde:	b0cd      	sub	sp, #308	@ 0x134
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	4604      	mov	r4, r0
 8015fe4:	4608      	mov	r0, r1
 8015fe6:	4611      	mov	r1, r2
 8015fe8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015fec:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015ff0:	4622      	mov	r2, r4
 8015ff2:	701a      	strb	r2, [r3, #0]
 8015ff4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ff8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015ffc:	4602      	mov	r2, r0
 8015ffe:	701a      	strb	r2, [r3, #0]
 8016000:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016004:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8016008:	460a      	mov	r2, r1
 801600a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 801600c:	f107 0310 	add.w	r3, r7, #16
 8016010:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016014:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016018:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801601c:	2200      	movs	r2, #0
 801601e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016020:	2300      	movs	r3, #0
 8016022:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8016026:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801602a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801602e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8016032:	7812      	ldrb	r2, [r2, #0]
 8016034:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016036:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801603a:	3301      	adds	r3, #1
 801603c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8016040:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016044:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016048:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801604c:	7812      	ldrb	r2, [r2, #0]
 801604e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8016050:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016054:	3301      	adds	r3, #1
 8016056:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 801605a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801605e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016062:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8016066:	7812      	ldrb	r2, [r2, #0]
 8016068:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801606a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801606e:	3301      	adds	r3, #1
 8016070:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016074:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016078:	2218      	movs	r2, #24
 801607a:	2100      	movs	r1, #0
 801607c:	4618      	mov	r0, r3
 801607e:	f000 f83a 	bl	80160f6 <Osal_MemSet>
  rq.ogf = 0x08;
 8016082:	2308      	movs	r3, #8
 8016084:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8016088:	2331      	movs	r3, #49	@ 0x31
 801608a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801608e:	f107 0310 	add.w	r3, r7, #16
 8016092:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016096:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801609a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801609e:	f107 030f 	add.w	r3, r7, #15
 80160a2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80160a6:	2301      	movs	r3, #1
 80160a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80160ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80160b0:	2100      	movs	r1, #0
 80160b2:	4618      	mov	r0, r3
 80160b4:	f000 fbae 	bl	8016814 <hci_send_req>
 80160b8:	4603      	mov	r3, r0
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	da01      	bge.n	80160c2 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80160be:	23ff      	movs	r3, #255	@ 0xff
 80160c0:	e004      	b.n	80160cc <hci_le_set_default_phy+0xf0>
  return status;
 80160c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80160c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80160ca:	781b      	ldrb	r3, [r3, #0]
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd90      	pop	{r4, r7, pc}

080160d6 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80160d6:	b580      	push	{r7, lr}
 80160d8:	b084      	sub	sp, #16
 80160da:	af00      	add	r7, sp, #0
 80160dc:	60f8      	str	r0, [r7, #12]
 80160de:	60b9      	str	r1, [r7, #8]
 80160e0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80160e2:	687a      	ldr	r2, [r7, #4]
 80160e4:	68b9      	ldr	r1, [r7, #8]
 80160e6:	68f8      	ldr	r0, [r7, #12]
 80160e8:	f005 fcab 	bl	801ba42 <memcpy>
 80160ec:	4603      	mov	r3, r0
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	3710      	adds	r7, #16
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}

080160f6 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80160f6:	b580      	push	{r7, lr}
 80160f8:	b084      	sub	sp, #16
 80160fa:	af00      	add	r7, sp, #0
 80160fc:	60f8      	str	r0, [r7, #12]
 80160fe:	60b9      	str	r1, [r7, #8]
 8016100:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8016102:	687a      	ldr	r2, [r7, #4]
 8016104:	68b9      	ldr	r1, [r7, #8]
 8016106:	68f8      	ldr	r0, [r7, #12]
 8016108:	f005 fb7f 	bl	801b80a <memset>
 801610c:	4603      	mov	r3, r0
}
 801610e:	4618      	mov	r0, r3
 8016110:	3710      	adds	r7, #16
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
	...

08016118 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b08a      	sub	sp, #40	@ 0x28
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8016120:	2300      	movs	r3, #0
 8016122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	3301      	adds	r3, #1
 801612a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 801612c:	6a3b      	ldr	r3, [r7, #32]
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	2bff      	cmp	r3, #255	@ 0xff
 8016132:	d14c      	bne.n	80161ce <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8016134:	6a3b      	ldr	r3, [r7, #32]
 8016136:	3302      	adds	r3, #2
 8016138:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 801613a:	69fb      	ldr	r3, [r7, #28]
 801613c:	881b      	ldrh	r3, [r3, #0]
 801613e:	b29b      	uxth	r3, r3
 8016140:	461a      	mov	r2, r3
 8016142:	f640 4301 	movw	r3, #3073	@ 0xc01
 8016146:	429a      	cmp	r2, r3
 8016148:	d13d      	bne.n	80161c6 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 801614a:	69fb      	ldr	r3, [r7, #28]
 801614c:	3302      	adds	r3, #2
 801614e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8016150:	69bb      	ldr	r3, [r7, #24]
 8016152:	885b      	ldrh	r3, [r3, #2]
 8016154:	b29b      	uxth	r3, r3
 8016156:	461a      	mov	r2, r3
 8016158:	4b20      	ldr	r3, [pc, #128]	@ (80161dc <PeerToPeer_Event_Handler+0xc4>)
 801615a:	889b      	ldrh	r3, [r3, #4]
 801615c:	3302      	adds	r3, #2
 801615e:	429a      	cmp	r2, r3
 8016160:	d118      	bne.n	8016194 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8016162:	2301      	movs	r3, #1
 8016164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8016168:	69bb      	ldr	r3, [r7, #24]
 801616a:	7a1b      	ldrb	r3, [r3, #8]
 801616c:	f003 0301 	and.w	r3, r3, #1
 8016170:	2b00      	cmp	r3, #0
 8016172:	d007      	beq.n	8016184 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8016174:	2300      	movs	r3, #0
 8016176:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8016178:	f107 0308 	add.w	r3, r7, #8
 801617c:	4618      	mov	r0, r3
 801617e:	f002 f99d 	bl	80184bc <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8016182:	e022      	b.n	80161ca <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8016184:	2301      	movs	r3, #1
 8016186:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8016188:	f107 0308 	add.w	r3, r7, #8
 801618c:	4618      	mov	r0, r3
 801618e:	f002 f995 	bl	80184bc <P2PS_STM_App_Notification>
        break;
 8016192:	e01a      	b.n	80161ca <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8016194:	69bb      	ldr	r3, [r7, #24]
 8016196:	885b      	ldrh	r3, [r3, #2]
 8016198:	b29b      	uxth	r3, r3
 801619a:	461a      	mov	r2, r3
 801619c:	4b0f      	ldr	r3, [pc, #60]	@ (80161dc <PeerToPeer_Event_Handler+0xc4>)
 801619e:	885b      	ldrh	r3, [r3, #2]
 80161a0:	3301      	adds	r3, #1
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d111      	bne.n	80161ca <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80161a6:	2303      	movs	r3, #3
 80161a8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80161aa:	69bb      	ldr	r3, [r7, #24]
 80161ac:	88db      	ldrh	r3, [r3, #6]
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	b2db      	uxtb	r3, r3
 80161b2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80161b4:	69bb      	ldr	r3, [r7, #24]
 80161b6:	3308      	adds	r3, #8
 80161b8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80161ba:	f107 0308 	add.w	r3, r7, #8
 80161be:	4618      	mov	r0, r3
 80161c0:	f002 f97c 	bl	80184bc <P2PS_STM_App_Notification>
        break;
 80161c4:	e001      	b.n	80161ca <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 80161c6:	bf00      	nop
 80161c8:	e002      	b.n	80161d0 <PeerToPeer_Event_Handler+0xb8>
        break;
 80161ca:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80161cc:	e000      	b.n	80161d0 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 80161ce:	bf00      	nop
  }

  return(return_value);
 80161d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80161d4:	4618      	mov	r0, r3
 80161d6:	3728      	adds	r7, #40	@ 0x28
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}
 80161dc:	20000320 	.word	0x20000320

080161e0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b08a      	sub	sp, #40	@ 0x28
 80161e4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80161e6:	484a      	ldr	r0, [pc, #296]	@ (8016310 <P2PS_STM_Init+0x130>)
 80161e8:	f000 f94a 	bl	8016480 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80161ec:	238f      	movs	r3, #143	@ 0x8f
 80161ee:	703b      	strb	r3, [r7, #0]
 80161f0:	23e5      	movs	r3, #229	@ 0xe5
 80161f2:	707b      	strb	r3, [r7, #1]
 80161f4:	23b3      	movs	r3, #179	@ 0xb3
 80161f6:	70bb      	strb	r3, [r7, #2]
 80161f8:	23d5      	movs	r3, #213	@ 0xd5
 80161fa:	70fb      	strb	r3, [r7, #3]
 80161fc:	232e      	movs	r3, #46	@ 0x2e
 80161fe:	713b      	strb	r3, [r7, #4]
 8016200:	237f      	movs	r3, #127	@ 0x7f
 8016202:	717b      	strb	r3, [r7, #5]
 8016204:	234a      	movs	r3, #74	@ 0x4a
 8016206:	71bb      	strb	r3, [r7, #6]
 8016208:	2398      	movs	r3, #152	@ 0x98
 801620a:	71fb      	strb	r3, [r7, #7]
 801620c:	232a      	movs	r3, #42	@ 0x2a
 801620e:	723b      	strb	r3, [r7, #8]
 8016210:	2348      	movs	r3, #72	@ 0x48
 8016212:	727b      	strb	r3, [r7, #9]
 8016214:	237a      	movs	r3, #122	@ 0x7a
 8016216:	72bb      	strb	r3, [r7, #10]
 8016218:	23cc      	movs	r3, #204	@ 0xcc
 801621a:	72fb      	strb	r3, [r7, #11]
 801621c:	2340      	movs	r3, #64	@ 0x40
 801621e:	733b      	strb	r3, [r7, #12]
 8016220:	23fe      	movs	r3, #254	@ 0xfe
 8016222:	737b      	strb	r3, [r7, #13]
 8016224:	2300      	movs	r3, #0
 8016226:	73bb      	strb	r3, [r7, #14]
 8016228:	2300      	movs	r3, #0
 801622a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 801622c:	4639      	mov	r1, r7
 801622e:	4b39      	ldr	r3, [pc, #228]	@ (8016314 <P2PS_STM_Init+0x134>)
 8016230:	9300      	str	r3, [sp, #0]
 8016232:	2306      	movs	r3, #6
 8016234:	2201      	movs	r2, #1
 8016236:	2002      	movs	r0, #2
 8016238:	f7ff fa12 	bl	8015660 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 801623c:	2319      	movs	r3, #25
 801623e:	703b      	strb	r3, [r7, #0]
 8016240:	23ed      	movs	r3, #237	@ 0xed
 8016242:	707b      	strb	r3, [r7, #1]
 8016244:	2382      	movs	r3, #130	@ 0x82
 8016246:	70bb      	strb	r3, [r7, #2]
 8016248:	23ae      	movs	r3, #174	@ 0xae
 801624a:	70fb      	strb	r3, [r7, #3]
 801624c:	23ed      	movs	r3, #237	@ 0xed
 801624e:	713b      	strb	r3, [r7, #4]
 8016250:	2321      	movs	r3, #33	@ 0x21
 8016252:	717b      	strb	r3, [r7, #5]
 8016254:	234c      	movs	r3, #76	@ 0x4c
 8016256:	71bb      	strb	r3, [r7, #6]
 8016258:	239d      	movs	r3, #157	@ 0x9d
 801625a:	71fb      	strb	r3, [r7, #7]
 801625c:	2341      	movs	r3, #65	@ 0x41
 801625e:	723b      	strb	r3, [r7, #8]
 8016260:	2345      	movs	r3, #69	@ 0x45
 8016262:	727b      	strb	r3, [r7, #9]
 8016264:	2322      	movs	r3, #34	@ 0x22
 8016266:	72bb      	strb	r3, [r7, #10]
 8016268:	238e      	movs	r3, #142	@ 0x8e
 801626a:	72fb      	strb	r3, [r7, #11]
 801626c:	2341      	movs	r3, #65	@ 0x41
 801626e:	733b      	strb	r3, [r7, #12]
 8016270:	23fe      	movs	r3, #254	@ 0xfe
 8016272:	737b      	strb	r3, [r7, #13]
 8016274:	2300      	movs	r3, #0
 8016276:	73bb      	strb	r3, [r7, #14]
 8016278:	2300      	movs	r3, #0
 801627a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 801627c:	4b25      	ldr	r3, [pc, #148]	@ (8016314 <P2PS_STM_Init+0x134>)
 801627e:	8818      	ldrh	r0, [r3, #0]
 8016280:	463a      	mov	r2, r7
 8016282:	4b25      	ldr	r3, [pc, #148]	@ (8016318 <P2PS_STM_Init+0x138>)
 8016284:	9305      	str	r3, [sp, #20]
 8016286:	2301      	movs	r3, #1
 8016288:	9304      	str	r3, [sp, #16]
 801628a:	230a      	movs	r3, #10
 801628c:	9303      	str	r3, [sp, #12]
 801628e:	2301      	movs	r3, #1
 8016290:	9302      	str	r3, [sp, #8]
 8016292:	2300      	movs	r3, #0
 8016294:	9301      	str	r3, [sp, #4]
 8016296:	2306      	movs	r3, #6
 8016298:	9300      	str	r3, [sp, #0]
 801629a:	2302      	movs	r3, #2
 801629c:	2102      	movs	r1, #2
 801629e:	f7ff fab5 	bl	801580c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 80162a2:	2319      	movs	r3, #25
 80162a4:	703b      	strb	r3, [r7, #0]
 80162a6:	23ed      	movs	r3, #237	@ 0xed
 80162a8:	707b      	strb	r3, [r7, #1]
 80162aa:	2382      	movs	r3, #130	@ 0x82
 80162ac:	70bb      	strb	r3, [r7, #2]
 80162ae:	23ae      	movs	r3, #174	@ 0xae
 80162b0:	70fb      	strb	r3, [r7, #3]
 80162b2:	23ed      	movs	r3, #237	@ 0xed
 80162b4:	713b      	strb	r3, [r7, #4]
 80162b6:	2321      	movs	r3, #33	@ 0x21
 80162b8:	717b      	strb	r3, [r7, #5]
 80162ba:	234c      	movs	r3, #76	@ 0x4c
 80162bc:	71bb      	strb	r3, [r7, #6]
 80162be:	239d      	movs	r3, #157	@ 0x9d
 80162c0:	71fb      	strb	r3, [r7, #7]
 80162c2:	2341      	movs	r3, #65	@ 0x41
 80162c4:	723b      	strb	r3, [r7, #8]
 80162c6:	2345      	movs	r3, #69	@ 0x45
 80162c8:	727b      	strb	r3, [r7, #9]
 80162ca:	2322      	movs	r3, #34	@ 0x22
 80162cc:	72bb      	strb	r3, [r7, #10]
 80162ce:	238e      	movs	r3, #142	@ 0x8e
 80162d0:	72fb      	strb	r3, [r7, #11]
 80162d2:	2342      	movs	r3, #66	@ 0x42
 80162d4:	733b      	strb	r3, [r7, #12]
 80162d6:	23fe      	movs	r3, #254	@ 0xfe
 80162d8:	737b      	strb	r3, [r7, #13]
 80162da:	2300      	movs	r3, #0
 80162dc:	73bb      	strb	r3, [r7, #14]
 80162de:	2300      	movs	r3, #0
 80162e0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80162e2:	4b0c      	ldr	r3, [pc, #48]	@ (8016314 <P2PS_STM_Init+0x134>)
 80162e4:	8818      	ldrh	r0, [r3, #0]
 80162e6:	463a      	mov	r2, r7
 80162e8:	4b0c      	ldr	r3, [pc, #48]	@ (801631c <P2PS_STM_Init+0x13c>)
 80162ea:	9305      	str	r3, [sp, #20]
 80162ec:	2301      	movs	r3, #1
 80162ee:	9304      	str	r3, [sp, #16]
 80162f0:	230a      	movs	r3, #10
 80162f2:	9303      	str	r3, [sp, #12]
 80162f4:	2301      	movs	r3, #1
 80162f6:	9302      	str	r3, [sp, #8]
 80162f8:	2300      	movs	r3, #0
 80162fa:	9301      	str	r3, [sp, #4]
 80162fc:	2310      	movs	r3, #16
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	2302      	movs	r3, #2
 8016302:	2102      	movs	r1, #2
 8016304:	f7ff fa82 	bl	801580c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8016308:	bf00      	nop
}
 801630a:	3710      	adds	r7, #16
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}
 8016310:	08016119 	.word	0x08016119
 8016314:	20000320 	.word	0x20000320
 8016318:	20000322 	.word	0x20000322
 801631c:	20000324 	.word	0x20000324

08016320 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8016320:	b480      	push	{r7}
 8016322:	af00      	add	r7, sp, #0
  return;
 8016324:	bf00      	nop
}
 8016326:	46bd      	mov	sp, r7
 8016328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632c:	4770      	bx	lr

0801632e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 801632e:	b480      	push	{r7}
 8016330:	af00      	add	r7, sp, #0
  return;
 8016332:	bf00      	nop
}
 8016334:	46bd      	mov	sp, r7
 8016336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633a:	4770      	bx	lr

0801633c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 801633c:	b480      	push	{r7}
 801633e:	af00      	add	r7, sp, #0
  return;
 8016340:	bf00      	nop
}
 8016342:	46bd      	mov	sp, r7
 8016344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016348:	4770      	bx	lr

0801634a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 801634a:	b480      	push	{r7}
 801634c:	af00      	add	r7, sp, #0
  return;
 801634e:	bf00      	nop
}
 8016350:	46bd      	mov	sp, r7
 8016352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016356:	4770      	bx	lr

08016358 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8016358:	b480      	push	{r7}
 801635a:	af00      	add	r7, sp, #0
  return;
 801635c:	bf00      	nop
}
 801635e:	46bd      	mov	sp, r7
 8016360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016364:	4770      	bx	lr

08016366 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8016366:	b480      	push	{r7}
 8016368:	af00      	add	r7, sp, #0
  return;
 801636a:	bf00      	nop
}
 801636c:	46bd      	mov	sp, r7
 801636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016372:	4770      	bx	lr

08016374 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8016374:	b480      	push	{r7}
 8016376:	af00      	add	r7, sp, #0
  return;
 8016378:	bf00      	nop
}
 801637a:	46bd      	mov	sp, r7
 801637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016380:	4770      	bx	lr

08016382 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8016382:	b480      	push	{r7}
 8016384:	af00      	add	r7, sp, #0
  return;
 8016386:	bf00      	nop
}
 8016388:	46bd      	mov	sp, r7
 801638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638e:	4770      	bx	lr

08016390 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8016390:	b480      	push	{r7}
 8016392:	af00      	add	r7, sp, #0
  return;
 8016394:	bf00      	nop
}
 8016396:	46bd      	mov	sp, r7
 8016398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639c:	4770      	bx	lr

0801639e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801639e:	b480      	push	{r7}
 80163a0:	af00      	add	r7, sp, #0
  return;
 80163a2:	bf00      	nop
}
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr

080163ac <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80163ac:	b480      	push	{r7}
 80163ae:	af00      	add	r7, sp, #0
  return;
 80163b0:	bf00      	nop
}
 80163b2:	46bd      	mov	sp, r7
 80163b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b8:	4770      	bx	lr

080163ba <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80163ba:	b480      	push	{r7}
 80163bc:	af00      	add	r7, sp, #0
  return;
 80163be:	bf00      	nop
}
 80163c0:	46bd      	mov	sp, r7
 80163c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c6:	4770      	bx	lr

080163c8 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 80163c8:	b480      	push	{r7}
 80163ca:	af00      	add	r7, sp, #0
  return;
 80163cc:	bf00      	nop
}
 80163ce:	46bd      	mov	sp, r7
 80163d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d4:	4770      	bx	lr

080163d6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80163d6:	b480      	push	{r7}
 80163d8:	af00      	add	r7, sp, #0
  return;
 80163da:	bf00      	nop
}
 80163dc:	46bd      	mov	sp, r7
 80163de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e2:	4770      	bx	lr

080163e4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80163e4:	b480      	push	{r7}
 80163e6:	af00      	add	r7, sp, #0
  return;
 80163e8:	bf00      	nop
}
 80163ea:	46bd      	mov	sp, r7
 80163ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f0:	4770      	bx	lr

080163f2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80163f2:	b480      	push	{r7}
 80163f4:	af00      	add	r7, sp, #0
  return;
 80163f6:	bf00      	nop
}
 80163f8:	46bd      	mov	sp, r7
 80163fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fe:	4770      	bx	lr

08016400 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8016400:	b480      	push	{r7}
 8016402:	af00      	add	r7, sp, #0
  return;
 8016404:	bf00      	nop
}
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr
	...

08016410 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8016410:	b580      	push	{r7, lr}
 8016412:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8016414:	4b04      	ldr	r3, [pc, #16]	@ (8016428 <SVCCTL_Init+0x18>)
 8016416:	2200      	movs	r2, #0
 8016418:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801641a:	4b04      	ldr	r3, [pc, #16]	@ (801642c <SVCCTL_Init+0x1c>)
 801641c:	2200      	movs	r2, #0
 801641e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8016420:	f000 f806 	bl	8016430 <SVCCTL_SvcInit>

  return;
 8016424:	bf00      	nop
}
 8016426:	bd80      	pop	{r7, pc}
 8016428:	20000328 	.word	0x20000328
 801642c:	20000348 	.word	0x20000348

08016430 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	af00      	add	r7, sp, #0
  BAS_Init();
 8016434:	f7ff ff74 	bl	8016320 <BAS_Init>

  BLS_Init();
 8016438:	f7ff ff79 	bl	801632e <BLS_Init>

  CRS_STM_Init();
 801643c:	f7ff ff7e 	bl	801633c <CRS_STM_Init>

  DIS_Init();
 8016440:	f7ff ff83 	bl	801634a <DIS_Init>

  EDS_STM_Init();
 8016444:	f7ff ff88 	bl	8016358 <EDS_STM_Init>

  HIDS_Init();
 8016448:	f7ff ff8d 	bl	8016366 <HIDS_Init>

  HRS_Init();
 801644c:	f7ff ff92 	bl	8016374 <HRS_Init>

  HTS_Init();
 8016450:	f7ff ff97 	bl	8016382 <HTS_Init>

  IAS_Init();
 8016454:	f7ff ff9c 	bl	8016390 <IAS_Init>

  LLS_Init();
 8016458:	f7ff ffa1 	bl	801639e <LLS_Init>

  TPS_Init();
 801645c:	f7ff ffa6 	bl	80163ac <TPS_Init>

  MOTENV_STM_Init();
 8016460:	f7ff ffab 	bl	80163ba <MOTENV_STM_Init>

  P2PS_STM_Init();
 8016464:	f7ff febc 	bl	80161e0 <P2PS_STM_Init>

  ZDD_STM_Init();
 8016468:	f7ff ffae 	bl	80163c8 <ZDD_STM_Init>

  OTAS_STM_Init();
 801646c:	f7ff ffb3 	bl	80163d6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8016470:	f7ff ffbf 	bl	80163f2 <BVOPUS_STM_Init>

  MESH_Init();
 8016474:	f7ff ffb6 	bl	80163e4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8016478:	f7ff ffc2 	bl	8016400 <SVCCTL_InitCustomSvc>
  
  return;
 801647c:	bf00      	nop
}
 801647e:	bd80      	pop	{r7, pc}

08016480 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8016480:	b480      	push	{r7}
 8016482:	b083      	sub	sp, #12
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8016488:	4b09      	ldr	r3, [pc, #36]	@ (80164b0 <SVCCTL_RegisterSvcHandler+0x30>)
 801648a:	7f1b      	ldrb	r3, [r3, #28]
 801648c:	4619      	mov	r1, r3
 801648e:	4a08      	ldr	r2, [pc, #32]	@ (80164b0 <SVCCTL_RegisterSvcHandler+0x30>)
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8016496:	4b06      	ldr	r3, [pc, #24]	@ (80164b0 <SVCCTL_RegisterSvcHandler+0x30>)
 8016498:	7f1b      	ldrb	r3, [r3, #28]
 801649a:	3301      	adds	r3, #1
 801649c:	b2da      	uxtb	r2, r3
 801649e:	4b04      	ldr	r3, [pc, #16]	@ (80164b0 <SVCCTL_RegisterSvcHandler+0x30>)
 80164a0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80164a2:	bf00      	nop
}
 80164a4:	370c      	adds	r7, #12
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr
 80164ae:	bf00      	nop
 80164b0:	20000328 	.word	0x20000328

080164b4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b086      	sub	sp, #24
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	3301      	adds	r3, #1
 80164c0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80164c2:	2300      	movs	r3, #0
 80164c4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	781b      	ldrb	r3, [r3, #0]
 80164ca:	2bff      	cmp	r3, #255	@ 0xff
 80164cc:	d125      	bne.n	801651a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	3302      	adds	r3, #2
 80164d2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	881b      	ldrh	r3, [r3, #0]
 80164d8:	b29b      	uxth	r3, r3
 80164da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80164de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80164e2:	d118      	bne.n	8016516 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80164e4:	2300      	movs	r3, #0
 80164e6:	757b      	strb	r3, [r7, #21]
 80164e8:	e00d      	b.n	8016506 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80164ea:	7d7b      	ldrb	r3, [r7, #21]
 80164ec:	4a1a      	ldr	r2, [pc, #104]	@ (8016558 <SVCCTL_UserEvtRx+0xa4>)
 80164ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80164f2:	6878      	ldr	r0, [r7, #4]
 80164f4:	4798      	blx	r3
 80164f6:	4603      	mov	r3, r0
 80164f8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80164fa:	7dfb      	ldrb	r3, [r7, #23]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d108      	bne.n	8016512 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8016500:	7d7b      	ldrb	r3, [r7, #21]
 8016502:	3301      	adds	r3, #1
 8016504:	757b      	strb	r3, [r7, #21]
 8016506:	4b14      	ldr	r3, [pc, #80]	@ (8016558 <SVCCTL_UserEvtRx+0xa4>)
 8016508:	7f1b      	ldrb	r3, [r3, #28]
 801650a:	7d7a      	ldrb	r2, [r7, #21]
 801650c:	429a      	cmp	r2, r3
 801650e:	d3ec      	bcc.n	80164ea <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8016510:	e002      	b.n	8016518 <SVCCTL_UserEvtRx+0x64>
              break;
 8016512:	bf00      	nop
          break;
 8016514:	e000      	b.n	8016518 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8016516:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8016518:	e000      	b.n	801651c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801651a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 801651c:	7dfb      	ldrb	r3, [r7, #23]
 801651e:	2b02      	cmp	r3, #2
 8016520:	d00f      	beq.n	8016542 <SVCCTL_UserEvtRx+0x8e>
 8016522:	2b02      	cmp	r3, #2
 8016524:	dc10      	bgt.n	8016548 <SVCCTL_UserEvtRx+0x94>
 8016526:	2b00      	cmp	r3, #0
 8016528:	d002      	beq.n	8016530 <SVCCTL_UserEvtRx+0x7c>
 801652a:	2b01      	cmp	r3, #1
 801652c:	d006      	beq.n	801653c <SVCCTL_UserEvtRx+0x88>
 801652e:	e00b      	b.n	8016548 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f001 fced 	bl	8017f10 <SVCCTL_App_Notification>
 8016536:	4603      	mov	r3, r0
 8016538:	75bb      	strb	r3, [r7, #22]
      break;
 801653a:	e008      	b.n	801654e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 801653c:	2301      	movs	r3, #1
 801653e:	75bb      	strb	r3, [r7, #22]
      break;
 8016540:	e005      	b.n	801654e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8016542:	2300      	movs	r3, #0
 8016544:	75bb      	strb	r3, [r7, #22]
      break;
 8016546:	e002      	b.n	801654e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8016548:	2301      	movs	r3, #1
 801654a:	75bb      	strb	r3, [r7, #22]
      break;
 801654c:	bf00      	nop
  }

  return (return_status);
 801654e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016550:	4618      	mov	r0, r3
 8016552:	3718      	adds	r7, #24
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}
 8016558:	20000328 	.word	0x20000328

0801655c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b088      	sub	sp, #32
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8016564:	f107 030c 	add.w	r3, r7, #12
 8016568:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8016570:	69fb      	ldr	r3, [r7, #28]
 8016572:	212e      	movs	r1, #46	@ 0x2e
 8016574:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8016578:	f000 fae8 	bl	8016b4c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801657c:	69fb      	ldr	r3, [r7, #28]
 801657e:	330b      	adds	r3, #11
 8016580:	78db      	ldrb	r3, [r3, #3]
}
 8016582:	4618      	mov	r0, r3
 8016584:	3720      	adds	r7, #32
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}

0801658a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 801658a:	b580      	push	{r7, lr}
 801658c:	b088      	sub	sp, #32
 801658e:	af00      	add	r7, sp, #0
 8016590:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8016592:	f107 030c 	add.w	r3, r7, #12
 8016596:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801659e:	69fb      	ldr	r3, [r7, #28]
 80165a0:	210f      	movs	r1, #15
 80165a2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80165a6:	f000 fad1 	bl	8016b4c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80165aa:	69fb      	ldr	r3, [r7, #28]
 80165ac:	330b      	adds	r3, #11
 80165ae:	78db      	ldrb	r3, [r3, #3]
}
 80165b0:	4618      	mov	r0, r3
 80165b2:	3720      	adds	r7, #32
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}

080165b8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b088      	sub	sp, #32
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80165c0:	f107 030c 	add.w	r3, r7, #12
 80165c4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80165c6:	69fb      	ldr	r3, [r7, #28]
 80165c8:	687a      	ldr	r2, [r7, #4]
 80165ca:	2110      	movs	r1, #16
 80165cc:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80165d0:	f000 fabc 	bl	8016b4c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80165d4:	69fb      	ldr	r3, [r7, #28]
 80165d6:	330b      	adds	r3, #11
 80165d8:	78db      	ldrb	r3, [r3, #3]
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3720      	adds	r7, #32
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}
	...

080165e4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80165e4:	b480      	push	{r7}
 80165e6:	b08b      	sub	sp, #44	@ 0x2c
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80165ec:	2300      	movs	r3, #0
 80165ee:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80165f0:	2300      	movs	r3, #0
 80165f2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80165f4:	2300      	movs	r3, #0
 80165f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80165f8:	2300      	movs	r3, #0
 80165fa:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80165fc:	2300      	movs	r3, #0
 80165fe:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8016600:	2300      	movs	r3, #0
 8016602:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8016604:	2300      	movs	r3, #0
 8016606:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8016608:	2300      	movs	r3, #0
 801660a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 801660c:	4b4a      	ldr	r3, [pc, #296]	@ (8016738 <SHCI_GetWirelessFwInfo+0x154>)
 801660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016610:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016614:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8016616:	693b      	ldr	r3, [r7, #16]
 8016618:	009b      	lsls	r3, r3, #2
 801661a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801661e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	4a44      	ldr	r2, [pc, #272]	@ (801673c <SHCI_GetWirelessFwInfo+0x158>)
 801662c:	4293      	cmp	r3, r2
 801662e:	d10f      	bne.n	8016650 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	695b      	ldr	r3, [r3, #20]
 8016634:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8016636:	68bb      	ldr	r3, [r7, #8]
 8016638:	699b      	ldr	r3, [r3, #24]
 801663a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 801663c:	68bb      	ldr	r3, [r7, #8]
 801663e:	69db      	ldr	r3, [r3, #28]
 8016640:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	68db      	ldr	r3, [r3, #12]
 8016646:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	691b      	ldr	r3, [r3, #16]
 801664c:	617b      	str	r3, [r7, #20]
 801664e:	e01a      	b.n	8016686 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8016650:	693b      	ldr	r3, [r7, #16]
 8016652:	009b      	lsls	r3, r3, #2
 8016654:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8016658:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 801665c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	691b      	ldr	r3, [r3, #16]
 8016664:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	695b      	ldr	r3, [r3, #20]
 801666c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	699b      	ldr	r3, [r3, #24]
 8016674:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	685b      	ldr	r3, [r3, #4]
 801667c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	689b      	ldr	r3, [r3, #8]
 8016684:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8016686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016688:	0e1b      	lsrs	r3, r3, #24
 801668a:	b2da      	uxtb	r2, r3
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8016690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016692:	0c1b      	lsrs	r3, r3, #16
 8016694:	b2da      	uxtb	r2, r3
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801669c:	0a1b      	lsrs	r3, r3, #8
 801669e:	b2da      	uxtb	r2, r3
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80166a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166a6:	091b      	lsrs	r3, r3, #4
 80166a8:	b2db      	uxtb	r3, r3
 80166aa:	f003 030f 	and.w	r3, r3, #15
 80166ae:	b2da      	uxtb	r2, r3
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80166b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166b6:	b2db      	uxtb	r3, r3
 80166b8:	f003 030f 	and.w	r3, r3, #15
 80166bc:	b2da      	uxtb	r2, r3
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80166c2:	6a3b      	ldr	r3, [r7, #32]
 80166c4:	0e1b      	lsrs	r3, r3, #24
 80166c6:	b2da      	uxtb	r2, r3
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80166cc:	6a3b      	ldr	r3, [r7, #32]
 80166ce:	0c1b      	lsrs	r3, r3, #16
 80166d0:	b2da      	uxtb	r2, r3
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80166d6:	6a3b      	ldr	r3, [r7, #32]
 80166d8:	0a1b      	lsrs	r3, r3, #8
 80166da:	b2da      	uxtb	r2, r3
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80166e0:	6a3b      	ldr	r3, [r7, #32]
 80166e2:	b2da      	uxtb	r2, r3
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80166e8:	69fb      	ldr	r3, [r7, #28]
 80166ea:	b2da      	uxtb	r2, r3
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80166f0:	69bb      	ldr	r3, [r7, #24]
 80166f2:	0e1b      	lsrs	r3, r3, #24
 80166f4:	b2da      	uxtb	r2, r3
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80166fa:	69bb      	ldr	r3, [r7, #24]
 80166fc:	0c1b      	lsrs	r3, r3, #16
 80166fe:	b2da      	uxtb	r2, r3
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016704:	69bb      	ldr	r3, [r7, #24]
 8016706:	0a1b      	lsrs	r3, r3, #8
 8016708:	b2da      	uxtb	r2, r3
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801670e:	697b      	ldr	r3, [r7, #20]
 8016710:	0e1b      	lsrs	r3, r3, #24
 8016712:	b2da      	uxtb	r2, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	0c1b      	lsrs	r3, r3, #16
 801671c:	b2da      	uxtb	r2, r3
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8016722:	697b      	ldr	r3, [r7, #20]
 8016724:	b2da      	uxtb	r2, r3
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801672a:	2300      	movs	r3, #0
}
 801672c:	4618      	mov	r0, r3
 801672e:	372c      	adds	r7, #44	@ 0x2c
 8016730:	46bd      	mov	sp, r7
 8016732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016736:	4770      	bx	lr
 8016738:	58004000 	.word	0x58004000
 801673c:	a94656b9 	.word	0xa94656b9

08016740 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	685b      	ldr	r3, [r3, #4]
 801674e:	4a08      	ldr	r2, [pc, #32]	@ (8016770 <hci_init+0x30>)
 8016750:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8016752:	4a08      	ldr	r2, [pc, #32]	@ (8016774 <hci_init+0x34>)
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8016758:	4806      	ldr	r0, [pc, #24]	@ (8016774 <hci_init+0x34>)
 801675a:	f000 f979 	bl	8016a50 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	4618      	mov	r0, r3
 8016764:	f000 f8da 	bl	801691c <TlInit>

  return;
 8016768:	bf00      	nop
}
 801676a:	3708      	adds	r7, #8
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}
 8016770:	2000154c 	.word	0x2000154c
 8016774:	20001524 	.word	0x20001524

08016778 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b084      	sub	sp, #16
 801677c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801677e:	4822      	ldr	r0, [pc, #136]	@ (8016808 <hci_user_evt_proc+0x90>)
 8016780:	f000 fd32 	bl	80171e8 <LST_is_empty>
 8016784:	4603      	mov	r3, r0
 8016786:	2b00      	cmp	r3, #0
 8016788:	d12b      	bne.n	80167e2 <hci_user_evt_proc+0x6a>
 801678a:	4b20      	ldr	r3, [pc, #128]	@ (801680c <hci_user_evt_proc+0x94>)
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d027      	beq.n	80167e2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8016792:	f107 030c 	add.w	r3, r7, #12
 8016796:	4619      	mov	r1, r3
 8016798:	481b      	ldr	r0, [pc, #108]	@ (8016808 <hci_user_evt_proc+0x90>)
 801679a:	f000 fdb4 	bl	8017306 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801679e:	4b1c      	ldr	r3, [pc, #112]	@ (8016810 <hci_user_evt_proc+0x98>)
 80167a0:	69db      	ldr	r3, [r3, #28]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d00c      	beq.n	80167c0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80167aa:	2301      	movs	r3, #1
 80167ac:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80167ae:	4b18      	ldr	r3, [pc, #96]	@ (8016810 <hci_user_evt_proc+0x98>)
 80167b0:	69db      	ldr	r3, [r3, #28]
 80167b2:	1d3a      	adds	r2, r7, #4
 80167b4:	4610      	mov	r0, r2
 80167b6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80167b8:	793a      	ldrb	r2, [r7, #4]
 80167ba:	4b14      	ldr	r3, [pc, #80]	@ (801680c <hci_user_evt_proc+0x94>)
 80167bc:	701a      	strb	r2, [r3, #0]
 80167be:	e002      	b.n	80167c6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80167c0:	4b12      	ldr	r3, [pc, #72]	@ (801680c <hci_user_evt_proc+0x94>)
 80167c2:	2201      	movs	r2, #1
 80167c4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80167c6:	4b11      	ldr	r3, [pc, #68]	@ (801680c <hci_user_evt_proc+0x94>)
 80167c8:	781b      	ldrb	r3, [r3, #0]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d004      	beq.n	80167d8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	4618      	mov	r0, r3
 80167d2:	f000 fc0d 	bl	8016ff0 <TL_MM_EvtDone>
 80167d6:	e004      	b.n	80167e2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	4619      	mov	r1, r3
 80167dc:	480a      	ldr	r0, [pc, #40]	@ (8016808 <hci_user_evt_proc+0x90>)
 80167de:	f000 fd25 	bl	801722c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80167e2:	4809      	ldr	r0, [pc, #36]	@ (8016808 <hci_user_evt_proc+0x90>)
 80167e4:	f000 fd00 	bl	80171e8 <LST_is_empty>
 80167e8:	4603      	mov	r3, r0
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d107      	bne.n	80167fe <hci_user_evt_proc+0x86>
 80167ee:	4b07      	ldr	r3, [pc, #28]	@ (801680c <hci_user_evt_proc+0x94>)
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d003      	beq.n	80167fe <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80167f6:	4804      	ldr	r0, [pc, #16]	@ (8016808 <hci_user_evt_proc+0x90>)
 80167f8:	f001 fe07 	bl	801840a <hci_notify_asynch_evt>
  }


  return;
 80167fc:	bf00      	nop
 80167fe:	bf00      	nop
}
 8016800:	3710      	adds	r7, #16
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
 8016806:	bf00      	nop
 8016808:	20000350 	.word	0x20000350
 801680c:	2000035c 	.word	0x2000035c
 8016810:	20001524 	.word	0x20001524

08016814 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b088      	sub	sp, #32
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
 801681c:	460b      	mov	r3, r1
 801681e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8016820:	2000      	movs	r0, #0
 8016822:	f000 f8d1 	bl	80169c8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8016826:	2300      	movs	r3, #0
 8016828:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	885b      	ldrh	r3, [r3, #2]
 801682e:	b21b      	sxth	r3, r3
 8016830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016834:	b21a      	sxth	r2, r3
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	881b      	ldrh	r3, [r3, #0]
 801683a:	029b      	lsls	r3, r3, #10
 801683c:	b21b      	sxth	r3, r3
 801683e:	4313      	orrs	r3, r2
 8016840:	b21b      	sxth	r3, r3
 8016842:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8016844:	4b33      	ldr	r3, [pc, #204]	@ (8016914 <hci_send_req+0x100>)
 8016846:	2201      	movs	r2, #1
 8016848:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	68db      	ldr	r3, [r3, #12]
 801684e:	b2d9      	uxtb	r1, r3
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	689a      	ldr	r2, [r3, #8]
 8016854:	8bbb      	ldrh	r3, [r7, #28]
 8016856:	4618      	mov	r0, r3
 8016858:	f000 f890 	bl	801697c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 801685c:	e04e      	b.n	80168fc <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801685e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8016862:	f001 fde9 	bl	8018438 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8016866:	e043      	b.n	80168f0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8016868:	f107 030c 	add.w	r3, r7, #12
 801686c:	4619      	mov	r1, r3
 801686e:	482a      	ldr	r0, [pc, #168]	@ (8016918 <hci_send_req+0x104>)
 8016870:	f000 fd49 	bl	8017306 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	7a5b      	ldrb	r3, [r3, #9]
 8016878:	2b0f      	cmp	r3, #15
 801687a:	d114      	bne.n	80168a6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	330b      	adds	r3, #11
 8016880:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8016882:	693b      	ldr	r3, [r7, #16]
 8016884:	885b      	ldrh	r3, [r3, #2]
 8016886:	b29b      	uxth	r3, r3
 8016888:	8bba      	ldrh	r2, [r7, #28]
 801688a:	429a      	cmp	r2, r3
 801688c:	d104      	bne.n	8016898 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	691b      	ldr	r3, [r3, #16]
 8016892:	693a      	ldr	r2, [r7, #16]
 8016894:	7812      	ldrb	r2, [r2, #0]
 8016896:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8016898:	693b      	ldr	r3, [r7, #16]
 801689a:	785b      	ldrb	r3, [r3, #1]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d027      	beq.n	80168f0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80168a0:	2301      	movs	r3, #1
 80168a2:	77fb      	strb	r3, [r7, #31]
 80168a4:	e024      	b.n	80168f0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	330b      	adds	r3, #11
 80168aa:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80168ac:	69bb      	ldr	r3, [r7, #24]
 80168ae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80168b2:	b29b      	uxth	r3, r3
 80168b4:	8bba      	ldrh	r2, [r7, #28]
 80168b6:	429a      	cmp	r2, r3
 80168b8:	d114      	bne.n	80168e4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	7a9b      	ldrb	r3, [r3, #10]
 80168be:	3b03      	subs	r3, #3
 80168c0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	695a      	ldr	r2, [r3, #20]
 80168c6:	7dfb      	ldrb	r3, [r7, #23]
 80168c8:	429a      	cmp	r2, r3
 80168ca:	bfa8      	it	ge
 80168cc:	461a      	movge	r2, r3
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6918      	ldr	r0, [r3, #16]
 80168d6:	69bb      	ldr	r3, [r7, #24]
 80168d8:	1cd9      	adds	r1, r3, #3
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	695b      	ldr	r3, [r3, #20]
 80168de:	461a      	mov	r2, r3
 80168e0:	f005 f8af 	bl	801ba42 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80168e4:	69bb      	ldr	r3, [r7, #24]
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d001      	beq.n	80168f0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80168ec:	2301      	movs	r3, #1
 80168ee:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80168f0:	4809      	ldr	r0, [pc, #36]	@ (8016918 <hci_send_req+0x104>)
 80168f2:	f000 fc79 	bl	80171e8 <LST_is_empty>
 80168f6:	4603      	mov	r3, r0
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d0b5      	beq.n	8016868 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80168fc:	7ffb      	ldrb	r3, [r7, #31]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d0ad      	beq.n	801685e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8016902:	2001      	movs	r0, #1
 8016904:	f000 f860 	bl	80169c8 <NotifyCmdStatus>

  return 0;
 8016908:	2300      	movs	r3, #0
}
 801690a:	4618      	mov	r0, r3
 801690c:	3720      	adds	r7, #32
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
 8016912:	bf00      	nop
 8016914:	20001550 	.word	0x20001550
 8016918:	20001544 	.word	0x20001544

0801691c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b086      	sub	sp, #24
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8016924:	480f      	ldr	r0, [pc, #60]	@ (8016964 <TlInit+0x48>)
 8016926:	f000 fc4f 	bl	80171c8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801692a:	4a0f      	ldr	r2, [pc, #60]	@ (8016968 <TlInit+0x4c>)
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8016930:	480e      	ldr	r0, [pc, #56]	@ (801696c <TlInit+0x50>)
 8016932:	f000 fc49 	bl	80171c8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8016936:	4b0e      	ldr	r3, [pc, #56]	@ (8016970 <TlInit+0x54>)
 8016938:	2201      	movs	r2, #1
 801693a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 801693c:	4b0d      	ldr	r3, [pc, #52]	@ (8016974 <TlInit+0x58>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d00a      	beq.n	801695a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8016948:	4b0b      	ldr	r3, [pc, #44]	@ (8016978 <TlInit+0x5c>)
 801694a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 801694c:	4b09      	ldr	r3, [pc, #36]	@ (8016974 <TlInit+0x58>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	f107 0208 	add.w	r2, r7, #8
 8016954:	4610      	mov	r0, r2
 8016956:	4798      	blx	r3
  }

  return;
 8016958:	bf00      	nop
 801695a:	bf00      	nop
}
 801695c:	3718      	adds	r7, #24
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
 8016962:	bf00      	nop
 8016964:	20001544 	.word	0x20001544
 8016968:	20000358 	.word	0x20000358
 801696c:	20000350 	.word	0x20000350
 8016970:	2000035c 	.word	0x2000035c
 8016974:	20001524 	.word	0x20001524
 8016978:	08016a09 	.word	0x08016a09

0801697c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b082      	sub	sp, #8
 8016980:	af00      	add	r7, sp, #0
 8016982:	4603      	mov	r3, r0
 8016984:	603a      	str	r2, [r7, #0]
 8016986:	80fb      	strh	r3, [r7, #6]
 8016988:	460b      	mov	r3, r1
 801698a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 801698c:	4b0c      	ldr	r3, [pc, #48]	@ (80169c0 <SendCmd+0x44>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	88fa      	ldrh	r2, [r7, #6]
 8016992:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8016996:	4b0a      	ldr	r3, [pc, #40]	@ (80169c0 <SendCmd+0x44>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	797a      	ldrb	r2, [r7, #5]
 801699c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801699e:	4b08      	ldr	r3, [pc, #32]	@ (80169c0 <SendCmd+0x44>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	330c      	adds	r3, #12
 80169a4:	797a      	ldrb	r2, [r7, #5]
 80169a6:	6839      	ldr	r1, [r7, #0]
 80169a8:	4618      	mov	r0, r3
 80169aa:	f005 f84a 	bl	801ba42 <memcpy>

  hciContext.io.Send(0,0);
 80169ae:	4b05      	ldr	r3, [pc, #20]	@ (80169c4 <SendCmd+0x48>)
 80169b0:	691b      	ldr	r3, [r3, #16]
 80169b2:	2100      	movs	r1, #0
 80169b4:	2000      	movs	r0, #0
 80169b6:	4798      	blx	r3

  return;
 80169b8:	bf00      	nop
}
 80169ba:	3708      	adds	r7, #8
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}
 80169c0:	20000358 	.word	0x20000358
 80169c4:	20001524 	.word	0x20001524

080169c8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b082      	sub	sp, #8
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	4603      	mov	r3, r0
 80169d0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80169d2:	79fb      	ldrb	r3, [r7, #7]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d108      	bne.n	80169ea <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80169d8:	4b0a      	ldr	r3, [pc, #40]	@ (8016a04 <NotifyCmdStatus+0x3c>)
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d00d      	beq.n	80169fc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80169e0:	4b08      	ldr	r3, [pc, #32]	@ (8016a04 <NotifyCmdStatus+0x3c>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	2000      	movs	r0, #0
 80169e6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80169e8:	e008      	b.n	80169fc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80169ea:	4b06      	ldr	r3, [pc, #24]	@ (8016a04 <NotifyCmdStatus+0x3c>)
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d004      	beq.n	80169fc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80169f2:	4b04      	ldr	r3, [pc, #16]	@ (8016a04 <NotifyCmdStatus+0x3c>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2001      	movs	r0, #1
 80169f8:	4798      	blx	r3
  return;
 80169fa:	bf00      	nop
 80169fc:	bf00      	nop
}
 80169fe:	3708      	adds	r7, #8
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}
 8016a04:	2000154c 	.word	0x2000154c

08016a08 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b082      	sub	sp, #8
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	7a5b      	ldrb	r3, [r3, #9]
 8016a14:	2b0f      	cmp	r3, #15
 8016a16:	d003      	beq.n	8016a20 <TlEvtReceived+0x18>
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	7a5b      	ldrb	r3, [r3, #9]
 8016a1c:	2b0e      	cmp	r3, #14
 8016a1e:	d107      	bne.n	8016a30 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8016a20:	6879      	ldr	r1, [r7, #4]
 8016a22:	4809      	ldr	r0, [pc, #36]	@ (8016a48 <TlEvtReceived+0x40>)
 8016a24:	f000 fc28 	bl	8017278 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8016a28:	2000      	movs	r0, #0
 8016a2a:	f001 fcfa 	bl	8018422 <hci_cmd_resp_release>
 8016a2e:	e006      	b.n	8016a3e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8016a30:	6879      	ldr	r1, [r7, #4]
 8016a32:	4806      	ldr	r0, [pc, #24]	@ (8016a4c <TlEvtReceived+0x44>)
 8016a34:	f000 fc20 	bl	8017278 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016a38:	4804      	ldr	r0, [pc, #16]	@ (8016a4c <TlEvtReceived+0x44>)
 8016a3a:	f001 fce6 	bl	801840a <hci_notify_asynch_evt>
  }

  return;
 8016a3e:	bf00      	nop
}
 8016a40:	3708      	adds	r7, #8
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}
 8016a46:	bf00      	nop
 8016a48:	20001544 	.word	0x20001544
 8016a4c:	20000350 	.word	0x20000350

08016a50 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8016a50:	b480      	push	{r7}
 8016a52:	b083      	sub	sp, #12
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	4a05      	ldr	r2, [pc, #20]	@ (8016a70 <hci_register_io_bus+0x20>)
 8016a5c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	4a04      	ldr	r2, [pc, #16]	@ (8016a74 <hci_register_io_bus+0x24>)
 8016a62:	611a      	str	r2, [r3, #16]

  return;
 8016a64:	bf00      	nop
}
 8016a66:	370c      	adds	r7, #12
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr
 8016a70:	08016d69 	.word	0x08016d69
 8016a74:	08016dd1 	.word	0x08016dd1

08016a78 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b082      	sub	sp, #8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
 8016a80:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	685b      	ldr	r3, [r3, #4]
 8016a86:	4a08      	ldr	r2, [pc, #32]	@ (8016aa8 <shci_init+0x30>)
 8016a88:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8016a8a:	4a08      	ldr	r2, [pc, #32]	@ (8016aac <shci_init+0x34>)
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8016a90:	4806      	ldr	r0, [pc, #24]	@ (8016aac <shci_init+0x34>)
 8016a92:	f000 f915 	bl	8016cc0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8016a96:	683b      	ldr	r3, [r7, #0]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f000 f898 	bl	8016bd0 <TlInit>

  return;
 8016aa0:	bf00      	nop
}
 8016aa2:	3708      	adds	r7, #8
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}
 8016aa8:	20001574 	.word	0x20001574
 8016aac:	20001554 	.word	0x20001554

08016ab0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b084      	sub	sp, #16
 8016ab4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016ab6:	4822      	ldr	r0, [pc, #136]	@ (8016b40 <shci_user_evt_proc+0x90>)
 8016ab8:	f000 fb96 	bl	80171e8 <LST_is_empty>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d12b      	bne.n	8016b1a <shci_user_evt_proc+0x6a>
 8016ac2:	4b20      	ldr	r3, [pc, #128]	@ (8016b44 <shci_user_evt_proc+0x94>)
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d027      	beq.n	8016b1a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8016aca:	f107 030c 	add.w	r3, r7, #12
 8016ace:	4619      	mov	r1, r3
 8016ad0:	481b      	ldr	r0, [pc, #108]	@ (8016b40 <shci_user_evt_proc+0x90>)
 8016ad2:	f000 fc18 	bl	8017306 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8016ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8016b48 <shci_user_evt_proc+0x98>)
 8016ad8:	69db      	ldr	r3, [r3, #28]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d00c      	beq.n	8016af8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8016ae2:	2301      	movs	r3, #1
 8016ae4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8016ae6:	4b18      	ldr	r3, [pc, #96]	@ (8016b48 <shci_user_evt_proc+0x98>)
 8016ae8:	69db      	ldr	r3, [r3, #28]
 8016aea:	1d3a      	adds	r2, r7, #4
 8016aec:	4610      	mov	r0, r2
 8016aee:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8016af0:	793a      	ldrb	r2, [r7, #4]
 8016af2:	4b14      	ldr	r3, [pc, #80]	@ (8016b44 <shci_user_evt_proc+0x94>)
 8016af4:	701a      	strb	r2, [r3, #0]
 8016af6:	e002      	b.n	8016afe <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8016af8:	4b12      	ldr	r3, [pc, #72]	@ (8016b44 <shci_user_evt_proc+0x94>)
 8016afa:	2201      	movs	r2, #1
 8016afc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8016afe:	4b11      	ldr	r3, [pc, #68]	@ (8016b44 <shci_user_evt_proc+0x94>)
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d004      	beq.n	8016b10 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f000 fa71 	bl	8016ff0 <TL_MM_EvtDone>
 8016b0e:	e004      	b.n	8016b1a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	4619      	mov	r1, r3
 8016b14:	480a      	ldr	r0, [pc, #40]	@ (8016b40 <shci_user_evt_proc+0x90>)
 8016b16:	f000 fb89 	bl	801722c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016b1a:	4809      	ldr	r0, [pc, #36]	@ (8016b40 <shci_user_evt_proc+0x90>)
 8016b1c:	f000 fb64 	bl	80171e8 <LST_is_empty>
 8016b20:	4603      	mov	r3, r0
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d107      	bne.n	8016b36 <shci_user_evt_proc+0x86>
 8016b26:	4b07      	ldr	r3, [pc, #28]	@ (8016b44 <shci_user_evt_proc+0x94>)
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d003      	beq.n	8016b36 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8016b2e:	4804      	ldr	r0, [pc, #16]	@ (8016b40 <shci_user_evt_proc+0x90>)
 8016b30:	f7ea fe3e 	bl	80017b0 <shci_notify_asynch_evt>
  }


  return;
 8016b34:	bf00      	nop
 8016b36:	bf00      	nop
}
 8016b38:	3710      	adds	r7, #16
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop
 8016b40:	20000360 	.word	0x20000360
 8016b44:	20000370 	.word	0x20000370
 8016b48:	20001554 	.word	0x20001554

08016b4c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b084      	sub	sp, #16
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	60ba      	str	r2, [r7, #8]
 8016b54:	607b      	str	r3, [r7, #4]
 8016b56:	4603      	mov	r3, r0
 8016b58:	81fb      	strh	r3, [r7, #14]
 8016b5a:	460b      	mov	r3, r1
 8016b5c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8016b5e:	2000      	movs	r0, #0
 8016b60:	f000 f868 	bl	8016c34 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8016b64:	4b17      	ldr	r3, [pc, #92]	@ (8016bc4 <shci_send+0x78>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	89fa      	ldrh	r2, [r7, #14]
 8016b6a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8016b6e:	4b15      	ldr	r3, [pc, #84]	@ (8016bc4 <shci_send+0x78>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	7b7a      	ldrb	r2, [r7, #13]
 8016b74:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8016b76:	4b13      	ldr	r3, [pc, #76]	@ (8016bc4 <shci_send+0x78>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	330c      	adds	r3, #12
 8016b7c:	7b7a      	ldrb	r2, [r7, #13]
 8016b7e:	68b9      	ldr	r1, [r7, #8]
 8016b80:	4618      	mov	r0, r3
 8016b82:	f004 ff5e 	bl	801ba42 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8016b86:	4b10      	ldr	r3, [pc, #64]	@ (8016bc8 <shci_send+0x7c>)
 8016b88:	2201      	movs	r2, #1
 8016b8a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8016b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8016bcc <shci_send+0x80>)
 8016b8e:	691b      	ldr	r3, [r3, #16]
 8016b90:	2100      	movs	r1, #0
 8016b92:	2000      	movs	r0, #0
 8016b94:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8016b96:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8016b9a:	f7ea fe20 	bl	80017de <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	f103 0008 	add.w	r0, r3, #8
 8016ba4:	4b07      	ldr	r3, [pc, #28]	@ (8016bc4 <shci_send+0x78>)
 8016ba6:	6819      	ldr	r1, [r3, #0]
 8016ba8:	4b06      	ldr	r3, [pc, #24]	@ (8016bc4 <shci_send+0x78>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	789b      	ldrb	r3, [r3, #2]
 8016bae:	3303      	adds	r3, #3
 8016bb0:	461a      	mov	r2, r3
 8016bb2:	f004 ff46 	bl	801ba42 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016bb6:	2001      	movs	r0, #1
 8016bb8:	f000 f83c 	bl	8016c34 <Cmd_SetStatus>

  return;
 8016bbc:	bf00      	nop
}
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}
 8016bc4:	2000036c 	.word	0x2000036c
 8016bc8:	20001578 	.word	0x20001578
 8016bcc:	20001554 	.word	0x20001554

08016bd0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b086      	sub	sp, #24
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8016bd8:	4a10      	ldr	r2, [pc, #64]	@ (8016c1c <TlInit+0x4c>)
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8016bde:	4810      	ldr	r0, [pc, #64]	@ (8016c20 <TlInit+0x50>)
 8016be0:	f000 faf2 	bl	80171c8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016be4:	2001      	movs	r0, #1
 8016be6:	f000 f825 	bl	8016c34 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8016bea:	4b0e      	ldr	r3, [pc, #56]	@ (8016c24 <TlInit+0x54>)
 8016bec:	2201      	movs	r2, #1
 8016bee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8016bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8016c28 <TlInit+0x58>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d00c      	beq.n	8016c12 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8016bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8016c2c <TlInit+0x5c>)
 8016bfe:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8016c00:	4b0b      	ldr	r3, [pc, #44]	@ (8016c30 <TlInit+0x60>)
 8016c02:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8016c04:	4b08      	ldr	r3, [pc, #32]	@ (8016c28 <TlInit+0x58>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	f107 020c 	add.w	r2, r7, #12
 8016c0c:	4610      	mov	r0, r2
 8016c0e:	4798      	blx	r3
  }

  return;
 8016c10:	bf00      	nop
 8016c12:	bf00      	nop
}
 8016c14:	3718      	adds	r7, #24
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	2000036c 	.word	0x2000036c
 8016c20:	20000360 	.word	0x20000360
 8016c24:	20000370 	.word	0x20000370
 8016c28:	20001554 	.word	0x20001554
 8016c2c:	08016c85 	.word	0x08016c85
 8016c30:	08016c9d 	.word	0x08016c9d

08016c34 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8016c3e:	79fb      	ldrb	r3, [r7, #7]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d10b      	bne.n	8016c5c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8016c44:	4b0d      	ldr	r3, [pc, #52]	@ (8016c7c <Cmd_SetStatus+0x48>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d003      	beq.n	8016c54 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8016c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8016c7c <Cmd_SetStatus+0x48>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	2000      	movs	r0, #0
 8016c52:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8016c54:	4b0a      	ldr	r3, [pc, #40]	@ (8016c80 <Cmd_SetStatus+0x4c>)
 8016c56:	2200      	movs	r2, #0
 8016c58:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8016c5a:	e00b      	b.n	8016c74 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8016c5c:	4b08      	ldr	r3, [pc, #32]	@ (8016c80 <Cmd_SetStatus+0x4c>)
 8016c5e:	2201      	movs	r2, #1
 8016c60:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8016c62:	4b06      	ldr	r3, [pc, #24]	@ (8016c7c <Cmd_SetStatus+0x48>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d004      	beq.n	8016c74 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8016c6a:	4b04      	ldr	r3, [pc, #16]	@ (8016c7c <Cmd_SetStatus+0x48>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	2001      	movs	r0, #1
 8016c70:	4798      	blx	r3
  return;
 8016c72:	bf00      	nop
 8016c74:	bf00      	nop
}
 8016c76:	3708      	adds	r7, #8
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}
 8016c7c:	20001574 	.word	0x20001574
 8016c80:	20000368 	.word	0x20000368

08016c84 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8016c8c:	2000      	movs	r0, #0
 8016c8e:	f7ea fd9b 	bl	80017c8 <shci_cmd_resp_release>

  return;
 8016c92:	bf00      	nop
}
 8016c94:	3708      	adds	r7, #8
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}
	...

08016c9c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8016ca4:	6879      	ldr	r1, [r7, #4]
 8016ca6:	4805      	ldr	r0, [pc, #20]	@ (8016cbc <TlUserEvtReceived+0x20>)
 8016ca8:	f000 fae6 	bl	8017278 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016cac:	4803      	ldr	r0, [pc, #12]	@ (8016cbc <TlUserEvtReceived+0x20>)
 8016cae:	f7ea fd7f 	bl	80017b0 <shci_notify_asynch_evt>

  return;
 8016cb2:	bf00      	nop
}
 8016cb4:	3708      	adds	r7, #8
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	20000360 	.word	0x20000360

08016cc0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8016cc0:	b480      	push	{r7}
 8016cc2:	b083      	sub	sp, #12
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	4a05      	ldr	r2, [pc, #20]	@ (8016ce0 <shci_register_io_bus+0x20>)
 8016ccc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	4a04      	ldr	r2, [pc, #16]	@ (8016ce4 <shci_register_io_bus+0x24>)
 8016cd2:	611a      	str	r2, [r3, #16]

  return;
 8016cd4:	bf00      	nop
}
 8016cd6:	370c      	adds	r7, #12
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cde:	4770      	bx	lr
 8016ce0:	08016e7d 	.word	0x08016e7d
 8016ce4:	08016ed1 	.word	0x08016ed1

08016ce8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8016cec:	f001 fd94 	bl	8018818 <HW_IPCC_Enable>

  return;
 8016cf0:	bf00      	nop
}
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <TL_Init>:


void TL_Init( void )
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8016cf8:	4b10      	ldr	r3, [pc, #64]	@ (8016d3c <TL_Init+0x48>)
 8016cfa:	4a11      	ldr	r2, [pc, #68]	@ (8016d40 <TL_Init+0x4c>)
 8016cfc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8016cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8016d3c <TL_Init+0x48>)
 8016d00:	4a10      	ldr	r2, [pc, #64]	@ (8016d44 <TL_Init+0x50>)
 8016d02:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8016d04:	4b0d      	ldr	r3, [pc, #52]	@ (8016d3c <TL_Init+0x48>)
 8016d06:	4a10      	ldr	r2, [pc, #64]	@ (8016d48 <TL_Init+0x54>)
 8016d08:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8016d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8016d3c <TL_Init+0x48>)
 8016d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8016d4c <TL_Init+0x58>)
 8016d0e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8016d10:	4b0a      	ldr	r3, [pc, #40]	@ (8016d3c <TL_Init+0x48>)
 8016d12:	4a0f      	ldr	r2, [pc, #60]	@ (8016d50 <TL_Init+0x5c>)
 8016d14:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8016d16:	4b09      	ldr	r3, [pc, #36]	@ (8016d3c <TL_Init+0x48>)
 8016d18:	4a0e      	ldr	r2, [pc, #56]	@ (8016d54 <TL_Init+0x60>)
 8016d1a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8016d1c:	4b07      	ldr	r3, [pc, #28]	@ (8016d3c <TL_Init+0x48>)
 8016d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8016d58 <TL_Init+0x64>)
 8016d20:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8016d22:	4b06      	ldr	r3, [pc, #24]	@ (8016d3c <TL_Init+0x48>)
 8016d24:	4a0d      	ldr	r2, [pc, #52]	@ (8016d5c <TL_Init+0x68>)
 8016d26:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8016d28:	4b04      	ldr	r3, [pc, #16]	@ (8016d3c <TL_Init+0x48>)
 8016d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8016d60 <TL_Init+0x6c>)
 8016d2c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8016d2e:	4b03      	ldr	r3, [pc, #12]	@ (8016d3c <TL_Init+0x48>)
 8016d30:	4a0c      	ldr	r2, [pc, #48]	@ (8016d64 <TL_Init+0x70>)
 8016d32:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016d34:	f001 fd84 	bl	8018840 <HW_IPCC_Init>

  return;
 8016d38:	bf00      	nop
}
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	20030000 	.word	0x20030000
 8016d40:	20030028 	.word	0x20030028
 8016d44:	20030048 	.word	0x20030048
 8016d48:	20030058 	.word	0x20030058
 8016d4c:	20030068 	.word	0x20030068
 8016d50:	20030070 	.word	0x20030070
 8016d54:	20030078 	.word	0x20030078
 8016d58:	20030080 	.word	0x20030080
 8016d5c:	2003009c 	.word	0x2003009c
 8016d60:	200300a0 	.word	0x200300a0
 8016d64:	200300ac 	.word	0x200300ac

08016d68 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b084      	sub	sp, #16
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016d74:	4811      	ldr	r0, [pc, #68]	@ (8016dbc <TL_BLE_Init+0x54>)
 8016d76:	f000 fa27 	bl	80171c8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8016d7a:	4b11      	ldr	r3, [pc, #68]	@ (8016dc0 <TL_BLE_Init+0x58>)
 8016d7c:	685b      	ldr	r3, [r3, #4]
 8016d7e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	689a      	ldr	r2, [r3, #8]
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	68da      	ldr	r2, [r3, #12]
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	4a0c      	ldr	r2, [pc, #48]	@ (8016dc4 <TL_BLE_Init+0x5c>)
 8016d94:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8016d96:	68bb      	ldr	r3, [r7, #8]
 8016d98:	4a08      	ldr	r2, [pc, #32]	@ (8016dbc <TL_BLE_Init+0x54>)
 8016d9a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016d9c:	f001 fd66 	bl	801886c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	4a08      	ldr	r2, [pc, #32]	@ (8016dc8 <TL_BLE_Init+0x60>)
 8016da6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	4a07      	ldr	r2, [pc, #28]	@ (8016dcc <TL_BLE_Init+0x64>)
 8016dae:	6013      	str	r3, [r2, #0]

  return 0;
 8016db0:	2300      	movs	r3, #0
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3710      	adds	r7, #16
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}
 8016dba:	bf00      	nop
 8016dbc:	200300c8 	.word	0x200300c8
 8016dc0:	20030000 	.word	0x20030000
 8016dc4:	20030a58 	.word	0x20030a58
 8016dc8:	20001584 	.word	0x20001584
 8016dcc:	20001588 	.word	0x20001588

08016dd0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b082      	sub	sp, #8
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
 8016dd8:	460b      	mov	r3, r1
 8016dda:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8016ddc:	4b09      	ldr	r3, [pc, #36]	@ (8016e04 <TL_BLE_SendCmd+0x34>)
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	2201      	movs	r2, #1
 8016de4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8016de6:	4b07      	ldr	r3, [pc, #28]	@ (8016e04 <TL_BLE_SendCmd+0x34>)
 8016de8:	685b      	ldr	r3, [r3, #4]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	4619      	mov	r1, r3
 8016dee:	2001      	movs	r0, #1
 8016df0:	f000 f96c 	bl	80170cc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8016df4:	f001 fd44 	bl	8018880 <HW_IPCC_BLE_SendCmd>

  return 0;
 8016df8:	2300      	movs	r3, #0
}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3708      	adds	r7, #8
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}
 8016e02:	bf00      	nop
 8016e04:	20030000 	.word	0x20030000

08016e08 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b082      	sub	sp, #8
 8016e0c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8016e0e:	e01c      	b.n	8016e4a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8016e10:	1d3b      	adds	r3, r7, #4
 8016e12:	4619      	mov	r1, r3
 8016e14:	4812      	ldr	r0, [pc, #72]	@ (8016e60 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016e16:	f000 fa76 	bl	8017306 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	7a5b      	ldrb	r3, [r3, #9]
 8016e1e:	2b0f      	cmp	r3, #15
 8016e20:	d003      	beq.n	8016e2a <HW_IPCC_BLE_RxEvtNot+0x22>
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	7a5b      	ldrb	r3, [r3, #9]
 8016e26:	2b0e      	cmp	r3, #14
 8016e28:	d105      	bne.n	8016e36 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	2002      	movs	r0, #2
 8016e30:	f000 f94c 	bl	80170cc <OutputDbgTrace>
 8016e34:	e004      	b.n	8016e40 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	4619      	mov	r1, r3
 8016e3a:	2003      	movs	r0, #3
 8016e3c:	f000 f946 	bl	80170cc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8016e40:	4b08      	ldr	r3, [pc, #32]	@ (8016e64 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	687a      	ldr	r2, [r7, #4]
 8016e46:	4610      	mov	r0, r2
 8016e48:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016e4a:	4805      	ldr	r0, [pc, #20]	@ (8016e60 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016e4c:	f000 f9cc 	bl	80171e8 <LST_is_empty>
 8016e50:	4603      	mov	r3, r0
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d0dc      	beq.n	8016e10 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016e56:	bf00      	nop
}
 8016e58:	3708      	adds	r7, #8
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	200300c8 	.word	0x200300c8
 8016e64:	20001584 	.word	0x20001584

08016e68 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016e6c:	4b02      	ldr	r3, [pc, #8]	@ (8016e78 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	4798      	blx	r3

  return;
 8016e72:	bf00      	nop
}
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	20001588 	.word	0x20001588

08016e7c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016e88:	480d      	ldr	r0, [pc, #52]	@ (8016ec0 <TL_SYS_Init+0x44>)
 8016e8a:	f000 f99d 	bl	80171c8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8016ec4 <TL_SYS_Init+0x48>)
 8016e90:	68db      	ldr	r3, [r3, #12]
 8016e92:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	689a      	ldr	r2, [r3, #8]
 8016e98:	68bb      	ldr	r3, [r7, #8]
 8016e9a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	4a08      	ldr	r2, [pc, #32]	@ (8016ec0 <TL_SYS_Init+0x44>)
 8016ea0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016ea2:	f001 fd0f 	bl	80188c4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	4a07      	ldr	r2, [pc, #28]	@ (8016ec8 <TL_SYS_Init+0x4c>)
 8016eac:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	685b      	ldr	r3, [r3, #4]
 8016eb2:	4a06      	ldr	r2, [pc, #24]	@ (8016ecc <TL_SYS_Init+0x50>)
 8016eb4:	6013      	str	r3, [r2, #0]

  return 0;
 8016eb6:	2300      	movs	r3, #0
}
 8016eb8:	4618      	mov	r0, r3
 8016eba:	3710      	adds	r7, #16
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bd80      	pop	{r7, pc}
 8016ec0:	200300d0 	.word	0x200300d0
 8016ec4:	20030000 	.word	0x20030000
 8016ec8:	2000158c 	.word	0x2000158c
 8016ecc:	20001590 	.word	0x20001590

08016ed0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	460b      	mov	r3, r1
 8016eda:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016edc:	4b09      	ldr	r3, [pc, #36]	@ (8016f04 <TL_SYS_SendCmd+0x34>)
 8016ede:	68db      	ldr	r3, [r3, #12]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	2210      	movs	r2, #16
 8016ee4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8016ee6:	4b07      	ldr	r3, [pc, #28]	@ (8016f04 <TL_SYS_SendCmd+0x34>)
 8016ee8:	68db      	ldr	r3, [r3, #12]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	4619      	mov	r1, r3
 8016eee:	2004      	movs	r0, #4
 8016ef0:	f000 f8ec 	bl	80170cc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8016ef4:	f001 fcf0 	bl	80188d8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8016ef8:	2300      	movs	r3, #0
}
 8016efa:	4618      	mov	r0, r3
 8016efc:	3708      	adds	r7, #8
 8016efe:	46bd      	mov	sp, r7
 8016f00:	bd80      	pop	{r7, pc}
 8016f02:	bf00      	nop
 8016f04:	20030000 	.word	0x20030000

08016f08 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016f0c:	4b07      	ldr	r3, [pc, #28]	@ (8016f2c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016f0e:	68db      	ldr	r3, [r3, #12]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	4619      	mov	r1, r3
 8016f14:	2005      	movs	r0, #5
 8016f16:	f000 f8d9 	bl	80170cc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016f1a:	4b05      	ldr	r3, [pc, #20]	@ (8016f30 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	4a03      	ldr	r2, [pc, #12]	@ (8016f2c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016f20:	68d2      	ldr	r2, [r2, #12]
 8016f22:	6812      	ldr	r2, [r2, #0]
 8016f24:	4610      	mov	r0, r2
 8016f26:	4798      	blx	r3

  return;
 8016f28:	bf00      	nop
}
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	20030000 	.word	0x20030000
 8016f30:	2000158c 	.word	0x2000158c

08016f34 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b082      	sub	sp, #8
 8016f38:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016f3a:	e00e      	b.n	8016f5a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016f3c:	1d3b      	adds	r3, r7, #4
 8016f3e:	4619      	mov	r1, r3
 8016f40:	480b      	ldr	r0, [pc, #44]	@ (8016f70 <HW_IPCC_SYS_EvtNot+0x3c>)
 8016f42:	f000 f9e0 	bl	8017306 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	4619      	mov	r1, r3
 8016f4a:	2006      	movs	r0, #6
 8016f4c:	f000 f8be 	bl	80170cc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016f50:	4b08      	ldr	r3, [pc, #32]	@ (8016f74 <HW_IPCC_SYS_EvtNot+0x40>)
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	687a      	ldr	r2, [r7, #4]
 8016f56:	4610      	mov	r0, r2
 8016f58:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016f5a:	4805      	ldr	r0, [pc, #20]	@ (8016f70 <HW_IPCC_SYS_EvtNot+0x3c>)
 8016f5c:	f000 f944 	bl	80171e8 <LST_is_empty>
 8016f60:	4603      	mov	r3, r0
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d0ea      	beq.n	8016f3c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016f66:	bf00      	nop
}
 8016f68:	3708      	adds	r7, #8
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}
 8016f6e:	bf00      	nop
 8016f70:	200300d0 	.word	0x200300d0
 8016f74:	20001590 	.word	0x20001590

08016f78 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b082      	sub	sp, #8
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016f80:	4817      	ldr	r0, [pc, #92]	@ (8016fe0 <TL_MM_Init+0x68>)
 8016f82:	f000 f921 	bl	80171c8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016f86:	4817      	ldr	r0, [pc, #92]	@ (8016fe4 <TL_MM_Init+0x6c>)
 8016f88:	f000 f91e 	bl	80171c8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016f8c:	4b16      	ldr	r3, [pc, #88]	@ (8016fe8 <TL_MM_Init+0x70>)
 8016f8e:	691b      	ldr	r3, [r3, #16]
 8016f90:	4a16      	ldr	r2, [pc, #88]	@ (8016fec <TL_MM_Init+0x74>)
 8016f92:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016f94:	4b15      	ldr	r3, [pc, #84]	@ (8016fec <TL_MM_Init+0x74>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	687a      	ldr	r2, [r7, #4]
 8016f9a:	6892      	ldr	r2, [r2, #8]
 8016f9c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016f9e:	4b13      	ldr	r3, [pc, #76]	@ (8016fec <TL_MM_Init+0x74>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	687a      	ldr	r2, [r7, #4]
 8016fa4:	68d2      	ldr	r2, [r2, #12]
 8016fa6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016fa8:	4b10      	ldr	r3, [pc, #64]	@ (8016fec <TL_MM_Init+0x74>)
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	4a0c      	ldr	r2, [pc, #48]	@ (8016fe0 <TL_MM_Init+0x68>)
 8016fae:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8016fec <TL_MM_Init+0x74>)
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	687a      	ldr	r2, [r7, #4]
 8016fb6:	6812      	ldr	r2, [r2, #0]
 8016fb8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8016fba:	4b0c      	ldr	r3, [pc, #48]	@ (8016fec <TL_MM_Init+0x74>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	687a      	ldr	r2, [r7, #4]
 8016fc0:	6852      	ldr	r2, [r2, #4]
 8016fc2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016fc4:	4b09      	ldr	r3, [pc, #36]	@ (8016fec <TL_MM_Init+0x74>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	6912      	ldr	r2, [r2, #16]
 8016fcc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016fce:	4b07      	ldr	r3, [pc, #28]	@ (8016fec <TL_MM_Init+0x74>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	6952      	ldr	r2, [r2, #20]
 8016fd6:	619a      	str	r2, [r3, #24]

  return;
 8016fd8:	bf00      	nop
}
 8016fda:	3708      	adds	r7, #8
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	200300b8 	.word	0x200300b8
 8016fe4:	2000157c 	.word	0x2000157c
 8016fe8:	20030000 	.word	0x20030000
 8016fec:	20001594 	.word	0x20001594

08016ff0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016ff8:	6879      	ldr	r1, [r7, #4]
 8016ffa:	4807      	ldr	r0, [pc, #28]	@ (8017018 <TL_MM_EvtDone+0x28>)
 8016ffc:	f000 f93c 	bl	8017278 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8017000:	6879      	ldr	r1, [r7, #4]
 8017002:	2000      	movs	r0, #0
 8017004:	f000 f862 	bl	80170cc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8017008:	4804      	ldr	r0, [pc, #16]	@ (801701c <TL_MM_EvtDone+0x2c>)
 801700a:	f001 fc8b 	bl	8018924 <HW_IPCC_MM_SendFreeBuf>

  return;
 801700e:	bf00      	nop
}
 8017010:	3708      	adds	r7, #8
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	2000157c 	.word	0x2000157c
 801701c:	08017021 	.word	0x08017021

08017020 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b082      	sub	sp, #8
 8017024:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8017026:	e00c      	b.n	8017042 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8017028:	1d3b      	adds	r3, r7, #4
 801702a:	4619      	mov	r1, r3
 801702c:	480a      	ldr	r0, [pc, #40]	@ (8017058 <SendFreeBuf+0x38>)
 801702e:	f000 f96a 	bl	8017306 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8017032:	4b0a      	ldr	r3, [pc, #40]	@ (801705c <SendFreeBuf+0x3c>)
 8017034:	691b      	ldr	r3, [r3, #16]
 8017036:	691b      	ldr	r3, [r3, #16]
 8017038:	687a      	ldr	r2, [r7, #4]
 801703a:	4611      	mov	r1, r2
 801703c:	4618      	mov	r0, r3
 801703e:	f000 f91b 	bl	8017278 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8017042:	4805      	ldr	r0, [pc, #20]	@ (8017058 <SendFreeBuf+0x38>)
 8017044:	f000 f8d0 	bl	80171e8 <LST_is_empty>
 8017048:	4603      	mov	r3, r0
 801704a:	2b00      	cmp	r3, #0
 801704c:	d0ec      	beq.n	8017028 <SendFreeBuf+0x8>
  }

  return;
 801704e:	bf00      	nop
}
 8017050:	3708      	adds	r7, #8
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}
 8017056:	bf00      	nop
 8017058:	2000157c 	.word	0x2000157c
 801705c:	20030000 	.word	0x20030000

08017060 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8017060:	b580      	push	{r7, lr}
 8017062:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8017064:	4805      	ldr	r0, [pc, #20]	@ (801707c <TL_TRACES_Init+0x1c>)
 8017066:	f000 f8af 	bl	80171c8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801706a:	4b05      	ldr	r3, [pc, #20]	@ (8017080 <TL_TRACES_Init+0x20>)
 801706c:	695b      	ldr	r3, [r3, #20]
 801706e:	4a03      	ldr	r2, [pc, #12]	@ (801707c <TL_TRACES_Init+0x1c>)
 8017070:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8017072:	f001 fc8d 	bl	8018990 <HW_IPCC_TRACES_Init>

  return;
 8017076:	bf00      	nop
}
 8017078:	bd80      	pop	{r7, pc}
 801707a:	bf00      	nop
 801707c:	200300c0 	.word	0x200300c0
 8017080:	20030000 	.word	0x20030000

08017084 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b082      	sub	sp, #8
 8017088:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801708a:	e008      	b.n	801709e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 801708c:	1d3b      	adds	r3, r7, #4
 801708e:	4619      	mov	r1, r3
 8017090:	4808      	ldr	r0, [pc, #32]	@ (80170b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8017092:	f000 f938 	bl	8017306 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	4618      	mov	r0, r3
 801709a:	f000 f80d 	bl	80170b8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801709e:	4805      	ldr	r0, [pc, #20]	@ (80170b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80170a0:	f000 f8a2 	bl	80171e8 <LST_is_empty>
 80170a4:	4603      	mov	r3, r0
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d0f0      	beq.n	801708c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80170aa:	bf00      	nop
}
 80170ac:	3708      	adds	r7, #8
 80170ae:	46bd      	mov	sp, r7
 80170b0:	bd80      	pop	{r7, pc}
 80170b2:	bf00      	nop
 80170b4:	200300c0 	.word	0x200300c0

080170b8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80170b8:	b480      	push	{r7}
 80170ba:	b083      	sub	sp, #12
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80170c0:	bf00      	nop
 80170c2:	370c      	adds	r7, #12
 80170c4:	46bd      	mov	sp, r7
 80170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ca:	4770      	bx	lr

080170cc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80170cc:	b480      	push	{r7}
 80170ce:	b087      	sub	sp, #28
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	4603      	mov	r3, r0
 80170d4:	6039      	str	r1, [r7, #0]
 80170d6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80170d8:	79fb      	ldrb	r3, [r7, #7]
 80170da:	2b06      	cmp	r3, #6
 80170dc:	d845      	bhi.n	801716a <OutputDbgTrace+0x9e>
 80170de:	a201      	add	r2, pc, #4	@ (adr r2, 80170e4 <OutputDbgTrace+0x18>)
 80170e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170e4:	08017101 	.word	0x08017101
 80170e8:	08017125 	.word	0x08017125
 80170ec:	0801712b 	.word	0x0801712b
 80170f0:	0801713f 	.word	0x0801713f
 80170f4:	0801714b 	.word	0x0801714b
 80170f8:	08017151 	.word	0x08017151
 80170fc:	0801715f 	.word	0x0801715f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	7a5b      	ldrb	r3, [r3, #9]
 8017108:	2bff      	cmp	r3, #255	@ 0xff
 801710a:	d005      	beq.n	8017118 <OutputDbgTrace+0x4c>
 801710c:	2bff      	cmp	r3, #255	@ 0xff
 801710e:	dc05      	bgt.n	801711c <OutputDbgTrace+0x50>
 8017110:	2b0e      	cmp	r3, #14
 8017112:	d005      	beq.n	8017120 <OutputDbgTrace+0x54>
 8017114:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8017116:	e001      	b.n	801711c <OutputDbgTrace+0x50>
          break;
 8017118:	bf00      	nop
 801711a:	e027      	b.n	801716c <OutputDbgTrace+0xa0>
          break;
 801711c:	bf00      	nop
 801711e:	e025      	b.n	801716c <OutputDbgTrace+0xa0>
          break;
 8017120:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8017122:	e023      	b.n	801716c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8017128:	e020      	b.n	801716c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801712e:	697b      	ldr	r3, [r7, #20]
 8017130:	7a5b      	ldrb	r3, [r3, #9]
 8017132:	2b0e      	cmp	r3, #14
 8017134:	d001      	beq.n	801713a <OutputDbgTrace+0x6e>
 8017136:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8017138:	e000      	b.n	801713c <OutputDbgTrace+0x70>
          break;
 801713a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801713c:	e016      	b.n	801716c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8017142:	697b      	ldr	r3, [r7, #20]
 8017144:	7a5b      	ldrb	r3, [r3, #9]
 8017146:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8017148:	e010      	b.n	801716c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801714a:	683b      	ldr	r3, [r7, #0]
 801714c:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801714e:	e00d      	b.n	801716c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8017150:	683b      	ldr	r3, [r7, #0]
 8017152:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	785b      	ldrb	r3, [r3, #1]
 8017158:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 801715a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 801715c:	e006      	b.n	801716c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	7a5b      	ldrb	r3, [r3, #9]
 8017166:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8017168:	e000      	b.n	801716c <OutputDbgTrace+0xa0>

    default:
      break;
 801716a:	bf00      	nop
  }

  return;
 801716c:	bf00      	nop
}
 801716e:	371c      	adds	r7, #28
 8017170:	46bd      	mov	sp, r7
 8017172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017176:	4770      	bx	lr

08017178 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8017178:	b480      	push	{r7}
 801717a:	b085      	sub	sp, #20
 801717c:	af00      	add	r7, sp, #0
 801717e:	4603      	mov	r3, r0
 8017180:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8017182:	4b0f      	ldr	r3, [pc, #60]	@ (80171c0 <OTP_Read+0x48>)
 8017184:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8017186:	e002      	b.n	801718e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	3b08      	subs	r3, #8
 801718c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	3307      	adds	r3, #7
 8017192:	781b      	ldrb	r3, [r3, #0]
 8017194:	79fa      	ldrb	r2, [r7, #7]
 8017196:	429a      	cmp	r2, r3
 8017198:	d003      	beq.n	80171a2 <OTP_Read+0x2a>
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	4a09      	ldr	r2, [pc, #36]	@ (80171c4 <OTP_Read+0x4c>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d1f2      	bne.n	8017188 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	3307      	adds	r3, #7
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	79fa      	ldrb	r2, [r7, #7]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d001      	beq.n	80171b2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80171ae:	2300      	movs	r3, #0
 80171b0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80171b2:	68fb      	ldr	r3, [r7, #12]
}
 80171b4:	4618      	mov	r0, r3
 80171b6:	3714      	adds	r7, #20
 80171b8:	46bd      	mov	sp, r7
 80171ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171be:	4770      	bx	lr
 80171c0:	1fff73f8 	.word	0x1fff73f8
 80171c4:	1fff7000 	.word	0x1fff7000

080171c8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80171c8:	b480      	push	{r7}
 80171ca:	b083      	sub	sp, #12
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	687a      	ldr	r2, [r7, #4]
 80171d4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	687a      	ldr	r2, [r7, #4]
 80171da:	605a      	str	r2, [r3, #4]
}
 80171dc:	bf00      	nop
 80171de:	370c      	adds	r7, #12
 80171e0:	46bd      	mov	sp, r7
 80171e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e6:	4770      	bx	lr

080171e8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80171e8:	b480      	push	{r7}
 80171ea:	b087      	sub	sp, #28
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80171f0:	f3ef 8310 	mrs	r3, PRIMASK
 80171f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80171f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80171f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80171fa:	b672      	cpsid	i
}
 80171fc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	687a      	ldr	r2, [r7, #4]
 8017204:	429a      	cmp	r2, r3
 8017206:	d102      	bne.n	801720e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8017208:	2301      	movs	r3, #1
 801720a:	75fb      	strb	r3, [r7, #23]
 801720c:	e001      	b.n	8017212 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801720e:	2300      	movs	r3, #0
 8017210:	75fb      	strb	r3, [r7, #23]
 8017212:	693b      	ldr	r3, [r7, #16]
 8017214:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017216:	68bb      	ldr	r3, [r7, #8]
 8017218:	f383 8810 	msr	PRIMASK, r3
}
 801721c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801721e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017220:	4618      	mov	r0, r3
 8017222:	371c      	adds	r7, #28
 8017224:	46bd      	mov	sp, r7
 8017226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722a:	4770      	bx	lr

0801722c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 801722c:	b480      	push	{r7}
 801722e:	b087      	sub	sp, #28
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
 8017234:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017236:	f3ef 8310 	mrs	r3, PRIMASK
 801723a:	60fb      	str	r3, [r7, #12]
  return(result);
 801723c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801723e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017240:	b672      	cpsid	i
}
 8017242:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681a      	ldr	r2, [r3, #0]
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	687a      	ldr	r2, [r7, #4]
 8017250:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	683a      	ldr	r2, [r7, #0]
 8017256:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	683a      	ldr	r2, [r7, #0]
 801725e:	605a      	str	r2, [r3, #4]
 8017260:	697b      	ldr	r3, [r7, #20]
 8017262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017264:	693b      	ldr	r3, [r7, #16]
 8017266:	f383 8810 	msr	PRIMASK, r3
}
 801726a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801726c:	bf00      	nop
 801726e:	371c      	adds	r7, #28
 8017270:	46bd      	mov	sp, r7
 8017272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017276:	4770      	bx	lr

08017278 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8017278:	b480      	push	{r7}
 801727a:	b087      	sub	sp, #28
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
 8017280:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017282:	f3ef 8310 	mrs	r3, PRIMASK
 8017286:	60fb      	str	r3, [r7, #12]
  return(result);
 8017288:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801728a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801728c:	b672      	cpsid	i
}
 801728e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	687a      	ldr	r2, [r7, #4]
 8017294:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	685a      	ldr	r2, [r3, #4]
 801729a:	683b      	ldr	r3, [r7, #0]
 801729c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	683a      	ldr	r2, [r7, #0]
 80172a2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	685b      	ldr	r3, [r3, #4]
 80172a8:	683a      	ldr	r2, [r7, #0]
 80172aa:	601a      	str	r2, [r3, #0]
 80172ac:	697b      	ldr	r3, [r7, #20]
 80172ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172b0:	693b      	ldr	r3, [r7, #16]
 80172b2:	f383 8810 	msr	PRIMASK, r3
}
 80172b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80172b8:	bf00      	nop
 80172ba:	371c      	adds	r7, #28
 80172bc:	46bd      	mov	sp, r7
 80172be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c2:	4770      	bx	lr

080172c4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80172c4:	b480      	push	{r7}
 80172c6:	b087      	sub	sp, #28
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80172cc:	f3ef 8310 	mrs	r3, PRIMASK
 80172d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80172d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80172d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80172d6:	b672      	cpsid	i
}
 80172d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	685b      	ldr	r3, [r3, #4]
 80172de:	687a      	ldr	r2, [r7, #4]
 80172e0:	6812      	ldr	r2, [r2, #0]
 80172e2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	687a      	ldr	r2, [r7, #4]
 80172ea:	6852      	ldr	r2, [r2, #4]
 80172ec:	605a      	str	r2, [r3, #4]
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172f2:	693b      	ldr	r3, [r7, #16]
 80172f4:	f383 8810 	msr	PRIMASK, r3
}
 80172f8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80172fa:	bf00      	nop
 80172fc:	371c      	adds	r7, #28
 80172fe:	46bd      	mov	sp, r7
 8017300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017304:	4770      	bx	lr

08017306 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8017306:	b580      	push	{r7, lr}
 8017308:	b086      	sub	sp, #24
 801730a:	af00      	add	r7, sp, #0
 801730c:	6078      	str	r0, [r7, #4]
 801730e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017310:	f3ef 8310 	mrs	r3, PRIMASK
 8017314:	60fb      	str	r3, [r7, #12]
  return(result);
 8017316:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017318:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801731a:	b672      	cpsid	i
}
 801731c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	681a      	ldr	r2, [r3, #0]
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	4618      	mov	r0, r3
 801732c:	f7ff ffca 	bl	80172c4 <LST_remove_node>
 8017330:	697b      	ldr	r3, [r7, #20]
 8017332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017334:	693b      	ldr	r3, [r7, #16]
 8017336:	f383 8810 	msr	PRIMASK, r3
}
 801733a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801733c:	bf00      	nop
 801733e:	3718      	adds	r7, #24
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}

08017344 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b082      	sub	sp, #8
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 801734c:	6878      	ldr	r0, [r7, #4]
 801734e:	f7ea f9ee 	bl	800172e <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8017352:	bf00      	nop
 8017354:	3708      	adds	r7, #8
 8017356:	46bd      	mov	sp, r7
 8017358:	bd80      	pop	{r7, pc}

0801735a <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 801735a:	b580      	push	{r7, lr}
 801735c:	b082      	sub	sp, #8
 801735e:	af00      	add	r7, sp, #0
 8017360:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8017362:	e002      	b.n	801736a <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8017364:	2001      	movs	r0, #1
 8017366:	f7ff ffed 	bl	8017344 <SPIF_Delay>
  while (Handle->Lock)
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	7b1b      	ldrb	r3, [r3, #12]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d1f8      	bne.n	8017364 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	2201      	movs	r2, #1
 8017376:	731a      	strb	r2, [r3, #12]
}
 8017378:	bf00      	nop
 801737a:	3708      	adds	r7, #8
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8017380:	b480      	push	{r7}
 8017382:	b083      	sub	sp, #12
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2200      	movs	r2, #0
 801738c:	731a      	strb	r2, [r3, #12]
}
 801738e:	bf00      	nop
 8017390:	370c      	adds	r7, #12
 8017392:	46bd      	mov	sp, r7
 8017394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017398:	4770      	bx	lr

0801739a <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 801739a:	b580      	push	{r7, lr}
 801739c:	b084      	sub	sp, #16
 801739e:	af00      	add	r7, sp, #0
 80173a0:	6078      	str	r0, [r7, #4]
 80173a2:	460b      	mov	r3, r1
 80173a4:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	6858      	ldr	r0, [r3, #4]
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	691b      	ldr	r3, [r3, #16]
 80173ae:	b29b      	uxth	r3, r3
 80173b0:	78fa      	ldrb	r2, [r7, #3]
 80173b2:	4619      	mov	r1, r3
 80173b4:	f7f2 f934 	bl	8009620 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 80173b8:	2300      	movs	r3, #0
 80173ba:	60fb      	str	r3, [r7, #12]
 80173bc:	e002      	b.n	80173c4 <SPIF_CsPin+0x2a>
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	3301      	adds	r3, #1
 80173c2:	60fb      	str	r3, [r7, #12]
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	2b09      	cmp	r3, #9
 80173c8:	ddf9      	ble.n	80173be <SPIF_CsPin+0x24>
}
 80173ca:	bf00      	nop
 80173cc:	bf00      	nop
 80173ce:	3710      	adds	r7, #16
 80173d0:	46bd      	mov	sp, r7
 80173d2:	bd80      	pop	{r7, pc}

080173d4 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b086      	sub	sp, #24
 80173d8:	af00      	add	r7, sp, #0
 80173da:	60f8      	str	r0, [r7, #12]
 80173dc:	60b9      	str	r1, [r7, #8]
 80173de:	607a      	str	r2, [r7, #4]
 80173e0:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80173e2:	2300      	movs	r3, #0
 80173e4:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80173e6:	f7f0 f8a3 	bl	8007530 <HAL_GetTick>
 80173ea:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	6818      	ldr	r0, [r3, #0]
 80173f0:	683b      	ldr	r3, [r7, #0]
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	68b9      	ldr	r1, [r7, #8]
 80173f8:	f7f6 ffda 	bl	800e3b0 <HAL_SPI_TransmitReceive_DMA>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d11a      	bne.n	8017438 <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8017402:	2001      	movs	r0, #1
 8017404:	f7ff ff9e 	bl	8017344 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8017408:	f7f0 f892 	bl	8007530 <HAL_GetTick>
 801740c:	4602      	mov	r2, r0
 801740e:	693b      	ldr	r3, [r7, #16]
 8017410:	1ad3      	subs	r3, r2, r3
 8017412:	6a3a      	ldr	r2, [r7, #32]
 8017414:	429a      	cmp	r2, r3
 8017416:	d805      	bhi.n	8017424 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	4618      	mov	r0, r3
 801741e:	f7f7 f94d 	bl	800e6bc <HAL_SPI_DMAStop>
        break;
 8017422:	e009      	b.n	8017438 <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	4618      	mov	r0, r3
 801742a:	f7f7 fac1 	bl	800e9b0 <HAL_SPI_GetState>
 801742e:	4603      	mov	r3, r0
 8017430:	2b01      	cmp	r3, #1
 8017432:	d1e6      	bne.n	8017402 <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 8017434:	2301      	movs	r3, #1
 8017436:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017438:	7dfb      	ldrb	r3, [r7, #23]
}
 801743a:	4618      	mov	r0, r3
 801743c:	3718      	adds	r7, #24
 801743e:	46bd      	mov	sp, r7
 8017440:	bd80      	pop	{r7, pc}

08017442 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8017442:	b580      	push	{r7, lr}
 8017444:	b086      	sub	sp, #24
 8017446:	af00      	add	r7, sp, #0
 8017448:	60f8      	str	r0, [r7, #12]
 801744a:	60b9      	str	r1, [r7, #8]
 801744c:	607a      	str	r2, [r7, #4]
 801744e:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8017450:	2300      	movs	r3, #0
 8017452:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8017454:	f7f0 f86c 	bl	8007530 <HAL_GetTick>
 8017458:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	687a      	ldr	r2, [r7, #4]
 8017460:	b292      	uxth	r2, r2
 8017462:	68b9      	ldr	r1, [r7, #8]
 8017464:	4618      	mov	r0, r3
 8017466:	f7f6 fd95 	bl	800df94 <HAL_SPI_Transmit_DMA>
 801746a:	4603      	mov	r3, r0
 801746c:	2b00      	cmp	r3, #0
 801746e:	d11a      	bne.n	80174a6 <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8017470:	2001      	movs	r0, #1
 8017472:	f7ff ff67 	bl	8017344 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8017476:	f7f0 f85b 	bl	8007530 <HAL_GetTick>
 801747a:	4602      	mov	r2, r0
 801747c:	693b      	ldr	r3, [r7, #16]
 801747e:	1ad3      	subs	r3, r2, r3
 8017480:	683a      	ldr	r2, [r7, #0]
 8017482:	429a      	cmp	r2, r3
 8017484:	d805      	bhi.n	8017492 <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	4618      	mov	r0, r3
 801748c:	f7f7 f916 	bl	800e6bc <HAL_SPI_DMAStop>
        break;
 8017490:	e009      	b.n	80174a6 <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	4618      	mov	r0, r3
 8017498:	f7f7 fa8a 	bl	800e9b0 <HAL_SPI_GetState>
 801749c:	4603      	mov	r3, r0
 801749e:	2b01      	cmp	r3, #1
 80174a0:	d1e6      	bne.n	8017470 <SPIF_Transmit+0x2e>
      {
        retVal = true;
 80174a2:	2301      	movs	r3, #1
 80174a4:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80174a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	3718      	adds	r7, #24
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}

080174b0 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b086      	sub	sp, #24
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	60f8      	str	r0, [r7, #12]
 80174b8:	60b9      	str	r1, [r7, #8]
 80174ba:	607a      	str	r2, [r7, #4]
 80174bc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80174be:	2300      	movs	r3, #0
 80174c0:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80174c2:	f7f0 f835 	bl	8007530 <HAL_GetTick>
 80174c6:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	687a      	ldr	r2, [r7, #4]
 80174ce:	b292      	uxth	r2, r2
 80174d0:	68b9      	ldr	r1, [r7, #8]
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7f6 fe4c 	bl	800e170 <HAL_SPI_Receive_DMA>
 80174d8:	4603      	mov	r3, r0
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d11a      	bne.n	8017514 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80174de:	2001      	movs	r0, #1
 80174e0:	f7ff ff30 	bl	8017344 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80174e4:	f7f0 f824 	bl	8007530 <HAL_GetTick>
 80174e8:	4602      	mov	r2, r0
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	1ad3      	subs	r3, r2, r3
 80174ee:	683a      	ldr	r2, [r7, #0]
 80174f0:	429a      	cmp	r2, r3
 80174f2:	d805      	bhi.n	8017500 <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7f7 f8df 	bl	800e6bc <HAL_SPI_DMAStop>
        break;
 80174fe:	e009      	b.n	8017514 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	4618      	mov	r0, r3
 8017506:	f7f7 fa53 	bl	800e9b0 <HAL_SPI_GetState>
 801750a:	4603      	mov	r3, r0
 801750c:	2b01      	cmp	r3, #1
 801750e:	d1e6      	bne.n	80174de <SPIF_Receive+0x2e>
      {
        retVal = true;
 8017510:	2301      	movs	r3, #1
 8017512:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017514:	7dfb      	ldrb	r3, [r7, #23]
}
 8017516:	4618      	mov	r0, r3
 8017518:	3718      	adds	r7, #24
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}

0801751e <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 801751e:	b580      	push	{r7, lr}
 8017520:	b084      	sub	sp, #16
 8017522:	af00      	add	r7, sp, #0
 8017524:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8017526:	2301      	movs	r3, #1
 8017528:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 801752a:	2306      	movs	r3, #6
 801752c:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 801752e:	2100      	movs	r1, #0
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f7ff ff32 	bl	801739a <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8017536:	f107 010c 	add.w	r1, r7, #12
 801753a:	2364      	movs	r3, #100	@ 0x64
 801753c:	2201      	movs	r2, #1
 801753e:	6878      	ldr	r0, [r7, #4]
 8017540:	f7ff ff7f 	bl	8017442 <SPIF_Transmit>
 8017544:	4603      	mov	r3, r0
 8017546:	f083 0301 	eor.w	r3, r3, #1
 801754a:	b2db      	uxtb	r3, r3
 801754c:	2b00      	cmp	r3, #0
 801754e:	d001      	beq.n	8017554 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8017550:	2300      	movs	r3, #0
 8017552:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8017554:	2101      	movs	r1, #1
 8017556:	6878      	ldr	r0, [r7, #4]
 8017558:	f7ff ff1f 	bl	801739a <SPIF_CsPin>
  return retVal;
 801755c:	7bfb      	ldrb	r3, [r7, #15]
}
 801755e:	4618      	mov	r0, r3
 8017560:	3710      	adds	r7, #16
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}

08017566 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8017566:	b580      	push	{r7, lr}
 8017568:	b084      	sub	sp, #16
 801756a:	af00      	add	r7, sp, #0
 801756c:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 801756e:	2301      	movs	r3, #1
 8017570:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8017572:	2304      	movs	r3, #4
 8017574:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8017576:	2100      	movs	r1, #0
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f7ff ff0e 	bl	801739a <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 801757e:	f107 010c 	add.w	r1, r7, #12
 8017582:	2364      	movs	r3, #100	@ 0x64
 8017584:	2201      	movs	r2, #1
 8017586:	6878      	ldr	r0, [r7, #4]
 8017588:	f7ff ff5b 	bl	8017442 <SPIF_Transmit>
 801758c:	4603      	mov	r3, r0
 801758e:	f083 0301 	eor.w	r3, r3, #1
 8017592:	b2db      	uxtb	r3, r3
 8017594:	2b00      	cmp	r3, #0
 8017596:	d001      	beq.n	801759c <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8017598:	2300      	movs	r3, #0
 801759a:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 801759c:	2101      	movs	r1, #1
 801759e:	6878      	ldr	r0, [r7, #4]
 80175a0:	f7ff fefb 	bl	801739a <SPIF_CsPin>
  return retVal;
 80175a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	3710      	adds	r7, #16
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}

080175ae <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 80175ae:	b580      	push	{r7, lr}
 80175b0:	b086      	sub	sp, #24
 80175b2:	af02      	add	r7, sp, #8
 80175b4:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 80175b6:	2300      	movs	r3, #0
 80175b8:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 80175ba:	f24a 5305 	movw	r3, #42245	@ 0xa505
 80175be:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 80175c0:	2100      	movs	r1, #0
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f7ff fee9 	bl	801739a <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 80175c8:	f107 0208 	add.w	r2, r7, #8
 80175cc:	f107 010c 	add.w	r1, r7, #12
 80175d0:	2364      	movs	r3, #100	@ 0x64
 80175d2:	9300      	str	r3, [sp, #0]
 80175d4:	2302      	movs	r3, #2
 80175d6:	6878      	ldr	r0, [r7, #4]
 80175d8:	f7ff fefc 	bl	80173d4 <SPIF_TransmitReceive>
 80175dc:	4603      	mov	r3, r0
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d001      	beq.n	80175e6 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 80175e2:	7a7b      	ldrb	r3, [r7, #9]
 80175e4:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80175e6:	2101      	movs	r1, #1
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f7ff fed6 	bl	801739a <SPIF_CsPin>
  return retVal;
 80175ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	3710      	adds	r7, #16
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}

080175f8 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b084      	sub	sp, #16
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
 8017600:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8017602:	2300      	movs	r3, #0
 8017604:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8017606:	f7ef ff93 	bl	8007530 <HAL_GetTick>
 801760a:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 801760c:	2001      	movs	r0, #1
 801760e:	f7ff fe99 	bl	8017344 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8017612:	f7ef ff8d 	bl	8007530 <HAL_GetTick>
 8017616:	4602      	mov	r2, r0
 8017618:	68bb      	ldr	r3, [r7, #8]
 801761a:	1ad3      	subs	r3, r2, r3
 801761c:	683a      	ldr	r2, [r7, #0]
 801761e:	429a      	cmp	r2, r3
 8017620:	d90a      	bls.n	8017638 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8017622:	6878      	ldr	r0, [r7, #4]
 8017624:	f7ff ffc3 	bl	80175ae <SPIF_ReadReg1>
 8017628:	4603      	mov	r3, r0
 801762a:	f003 0301 	and.w	r3, r3, #1
 801762e:	2b00      	cmp	r3, #0
 8017630:	d1ec      	bne.n	801760c <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8017632:	2301      	movs	r3, #1
 8017634:	73fb      	strb	r3, [r7, #15]
      break;
 8017636:	e000      	b.n	801763a <SPIF_WaitForWriting+0x42>
      break;
 8017638:	bf00      	nop
    }
  }
  return retVal;
 801763a:	7bfb      	ldrb	r3, [r7, #15]
}
 801763c:	4618      	mov	r0, r3
 801763e:	3710      	adds	r7, #16
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b088      	sub	sp, #32
 8017648:	af02      	add	r7, sp, #8
 801764a:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 801764c:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 8017650:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8017652:	2300      	movs	r3, #0
 8017654:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8017656:	2100      	movs	r1, #0
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f7ff fe9e 	bl	801739a <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 801765e:	f107 020c 	add.w	r2, r7, #12
 8017662:	f107 0110 	add.w	r1, r7, #16
 8017666:	2364      	movs	r3, #100	@ 0x64
 8017668:	9300      	str	r3, [sp, #0]
 801766a:	2304      	movs	r3, #4
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f7ff feb1 	bl	80173d4 <SPIF_TransmitReceive>
 8017672:	4603      	mov	r3, r0
 8017674:	f083 0301 	eor.w	r3, r3, #1
 8017678:	b2db      	uxtb	r3, r3
 801767a:	2b00      	cmp	r3, #0
 801767c:	d004      	beq.n	8017688 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 801767e:	2101      	movs	r1, #1
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	f7ff fe8a 	bl	801739a <SPIF_CsPin>
      break;
 8017686:	e16f      	b.n	8017968 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8017688:	2101      	movs	r1, #1
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f7ff fe85 	bl	801739a <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8017690:	7b7a      	ldrb	r2, [r7, #13]
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8017696:	7bba      	ldrb	r2, [r7, #14]
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 801769c:	7bfa      	ldrb	r2, [r7, #15]
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	7a1b      	ldrb	r3, [r3, #8]
 80176a6:	2bef      	cmp	r3, #239	@ 0xef
 80176a8:	f000 80f0 	beq.w	801788c <SPIF_FindChip+0x248>
 80176ac:	2bef      	cmp	r3, #239	@ 0xef
 80176ae:	f300 80e9 	bgt.w	8017884 <SPIF_FindChip+0x240>
 80176b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80176b4:	f300 80e6 	bgt.w	8017884 <SPIF_FindChip+0x240>
 80176b8:	2b85      	cmp	r3, #133	@ 0x85
 80176ba:	da0c      	bge.n	80176d6 <SPIF_FindChip+0x92>
 80176bc:	2b62      	cmp	r3, #98	@ 0x62
 80176be:	f000 80e7 	beq.w	8017890 <SPIF_FindChip+0x24c>
 80176c2:	2b62      	cmp	r3, #98	@ 0x62
 80176c4:	f300 80de 	bgt.w	8017884 <SPIF_FindChip+0x240>
 80176c8:	2b20      	cmp	r3, #32
 80176ca:	f300 80d9 	bgt.w	8017880 <SPIF_FindChip+0x23c>
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	f300 8090 	bgt.w	80177f4 <SPIF_FindChip+0x1b0>
 80176d4:	e0d6      	b.n	8017884 <SPIF_FindChip+0x240>
 80176d6:	3b85      	subs	r3, #133	@ 0x85
 80176d8:	2b43      	cmp	r3, #67	@ 0x43
 80176da:	f200 80d3 	bhi.w	8017884 <SPIF_FindChip+0x240>
 80176de:	a201      	add	r2, pc, #4	@ (adr r2, 80176e4 <SPIF_FindChip+0xa0>)
 80176e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176e4:	08017895 	.word	0x08017895
 80176e8:	08017885 	.word	0x08017885
 80176ec:	08017885 	.word	0x08017885
 80176f0:	08017885 	.word	0x08017885
 80176f4:	08017895 	.word	0x08017895
 80176f8:	08017885 	.word	0x08017885
 80176fc:	08017885 	.word	0x08017885
 8017700:	08017895 	.word	0x08017895
 8017704:	08017885 	.word	0x08017885
 8017708:	08017885 	.word	0x08017885
 801770c:	08017885 	.word	0x08017885
 8017710:	08017885 	.word	0x08017885
 8017714:	08017885 	.word	0x08017885
 8017718:	08017885 	.word	0x08017885
 801771c:	08017885 	.word	0x08017885
 8017720:	08017885 	.word	0x08017885
 8017724:	08017885 	.word	0x08017885
 8017728:	08017885 	.word	0x08017885
 801772c:	08017885 	.word	0x08017885
 8017730:	08017885 	.word	0x08017885
 8017734:	08017885 	.word	0x08017885
 8017738:	08017885 	.word	0x08017885
 801773c:	08017885 	.word	0x08017885
 8017740:	08017885 	.word	0x08017885
 8017744:	08017895 	.word	0x08017895
 8017748:	08017885 	.word	0x08017885
 801774c:	08017885 	.word	0x08017885
 8017750:	08017885 	.word	0x08017885
 8017754:	08017895 	.word	0x08017895
 8017758:	08017885 	.word	0x08017885
 801775c:	08017885 	.word	0x08017885
 8017760:	08017885 	.word	0x08017885
 8017764:	08017885 	.word	0x08017885
 8017768:	08017885 	.word	0x08017885
 801776c:	08017885 	.word	0x08017885
 8017770:	08017885 	.word	0x08017885
 8017774:	08017885 	.word	0x08017885
 8017778:	08017885 	.word	0x08017885
 801777c:	08017885 	.word	0x08017885
 8017780:	08017885 	.word	0x08017885
 8017784:	08017895 	.word	0x08017895
 8017788:	08017885 	.word	0x08017885
 801778c:	08017885 	.word	0x08017885
 8017790:	08017885 	.word	0x08017885
 8017794:	08017885 	.word	0x08017885
 8017798:	08017885 	.word	0x08017885
 801779c:	08017885 	.word	0x08017885
 80177a0:	08017885 	.word	0x08017885
 80177a4:	08017885 	.word	0x08017885
 80177a8:	08017885 	.word	0x08017885
 80177ac:	08017885 	.word	0x08017885
 80177b0:	08017885 	.word	0x08017885
 80177b4:	08017885 	.word	0x08017885
 80177b8:	08017885 	.word	0x08017885
 80177bc:	08017885 	.word	0x08017885
 80177c0:	08017885 	.word	0x08017885
 80177c4:	08017885 	.word	0x08017885
 80177c8:	08017885 	.word	0x08017885
 80177cc:	08017895 	.word	0x08017895
 80177d0:	08017885 	.word	0x08017885
 80177d4:	08017885 	.word	0x08017885
 80177d8:	08017895 	.word	0x08017895
 80177dc:	08017885 	.word	0x08017885
 80177e0:	08017885 	.word	0x08017885
 80177e4:	08017885 	.word	0x08017885
 80177e8:	08017885 	.word	0x08017885
 80177ec:	08017885 	.word	0x08017885
 80177f0:	08017895 	.word	0x08017895
 80177f4:	3b01      	subs	r3, #1
 80177f6:	2b1f      	cmp	r3, #31
 80177f8:	d844      	bhi.n	8017884 <SPIF_FindChip+0x240>
 80177fa:	a201      	add	r2, pc, #4	@ (adr r2, 8017800 <SPIF_FindChip+0x1bc>)
 80177fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017800:	08017899 	.word	0x08017899
 8017804:	08017885 	.word	0x08017885
 8017808:	08017885 	.word	0x08017885
 801780c:	08017899 	.word	0x08017899
 8017810:	08017885 	.word	0x08017885
 8017814:	08017885 	.word	0x08017885
 8017818:	08017885 	.word	0x08017885
 801781c:	08017885 	.word	0x08017885
 8017820:	08017885 	.word	0x08017885
 8017824:	08017885 	.word	0x08017885
 8017828:	08017885 	.word	0x08017885
 801782c:	08017885 	.word	0x08017885
 8017830:	08017885 	.word	0x08017885
 8017834:	08017885 	.word	0x08017885
 8017838:	08017885 	.word	0x08017885
 801783c:	08017885 	.word	0x08017885
 8017840:	08017885 	.word	0x08017885
 8017844:	08017885 	.word	0x08017885
 8017848:	08017885 	.word	0x08017885
 801784c:	08017885 	.word	0x08017885
 8017850:	08017885 	.word	0x08017885
 8017854:	08017885 	.word	0x08017885
 8017858:	08017885 	.word	0x08017885
 801785c:	08017885 	.word	0x08017885
 8017860:	08017885 	.word	0x08017885
 8017864:	08017885 	.word	0x08017885
 8017868:	08017885 	.word	0x08017885
 801786c:	08017899 	.word	0x08017899
 8017870:	08017885 	.word	0x08017885
 8017874:	08017885 	.word	0x08017885
 8017878:	08017885 	.word	0x08017885
 801787c:	08017899 	.word	0x08017899
 8017880:	2b37      	cmp	r3, #55	@ 0x37
 8017882:	d00b      	beq.n	801789c <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	2200      	movs	r2, #0
 8017888:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 801788a:	e008      	b.n	801789e <SPIF_FindChip+0x25a>
      break;
 801788c:	bf00      	nop
 801788e:	e006      	b.n	801789e <SPIF_FindChip+0x25a>
      break;
 8017890:	bf00      	nop
 8017892:	e004      	b.n	801789e <SPIF_FindChip+0x25a>
      break;
 8017894:	bf00      	nop
 8017896:	e002      	b.n	801789e <SPIF_FindChip+0x25a>
      break;
 8017898:	bf00      	nop
 801789a:	e000      	b.n	801789e <SPIF_FindChip+0x25a>
      break;
 801789c:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	7a5b      	ldrb	r3, [r3, #9]
 80178a2:	3b11      	subs	r3, #17
 80178a4:	2b0f      	cmp	r3, #15
 80178a6:	d84e      	bhi.n	8017946 <SPIF_FindChip+0x302>
 80178a8:	a201      	add	r2, pc, #4	@ (adr r2, 80178b0 <SPIF_FindChip+0x26c>)
 80178aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178ae:	bf00      	nop
 80178b0:	080178f1 	.word	0x080178f1
 80178b4:	080178f9 	.word	0x080178f9
 80178b8:	08017901 	.word	0x08017901
 80178bc:	08017909 	.word	0x08017909
 80178c0:	08017911 	.word	0x08017911
 80178c4:	08017919 	.word	0x08017919
 80178c8:	08017921 	.word	0x08017921
 80178cc:	08017929 	.word	0x08017929
 80178d0:	08017933 	.word	0x08017933
 80178d4:	08017947 	.word	0x08017947
 80178d8:	08017947 	.word	0x08017947
 80178dc:	08017947 	.word	0x08017947
 80178e0:	08017947 	.word	0x08017947
 80178e4:	08017947 	.word	0x08017947
 80178e8:	08017947 	.word	0x08017947
 80178ec:	0801793d 	.word	0x0801793d
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2202      	movs	r2, #2
 80178f4:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80178f6:	e02a      	b.n	801794e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2204      	movs	r2, #4
 80178fc:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80178fe:	e026      	b.n	801794e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	2208      	movs	r2, #8
 8017904:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8017906:	e022      	b.n	801794e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2210      	movs	r2, #16
 801790c:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 801790e:	e01e      	b.n	801794e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	2220      	movs	r2, #32
 8017914:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8017916:	e01a      	b.n	801794e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	2240      	movs	r2, #64	@ 0x40
 801791c:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801791e:	e016      	b.n	801794e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	2280      	movs	r2, #128	@ 0x80
 8017924:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8017926:	e012      	b.n	801794e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801792e:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8017930:	e00d      	b.n	801794e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017938:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 801793a:	e008      	b.n	801794e <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017942:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8017944:	e003      	b.n	801794e <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	2200      	movs	r2, #0
 801794a:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 801794c:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	69db      	ldr	r3, [r3, #28]
 8017952:	011a      	lsls	r2, r3, #4
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	699b      	ldr	r3, [r3, #24]
 801795c:	031b      	lsls	r3, r3, #12
 801795e:	0a1a      	lsrs	r2, r3, #8
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8017964:	2301      	movs	r3, #1
 8017966:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017968:	7dfb      	ldrb	r3, [r7, #23]
}
 801796a:	4618      	mov	r0, r3
 801796c:	3718      	adds	r7, #24
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
 8017972:	bf00      	nop

08017974 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b08a      	sub	sp, #40	@ 0x28
 8017978:	af00      	add	r7, sp, #0
 801797a:	60f8      	str	r0, [r7, #12]
 801797c:	60b9      	str	r1, [r7, #8]
 801797e:	607a      	str	r2, [r7, #4]
 8017980:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8017982:	2300      	movs	r3, #0
 8017984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8017988:	2300      	movs	r3, #0
 801798a:	623b      	str	r3, [r7, #32]
 801798c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801798e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017992:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	695b      	ldr	r3, [r3, #20]
 8017998:	68ba      	ldr	r2, [r7, #8]
 801799a:	429a      	cmp	r2, r3
 801799c:	f080 8084 	bcs.w	8017aa8 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 80179a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179a2:	2bff      	cmp	r3, #255	@ 0xff
 80179a4:	f200 8082 	bhi.w	8017aac <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 80179a8:	683a      	ldr	r2, [r7, #0]
 80179aa:	69fb      	ldr	r3, [r7, #28]
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d901      	bls.n	80179b4 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 80179b0:	69fb      	ldr	r3, [r7, #28]
 80179b2:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	021b      	lsls	r3, r3, #8
 80179b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80179ba:	4413      	add	r3, r2
 80179bc:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80179be:	68f8      	ldr	r0, [r7, #12]
 80179c0:	f7ff fdad 	bl	801751e <SPIF_WriteEnable>
 80179c4:	4603      	mov	r3, r0
 80179c6:	f083 0301 	eor.w	r3, r3, #1
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d16f      	bne.n	8017ab0 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80179d0:	2100      	movs	r1, #0
 80179d2:	68f8      	ldr	r0, [r7, #12]
 80179d4:	f7ff fce1 	bl	801739a <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	69db      	ldr	r3, [r3, #28]
 80179dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80179e0:	d322      	bcc.n	8017a28 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80179e2:	2312      	movs	r3, #18
 80179e4:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80179e6:	6a3b      	ldr	r3, [r7, #32]
 80179e8:	0e1b      	lsrs	r3, r3, #24
 80179ea:	b2db      	uxtb	r3, r3
 80179ec:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80179ee:	6a3b      	ldr	r3, [r7, #32]
 80179f0:	0c1b      	lsrs	r3, r3, #16
 80179f2:	b2db      	uxtb	r3, r3
 80179f4:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80179f6:	6a3b      	ldr	r3, [r7, #32]
 80179f8:	0a1b      	lsrs	r3, r3, #8
 80179fa:	b2db      	uxtb	r3, r3
 80179fc:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80179fe:	6a3b      	ldr	r3, [r7, #32]
 8017a00:	b2db      	uxtb	r3, r3
 8017a02:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017a04:	f107 0114 	add.w	r1, r7, #20
 8017a08:	2364      	movs	r3, #100	@ 0x64
 8017a0a:	2205      	movs	r2, #5
 8017a0c:	68f8      	ldr	r0, [r7, #12]
 8017a0e:	f7ff fd18 	bl	8017442 <SPIF_Transmit>
 8017a12:	4603      	mov	r3, r0
 8017a14:	f083 0301 	eor.w	r3, r3, #1
 8017a18:	b2db      	uxtb	r3, r3
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d023      	beq.n	8017a66 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8017a1e:	2101      	movs	r1, #1
 8017a20:	68f8      	ldr	r0, [r7, #12]
 8017a22:	f7ff fcba 	bl	801739a <SPIF_CsPin>
        break;
 8017a26:	e044      	b.n	8017ab2 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8017a28:	2302      	movs	r3, #2
 8017a2a:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017a2c:	6a3b      	ldr	r3, [r7, #32]
 8017a2e:	0c1b      	lsrs	r3, r3, #16
 8017a30:	b2db      	uxtb	r3, r3
 8017a32:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017a34:	6a3b      	ldr	r3, [r7, #32]
 8017a36:	0a1b      	lsrs	r3, r3, #8
 8017a38:	b2db      	uxtb	r3, r3
 8017a3a:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8017a3c:	6a3b      	ldr	r3, [r7, #32]
 8017a3e:	b2db      	uxtb	r3, r3
 8017a40:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017a42:	f107 0114 	add.w	r1, r7, #20
 8017a46:	2364      	movs	r3, #100	@ 0x64
 8017a48:	2204      	movs	r2, #4
 8017a4a:	68f8      	ldr	r0, [r7, #12]
 8017a4c:	f7ff fcf9 	bl	8017442 <SPIF_Transmit>
 8017a50:	4603      	mov	r3, r0
 8017a52:	f083 0301 	eor.w	r3, r3, #1
 8017a56:	b2db      	uxtb	r3, r3
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d004      	beq.n	8017a66 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8017a5c:	2101      	movs	r1, #1
 8017a5e:	68f8      	ldr	r0, [r7, #12]
 8017a60:	f7ff fc9b 	bl	801739a <SPIF_CsPin>
        break;
 8017a64:	e025      	b.n	8017ab2 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8017a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017a6a:	683a      	ldr	r2, [r7, #0]
 8017a6c:	6879      	ldr	r1, [r7, #4]
 8017a6e:	68f8      	ldr	r0, [r7, #12]
 8017a70:	f7ff fce7 	bl	8017442 <SPIF_Transmit>
 8017a74:	4603      	mov	r3, r0
 8017a76:	f083 0301 	eor.w	r3, r3, #1
 8017a7a:	b2db      	uxtb	r3, r3
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d004      	beq.n	8017a8a <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8017a80:	2101      	movs	r1, #1
 8017a82:	68f8      	ldr	r0, [r7, #12]
 8017a84:	f7ff fc89 	bl	801739a <SPIF_CsPin>
      break;
 8017a88:	e013      	b.n	8017ab2 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8017a8a:	2101      	movs	r1, #1
 8017a8c:	68f8      	ldr	r0, [r7, #12]
 8017a8e:	f7ff fc84 	bl	801739a <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8017a92:	2164      	movs	r1, #100	@ 0x64
 8017a94:	68f8      	ldr	r0, [r7, #12]
 8017a96:	f7ff fdaf 	bl	80175f8 <SPIF_WaitForWriting>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d008      	beq.n	8017ab2 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017aa6:	e004      	b.n	8017ab2 <SPIF_WriteFn+0x13e>
      break;
 8017aa8:	bf00      	nop
 8017aaa:	e002      	b.n	8017ab2 <SPIF_WriteFn+0x13e>
      break;
 8017aac:	bf00      	nop
 8017aae:	e000      	b.n	8017ab2 <SPIF_WriteFn+0x13e>
      break;
 8017ab0:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8017ab2:	68f8      	ldr	r0, [r7, #12]
 8017ab4:	f7ff fd57 	bl	8017566 <SPIF_WriteDisable>
  return retVal;
 8017ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8017abc:	4618      	mov	r0, r3
 8017abe:	3728      	adds	r7, #40	@ 0x28
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}

08017ac4 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b086      	sub	sp, #24
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	60f8      	str	r0, [r7, #12]
 8017acc:	60b9      	str	r1, [r7, #8]
 8017ace:	607a      	str	r2, [r7, #4]
 8017ad0:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8017ad6:	2100      	movs	r1, #0
 8017ad8:	68f8      	ldr	r0, [r7, #12]
 8017ada:	f7ff fc5e 	bl	801739a <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	69db      	ldr	r3, [r3, #28]
 8017ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017ae6:	d322      	bcc.n	8017b2e <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8017ae8:	2313      	movs	r3, #19
 8017aea:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	0e1b      	lsrs	r3, r3, #24
 8017af0:	b2db      	uxtb	r3, r3
 8017af2:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	0c1b      	lsrs	r3, r3, #16
 8017af8:	b2db      	uxtb	r3, r3
 8017afa:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8017afc:	68bb      	ldr	r3, [r7, #8]
 8017afe:	0a1b      	lsrs	r3, r3, #8
 8017b00:	b2db      	uxtb	r3, r3
 8017b02:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	b2db      	uxtb	r3, r3
 8017b08:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017b0a:	f107 0110 	add.w	r1, r7, #16
 8017b0e:	2364      	movs	r3, #100	@ 0x64
 8017b10:	2205      	movs	r2, #5
 8017b12:	68f8      	ldr	r0, [r7, #12]
 8017b14:	f7ff fc95 	bl	8017442 <SPIF_Transmit>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	f083 0301 	eor.w	r3, r3, #1
 8017b1e:	b2db      	uxtb	r3, r3
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d023      	beq.n	8017b6c <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017b24:	2101      	movs	r1, #1
 8017b26:	68f8      	ldr	r0, [r7, #12]
 8017b28:	f7ff fc37 	bl	801739a <SPIF_CsPin>
        break;
 8017b2c:	e036      	b.n	8017b9c <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8017b2e:	2303      	movs	r3, #3
 8017b30:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8017b32:	68bb      	ldr	r3, [r7, #8]
 8017b34:	0c1b      	lsrs	r3, r3, #16
 8017b36:	b2db      	uxtb	r3, r3
 8017b38:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8017b3a:	68bb      	ldr	r3, [r7, #8]
 8017b3c:	0a1b      	lsrs	r3, r3, #8
 8017b3e:	b2db      	uxtb	r3, r3
 8017b40:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	b2db      	uxtb	r3, r3
 8017b46:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017b48:	f107 0110 	add.w	r1, r7, #16
 8017b4c:	2364      	movs	r3, #100	@ 0x64
 8017b4e:	2204      	movs	r2, #4
 8017b50:	68f8      	ldr	r0, [r7, #12]
 8017b52:	f7ff fc76 	bl	8017442 <SPIF_Transmit>
 8017b56:	4603      	mov	r3, r0
 8017b58:	f083 0301 	eor.w	r3, r3, #1
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d004      	beq.n	8017b6c <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017b62:	2101      	movs	r1, #1
 8017b64:	68f8      	ldr	r0, [r7, #12]
 8017b66:	f7ff fc18 	bl	801739a <SPIF_CsPin>
        break;
 8017b6a:	e017      	b.n	8017b9c <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8017b6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8017b70:	683a      	ldr	r2, [r7, #0]
 8017b72:	6879      	ldr	r1, [r7, #4]
 8017b74:	68f8      	ldr	r0, [r7, #12]
 8017b76:	f7ff fc9b 	bl	80174b0 <SPIF_Receive>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	f083 0301 	eor.w	r3, r3, #1
 8017b80:	b2db      	uxtb	r3, r3
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d004      	beq.n	8017b90 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8017b86:	2101      	movs	r1, #1
 8017b88:	68f8      	ldr	r0, [r7, #12]
 8017b8a:	f7ff fc06 	bl	801739a <SPIF_CsPin>
      break;
 8017b8e:	e005      	b.n	8017b9c <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8017b90:	2101      	movs	r1, #1
 8017b92:	68f8      	ldr	r0, [r7, #12]
 8017b94:	f7ff fc01 	bl	801739a <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8017b98:	2301      	movs	r3, #1
 8017b9a:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	3718      	adds	r7, #24
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	bd80      	pop	{r7, pc}

08017ba6 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8017ba6:	b580      	push	{r7, lr}
 8017ba8:	b086      	sub	sp, #24
 8017baa:	af00      	add	r7, sp, #0
 8017bac:	60f8      	str	r0, [r7, #12]
 8017bae:	60b9      	str	r1, [r7, #8]
 8017bb0:	607a      	str	r2, [r7, #4]
 8017bb2:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d03a      	beq.n	8017c34 <SPIF_Init+0x8e>
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d037      	beq.n	8017c34 <SPIF_Init+0x8e>
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d034      	beq.n	8017c34 <SPIF_Init+0x8e>
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	7a9b      	ldrb	r3, [r3, #10]
 8017bce:	2b01      	cmp	r3, #1
 8017bd0:	d030      	beq.n	8017c34 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8017bd2:	2220      	movs	r2, #32
 8017bd4:	2100      	movs	r1, #0
 8017bd6:	68f8      	ldr	r0, [r7, #12]
 8017bd8:	f003 fe17 	bl	801b80a <memset>
    Handle->HSpi = HSpi;
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	68ba      	ldr	r2, [r7, #8]
 8017be0:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	687a      	ldr	r2, [r7, #4]
 8017be6:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8017be8:	887a      	ldrh	r2, [r7, #2]
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8017bee:	2101      	movs	r1, #1
 8017bf0:	68f8      	ldr	r0, [r7, #12]
 8017bf2:	f7ff fbd2 	bl	801739a <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8017bf6:	e002      	b.n	8017bfe <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8017bf8:	2001      	movs	r0, #1
 8017bfa:	f7ff fba3 	bl	8017344 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8017bfe:	f7ef fc97 	bl	8007530 <HAL_GetTick>
 8017c02:	4603      	mov	r3, r0
 8017c04:	2b13      	cmp	r3, #19
 8017c06:	d9f7      	bls.n	8017bf8 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8017c08:	68f8      	ldr	r0, [r7, #12]
 8017c0a:	f7ff fcac 	bl	8017566 <SPIF_WriteDisable>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	f083 0301 	eor.w	r3, r3, #1
 8017c14:	b2db      	uxtb	r3, r3
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d10b      	bne.n	8017c32 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8017c1a:	68f8      	ldr	r0, [r7, #12]
 8017c1c:	f7ff fd12 	bl	8017644 <SPIF_FindChip>
 8017c20:	4603      	mov	r3, r0
 8017c22:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8017c24:	7dfb      	ldrb	r3, [r7, #23]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d004      	beq.n	8017c34 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2201      	movs	r2, #1
 8017c2e:	729a      	strb	r2, [r3, #10]
 8017c30:	e000      	b.n	8017c34 <SPIF_Init+0x8e>
      break;
 8017c32:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8017c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3718      	adds	r7, #24
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}

08017c3e <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8017c3e:	b580      	push	{r7, lr}
 8017c40:	b086      	sub	sp, #24
 8017c42:	af00      	add	r7, sp, #0
 8017c44:	6078      	str	r0, [r7, #4]
 8017c46:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	f7ff fb86 	bl	801735a <SPIF_Lock>
  bool retVal = false;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	031b      	lsls	r3, r3, #12
 8017c56:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	699b      	ldr	r3, [r3, #24]
 8017c5c:	683a      	ldr	r2, [r7, #0]
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d262      	bcs.n	8017d28 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7ff fc5b 	bl	801751e <SPIF_WriteEnable>
 8017c68:	4603      	mov	r3, r0
 8017c6a:	f083 0301 	eor.w	r3, r3, #1
 8017c6e:	b2db      	uxtb	r3, r3
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d15b      	bne.n	8017d2c <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8017c74:	2100      	movs	r1, #0
 8017c76:	6878      	ldr	r0, [r7, #4]
 8017c78:	f7ff fb8f 	bl	801739a <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	69db      	ldr	r3, [r3, #28]
 8017c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017c84:	d322      	bcc.n	8017ccc <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8017c86:	2321      	movs	r3, #33	@ 0x21
 8017c88:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8017c8a:	693b      	ldr	r3, [r7, #16]
 8017c8c:	0e1b      	lsrs	r3, r3, #24
 8017c8e:	b2db      	uxtb	r3, r3
 8017c90:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8017c92:	693b      	ldr	r3, [r7, #16]
 8017c94:	0c1b      	lsrs	r3, r3, #16
 8017c96:	b2db      	uxtb	r3, r3
 8017c98:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8017c9a:	693b      	ldr	r3, [r7, #16]
 8017c9c:	0a1b      	lsrs	r3, r3, #8
 8017c9e:	b2db      	uxtb	r3, r3
 8017ca0:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8017ca2:	693b      	ldr	r3, [r7, #16]
 8017ca4:	b2db      	uxtb	r3, r3
 8017ca6:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017ca8:	f107 0108 	add.w	r1, r7, #8
 8017cac:	2364      	movs	r3, #100	@ 0x64
 8017cae:	2205      	movs	r2, #5
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f7ff fbc6 	bl	8017442 <SPIF_Transmit>
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	f083 0301 	eor.w	r3, r3, #1
 8017cbc:	b2db      	uxtb	r3, r3
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d023      	beq.n	8017d0a <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8017cc2:	2101      	movs	r1, #1
 8017cc4:	6878      	ldr	r0, [r7, #4]
 8017cc6:	f7ff fb68 	bl	801739a <SPIF_CsPin>
        break;
 8017cca:	e030      	b.n	8017d2e <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8017ccc:	2320      	movs	r3, #32
 8017cce:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017cd0:	693b      	ldr	r3, [r7, #16]
 8017cd2:	0c1b      	lsrs	r3, r3, #16
 8017cd4:	b2db      	uxtb	r3, r3
 8017cd6:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017cd8:	693b      	ldr	r3, [r7, #16]
 8017cda:	0a1b      	lsrs	r3, r3, #8
 8017cdc:	b2db      	uxtb	r3, r3
 8017cde:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8017ce0:	693b      	ldr	r3, [r7, #16]
 8017ce2:	b2db      	uxtb	r3, r3
 8017ce4:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017ce6:	f107 0108 	add.w	r1, r7, #8
 8017cea:	2364      	movs	r3, #100	@ 0x64
 8017cec:	2204      	movs	r2, #4
 8017cee:	6878      	ldr	r0, [r7, #4]
 8017cf0:	f7ff fba7 	bl	8017442 <SPIF_Transmit>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	f083 0301 	eor.w	r3, r3, #1
 8017cfa:	b2db      	uxtb	r3, r3
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d004      	beq.n	8017d0a <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8017d00:	2101      	movs	r1, #1
 8017d02:	6878      	ldr	r0, [r7, #4]
 8017d04:	f7ff fb49 	bl	801739a <SPIF_CsPin>
        break;
 8017d08:	e011      	b.n	8017d2e <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8017d0a:	2101      	movs	r1, #1
 8017d0c:	6878      	ldr	r0, [r7, #4]
 8017d0e:	f7ff fb44 	bl	801739a <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8017d12:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017d16:	6878      	ldr	r0, [r7, #4]
 8017d18:	f7ff fc6e 	bl	80175f8 <SPIF_WaitForWriting>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d005      	beq.n	8017d2e <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8017d22:	2301      	movs	r3, #1
 8017d24:	75fb      	strb	r3, [r7, #23]
 8017d26:	e002      	b.n	8017d2e <SPIF_EraseSector+0xf0>
      break;
 8017d28:	bf00      	nop
 8017d2a:	e000      	b.n	8017d2e <SPIF_EraseSector+0xf0>
      break;
 8017d2c:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8017d2e:	6878      	ldr	r0, [r7, #4]
 8017d30:	f7ff fc19 	bl	8017566 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8017d34:	6878      	ldr	r0, [r7, #4]
 8017d36:	f7ff fb23 	bl	8017380 <SPIF_UnLock>
  return retVal;
 8017d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	3718      	adds	r7, #24
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}

08017d44 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b088      	sub	sp, #32
 8017d48:	af02      	add	r7, sp, #8
 8017d4a:	60f8      	str	r0, [r7, #12]
 8017d4c:	60b9      	str	r1, [r7, #8]
 8017d4e:	607a      	str	r2, [r7, #4]
 8017d50:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017d52:	68f8      	ldr	r0, [r7, #12]
 8017d54:	f7ff fb01 	bl	801735a <SPIF_Lock>
  bool retVal = false;
 8017d58:	2300      	movs	r3, #0
 8017d5a:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8017d5c:	6a3b      	ldr	r3, [r7, #32]
 8017d5e:	9300      	str	r3, [sp, #0]
 8017d60:	683b      	ldr	r3, [r7, #0]
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	68b9      	ldr	r1, [r7, #8]
 8017d66:	68f8      	ldr	r0, [r7, #12]
 8017d68:	f7ff fe04 	bl	8017974 <SPIF_WriteFn>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8017d70:	68f8      	ldr	r0, [r7, #12]
 8017d72:	f7ff fb05 	bl	8017380 <SPIF_UnLock>
  return retVal;
 8017d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3718      	adds	r7, #24
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}

08017d80 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b088      	sub	sp, #32
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	60f8      	str	r0, [r7, #12]
 8017d88:	60b9      	str	r1, [r7, #8]
 8017d8a:	607a      	str	r2, [r7, #4]
 8017d8c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017d8e:	68f8      	ldr	r0, [r7, #12]
 8017d90:	f7ff fae3 	bl	801735a <SPIF_Lock>
  bool retVal = false;
 8017d94:	2300      	movs	r3, #0
 8017d96:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	021b      	lsls	r3, r3, #8
 8017d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d9e:	4413      	add	r3, r2
 8017da0:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8017da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017da4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017da8:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8017daa:	683a      	ldr	r2, [r7, #0]
 8017dac:	697b      	ldr	r3, [r7, #20]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d901      	bls.n	8017db6 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8017db2:	697b      	ldr	r3, [r7, #20]
 8017db4:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	687a      	ldr	r2, [r7, #4]
 8017dba:	69b9      	ldr	r1, [r7, #24]
 8017dbc:	68f8      	ldr	r0, [r7, #12]
 8017dbe:	f7ff fe81 	bl	8017ac4 <SPIF_ReadFn>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8017dc6:	68f8      	ldr	r0, [r7, #12]
 8017dc8:	f7ff fada 	bl	8017380 <SPIF_UnLock>
  return retVal;
 8017dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3720      	adds	r7, #32
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
	...

08017dd8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8017dd8:	b480      	push	{r7}
 8017dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8017ddc:	4b03      	ldr	r3, [pc, #12]	@ (8017dec <LL_FLASH_GetUDN+0x14>)
 8017dde:	681b      	ldr	r3, [r3, #0]
}
 8017de0:	4618      	mov	r0, r3
 8017de2:	46bd      	mov	sp, r7
 8017de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de8:	4770      	bx	lr
 8017dea:	bf00      	nop
 8017dec:	1fff7580 	.word	0x1fff7580

08017df0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8017df0:	b480      	push	{r7}
 8017df2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8017df4:	4b03      	ldr	r3, [pc, #12]	@ (8017e04 <LL_FLASH_GetDeviceID+0x14>)
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	b2db      	uxtb	r3, r3
}
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr
 8017e04:	1fff7584 	.word	0x1fff7584

08017e08 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8017e08:	b480      	push	{r7}
 8017e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8017e0c:	4b03      	ldr	r3, [pc, #12]	@ (8017e1c <LL_FLASH_GetSTCompanyID+0x14>)
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	0a1b      	lsrs	r3, r3, #8
}
 8017e12:	4618      	mov	r0, r3
 8017e14:	46bd      	mov	sp, r7
 8017e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1a:	4770      	bx	lr
 8017e1c:	1fff7584 	.word	0x1fff7584

08017e20 <APP_BLE_Init>:
/* USER CODE BEGIN EV */
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8017e20:	b5b0      	push	{r4, r5, r7, lr}
 8017e22:	b090      	sub	sp, #64	@ 0x40
 8017e24:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017e26:	2392      	movs	r3, #146	@ 0x92
 8017e28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8017e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8017ee8 <APP_BLE_Init+0xc8>)
 8017e2e:	1d3c      	adds	r4, r7, #4
 8017e30:	461d      	mov	r5, r3
 8017e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017e3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017e42:	c403      	stmia	r4!, {r0, r1}
 8017e44:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8017e46:	f000 f91b 	bl	8018080 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8017e4a:	2101      	movs	r1, #1
 8017e4c:	2002      	movs	r0, #2
 8017e4e:	f001 fb17 	bl	8019480 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8017e52:	4a26      	ldr	r2, [pc, #152]	@ (8017eec <APP_BLE_Init+0xcc>)
 8017e54:	2100      	movs	r1, #0
 8017e56:	2002      	movs	r0, #2
 8017e58:	f001 fc3e 	bl	80196d8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8017e5c:	1d3b      	adds	r3, r7, #4
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f7fe fb7c 	bl	801655c <SHCI_C2_BLE_Init>
 8017e64:	4603      	mov	r3, r0
 8017e66:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8017e6a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d001      	beq.n	8017e76 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8017e72:	f7ea ffbd 	bl	8002df0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8017e76:	f000 f919 	bl	80180ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8017e7a:	f7fe fac9 	bl	8016410 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8017ef0 <APP_BLE_Init+0xd0>)
 8017e80:	2200      	movs	r2, #0
 8017e82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8017e86:	4b1a      	ldr	r3, [pc, #104]	@ (8017ef0 <APP_BLE_Init+0xd0>)
 8017e88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e8c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8017e8e:	4a19      	ldr	r2, [pc, #100]	@ (8017ef4 <APP_BLE_Init+0xd4>)
 8017e90:	2100      	movs	r1, #0
 8017e92:	2001      	movs	r0, #1
 8017e94:	f001 fc20 	bl	80196d8 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8017e98:	2006      	movs	r0, #6
 8017e9a:	f7fd ffa9 	bl	8015df0 <aci_hal_set_radio_activity_mask>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8017ea4:	f000 fb3a 	bl	801851c <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8017ea8:	4b13      	ldr	r3, [pc, #76]	@ (8017ef8 <APP_BLE_Init+0xd8>)
 8017eaa:	2200      	movs	r2, #0
 8017eac:	4913      	ldr	r1, [pc, #76]	@ (8017efc <APP_BLE_Init+0xdc>)
 8017eae:	2000      	movs	r0, #0
 8017eb0:	f7ea fa40 	bl	8002334 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8017eb4:	4b12      	ldr	r3, [pc, #72]	@ (8017f00 <APP_BLE_Init+0xe0>)
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	4912      	ldr	r1, [pc, #72]	@ (8017f04 <APP_BLE_Init+0xe4>)
 8017eba:	2000      	movs	r0, #0
 8017ebc:	f7ea fa3a 	bl	8002334 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8017ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8017ef0 <APP_BLE_Init+0xd0>)
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8017ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8017ef0 <APP_BLE_Init+0xd0>)
 8017ec8:	2200      	movs	r2, #0
 8017eca:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8017ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8017f08 <APP_BLE_Init+0xe8>)
 8017ece:	2280      	movs	r2, #128	@ 0x80
 8017ed0:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8017ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8017f0c <APP_BLE_Init+0xec>)
 8017ed4:	22a0      	movs	r2, #160	@ 0xa0
 8017ed6:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8017ed8:	2001      	movs	r0, #1
 8017eda:	f000 f9b9 	bl	8018250 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  /* USER CODE END APP_BLE_Init_2 */

  return;
 8017ede:	bf00      	nop
}
 8017ee0:	3740      	adds	r7, #64	@ 0x40
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8017ee6:	bf00      	nop
 8017ee8:	08020054 	.word	0x08020054
 8017eec:	08016779 	.word	0x08016779
 8017ef0:	200015a0 	.word	0x200015a0
 8017ef4:	080183b9 	.word	0x080183b9
 8017ef8:	080183ed 	.word	0x080183ed
 8017efc:	20001621 	.word	0x20001621
 8017f00:	080183fd 	.word	0x080183fd
 8017f04:	20001622 	.word	0x20001622
 8017f08:	20001624 	.word	0x20001624
 8017f0c:	20001626 	.word	0x20001626

08017f10 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b08a      	sub	sp, #40	@ 0x28
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017f18:	2392      	movs	r3, #146	@ 0x92
 8017f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif /* CFG_DEBUG_APP_TRACE != 0 */

  /* USER CODE BEGIN SVCCTL_App_Notification */
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	3301      	adds	r3, #1
 8017f22:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8017f24:	6a3b      	ldr	r3, [r7, #32]
 8017f26:	781b      	ldrb	r3, [r3, #0]
 8017f28:	2bff      	cmp	r3, #255	@ 0xff
 8017f2a:	d076      	beq.n	801801a <SVCCTL_App_Notification+0x10a>
 8017f2c:	2bff      	cmp	r3, #255	@ 0xff
 8017f2e:	f300 809b 	bgt.w	8018068 <SVCCTL_App_Notification+0x158>
 8017f32:	2b05      	cmp	r3, #5
 8017f34:	d002      	beq.n	8017f3c <SVCCTL_App_Notification+0x2c>
 8017f36:	2b3e      	cmp	r3, #62	@ 0x3e
 8017f38:	d020      	beq.n	8017f7c <SVCCTL_App_Notification+0x6c>
      /* USER CODE END EVENT_PCKT */

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/
      /* USER CODE END ECODE_DEFAULT*/
      break;
 8017f3a:	e095      	b.n	8018068 <SVCCTL_App_Notification+0x158>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8017f3c:	6a3b      	ldr	r3, [r7, #32]
 8017f3e:	3302      	adds	r3, #2
 8017f40:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017f48:	b29a      	uxth	r2, r3
 8017f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017f4c:	8adb      	ldrh	r3, [r3, #22]
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d106      	bne.n	8017f60 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8017f52:	4b49      	ldr	r3, [pc, #292]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017f54:	2200      	movs	r2, #0
 8017f56:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017f58:	4b47      	ldr	r3, [pc, #284]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8017f60:	2001      	movs	r0, #1
 8017f62:	f000 f975 	bl	8018250 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8017f66:	4b45      	ldr	r3, [pc, #276]	@ (801807c <SVCCTL_App_Notification+0x16c>)
 8017f68:	2201      	movs	r2, #1
 8017f6a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017f6c:	4b42      	ldr	r3, [pc, #264]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017f6e:	8ada      	ldrh	r2, [r3, #22]
 8017f70:	4b42      	ldr	r3, [pc, #264]	@ (801807c <SVCCTL_App_Notification+0x16c>)
 8017f72:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8017f74:	4841      	ldr	r0, [pc, #260]	@ (801807c <SVCCTL_App_Notification+0x16c>)
 8017f76:	f000 fabd 	bl	80184f4 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8017f7a:	e078      	b.n	801806e <SVCCTL_App_Notification+0x15e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8017f7c:	6a3b      	ldr	r3, [r7, #32]
 8017f7e:	3302      	adds	r3, #2
 8017f80:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8017f82:	69bb      	ldr	r3, [r7, #24]
 8017f84:	781b      	ldrb	r3, [r3, #0]
 8017f86:	2b0c      	cmp	r3, #12
 8017f88:	d005      	beq.n	8017f96 <SVCCTL_App_Notification+0x86>
 8017f8a:	2b0c      	cmp	r3, #12
 8017f8c:	dc41      	bgt.n	8018012 <SVCCTL_App_Notification+0x102>
 8017f8e:	2b01      	cmp	r3, #1
 8017f90:	d017      	beq.n	8017fc2 <SVCCTL_App_Notification+0xb2>
 8017f92:	2b03      	cmp	r3, #3
          break;
 8017f94:	e03d      	b.n	8018012 <SVCCTL_App_Notification+0x102>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8017f96:	69bb      	ldr	r3, [r7, #24]
 8017f98:	3301      	adds	r3, #1
 8017f9a:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8017f9c:	4b36      	ldr	r3, [pc, #216]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017f9e:	8adb      	ldrh	r3, [r3, #22]
 8017fa0:	f107 020a 	add.w	r2, r7, #10
 8017fa4:	f107 010b 	add.w	r1, r7, #11
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f7fd ff99 	bl	8015ee0 <hci_le_read_phy>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8017fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d12c      	bne.n	8018016 <SVCCTL_App_Notification+0x106>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8017fbc:	7afb      	ldrb	r3, [r7, #11]
 8017fbe:	2b02      	cmp	r3, #2
          break;
 8017fc0:	e029      	b.n	8018016 <SVCCTL_App_Notification+0x106>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8017fc2:	69bb      	ldr	r3, [r7, #24]
 8017fc4:	3301      	adds	r3, #1
 8017fc6:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8017fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017fca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7ea fa2a 	bl	8002428 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8017fd4:	4b28      	ldr	r3, [pc, #160]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017fd6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017fda:	2b04      	cmp	r3, #4
 8017fdc:	d104      	bne.n	8017fe8 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8017fde:	4b26      	ldr	r3, [pc, #152]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017fe0:	2206      	movs	r2, #6
 8017fe2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8017fe6:	e003      	b.n	8017ff0 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8017fe8:	4b23      	ldr	r3, [pc, #140]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017fea:	2205      	movs	r2, #5
 8017fec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8017ff0:	693b      	ldr	r3, [r7, #16]
 8017ff2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017ff6:	b29a      	uxth	r2, r3
 8017ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8017ffa:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8017ffc:	4b1f      	ldr	r3, [pc, #124]	@ (801807c <SVCCTL_App_Notification+0x16c>)
 8017ffe:	2200      	movs	r2, #0
 8018000:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8018002:	4b1d      	ldr	r3, [pc, #116]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8018004:	8ada      	ldrh	r2, [r3, #22]
 8018006:	4b1d      	ldr	r3, [pc, #116]	@ (801807c <SVCCTL_App_Notification+0x16c>)
 8018008:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 801800a:	481c      	ldr	r0, [pc, #112]	@ (801807c <SVCCTL_App_Notification+0x16c>)
 801800c:	f000 fa72 	bl	80184f4 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8018010:	e002      	b.n	8018018 <SVCCTL_App_Notification+0x108>
          break;
 8018012:	bf00      	nop
 8018014:	e02b      	b.n	801806e <SVCCTL_App_Notification+0x15e>
          break;
 8018016:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8018018:	e029      	b.n	801806e <SVCCTL_App_Notification+0x15e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 801801a:	6a3b      	ldr	r3, [r7, #32]
 801801c:	3302      	adds	r3, #2
 801801e:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	881b      	ldrh	r3, [r3, #0]
 8018024:	b29b      	uxth	r3, r3
 8018026:	f640 420e 	movw	r2, #3086	@ 0xc0e
 801802a:	4293      	cmp	r3, r2
 801802c:	d010      	beq.n	8018050 <SVCCTL_App_Notification+0x140>
 801802e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8018032:	4293      	cmp	r3, r2
 8018034:	dc1a      	bgt.n	801806c <SVCCTL_App_Notification+0x15c>
 8018036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801803a:	d00f      	beq.n	801805c <SVCCTL_App_Notification+0x14c>
 801803c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018040:	dc14      	bgt.n	801806c <SVCCTL_App_Notification+0x15c>
 8018042:	2b04      	cmp	r3, #4
 8018044:	d00c      	beq.n	8018060 <SVCCTL_App_Notification+0x150>
 8018046:	f240 4207 	movw	r2, #1031	@ 0x407
 801804a:	4293      	cmp	r3, r2
 801804c:	d00a      	beq.n	8018064 <SVCCTL_App_Notification+0x154>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801804e:	e00d      	b.n	801806c <SVCCTL_App_Notification+0x15c>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8018050:	4b09      	ldr	r3, [pc, #36]	@ (8018078 <SVCCTL_App_Notification+0x168>)
 8018052:	8adb      	ldrh	r3, [r3, #22]
 8018054:	4618      	mov	r0, r3
 8018056:	f7fd fd8a 	bl	8015b6e <aci_gatt_confirm_indication>
        break;
 801805a:	e004      	b.n	8018066 <SVCCTL_App_Notification+0x156>
          break;
 801805c:	bf00      	nop
 801805e:	e005      	b.n	801806c <SVCCTL_App_Notification+0x15c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8018060:	bf00      	nop
 8018062:	e003      	b.n	801806c <SVCCTL_App_Notification+0x15c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8018064:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8018066:	e001      	b.n	801806c <SVCCTL_App_Notification+0x15c>
      break;
 8018068:	bf00      	nop
 801806a:	e000      	b.n	801806e <SVCCTL_App_Notification+0x15e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801806c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 801806e:	2301      	movs	r3, #1
}
 8018070:	4618      	mov	r0, r3
 8018072:	3728      	adds	r7, #40	@ 0x28
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}
 8018078:	200015a0 	.word	0x200015a0
 801807c:	20001628 	.word	0x20001628

08018080 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b082      	sub	sp, #8
 8018084:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8018086:	4b06      	ldr	r3, [pc, #24]	@ (80180a0 <Ble_Tl_Init+0x20>)
 8018088:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 801808a:	4b06      	ldr	r3, [pc, #24]	@ (80180a4 <Ble_Tl_Init+0x24>)
 801808c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 801808e:	463b      	mov	r3, r7
 8018090:	4619      	mov	r1, r3
 8018092:	4805      	ldr	r0, [pc, #20]	@ (80180a8 <Ble_Tl_Init+0x28>)
 8018094:	f7fe fb54 	bl	8016740 <hci_init>

  return;
 8018098:	bf00      	nop
}
 801809a:	3708      	adds	r7, #8
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}
 80180a0:	200300d8 	.word	0x200300d8
 80180a4:	08018487 	.word	0x08018487
 80180a8:	0801844f 	.word	0x0801844f

080180ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80180ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180ae:	b08d      	sub	sp, #52	@ 0x34
 80180b0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80180b2:	2300      	movs	r3, #0
 80180b4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80180b6:	2392      	movs	r3, #146	@ 0x92
 80180b8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80180ba:	f7fd feed 	bl	8015e98 <hci_reset>
 80180be:	4603      	mov	r3, r0
 80180c0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80180c2:	f000 f935 	bl	8018330 <BleGetBdAddress>
 80180c6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80180c8:	693a      	ldr	r2, [r7, #16]
 80180ca:	2106      	movs	r1, #6
 80180cc:	2000      	movs	r0, #0
 80180ce:	f7fd fda3 	bl	8015c18 <aci_hal_write_config_data>
 80180d2:	4603      	mov	r3, r0
 80180d4:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 80180d6:	693b      	ldr	r3, [r7, #16]
 80180d8:	3305      	adds	r3, #5
 80180da:	781a      	ldrb	r2, [r3, #0]
 80180dc:	4b56      	ldr	r3, [pc, #344]	@ (8018238 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80180de:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 80180e0:	693b      	ldr	r3, [r7, #16]
 80180e2:	3304      	adds	r3, #4
 80180e4:	781a      	ldrb	r2, [r3, #0]
 80180e6:	4b54      	ldr	r3, [pc, #336]	@ (8018238 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80180e8:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 80180ea:	693b      	ldr	r3, [r7, #16]
 80180ec:	3303      	adds	r3, #3
 80180ee:	781a      	ldrb	r2, [r3, #0]
 80180f0:	4b51      	ldr	r3, [pc, #324]	@ (8018238 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80180f2:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 80180f4:	693b      	ldr	r3, [r7, #16]
 80180f6:	3302      	adds	r3, #2
 80180f8:	781a      	ldrb	r2, [r3, #0]
 80180fa:	4b4f      	ldr	r3, [pc, #316]	@ (8018238 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80180fc:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 80180fe:	693b      	ldr	r3, [r7, #16]
 8018100:	3301      	adds	r3, #1
 8018102:	781a      	ldrb	r2, [r3, #0]
 8018104:	4b4c      	ldr	r3, [pc, #304]	@ (8018238 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8018106:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8018108:	693b      	ldr	r3, [r7, #16]
 801810a:	781a      	ldrb	r2, [r3, #0]
 801810c:	4b4a      	ldr	r3, [pc, #296]	@ (8018238 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 801810e:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8018110:	4a4a      	ldr	r2, [pc, #296]	@ (801823c <Ble_Hci_Gap_Gatt_Init+0x190>)
 8018112:	2110      	movs	r1, #16
 8018114:	2018      	movs	r0, #24
 8018116:	f7fd fd7f 	bl	8015c18 <aci_hal_write_config_data>
 801811a:	4603      	mov	r3, r0
 801811c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 801811e:	4a48      	ldr	r2, [pc, #288]	@ (8018240 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8018120:	2110      	movs	r1, #16
 8018122:	2008      	movs	r0, #8
 8018124:	f7fd fd78 	bl	8015c18 <aci_hal_write_config_data>
 8018128:	4603      	mov	r3, r0
 801812a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 801812c:	2118      	movs	r1, #24
 801812e:	2001      	movs	r0, #1
 8018130:	f7fd fdf7 	bl	8015d22 <aci_hal_set_tx_power_level>
 8018134:	4603      	mov	r3, r0
 8018136:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8018138:	f7fd fa6d 	bl	8015616 <aci_gatt_init>
 801813c:	4603      	mov	r3, r0
 801813e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8018140:	2300      	movs	r3, #0
 8018142:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8018144:	7bfb      	ldrb	r3, [r7, #15]
 8018146:	f043 0301 	orr.w	r3, r3, #1
 801814a:	73fb      	strb	r3, [r7, #15]
#endif /* BLE_CFG_CENTRAL == 1 */

/* USER CODE BEGIN Role_Mngt*/
/* USER CODE END Role_Mngt */

  if (role > 0)
 801814c:	7bfb      	ldrb	r3, [r7, #15]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d01f      	beq.n	8018192 <Ble_Hci_Gap_Gatt_Init+0xe6>
  {
    const char *name = "P2PSRV1";
 8018152:	4b3c      	ldr	r3, [pc, #240]	@ (8018244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8018154:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8018156:	1dba      	adds	r2, r7, #6
 8018158:	7bf8      	ldrb	r0, [r7, #15]
 801815a:	1cbb      	adds	r3, r7, #2
 801815c:	9301      	str	r3, [sp, #4]
 801815e:	1d3b      	adds	r3, r7, #4
 8018160:	9300      	str	r3, [sp, #0]
 8018162:	4613      	mov	r3, r2
 8018164:	2207      	movs	r2, #7
 8018166:	2100      	movs	r1, #0
 8018168:	f7fd f912 	bl	8015390 <aci_gap_init>
 801816c:	4603      	mov	r3, r0
 801816e:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8018170:	88fc      	ldrh	r4, [r7, #6]
 8018172:	88bd      	ldrh	r5, [r7, #4]
 8018174:	68b8      	ldr	r0, [r7, #8]
 8018176:	f7e8 f853 	bl	8000220 <strlen>
 801817a:	4603      	mov	r3, r0
 801817c:	b2da      	uxtb	r2, r3
 801817e:	68bb      	ldr	r3, [r7, #8]
 8018180:	9300      	str	r3, [sp, #0]
 8018182:	4613      	mov	r3, r2
 8018184:	2200      	movs	r2, #0
 8018186:	4629      	mov	r1, r5
 8018188:	4620      	mov	r0, r4
 801818a:	f7fd fc47 	bl	8015a1c <aci_gatt_update_char_value>
 801818e:	4603      	mov	r3, r0
 8018190:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8018192:	88f8      	ldrh	r0, [r7, #6]
 8018194:	8879      	ldrh	r1, [r7, #2]
 8018196:	463b      	mov	r3, r7
 8018198:	9300      	str	r3, [sp, #0]
 801819a:	2302      	movs	r3, #2
 801819c:	2200      	movs	r2, #0
 801819e:	f7fd fc3d 	bl	8015a1c <aci_gatt_update_char_value>
 80181a2:	4603      	mov	r3, r0
 80181a4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80181a6:	2202      	movs	r2, #2
 80181a8:	2102      	movs	r1, #2
 80181aa:	2000      	movs	r0, #0
 80181ac:	f7fd ff16 	bl	8015fdc <hci_le_set_default_phy>
 80181b0:	4603      	mov	r3, r0
 80181b2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80181b4:	4b24      	ldr	r3, [pc, #144]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181b6:	2201      	movs	r2, #1
 80181b8:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80181ba:	4b23      	ldr	r3, [pc, #140]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181bc:	781b      	ldrb	r3, [r3, #0]
 80181be:	4618      	mov	r0, r3
 80181c0:	f7fc ffce 	bl	8015160 <aci_gap_set_io_capability>
 80181c4:	4603      	mov	r3, r0
 80181c6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80181c8:	4b1f      	ldr	r3, [pc, #124]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181ca:	2201      	movs	r2, #1
 80181cc:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80181ce:	4b1e      	ldr	r3, [pc, #120]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181d0:	2208      	movs	r2, #8
 80181d2:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80181d4:	4b1c      	ldr	r3, [pc, #112]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181d6:	2210      	movs	r2, #16
 80181d8:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80181da:	4b1b      	ldr	r3, [pc, #108]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181dc:	2200      	movs	r2, #0
 80181de:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80181e0:	4b19      	ldr	r3, [pc, #100]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181e2:	4a1a      	ldr	r2, [pc, #104]	@ (801824c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 80181e4:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80181e6:	4b18      	ldr	r3, [pc, #96]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181e8:	2201      	movs	r2, #1
 80181ea:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80181ec:	4b16      	ldr	r3, [pc, #88]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181ee:	789c      	ldrb	r4, [r3, #2]
 80181f0:	4b15      	ldr	r3, [pc, #84]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181f2:	785d      	ldrb	r5, [r3, #1]
 80181f4:	4b14      	ldr	r3, [pc, #80]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181f6:	791b      	ldrb	r3, [r3, #4]
 80181f8:	4a13      	ldr	r2, [pc, #76]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181fa:	7952      	ldrb	r2, [r2, #5]
 80181fc:	4912      	ldr	r1, [pc, #72]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80181fe:	78c9      	ldrb	r1, [r1, #3]
 8018200:	4811      	ldr	r0, [pc, #68]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8018202:	6880      	ldr	r0, [r0, #8]
 8018204:	2600      	movs	r6, #0
 8018206:	9604      	str	r6, [sp, #16]
 8018208:	9003      	str	r0, [sp, #12]
 801820a:	9102      	str	r1, [sp, #8]
 801820c:	9201      	str	r2, [sp, #4]
 801820e:	9300      	str	r3, [sp, #0]
 8018210:	2300      	movs	r3, #0
 8018212:	2201      	movs	r2, #1
 8018214:	4629      	mov	r1, r5
 8018216:	4620      	mov	r0, r4
 8018218:	f7fc fff6 	bl	8015208 <aci_gap_set_authentication_requirement>
 801821c:	4603      	mov	r3, r0
 801821e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8018220:	4b09      	ldr	r3, [pc, #36]	@ (8018248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8018222:	789b      	ldrb	r3, [r3, #2]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d003      	beq.n	8018230 <Ble_Hci_Gap_Gatt_Init+0x184>
  {
    ret = aci_gap_configure_whitelist();
 8018228:	f7fd f9d1 	bl	80155ce <aci_gap_configure_filter_accept_list>
 801822c:	4603      	mov	r3, r0
 801822e:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8018230:	bf00      	nop
 8018232:	371c      	adds	r7, #28
 8018234:	46bd      	mov	sp, r7
 8018236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018238:	200000c4 	.word	0x200000c4
 801823c:	08021f00 	.word	0x08021f00
 8018240:	08021f10 	.word	0x08021f10
 8018244:	08020090 	.word	0x08020090
 8018248:	200015a0 	.word	0x200015a0
 801824c:	0001b207 	.word	0x0001b207

08018250 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b08c      	sub	sp, #48	@ 0x30
 8018254:	af08      	add	r7, sp, #32
 8018256:	4603      	mov	r3, r0
 8018258:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801825a:	2392      	movs	r3, #146	@ 0x92
 801825c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 801825e:	79fb      	ldrb	r3, [r7, #7]
 8018260:	2b01      	cmp	r3, #1
 8018262:	d106      	bne.n	8018272 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8018264:	4b2b      	ldr	r3, [pc, #172]	@ (8018314 <Adv_Request+0xc4>)
 8018266:	881b      	ldrh	r3, [r3, #0]
 8018268:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 801826a:	4b2b      	ldr	r3, [pc, #172]	@ (8018318 <Adv_Request+0xc8>)
 801826c:	881b      	ldrh	r3, [r3, #0]
 801826e:	81bb      	strh	r3, [r7, #12]
 8018270:	e005      	b.n	801827e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8018272:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8018276:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8018278:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 801827c:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 801827e:	4b27      	ldr	r3, [pc, #156]	@ (801831c <Adv_Request+0xcc>)
 8018280:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8018284:	4618      	mov	r0, r3
 8018286:	f7ea f8cf 	bl	8002428 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 801828a:	79fb      	ldrb	r3, [r7, #7]
 801828c:	2b02      	cmp	r3, #2
 801828e:	d10d      	bne.n	80182ac <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8018290:	4b22      	ldr	r3, [pc, #136]	@ (801831c <Adv_Request+0xcc>)
 8018292:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8018296:	2b01      	cmp	r3, #1
 8018298:	d004      	beq.n	80182a4 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 801829a:	4b20      	ldr	r3, [pc, #128]	@ (801831c <Adv_Request+0xcc>)
 801829c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80182a0:	2b02      	cmp	r3, #2
 80182a2:	d103      	bne.n	80182ac <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 80182a4:	f7fc fe3e 	bl	8014f24 <aci_gap_set_non_discoverable>
 80182a8:	4603      	mov	r3, r0
 80182aa:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80182ac:	4a1b      	ldr	r2, [pc, #108]	@ (801831c <Adv_Request+0xcc>)
 80182ae:	79fb      	ldrb	r3, [r7, #7]
 80182b0:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 80182b4:	4b19      	ldr	r3, [pc, #100]	@ (801831c <Adv_Request+0xcc>)
 80182b6:	7e1b      	ldrb	r3, [r3, #24]
 80182b8:	89ba      	ldrh	r2, [r7, #12]
 80182ba:	89f9      	ldrh	r1, [r7, #14]
 80182bc:	2000      	movs	r0, #0
 80182be:	9006      	str	r0, [sp, #24]
 80182c0:	2000      	movs	r0, #0
 80182c2:	9005      	str	r0, [sp, #20]
 80182c4:	4816      	ldr	r0, [pc, #88]	@ (8018320 <Adv_Request+0xd0>)
 80182c6:	9004      	str	r0, [sp, #16]
 80182c8:	9303      	str	r3, [sp, #12]
 80182ca:	4b16      	ldr	r3, [pc, #88]	@ (8018324 <Adv_Request+0xd4>)
 80182cc:	9302      	str	r3, [sp, #8]
 80182ce:	2308      	movs	r3, #8
 80182d0:	9301      	str	r3, [sp, #4]
 80182d2:	2300      	movs	r3, #0
 80182d4:	9300      	str	r3, [sp, #0]
 80182d6:	2300      	movs	r3, #0
 80182d8:	2000      	movs	r0, #0
 80182da:	f7fc fe47 	bl	8014f6c <aci_gap_set_discoverable>
 80182de:	4603      	mov	r3, r0
 80182e0:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 80182e2:	4911      	ldr	r1, [pc, #68]	@ (8018328 <Adv_Request+0xd8>)
 80182e4:	200e      	movs	r0, #14
 80182e6:	f7fd f900 	bl	80154ea <aci_gap_update_adv_data>
 80182ea:	4603      	mov	r3, r0
 80182ec:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 80182ee:	7afb      	ldrb	r3, [r7, #11]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d10a      	bne.n	801830a <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 80182f4:	79fb      	ldrb	r3, [r7, #7]
 80182f6:	2b01      	cmp	r3, #1
 80182f8:	d107      	bne.n	801830a <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80182fa:	4b08      	ldr	r3, [pc, #32]	@ (801831c <Adv_Request+0xcc>)
 80182fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8018300:	490a      	ldr	r1, [pc, #40]	@ (801832c <Adv_Request+0xdc>)
 8018302:	4618      	mov	r0, r3
 8018304:	f7ea f914 	bl	8002530 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8018308:	bf00      	nop
 801830a:	bf00      	nop
}
 801830c:	3710      	adds	r7, #16
 801830e:	46bd      	mov	sp, r7
 8018310:	bd80      	pop	{r7, pc}
 8018312:	bf00      	nop
 8018314:	20001624 	.word	0x20001624
 8018318:	20001626 	.word	0x20001626
 801831c:	200015a0 	.word	0x200015a0
 8018320:	200015b9 	.word	0x200015b9
 8018324:	08021f20 	.word	0x08021f20
 8018328:	200000c4 	.word	0x200000c4
 801832c:	0001e046 	.word	0x0001e046

08018330 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b086      	sub	sp, #24
 8018334:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8018336:	f7ff fd4f 	bl	8017dd8 <LL_FLASH_GetUDN>
 801833a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 801833c:	693b      	ldr	r3, [r7, #16]
 801833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018342:	d023      	beq.n	801838c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8018344:	f7ff fd60 	bl	8017e08 <LL_FLASH_GetSTCompanyID>
 8018348:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 801834a:	f7ff fd51 	bl	8017df0 <LL_FLASH_GetDeviceID>
 801834e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8018350:	693b      	ldr	r3, [r7, #16]
 8018352:	b2da      	uxtb	r2, r3
 8018354:	4b16      	ldr	r3, [pc, #88]	@ (80183b0 <BleGetBdAddress+0x80>)
 8018356:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8018358:	693b      	ldr	r3, [r7, #16]
 801835a:	0a1b      	lsrs	r3, r3, #8
 801835c:	b2da      	uxtb	r2, r3
 801835e:	4b14      	ldr	r3, [pc, #80]	@ (80183b0 <BleGetBdAddress+0x80>)
 8018360:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	b2da      	uxtb	r2, r3
 8018366:	4b12      	ldr	r3, [pc, #72]	@ (80183b0 <BleGetBdAddress+0x80>)
 8018368:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 801836a:	68bb      	ldr	r3, [r7, #8]
 801836c:	b2da      	uxtb	r2, r3
 801836e:	4b10      	ldr	r3, [pc, #64]	@ (80183b0 <BleGetBdAddress+0x80>)
 8018370:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8018372:	68bb      	ldr	r3, [r7, #8]
 8018374:	0a1b      	lsrs	r3, r3, #8
 8018376:	b2da      	uxtb	r2, r3
 8018378:	4b0d      	ldr	r3, [pc, #52]	@ (80183b0 <BleGetBdAddress+0x80>)
 801837a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 801837c:	68bb      	ldr	r3, [r7, #8]
 801837e:	0c1b      	lsrs	r3, r3, #16
 8018380:	b2da      	uxtb	r2, r3
 8018382:	4b0b      	ldr	r3, [pc, #44]	@ (80183b0 <BleGetBdAddress+0x80>)
 8018384:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8018386:	4b0a      	ldr	r3, [pc, #40]	@ (80183b0 <BleGetBdAddress+0x80>)
 8018388:	617b      	str	r3, [r7, #20]
 801838a:	e00b      	b.n	80183a4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 801838c:	2000      	movs	r0, #0
 801838e:	f7fe fef3 	bl	8017178 <OTP_Read>
 8018392:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d002      	beq.n	80183a0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	617b      	str	r3, [r7, #20]
 801839e:	e001      	b.n	80183a4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80183a0:	4b04      	ldr	r3, [pc, #16]	@ (80183b4 <BleGetBdAddress+0x84>)
 80183a2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80183a4:	697b      	ldr	r3, [r7, #20]
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	3718      	adds	r7, #24
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	20001598 	.word	0x20001598
 80183b4:	08021ef8 	.word	0x08021ef8

080183b8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b082      	sub	sp, #8
 80183bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80183be:	4b0a      	ldr	r3, [pc, #40]	@ (80183e8 <Adv_Cancel+0x30>)
 80183c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80183c4:	2b05      	cmp	r3, #5
 80183c6:	d00a      	beq.n	80183de <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80183c8:	2392      	movs	r3, #146	@ 0x92
 80183ca:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80183cc:	f7fc fdaa 	bl	8014f24 <aci_gap_set_non_discoverable>
 80183d0:	4603      	mov	r3, r0
 80183d2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80183d4:	4b04      	ldr	r3, [pc, #16]	@ (80183e8 <Adv_Cancel+0x30>)
 80183d6:	2200      	movs	r2, #0
 80183d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80183dc:	bf00      	nop
 80183de:	bf00      	nop
}
 80183e0:	3708      	adds	r7, #8
 80183e2:	46bd      	mov	sp, r7
 80183e4:	bd80      	pop	{r7, pc}
 80183e6:	bf00      	nop
 80183e8:	200015a0 	.word	0x200015a0

080183ec <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80183f0:	2100      	movs	r1, #0
 80183f2:	2001      	movs	r0, #1
 80183f4:	f001 f992 	bl	801971c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 80183f8:	bf00      	nop
}
 80183fa:	bd80      	pop	{r7, pc}

080183fc <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 80183fc:	b480      	push	{r7}
 80183fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 8018400:	bf00      	nop
 8018402:	46bd      	mov	sp, r7
 8018404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018408:	4770      	bx	lr

0801840a <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 801840a:	b580      	push	{r7, lr}
 801840c:	b082      	sub	sp, #8
 801840e:	af00      	add	r7, sp, #0
 8018410:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8018412:	2100      	movs	r1, #0
 8018414:	2002      	movs	r0, #2
 8018416:	f001 f981 	bl	801971c <UTIL_SEQ_SetTask>

  return;
 801841a:	bf00      	nop
}
 801841c:	3708      	adds	r7, #8
 801841e:	46bd      	mov	sp, r7
 8018420:	bd80      	pop	{r7, pc}

08018422 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8018422:	b580      	push	{r7, lr}
 8018424:	b082      	sub	sp, #8
 8018426:	af00      	add	r7, sp, #0
 8018428:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801842a:	2001      	movs	r0, #1
 801842c:	f001 f9e2 	bl	80197f4 <UTIL_SEQ_SetEvt>

  return;
 8018430:	bf00      	nop
}
 8018432:	3708      	adds	r7, #8
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}

08018438 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b082      	sub	sp, #8
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8018440:	2001      	movs	r0, #1
 8018442:	f001 f9f7 	bl	8019834 <UTIL_SEQ_WaitEvt>

  return;
 8018446:	bf00      	nop
}
 8018448:	3708      	adds	r7, #8
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}

0801844e <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 801844e:	b580      	push	{r7, lr}
 8018450:	b084      	sub	sp, #16
 8018452:	af00      	add	r7, sp, #0
 8018454:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	685b      	ldr	r3, [r3, #4]
 801845e:	3308      	adds	r3, #8
 8018460:	4618      	mov	r0, r3
 8018462:	f7fe f827 	bl	80164b4 <SVCCTL_UserEvtRx>
 8018466:	4603      	mov	r3, r0
 8018468:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 801846a:	7afb      	ldrb	r3, [r7, #11]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d003      	beq.n	8018478 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	2201      	movs	r2, #1
 8018474:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8018476:	e003      	b.n	8018480 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2200      	movs	r2, #0
 801847c:	701a      	strb	r2, [r3, #0]
  return;
 801847e:	bf00      	nop
}
 8018480:	3710      	adds	r7, #16
 8018482:	46bd      	mov	sp, r7
 8018484:	bd80      	pop	{r7, pc}

08018486 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8018486:	b580      	push	{r7, lr}
 8018488:	b084      	sub	sp, #16
 801848a:	af00      	add	r7, sp, #0
 801848c:	4603      	mov	r3, r0
 801848e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8018490:	79fb      	ldrb	r3, [r7, #7]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d002      	beq.n	801849c <BLE_StatusNot+0x16>
 8018496:	2b01      	cmp	r3, #1
 8018498:	d006      	beq.n	80184a8 <BLE_StatusNot+0x22>
      break;

    default:
      /* USER CODE BEGIN Status */
      /* USER CODE END Status */
      break;
 801849a:	e00b      	b.n	80184b4 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801849c:	2307      	movs	r3, #7
 801849e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80184a0:	68f8      	ldr	r0, [r7, #12]
 80184a2:	f001 f967 	bl	8019774 <UTIL_SEQ_PauseTask>
      break;
 80184a6:	e005      	b.n	80184b4 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80184a8:	2307      	movs	r3, #7
 80184aa:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80184ac:	68f8      	ldr	r0, [r7, #12]
 80184ae:	f001 f981 	bl	80197b4 <UTIL_SEQ_ResumeTask>
      break;
 80184b2:	bf00      	nop
  }

  return;
 80184b4:	bf00      	nop
}
 80184b6:	3710      	adds	r7, #16
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}

080184bc <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80184bc:	b480      	push	{r7}
 80184be:	b083      	sub	sp, #12
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	781b      	ldrb	r3, [r3, #0]
 80184c8:	2b03      	cmp	r3, #3
 80184ca:	d006      	beq.n	80184da <P2PS_STM_App_Notification+0x1e>
 80184cc:	2b03      	cmp	r3, #3
 80184ce:	dc06      	bgt.n	80184de <P2PS_STM_App_Notification+0x22>
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d006      	beq.n	80184e2 <P2PS_STM_App_Notification+0x26>
 80184d4:	2b01      	cmp	r3, #1
 80184d6:	d006      	beq.n	80184e6 <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80184d8:	e001      	b.n	80184de <P2PS_STM_App_Notification+0x22>
      break;
 80184da:	bf00      	nop
 80184dc:	e004      	b.n	80184e8 <P2PS_STM_App_Notification+0x2c>
      break;
 80184de:	bf00      	nop
 80184e0:	e002      	b.n	80184e8 <P2PS_STM_App_Notification+0x2c>
      break;
 80184e2:	bf00      	nop
 80184e4:	e000      	b.n	80184e8 <P2PS_STM_App_Notification+0x2c>
      break;
 80184e6:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80184e8:	bf00      	nop
}
 80184ea:	370c      	adds	r7, #12
 80184ec:	46bd      	mov	sp, r7
 80184ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f2:	4770      	bx	lr

080184f4 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80184f4:	b480      	push	{r7}
 80184f6:	b083      	sub	sp, #12
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	781b      	ldrb	r3, [r3, #0]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d002      	beq.n	801850a <P2PS_APP_Notification+0x16>
 8018504:	2b01      	cmp	r3, #1
 8018506:	d002      	beq.n	801850e <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8018508:	e002      	b.n	8018510 <P2PS_APP_Notification+0x1c>
    break;
 801850a:	bf00      	nop
 801850c:	e000      	b.n	8018510 <P2PS_APP_Notification+0x1c>
    break;
 801850e:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8018510:	bf00      	nop
}
 8018512:	370c      	adds	r7, #12
 8018514:	46bd      	mov	sp, r7
 8018516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801851a:	4770      	bx	lr

0801851c <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 801851c:	b480      	push	{r7}
 801851e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 8018520:	bf00      	nop
}
 8018522:	46bd      	mov	sp, r7
 8018524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018528:	4770      	bx	lr
	...

0801852c <LL_PWR_EnableBootC2>:
{
 801852c:	b480      	push	{r7}
 801852e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018530:	4b05      	ldr	r3, [pc, #20]	@ (8018548 <LL_PWR_EnableBootC2+0x1c>)
 8018532:	68db      	ldr	r3, [r3, #12]
 8018534:	4a04      	ldr	r2, [pc, #16]	@ (8018548 <LL_PWR_EnableBootC2+0x1c>)
 8018536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801853a:	60d3      	str	r3, [r2, #12]
}
 801853c:	bf00      	nop
 801853e:	46bd      	mov	sp, r7
 8018540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018544:	4770      	bx	lr
 8018546:	bf00      	nop
 8018548:	58000400 	.word	0x58000400

0801854c <LL_C2_EXTI_EnableEvent_32_63>:
{
 801854c:	b480      	push	{r7}
 801854e:	b083      	sub	sp, #12
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8018554:	4b06      	ldr	r3, [pc, #24]	@ (8018570 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018556:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801855a:	4905      	ldr	r1, [pc, #20]	@ (8018570 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	4313      	orrs	r3, r2
 8018560:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8018564:	bf00      	nop
 8018566:	370c      	adds	r7, #12
 8018568:	46bd      	mov	sp, r7
 801856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856e:	4770      	bx	lr
 8018570:	58000800 	.word	0x58000800

08018574 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8018574:	b480      	push	{r7}
 8018576:	b083      	sub	sp, #12
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801857c:	4b05      	ldr	r3, [pc, #20]	@ (8018594 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801857e:	6a1a      	ldr	r2, [r3, #32]
 8018580:	4904      	ldr	r1, [pc, #16]	@ (8018594 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	4313      	orrs	r3, r2
 8018586:	620b      	str	r3, [r1, #32]
}
 8018588:	bf00      	nop
 801858a:	370c      	adds	r7, #12
 801858c:	46bd      	mov	sp, r7
 801858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018592:	4770      	bx	lr
 8018594:	58000800 	.word	0x58000800

08018598 <LL_AHB3_GRP1_EnableClock>:
{
 8018598:	b480      	push	{r7}
 801859a:	b085      	sub	sp, #20
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80185a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80185a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80185a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	4313      	orrs	r3, r2
 80185ae:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80185b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80185b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	4013      	ands	r3, r2
 80185ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80185bc:	68fb      	ldr	r3, [r7, #12]
}
 80185be:	bf00      	nop
 80185c0:	3714      	adds	r7, #20
 80185c2:	46bd      	mov	sp, r7
 80185c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c8:	4770      	bx	lr

080185ca <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80185ca:	b480      	push	{r7}
 80185cc:	b085      	sub	sp, #20
 80185ce:	af00      	add	r7, sp, #0
 80185d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80185d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80185d6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80185da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	4313      	orrs	r3, r2
 80185e2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80185e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80185ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	4013      	ands	r3, r2
 80185f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80185f4:	68fb      	ldr	r3, [r7, #12]
}
 80185f6:	bf00      	nop
 80185f8:	3714      	adds	r7, #20
 80185fa:	46bd      	mov	sp, r7
 80185fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018600:	4770      	bx	lr

08018602 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8018602:	b480      	push	{r7}
 8018604:	b083      	sub	sp, #12
 8018606:	af00      	add	r7, sp, #0
 8018608:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	601a      	str	r2, [r3, #0]
}
 8018616:	bf00      	nop
 8018618:	370c      	adds	r7, #12
 801861a:	46bd      	mov	sp, r7
 801861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018620:	4770      	bx	lr

08018622 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8018622:	b480      	push	{r7}
 8018624:	b083      	sub	sp, #12
 8018626:	af00      	add	r7, sp, #0
 8018628:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	f043 0201 	orr.w	r2, r3, #1
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	601a      	str	r2, [r3, #0]
}
 8018636:	bf00      	nop
 8018638:	370c      	adds	r7, #12
 801863a:	46bd      	mov	sp, r7
 801863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018640:	4770      	bx	lr

08018642 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018642:	b480      	push	{r7}
 8018644:	b083      	sub	sp, #12
 8018646:	af00      	add	r7, sp, #0
 8018648:	6078      	str	r0, [r7, #4]
 801864a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	685a      	ldr	r2, [r3, #4]
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	041b      	lsls	r3, r3, #16
 8018654:	43db      	mvns	r3, r3
 8018656:	401a      	ands	r2, r3
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	605a      	str	r2, [r3, #4]
}
 801865c:	bf00      	nop
 801865e:	370c      	adds	r7, #12
 8018660:	46bd      	mov	sp, r7
 8018662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018666:	4770      	bx	lr

08018668 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018668:	b480      	push	{r7}
 801866a:	b083      	sub	sp, #12
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
 8018670:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	685a      	ldr	r2, [r3, #4]
 8018676:	683b      	ldr	r3, [r7, #0]
 8018678:	041b      	lsls	r3, r3, #16
 801867a:	431a      	orrs	r2, r3
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	605a      	str	r2, [r3, #4]
}
 8018680:	bf00      	nop
 8018682:	370c      	adds	r7, #12
 8018684:	46bd      	mov	sp, r7
 8018686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868a:	4770      	bx	lr

0801868c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801868c:	b480      	push	{r7}
 801868e:	b083      	sub	sp, #12
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
 8018694:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	685a      	ldr	r2, [r3, #4]
 801869a:	683b      	ldr	r3, [r7, #0]
 801869c:	43db      	mvns	r3, r3
 801869e:	401a      	ands	r2, r3
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	605a      	str	r2, [r3, #4]
}
 80186a4:	bf00      	nop
 80186a6:	370c      	adds	r7, #12
 80186a8:	46bd      	mov	sp, r7
 80186aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ae:	4770      	bx	lr

080186b0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80186b0:	b480      	push	{r7}
 80186b2:	b083      	sub	sp, #12
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
 80186b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	683a      	ldr	r2, [r7, #0]
 80186be:	609a      	str	r2, [r3, #8]
}
 80186c0:	bf00      	nop
 80186c2:	370c      	adds	r7, #12
 80186c4:	46bd      	mov	sp, r7
 80186c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ca:	4770      	bx	lr

080186cc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80186cc:	b480      	push	{r7}
 80186ce:	b083      	sub	sp, #12
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
 80186d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	041a      	lsls	r2, r3, #16
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	609a      	str	r2, [r3, #8]
}
 80186de:	bf00      	nop
 80186e0:	370c      	adds	r7, #12
 80186e2:	46bd      	mov	sp, r7
 80186e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e8:	4770      	bx	lr

080186ea <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80186ea:	b480      	push	{r7}
 80186ec:	b083      	sub	sp, #12
 80186ee:	af00      	add	r7, sp, #0
 80186f0:	6078      	str	r0, [r7, #4]
 80186f2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	68da      	ldr	r2, [r3, #12]
 80186f8:	683b      	ldr	r3, [r7, #0]
 80186fa:	4013      	ands	r3, r2
 80186fc:	683a      	ldr	r2, [r7, #0]
 80186fe:	429a      	cmp	r2, r3
 8018700:	d101      	bne.n	8018706 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8018702:	2301      	movs	r3, #1
 8018704:	e000      	b.n	8018708 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8018706:	2300      	movs	r3, #0
}
 8018708:	4618      	mov	r0, r3
 801870a:	370c      	adds	r7, #12
 801870c:	46bd      	mov	sp, r7
 801870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018712:	4770      	bx	lr

08018714 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018714:	b480      	push	{r7}
 8018716:	b083      	sub	sp, #12
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
 801871c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	69da      	ldr	r2, [r3, #28]
 8018722:	683b      	ldr	r3, [r7, #0]
 8018724:	4013      	ands	r3, r2
 8018726:	683a      	ldr	r2, [r7, #0]
 8018728:	429a      	cmp	r2, r3
 801872a:	d101      	bne.n	8018730 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801872c:	2301      	movs	r3, #1
 801872e:	e000      	b.n	8018732 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8018730:	2300      	movs	r3, #0
}
 8018732:	4618      	mov	r0, r3
 8018734:	370c      	adds	r7, #12
 8018736:	46bd      	mov	sp, r7
 8018738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801873c:	4770      	bx	lr
	...

08018740 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8018740:	b580      	push	{r7, lr}
 8018742:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8018744:	2102      	movs	r1, #2
 8018746:	4818      	ldr	r0, [pc, #96]	@ (80187a8 <HW_IPCC_Rx_Handler+0x68>)
 8018748:	f7ff ffe4 	bl	8018714 <LL_C2_IPCC_IsActiveFlag_CHx>
 801874c:	4603      	mov	r3, r0
 801874e:	2b00      	cmp	r3, #0
 8018750:	d008      	beq.n	8018764 <HW_IPCC_Rx_Handler+0x24>
 8018752:	4b15      	ldr	r3, [pc, #84]	@ (80187a8 <HW_IPCC_Rx_Handler+0x68>)
 8018754:	685b      	ldr	r3, [r3, #4]
 8018756:	f003 0302 	and.w	r3, r3, #2
 801875a:	2b00      	cmp	r3, #0
 801875c:	d102      	bne.n	8018764 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801875e:	f000 f8d5 	bl	801890c <HW_IPCC_SYS_EvtHandler>
 8018762:	e01e      	b.n	80187a2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8018764:	2101      	movs	r1, #1
 8018766:	4810      	ldr	r0, [pc, #64]	@ (80187a8 <HW_IPCC_Rx_Handler+0x68>)
 8018768:	f7ff ffd4 	bl	8018714 <LL_C2_IPCC_IsActiveFlag_CHx>
 801876c:	4603      	mov	r3, r0
 801876e:	2b00      	cmp	r3, #0
 8018770:	d008      	beq.n	8018784 <HW_IPCC_Rx_Handler+0x44>
 8018772:	4b0d      	ldr	r3, [pc, #52]	@ (80187a8 <HW_IPCC_Rx_Handler+0x68>)
 8018774:	685b      	ldr	r3, [r3, #4]
 8018776:	f003 0301 	and.w	r3, r3, #1
 801877a:	2b00      	cmp	r3, #0
 801877c:	d102      	bne.n	8018784 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801877e:	f000 f889 	bl	8018894 <HW_IPCC_BLE_EvtHandler>
 8018782:	e00e      	b.n	80187a2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8018784:	2108      	movs	r1, #8
 8018786:	4808      	ldr	r0, [pc, #32]	@ (80187a8 <HW_IPCC_Rx_Handler+0x68>)
 8018788:	f7ff ffc4 	bl	8018714 <LL_C2_IPCC_IsActiveFlag_CHx>
 801878c:	4603      	mov	r3, r0
 801878e:	2b00      	cmp	r3, #0
 8018790:	d008      	beq.n	80187a4 <HW_IPCC_Rx_Handler+0x64>
 8018792:	4b05      	ldr	r3, [pc, #20]	@ (80187a8 <HW_IPCC_Rx_Handler+0x68>)
 8018794:	685b      	ldr	r3, [r3, #4]
 8018796:	f003 0308 	and.w	r3, r3, #8
 801879a:	2b00      	cmp	r3, #0
 801879c:	d102      	bne.n	80187a4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801879e:	f000 f901 	bl	80189a4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80187a2:	bf00      	nop
 80187a4:	bf00      	nop
}
 80187a6:	bd80      	pop	{r7, pc}
 80187a8:	58000c00 	.word	0x58000c00

080187ac <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80187b0:	2102      	movs	r1, #2
 80187b2:	4818      	ldr	r0, [pc, #96]	@ (8018814 <HW_IPCC_Tx_Handler+0x68>)
 80187b4:	f7ff ff99 	bl	80186ea <LL_C1_IPCC_IsActiveFlag_CHx>
 80187b8:	4603      	mov	r3, r0
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d108      	bne.n	80187d0 <HW_IPCC_Tx_Handler+0x24>
 80187be:	4b15      	ldr	r3, [pc, #84]	@ (8018814 <HW_IPCC_Tx_Handler+0x68>)
 80187c0:	685b      	ldr	r3, [r3, #4]
 80187c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d102      	bne.n	80187d0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80187ca:	f000 f893 	bl	80188f4 <HW_IPCC_SYS_CmdEvtHandler>
 80187ce:	e01e      	b.n	801880e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80187d0:	2108      	movs	r1, #8
 80187d2:	4810      	ldr	r0, [pc, #64]	@ (8018814 <HW_IPCC_Tx_Handler+0x68>)
 80187d4:	f7ff ff89 	bl	80186ea <LL_C1_IPCC_IsActiveFlag_CHx>
 80187d8:	4603      	mov	r3, r0
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d108      	bne.n	80187f0 <HW_IPCC_Tx_Handler+0x44>
 80187de:	4b0d      	ldr	r3, [pc, #52]	@ (8018814 <HW_IPCC_Tx_Handler+0x68>)
 80187e0:	685b      	ldr	r3, [r3, #4]
 80187e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d102      	bne.n	80187f0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80187ea:	f000 f8bd 	bl	8018968 <HW_IPCC_MM_FreeBufHandler>
 80187ee:	e00e      	b.n	801880e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80187f0:	2120      	movs	r1, #32
 80187f2:	4808      	ldr	r0, [pc, #32]	@ (8018814 <HW_IPCC_Tx_Handler+0x68>)
 80187f4:	f7ff ff79 	bl	80186ea <LL_C1_IPCC_IsActiveFlag_CHx>
 80187f8:	4603      	mov	r3, r0
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d108      	bne.n	8018810 <HW_IPCC_Tx_Handler+0x64>
 80187fe:	4b05      	ldr	r3, [pc, #20]	@ (8018814 <HW_IPCC_Tx_Handler+0x68>)
 8018800:	685b      	ldr	r3, [r3, #4]
 8018802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8018806:	2b00      	cmp	r3, #0
 8018808:	d102      	bne.n	8018810 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801880a:	f000 f84f 	bl	80188ac <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801880e:	bf00      	nop
 8018810:	bf00      	nop
}
 8018812:	bd80      	pop	{r7, pc}
 8018814:	58000c00 	.word	0x58000c00

08018818 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8018818:	b580      	push	{r7, lr}
 801881a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 801881c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018820:	f7ff fed3 	bl	80185ca <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8018824:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018828:	f7ff fea4 	bl	8018574 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801882c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018830:	f7ff fe8c 	bl	801854c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8018834:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8018836:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8018838:	f7ff fe78 	bl	801852c <LL_PWR_EnableBootC2>

  return;
 801883c:	bf00      	nop
}
 801883e:	bd80      	pop	{r7, pc}

08018840 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8018840:	b580      	push	{r7, lr}
 8018842:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8018844:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018848:	f7ff fea6 	bl	8018598 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 801884c:	4806      	ldr	r0, [pc, #24]	@ (8018868 <HW_IPCC_Init+0x28>)
 801884e:	f7ff fee8 	bl	8018622 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8018852:	4805      	ldr	r0, [pc, #20]	@ (8018868 <HW_IPCC_Init+0x28>)
 8018854:	f7ff fed5 	bl	8018602 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8018858:	202c      	movs	r0, #44	@ 0x2c
 801885a:	f7f0 f862 	bl	8008922 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801885e:	202d      	movs	r0, #45	@ 0x2d
 8018860:	f7f0 f85f 	bl	8008922 <HAL_NVIC_EnableIRQ>

  return;
 8018864:	bf00      	nop
}
 8018866:	bd80      	pop	{r7, pc}
 8018868:	58000c00 	.word	0x58000c00

0801886c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 801886c:	b580      	push	{r7, lr}
 801886e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8018870:	2101      	movs	r1, #1
 8018872:	4802      	ldr	r0, [pc, #8]	@ (801887c <HW_IPCC_BLE_Init+0x10>)
 8018874:	f7ff ff0a 	bl	801868c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018878:	bf00      	nop
}
 801887a:	bd80      	pop	{r7, pc}
 801887c:	58000c00 	.word	0x58000c00

08018880 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8018880:	b580      	push	{r7, lr}
 8018882:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8018884:	2101      	movs	r1, #1
 8018886:	4802      	ldr	r0, [pc, #8]	@ (8018890 <HW_IPCC_BLE_SendCmd+0x10>)
 8018888:	f7ff ff20 	bl	80186cc <LL_C1_IPCC_SetFlag_CHx>

  return;
 801888c:	bf00      	nop
}
 801888e:	bd80      	pop	{r7, pc}
 8018890:	58000c00 	.word	0x58000c00

08018894 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8018894:	b580      	push	{r7, lr}
 8018896:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8018898:	f7fe fab6 	bl	8016e08 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801889c:	2101      	movs	r1, #1
 801889e:	4802      	ldr	r0, [pc, #8]	@ (80188a8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80188a0:	f7ff ff06 	bl	80186b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80188a4:	bf00      	nop
}
 80188a6:	bd80      	pop	{r7, pc}
 80188a8:	58000c00 	.word	0x58000c00

080188ac <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80188b0:	2120      	movs	r1, #32
 80188b2:	4803      	ldr	r0, [pc, #12]	@ (80188c0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80188b4:	f7ff fed8 	bl	8018668 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80188b8:	f7fe fad6 	bl	8016e68 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80188bc:	bf00      	nop
}
 80188be:	bd80      	pop	{r7, pc}
 80188c0:	58000c00 	.word	0x58000c00

080188c4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80188c4:	b580      	push	{r7, lr}
 80188c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80188c8:	2102      	movs	r1, #2
 80188ca:	4802      	ldr	r0, [pc, #8]	@ (80188d4 <HW_IPCC_SYS_Init+0x10>)
 80188cc:	f7ff fede 	bl	801868c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80188d0:	bf00      	nop
}
 80188d2:	bd80      	pop	{r7, pc}
 80188d4:	58000c00 	.word	0x58000c00

080188d8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80188dc:	2102      	movs	r1, #2
 80188de:	4804      	ldr	r0, [pc, #16]	@ (80188f0 <HW_IPCC_SYS_SendCmd+0x18>)
 80188e0:	f7ff fef4 	bl	80186cc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80188e4:	2102      	movs	r1, #2
 80188e6:	4802      	ldr	r0, [pc, #8]	@ (80188f0 <HW_IPCC_SYS_SendCmd+0x18>)
 80188e8:	f7ff feab 	bl	8018642 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80188ec:	bf00      	nop
}
 80188ee:	bd80      	pop	{r7, pc}
 80188f0:	58000c00 	.word	0x58000c00

080188f4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80188f8:	2102      	movs	r1, #2
 80188fa:	4803      	ldr	r0, [pc, #12]	@ (8018908 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80188fc:	f7ff feb4 	bl	8018668 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8018900:	f7fe fb02 	bl	8016f08 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8018904:	bf00      	nop
}
 8018906:	bd80      	pop	{r7, pc}
 8018908:	58000c00 	.word	0x58000c00

0801890c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 801890c:	b580      	push	{r7, lr}
 801890e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8018910:	f7fe fb10 	bl	8016f34 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018914:	2102      	movs	r1, #2
 8018916:	4802      	ldr	r0, [pc, #8]	@ (8018920 <HW_IPCC_SYS_EvtHandler+0x14>)
 8018918:	f7ff feca 	bl	80186b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801891c:	bf00      	nop
}
 801891e:	bd80      	pop	{r7, pc}
 8018920:	58000c00 	.word	0x58000c00

08018924 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801892c:	2108      	movs	r1, #8
 801892e:	480c      	ldr	r0, [pc, #48]	@ (8018960 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018930:	f7ff fedb 	bl	80186ea <LL_C1_IPCC_IsActiveFlag_CHx>
 8018934:	4603      	mov	r3, r0
 8018936:	2b00      	cmp	r3, #0
 8018938:	d007      	beq.n	801894a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801893a:	4a0a      	ldr	r2, [pc, #40]	@ (8018964 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018940:	2108      	movs	r1, #8
 8018942:	4807      	ldr	r0, [pc, #28]	@ (8018960 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018944:	f7ff fe7d 	bl	8018642 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8018948:	e006      	b.n	8018958 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801894e:	2108      	movs	r1, #8
 8018950:	4803      	ldr	r0, [pc, #12]	@ (8018960 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018952:	f7ff febb 	bl	80186cc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8018956:	bf00      	nop
}
 8018958:	3708      	adds	r7, #8
 801895a:	46bd      	mov	sp, r7
 801895c:	bd80      	pop	{r7, pc}
 801895e:	bf00      	nop
 8018960:	58000c00 	.word	0x58000c00
 8018964:	2000162c 	.word	0x2000162c

08018968 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8018968:	b580      	push	{r7, lr}
 801896a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801896c:	2108      	movs	r1, #8
 801896e:	4806      	ldr	r0, [pc, #24]	@ (8018988 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8018970:	f7ff fe7a 	bl	8018668 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8018974:	4b05      	ldr	r3, [pc, #20]	@ (801898c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801897a:	2108      	movs	r1, #8
 801897c:	4802      	ldr	r0, [pc, #8]	@ (8018988 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801897e:	f7ff fea5 	bl	80186cc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8018982:	bf00      	nop
}
 8018984:	bd80      	pop	{r7, pc}
 8018986:	bf00      	nop
 8018988:	58000c00 	.word	0x58000c00
 801898c:	2000162c 	.word	0x2000162c

08018990 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8018990:	b580      	push	{r7, lr}
 8018992:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8018994:	2108      	movs	r1, #8
 8018996:	4802      	ldr	r0, [pc, #8]	@ (80189a0 <HW_IPCC_TRACES_Init+0x10>)
 8018998:	f7ff fe78 	bl	801868c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801899c:	bf00      	nop
}
 801899e:	bd80      	pop	{r7, pc}
 80189a0:	58000c00 	.word	0x58000c00

080189a4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80189a8:	f7fe fb6c 	bl	8017084 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80189ac:	2108      	movs	r1, #8
 80189ae:	4802      	ldr	r0, [pc, #8]	@ (80189b8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80189b0:	f7ff fe7e 	bl	80186b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80189b4:	bf00      	nop
}
 80189b6:	bd80      	pop	{r7, pc}
 80189b8:	58000c00 	.word	0x58000c00

080189bc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80189c0:	2200      	movs	r2, #0
 80189c2:	4912      	ldr	r1, [pc, #72]	@ (8018a0c <MX_USB_Device_Init+0x50>)
 80189c4:	4812      	ldr	r0, [pc, #72]	@ (8018a10 <MX_USB_Device_Init+0x54>)
 80189c6:	f7fb f813 	bl	80139f0 <USBD_Init>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d001      	beq.n	80189d4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80189d0:	f7ea fa0e 	bl	8002df0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80189d4:	490f      	ldr	r1, [pc, #60]	@ (8018a14 <MX_USB_Device_Init+0x58>)
 80189d6:	480e      	ldr	r0, [pc, #56]	@ (8018a10 <MX_USB_Device_Init+0x54>)
 80189d8:	f7fb f83a 	bl	8013a50 <USBD_RegisterClass>
 80189dc:	4603      	mov	r3, r0
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d001      	beq.n	80189e6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80189e2:	f7ea fa05 	bl	8002df0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80189e6:	490c      	ldr	r1, [pc, #48]	@ (8018a18 <MX_USB_Device_Init+0x5c>)
 80189e8:	4809      	ldr	r0, [pc, #36]	@ (8018a10 <MX_USB_Device_Init+0x54>)
 80189ea:	f7fa ff31 	bl	8013850 <USBD_CDC_RegisterInterface>
 80189ee:	4603      	mov	r3, r0
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d001      	beq.n	80189f8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80189f4:	f7ea f9fc 	bl	8002df0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80189f8:	4805      	ldr	r0, [pc, #20]	@ (8018a10 <MX_USB_Device_Init+0x54>)
 80189fa:	f7fb f85f 	bl	8013abc <USBD_Start>
 80189fe:	4603      	mov	r3, r0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d001      	beq.n	8018a08 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8018a04:	f7ea f9f4 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8018a08:	bf00      	nop
 8018a0a:	bd80      	pop	{r7, pc}
 8018a0c:	200000e8 	.word	0x200000e8
 8018a10:	20001630 	.word	0x20001630
 8018a14:	20000044 	.word	0x20000044
 8018a18:	200000d4 	.word	0x200000d4

08018a1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018a20:	2200      	movs	r2, #0
 8018a22:	4905      	ldr	r1, [pc, #20]	@ (8018a38 <CDC_Init_FS+0x1c>)
 8018a24:	4805      	ldr	r0, [pc, #20]	@ (8018a3c <CDC_Init_FS+0x20>)
 8018a26:	f7fa ff2d 	bl	8013884 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018a2a:	4905      	ldr	r1, [pc, #20]	@ (8018a40 <CDC_Init_FS+0x24>)
 8018a2c:	4803      	ldr	r0, [pc, #12]	@ (8018a3c <CDC_Init_FS+0x20>)
 8018a2e:	f7fa ff4b 	bl	80138c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018a32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018a34:	4618      	mov	r0, r3
 8018a36:	bd80      	pop	{r7, pc}
 8018a38:	2000210c 	.word	0x2000210c
 8018a3c:	20001630 	.word	0x20001630
 8018a40:	2000190c 	.word	0x2000190c

08018a44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018a44:	b480      	push	{r7}
 8018a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018a48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a52:	4770      	bx	lr

08018a54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018a54:	b480      	push	{r7}
 8018a56:	b083      	sub	sp, #12
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	6039      	str	r1, [r7, #0]
 8018a5e:	71fb      	strb	r3, [r7, #7]
 8018a60:	4613      	mov	r3, r2
 8018a62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018a64:	79fb      	ldrb	r3, [r7, #7]
 8018a66:	2b23      	cmp	r3, #35	@ 0x23
 8018a68:	d84a      	bhi.n	8018b00 <CDC_Control_FS+0xac>
 8018a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8018a70 <CDC_Control_FS+0x1c>)
 8018a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a70:	08018b01 	.word	0x08018b01
 8018a74:	08018b01 	.word	0x08018b01
 8018a78:	08018b01 	.word	0x08018b01
 8018a7c:	08018b01 	.word	0x08018b01
 8018a80:	08018b01 	.word	0x08018b01
 8018a84:	08018b01 	.word	0x08018b01
 8018a88:	08018b01 	.word	0x08018b01
 8018a8c:	08018b01 	.word	0x08018b01
 8018a90:	08018b01 	.word	0x08018b01
 8018a94:	08018b01 	.word	0x08018b01
 8018a98:	08018b01 	.word	0x08018b01
 8018a9c:	08018b01 	.word	0x08018b01
 8018aa0:	08018b01 	.word	0x08018b01
 8018aa4:	08018b01 	.word	0x08018b01
 8018aa8:	08018b01 	.word	0x08018b01
 8018aac:	08018b01 	.word	0x08018b01
 8018ab0:	08018b01 	.word	0x08018b01
 8018ab4:	08018b01 	.word	0x08018b01
 8018ab8:	08018b01 	.word	0x08018b01
 8018abc:	08018b01 	.word	0x08018b01
 8018ac0:	08018b01 	.word	0x08018b01
 8018ac4:	08018b01 	.word	0x08018b01
 8018ac8:	08018b01 	.word	0x08018b01
 8018acc:	08018b01 	.word	0x08018b01
 8018ad0:	08018b01 	.word	0x08018b01
 8018ad4:	08018b01 	.word	0x08018b01
 8018ad8:	08018b01 	.word	0x08018b01
 8018adc:	08018b01 	.word	0x08018b01
 8018ae0:	08018b01 	.word	0x08018b01
 8018ae4:	08018b01 	.word	0x08018b01
 8018ae8:	08018b01 	.word	0x08018b01
 8018aec:	08018b01 	.word	0x08018b01
 8018af0:	08018b01 	.word	0x08018b01
 8018af4:	08018b01 	.word	0x08018b01
 8018af8:	08018b01 	.word	0x08018b01
 8018afc:	08018b01 	.word	0x08018b01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018b00:	bf00      	nop
  }

  return (USBD_OK);
 8018b02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018b04:	4618      	mov	r0, r3
 8018b06:	370c      	adds	r7, #12
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0e:	4770      	bx	lr

08018b10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b084      	sub	sp, #16
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
 8018b18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018b1a:	6879      	ldr	r1, [r7, #4]
 8018b1c:	480f      	ldr	r0, [pc, #60]	@ (8018b5c <CDC_Receive_FS+0x4c>)
 8018b1e:	f7fa fed3 	bl	80138c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018b22:	480e      	ldr	r0, [pc, #56]	@ (8018b5c <CDC_Receive_FS+0x4c>)
 8018b24:	f7fa ff2e 	bl	8013984 <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8018b28:	2240      	movs	r2, #64	@ 0x40
 8018b2a:	2100      	movs	r1, #0
 8018b2c:	480c      	ldr	r0, [pc, #48]	@ (8018b60 <CDC_Receive_FS+0x50>)
 8018b2e:	f002 fe6c 	bl	801b80a <memset>
  uint8_t len = (uint8_t)*Len;
 8018b32:	683b      	ldr	r3, [r7, #0]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8018b38:	7bfb      	ldrb	r3, [r7, #15]
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	6879      	ldr	r1, [r7, #4]
 8018b3e:	4808      	ldr	r0, [pc, #32]	@ (8018b60 <CDC_Receive_FS+0x50>)
 8018b40:	f002 ff7f 	bl	801ba42 <memcpy>
  memset(Buf, '\0', len);
 8018b44:	7bfb      	ldrb	r3, [r7, #15]
 8018b46:	461a      	mov	r2, r3
 8018b48:	2100      	movs	r1, #0
 8018b4a:	6878      	ldr	r0, [r7, #4]
 8018b4c:	f002 fe5d 	bl	801b80a <memset>
  return (USBD_OK);
 8018b50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018b52:	4618      	mov	r0, r3
 8018b54:	3710      	adds	r7, #16
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bd80      	pop	{r7, pc}
 8018b5a:	bf00      	nop
 8018b5c:	20001630 	.word	0x20001630
 8018b60:	20000afc 	.word	0x20000afc

08018b64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b084      	sub	sp, #16
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
 8018b6c:	460b      	mov	r3, r1
 8018b6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018b70:	2300      	movs	r3, #0
 8018b72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018b74:	4b0d      	ldr	r3, [pc, #52]	@ (8018bac <CDC_Transmit_FS+0x48>)
 8018b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018b7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018b7c:	68bb      	ldr	r3, [r7, #8]
 8018b7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d001      	beq.n	8018b8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8018b86:	2301      	movs	r3, #1
 8018b88:	e00b      	b.n	8018ba2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018b8a:	887b      	ldrh	r3, [r7, #2]
 8018b8c:	461a      	mov	r2, r3
 8018b8e:	6879      	ldr	r1, [r7, #4]
 8018b90:	4806      	ldr	r0, [pc, #24]	@ (8018bac <CDC_Transmit_FS+0x48>)
 8018b92:	f7fa fe77 	bl	8013884 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018b96:	4805      	ldr	r0, [pc, #20]	@ (8018bac <CDC_Transmit_FS+0x48>)
 8018b98:	f7fa feb4 	bl	8013904 <USBD_CDC_TransmitPacket>
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	20001630 	.word	0x20001630

08018bb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018bb0:	b480      	push	{r7}
 8018bb2:	b087      	sub	sp, #28
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	60f8      	str	r0, [r7, #12]
 8018bb8:	60b9      	str	r1, [r7, #8]
 8018bba:	4613      	mov	r3, r2
 8018bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	371c      	adds	r7, #28
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd0:	4770      	bx	lr
	...

08018bd4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bd4:	b480      	push	{r7}
 8018bd6:	b083      	sub	sp, #12
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	4603      	mov	r3, r0
 8018bdc:	6039      	str	r1, [r7, #0]
 8018bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	2212      	movs	r2, #18
 8018be4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8018be6:	4b03      	ldr	r3, [pc, #12]	@ (8018bf4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8018be8:	4618      	mov	r0, r3
 8018bea:	370c      	adds	r7, #12
 8018bec:	46bd      	mov	sp, r7
 8018bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf2:	4770      	bx	lr
 8018bf4:	20000108 	.word	0x20000108

08018bf8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bf8:	b480      	push	{r7}
 8018bfa:	b083      	sub	sp, #12
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	4603      	mov	r3, r0
 8018c00:	6039      	str	r1, [r7, #0]
 8018c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018c04:	683b      	ldr	r3, [r7, #0]
 8018c06:	2204      	movs	r2, #4
 8018c08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018c0a:	4b03      	ldr	r3, [pc, #12]	@ (8018c18 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	370c      	adds	r7, #12
 8018c10:	46bd      	mov	sp, r7
 8018c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c16:	4770      	bx	lr
 8018c18:	2000011c 	.word	0x2000011c

08018c1c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b082      	sub	sp, #8
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	4603      	mov	r3, r0
 8018c24:	6039      	str	r1, [r7, #0]
 8018c26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018c28:	79fb      	ldrb	r3, [r7, #7]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d105      	bne.n	8018c3a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018c2e:	683a      	ldr	r2, [r7, #0]
 8018c30:	4907      	ldr	r1, [pc, #28]	@ (8018c50 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018c32:	4808      	ldr	r0, [pc, #32]	@ (8018c54 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018c34:	f7fc f88a 	bl	8014d4c <USBD_GetString>
 8018c38:	e004      	b.n	8018c44 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018c3a:	683a      	ldr	r2, [r7, #0]
 8018c3c:	4904      	ldr	r1, [pc, #16]	@ (8018c50 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018c3e:	4805      	ldr	r0, [pc, #20]	@ (8018c54 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018c40:	f7fc f884 	bl	8014d4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c44:	4b02      	ldr	r3, [pc, #8]	@ (8018c50 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3708      	adds	r7, #8
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}
 8018c4e:	bf00      	nop
 8018c50:	2000290c 	.word	0x2000290c
 8018c54:	08020098 	.word	0x08020098

08018c58 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b082      	sub	sp, #8
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	4603      	mov	r3, r0
 8018c60:	6039      	str	r1, [r7, #0]
 8018c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018c64:	683a      	ldr	r2, [r7, #0]
 8018c66:	4904      	ldr	r1, [pc, #16]	@ (8018c78 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8018c68:	4804      	ldr	r0, [pc, #16]	@ (8018c7c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8018c6a:	f7fc f86f 	bl	8014d4c <USBD_GetString>
  return USBD_StrDesc;
 8018c6e:	4b02      	ldr	r3, [pc, #8]	@ (8018c78 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8018c70:	4618      	mov	r0, r3
 8018c72:	3708      	adds	r7, #8
 8018c74:	46bd      	mov	sp, r7
 8018c76:	bd80      	pop	{r7, pc}
 8018c78:	2000290c 	.word	0x2000290c
 8018c7c:	080200b0 	.word	0x080200b0

08018c80 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b082      	sub	sp, #8
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	4603      	mov	r3, r0
 8018c88:	6039      	str	r1, [r7, #0]
 8018c8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018c8c:	683b      	ldr	r3, [r7, #0]
 8018c8e:	221a      	movs	r2, #26
 8018c90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018c92:	f000 f843 	bl	8018d1c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8018c96:	4b02      	ldr	r3, [pc, #8]	@ (8018ca0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	3708      	adds	r7, #8
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	bd80      	pop	{r7, pc}
 8018ca0:	20000120 	.word	0x20000120

08018ca4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b082      	sub	sp, #8
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	4603      	mov	r3, r0
 8018cac:	6039      	str	r1, [r7, #0]
 8018cae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018cb0:	79fb      	ldrb	r3, [r7, #7]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d105      	bne.n	8018cc2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018cb6:	683a      	ldr	r2, [r7, #0]
 8018cb8:	4907      	ldr	r1, [pc, #28]	@ (8018cd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018cba:	4808      	ldr	r0, [pc, #32]	@ (8018cdc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018cbc:	f7fc f846 	bl	8014d4c <USBD_GetString>
 8018cc0:	e004      	b.n	8018ccc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018cc2:	683a      	ldr	r2, [r7, #0]
 8018cc4:	4904      	ldr	r1, [pc, #16]	@ (8018cd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018cc6:	4805      	ldr	r0, [pc, #20]	@ (8018cdc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018cc8:	f7fc f840 	bl	8014d4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018ccc:	4b02      	ldr	r3, [pc, #8]	@ (8018cd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8018cce:	4618      	mov	r0, r3
 8018cd0:	3708      	adds	r7, #8
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	bd80      	pop	{r7, pc}
 8018cd6:	bf00      	nop
 8018cd8:	2000290c 	.word	0x2000290c
 8018cdc:	080200c4 	.word	0x080200c4

08018ce0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b082      	sub	sp, #8
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	6039      	str	r1, [r7, #0]
 8018cea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018cec:	79fb      	ldrb	r3, [r7, #7]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d105      	bne.n	8018cfe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018cf2:	683a      	ldr	r2, [r7, #0]
 8018cf4:	4907      	ldr	r1, [pc, #28]	@ (8018d14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018cf6:	4808      	ldr	r0, [pc, #32]	@ (8018d18 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018cf8:	f7fc f828 	bl	8014d4c <USBD_GetString>
 8018cfc:	e004      	b.n	8018d08 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018cfe:	683a      	ldr	r2, [r7, #0]
 8018d00:	4904      	ldr	r1, [pc, #16]	@ (8018d14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018d02:	4805      	ldr	r0, [pc, #20]	@ (8018d18 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018d04:	f7fc f822 	bl	8014d4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d08:	4b02      	ldr	r3, [pc, #8]	@ (8018d14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	3708      	adds	r7, #8
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	bd80      	pop	{r7, pc}
 8018d12:	bf00      	nop
 8018d14:	2000290c 	.word	0x2000290c
 8018d18:	080200d0 	.word	0x080200d0

08018d1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b084      	sub	sp, #16
 8018d20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018d22:	4b0f      	ldr	r3, [pc, #60]	@ (8018d60 <Get_SerialNum+0x44>)
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018d28:	4b0e      	ldr	r3, [pc, #56]	@ (8018d64 <Get_SerialNum+0x48>)
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8018d68 <Get_SerialNum+0x4c>)
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018d34:	68fa      	ldr	r2, [r7, #12]
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	4413      	add	r3, r2
 8018d3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d009      	beq.n	8018d56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018d42:	2208      	movs	r2, #8
 8018d44:	4909      	ldr	r1, [pc, #36]	@ (8018d6c <Get_SerialNum+0x50>)
 8018d46:	68f8      	ldr	r0, [r7, #12]
 8018d48:	f000 f814 	bl	8018d74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018d4c:	2204      	movs	r2, #4
 8018d4e:	4908      	ldr	r1, [pc, #32]	@ (8018d70 <Get_SerialNum+0x54>)
 8018d50:	68b8      	ldr	r0, [r7, #8]
 8018d52:	f000 f80f 	bl	8018d74 <IntToUnicode>
  }
}
 8018d56:	bf00      	nop
 8018d58:	3710      	adds	r7, #16
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}
 8018d5e:	bf00      	nop
 8018d60:	1fff7590 	.word	0x1fff7590
 8018d64:	1fff7594 	.word	0x1fff7594
 8018d68:	1fff7598 	.word	0x1fff7598
 8018d6c:	20000122 	.word	0x20000122
 8018d70:	20000132 	.word	0x20000132

08018d74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018d74:	b480      	push	{r7}
 8018d76:	b087      	sub	sp, #28
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	60f8      	str	r0, [r7, #12]
 8018d7c:	60b9      	str	r1, [r7, #8]
 8018d7e:	4613      	mov	r3, r2
 8018d80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018d82:	2300      	movs	r3, #0
 8018d84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018d86:	2300      	movs	r3, #0
 8018d88:	75fb      	strb	r3, [r7, #23]
 8018d8a:	e027      	b.n	8018ddc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	0f1b      	lsrs	r3, r3, #28
 8018d90:	2b09      	cmp	r3, #9
 8018d92:	d80b      	bhi.n	8018dac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	0f1b      	lsrs	r3, r3, #28
 8018d98:	b2da      	uxtb	r2, r3
 8018d9a:	7dfb      	ldrb	r3, [r7, #23]
 8018d9c:	005b      	lsls	r3, r3, #1
 8018d9e:	4619      	mov	r1, r3
 8018da0:	68bb      	ldr	r3, [r7, #8]
 8018da2:	440b      	add	r3, r1
 8018da4:	3230      	adds	r2, #48	@ 0x30
 8018da6:	b2d2      	uxtb	r2, r2
 8018da8:	701a      	strb	r2, [r3, #0]
 8018daa:	e00a      	b.n	8018dc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	0f1b      	lsrs	r3, r3, #28
 8018db0:	b2da      	uxtb	r2, r3
 8018db2:	7dfb      	ldrb	r3, [r7, #23]
 8018db4:	005b      	lsls	r3, r3, #1
 8018db6:	4619      	mov	r1, r3
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	440b      	add	r3, r1
 8018dbc:	3237      	adds	r2, #55	@ 0x37
 8018dbe:	b2d2      	uxtb	r2, r2
 8018dc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	011b      	lsls	r3, r3, #4
 8018dc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018dc8:	7dfb      	ldrb	r3, [r7, #23]
 8018dca:	005b      	lsls	r3, r3, #1
 8018dcc:	3301      	adds	r3, #1
 8018dce:	68ba      	ldr	r2, [r7, #8]
 8018dd0:	4413      	add	r3, r2
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018dd6:	7dfb      	ldrb	r3, [r7, #23]
 8018dd8:	3301      	adds	r3, #1
 8018dda:	75fb      	strb	r3, [r7, #23]
 8018ddc:	7dfa      	ldrb	r2, [r7, #23]
 8018dde:	79fb      	ldrb	r3, [r7, #7]
 8018de0:	429a      	cmp	r2, r3
 8018de2:	d3d3      	bcc.n	8018d8c <IntToUnicode+0x18>
  }
}
 8018de4:	bf00      	nop
 8018de6:	bf00      	nop
 8018de8:	371c      	adds	r7, #28
 8018dea:	46bd      	mov	sp, r7
 8018dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df0:	4770      	bx	lr

08018df2 <LL_AHB2_GRP1_EnableClock>:
{
 8018df2:	b480      	push	{r7}
 8018df4:	b085      	sub	sp, #20
 8018df6:	af00      	add	r7, sp, #0
 8018df8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8018dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018e00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	4313      	orrs	r3, r2
 8018e08:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8018e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018e0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	4013      	ands	r3, r2
 8018e14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018e16:	68fb      	ldr	r3, [r7, #12]
}
 8018e18:	bf00      	nop
 8018e1a:	3714      	adds	r7, #20
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e22:	4770      	bx	lr

08018e24 <LL_APB1_GRP1_EnableClock>:
{
 8018e24:	b480      	push	{r7}
 8018e26:	b085      	sub	sp, #20
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018e30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018e32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	4313      	orrs	r3, r2
 8018e3a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018e40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	4013      	ands	r3, r2
 8018e46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018e48:	68fb      	ldr	r3, [r7, #12]
}
 8018e4a:	bf00      	nop
 8018e4c:	3714      	adds	r7, #20
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e54:	4770      	bx	lr
	...

08018e58 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b088      	sub	sp, #32
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018e60:	f107 030c 	add.w	r3, r7, #12
 8018e64:	2200      	movs	r2, #0
 8018e66:	601a      	str	r2, [r3, #0]
 8018e68:	605a      	str	r2, [r3, #4]
 8018e6a:	609a      	str	r2, [r3, #8]
 8018e6c:	60da      	str	r2, [r3, #12]
 8018e6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	4a13      	ldr	r2, [pc, #76]	@ (8018ec4 <HAL_PCD_MspInit+0x6c>)
 8018e76:	4293      	cmp	r3, r2
 8018e78:	d120      	bne.n	8018ebc <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018e7a:	2001      	movs	r0, #1
 8018e7c:	f7ff ffb9 	bl	8018df2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018e80:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018e84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018e86:	2302      	movs	r3, #2
 8018e88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018e8e:	2300      	movs	r3, #0
 8018e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018e92:	230a      	movs	r3, #10
 8018e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018e96:	f107 030c 	add.w	r3, r7, #12
 8018e9a:	4619      	mov	r1, r3
 8018e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8018ea0:	f7f0 f958 	bl	8009154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018ea4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8018ea8:	f7ff ffbc 	bl	8018e24 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8018eac:	2200      	movs	r2, #0
 8018eae:	2105      	movs	r1, #5
 8018eb0:	2014      	movs	r0, #20
 8018eb2:	f7ef fd1c 	bl	80088ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018eb6:	2014      	movs	r0, #20
 8018eb8:	f7ef fd33 	bl	8008922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018ebc:	bf00      	nop
 8018ebe:	3720      	adds	r7, #32
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	bd80      	pop	{r7, pc}
 8018ec4:	40006800 	.word	0x40006800

08018ec8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b082      	sub	sp, #8
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018edc:	4619      	mov	r1, r3
 8018ede:	4610      	mov	r0, r2
 8018ee0:	f7fa fe39 	bl	8013b56 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018ee4:	bf00      	nop
 8018ee6:	3708      	adds	r7, #8
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}

08018eec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b082      	sub	sp, #8
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
 8018ef4:	460b      	mov	r3, r1
 8018ef6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018efe:	78fa      	ldrb	r2, [r7, #3]
 8018f00:	6879      	ldr	r1, [r7, #4]
 8018f02:	4613      	mov	r3, r2
 8018f04:	009b      	lsls	r3, r3, #2
 8018f06:	4413      	add	r3, r2
 8018f08:	00db      	lsls	r3, r3, #3
 8018f0a:	440b      	add	r3, r1
 8018f0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018f10:	681a      	ldr	r2, [r3, #0]
 8018f12:	78fb      	ldrb	r3, [r7, #3]
 8018f14:	4619      	mov	r1, r3
 8018f16:	f7fa fe73 	bl	8013c00 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018f1a:	bf00      	nop
 8018f1c:	3708      	adds	r7, #8
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}

08018f22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f22:	b580      	push	{r7, lr}
 8018f24:	b082      	sub	sp, #8
 8018f26:	af00      	add	r7, sp, #0
 8018f28:	6078      	str	r0, [r7, #4]
 8018f2a:	460b      	mov	r3, r1
 8018f2c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018f34:	78fa      	ldrb	r2, [r7, #3]
 8018f36:	6879      	ldr	r1, [r7, #4]
 8018f38:	4613      	mov	r3, r2
 8018f3a:	009b      	lsls	r3, r3, #2
 8018f3c:	4413      	add	r3, r2
 8018f3e:	00db      	lsls	r3, r3, #3
 8018f40:	440b      	add	r3, r1
 8018f42:	3324      	adds	r3, #36	@ 0x24
 8018f44:	681a      	ldr	r2, [r3, #0]
 8018f46:	78fb      	ldrb	r3, [r7, #3]
 8018f48:	4619      	mov	r1, r3
 8018f4a:	f7fa ff0c 	bl	8013d66 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018f4e:	bf00      	nop
 8018f50:	3708      	adds	r7, #8
 8018f52:	46bd      	mov	sp, r7
 8018f54:	bd80      	pop	{r7, pc}

08018f56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f56:	b580      	push	{r7, lr}
 8018f58:	b082      	sub	sp, #8
 8018f5a:	af00      	add	r7, sp, #0
 8018f5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018f64:	4618      	mov	r0, r3
 8018f66:	f7fb f846 	bl	8013ff6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018f6a:	bf00      	nop
 8018f6c:	3708      	adds	r7, #8
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bd80      	pop	{r7, pc}

08018f72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f72:	b580      	push	{r7, lr}
 8018f74:	b084      	sub	sp, #16
 8018f76:	af00      	add	r7, sp, #0
 8018f78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018f7a:	2301      	movs	r3, #1
 8018f7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	795b      	ldrb	r3, [r3, #5]
 8018f82:	2b02      	cmp	r3, #2
 8018f84:	d001      	beq.n	8018f8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018f86:	f7e9 ff33 	bl	8002df0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018f90:	7bfa      	ldrb	r2, [r7, #15]
 8018f92:	4611      	mov	r1, r2
 8018f94:	4618      	mov	r0, r3
 8018f96:	f7fa ffea 	bl	8013f6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	f7fa ff92 	bl	8013eca <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018fa6:	bf00      	nop
 8018fa8:	3710      	adds	r7, #16
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
	...

08018fb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b082      	sub	sp, #8
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7fa ffe5 	bl	8013f8e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	7a5b      	ldrb	r3, [r3, #9]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d005      	beq.n	8018fd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018fcc:	4b04      	ldr	r3, [pc, #16]	@ (8018fe0 <HAL_PCD_SuspendCallback+0x30>)
 8018fce:	691b      	ldr	r3, [r3, #16]
 8018fd0:	4a03      	ldr	r2, [pc, #12]	@ (8018fe0 <HAL_PCD_SuspendCallback+0x30>)
 8018fd2:	f043 0306 	orr.w	r3, r3, #6
 8018fd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018fd8:	bf00      	nop
 8018fda:	3708      	adds	r7, #8
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}
 8018fe0:	e000ed00 	.word	0xe000ed00

08018fe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b082      	sub	sp, #8
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	7a5b      	ldrb	r3, [r3, #9]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d007      	beq.n	8019004 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018ff4:	4b08      	ldr	r3, [pc, #32]	@ (8019018 <HAL_PCD_ResumeCallback+0x34>)
 8018ff6:	691b      	ldr	r3, [r3, #16]
 8018ff8:	4a07      	ldr	r2, [pc, #28]	@ (8019018 <HAL_PCD_ResumeCallback+0x34>)
 8018ffa:	f023 0306 	bic.w	r3, r3, #6
 8018ffe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019000:	f000 f9fa 	bl	80193f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801900a:	4618      	mov	r0, r3
 801900c:	f7fa ffdb 	bl	8013fc6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8019010:	bf00      	nop
 8019012:	3708      	adds	r7, #8
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}
 8019018:	e000ed00 	.word	0xe000ed00

0801901c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b082      	sub	sp, #8
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8019024:	4a2c      	ldr	r2, [pc, #176]	@ (80190d8 <USBD_LL_Init+0xbc>)
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	4a2a      	ldr	r2, [pc, #168]	@ (80190d8 <USBD_LL_Init+0xbc>)
 8019030:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8019034:	f7f2 fdfe 	bl	800bc34 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8019038:	4b27      	ldr	r3, [pc, #156]	@ (80190d8 <USBD_LL_Init+0xbc>)
 801903a:	4a28      	ldr	r2, [pc, #160]	@ (80190dc <USBD_LL_Init+0xc0>)
 801903c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801903e:	4b26      	ldr	r3, [pc, #152]	@ (80190d8 <USBD_LL_Init+0xbc>)
 8019040:	2208      	movs	r2, #8
 8019042:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019044:	4b24      	ldr	r3, [pc, #144]	@ (80190d8 <USBD_LL_Init+0xbc>)
 8019046:	2202      	movs	r2, #2
 8019048:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801904a:	4b23      	ldr	r3, [pc, #140]	@ (80190d8 <USBD_LL_Init+0xbc>)
 801904c:	2202      	movs	r2, #2
 801904e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8019050:	4b21      	ldr	r3, [pc, #132]	@ (80190d8 <USBD_LL_Init+0xbc>)
 8019052:	2200      	movs	r2, #0
 8019054:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019056:	4b20      	ldr	r3, [pc, #128]	@ (80190d8 <USBD_LL_Init+0xbc>)
 8019058:	2200      	movs	r2, #0
 801905a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801905c:	4b1e      	ldr	r3, [pc, #120]	@ (80190d8 <USBD_LL_Init+0xbc>)
 801905e:	2200      	movs	r2, #0
 8019060:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8019062:	4b1d      	ldr	r3, [pc, #116]	@ (80190d8 <USBD_LL_Init+0xbc>)
 8019064:	2200      	movs	r2, #0
 8019066:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019068:	481b      	ldr	r0, [pc, #108]	@ (80190d8 <USBD_LL_Init+0xbc>)
 801906a:	f7f1 f8c3 	bl	800a1f4 <HAL_PCD_Init>
 801906e:	4603      	mov	r3, r0
 8019070:	2b00      	cmp	r3, #0
 8019072:	d001      	beq.n	8019078 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8019074:	f7e9 febc 	bl	8002df0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801907e:	2318      	movs	r3, #24
 8019080:	2200      	movs	r2, #0
 8019082:	2100      	movs	r1, #0
 8019084:	f7f2 fd4a 	bl	800bb1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801908e:	2358      	movs	r3, #88	@ 0x58
 8019090:	2200      	movs	r2, #0
 8019092:	2180      	movs	r1, #128	@ 0x80
 8019094:	f7f2 fd42 	bl	800bb1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801909e:	23c0      	movs	r3, #192	@ 0xc0
 80190a0:	2200      	movs	r2, #0
 80190a2:	2181      	movs	r1, #129	@ 0x81
 80190a4:	f7f2 fd3a 	bl	800bb1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80190ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80190b2:	2200      	movs	r2, #0
 80190b4:	2101      	movs	r1, #1
 80190b6:	f7f2 fd31 	bl	800bb1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80190c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80190c4:	2200      	movs	r2, #0
 80190c6:	2182      	movs	r1, #130	@ 0x82
 80190c8:	f7f2 fd28 	bl	800bb1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80190cc:	2300      	movs	r3, #0
}
 80190ce:	4618      	mov	r0, r3
 80190d0:	3708      	adds	r7, #8
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}
 80190d6:	bf00      	nop
 80190d8:	20002b0c 	.word	0x20002b0c
 80190dc:	40006800 	.word	0x40006800

080190e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80190e0:	b580      	push	{r7, lr}
 80190e2:	b084      	sub	sp, #16
 80190e4:	af00      	add	r7, sp, #0
 80190e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190e8:	2300      	movs	r3, #0
 80190ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190ec:	2300      	movs	r3, #0
 80190ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80190f6:	4618      	mov	r0, r3
 80190f8:	f7f1 f94a 	bl	800a390 <HAL_PCD_Start>
 80190fc:	4603      	mov	r3, r0
 80190fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019100:	7bfb      	ldrb	r3, [r7, #15]
 8019102:	4618      	mov	r0, r3
 8019104:	f000 f97e 	bl	8019404 <USBD_Get_USB_Status>
 8019108:	4603      	mov	r3, r0
 801910a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801910c:	7bbb      	ldrb	r3, [r7, #14]
}
 801910e:	4618      	mov	r0, r3
 8019110:	3710      	adds	r7, #16
 8019112:	46bd      	mov	sp, r7
 8019114:	bd80      	pop	{r7, pc}

08019116 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019116:	b580      	push	{r7, lr}
 8019118:	b084      	sub	sp, #16
 801911a:	af00      	add	r7, sp, #0
 801911c:	6078      	str	r0, [r7, #4]
 801911e:	4608      	mov	r0, r1
 8019120:	4611      	mov	r1, r2
 8019122:	461a      	mov	r2, r3
 8019124:	4603      	mov	r3, r0
 8019126:	70fb      	strb	r3, [r7, #3]
 8019128:	460b      	mov	r3, r1
 801912a:	70bb      	strb	r3, [r7, #2]
 801912c:	4613      	mov	r3, r2
 801912e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019130:	2300      	movs	r3, #0
 8019132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019134:	2300      	movs	r3, #0
 8019136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801913e:	78bb      	ldrb	r3, [r7, #2]
 8019140:	883a      	ldrh	r2, [r7, #0]
 8019142:	78f9      	ldrb	r1, [r7, #3]
 8019144:	f7f1 fa91 	bl	800a66a <HAL_PCD_EP_Open>
 8019148:	4603      	mov	r3, r0
 801914a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801914c:	7bfb      	ldrb	r3, [r7, #15]
 801914e:	4618      	mov	r0, r3
 8019150:	f000 f958 	bl	8019404 <USBD_Get_USB_Status>
 8019154:	4603      	mov	r3, r0
 8019156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019158:	7bbb      	ldrb	r3, [r7, #14]
}
 801915a:	4618      	mov	r0, r3
 801915c:	3710      	adds	r7, #16
 801915e:	46bd      	mov	sp, r7
 8019160:	bd80      	pop	{r7, pc}

08019162 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019162:	b580      	push	{r7, lr}
 8019164:	b084      	sub	sp, #16
 8019166:	af00      	add	r7, sp, #0
 8019168:	6078      	str	r0, [r7, #4]
 801916a:	460b      	mov	r3, r1
 801916c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801916e:	2300      	movs	r3, #0
 8019170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019172:	2300      	movs	r3, #0
 8019174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801917c:	78fa      	ldrb	r2, [r7, #3]
 801917e:	4611      	mov	r1, r2
 8019180:	4618      	mov	r0, r3
 8019182:	f7f1 fad1 	bl	800a728 <HAL_PCD_EP_Close>
 8019186:	4603      	mov	r3, r0
 8019188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801918a:	7bfb      	ldrb	r3, [r7, #15]
 801918c:	4618      	mov	r0, r3
 801918e:	f000 f939 	bl	8019404 <USBD_Get_USB_Status>
 8019192:	4603      	mov	r3, r0
 8019194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019196:	7bbb      	ldrb	r3, [r7, #14]
}
 8019198:	4618      	mov	r0, r3
 801919a:	3710      	adds	r7, #16
 801919c:	46bd      	mov	sp, r7
 801919e:	bd80      	pop	{r7, pc}

080191a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b084      	sub	sp, #16
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
 80191a8:	460b      	mov	r3, r1
 80191aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191ac:	2300      	movs	r3, #0
 80191ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191b0:	2300      	movs	r3, #0
 80191b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80191ba:	78fa      	ldrb	r2, [r7, #3]
 80191bc:	4611      	mov	r1, r2
 80191be:	4618      	mov	r0, r3
 80191c0:	f7f1 fb7a 	bl	800a8b8 <HAL_PCD_EP_SetStall>
 80191c4:	4603      	mov	r3, r0
 80191c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191c8:	7bfb      	ldrb	r3, [r7, #15]
 80191ca:	4618      	mov	r0, r3
 80191cc:	f000 f91a 	bl	8019404 <USBD_Get_USB_Status>
 80191d0:	4603      	mov	r3, r0
 80191d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80191d6:	4618      	mov	r0, r3
 80191d8:	3710      	adds	r7, #16
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd80      	pop	{r7, pc}

080191de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191de:	b580      	push	{r7, lr}
 80191e0:	b084      	sub	sp, #16
 80191e2:	af00      	add	r7, sp, #0
 80191e4:	6078      	str	r0, [r7, #4]
 80191e6:	460b      	mov	r3, r1
 80191e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191ea:	2300      	movs	r3, #0
 80191ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191ee:	2300      	movs	r3, #0
 80191f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80191f8:	78fa      	ldrb	r2, [r7, #3]
 80191fa:	4611      	mov	r1, r2
 80191fc:	4618      	mov	r0, r3
 80191fe:	f7f1 fbad 	bl	800a95c <HAL_PCD_EP_ClrStall>
 8019202:	4603      	mov	r3, r0
 8019204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019206:	7bfb      	ldrb	r3, [r7, #15]
 8019208:	4618      	mov	r0, r3
 801920a:	f000 f8fb 	bl	8019404 <USBD_Get_USB_Status>
 801920e:	4603      	mov	r3, r0
 8019210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019212:	7bbb      	ldrb	r3, [r7, #14]
}
 8019214:	4618      	mov	r0, r3
 8019216:	3710      	adds	r7, #16
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}

0801921c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801921c:	b480      	push	{r7}
 801921e:	b085      	sub	sp, #20
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
 8019224:	460b      	mov	r3, r1
 8019226:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801922e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019234:	2b00      	cmp	r3, #0
 8019236:	da0b      	bge.n	8019250 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019238:	78fb      	ldrb	r3, [r7, #3]
 801923a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801923e:	68f9      	ldr	r1, [r7, #12]
 8019240:	4613      	mov	r3, r2
 8019242:	009b      	lsls	r3, r3, #2
 8019244:	4413      	add	r3, r2
 8019246:	00db      	lsls	r3, r3, #3
 8019248:	440b      	add	r3, r1
 801924a:	3312      	adds	r3, #18
 801924c:	781b      	ldrb	r3, [r3, #0]
 801924e:	e00b      	b.n	8019268 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019250:	78fb      	ldrb	r3, [r7, #3]
 8019252:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019256:	68f9      	ldr	r1, [r7, #12]
 8019258:	4613      	mov	r3, r2
 801925a:	009b      	lsls	r3, r3, #2
 801925c:	4413      	add	r3, r2
 801925e:	00db      	lsls	r3, r3, #3
 8019260:	440b      	add	r3, r1
 8019262:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8019266:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019268:	4618      	mov	r0, r3
 801926a:	3714      	adds	r7, #20
 801926c:	46bd      	mov	sp, r7
 801926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019272:	4770      	bx	lr

08019274 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b084      	sub	sp, #16
 8019278:	af00      	add	r7, sp, #0
 801927a:	6078      	str	r0, [r7, #4]
 801927c:	460b      	mov	r3, r1
 801927e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019280:	2300      	movs	r3, #0
 8019282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019284:	2300      	movs	r3, #0
 8019286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801928e:	78fa      	ldrb	r2, [r7, #3]
 8019290:	4611      	mov	r1, r2
 8019292:	4618      	mov	r0, r3
 8019294:	f7f1 f9c5 	bl	800a622 <HAL_PCD_SetAddress>
 8019298:	4603      	mov	r3, r0
 801929a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801929c:	7bfb      	ldrb	r3, [r7, #15]
 801929e:	4618      	mov	r0, r3
 80192a0:	f000 f8b0 	bl	8019404 <USBD_Get_USB_Status>
 80192a4:	4603      	mov	r3, r0
 80192a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80192aa:	4618      	mov	r0, r3
 80192ac:	3710      	adds	r7, #16
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}

080192b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80192b2:	b580      	push	{r7, lr}
 80192b4:	b086      	sub	sp, #24
 80192b6:	af00      	add	r7, sp, #0
 80192b8:	60f8      	str	r0, [r7, #12]
 80192ba:	607a      	str	r2, [r7, #4]
 80192bc:	603b      	str	r3, [r7, #0]
 80192be:	460b      	mov	r3, r1
 80192c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192c2:	2300      	movs	r3, #0
 80192c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192c6:	2300      	movs	r3, #0
 80192c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80192d0:	7af9      	ldrb	r1, [r7, #11]
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	687a      	ldr	r2, [r7, #4]
 80192d6:	f7f1 fab8 	bl	800a84a <HAL_PCD_EP_Transmit>
 80192da:	4603      	mov	r3, r0
 80192dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192de:	7dfb      	ldrb	r3, [r7, #23]
 80192e0:	4618      	mov	r0, r3
 80192e2:	f000 f88f 	bl	8019404 <USBD_Get_USB_Status>
 80192e6:	4603      	mov	r3, r0
 80192e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80192ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80192ec:	4618      	mov	r0, r3
 80192ee:	3718      	adds	r7, #24
 80192f0:	46bd      	mov	sp, r7
 80192f2:	bd80      	pop	{r7, pc}

080192f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b086      	sub	sp, #24
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	60f8      	str	r0, [r7, #12]
 80192fc:	607a      	str	r2, [r7, #4]
 80192fe:	603b      	str	r3, [r7, #0]
 8019300:	460b      	mov	r3, r1
 8019302:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019304:	2300      	movs	r3, #0
 8019306:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019308:	2300      	movs	r3, #0
 801930a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019312:	7af9      	ldrb	r1, [r7, #11]
 8019314:	683b      	ldr	r3, [r7, #0]
 8019316:	687a      	ldr	r2, [r7, #4]
 8019318:	f7f1 fa4e 	bl	800a7b8 <HAL_PCD_EP_Receive>
 801931c:	4603      	mov	r3, r0
 801931e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019320:	7dfb      	ldrb	r3, [r7, #23]
 8019322:	4618      	mov	r0, r3
 8019324:	f000 f86e 	bl	8019404 <USBD_Get_USB_Status>
 8019328:	4603      	mov	r3, r0
 801932a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801932c:	7dbb      	ldrb	r3, [r7, #22]
}
 801932e:	4618      	mov	r0, r3
 8019330:	3718      	adds	r7, #24
 8019332:	46bd      	mov	sp, r7
 8019334:	bd80      	pop	{r7, pc}

08019336 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019336:	b580      	push	{r7, lr}
 8019338:	b082      	sub	sp, #8
 801933a:	af00      	add	r7, sp, #0
 801933c:	6078      	str	r0, [r7, #4]
 801933e:	460b      	mov	r3, r1
 8019340:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019348:	78fa      	ldrb	r2, [r7, #3]
 801934a:	4611      	mov	r1, r2
 801934c:	4618      	mov	r0, r3
 801934e:	f7f1 fa64 	bl	800a81a <HAL_PCD_EP_GetRxCount>
 8019352:	4603      	mov	r3, r0
}
 8019354:	4618      	mov	r0, r3
 8019356:	3708      	adds	r7, #8
 8019358:	46bd      	mov	sp, r7
 801935a:	bd80      	pop	{r7, pc}

0801935c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b082      	sub	sp, #8
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
 8019364:	460b      	mov	r3, r1
 8019366:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019368:	78fb      	ldrb	r3, [r7, #3]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d002      	beq.n	8019374 <HAL_PCDEx_LPM_Callback+0x18>
 801936e:	2b01      	cmp	r3, #1
 8019370:	d013      	beq.n	801939a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8019372:	e023      	b.n	80193bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	7a5b      	ldrb	r3, [r3, #9]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d007      	beq.n	801938c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801937c:	f000 f83c 	bl	80193f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019380:	4b10      	ldr	r3, [pc, #64]	@ (80193c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8019382:	691b      	ldr	r3, [r3, #16]
 8019384:	4a0f      	ldr	r2, [pc, #60]	@ (80193c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8019386:	f023 0306 	bic.w	r3, r3, #6
 801938a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8019392:	4618      	mov	r0, r3
 8019394:	f7fa fe17 	bl	8013fc6 <USBD_LL_Resume>
    break;
 8019398:	e010      	b.n	80193bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80193a0:	4618      	mov	r0, r3
 80193a2:	f7fa fdf4 	bl	8013f8e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	7a5b      	ldrb	r3, [r3, #9]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d005      	beq.n	80193ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80193ae:	4b05      	ldr	r3, [pc, #20]	@ (80193c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80193b0:	691b      	ldr	r3, [r3, #16]
 80193b2:	4a04      	ldr	r2, [pc, #16]	@ (80193c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80193b4:	f043 0306 	orr.w	r3, r3, #6
 80193b8:	6113      	str	r3, [r2, #16]
    break;
 80193ba:	bf00      	nop
}
 80193bc:	bf00      	nop
 80193be:	3708      	adds	r7, #8
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}
 80193c4:	e000ed00 	.word	0xe000ed00

080193c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80193c8:	b480      	push	{r7}
 80193ca:	b083      	sub	sp, #12
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80193d0:	4b03      	ldr	r3, [pc, #12]	@ (80193e0 <USBD_static_malloc+0x18>)
}
 80193d2:	4618      	mov	r0, r3
 80193d4:	370c      	adds	r7, #12
 80193d6:	46bd      	mov	sp, r7
 80193d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193dc:	4770      	bx	lr
 80193de:	bf00      	nop
 80193e0:	20002de8 	.word	0x20002de8

080193e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80193e4:	b480      	push	{r7}
 80193e6:	b083      	sub	sp, #12
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80193ec:	bf00      	nop
 80193ee:	370c      	adds	r7, #12
 80193f0:	46bd      	mov	sp, r7
 80193f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f6:	4770      	bx	lr

080193f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80193fc:	f7e9 fc5a 	bl	8002cb4 <SystemClock_Config>
}
 8019400:	bf00      	nop
 8019402:	bd80      	pop	{r7, pc}

08019404 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019404:	b480      	push	{r7}
 8019406:	b085      	sub	sp, #20
 8019408:	af00      	add	r7, sp, #0
 801940a:	4603      	mov	r3, r0
 801940c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801940e:	2300      	movs	r3, #0
 8019410:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019412:	79fb      	ldrb	r3, [r7, #7]
 8019414:	2b03      	cmp	r3, #3
 8019416:	d817      	bhi.n	8019448 <USBD_Get_USB_Status+0x44>
 8019418:	a201      	add	r2, pc, #4	@ (adr r2, 8019420 <USBD_Get_USB_Status+0x1c>)
 801941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801941e:	bf00      	nop
 8019420:	08019431 	.word	0x08019431
 8019424:	08019437 	.word	0x08019437
 8019428:	0801943d 	.word	0x0801943d
 801942c:	08019443 	.word	0x08019443
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019430:	2300      	movs	r3, #0
 8019432:	73fb      	strb	r3, [r7, #15]
    break;
 8019434:	e00b      	b.n	801944e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019436:	2303      	movs	r3, #3
 8019438:	73fb      	strb	r3, [r7, #15]
    break;
 801943a:	e008      	b.n	801944e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801943c:	2301      	movs	r3, #1
 801943e:	73fb      	strb	r3, [r7, #15]
    break;
 8019440:	e005      	b.n	801944e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019442:	2303      	movs	r3, #3
 8019444:	73fb      	strb	r3, [r7, #15]
    break;
 8019446:	e002      	b.n	801944e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019448:	2303      	movs	r3, #3
 801944a:	73fb      	strb	r3, [r7, #15]
    break;
 801944c:	bf00      	nop
  }
  return usb_status;
 801944e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019450:	4618      	mov	r0, r3
 8019452:	3714      	adds	r7, #20
 8019454:	46bd      	mov	sp, r7
 8019456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945a:	4770      	bx	lr

0801945c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801945c:	b480      	push	{r7}
 801945e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019460:	4b05      	ldr	r3, [pc, #20]	@ (8019478 <UTIL_LPM_Init+0x1c>)
 8019462:	2200      	movs	r2, #0
 8019464:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019466:	4b05      	ldr	r3, [pc, #20]	@ (801947c <UTIL_LPM_Init+0x20>)
 8019468:	2200      	movs	r2, #0
 801946a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801946c:	bf00      	nop
 801946e:	46bd      	mov	sp, r7
 8019470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019474:	4770      	bx	lr
 8019476:	bf00      	nop
 8019478:	20003008 	.word	0x20003008
 801947c:	2000300c 	.word	0x2000300c

08019480 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019480:	b480      	push	{r7}
 8019482:	b087      	sub	sp, #28
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
 8019488:	460b      	mov	r3, r1
 801948a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801948c:	f3ef 8310 	mrs	r3, PRIMASK
 8019490:	613b      	str	r3, [r7, #16]
  return(result);
 8019492:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019494:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019496:	b672      	cpsid	i
}
 8019498:	bf00      	nop
  
  switch(state)
 801949a:	78fb      	ldrb	r3, [r7, #3]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d008      	beq.n	80194b2 <UTIL_LPM_SetOffMode+0x32>
 80194a0:	2b01      	cmp	r3, #1
 80194a2:	d10e      	bne.n	80194c2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80194a4:	4b0d      	ldr	r3, [pc, #52]	@ (80194dc <UTIL_LPM_SetOffMode+0x5c>)
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	4313      	orrs	r3, r2
 80194ac:	4a0b      	ldr	r2, [pc, #44]	@ (80194dc <UTIL_LPM_SetOffMode+0x5c>)
 80194ae:	6013      	str	r3, [r2, #0]
      break;
 80194b0:	e008      	b.n	80194c4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	43da      	mvns	r2, r3
 80194b6:	4b09      	ldr	r3, [pc, #36]	@ (80194dc <UTIL_LPM_SetOffMode+0x5c>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	4013      	ands	r3, r2
 80194bc:	4a07      	ldr	r2, [pc, #28]	@ (80194dc <UTIL_LPM_SetOffMode+0x5c>)
 80194be:	6013      	str	r3, [r2, #0]
      break;
 80194c0:	e000      	b.n	80194c4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80194c2:	bf00      	nop
 80194c4:	697b      	ldr	r3, [r7, #20]
 80194c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	f383 8810 	msr	PRIMASK, r3
}
 80194ce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80194d0:	bf00      	nop
 80194d2:	371c      	adds	r7, #28
 80194d4:	46bd      	mov	sp, r7
 80194d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194da:	4770      	bx	lr
 80194dc:	2000300c 	.word	0x2000300c

080194e0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	b090      	sub	sp, #64	@ 0x40
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80194e8:	4b73      	ldr	r3, [pc, #460]	@ (80196b8 <UTIL_SEQ_Run+0x1d8>)
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80194ee:	4b72      	ldr	r3, [pc, #456]	@ (80196b8 <UTIL_SEQ_Run+0x1d8>)
 80194f0:	681a      	ldr	r2, [r3, #0]
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	4013      	ands	r3, r2
 80194f6:	4a70      	ldr	r2, [pc, #448]	@ (80196b8 <UTIL_SEQ_Run+0x1d8>)
 80194f8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80194fa:	4b70      	ldr	r3, [pc, #448]	@ (80196bc <UTIL_SEQ_Run+0x1dc>)
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019500:	4b6f      	ldr	r3, [pc, #444]	@ (80196c0 <UTIL_SEQ_Run+0x1e0>)
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019506:	4b6f      	ldr	r3, [pc, #444]	@ (80196c4 <UTIL_SEQ_Run+0x1e4>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801950c:	4b6e      	ldr	r3, [pc, #440]	@ (80196c8 <UTIL_SEQ_Run+0x1e8>)
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019512:	e08d      	b.n	8019630 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8019514:	2300      	movs	r3, #0
 8019516:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019518:	e002      	b.n	8019520 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801951a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801951c:	3301      	adds	r3, #1
 801951e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019520:	4a6a      	ldr	r2, [pc, #424]	@ (80196cc <UTIL_SEQ_Run+0x1ec>)
 8019522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019524:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801952a:	401a      	ands	r2, r3
 801952c:	4b62      	ldr	r3, [pc, #392]	@ (80196b8 <UTIL_SEQ_Run+0x1d8>)
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	4013      	ands	r3, r2
 8019532:	2b00      	cmp	r3, #0
 8019534:	d0f1      	beq.n	801951a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8019536:	4a65      	ldr	r2, [pc, #404]	@ (80196cc <UTIL_SEQ_Run+0x1ec>)
 8019538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801953a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019540:	401a      	ands	r2, r3
 8019542:	4b5d      	ldr	r3, [pc, #372]	@ (80196b8 <UTIL_SEQ_Run+0x1d8>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	4013      	ands	r3, r2
 8019548:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801954a:	4a60      	ldr	r2, [pc, #384]	@ (80196cc <UTIL_SEQ_Run+0x1ec>)
 801954c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801954e:	00db      	lsls	r3, r3, #3
 8019550:	4413      	add	r3, r2
 8019552:	685a      	ldr	r2, [r3, #4]
 8019554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019556:	4013      	ands	r3, r2
 8019558:	2b00      	cmp	r3, #0
 801955a:	d106      	bne.n	801956a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801955c:	4a5b      	ldr	r2, [pc, #364]	@ (80196cc <UTIL_SEQ_Run+0x1ec>)
 801955e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019560:	00db      	lsls	r3, r3, #3
 8019562:	4413      	add	r3, r2
 8019564:	f04f 32ff 	mov.w	r2, #4294967295
 8019568:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801956a:	4a58      	ldr	r2, [pc, #352]	@ (80196cc <UTIL_SEQ_Run+0x1ec>)
 801956c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801956e:	00db      	lsls	r3, r3, #3
 8019570:	4413      	add	r3, r2
 8019572:	685a      	ldr	r2, [r3, #4]
 8019574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019576:	4013      	ands	r3, r2
 8019578:	4618      	mov	r0, r3
 801957a:	f000 f9b3 	bl	80198e4 <SEQ_BitPosition>
 801957e:	4603      	mov	r3, r0
 8019580:	461a      	mov	r2, r3
 8019582:	4b53      	ldr	r3, [pc, #332]	@ (80196d0 <UTIL_SEQ_Run+0x1f0>)
 8019584:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019586:	4a51      	ldr	r2, [pc, #324]	@ (80196cc <UTIL_SEQ_Run+0x1ec>)
 8019588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801958a:	00db      	lsls	r3, r3, #3
 801958c:	4413      	add	r3, r2
 801958e:	685a      	ldr	r2, [r3, #4]
 8019590:	4b4f      	ldr	r3, [pc, #316]	@ (80196d0 <UTIL_SEQ_Run+0x1f0>)
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	2101      	movs	r1, #1
 8019596:	fa01 f303 	lsl.w	r3, r1, r3
 801959a:	43db      	mvns	r3, r3
 801959c:	401a      	ands	r2, r3
 801959e:	494b      	ldr	r1, [pc, #300]	@ (80196cc <UTIL_SEQ_Run+0x1ec>)
 80195a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195a2:	00db      	lsls	r3, r3, #3
 80195a4:	440b      	add	r3, r1
 80195a6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80195a8:	f3ef 8310 	mrs	r3, PRIMASK
 80195ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80195ae:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80195b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80195b2:	b672      	cpsid	i
}
 80195b4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80195b6:	4b46      	ldr	r3, [pc, #280]	@ (80196d0 <UTIL_SEQ_Run+0x1f0>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	2201      	movs	r2, #1
 80195bc:	fa02 f303 	lsl.w	r3, r2, r3
 80195c0:	43da      	mvns	r2, r3
 80195c2:	4b3e      	ldr	r3, [pc, #248]	@ (80196bc <UTIL_SEQ_Run+0x1dc>)
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	4013      	ands	r3, r2
 80195c8:	4a3c      	ldr	r2, [pc, #240]	@ (80196bc <UTIL_SEQ_Run+0x1dc>)
 80195ca:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80195cc:	2301      	movs	r3, #1
 80195ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80195d0:	e013      	b.n	80195fa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80195d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195d4:	3b01      	subs	r3, #1
 80195d6:	4a3d      	ldr	r2, [pc, #244]	@ (80196cc <UTIL_SEQ_Run+0x1ec>)
 80195d8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80195dc:	4b3c      	ldr	r3, [pc, #240]	@ (80196d0 <UTIL_SEQ_Run+0x1f0>)
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	2201      	movs	r2, #1
 80195e2:	fa02 f303 	lsl.w	r3, r2, r3
 80195e6:	43da      	mvns	r2, r3
 80195e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195ea:	3b01      	subs	r3, #1
 80195ec:	400a      	ands	r2, r1
 80195ee:	4937      	ldr	r1, [pc, #220]	@ (80196cc <UTIL_SEQ_Run+0x1ec>)
 80195f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80195f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195f6:	3b01      	subs	r3, #1
 80195f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80195fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d1e8      	bne.n	80195d2 <UTIL_SEQ_Run+0xf2>
 8019600:	6a3b      	ldr	r3, [r7, #32]
 8019602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	f383 8810 	msr	PRIMASK, r3
}
 801960a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801960c:	4b30      	ldr	r3, [pc, #192]	@ (80196d0 <UTIL_SEQ_Run+0x1f0>)
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	4a30      	ldr	r2, [pc, #192]	@ (80196d4 <UTIL_SEQ_Run+0x1f4>)
 8019612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019616:	4798      	blx	r3

    local_taskset = TaskSet;
 8019618:	4b28      	ldr	r3, [pc, #160]	@ (80196bc <UTIL_SEQ_Run+0x1dc>)
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801961e:	4b28      	ldr	r3, [pc, #160]	@ (80196c0 <UTIL_SEQ_Run+0x1e0>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8019624:	4b27      	ldr	r3, [pc, #156]	@ (80196c4 <UTIL_SEQ_Run+0x1e4>)
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801962a:	4b27      	ldr	r3, [pc, #156]	@ (80196c8 <UTIL_SEQ_Run+0x1e8>)
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019634:	401a      	ands	r2, r3
 8019636:	4b20      	ldr	r3, [pc, #128]	@ (80196b8 <UTIL_SEQ_Run+0x1d8>)
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	4013      	ands	r3, r2
 801963c:	2b00      	cmp	r3, #0
 801963e:	d005      	beq.n	801964c <UTIL_SEQ_Run+0x16c>
 8019640:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019644:	4013      	ands	r3, r2
 8019646:	2b00      	cmp	r3, #0
 8019648:	f43f af64 	beq.w	8019514 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801964c:	4b20      	ldr	r3, [pc, #128]	@ (80196d0 <UTIL_SEQ_Run+0x1f0>)
 801964e:	f04f 32ff 	mov.w	r2, #4294967295
 8019652:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019654:	f000 f938 	bl	80198c8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019658:	f3ef 8310 	mrs	r3, PRIMASK
 801965c:	613b      	str	r3, [r7, #16]
  return(result);
 801965e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019660:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019662:	b672      	cpsid	i
}
 8019664:	bf00      	nop
  local_taskset = TaskSet;
 8019666:	4b15      	ldr	r3, [pc, #84]	@ (80196bc <UTIL_SEQ_Run+0x1dc>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801966c:	4b14      	ldr	r3, [pc, #80]	@ (80196c0 <UTIL_SEQ_Run+0x1e0>)
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019672:	4b14      	ldr	r3, [pc, #80]	@ (80196c4 <UTIL_SEQ_Run+0x1e4>)
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8019678:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801967a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801967c:	401a      	ands	r2, r3
 801967e:	4b0e      	ldr	r3, [pc, #56]	@ (80196b8 <UTIL_SEQ_Run+0x1d8>)
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	4013      	ands	r3, r2
 8019684:	2b00      	cmp	r3, #0
 8019686:	d107      	bne.n	8019698 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8019688:	4b0f      	ldr	r3, [pc, #60]	@ (80196c8 <UTIL_SEQ_Run+0x1e8>)
 801968a:	681a      	ldr	r2, [r3, #0]
 801968c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801968e:	4013      	ands	r3, r2
 8019690:	2b00      	cmp	r3, #0
 8019692:	d101      	bne.n	8019698 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8019694:	f7e8 f878 	bl	8001788 <UTIL_SEQ_Idle>
 8019698:	69fb      	ldr	r3, [r7, #28]
 801969a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	f383 8810 	msr	PRIMASK, r3
}
 80196a2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80196a4:	f000 f917 	bl	80198d6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80196a8:	4a03      	ldr	r2, [pc, #12]	@ (80196b8 <UTIL_SEQ_Run+0x1d8>)
 80196aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196ac:	6013      	str	r3, [r2, #0]

  return;
 80196ae:	bf00      	nop
}
 80196b0:	3740      	adds	r7, #64	@ 0x40
 80196b2:	46bd      	mov	sp, r7
 80196b4:	bd80      	pop	{r7, pc}
 80196b6:	bf00      	nop
 80196b8:	20000140 	.word	0x20000140
 80196bc:	20003010 	.word	0x20003010
 80196c0:	20003014 	.word	0x20003014
 80196c4:	2000013c 	.word	0x2000013c
 80196c8:	20003018 	.word	0x20003018
 80196cc:	200030a0 	.word	0x200030a0
 80196d0:	2000301c 	.word	0x2000301c
 80196d4:	20003020 	.word	0x20003020

080196d8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b088      	sub	sp, #32
 80196dc:	af00      	add	r7, sp, #0
 80196de:	60f8      	str	r0, [r7, #12]
 80196e0:	60b9      	str	r1, [r7, #8]
 80196e2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196e4:	f3ef 8310 	mrs	r3, PRIMASK
 80196e8:	617b      	str	r3, [r7, #20]
  return(result);
 80196ea:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80196ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80196ee:	b672      	cpsid	i
}
 80196f0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80196f2:	68f8      	ldr	r0, [r7, #12]
 80196f4:	f000 f8f6 	bl	80198e4 <SEQ_BitPosition>
 80196f8:	4603      	mov	r3, r0
 80196fa:	4619      	mov	r1, r3
 80196fc:	4a06      	ldr	r2, [pc, #24]	@ (8019718 <UTIL_SEQ_RegTask+0x40>)
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019704:	69fb      	ldr	r3, [r7, #28]
 8019706:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019708:	69bb      	ldr	r3, [r7, #24]
 801970a:	f383 8810 	msr	PRIMASK, r3
}
 801970e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019710:	bf00      	nop
}
 8019712:	3720      	adds	r7, #32
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}
 8019718:	20003020 	.word	0x20003020

0801971c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801971c:	b480      	push	{r7}
 801971e:	b087      	sub	sp, #28
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
 8019724:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019726:	f3ef 8310 	mrs	r3, PRIMASK
 801972a:	60fb      	str	r3, [r7, #12]
  return(result);
 801972c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801972e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019730:	b672      	cpsid	i
}
 8019732:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019734:	4b0d      	ldr	r3, [pc, #52]	@ (801976c <UTIL_SEQ_SetTask+0x50>)
 8019736:	681a      	ldr	r2, [r3, #0]
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	4313      	orrs	r3, r2
 801973c:	4a0b      	ldr	r2, [pc, #44]	@ (801976c <UTIL_SEQ_SetTask+0x50>)
 801973e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019740:	4a0b      	ldr	r2, [pc, #44]	@ (8019770 <UTIL_SEQ_SetTask+0x54>)
 8019742:	683b      	ldr	r3, [r7, #0]
 8019744:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	431a      	orrs	r2, r3
 801974c:	4908      	ldr	r1, [pc, #32]	@ (8019770 <UTIL_SEQ_SetTask+0x54>)
 801974e:	683b      	ldr	r3, [r7, #0]
 8019750:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019754:	697b      	ldr	r3, [r7, #20]
 8019756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019758:	693b      	ldr	r3, [r7, #16]
 801975a:	f383 8810 	msr	PRIMASK, r3
}
 801975e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019760:	bf00      	nop
}
 8019762:	371c      	adds	r7, #28
 8019764:	46bd      	mov	sp, r7
 8019766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976a:	4770      	bx	lr
 801976c:	20003010 	.word	0x20003010
 8019770:	200030a0 	.word	0x200030a0

08019774 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8019774:	b480      	push	{r7}
 8019776:	b087      	sub	sp, #28
 8019778:	af00      	add	r7, sp, #0
 801977a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801977c:	f3ef 8310 	mrs	r3, PRIMASK
 8019780:	60fb      	str	r3, [r7, #12]
  return(result);
 8019782:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019784:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019786:	b672      	cpsid	i
}
 8019788:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	43da      	mvns	r2, r3
 801978e:	4b08      	ldr	r3, [pc, #32]	@ (80197b0 <UTIL_SEQ_PauseTask+0x3c>)
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	4013      	ands	r3, r2
 8019794:	4a06      	ldr	r2, [pc, #24]	@ (80197b0 <UTIL_SEQ_PauseTask+0x3c>)
 8019796:	6013      	str	r3, [r2, #0]
 8019798:	697b      	ldr	r3, [r7, #20]
 801979a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801979c:	693b      	ldr	r3, [r7, #16]
 801979e:	f383 8810 	msr	PRIMASK, r3
}
 80197a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80197a4:	bf00      	nop
}
 80197a6:	371c      	adds	r7, #28
 80197a8:	46bd      	mov	sp, r7
 80197aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ae:	4770      	bx	lr
 80197b0:	2000013c 	.word	0x2000013c

080197b4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80197b4:	b480      	push	{r7}
 80197b6:	b087      	sub	sp, #28
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197bc:	f3ef 8310 	mrs	r3, PRIMASK
 80197c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80197c2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80197c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80197c6:	b672      	cpsid	i
}
 80197c8:	bf00      	nop

  TaskMask |= TaskId_bm;
 80197ca:	4b09      	ldr	r3, [pc, #36]	@ (80197f0 <UTIL_SEQ_ResumeTask+0x3c>)
 80197cc:	681a      	ldr	r2, [r3, #0]
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	4313      	orrs	r3, r2
 80197d2:	4a07      	ldr	r2, [pc, #28]	@ (80197f0 <UTIL_SEQ_ResumeTask+0x3c>)
 80197d4:	6013      	str	r3, [r2, #0]
 80197d6:	697b      	ldr	r3, [r7, #20]
 80197d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197da:	693b      	ldr	r3, [r7, #16]
 80197dc:	f383 8810 	msr	PRIMASK, r3
}
 80197e0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80197e2:	bf00      	nop
}
 80197e4:	371c      	adds	r7, #28
 80197e6:	46bd      	mov	sp, r7
 80197e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ec:	4770      	bx	lr
 80197ee:	bf00      	nop
 80197f0:	2000013c 	.word	0x2000013c

080197f4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80197f4:	b480      	push	{r7}
 80197f6:	b087      	sub	sp, #28
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197fc:	f3ef 8310 	mrs	r3, PRIMASK
 8019800:	60fb      	str	r3, [r7, #12]
  return(result);
 8019802:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019806:	b672      	cpsid	i
}
 8019808:	bf00      	nop

  EvtSet |= EvtId_bm;
 801980a:	4b09      	ldr	r3, [pc, #36]	@ (8019830 <UTIL_SEQ_SetEvt+0x3c>)
 801980c:	681a      	ldr	r2, [r3, #0]
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	4313      	orrs	r3, r2
 8019812:	4a07      	ldr	r2, [pc, #28]	@ (8019830 <UTIL_SEQ_SetEvt+0x3c>)
 8019814:	6013      	str	r3, [r2, #0]
 8019816:	697b      	ldr	r3, [r7, #20]
 8019818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801981a:	693b      	ldr	r3, [r7, #16]
 801981c:	f383 8810 	msr	PRIMASK, r3
}
 8019820:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019822:	bf00      	nop
}
 8019824:	371c      	adds	r7, #28
 8019826:	46bd      	mov	sp, r7
 8019828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801982c:	4770      	bx	lr
 801982e:	bf00      	nop
 8019830:	20003014 	.word	0x20003014

08019834 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b088      	sub	sp, #32
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801983c:	4b1f      	ldr	r3, [pc, #124]	@ (80198bc <UTIL_SEQ_WaitEvt+0x88>)
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8019842:	4b1e      	ldr	r3, [pc, #120]	@ (80198bc <UTIL_SEQ_WaitEvt+0x88>)
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801984a:	d102      	bne.n	8019852 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801984c:	2300      	movs	r3, #0
 801984e:	61fb      	str	r3, [r7, #28]
 8019850:	e005      	b.n	801985e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8019852:	4b1a      	ldr	r3, [pc, #104]	@ (80198bc <UTIL_SEQ_WaitEvt+0x88>)
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	2201      	movs	r2, #1
 8019858:	fa02 f303 	lsl.w	r3, r2, r3
 801985c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801985e:	4b18      	ldr	r3, [pc, #96]	@ (80198c0 <UTIL_SEQ_WaitEvt+0x8c>)
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8019864:	4a16      	ldr	r2, [pc, #88]	@ (80198c0 <UTIL_SEQ_WaitEvt+0x8c>)
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801986a:	e003      	b.n	8019874 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801986c:	6879      	ldr	r1, [r7, #4]
 801986e:	69f8      	ldr	r0, [r7, #28]
 8019870:	f7e7 ff91 	bl	8001796 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8019874:	4b13      	ldr	r3, [pc, #76]	@ (80198c4 <UTIL_SEQ_WaitEvt+0x90>)
 8019876:	681a      	ldr	r2, [r3, #0]
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	4013      	ands	r3, r2
 801987c:	2b00      	cmp	r3, #0
 801987e:	d0f5      	beq.n	801986c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8019880:	4a0e      	ldr	r2, [pc, #56]	@ (80198bc <UTIL_SEQ_WaitEvt+0x88>)
 8019882:	69bb      	ldr	r3, [r7, #24]
 8019884:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019886:	f3ef 8310 	mrs	r3, PRIMASK
 801988a:	60bb      	str	r3, [r7, #8]
  return(result);
 801988c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801988e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019890:	b672      	cpsid	i
}
 8019892:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	43da      	mvns	r2, r3
 8019898:	4b0a      	ldr	r3, [pc, #40]	@ (80198c4 <UTIL_SEQ_WaitEvt+0x90>)
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	4013      	ands	r3, r2
 801989e:	4a09      	ldr	r2, [pc, #36]	@ (80198c4 <UTIL_SEQ_WaitEvt+0x90>)
 80198a0:	6013      	str	r3, [r2, #0]
 80198a2:	693b      	ldr	r3, [r7, #16]
 80198a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	f383 8810 	msr	PRIMASK, r3
}
 80198ac:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80198ae:	4a04      	ldr	r2, [pc, #16]	@ (80198c0 <UTIL_SEQ_WaitEvt+0x8c>)
 80198b0:	697b      	ldr	r3, [r7, #20]
 80198b2:	6013      	str	r3, [r2, #0]
  return;
 80198b4:	bf00      	nop
}
 80198b6:	3720      	adds	r7, #32
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bd80      	pop	{r7, pc}
 80198bc:	2000301c 	.word	0x2000301c
 80198c0:	20003018 	.word	0x20003018
 80198c4:	20003014 	.word	0x20003014

080198c8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80198c8:	b480      	push	{r7}
 80198ca:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80198cc:	bf00      	nop
}
 80198ce:	46bd      	mov	sp, r7
 80198d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d4:	4770      	bx	lr

080198d6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80198d6:	b480      	push	{r7}
 80198d8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80198da:	bf00      	nop
}
 80198dc:	46bd      	mov	sp, r7
 80198de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e2:	4770      	bx	lr

080198e4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80198e4:	b480      	push	{r7}
 80198e6:	b085      	sub	sp, #20
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d101      	bne.n	80198fa <SEQ_BitPosition+0x16>
    return 32U;
 80198f6:	2320      	movs	r3, #32
 80198f8:	e003      	b.n	8019902 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	fab3 f383 	clz	r3, r3
 8019900:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8019902:	f1c3 031f 	rsb	r3, r3, #31
 8019906:	b2db      	uxtb	r3, r3
}
 8019908:	4618      	mov	r0, r3
 801990a:	3714      	adds	r7, #20
 801990c:	46bd      	mov	sp, r7
 801990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019912:	4770      	bx	lr

08019914 <atoi>:
 8019914:	220a      	movs	r2, #10
 8019916:	2100      	movs	r1, #0
 8019918:	f000 bfa8 	b.w	801a86c <strtol>

0801991c <malloc>:
 801991c:	4b02      	ldr	r3, [pc, #8]	@ (8019928 <malloc+0xc>)
 801991e:	4601      	mov	r1, r0
 8019920:	6818      	ldr	r0, [r3, #0]
 8019922:	f000 b82d 	b.w	8019980 <_malloc_r>
 8019926:	bf00      	nop
 8019928:	200002bc 	.word	0x200002bc

0801992c <free>:
 801992c:	4b02      	ldr	r3, [pc, #8]	@ (8019938 <free+0xc>)
 801992e:	4601      	mov	r1, r0
 8019930:	6818      	ldr	r0, [r3, #0]
 8019932:	f002 bf0d 	b.w	801c750 <_free_r>
 8019936:	bf00      	nop
 8019938:	200002bc 	.word	0x200002bc

0801993c <sbrk_aligned>:
 801993c:	b570      	push	{r4, r5, r6, lr}
 801993e:	4e0f      	ldr	r6, [pc, #60]	@ (801997c <sbrk_aligned+0x40>)
 8019940:	460c      	mov	r4, r1
 8019942:	6831      	ldr	r1, [r6, #0]
 8019944:	4605      	mov	r5, r0
 8019946:	b911      	cbnz	r1, 801994e <sbrk_aligned+0x12>
 8019948:	f002 f824 	bl	801b994 <_sbrk_r>
 801994c:	6030      	str	r0, [r6, #0]
 801994e:	4621      	mov	r1, r4
 8019950:	4628      	mov	r0, r5
 8019952:	f002 f81f 	bl	801b994 <_sbrk_r>
 8019956:	1c43      	adds	r3, r0, #1
 8019958:	d103      	bne.n	8019962 <sbrk_aligned+0x26>
 801995a:	f04f 34ff 	mov.w	r4, #4294967295
 801995e:	4620      	mov	r0, r4
 8019960:	bd70      	pop	{r4, r5, r6, pc}
 8019962:	1cc4      	adds	r4, r0, #3
 8019964:	f024 0403 	bic.w	r4, r4, #3
 8019968:	42a0      	cmp	r0, r4
 801996a:	d0f8      	beq.n	801995e <sbrk_aligned+0x22>
 801996c:	1a21      	subs	r1, r4, r0
 801996e:	4628      	mov	r0, r5
 8019970:	f002 f810 	bl	801b994 <_sbrk_r>
 8019974:	3001      	adds	r0, #1
 8019976:	d1f2      	bne.n	801995e <sbrk_aligned+0x22>
 8019978:	e7ef      	b.n	801995a <sbrk_aligned+0x1e>
 801997a:	bf00      	nop
 801997c:	200030a8 	.word	0x200030a8

08019980 <_malloc_r>:
 8019980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019984:	1ccd      	adds	r5, r1, #3
 8019986:	f025 0503 	bic.w	r5, r5, #3
 801998a:	3508      	adds	r5, #8
 801998c:	2d0c      	cmp	r5, #12
 801998e:	bf38      	it	cc
 8019990:	250c      	movcc	r5, #12
 8019992:	2d00      	cmp	r5, #0
 8019994:	4606      	mov	r6, r0
 8019996:	db01      	blt.n	801999c <_malloc_r+0x1c>
 8019998:	42a9      	cmp	r1, r5
 801999a:	d904      	bls.n	80199a6 <_malloc_r+0x26>
 801999c:	230c      	movs	r3, #12
 801999e:	6033      	str	r3, [r6, #0]
 80199a0:	2000      	movs	r0, #0
 80199a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019a7c <_malloc_r+0xfc>
 80199aa:	f000 f869 	bl	8019a80 <__malloc_lock>
 80199ae:	f8d8 3000 	ldr.w	r3, [r8]
 80199b2:	461c      	mov	r4, r3
 80199b4:	bb44      	cbnz	r4, 8019a08 <_malloc_r+0x88>
 80199b6:	4629      	mov	r1, r5
 80199b8:	4630      	mov	r0, r6
 80199ba:	f7ff ffbf 	bl	801993c <sbrk_aligned>
 80199be:	1c43      	adds	r3, r0, #1
 80199c0:	4604      	mov	r4, r0
 80199c2:	d158      	bne.n	8019a76 <_malloc_r+0xf6>
 80199c4:	f8d8 4000 	ldr.w	r4, [r8]
 80199c8:	4627      	mov	r7, r4
 80199ca:	2f00      	cmp	r7, #0
 80199cc:	d143      	bne.n	8019a56 <_malloc_r+0xd6>
 80199ce:	2c00      	cmp	r4, #0
 80199d0:	d04b      	beq.n	8019a6a <_malloc_r+0xea>
 80199d2:	6823      	ldr	r3, [r4, #0]
 80199d4:	4639      	mov	r1, r7
 80199d6:	4630      	mov	r0, r6
 80199d8:	eb04 0903 	add.w	r9, r4, r3
 80199dc:	f001 ffda 	bl	801b994 <_sbrk_r>
 80199e0:	4581      	cmp	r9, r0
 80199e2:	d142      	bne.n	8019a6a <_malloc_r+0xea>
 80199e4:	6821      	ldr	r1, [r4, #0]
 80199e6:	1a6d      	subs	r5, r5, r1
 80199e8:	4629      	mov	r1, r5
 80199ea:	4630      	mov	r0, r6
 80199ec:	f7ff ffa6 	bl	801993c <sbrk_aligned>
 80199f0:	3001      	adds	r0, #1
 80199f2:	d03a      	beq.n	8019a6a <_malloc_r+0xea>
 80199f4:	6823      	ldr	r3, [r4, #0]
 80199f6:	442b      	add	r3, r5
 80199f8:	6023      	str	r3, [r4, #0]
 80199fa:	f8d8 3000 	ldr.w	r3, [r8]
 80199fe:	685a      	ldr	r2, [r3, #4]
 8019a00:	bb62      	cbnz	r2, 8019a5c <_malloc_r+0xdc>
 8019a02:	f8c8 7000 	str.w	r7, [r8]
 8019a06:	e00f      	b.n	8019a28 <_malloc_r+0xa8>
 8019a08:	6822      	ldr	r2, [r4, #0]
 8019a0a:	1b52      	subs	r2, r2, r5
 8019a0c:	d420      	bmi.n	8019a50 <_malloc_r+0xd0>
 8019a0e:	2a0b      	cmp	r2, #11
 8019a10:	d917      	bls.n	8019a42 <_malloc_r+0xc2>
 8019a12:	1961      	adds	r1, r4, r5
 8019a14:	42a3      	cmp	r3, r4
 8019a16:	6025      	str	r5, [r4, #0]
 8019a18:	bf18      	it	ne
 8019a1a:	6059      	strne	r1, [r3, #4]
 8019a1c:	6863      	ldr	r3, [r4, #4]
 8019a1e:	bf08      	it	eq
 8019a20:	f8c8 1000 	streq.w	r1, [r8]
 8019a24:	5162      	str	r2, [r4, r5]
 8019a26:	604b      	str	r3, [r1, #4]
 8019a28:	4630      	mov	r0, r6
 8019a2a:	f000 f82f 	bl	8019a8c <__malloc_unlock>
 8019a2e:	f104 000b 	add.w	r0, r4, #11
 8019a32:	1d23      	adds	r3, r4, #4
 8019a34:	f020 0007 	bic.w	r0, r0, #7
 8019a38:	1ac2      	subs	r2, r0, r3
 8019a3a:	bf1c      	itt	ne
 8019a3c:	1a1b      	subne	r3, r3, r0
 8019a3e:	50a3      	strne	r3, [r4, r2]
 8019a40:	e7af      	b.n	80199a2 <_malloc_r+0x22>
 8019a42:	6862      	ldr	r2, [r4, #4]
 8019a44:	42a3      	cmp	r3, r4
 8019a46:	bf0c      	ite	eq
 8019a48:	f8c8 2000 	streq.w	r2, [r8]
 8019a4c:	605a      	strne	r2, [r3, #4]
 8019a4e:	e7eb      	b.n	8019a28 <_malloc_r+0xa8>
 8019a50:	4623      	mov	r3, r4
 8019a52:	6864      	ldr	r4, [r4, #4]
 8019a54:	e7ae      	b.n	80199b4 <_malloc_r+0x34>
 8019a56:	463c      	mov	r4, r7
 8019a58:	687f      	ldr	r7, [r7, #4]
 8019a5a:	e7b6      	b.n	80199ca <_malloc_r+0x4a>
 8019a5c:	461a      	mov	r2, r3
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	42a3      	cmp	r3, r4
 8019a62:	d1fb      	bne.n	8019a5c <_malloc_r+0xdc>
 8019a64:	2300      	movs	r3, #0
 8019a66:	6053      	str	r3, [r2, #4]
 8019a68:	e7de      	b.n	8019a28 <_malloc_r+0xa8>
 8019a6a:	230c      	movs	r3, #12
 8019a6c:	6033      	str	r3, [r6, #0]
 8019a6e:	4630      	mov	r0, r6
 8019a70:	f000 f80c 	bl	8019a8c <__malloc_unlock>
 8019a74:	e794      	b.n	80199a0 <_malloc_r+0x20>
 8019a76:	6005      	str	r5, [r0, #0]
 8019a78:	e7d6      	b.n	8019a28 <_malloc_r+0xa8>
 8019a7a:	bf00      	nop
 8019a7c:	200030ac 	.word	0x200030ac

08019a80 <__malloc_lock>:
 8019a80:	4801      	ldr	r0, [pc, #4]	@ (8019a88 <__malloc_lock+0x8>)
 8019a82:	f001 bfd4 	b.w	801ba2e <__retarget_lock_acquire_recursive>
 8019a86:	bf00      	nop
 8019a88:	200031f0 	.word	0x200031f0

08019a8c <__malloc_unlock>:
 8019a8c:	4801      	ldr	r0, [pc, #4]	@ (8019a94 <__malloc_unlock+0x8>)
 8019a8e:	f001 bfcf 	b.w	801ba30 <__retarget_lock_release_recursive>
 8019a92:	bf00      	nop
 8019a94:	200031f0 	.word	0x200031f0

08019a98 <sulp>:
 8019a98:	b570      	push	{r4, r5, r6, lr}
 8019a9a:	4604      	mov	r4, r0
 8019a9c:	460d      	mov	r5, r1
 8019a9e:	ec45 4b10 	vmov	d0, r4, r5
 8019aa2:	4616      	mov	r6, r2
 8019aa4:	f003 fd5e 	bl	801d564 <__ulp>
 8019aa8:	ec51 0b10 	vmov	r0, r1, d0
 8019aac:	b17e      	cbz	r6, 8019ace <sulp+0x36>
 8019aae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019ab2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	dd09      	ble.n	8019ace <sulp+0x36>
 8019aba:	051b      	lsls	r3, r3, #20
 8019abc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8019ac0:	2400      	movs	r4, #0
 8019ac2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8019ac6:	4622      	mov	r2, r4
 8019ac8:	462b      	mov	r3, r5
 8019aca:	f7e6 fd6d 	bl	80005a8 <__aeabi_dmul>
 8019ace:	ec41 0b10 	vmov	d0, r0, r1
 8019ad2:	bd70      	pop	{r4, r5, r6, pc}
 8019ad4:	0000      	movs	r0, r0
	...

08019ad8 <_strtod_l>:
 8019ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019adc:	b09f      	sub	sp, #124	@ 0x7c
 8019ade:	460c      	mov	r4, r1
 8019ae0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	921a      	str	r2, [sp, #104]	@ 0x68
 8019ae6:	9005      	str	r0, [sp, #20]
 8019ae8:	f04f 0a00 	mov.w	sl, #0
 8019aec:	f04f 0b00 	mov.w	fp, #0
 8019af0:	460a      	mov	r2, r1
 8019af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8019af4:	7811      	ldrb	r1, [r2, #0]
 8019af6:	292b      	cmp	r1, #43	@ 0x2b
 8019af8:	d04a      	beq.n	8019b90 <_strtod_l+0xb8>
 8019afa:	d838      	bhi.n	8019b6e <_strtod_l+0x96>
 8019afc:	290d      	cmp	r1, #13
 8019afe:	d832      	bhi.n	8019b66 <_strtod_l+0x8e>
 8019b00:	2908      	cmp	r1, #8
 8019b02:	d832      	bhi.n	8019b6a <_strtod_l+0x92>
 8019b04:	2900      	cmp	r1, #0
 8019b06:	d03b      	beq.n	8019b80 <_strtod_l+0xa8>
 8019b08:	2200      	movs	r2, #0
 8019b0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019b0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8019b0e:	782a      	ldrb	r2, [r5, #0]
 8019b10:	2a30      	cmp	r2, #48	@ 0x30
 8019b12:	f040 80b3 	bne.w	8019c7c <_strtod_l+0x1a4>
 8019b16:	786a      	ldrb	r2, [r5, #1]
 8019b18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019b1c:	2a58      	cmp	r2, #88	@ 0x58
 8019b1e:	d16e      	bne.n	8019bfe <_strtod_l+0x126>
 8019b20:	9302      	str	r3, [sp, #8]
 8019b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019b24:	9301      	str	r3, [sp, #4]
 8019b26:	ab1a      	add	r3, sp, #104	@ 0x68
 8019b28:	9300      	str	r3, [sp, #0]
 8019b2a:	4a8e      	ldr	r2, [pc, #568]	@ (8019d64 <_strtod_l+0x28c>)
 8019b2c:	9805      	ldr	r0, [sp, #20]
 8019b2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019b30:	a919      	add	r1, sp, #100	@ 0x64
 8019b32:	f002 febf 	bl	801c8b4 <__gethex>
 8019b36:	f010 060f 	ands.w	r6, r0, #15
 8019b3a:	4604      	mov	r4, r0
 8019b3c:	d005      	beq.n	8019b4a <_strtod_l+0x72>
 8019b3e:	2e06      	cmp	r6, #6
 8019b40:	d128      	bne.n	8019b94 <_strtod_l+0xbc>
 8019b42:	3501      	adds	r5, #1
 8019b44:	2300      	movs	r3, #0
 8019b46:	9519      	str	r5, [sp, #100]	@ 0x64
 8019b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	f040 858e 	bne.w	801a66e <_strtod_l+0xb96>
 8019b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019b54:	b1cb      	cbz	r3, 8019b8a <_strtod_l+0xb2>
 8019b56:	4652      	mov	r2, sl
 8019b58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8019b5c:	ec43 2b10 	vmov	d0, r2, r3
 8019b60:	b01f      	add	sp, #124	@ 0x7c
 8019b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b66:	2920      	cmp	r1, #32
 8019b68:	d1ce      	bne.n	8019b08 <_strtod_l+0x30>
 8019b6a:	3201      	adds	r2, #1
 8019b6c:	e7c1      	b.n	8019af2 <_strtod_l+0x1a>
 8019b6e:	292d      	cmp	r1, #45	@ 0x2d
 8019b70:	d1ca      	bne.n	8019b08 <_strtod_l+0x30>
 8019b72:	2101      	movs	r1, #1
 8019b74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019b76:	1c51      	adds	r1, r2, #1
 8019b78:	9119      	str	r1, [sp, #100]	@ 0x64
 8019b7a:	7852      	ldrb	r2, [r2, #1]
 8019b7c:	2a00      	cmp	r2, #0
 8019b7e:	d1c5      	bne.n	8019b0c <_strtod_l+0x34>
 8019b80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019b82:	9419      	str	r4, [sp, #100]	@ 0x64
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	f040 8570 	bne.w	801a66a <_strtod_l+0xb92>
 8019b8a:	4652      	mov	r2, sl
 8019b8c:	465b      	mov	r3, fp
 8019b8e:	e7e5      	b.n	8019b5c <_strtod_l+0x84>
 8019b90:	2100      	movs	r1, #0
 8019b92:	e7ef      	b.n	8019b74 <_strtod_l+0x9c>
 8019b94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019b96:	b13a      	cbz	r2, 8019ba8 <_strtod_l+0xd0>
 8019b98:	2135      	movs	r1, #53	@ 0x35
 8019b9a:	a81c      	add	r0, sp, #112	@ 0x70
 8019b9c:	f003 fddc 	bl	801d758 <__copybits>
 8019ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019ba2:	9805      	ldr	r0, [sp, #20]
 8019ba4:	f003 f9aa 	bl	801cefc <_Bfree>
 8019ba8:	3e01      	subs	r6, #1
 8019baa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019bac:	2e04      	cmp	r6, #4
 8019bae:	d806      	bhi.n	8019bbe <_strtod_l+0xe6>
 8019bb0:	e8df f006 	tbb	[pc, r6]
 8019bb4:	201d0314 	.word	0x201d0314
 8019bb8:	14          	.byte	0x14
 8019bb9:	00          	.byte	0x00
 8019bba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8019bbe:	05e1      	lsls	r1, r4, #23
 8019bc0:	bf48      	it	mi
 8019bc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8019bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019bca:	0d1b      	lsrs	r3, r3, #20
 8019bcc:	051b      	lsls	r3, r3, #20
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d1bb      	bne.n	8019b4a <_strtod_l+0x72>
 8019bd2:	f001 ff01 	bl	801b9d8 <__errno>
 8019bd6:	2322      	movs	r3, #34	@ 0x22
 8019bd8:	6003      	str	r3, [r0, #0]
 8019bda:	e7b6      	b.n	8019b4a <_strtod_l+0x72>
 8019bdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8019be0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019be4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019be8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019bec:	e7e7      	b.n	8019bbe <_strtod_l+0xe6>
 8019bee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8019d6c <_strtod_l+0x294>
 8019bf2:	e7e4      	b.n	8019bbe <_strtod_l+0xe6>
 8019bf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019bf8:	f04f 3aff 	mov.w	sl, #4294967295
 8019bfc:	e7df      	b.n	8019bbe <_strtod_l+0xe6>
 8019bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c00:	1c5a      	adds	r2, r3, #1
 8019c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c04:	785b      	ldrb	r3, [r3, #1]
 8019c06:	2b30      	cmp	r3, #48	@ 0x30
 8019c08:	d0f9      	beq.n	8019bfe <_strtod_l+0x126>
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d09d      	beq.n	8019b4a <_strtod_l+0x72>
 8019c0e:	2301      	movs	r3, #1
 8019c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c14:	930c      	str	r3, [sp, #48]	@ 0x30
 8019c16:	2300      	movs	r3, #0
 8019c18:	9308      	str	r3, [sp, #32]
 8019c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8019c1c:	461f      	mov	r7, r3
 8019c1e:	220a      	movs	r2, #10
 8019c20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8019c22:	7805      	ldrb	r5, [r0, #0]
 8019c24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019c28:	b2d9      	uxtb	r1, r3
 8019c2a:	2909      	cmp	r1, #9
 8019c2c:	d928      	bls.n	8019c80 <_strtod_l+0x1a8>
 8019c2e:	494e      	ldr	r1, [pc, #312]	@ (8019d68 <_strtod_l+0x290>)
 8019c30:	2201      	movs	r2, #1
 8019c32:	f001 fdf2 	bl	801b81a <strncmp>
 8019c36:	2800      	cmp	r0, #0
 8019c38:	d032      	beq.n	8019ca0 <_strtod_l+0x1c8>
 8019c3a:	2000      	movs	r0, #0
 8019c3c:	462a      	mov	r2, r5
 8019c3e:	4681      	mov	r9, r0
 8019c40:	463d      	mov	r5, r7
 8019c42:	4603      	mov	r3, r0
 8019c44:	2a65      	cmp	r2, #101	@ 0x65
 8019c46:	d001      	beq.n	8019c4c <_strtod_l+0x174>
 8019c48:	2a45      	cmp	r2, #69	@ 0x45
 8019c4a:	d114      	bne.n	8019c76 <_strtod_l+0x19e>
 8019c4c:	b91d      	cbnz	r5, 8019c56 <_strtod_l+0x17e>
 8019c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c50:	4302      	orrs	r2, r0
 8019c52:	d095      	beq.n	8019b80 <_strtod_l+0xa8>
 8019c54:	2500      	movs	r5, #0
 8019c56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019c58:	1c62      	adds	r2, r4, #1
 8019c5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c5c:	7862      	ldrb	r2, [r4, #1]
 8019c5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8019c60:	d077      	beq.n	8019d52 <_strtod_l+0x27a>
 8019c62:	2a2d      	cmp	r2, #45	@ 0x2d
 8019c64:	d07b      	beq.n	8019d5e <_strtod_l+0x286>
 8019c66:	f04f 0c00 	mov.w	ip, #0
 8019c6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8019c6e:	2909      	cmp	r1, #9
 8019c70:	f240 8082 	bls.w	8019d78 <_strtod_l+0x2a0>
 8019c74:	9419      	str	r4, [sp, #100]	@ 0x64
 8019c76:	f04f 0800 	mov.w	r8, #0
 8019c7a:	e0a2      	b.n	8019dc2 <_strtod_l+0x2ea>
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	e7c7      	b.n	8019c10 <_strtod_l+0x138>
 8019c80:	2f08      	cmp	r7, #8
 8019c82:	bfd5      	itete	le
 8019c84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8019c86:	9908      	ldrgt	r1, [sp, #32]
 8019c88:	fb02 3301 	mlale	r3, r2, r1, r3
 8019c8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019c90:	f100 0001 	add.w	r0, r0, #1
 8019c94:	bfd4      	ite	le
 8019c96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8019c98:	9308      	strgt	r3, [sp, #32]
 8019c9a:	3701      	adds	r7, #1
 8019c9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8019c9e:	e7bf      	b.n	8019c20 <_strtod_l+0x148>
 8019ca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019ca2:	1c5a      	adds	r2, r3, #1
 8019ca4:	9219      	str	r2, [sp, #100]	@ 0x64
 8019ca6:	785a      	ldrb	r2, [r3, #1]
 8019ca8:	b37f      	cbz	r7, 8019d0a <_strtod_l+0x232>
 8019caa:	4681      	mov	r9, r0
 8019cac:	463d      	mov	r5, r7
 8019cae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8019cb2:	2b09      	cmp	r3, #9
 8019cb4:	d912      	bls.n	8019cdc <_strtod_l+0x204>
 8019cb6:	2301      	movs	r3, #1
 8019cb8:	e7c4      	b.n	8019c44 <_strtod_l+0x16c>
 8019cba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019cbc:	1c5a      	adds	r2, r3, #1
 8019cbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8019cc0:	785a      	ldrb	r2, [r3, #1]
 8019cc2:	3001      	adds	r0, #1
 8019cc4:	2a30      	cmp	r2, #48	@ 0x30
 8019cc6:	d0f8      	beq.n	8019cba <_strtod_l+0x1e2>
 8019cc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8019ccc:	2b08      	cmp	r3, #8
 8019cce:	f200 84d3 	bhi.w	801a678 <_strtod_l+0xba0>
 8019cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019cd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8019cd6:	4681      	mov	r9, r0
 8019cd8:	2000      	movs	r0, #0
 8019cda:	4605      	mov	r5, r0
 8019cdc:	3a30      	subs	r2, #48	@ 0x30
 8019cde:	f100 0301 	add.w	r3, r0, #1
 8019ce2:	d02a      	beq.n	8019d3a <_strtod_l+0x262>
 8019ce4:	4499      	add	r9, r3
 8019ce6:	eb00 0c05 	add.w	ip, r0, r5
 8019cea:	462b      	mov	r3, r5
 8019cec:	210a      	movs	r1, #10
 8019cee:	4563      	cmp	r3, ip
 8019cf0:	d10d      	bne.n	8019d0e <_strtod_l+0x236>
 8019cf2:	1c69      	adds	r1, r5, #1
 8019cf4:	4401      	add	r1, r0
 8019cf6:	4428      	add	r0, r5
 8019cf8:	2808      	cmp	r0, #8
 8019cfa:	dc16      	bgt.n	8019d2a <_strtod_l+0x252>
 8019cfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019cfe:	230a      	movs	r3, #10
 8019d00:	fb03 2300 	mla	r3, r3, r0, r2
 8019d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8019d06:	2300      	movs	r3, #0
 8019d08:	e018      	b.n	8019d3c <_strtod_l+0x264>
 8019d0a:	4638      	mov	r0, r7
 8019d0c:	e7da      	b.n	8019cc4 <_strtod_l+0x1ec>
 8019d0e:	2b08      	cmp	r3, #8
 8019d10:	f103 0301 	add.w	r3, r3, #1
 8019d14:	dc03      	bgt.n	8019d1e <_strtod_l+0x246>
 8019d16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019d18:	434e      	muls	r6, r1
 8019d1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8019d1c:	e7e7      	b.n	8019cee <_strtod_l+0x216>
 8019d1e:	2b10      	cmp	r3, #16
 8019d20:	bfde      	ittt	le
 8019d22:	9e08      	ldrle	r6, [sp, #32]
 8019d24:	434e      	mulle	r6, r1
 8019d26:	9608      	strle	r6, [sp, #32]
 8019d28:	e7e1      	b.n	8019cee <_strtod_l+0x216>
 8019d2a:	280f      	cmp	r0, #15
 8019d2c:	dceb      	bgt.n	8019d06 <_strtod_l+0x22e>
 8019d2e:	9808      	ldr	r0, [sp, #32]
 8019d30:	230a      	movs	r3, #10
 8019d32:	fb03 2300 	mla	r3, r3, r0, r2
 8019d36:	9308      	str	r3, [sp, #32]
 8019d38:	e7e5      	b.n	8019d06 <_strtod_l+0x22e>
 8019d3a:	4629      	mov	r1, r5
 8019d3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d3e:	1c50      	adds	r0, r2, #1
 8019d40:	9019      	str	r0, [sp, #100]	@ 0x64
 8019d42:	7852      	ldrb	r2, [r2, #1]
 8019d44:	4618      	mov	r0, r3
 8019d46:	460d      	mov	r5, r1
 8019d48:	e7b1      	b.n	8019cae <_strtod_l+0x1d6>
 8019d4a:	f04f 0900 	mov.w	r9, #0
 8019d4e:	2301      	movs	r3, #1
 8019d50:	e77d      	b.n	8019c4e <_strtod_l+0x176>
 8019d52:	f04f 0c00 	mov.w	ip, #0
 8019d56:	1ca2      	adds	r2, r4, #2
 8019d58:	9219      	str	r2, [sp, #100]	@ 0x64
 8019d5a:	78a2      	ldrb	r2, [r4, #2]
 8019d5c:	e785      	b.n	8019c6a <_strtod_l+0x192>
 8019d5e:	f04f 0c01 	mov.w	ip, #1
 8019d62:	e7f8      	b.n	8019d56 <_strtod_l+0x27e>
 8019d64:	08021f40 	.word	0x08021f40
 8019d68:	08021f28 	.word	0x08021f28
 8019d6c:	7ff00000 	.word	0x7ff00000
 8019d70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d72:	1c51      	adds	r1, r2, #1
 8019d74:	9119      	str	r1, [sp, #100]	@ 0x64
 8019d76:	7852      	ldrb	r2, [r2, #1]
 8019d78:	2a30      	cmp	r2, #48	@ 0x30
 8019d7a:	d0f9      	beq.n	8019d70 <_strtod_l+0x298>
 8019d7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8019d80:	2908      	cmp	r1, #8
 8019d82:	f63f af78 	bhi.w	8019c76 <_strtod_l+0x19e>
 8019d86:	3a30      	subs	r2, #48	@ 0x30
 8019d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8019d8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019d8e:	f04f 080a 	mov.w	r8, #10
 8019d92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d94:	1c56      	adds	r6, r2, #1
 8019d96:	9619      	str	r6, [sp, #100]	@ 0x64
 8019d98:	7852      	ldrb	r2, [r2, #1]
 8019d9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019d9e:	f1be 0f09 	cmp.w	lr, #9
 8019da2:	d939      	bls.n	8019e18 <_strtod_l+0x340>
 8019da4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019da6:	1a76      	subs	r6, r6, r1
 8019da8:	2e08      	cmp	r6, #8
 8019daa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8019dae:	dc03      	bgt.n	8019db8 <_strtod_l+0x2e0>
 8019db0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019db2:	4588      	cmp	r8, r1
 8019db4:	bfa8      	it	ge
 8019db6:	4688      	movge	r8, r1
 8019db8:	f1bc 0f00 	cmp.w	ip, #0
 8019dbc:	d001      	beq.n	8019dc2 <_strtod_l+0x2ea>
 8019dbe:	f1c8 0800 	rsb	r8, r8, #0
 8019dc2:	2d00      	cmp	r5, #0
 8019dc4:	d14e      	bne.n	8019e64 <_strtod_l+0x38c>
 8019dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019dc8:	4308      	orrs	r0, r1
 8019dca:	f47f aebe 	bne.w	8019b4a <_strtod_l+0x72>
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	f47f aed6 	bne.w	8019b80 <_strtod_l+0xa8>
 8019dd4:	2a69      	cmp	r2, #105	@ 0x69
 8019dd6:	d028      	beq.n	8019e2a <_strtod_l+0x352>
 8019dd8:	dc25      	bgt.n	8019e26 <_strtod_l+0x34e>
 8019dda:	2a49      	cmp	r2, #73	@ 0x49
 8019ddc:	d025      	beq.n	8019e2a <_strtod_l+0x352>
 8019dde:	2a4e      	cmp	r2, #78	@ 0x4e
 8019de0:	f47f aece 	bne.w	8019b80 <_strtod_l+0xa8>
 8019de4:	499b      	ldr	r1, [pc, #620]	@ (801a054 <_strtod_l+0x57c>)
 8019de6:	a819      	add	r0, sp, #100	@ 0x64
 8019de8:	f002 ff86 	bl	801ccf8 <__match>
 8019dec:	2800      	cmp	r0, #0
 8019dee:	f43f aec7 	beq.w	8019b80 <_strtod_l+0xa8>
 8019df2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019df4:	781b      	ldrb	r3, [r3, #0]
 8019df6:	2b28      	cmp	r3, #40	@ 0x28
 8019df8:	d12e      	bne.n	8019e58 <_strtod_l+0x380>
 8019dfa:	4997      	ldr	r1, [pc, #604]	@ (801a058 <_strtod_l+0x580>)
 8019dfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8019dfe:	a819      	add	r0, sp, #100	@ 0x64
 8019e00:	f002 ff8e 	bl	801cd20 <__hexnan>
 8019e04:	2805      	cmp	r0, #5
 8019e06:	d127      	bne.n	8019e58 <_strtod_l+0x380>
 8019e08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019e0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8019e0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019e12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019e16:	e698      	b.n	8019b4a <_strtod_l+0x72>
 8019e18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019e1a:	fb08 2101 	mla	r1, r8, r1, r2
 8019e1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019e22:	920e      	str	r2, [sp, #56]	@ 0x38
 8019e24:	e7b5      	b.n	8019d92 <_strtod_l+0x2ba>
 8019e26:	2a6e      	cmp	r2, #110	@ 0x6e
 8019e28:	e7da      	b.n	8019de0 <_strtod_l+0x308>
 8019e2a:	498c      	ldr	r1, [pc, #560]	@ (801a05c <_strtod_l+0x584>)
 8019e2c:	a819      	add	r0, sp, #100	@ 0x64
 8019e2e:	f002 ff63 	bl	801ccf8 <__match>
 8019e32:	2800      	cmp	r0, #0
 8019e34:	f43f aea4 	beq.w	8019b80 <_strtod_l+0xa8>
 8019e38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019e3a:	4989      	ldr	r1, [pc, #548]	@ (801a060 <_strtod_l+0x588>)
 8019e3c:	3b01      	subs	r3, #1
 8019e3e:	a819      	add	r0, sp, #100	@ 0x64
 8019e40:	9319      	str	r3, [sp, #100]	@ 0x64
 8019e42:	f002 ff59 	bl	801ccf8 <__match>
 8019e46:	b910      	cbnz	r0, 8019e4e <_strtod_l+0x376>
 8019e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019e4a:	3301      	adds	r3, #1
 8019e4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8019e4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801a070 <_strtod_l+0x598>
 8019e52:	f04f 0a00 	mov.w	sl, #0
 8019e56:	e678      	b.n	8019b4a <_strtod_l+0x72>
 8019e58:	4882      	ldr	r0, [pc, #520]	@ (801a064 <_strtod_l+0x58c>)
 8019e5a:	f001 fe01 	bl	801ba60 <nan>
 8019e5e:	ec5b ab10 	vmov	sl, fp, d0
 8019e62:	e672      	b.n	8019b4a <_strtod_l+0x72>
 8019e64:	eba8 0309 	sub.w	r3, r8, r9
 8019e68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e6c:	2f00      	cmp	r7, #0
 8019e6e:	bf08      	it	eq
 8019e70:	462f      	moveq	r7, r5
 8019e72:	2d10      	cmp	r5, #16
 8019e74:	462c      	mov	r4, r5
 8019e76:	bfa8      	it	ge
 8019e78:	2410      	movge	r4, #16
 8019e7a:	f7e6 fb1b 	bl	80004b4 <__aeabi_ui2d>
 8019e7e:	2d09      	cmp	r5, #9
 8019e80:	4682      	mov	sl, r0
 8019e82:	468b      	mov	fp, r1
 8019e84:	dc13      	bgt.n	8019eae <_strtod_l+0x3d6>
 8019e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	f43f ae5e 	beq.w	8019b4a <_strtod_l+0x72>
 8019e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e90:	dd78      	ble.n	8019f84 <_strtod_l+0x4ac>
 8019e92:	2b16      	cmp	r3, #22
 8019e94:	dc5f      	bgt.n	8019f56 <_strtod_l+0x47e>
 8019e96:	4974      	ldr	r1, [pc, #464]	@ (801a068 <_strtod_l+0x590>)
 8019e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ea0:	4652      	mov	r2, sl
 8019ea2:	465b      	mov	r3, fp
 8019ea4:	f7e6 fb80 	bl	80005a8 <__aeabi_dmul>
 8019ea8:	4682      	mov	sl, r0
 8019eaa:	468b      	mov	fp, r1
 8019eac:	e64d      	b.n	8019b4a <_strtod_l+0x72>
 8019eae:	4b6e      	ldr	r3, [pc, #440]	@ (801a068 <_strtod_l+0x590>)
 8019eb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019eb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8019eb8:	f7e6 fb76 	bl	80005a8 <__aeabi_dmul>
 8019ebc:	4682      	mov	sl, r0
 8019ebe:	9808      	ldr	r0, [sp, #32]
 8019ec0:	468b      	mov	fp, r1
 8019ec2:	f7e6 faf7 	bl	80004b4 <__aeabi_ui2d>
 8019ec6:	4602      	mov	r2, r0
 8019ec8:	460b      	mov	r3, r1
 8019eca:	4650      	mov	r0, sl
 8019ecc:	4659      	mov	r1, fp
 8019ece:	f7e6 f9b5 	bl	800023c <__adddf3>
 8019ed2:	2d0f      	cmp	r5, #15
 8019ed4:	4682      	mov	sl, r0
 8019ed6:	468b      	mov	fp, r1
 8019ed8:	ddd5      	ble.n	8019e86 <_strtod_l+0x3ae>
 8019eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019edc:	1b2c      	subs	r4, r5, r4
 8019ede:	441c      	add	r4, r3
 8019ee0:	2c00      	cmp	r4, #0
 8019ee2:	f340 8096 	ble.w	801a012 <_strtod_l+0x53a>
 8019ee6:	f014 030f 	ands.w	r3, r4, #15
 8019eea:	d00a      	beq.n	8019f02 <_strtod_l+0x42a>
 8019eec:	495e      	ldr	r1, [pc, #376]	@ (801a068 <_strtod_l+0x590>)
 8019eee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019ef2:	4652      	mov	r2, sl
 8019ef4:	465b      	mov	r3, fp
 8019ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019efa:	f7e6 fb55 	bl	80005a8 <__aeabi_dmul>
 8019efe:	4682      	mov	sl, r0
 8019f00:	468b      	mov	fp, r1
 8019f02:	f034 040f 	bics.w	r4, r4, #15
 8019f06:	d073      	beq.n	8019ff0 <_strtod_l+0x518>
 8019f08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019f0c:	dd48      	ble.n	8019fa0 <_strtod_l+0x4c8>
 8019f0e:	2400      	movs	r4, #0
 8019f10:	46a0      	mov	r8, r4
 8019f12:	940a      	str	r4, [sp, #40]	@ 0x28
 8019f14:	46a1      	mov	r9, r4
 8019f16:	9a05      	ldr	r2, [sp, #20]
 8019f18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801a070 <_strtod_l+0x598>
 8019f1c:	2322      	movs	r3, #34	@ 0x22
 8019f1e:	6013      	str	r3, [r2, #0]
 8019f20:	f04f 0a00 	mov.w	sl, #0
 8019f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	f43f ae0f 	beq.w	8019b4a <_strtod_l+0x72>
 8019f2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019f2e:	9805      	ldr	r0, [sp, #20]
 8019f30:	f002 ffe4 	bl	801cefc <_Bfree>
 8019f34:	9805      	ldr	r0, [sp, #20]
 8019f36:	4649      	mov	r1, r9
 8019f38:	f002 ffe0 	bl	801cefc <_Bfree>
 8019f3c:	9805      	ldr	r0, [sp, #20]
 8019f3e:	4641      	mov	r1, r8
 8019f40:	f002 ffdc 	bl	801cefc <_Bfree>
 8019f44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019f46:	9805      	ldr	r0, [sp, #20]
 8019f48:	f002 ffd8 	bl	801cefc <_Bfree>
 8019f4c:	9805      	ldr	r0, [sp, #20]
 8019f4e:	4621      	mov	r1, r4
 8019f50:	f002 ffd4 	bl	801cefc <_Bfree>
 8019f54:	e5f9      	b.n	8019b4a <_strtod_l+0x72>
 8019f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019f5c:	4293      	cmp	r3, r2
 8019f5e:	dbbc      	blt.n	8019eda <_strtod_l+0x402>
 8019f60:	4c41      	ldr	r4, [pc, #260]	@ (801a068 <_strtod_l+0x590>)
 8019f62:	f1c5 050f 	rsb	r5, r5, #15
 8019f66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019f6a:	4652      	mov	r2, sl
 8019f6c:	465b      	mov	r3, fp
 8019f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f72:	f7e6 fb19 	bl	80005a8 <__aeabi_dmul>
 8019f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f78:	1b5d      	subs	r5, r3, r5
 8019f7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019f82:	e78f      	b.n	8019ea4 <_strtod_l+0x3cc>
 8019f84:	3316      	adds	r3, #22
 8019f86:	dba8      	blt.n	8019eda <_strtod_l+0x402>
 8019f88:	4b37      	ldr	r3, [pc, #220]	@ (801a068 <_strtod_l+0x590>)
 8019f8a:	eba9 0808 	sub.w	r8, r9, r8
 8019f8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019f92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019f96:	4650      	mov	r0, sl
 8019f98:	4659      	mov	r1, fp
 8019f9a:	f7e6 fc2f 	bl	80007fc <__aeabi_ddiv>
 8019f9e:	e783      	b.n	8019ea8 <_strtod_l+0x3d0>
 8019fa0:	4b32      	ldr	r3, [pc, #200]	@ (801a06c <_strtod_l+0x594>)
 8019fa2:	9308      	str	r3, [sp, #32]
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	1124      	asrs	r4, r4, #4
 8019fa8:	4650      	mov	r0, sl
 8019faa:	4659      	mov	r1, fp
 8019fac:	461e      	mov	r6, r3
 8019fae:	2c01      	cmp	r4, #1
 8019fb0:	dc21      	bgt.n	8019ff6 <_strtod_l+0x51e>
 8019fb2:	b10b      	cbz	r3, 8019fb8 <_strtod_l+0x4e0>
 8019fb4:	4682      	mov	sl, r0
 8019fb6:	468b      	mov	fp, r1
 8019fb8:	492c      	ldr	r1, [pc, #176]	@ (801a06c <_strtod_l+0x594>)
 8019fba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019fbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019fc2:	4652      	mov	r2, sl
 8019fc4:	465b      	mov	r3, fp
 8019fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fca:	f7e6 faed 	bl	80005a8 <__aeabi_dmul>
 8019fce:	4b28      	ldr	r3, [pc, #160]	@ (801a070 <_strtod_l+0x598>)
 8019fd0:	460a      	mov	r2, r1
 8019fd2:	400b      	ands	r3, r1
 8019fd4:	4927      	ldr	r1, [pc, #156]	@ (801a074 <_strtod_l+0x59c>)
 8019fd6:	428b      	cmp	r3, r1
 8019fd8:	4682      	mov	sl, r0
 8019fda:	d898      	bhi.n	8019f0e <_strtod_l+0x436>
 8019fdc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019fe0:	428b      	cmp	r3, r1
 8019fe2:	bf86      	itte	hi
 8019fe4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801a078 <_strtod_l+0x5a0>
 8019fe8:	f04f 3aff 	movhi.w	sl, #4294967295
 8019fec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	9308      	str	r3, [sp, #32]
 8019ff4:	e07a      	b.n	801a0ec <_strtod_l+0x614>
 8019ff6:	07e2      	lsls	r2, r4, #31
 8019ff8:	d505      	bpl.n	801a006 <_strtod_l+0x52e>
 8019ffa:	9b08      	ldr	r3, [sp, #32]
 8019ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a000:	f7e6 fad2 	bl	80005a8 <__aeabi_dmul>
 801a004:	2301      	movs	r3, #1
 801a006:	9a08      	ldr	r2, [sp, #32]
 801a008:	3208      	adds	r2, #8
 801a00a:	3601      	adds	r6, #1
 801a00c:	1064      	asrs	r4, r4, #1
 801a00e:	9208      	str	r2, [sp, #32]
 801a010:	e7cd      	b.n	8019fae <_strtod_l+0x4d6>
 801a012:	d0ed      	beq.n	8019ff0 <_strtod_l+0x518>
 801a014:	4264      	negs	r4, r4
 801a016:	f014 020f 	ands.w	r2, r4, #15
 801a01a:	d00a      	beq.n	801a032 <_strtod_l+0x55a>
 801a01c:	4b12      	ldr	r3, [pc, #72]	@ (801a068 <_strtod_l+0x590>)
 801a01e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a022:	4650      	mov	r0, sl
 801a024:	4659      	mov	r1, fp
 801a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a02a:	f7e6 fbe7 	bl	80007fc <__aeabi_ddiv>
 801a02e:	4682      	mov	sl, r0
 801a030:	468b      	mov	fp, r1
 801a032:	1124      	asrs	r4, r4, #4
 801a034:	d0dc      	beq.n	8019ff0 <_strtod_l+0x518>
 801a036:	2c1f      	cmp	r4, #31
 801a038:	dd20      	ble.n	801a07c <_strtod_l+0x5a4>
 801a03a:	2400      	movs	r4, #0
 801a03c:	46a0      	mov	r8, r4
 801a03e:	940a      	str	r4, [sp, #40]	@ 0x28
 801a040:	46a1      	mov	r9, r4
 801a042:	9a05      	ldr	r2, [sp, #20]
 801a044:	2322      	movs	r3, #34	@ 0x22
 801a046:	f04f 0a00 	mov.w	sl, #0
 801a04a:	f04f 0b00 	mov.w	fp, #0
 801a04e:	6013      	str	r3, [r2, #0]
 801a050:	e768      	b.n	8019f24 <_strtod_l+0x44c>
 801a052:	bf00      	nop
 801a054:	0802208e 	.word	0x0802208e
 801a058:	08021f2c 	.word	0x08021f2c
 801a05c:	08022086 	.word	0x08022086
 801a060:	08022172 	.word	0x08022172
 801a064:	0802216e 	.word	0x0802216e
 801a068:	080222d8 	.word	0x080222d8
 801a06c:	080222b0 	.word	0x080222b0
 801a070:	7ff00000 	.word	0x7ff00000
 801a074:	7ca00000 	.word	0x7ca00000
 801a078:	7fefffff 	.word	0x7fefffff
 801a07c:	f014 0310 	ands.w	r3, r4, #16
 801a080:	bf18      	it	ne
 801a082:	236a      	movne	r3, #106	@ 0x6a
 801a084:	4ea9      	ldr	r6, [pc, #676]	@ (801a32c <_strtod_l+0x854>)
 801a086:	9308      	str	r3, [sp, #32]
 801a088:	4650      	mov	r0, sl
 801a08a:	4659      	mov	r1, fp
 801a08c:	2300      	movs	r3, #0
 801a08e:	07e2      	lsls	r2, r4, #31
 801a090:	d504      	bpl.n	801a09c <_strtod_l+0x5c4>
 801a092:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a096:	f7e6 fa87 	bl	80005a8 <__aeabi_dmul>
 801a09a:	2301      	movs	r3, #1
 801a09c:	1064      	asrs	r4, r4, #1
 801a09e:	f106 0608 	add.w	r6, r6, #8
 801a0a2:	d1f4      	bne.n	801a08e <_strtod_l+0x5b6>
 801a0a4:	b10b      	cbz	r3, 801a0aa <_strtod_l+0x5d2>
 801a0a6:	4682      	mov	sl, r0
 801a0a8:	468b      	mov	fp, r1
 801a0aa:	9b08      	ldr	r3, [sp, #32]
 801a0ac:	b1b3      	cbz	r3, 801a0dc <_strtod_l+0x604>
 801a0ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801a0b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	4659      	mov	r1, fp
 801a0ba:	dd0f      	ble.n	801a0dc <_strtod_l+0x604>
 801a0bc:	2b1f      	cmp	r3, #31
 801a0be:	dd55      	ble.n	801a16c <_strtod_l+0x694>
 801a0c0:	2b34      	cmp	r3, #52	@ 0x34
 801a0c2:	bfde      	ittt	le
 801a0c4:	f04f 33ff 	movle.w	r3, #4294967295
 801a0c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801a0cc:	4093      	lslle	r3, r2
 801a0ce:	f04f 0a00 	mov.w	sl, #0
 801a0d2:	bfcc      	ite	gt
 801a0d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801a0d8:	ea03 0b01 	andle.w	fp, r3, r1
 801a0dc:	2200      	movs	r2, #0
 801a0de:	2300      	movs	r3, #0
 801a0e0:	4650      	mov	r0, sl
 801a0e2:	4659      	mov	r1, fp
 801a0e4:	f7e6 fcc8 	bl	8000a78 <__aeabi_dcmpeq>
 801a0e8:	2800      	cmp	r0, #0
 801a0ea:	d1a6      	bne.n	801a03a <_strtod_l+0x562>
 801a0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a0ee:	9300      	str	r3, [sp, #0]
 801a0f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a0f2:	9805      	ldr	r0, [sp, #20]
 801a0f4:	462b      	mov	r3, r5
 801a0f6:	463a      	mov	r2, r7
 801a0f8:	f002 ff68 	bl	801cfcc <__s2b>
 801a0fc:	900a      	str	r0, [sp, #40]	@ 0x28
 801a0fe:	2800      	cmp	r0, #0
 801a100:	f43f af05 	beq.w	8019f0e <_strtod_l+0x436>
 801a104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a106:	2a00      	cmp	r2, #0
 801a108:	eba9 0308 	sub.w	r3, r9, r8
 801a10c:	bfa8      	it	ge
 801a10e:	2300      	movge	r3, #0
 801a110:	9312      	str	r3, [sp, #72]	@ 0x48
 801a112:	2400      	movs	r4, #0
 801a114:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a118:	9316      	str	r3, [sp, #88]	@ 0x58
 801a11a:	46a0      	mov	r8, r4
 801a11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a11e:	9805      	ldr	r0, [sp, #20]
 801a120:	6859      	ldr	r1, [r3, #4]
 801a122:	f002 feab 	bl	801ce7c <_Balloc>
 801a126:	4681      	mov	r9, r0
 801a128:	2800      	cmp	r0, #0
 801a12a:	f43f aef4 	beq.w	8019f16 <_strtod_l+0x43e>
 801a12e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a130:	691a      	ldr	r2, [r3, #16]
 801a132:	3202      	adds	r2, #2
 801a134:	f103 010c 	add.w	r1, r3, #12
 801a138:	0092      	lsls	r2, r2, #2
 801a13a:	300c      	adds	r0, #12
 801a13c:	f001 fc81 	bl	801ba42 <memcpy>
 801a140:	ec4b ab10 	vmov	d0, sl, fp
 801a144:	9805      	ldr	r0, [sp, #20]
 801a146:	aa1c      	add	r2, sp, #112	@ 0x70
 801a148:	a91b      	add	r1, sp, #108	@ 0x6c
 801a14a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801a14e:	f003 fa79 	bl	801d644 <__d2b>
 801a152:	901a      	str	r0, [sp, #104]	@ 0x68
 801a154:	2800      	cmp	r0, #0
 801a156:	f43f aede 	beq.w	8019f16 <_strtod_l+0x43e>
 801a15a:	9805      	ldr	r0, [sp, #20]
 801a15c:	2101      	movs	r1, #1
 801a15e:	f002 ffcb 	bl	801d0f8 <__i2b>
 801a162:	4680      	mov	r8, r0
 801a164:	b948      	cbnz	r0, 801a17a <_strtod_l+0x6a2>
 801a166:	f04f 0800 	mov.w	r8, #0
 801a16a:	e6d4      	b.n	8019f16 <_strtod_l+0x43e>
 801a16c:	f04f 32ff 	mov.w	r2, #4294967295
 801a170:	fa02 f303 	lsl.w	r3, r2, r3
 801a174:	ea03 0a0a 	and.w	sl, r3, sl
 801a178:	e7b0      	b.n	801a0dc <_strtod_l+0x604>
 801a17a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801a17c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a17e:	2d00      	cmp	r5, #0
 801a180:	bfab      	itete	ge
 801a182:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801a184:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801a186:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801a188:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801a18a:	bfac      	ite	ge
 801a18c:	18ef      	addge	r7, r5, r3
 801a18e:	1b5e      	sublt	r6, r3, r5
 801a190:	9b08      	ldr	r3, [sp, #32]
 801a192:	1aed      	subs	r5, r5, r3
 801a194:	4415      	add	r5, r2
 801a196:	4b66      	ldr	r3, [pc, #408]	@ (801a330 <_strtod_l+0x858>)
 801a198:	3d01      	subs	r5, #1
 801a19a:	429d      	cmp	r5, r3
 801a19c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a1a0:	da50      	bge.n	801a244 <_strtod_l+0x76c>
 801a1a2:	1b5b      	subs	r3, r3, r5
 801a1a4:	2b1f      	cmp	r3, #31
 801a1a6:	eba2 0203 	sub.w	r2, r2, r3
 801a1aa:	f04f 0101 	mov.w	r1, #1
 801a1ae:	dc3d      	bgt.n	801a22c <_strtod_l+0x754>
 801a1b0:	fa01 f303 	lsl.w	r3, r1, r3
 801a1b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	9310      	str	r3, [sp, #64]	@ 0x40
 801a1ba:	18bd      	adds	r5, r7, r2
 801a1bc:	9b08      	ldr	r3, [sp, #32]
 801a1be:	42af      	cmp	r7, r5
 801a1c0:	4416      	add	r6, r2
 801a1c2:	441e      	add	r6, r3
 801a1c4:	463b      	mov	r3, r7
 801a1c6:	bfa8      	it	ge
 801a1c8:	462b      	movge	r3, r5
 801a1ca:	42b3      	cmp	r3, r6
 801a1cc:	bfa8      	it	ge
 801a1ce:	4633      	movge	r3, r6
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	bfc2      	ittt	gt
 801a1d4:	1aed      	subgt	r5, r5, r3
 801a1d6:	1af6      	subgt	r6, r6, r3
 801a1d8:	1aff      	subgt	r7, r7, r3
 801a1da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	dd16      	ble.n	801a20e <_strtod_l+0x736>
 801a1e0:	4641      	mov	r1, r8
 801a1e2:	9805      	ldr	r0, [sp, #20]
 801a1e4:	461a      	mov	r2, r3
 801a1e6:	f003 f847 	bl	801d278 <__pow5mult>
 801a1ea:	4680      	mov	r8, r0
 801a1ec:	2800      	cmp	r0, #0
 801a1ee:	d0ba      	beq.n	801a166 <_strtod_l+0x68e>
 801a1f0:	4601      	mov	r1, r0
 801a1f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a1f4:	9805      	ldr	r0, [sp, #20]
 801a1f6:	f002 ff95 	bl	801d124 <__multiply>
 801a1fa:	900e      	str	r0, [sp, #56]	@ 0x38
 801a1fc:	2800      	cmp	r0, #0
 801a1fe:	f43f ae8a 	beq.w	8019f16 <_strtod_l+0x43e>
 801a202:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a204:	9805      	ldr	r0, [sp, #20]
 801a206:	f002 fe79 	bl	801cefc <_Bfree>
 801a20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a20c:	931a      	str	r3, [sp, #104]	@ 0x68
 801a20e:	2d00      	cmp	r5, #0
 801a210:	dc1d      	bgt.n	801a24e <_strtod_l+0x776>
 801a212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a214:	2b00      	cmp	r3, #0
 801a216:	dd23      	ble.n	801a260 <_strtod_l+0x788>
 801a218:	4649      	mov	r1, r9
 801a21a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a21c:	9805      	ldr	r0, [sp, #20]
 801a21e:	f003 f82b 	bl	801d278 <__pow5mult>
 801a222:	4681      	mov	r9, r0
 801a224:	b9e0      	cbnz	r0, 801a260 <_strtod_l+0x788>
 801a226:	f04f 0900 	mov.w	r9, #0
 801a22a:	e674      	b.n	8019f16 <_strtod_l+0x43e>
 801a22c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801a230:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801a234:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801a238:	35e2      	adds	r5, #226	@ 0xe2
 801a23a:	fa01 f305 	lsl.w	r3, r1, r5
 801a23e:	9310      	str	r3, [sp, #64]	@ 0x40
 801a240:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a242:	e7ba      	b.n	801a1ba <_strtod_l+0x6e2>
 801a244:	2300      	movs	r3, #0
 801a246:	9310      	str	r3, [sp, #64]	@ 0x40
 801a248:	2301      	movs	r3, #1
 801a24a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a24c:	e7b5      	b.n	801a1ba <_strtod_l+0x6e2>
 801a24e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a250:	9805      	ldr	r0, [sp, #20]
 801a252:	462a      	mov	r2, r5
 801a254:	f003 f86a 	bl	801d32c <__lshift>
 801a258:	901a      	str	r0, [sp, #104]	@ 0x68
 801a25a:	2800      	cmp	r0, #0
 801a25c:	d1d9      	bne.n	801a212 <_strtod_l+0x73a>
 801a25e:	e65a      	b.n	8019f16 <_strtod_l+0x43e>
 801a260:	2e00      	cmp	r6, #0
 801a262:	dd07      	ble.n	801a274 <_strtod_l+0x79c>
 801a264:	4649      	mov	r1, r9
 801a266:	9805      	ldr	r0, [sp, #20]
 801a268:	4632      	mov	r2, r6
 801a26a:	f003 f85f 	bl	801d32c <__lshift>
 801a26e:	4681      	mov	r9, r0
 801a270:	2800      	cmp	r0, #0
 801a272:	d0d8      	beq.n	801a226 <_strtod_l+0x74e>
 801a274:	2f00      	cmp	r7, #0
 801a276:	dd08      	ble.n	801a28a <_strtod_l+0x7b2>
 801a278:	4641      	mov	r1, r8
 801a27a:	9805      	ldr	r0, [sp, #20]
 801a27c:	463a      	mov	r2, r7
 801a27e:	f003 f855 	bl	801d32c <__lshift>
 801a282:	4680      	mov	r8, r0
 801a284:	2800      	cmp	r0, #0
 801a286:	f43f ae46 	beq.w	8019f16 <_strtod_l+0x43e>
 801a28a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a28c:	9805      	ldr	r0, [sp, #20]
 801a28e:	464a      	mov	r2, r9
 801a290:	f003 f8d4 	bl	801d43c <__mdiff>
 801a294:	4604      	mov	r4, r0
 801a296:	2800      	cmp	r0, #0
 801a298:	f43f ae3d 	beq.w	8019f16 <_strtod_l+0x43e>
 801a29c:	68c3      	ldr	r3, [r0, #12]
 801a29e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	60c3      	str	r3, [r0, #12]
 801a2a4:	4641      	mov	r1, r8
 801a2a6:	f003 f8ad 	bl	801d404 <__mcmp>
 801a2aa:	2800      	cmp	r0, #0
 801a2ac:	da46      	bge.n	801a33c <_strtod_l+0x864>
 801a2ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2b0:	ea53 030a 	orrs.w	r3, r3, sl
 801a2b4:	d16c      	bne.n	801a390 <_strtod_l+0x8b8>
 801a2b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d168      	bne.n	801a390 <_strtod_l+0x8b8>
 801a2be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a2c2:	0d1b      	lsrs	r3, r3, #20
 801a2c4:	051b      	lsls	r3, r3, #20
 801a2c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a2ca:	d961      	bls.n	801a390 <_strtod_l+0x8b8>
 801a2cc:	6963      	ldr	r3, [r4, #20]
 801a2ce:	b913      	cbnz	r3, 801a2d6 <_strtod_l+0x7fe>
 801a2d0:	6923      	ldr	r3, [r4, #16]
 801a2d2:	2b01      	cmp	r3, #1
 801a2d4:	dd5c      	ble.n	801a390 <_strtod_l+0x8b8>
 801a2d6:	4621      	mov	r1, r4
 801a2d8:	2201      	movs	r2, #1
 801a2da:	9805      	ldr	r0, [sp, #20]
 801a2dc:	f003 f826 	bl	801d32c <__lshift>
 801a2e0:	4641      	mov	r1, r8
 801a2e2:	4604      	mov	r4, r0
 801a2e4:	f003 f88e 	bl	801d404 <__mcmp>
 801a2e8:	2800      	cmp	r0, #0
 801a2ea:	dd51      	ble.n	801a390 <_strtod_l+0x8b8>
 801a2ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a2f0:	9a08      	ldr	r2, [sp, #32]
 801a2f2:	0d1b      	lsrs	r3, r3, #20
 801a2f4:	051b      	lsls	r3, r3, #20
 801a2f6:	2a00      	cmp	r2, #0
 801a2f8:	d06b      	beq.n	801a3d2 <_strtod_l+0x8fa>
 801a2fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a2fe:	d868      	bhi.n	801a3d2 <_strtod_l+0x8fa>
 801a300:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801a304:	f67f ae9d 	bls.w	801a042 <_strtod_l+0x56a>
 801a308:	4b0a      	ldr	r3, [pc, #40]	@ (801a334 <_strtod_l+0x85c>)
 801a30a:	4650      	mov	r0, sl
 801a30c:	4659      	mov	r1, fp
 801a30e:	2200      	movs	r2, #0
 801a310:	f7e6 f94a 	bl	80005a8 <__aeabi_dmul>
 801a314:	4b08      	ldr	r3, [pc, #32]	@ (801a338 <_strtod_l+0x860>)
 801a316:	400b      	ands	r3, r1
 801a318:	4682      	mov	sl, r0
 801a31a:	468b      	mov	fp, r1
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	f47f ae05 	bne.w	8019f2c <_strtod_l+0x454>
 801a322:	9a05      	ldr	r2, [sp, #20]
 801a324:	2322      	movs	r3, #34	@ 0x22
 801a326:	6013      	str	r3, [r2, #0]
 801a328:	e600      	b.n	8019f2c <_strtod_l+0x454>
 801a32a:	bf00      	nop
 801a32c:	08021f58 	.word	0x08021f58
 801a330:	fffffc02 	.word	0xfffffc02
 801a334:	39500000 	.word	0x39500000
 801a338:	7ff00000 	.word	0x7ff00000
 801a33c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a340:	d165      	bne.n	801a40e <_strtod_l+0x936>
 801a342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a348:	b35a      	cbz	r2, 801a3a2 <_strtod_l+0x8ca>
 801a34a:	4a9f      	ldr	r2, [pc, #636]	@ (801a5c8 <_strtod_l+0xaf0>)
 801a34c:	4293      	cmp	r3, r2
 801a34e:	d12b      	bne.n	801a3a8 <_strtod_l+0x8d0>
 801a350:	9b08      	ldr	r3, [sp, #32]
 801a352:	4651      	mov	r1, sl
 801a354:	b303      	cbz	r3, 801a398 <_strtod_l+0x8c0>
 801a356:	4b9d      	ldr	r3, [pc, #628]	@ (801a5cc <_strtod_l+0xaf4>)
 801a358:	465a      	mov	r2, fp
 801a35a:	4013      	ands	r3, r2
 801a35c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801a360:	f04f 32ff 	mov.w	r2, #4294967295
 801a364:	d81b      	bhi.n	801a39e <_strtod_l+0x8c6>
 801a366:	0d1b      	lsrs	r3, r3, #20
 801a368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801a36c:	fa02 f303 	lsl.w	r3, r2, r3
 801a370:	4299      	cmp	r1, r3
 801a372:	d119      	bne.n	801a3a8 <_strtod_l+0x8d0>
 801a374:	4b96      	ldr	r3, [pc, #600]	@ (801a5d0 <_strtod_l+0xaf8>)
 801a376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a378:	429a      	cmp	r2, r3
 801a37a:	d102      	bne.n	801a382 <_strtod_l+0x8aa>
 801a37c:	3101      	adds	r1, #1
 801a37e:	f43f adca 	beq.w	8019f16 <_strtod_l+0x43e>
 801a382:	4b92      	ldr	r3, [pc, #584]	@ (801a5cc <_strtod_l+0xaf4>)
 801a384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a386:	401a      	ands	r2, r3
 801a388:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801a38c:	f04f 0a00 	mov.w	sl, #0
 801a390:	9b08      	ldr	r3, [sp, #32]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d1b8      	bne.n	801a308 <_strtod_l+0x830>
 801a396:	e5c9      	b.n	8019f2c <_strtod_l+0x454>
 801a398:	f04f 33ff 	mov.w	r3, #4294967295
 801a39c:	e7e8      	b.n	801a370 <_strtod_l+0x898>
 801a39e:	4613      	mov	r3, r2
 801a3a0:	e7e6      	b.n	801a370 <_strtod_l+0x898>
 801a3a2:	ea53 030a 	orrs.w	r3, r3, sl
 801a3a6:	d0a1      	beq.n	801a2ec <_strtod_l+0x814>
 801a3a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a3aa:	b1db      	cbz	r3, 801a3e4 <_strtod_l+0x90c>
 801a3ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a3ae:	4213      	tst	r3, r2
 801a3b0:	d0ee      	beq.n	801a390 <_strtod_l+0x8b8>
 801a3b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a3b4:	9a08      	ldr	r2, [sp, #32]
 801a3b6:	4650      	mov	r0, sl
 801a3b8:	4659      	mov	r1, fp
 801a3ba:	b1bb      	cbz	r3, 801a3ec <_strtod_l+0x914>
 801a3bc:	f7ff fb6c 	bl	8019a98 <sulp>
 801a3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a3c4:	ec53 2b10 	vmov	r2, r3, d0
 801a3c8:	f7e5 ff38 	bl	800023c <__adddf3>
 801a3cc:	4682      	mov	sl, r0
 801a3ce:	468b      	mov	fp, r1
 801a3d0:	e7de      	b.n	801a390 <_strtod_l+0x8b8>
 801a3d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a3d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a3da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a3de:	f04f 3aff 	mov.w	sl, #4294967295
 801a3e2:	e7d5      	b.n	801a390 <_strtod_l+0x8b8>
 801a3e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a3e6:	ea13 0f0a 	tst.w	r3, sl
 801a3ea:	e7e1      	b.n	801a3b0 <_strtod_l+0x8d8>
 801a3ec:	f7ff fb54 	bl	8019a98 <sulp>
 801a3f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a3f4:	ec53 2b10 	vmov	r2, r3, d0
 801a3f8:	f7e5 ff1e 	bl	8000238 <__aeabi_dsub>
 801a3fc:	2200      	movs	r2, #0
 801a3fe:	2300      	movs	r3, #0
 801a400:	4682      	mov	sl, r0
 801a402:	468b      	mov	fp, r1
 801a404:	f7e6 fb38 	bl	8000a78 <__aeabi_dcmpeq>
 801a408:	2800      	cmp	r0, #0
 801a40a:	d0c1      	beq.n	801a390 <_strtod_l+0x8b8>
 801a40c:	e619      	b.n	801a042 <_strtod_l+0x56a>
 801a40e:	4641      	mov	r1, r8
 801a410:	4620      	mov	r0, r4
 801a412:	f003 f96f 	bl	801d6f4 <__ratio>
 801a416:	ec57 6b10 	vmov	r6, r7, d0
 801a41a:	2200      	movs	r2, #0
 801a41c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a420:	4630      	mov	r0, r6
 801a422:	4639      	mov	r1, r7
 801a424:	f7e6 fb3c 	bl	8000aa0 <__aeabi_dcmple>
 801a428:	2800      	cmp	r0, #0
 801a42a:	d06f      	beq.n	801a50c <_strtod_l+0xa34>
 801a42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d17a      	bne.n	801a528 <_strtod_l+0xa50>
 801a432:	f1ba 0f00 	cmp.w	sl, #0
 801a436:	d158      	bne.n	801a4ea <_strtod_l+0xa12>
 801a438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a43a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d15a      	bne.n	801a4f8 <_strtod_l+0xa20>
 801a442:	4b64      	ldr	r3, [pc, #400]	@ (801a5d4 <_strtod_l+0xafc>)
 801a444:	2200      	movs	r2, #0
 801a446:	4630      	mov	r0, r6
 801a448:	4639      	mov	r1, r7
 801a44a:	f7e6 fb1f 	bl	8000a8c <__aeabi_dcmplt>
 801a44e:	2800      	cmp	r0, #0
 801a450:	d159      	bne.n	801a506 <_strtod_l+0xa2e>
 801a452:	4630      	mov	r0, r6
 801a454:	4639      	mov	r1, r7
 801a456:	4b60      	ldr	r3, [pc, #384]	@ (801a5d8 <_strtod_l+0xb00>)
 801a458:	2200      	movs	r2, #0
 801a45a:	f7e6 f8a5 	bl	80005a8 <__aeabi_dmul>
 801a45e:	4606      	mov	r6, r0
 801a460:	460f      	mov	r7, r1
 801a462:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801a466:	9606      	str	r6, [sp, #24]
 801a468:	9307      	str	r3, [sp, #28]
 801a46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a46e:	4d57      	ldr	r5, [pc, #348]	@ (801a5cc <_strtod_l+0xaf4>)
 801a470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a476:	401d      	ands	r5, r3
 801a478:	4b58      	ldr	r3, [pc, #352]	@ (801a5dc <_strtod_l+0xb04>)
 801a47a:	429d      	cmp	r5, r3
 801a47c:	f040 80b2 	bne.w	801a5e4 <_strtod_l+0xb0c>
 801a480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a482:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801a486:	ec4b ab10 	vmov	d0, sl, fp
 801a48a:	f003 f86b 	bl	801d564 <__ulp>
 801a48e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a492:	ec51 0b10 	vmov	r0, r1, d0
 801a496:	f7e6 f887 	bl	80005a8 <__aeabi_dmul>
 801a49a:	4652      	mov	r2, sl
 801a49c:	465b      	mov	r3, fp
 801a49e:	f7e5 fecd 	bl	800023c <__adddf3>
 801a4a2:	460b      	mov	r3, r1
 801a4a4:	4949      	ldr	r1, [pc, #292]	@ (801a5cc <_strtod_l+0xaf4>)
 801a4a6:	4a4e      	ldr	r2, [pc, #312]	@ (801a5e0 <_strtod_l+0xb08>)
 801a4a8:	4019      	ands	r1, r3
 801a4aa:	4291      	cmp	r1, r2
 801a4ac:	4682      	mov	sl, r0
 801a4ae:	d942      	bls.n	801a536 <_strtod_l+0xa5e>
 801a4b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a4b2:	4b47      	ldr	r3, [pc, #284]	@ (801a5d0 <_strtod_l+0xaf8>)
 801a4b4:	429a      	cmp	r2, r3
 801a4b6:	d103      	bne.n	801a4c0 <_strtod_l+0x9e8>
 801a4b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a4ba:	3301      	adds	r3, #1
 801a4bc:	f43f ad2b 	beq.w	8019f16 <_strtod_l+0x43e>
 801a4c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a5d0 <_strtod_l+0xaf8>
 801a4c4:	f04f 3aff 	mov.w	sl, #4294967295
 801a4c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a4ca:	9805      	ldr	r0, [sp, #20]
 801a4cc:	f002 fd16 	bl	801cefc <_Bfree>
 801a4d0:	9805      	ldr	r0, [sp, #20]
 801a4d2:	4649      	mov	r1, r9
 801a4d4:	f002 fd12 	bl	801cefc <_Bfree>
 801a4d8:	9805      	ldr	r0, [sp, #20]
 801a4da:	4641      	mov	r1, r8
 801a4dc:	f002 fd0e 	bl	801cefc <_Bfree>
 801a4e0:	9805      	ldr	r0, [sp, #20]
 801a4e2:	4621      	mov	r1, r4
 801a4e4:	f002 fd0a 	bl	801cefc <_Bfree>
 801a4e8:	e618      	b.n	801a11c <_strtod_l+0x644>
 801a4ea:	f1ba 0f01 	cmp.w	sl, #1
 801a4ee:	d103      	bne.n	801a4f8 <_strtod_l+0xa20>
 801a4f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	f43f ada5 	beq.w	801a042 <_strtod_l+0x56a>
 801a4f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a5a8 <_strtod_l+0xad0>
 801a4fc:	4f35      	ldr	r7, [pc, #212]	@ (801a5d4 <_strtod_l+0xafc>)
 801a4fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a502:	2600      	movs	r6, #0
 801a504:	e7b1      	b.n	801a46a <_strtod_l+0x992>
 801a506:	4f34      	ldr	r7, [pc, #208]	@ (801a5d8 <_strtod_l+0xb00>)
 801a508:	2600      	movs	r6, #0
 801a50a:	e7aa      	b.n	801a462 <_strtod_l+0x98a>
 801a50c:	4b32      	ldr	r3, [pc, #200]	@ (801a5d8 <_strtod_l+0xb00>)
 801a50e:	4630      	mov	r0, r6
 801a510:	4639      	mov	r1, r7
 801a512:	2200      	movs	r2, #0
 801a514:	f7e6 f848 	bl	80005a8 <__aeabi_dmul>
 801a518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a51a:	4606      	mov	r6, r0
 801a51c:	460f      	mov	r7, r1
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d09f      	beq.n	801a462 <_strtod_l+0x98a>
 801a522:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a526:	e7a0      	b.n	801a46a <_strtod_l+0x992>
 801a528:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a5b0 <_strtod_l+0xad8>
 801a52c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a530:	ec57 6b17 	vmov	r6, r7, d7
 801a534:	e799      	b.n	801a46a <_strtod_l+0x992>
 801a536:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a53a:	9b08      	ldr	r3, [sp, #32]
 801a53c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a540:	2b00      	cmp	r3, #0
 801a542:	d1c1      	bne.n	801a4c8 <_strtod_l+0x9f0>
 801a544:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a548:	0d1b      	lsrs	r3, r3, #20
 801a54a:	051b      	lsls	r3, r3, #20
 801a54c:	429d      	cmp	r5, r3
 801a54e:	d1bb      	bne.n	801a4c8 <_strtod_l+0x9f0>
 801a550:	4630      	mov	r0, r6
 801a552:	4639      	mov	r1, r7
 801a554:	f7e6 fb88 	bl	8000c68 <__aeabi_d2lz>
 801a558:	f7e5 fff8 	bl	800054c <__aeabi_l2d>
 801a55c:	4602      	mov	r2, r0
 801a55e:	460b      	mov	r3, r1
 801a560:	4630      	mov	r0, r6
 801a562:	4639      	mov	r1, r7
 801a564:	f7e5 fe68 	bl	8000238 <__aeabi_dsub>
 801a568:	460b      	mov	r3, r1
 801a56a:	4602      	mov	r2, r0
 801a56c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a570:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a576:	ea46 060a 	orr.w	r6, r6, sl
 801a57a:	431e      	orrs	r6, r3
 801a57c:	d06f      	beq.n	801a65e <_strtod_l+0xb86>
 801a57e:	a30e      	add	r3, pc, #56	@ (adr r3, 801a5b8 <_strtod_l+0xae0>)
 801a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a584:	f7e6 fa82 	bl	8000a8c <__aeabi_dcmplt>
 801a588:	2800      	cmp	r0, #0
 801a58a:	f47f accf 	bne.w	8019f2c <_strtod_l+0x454>
 801a58e:	a30c      	add	r3, pc, #48	@ (adr r3, 801a5c0 <_strtod_l+0xae8>)
 801a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a598:	f7e6 fa96 	bl	8000ac8 <__aeabi_dcmpgt>
 801a59c:	2800      	cmp	r0, #0
 801a59e:	d093      	beq.n	801a4c8 <_strtod_l+0x9f0>
 801a5a0:	e4c4      	b.n	8019f2c <_strtod_l+0x454>
 801a5a2:	bf00      	nop
 801a5a4:	f3af 8000 	nop.w
 801a5a8:	00000000 	.word	0x00000000
 801a5ac:	bff00000 	.word	0xbff00000
 801a5b0:	00000000 	.word	0x00000000
 801a5b4:	3ff00000 	.word	0x3ff00000
 801a5b8:	94a03595 	.word	0x94a03595
 801a5bc:	3fdfffff 	.word	0x3fdfffff
 801a5c0:	35afe535 	.word	0x35afe535
 801a5c4:	3fe00000 	.word	0x3fe00000
 801a5c8:	000fffff 	.word	0x000fffff
 801a5cc:	7ff00000 	.word	0x7ff00000
 801a5d0:	7fefffff 	.word	0x7fefffff
 801a5d4:	3ff00000 	.word	0x3ff00000
 801a5d8:	3fe00000 	.word	0x3fe00000
 801a5dc:	7fe00000 	.word	0x7fe00000
 801a5e0:	7c9fffff 	.word	0x7c9fffff
 801a5e4:	9b08      	ldr	r3, [sp, #32]
 801a5e6:	b323      	cbz	r3, 801a632 <_strtod_l+0xb5a>
 801a5e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a5ec:	d821      	bhi.n	801a632 <_strtod_l+0xb5a>
 801a5ee:	a328      	add	r3, pc, #160	@ (adr r3, 801a690 <_strtod_l+0xbb8>)
 801a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5f4:	4630      	mov	r0, r6
 801a5f6:	4639      	mov	r1, r7
 801a5f8:	f7e6 fa52 	bl	8000aa0 <__aeabi_dcmple>
 801a5fc:	b1a0      	cbz	r0, 801a628 <_strtod_l+0xb50>
 801a5fe:	4639      	mov	r1, r7
 801a600:	4630      	mov	r0, r6
 801a602:	f7e6 faa9 	bl	8000b58 <__aeabi_d2uiz>
 801a606:	2801      	cmp	r0, #1
 801a608:	bf38      	it	cc
 801a60a:	2001      	movcc	r0, #1
 801a60c:	f7e5 ff52 	bl	80004b4 <__aeabi_ui2d>
 801a610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a612:	4606      	mov	r6, r0
 801a614:	460f      	mov	r7, r1
 801a616:	b9fb      	cbnz	r3, 801a658 <_strtod_l+0xb80>
 801a618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a61c:	9014      	str	r0, [sp, #80]	@ 0x50
 801a61e:	9315      	str	r3, [sp, #84]	@ 0x54
 801a620:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a624:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a62a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a62e:	1b5b      	subs	r3, r3, r5
 801a630:	9311      	str	r3, [sp, #68]	@ 0x44
 801a632:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a636:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a63a:	f002 ff93 	bl	801d564 <__ulp>
 801a63e:	4650      	mov	r0, sl
 801a640:	ec53 2b10 	vmov	r2, r3, d0
 801a644:	4659      	mov	r1, fp
 801a646:	f7e5 ffaf 	bl	80005a8 <__aeabi_dmul>
 801a64a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a64e:	f7e5 fdf5 	bl	800023c <__adddf3>
 801a652:	4682      	mov	sl, r0
 801a654:	468b      	mov	fp, r1
 801a656:	e770      	b.n	801a53a <_strtod_l+0xa62>
 801a658:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a65c:	e7e0      	b.n	801a620 <_strtod_l+0xb48>
 801a65e:	a30e      	add	r3, pc, #56	@ (adr r3, 801a698 <_strtod_l+0xbc0>)
 801a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a664:	f7e6 fa12 	bl	8000a8c <__aeabi_dcmplt>
 801a668:	e798      	b.n	801a59c <_strtod_l+0xac4>
 801a66a:	2300      	movs	r3, #0
 801a66c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a66e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a672:	6013      	str	r3, [r2, #0]
 801a674:	f7ff ba6d 	b.w	8019b52 <_strtod_l+0x7a>
 801a678:	2a65      	cmp	r2, #101	@ 0x65
 801a67a:	f43f ab66 	beq.w	8019d4a <_strtod_l+0x272>
 801a67e:	2a45      	cmp	r2, #69	@ 0x45
 801a680:	f43f ab63 	beq.w	8019d4a <_strtod_l+0x272>
 801a684:	2301      	movs	r3, #1
 801a686:	f7ff bb9e 	b.w	8019dc6 <_strtod_l+0x2ee>
 801a68a:	bf00      	nop
 801a68c:	f3af 8000 	nop.w
 801a690:	ffc00000 	.word	0xffc00000
 801a694:	41dfffff 	.word	0x41dfffff
 801a698:	94a03595 	.word	0x94a03595
 801a69c:	3fcfffff 	.word	0x3fcfffff

0801a6a0 <_strtod_r>:
 801a6a0:	4b01      	ldr	r3, [pc, #4]	@ (801a6a8 <_strtod_r+0x8>)
 801a6a2:	f7ff ba19 	b.w	8019ad8 <_strtod_l>
 801a6a6:	bf00      	nop
 801a6a8:	20000150 	.word	0x20000150

0801a6ac <strtof>:
 801a6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6b0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801a770 <strtof+0xc4>
 801a6b4:	4b29      	ldr	r3, [pc, #164]	@ (801a75c <strtof+0xb0>)
 801a6b6:	460a      	mov	r2, r1
 801a6b8:	ed2d 8b02 	vpush	{d8}
 801a6bc:	4601      	mov	r1, r0
 801a6be:	f8d8 0000 	ldr.w	r0, [r8]
 801a6c2:	f7ff fa09 	bl	8019ad8 <_strtod_l>
 801a6c6:	ec55 4b10 	vmov	r4, r5, d0
 801a6ca:	4622      	mov	r2, r4
 801a6cc:	462b      	mov	r3, r5
 801a6ce:	4620      	mov	r0, r4
 801a6d0:	4629      	mov	r1, r5
 801a6d2:	f7e6 fa03 	bl	8000adc <__aeabi_dcmpun>
 801a6d6:	b190      	cbz	r0, 801a6fe <strtof+0x52>
 801a6d8:	2d00      	cmp	r5, #0
 801a6da:	4821      	ldr	r0, [pc, #132]	@ (801a760 <strtof+0xb4>)
 801a6dc:	da09      	bge.n	801a6f2 <strtof+0x46>
 801a6de:	f001 f9c7 	bl	801ba70 <nanf>
 801a6e2:	eeb1 8a40 	vneg.f32	s16, s0
 801a6e6:	eeb0 0a48 	vmov.f32	s0, s16
 801a6ea:	ecbd 8b02 	vpop	{d8}
 801a6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6f2:	ecbd 8b02 	vpop	{d8}
 801a6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a6fa:	f001 b9b9 	b.w	801ba70 <nanf>
 801a6fe:	4620      	mov	r0, r4
 801a700:	4629      	mov	r1, r5
 801a702:	f7e6 fa49 	bl	8000b98 <__aeabi_d2f>
 801a706:	ee08 0a10 	vmov	s16, r0
 801a70a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801a764 <strtof+0xb8>
 801a70e:	eeb0 7ac8 	vabs.f32	s14, s16
 801a712:	eeb4 7a67 	vcmp.f32	s14, s15
 801a716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a71a:	dd11      	ble.n	801a740 <strtof+0x94>
 801a71c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801a720:	4b11      	ldr	r3, [pc, #68]	@ (801a768 <strtof+0xbc>)
 801a722:	f04f 32ff 	mov.w	r2, #4294967295
 801a726:	4620      	mov	r0, r4
 801a728:	4639      	mov	r1, r7
 801a72a:	f7e6 f9d7 	bl	8000adc <__aeabi_dcmpun>
 801a72e:	b980      	cbnz	r0, 801a752 <strtof+0xa6>
 801a730:	4b0d      	ldr	r3, [pc, #52]	@ (801a768 <strtof+0xbc>)
 801a732:	f04f 32ff 	mov.w	r2, #4294967295
 801a736:	4620      	mov	r0, r4
 801a738:	4639      	mov	r1, r7
 801a73a:	f7e6 f9b1 	bl	8000aa0 <__aeabi_dcmple>
 801a73e:	b940      	cbnz	r0, 801a752 <strtof+0xa6>
 801a740:	ee18 3a10 	vmov	r3, s16
 801a744:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a748:	d1cd      	bne.n	801a6e6 <strtof+0x3a>
 801a74a:	4b08      	ldr	r3, [pc, #32]	@ (801a76c <strtof+0xc0>)
 801a74c:	402b      	ands	r3, r5
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d0c9      	beq.n	801a6e6 <strtof+0x3a>
 801a752:	f8d8 3000 	ldr.w	r3, [r8]
 801a756:	2222      	movs	r2, #34	@ 0x22
 801a758:	601a      	str	r2, [r3, #0]
 801a75a:	e7c4      	b.n	801a6e6 <strtof+0x3a>
 801a75c:	20000150 	.word	0x20000150
 801a760:	0802216e 	.word	0x0802216e
 801a764:	7f7fffff 	.word	0x7f7fffff
 801a768:	7fefffff 	.word	0x7fefffff
 801a76c:	7ff00000 	.word	0x7ff00000
 801a770:	200002bc 	.word	0x200002bc

0801a774 <_strtol_l.constprop.0>:
 801a774:	2b24      	cmp	r3, #36	@ 0x24
 801a776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a77a:	4686      	mov	lr, r0
 801a77c:	4690      	mov	r8, r2
 801a77e:	d801      	bhi.n	801a784 <_strtol_l.constprop.0+0x10>
 801a780:	2b01      	cmp	r3, #1
 801a782:	d106      	bne.n	801a792 <_strtol_l.constprop.0+0x1e>
 801a784:	f001 f928 	bl	801b9d8 <__errno>
 801a788:	2316      	movs	r3, #22
 801a78a:	6003      	str	r3, [r0, #0]
 801a78c:	2000      	movs	r0, #0
 801a78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a792:	4834      	ldr	r0, [pc, #208]	@ (801a864 <_strtol_l.constprop.0+0xf0>)
 801a794:	460d      	mov	r5, r1
 801a796:	462a      	mov	r2, r5
 801a798:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a79c:	5d06      	ldrb	r6, [r0, r4]
 801a79e:	f016 0608 	ands.w	r6, r6, #8
 801a7a2:	d1f8      	bne.n	801a796 <_strtol_l.constprop.0+0x22>
 801a7a4:	2c2d      	cmp	r4, #45	@ 0x2d
 801a7a6:	d12d      	bne.n	801a804 <_strtol_l.constprop.0+0x90>
 801a7a8:	782c      	ldrb	r4, [r5, #0]
 801a7aa:	2601      	movs	r6, #1
 801a7ac:	1c95      	adds	r5, r2, #2
 801a7ae:	f033 0210 	bics.w	r2, r3, #16
 801a7b2:	d109      	bne.n	801a7c8 <_strtol_l.constprop.0+0x54>
 801a7b4:	2c30      	cmp	r4, #48	@ 0x30
 801a7b6:	d12a      	bne.n	801a80e <_strtol_l.constprop.0+0x9a>
 801a7b8:	782a      	ldrb	r2, [r5, #0]
 801a7ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a7be:	2a58      	cmp	r2, #88	@ 0x58
 801a7c0:	d125      	bne.n	801a80e <_strtol_l.constprop.0+0x9a>
 801a7c2:	786c      	ldrb	r4, [r5, #1]
 801a7c4:	2310      	movs	r3, #16
 801a7c6:	3502      	adds	r5, #2
 801a7c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a7cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a7d0:	2200      	movs	r2, #0
 801a7d2:	fbbc f9f3 	udiv	r9, ip, r3
 801a7d6:	4610      	mov	r0, r2
 801a7d8:	fb03 ca19 	mls	sl, r3, r9, ip
 801a7dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a7e0:	2f09      	cmp	r7, #9
 801a7e2:	d81b      	bhi.n	801a81c <_strtol_l.constprop.0+0xa8>
 801a7e4:	463c      	mov	r4, r7
 801a7e6:	42a3      	cmp	r3, r4
 801a7e8:	dd27      	ble.n	801a83a <_strtol_l.constprop.0+0xc6>
 801a7ea:	1c57      	adds	r7, r2, #1
 801a7ec:	d007      	beq.n	801a7fe <_strtol_l.constprop.0+0x8a>
 801a7ee:	4581      	cmp	r9, r0
 801a7f0:	d320      	bcc.n	801a834 <_strtol_l.constprop.0+0xc0>
 801a7f2:	d101      	bne.n	801a7f8 <_strtol_l.constprop.0+0x84>
 801a7f4:	45a2      	cmp	sl, r4
 801a7f6:	db1d      	blt.n	801a834 <_strtol_l.constprop.0+0xc0>
 801a7f8:	fb00 4003 	mla	r0, r0, r3, r4
 801a7fc:	2201      	movs	r2, #1
 801a7fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a802:	e7eb      	b.n	801a7dc <_strtol_l.constprop.0+0x68>
 801a804:	2c2b      	cmp	r4, #43	@ 0x2b
 801a806:	bf04      	itt	eq
 801a808:	782c      	ldrbeq	r4, [r5, #0]
 801a80a:	1c95      	addeq	r5, r2, #2
 801a80c:	e7cf      	b.n	801a7ae <_strtol_l.constprop.0+0x3a>
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d1da      	bne.n	801a7c8 <_strtol_l.constprop.0+0x54>
 801a812:	2c30      	cmp	r4, #48	@ 0x30
 801a814:	bf0c      	ite	eq
 801a816:	2308      	moveq	r3, #8
 801a818:	230a      	movne	r3, #10
 801a81a:	e7d5      	b.n	801a7c8 <_strtol_l.constprop.0+0x54>
 801a81c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a820:	2f19      	cmp	r7, #25
 801a822:	d801      	bhi.n	801a828 <_strtol_l.constprop.0+0xb4>
 801a824:	3c37      	subs	r4, #55	@ 0x37
 801a826:	e7de      	b.n	801a7e6 <_strtol_l.constprop.0+0x72>
 801a828:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a82c:	2f19      	cmp	r7, #25
 801a82e:	d804      	bhi.n	801a83a <_strtol_l.constprop.0+0xc6>
 801a830:	3c57      	subs	r4, #87	@ 0x57
 801a832:	e7d8      	b.n	801a7e6 <_strtol_l.constprop.0+0x72>
 801a834:	f04f 32ff 	mov.w	r2, #4294967295
 801a838:	e7e1      	b.n	801a7fe <_strtol_l.constprop.0+0x8a>
 801a83a:	1c53      	adds	r3, r2, #1
 801a83c:	d108      	bne.n	801a850 <_strtol_l.constprop.0+0xdc>
 801a83e:	2322      	movs	r3, #34	@ 0x22
 801a840:	f8ce 3000 	str.w	r3, [lr]
 801a844:	4660      	mov	r0, ip
 801a846:	f1b8 0f00 	cmp.w	r8, #0
 801a84a:	d0a0      	beq.n	801a78e <_strtol_l.constprop.0+0x1a>
 801a84c:	1e69      	subs	r1, r5, #1
 801a84e:	e006      	b.n	801a85e <_strtol_l.constprop.0+0xea>
 801a850:	b106      	cbz	r6, 801a854 <_strtol_l.constprop.0+0xe0>
 801a852:	4240      	negs	r0, r0
 801a854:	f1b8 0f00 	cmp.w	r8, #0
 801a858:	d099      	beq.n	801a78e <_strtol_l.constprop.0+0x1a>
 801a85a:	2a00      	cmp	r2, #0
 801a85c:	d1f6      	bne.n	801a84c <_strtol_l.constprop.0+0xd8>
 801a85e:	f8c8 1000 	str.w	r1, [r8]
 801a862:	e794      	b.n	801a78e <_strtol_l.constprop.0+0x1a>
 801a864:	08021f81 	.word	0x08021f81

0801a868 <_strtol_r>:
 801a868:	f7ff bf84 	b.w	801a774 <_strtol_l.constprop.0>

0801a86c <strtol>:
 801a86c:	4613      	mov	r3, r2
 801a86e:	460a      	mov	r2, r1
 801a870:	4601      	mov	r1, r0
 801a872:	4802      	ldr	r0, [pc, #8]	@ (801a87c <strtol+0x10>)
 801a874:	6800      	ldr	r0, [r0, #0]
 801a876:	f7ff bf7d 	b.w	801a774 <_strtol_l.constprop.0>
 801a87a:	bf00      	nop
 801a87c:	200002bc 	.word	0x200002bc

0801a880 <__cvt>:
 801a880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a884:	ec57 6b10 	vmov	r6, r7, d0
 801a888:	2f00      	cmp	r7, #0
 801a88a:	460c      	mov	r4, r1
 801a88c:	4619      	mov	r1, r3
 801a88e:	463b      	mov	r3, r7
 801a890:	bfbb      	ittet	lt
 801a892:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a896:	461f      	movlt	r7, r3
 801a898:	2300      	movge	r3, #0
 801a89a:	232d      	movlt	r3, #45	@ 0x2d
 801a89c:	700b      	strb	r3, [r1, #0]
 801a89e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a8a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a8a4:	4691      	mov	r9, r2
 801a8a6:	f023 0820 	bic.w	r8, r3, #32
 801a8aa:	bfbc      	itt	lt
 801a8ac:	4632      	movlt	r2, r6
 801a8ae:	4616      	movlt	r6, r2
 801a8b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a8b4:	d005      	beq.n	801a8c2 <__cvt+0x42>
 801a8b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a8ba:	d100      	bne.n	801a8be <__cvt+0x3e>
 801a8bc:	3401      	adds	r4, #1
 801a8be:	2102      	movs	r1, #2
 801a8c0:	e000      	b.n	801a8c4 <__cvt+0x44>
 801a8c2:	2103      	movs	r1, #3
 801a8c4:	ab03      	add	r3, sp, #12
 801a8c6:	9301      	str	r3, [sp, #4]
 801a8c8:	ab02      	add	r3, sp, #8
 801a8ca:	9300      	str	r3, [sp, #0]
 801a8cc:	ec47 6b10 	vmov	d0, r6, r7
 801a8d0:	4653      	mov	r3, sl
 801a8d2:	4622      	mov	r2, r4
 801a8d4:	f001 f978 	bl	801bbc8 <_dtoa_r>
 801a8d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a8dc:	4605      	mov	r5, r0
 801a8de:	d119      	bne.n	801a914 <__cvt+0x94>
 801a8e0:	f019 0f01 	tst.w	r9, #1
 801a8e4:	d00e      	beq.n	801a904 <__cvt+0x84>
 801a8e6:	eb00 0904 	add.w	r9, r0, r4
 801a8ea:	2200      	movs	r2, #0
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	4630      	mov	r0, r6
 801a8f0:	4639      	mov	r1, r7
 801a8f2:	f7e6 f8c1 	bl	8000a78 <__aeabi_dcmpeq>
 801a8f6:	b108      	cbz	r0, 801a8fc <__cvt+0x7c>
 801a8f8:	f8cd 900c 	str.w	r9, [sp, #12]
 801a8fc:	2230      	movs	r2, #48	@ 0x30
 801a8fe:	9b03      	ldr	r3, [sp, #12]
 801a900:	454b      	cmp	r3, r9
 801a902:	d31e      	bcc.n	801a942 <__cvt+0xc2>
 801a904:	9b03      	ldr	r3, [sp, #12]
 801a906:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a908:	1b5b      	subs	r3, r3, r5
 801a90a:	4628      	mov	r0, r5
 801a90c:	6013      	str	r3, [r2, #0]
 801a90e:	b004      	add	sp, #16
 801a910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a914:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a918:	eb00 0904 	add.w	r9, r0, r4
 801a91c:	d1e5      	bne.n	801a8ea <__cvt+0x6a>
 801a91e:	7803      	ldrb	r3, [r0, #0]
 801a920:	2b30      	cmp	r3, #48	@ 0x30
 801a922:	d10a      	bne.n	801a93a <__cvt+0xba>
 801a924:	2200      	movs	r2, #0
 801a926:	2300      	movs	r3, #0
 801a928:	4630      	mov	r0, r6
 801a92a:	4639      	mov	r1, r7
 801a92c:	f7e6 f8a4 	bl	8000a78 <__aeabi_dcmpeq>
 801a930:	b918      	cbnz	r0, 801a93a <__cvt+0xba>
 801a932:	f1c4 0401 	rsb	r4, r4, #1
 801a936:	f8ca 4000 	str.w	r4, [sl]
 801a93a:	f8da 3000 	ldr.w	r3, [sl]
 801a93e:	4499      	add	r9, r3
 801a940:	e7d3      	b.n	801a8ea <__cvt+0x6a>
 801a942:	1c59      	adds	r1, r3, #1
 801a944:	9103      	str	r1, [sp, #12]
 801a946:	701a      	strb	r2, [r3, #0]
 801a948:	e7d9      	b.n	801a8fe <__cvt+0x7e>

0801a94a <__exponent>:
 801a94a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a94c:	2900      	cmp	r1, #0
 801a94e:	bfba      	itte	lt
 801a950:	4249      	neglt	r1, r1
 801a952:	232d      	movlt	r3, #45	@ 0x2d
 801a954:	232b      	movge	r3, #43	@ 0x2b
 801a956:	2909      	cmp	r1, #9
 801a958:	7002      	strb	r2, [r0, #0]
 801a95a:	7043      	strb	r3, [r0, #1]
 801a95c:	dd29      	ble.n	801a9b2 <__exponent+0x68>
 801a95e:	f10d 0307 	add.w	r3, sp, #7
 801a962:	461d      	mov	r5, r3
 801a964:	270a      	movs	r7, #10
 801a966:	461a      	mov	r2, r3
 801a968:	fbb1 f6f7 	udiv	r6, r1, r7
 801a96c:	fb07 1416 	mls	r4, r7, r6, r1
 801a970:	3430      	adds	r4, #48	@ 0x30
 801a972:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a976:	460c      	mov	r4, r1
 801a978:	2c63      	cmp	r4, #99	@ 0x63
 801a97a:	f103 33ff 	add.w	r3, r3, #4294967295
 801a97e:	4631      	mov	r1, r6
 801a980:	dcf1      	bgt.n	801a966 <__exponent+0x1c>
 801a982:	3130      	adds	r1, #48	@ 0x30
 801a984:	1e94      	subs	r4, r2, #2
 801a986:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a98a:	1c41      	adds	r1, r0, #1
 801a98c:	4623      	mov	r3, r4
 801a98e:	42ab      	cmp	r3, r5
 801a990:	d30a      	bcc.n	801a9a8 <__exponent+0x5e>
 801a992:	f10d 0309 	add.w	r3, sp, #9
 801a996:	1a9b      	subs	r3, r3, r2
 801a998:	42ac      	cmp	r4, r5
 801a99a:	bf88      	it	hi
 801a99c:	2300      	movhi	r3, #0
 801a99e:	3302      	adds	r3, #2
 801a9a0:	4403      	add	r3, r0
 801a9a2:	1a18      	subs	r0, r3, r0
 801a9a4:	b003      	add	sp, #12
 801a9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a9ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a9b0:	e7ed      	b.n	801a98e <__exponent+0x44>
 801a9b2:	2330      	movs	r3, #48	@ 0x30
 801a9b4:	3130      	adds	r1, #48	@ 0x30
 801a9b6:	7083      	strb	r3, [r0, #2]
 801a9b8:	70c1      	strb	r1, [r0, #3]
 801a9ba:	1d03      	adds	r3, r0, #4
 801a9bc:	e7f1      	b.n	801a9a2 <__exponent+0x58>
	...

0801a9c0 <_printf_float>:
 801a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9c4:	b08d      	sub	sp, #52	@ 0x34
 801a9c6:	460c      	mov	r4, r1
 801a9c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a9cc:	4616      	mov	r6, r2
 801a9ce:	461f      	mov	r7, r3
 801a9d0:	4605      	mov	r5, r0
 801a9d2:	f000 ffa7 	bl	801b924 <_localeconv_r>
 801a9d6:	6803      	ldr	r3, [r0, #0]
 801a9d8:	9304      	str	r3, [sp, #16]
 801a9da:	4618      	mov	r0, r3
 801a9dc:	f7e5 fc20 	bl	8000220 <strlen>
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	930a      	str	r3, [sp, #40]	@ 0x28
 801a9e4:	f8d8 3000 	ldr.w	r3, [r8]
 801a9e8:	9005      	str	r0, [sp, #20]
 801a9ea:	3307      	adds	r3, #7
 801a9ec:	f023 0307 	bic.w	r3, r3, #7
 801a9f0:	f103 0208 	add.w	r2, r3, #8
 801a9f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a9f8:	f8d4 b000 	ldr.w	fp, [r4]
 801a9fc:	f8c8 2000 	str.w	r2, [r8]
 801aa00:	e9d3 8900 	ldrd	r8, r9, [r3]
 801aa04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801aa08:	9307      	str	r3, [sp, #28]
 801aa0a:	f8cd 8018 	str.w	r8, [sp, #24]
 801aa0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801aa12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa16:	4b9c      	ldr	r3, [pc, #624]	@ (801ac88 <_printf_float+0x2c8>)
 801aa18:	f04f 32ff 	mov.w	r2, #4294967295
 801aa1c:	f7e6 f85e 	bl	8000adc <__aeabi_dcmpun>
 801aa20:	bb70      	cbnz	r0, 801aa80 <_printf_float+0xc0>
 801aa22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa26:	4b98      	ldr	r3, [pc, #608]	@ (801ac88 <_printf_float+0x2c8>)
 801aa28:	f04f 32ff 	mov.w	r2, #4294967295
 801aa2c:	f7e6 f838 	bl	8000aa0 <__aeabi_dcmple>
 801aa30:	bb30      	cbnz	r0, 801aa80 <_printf_float+0xc0>
 801aa32:	2200      	movs	r2, #0
 801aa34:	2300      	movs	r3, #0
 801aa36:	4640      	mov	r0, r8
 801aa38:	4649      	mov	r1, r9
 801aa3a:	f7e6 f827 	bl	8000a8c <__aeabi_dcmplt>
 801aa3e:	b110      	cbz	r0, 801aa46 <_printf_float+0x86>
 801aa40:	232d      	movs	r3, #45	@ 0x2d
 801aa42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aa46:	4a91      	ldr	r2, [pc, #580]	@ (801ac8c <_printf_float+0x2cc>)
 801aa48:	4b91      	ldr	r3, [pc, #580]	@ (801ac90 <_printf_float+0x2d0>)
 801aa4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801aa4e:	bf94      	ite	ls
 801aa50:	4690      	movls	r8, r2
 801aa52:	4698      	movhi	r8, r3
 801aa54:	2303      	movs	r3, #3
 801aa56:	6123      	str	r3, [r4, #16]
 801aa58:	f02b 0304 	bic.w	r3, fp, #4
 801aa5c:	6023      	str	r3, [r4, #0]
 801aa5e:	f04f 0900 	mov.w	r9, #0
 801aa62:	9700      	str	r7, [sp, #0]
 801aa64:	4633      	mov	r3, r6
 801aa66:	aa0b      	add	r2, sp, #44	@ 0x2c
 801aa68:	4621      	mov	r1, r4
 801aa6a:	4628      	mov	r0, r5
 801aa6c:	f000 f9d2 	bl	801ae14 <_printf_common>
 801aa70:	3001      	adds	r0, #1
 801aa72:	f040 808d 	bne.w	801ab90 <_printf_float+0x1d0>
 801aa76:	f04f 30ff 	mov.w	r0, #4294967295
 801aa7a:	b00d      	add	sp, #52	@ 0x34
 801aa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa80:	4642      	mov	r2, r8
 801aa82:	464b      	mov	r3, r9
 801aa84:	4640      	mov	r0, r8
 801aa86:	4649      	mov	r1, r9
 801aa88:	f7e6 f828 	bl	8000adc <__aeabi_dcmpun>
 801aa8c:	b140      	cbz	r0, 801aaa0 <_printf_float+0xe0>
 801aa8e:	464b      	mov	r3, r9
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	bfbc      	itt	lt
 801aa94:	232d      	movlt	r3, #45	@ 0x2d
 801aa96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801aa9a:	4a7e      	ldr	r2, [pc, #504]	@ (801ac94 <_printf_float+0x2d4>)
 801aa9c:	4b7e      	ldr	r3, [pc, #504]	@ (801ac98 <_printf_float+0x2d8>)
 801aa9e:	e7d4      	b.n	801aa4a <_printf_float+0x8a>
 801aaa0:	6863      	ldr	r3, [r4, #4]
 801aaa2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801aaa6:	9206      	str	r2, [sp, #24]
 801aaa8:	1c5a      	adds	r2, r3, #1
 801aaaa:	d13b      	bne.n	801ab24 <_printf_float+0x164>
 801aaac:	2306      	movs	r3, #6
 801aaae:	6063      	str	r3, [r4, #4]
 801aab0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801aab4:	2300      	movs	r3, #0
 801aab6:	6022      	str	r2, [r4, #0]
 801aab8:	9303      	str	r3, [sp, #12]
 801aaba:	ab0a      	add	r3, sp, #40	@ 0x28
 801aabc:	e9cd a301 	strd	sl, r3, [sp, #4]
 801aac0:	ab09      	add	r3, sp, #36	@ 0x24
 801aac2:	9300      	str	r3, [sp, #0]
 801aac4:	6861      	ldr	r1, [r4, #4]
 801aac6:	ec49 8b10 	vmov	d0, r8, r9
 801aaca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801aace:	4628      	mov	r0, r5
 801aad0:	f7ff fed6 	bl	801a880 <__cvt>
 801aad4:	9b06      	ldr	r3, [sp, #24]
 801aad6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aad8:	2b47      	cmp	r3, #71	@ 0x47
 801aada:	4680      	mov	r8, r0
 801aadc:	d129      	bne.n	801ab32 <_printf_float+0x172>
 801aade:	1cc8      	adds	r0, r1, #3
 801aae0:	db02      	blt.n	801aae8 <_printf_float+0x128>
 801aae2:	6863      	ldr	r3, [r4, #4]
 801aae4:	4299      	cmp	r1, r3
 801aae6:	dd41      	ble.n	801ab6c <_printf_float+0x1ac>
 801aae8:	f1aa 0a02 	sub.w	sl, sl, #2
 801aaec:	fa5f fa8a 	uxtb.w	sl, sl
 801aaf0:	3901      	subs	r1, #1
 801aaf2:	4652      	mov	r2, sl
 801aaf4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801aaf8:	9109      	str	r1, [sp, #36]	@ 0x24
 801aafa:	f7ff ff26 	bl	801a94a <__exponent>
 801aafe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ab00:	1813      	adds	r3, r2, r0
 801ab02:	2a01      	cmp	r2, #1
 801ab04:	4681      	mov	r9, r0
 801ab06:	6123      	str	r3, [r4, #16]
 801ab08:	dc02      	bgt.n	801ab10 <_printf_float+0x150>
 801ab0a:	6822      	ldr	r2, [r4, #0]
 801ab0c:	07d2      	lsls	r2, r2, #31
 801ab0e:	d501      	bpl.n	801ab14 <_printf_float+0x154>
 801ab10:	3301      	adds	r3, #1
 801ab12:	6123      	str	r3, [r4, #16]
 801ab14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d0a2      	beq.n	801aa62 <_printf_float+0xa2>
 801ab1c:	232d      	movs	r3, #45	@ 0x2d
 801ab1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ab22:	e79e      	b.n	801aa62 <_printf_float+0xa2>
 801ab24:	9a06      	ldr	r2, [sp, #24]
 801ab26:	2a47      	cmp	r2, #71	@ 0x47
 801ab28:	d1c2      	bne.n	801aab0 <_printf_float+0xf0>
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d1c0      	bne.n	801aab0 <_printf_float+0xf0>
 801ab2e:	2301      	movs	r3, #1
 801ab30:	e7bd      	b.n	801aaae <_printf_float+0xee>
 801ab32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801ab36:	d9db      	bls.n	801aaf0 <_printf_float+0x130>
 801ab38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801ab3c:	d118      	bne.n	801ab70 <_printf_float+0x1b0>
 801ab3e:	2900      	cmp	r1, #0
 801ab40:	6863      	ldr	r3, [r4, #4]
 801ab42:	dd0b      	ble.n	801ab5c <_printf_float+0x19c>
 801ab44:	6121      	str	r1, [r4, #16]
 801ab46:	b913      	cbnz	r3, 801ab4e <_printf_float+0x18e>
 801ab48:	6822      	ldr	r2, [r4, #0]
 801ab4a:	07d0      	lsls	r0, r2, #31
 801ab4c:	d502      	bpl.n	801ab54 <_printf_float+0x194>
 801ab4e:	3301      	adds	r3, #1
 801ab50:	440b      	add	r3, r1
 801ab52:	6123      	str	r3, [r4, #16]
 801ab54:	65a1      	str	r1, [r4, #88]	@ 0x58
 801ab56:	f04f 0900 	mov.w	r9, #0
 801ab5a:	e7db      	b.n	801ab14 <_printf_float+0x154>
 801ab5c:	b913      	cbnz	r3, 801ab64 <_printf_float+0x1a4>
 801ab5e:	6822      	ldr	r2, [r4, #0]
 801ab60:	07d2      	lsls	r2, r2, #31
 801ab62:	d501      	bpl.n	801ab68 <_printf_float+0x1a8>
 801ab64:	3302      	adds	r3, #2
 801ab66:	e7f4      	b.n	801ab52 <_printf_float+0x192>
 801ab68:	2301      	movs	r3, #1
 801ab6a:	e7f2      	b.n	801ab52 <_printf_float+0x192>
 801ab6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801ab70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ab72:	4299      	cmp	r1, r3
 801ab74:	db05      	blt.n	801ab82 <_printf_float+0x1c2>
 801ab76:	6823      	ldr	r3, [r4, #0]
 801ab78:	6121      	str	r1, [r4, #16]
 801ab7a:	07d8      	lsls	r0, r3, #31
 801ab7c:	d5ea      	bpl.n	801ab54 <_printf_float+0x194>
 801ab7e:	1c4b      	adds	r3, r1, #1
 801ab80:	e7e7      	b.n	801ab52 <_printf_float+0x192>
 801ab82:	2900      	cmp	r1, #0
 801ab84:	bfd4      	ite	le
 801ab86:	f1c1 0202 	rsble	r2, r1, #2
 801ab8a:	2201      	movgt	r2, #1
 801ab8c:	4413      	add	r3, r2
 801ab8e:	e7e0      	b.n	801ab52 <_printf_float+0x192>
 801ab90:	6823      	ldr	r3, [r4, #0]
 801ab92:	055a      	lsls	r2, r3, #21
 801ab94:	d407      	bmi.n	801aba6 <_printf_float+0x1e6>
 801ab96:	6923      	ldr	r3, [r4, #16]
 801ab98:	4642      	mov	r2, r8
 801ab9a:	4631      	mov	r1, r6
 801ab9c:	4628      	mov	r0, r5
 801ab9e:	47b8      	blx	r7
 801aba0:	3001      	adds	r0, #1
 801aba2:	d12b      	bne.n	801abfc <_printf_float+0x23c>
 801aba4:	e767      	b.n	801aa76 <_printf_float+0xb6>
 801aba6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801abaa:	f240 80dd 	bls.w	801ad68 <_printf_float+0x3a8>
 801abae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801abb2:	2200      	movs	r2, #0
 801abb4:	2300      	movs	r3, #0
 801abb6:	f7e5 ff5f 	bl	8000a78 <__aeabi_dcmpeq>
 801abba:	2800      	cmp	r0, #0
 801abbc:	d033      	beq.n	801ac26 <_printf_float+0x266>
 801abbe:	4a37      	ldr	r2, [pc, #220]	@ (801ac9c <_printf_float+0x2dc>)
 801abc0:	2301      	movs	r3, #1
 801abc2:	4631      	mov	r1, r6
 801abc4:	4628      	mov	r0, r5
 801abc6:	47b8      	blx	r7
 801abc8:	3001      	adds	r0, #1
 801abca:	f43f af54 	beq.w	801aa76 <_printf_float+0xb6>
 801abce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801abd2:	4543      	cmp	r3, r8
 801abd4:	db02      	blt.n	801abdc <_printf_float+0x21c>
 801abd6:	6823      	ldr	r3, [r4, #0]
 801abd8:	07d8      	lsls	r0, r3, #31
 801abda:	d50f      	bpl.n	801abfc <_printf_float+0x23c>
 801abdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801abe0:	4631      	mov	r1, r6
 801abe2:	4628      	mov	r0, r5
 801abe4:	47b8      	blx	r7
 801abe6:	3001      	adds	r0, #1
 801abe8:	f43f af45 	beq.w	801aa76 <_printf_float+0xb6>
 801abec:	f04f 0900 	mov.w	r9, #0
 801abf0:	f108 38ff 	add.w	r8, r8, #4294967295
 801abf4:	f104 0a1a 	add.w	sl, r4, #26
 801abf8:	45c8      	cmp	r8, r9
 801abfa:	dc09      	bgt.n	801ac10 <_printf_float+0x250>
 801abfc:	6823      	ldr	r3, [r4, #0]
 801abfe:	079b      	lsls	r3, r3, #30
 801ac00:	f100 8103 	bmi.w	801ae0a <_printf_float+0x44a>
 801ac04:	68e0      	ldr	r0, [r4, #12]
 801ac06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac08:	4298      	cmp	r0, r3
 801ac0a:	bfb8      	it	lt
 801ac0c:	4618      	movlt	r0, r3
 801ac0e:	e734      	b.n	801aa7a <_printf_float+0xba>
 801ac10:	2301      	movs	r3, #1
 801ac12:	4652      	mov	r2, sl
 801ac14:	4631      	mov	r1, r6
 801ac16:	4628      	mov	r0, r5
 801ac18:	47b8      	blx	r7
 801ac1a:	3001      	adds	r0, #1
 801ac1c:	f43f af2b 	beq.w	801aa76 <_printf_float+0xb6>
 801ac20:	f109 0901 	add.w	r9, r9, #1
 801ac24:	e7e8      	b.n	801abf8 <_printf_float+0x238>
 801ac26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	dc39      	bgt.n	801aca0 <_printf_float+0x2e0>
 801ac2c:	4a1b      	ldr	r2, [pc, #108]	@ (801ac9c <_printf_float+0x2dc>)
 801ac2e:	2301      	movs	r3, #1
 801ac30:	4631      	mov	r1, r6
 801ac32:	4628      	mov	r0, r5
 801ac34:	47b8      	blx	r7
 801ac36:	3001      	adds	r0, #1
 801ac38:	f43f af1d 	beq.w	801aa76 <_printf_float+0xb6>
 801ac3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ac40:	ea59 0303 	orrs.w	r3, r9, r3
 801ac44:	d102      	bne.n	801ac4c <_printf_float+0x28c>
 801ac46:	6823      	ldr	r3, [r4, #0]
 801ac48:	07d9      	lsls	r1, r3, #31
 801ac4a:	d5d7      	bpl.n	801abfc <_printf_float+0x23c>
 801ac4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac50:	4631      	mov	r1, r6
 801ac52:	4628      	mov	r0, r5
 801ac54:	47b8      	blx	r7
 801ac56:	3001      	adds	r0, #1
 801ac58:	f43f af0d 	beq.w	801aa76 <_printf_float+0xb6>
 801ac5c:	f04f 0a00 	mov.w	sl, #0
 801ac60:	f104 0b1a 	add.w	fp, r4, #26
 801ac64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac66:	425b      	negs	r3, r3
 801ac68:	4553      	cmp	r3, sl
 801ac6a:	dc01      	bgt.n	801ac70 <_printf_float+0x2b0>
 801ac6c:	464b      	mov	r3, r9
 801ac6e:	e793      	b.n	801ab98 <_printf_float+0x1d8>
 801ac70:	2301      	movs	r3, #1
 801ac72:	465a      	mov	r2, fp
 801ac74:	4631      	mov	r1, r6
 801ac76:	4628      	mov	r0, r5
 801ac78:	47b8      	blx	r7
 801ac7a:	3001      	adds	r0, #1
 801ac7c:	f43f aefb 	beq.w	801aa76 <_printf_float+0xb6>
 801ac80:	f10a 0a01 	add.w	sl, sl, #1
 801ac84:	e7ee      	b.n	801ac64 <_printf_float+0x2a4>
 801ac86:	bf00      	nop
 801ac88:	7fefffff 	.word	0x7fefffff
 801ac8c:	08022081 	.word	0x08022081
 801ac90:	08022085 	.word	0x08022085
 801ac94:	08022089 	.word	0x08022089
 801ac98:	0802208d 	.word	0x0802208d
 801ac9c:	08022091 	.word	0x08022091
 801aca0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801aca2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801aca6:	4553      	cmp	r3, sl
 801aca8:	bfa8      	it	ge
 801acaa:	4653      	movge	r3, sl
 801acac:	2b00      	cmp	r3, #0
 801acae:	4699      	mov	r9, r3
 801acb0:	dc36      	bgt.n	801ad20 <_printf_float+0x360>
 801acb2:	f04f 0b00 	mov.w	fp, #0
 801acb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801acba:	f104 021a 	add.w	r2, r4, #26
 801acbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801acc0:	9306      	str	r3, [sp, #24]
 801acc2:	eba3 0309 	sub.w	r3, r3, r9
 801acc6:	455b      	cmp	r3, fp
 801acc8:	dc31      	bgt.n	801ad2e <_printf_float+0x36e>
 801acca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801accc:	459a      	cmp	sl, r3
 801acce:	dc3a      	bgt.n	801ad46 <_printf_float+0x386>
 801acd0:	6823      	ldr	r3, [r4, #0]
 801acd2:	07da      	lsls	r2, r3, #31
 801acd4:	d437      	bmi.n	801ad46 <_printf_float+0x386>
 801acd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acd8:	ebaa 0903 	sub.w	r9, sl, r3
 801acdc:	9b06      	ldr	r3, [sp, #24]
 801acde:	ebaa 0303 	sub.w	r3, sl, r3
 801ace2:	4599      	cmp	r9, r3
 801ace4:	bfa8      	it	ge
 801ace6:	4699      	movge	r9, r3
 801ace8:	f1b9 0f00 	cmp.w	r9, #0
 801acec:	dc33      	bgt.n	801ad56 <_printf_float+0x396>
 801acee:	f04f 0800 	mov.w	r8, #0
 801acf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801acf6:	f104 0b1a 	add.w	fp, r4, #26
 801acfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acfc:	ebaa 0303 	sub.w	r3, sl, r3
 801ad00:	eba3 0309 	sub.w	r3, r3, r9
 801ad04:	4543      	cmp	r3, r8
 801ad06:	f77f af79 	ble.w	801abfc <_printf_float+0x23c>
 801ad0a:	2301      	movs	r3, #1
 801ad0c:	465a      	mov	r2, fp
 801ad0e:	4631      	mov	r1, r6
 801ad10:	4628      	mov	r0, r5
 801ad12:	47b8      	blx	r7
 801ad14:	3001      	adds	r0, #1
 801ad16:	f43f aeae 	beq.w	801aa76 <_printf_float+0xb6>
 801ad1a:	f108 0801 	add.w	r8, r8, #1
 801ad1e:	e7ec      	b.n	801acfa <_printf_float+0x33a>
 801ad20:	4642      	mov	r2, r8
 801ad22:	4631      	mov	r1, r6
 801ad24:	4628      	mov	r0, r5
 801ad26:	47b8      	blx	r7
 801ad28:	3001      	adds	r0, #1
 801ad2a:	d1c2      	bne.n	801acb2 <_printf_float+0x2f2>
 801ad2c:	e6a3      	b.n	801aa76 <_printf_float+0xb6>
 801ad2e:	2301      	movs	r3, #1
 801ad30:	4631      	mov	r1, r6
 801ad32:	4628      	mov	r0, r5
 801ad34:	9206      	str	r2, [sp, #24]
 801ad36:	47b8      	blx	r7
 801ad38:	3001      	adds	r0, #1
 801ad3a:	f43f ae9c 	beq.w	801aa76 <_printf_float+0xb6>
 801ad3e:	9a06      	ldr	r2, [sp, #24]
 801ad40:	f10b 0b01 	add.w	fp, fp, #1
 801ad44:	e7bb      	b.n	801acbe <_printf_float+0x2fe>
 801ad46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad4a:	4631      	mov	r1, r6
 801ad4c:	4628      	mov	r0, r5
 801ad4e:	47b8      	blx	r7
 801ad50:	3001      	adds	r0, #1
 801ad52:	d1c0      	bne.n	801acd6 <_printf_float+0x316>
 801ad54:	e68f      	b.n	801aa76 <_printf_float+0xb6>
 801ad56:	9a06      	ldr	r2, [sp, #24]
 801ad58:	464b      	mov	r3, r9
 801ad5a:	4442      	add	r2, r8
 801ad5c:	4631      	mov	r1, r6
 801ad5e:	4628      	mov	r0, r5
 801ad60:	47b8      	blx	r7
 801ad62:	3001      	adds	r0, #1
 801ad64:	d1c3      	bne.n	801acee <_printf_float+0x32e>
 801ad66:	e686      	b.n	801aa76 <_printf_float+0xb6>
 801ad68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ad6c:	f1ba 0f01 	cmp.w	sl, #1
 801ad70:	dc01      	bgt.n	801ad76 <_printf_float+0x3b6>
 801ad72:	07db      	lsls	r3, r3, #31
 801ad74:	d536      	bpl.n	801ade4 <_printf_float+0x424>
 801ad76:	2301      	movs	r3, #1
 801ad78:	4642      	mov	r2, r8
 801ad7a:	4631      	mov	r1, r6
 801ad7c:	4628      	mov	r0, r5
 801ad7e:	47b8      	blx	r7
 801ad80:	3001      	adds	r0, #1
 801ad82:	f43f ae78 	beq.w	801aa76 <_printf_float+0xb6>
 801ad86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad8a:	4631      	mov	r1, r6
 801ad8c:	4628      	mov	r0, r5
 801ad8e:	47b8      	blx	r7
 801ad90:	3001      	adds	r0, #1
 801ad92:	f43f ae70 	beq.w	801aa76 <_printf_float+0xb6>
 801ad96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ada2:	f7e5 fe69 	bl	8000a78 <__aeabi_dcmpeq>
 801ada6:	b9c0      	cbnz	r0, 801adda <_printf_float+0x41a>
 801ada8:	4653      	mov	r3, sl
 801adaa:	f108 0201 	add.w	r2, r8, #1
 801adae:	4631      	mov	r1, r6
 801adb0:	4628      	mov	r0, r5
 801adb2:	47b8      	blx	r7
 801adb4:	3001      	adds	r0, #1
 801adb6:	d10c      	bne.n	801add2 <_printf_float+0x412>
 801adb8:	e65d      	b.n	801aa76 <_printf_float+0xb6>
 801adba:	2301      	movs	r3, #1
 801adbc:	465a      	mov	r2, fp
 801adbe:	4631      	mov	r1, r6
 801adc0:	4628      	mov	r0, r5
 801adc2:	47b8      	blx	r7
 801adc4:	3001      	adds	r0, #1
 801adc6:	f43f ae56 	beq.w	801aa76 <_printf_float+0xb6>
 801adca:	f108 0801 	add.w	r8, r8, #1
 801adce:	45d0      	cmp	r8, sl
 801add0:	dbf3      	blt.n	801adba <_printf_float+0x3fa>
 801add2:	464b      	mov	r3, r9
 801add4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801add8:	e6df      	b.n	801ab9a <_printf_float+0x1da>
 801adda:	f04f 0800 	mov.w	r8, #0
 801adde:	f104 0b1a 	add.w	fp, r4, #26
 801ade2:	e7f4      	b.n	801adce <_printf_float+0x40e>
 801ade4:	2301      	movs	r3, #1
 801ade6:	4642      	mov	r2, r8
 801ade8:	e7e1      	b.n	801adae <_printf_float+0x3ee>
 801adea:	2301      	movs	r3, #1
 801adec:	464a      	mov	r2, r9
 801adee:	4631      	mov	r1, r6
 801adf0:	4628      	mov	r0, r5
 801adf2:	47b8      	blx	r7
 801adf4:	3001      	adds	r0, #1
 801adf6:	f43f ae3e 	beq.w	801aa76 <_printf_float+0xb6>
 801adfa:	f108 0801 	add.w	r8, r8, #1
 801adfe:	68e3      	ldr	r3, [r4, #12]
 801ae00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ae02:	1a5b      	subs	r3, r3, r1
 801ae04:	4543      	cmp	r3, r8
 801ae06:	dcf0      	bgt.n	801adea <_printf_float+0x42a>
 801ae08:	e6fc      	b.n	801ac04 <_printf_float+0x244>
 801ae0a:	f04f 0800 	mov.w	r8, #0
 801ae0e:	f104 0919 	add.w	r9, r4, #25
 801ae12:	e7f4      	b.n	801adfe <_printf_float+0x43e>

0801ae14 <_printf_common>:
 801ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae18:	4616      	mov	r6, r2
 801ae1a:	4698      	mov	r8, r3
 801ae1c:	688a      	ldr	r2, [r1, #8]
 801ae1e:	690b      	ldr	r3, [r1, #16]
 801ae20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ae24:	4293      	cmp	r3, r2
 801ae26:	bfb8      	it	lt
 801ae28:	4613      	movlt	r3, r2
 801ae2a:	6033      	str	r3, [r6, #0]
 801ae2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ae30:	4607      	mov	r7, r0
 801ae32:	460c      	mov	r4, r1
 801ae34:	b10a      	cbz	r2, 801ae3a <_printf_common+0x26>
 801ae36:	3301      	adds	r3, #1
 801ae38:	6033      	str	r3, [r6, #0]
 801ae3a:	6823      	ldr	r3, [r4, #0]
 801ae3c:	0699      	lsls	r1, r3, #26
 801ae3e:	bf42      	ittt	mi
 801ae40:	6833      	ldrmi	r3, [r6, #0]
 801ae42:	3302      	addmi	r3, #2
 801ae44:	6033      	strmi	r3, [r6, #0]
 801ae46:	6825      	ldr	r5, [r4, #0]
 801ae48:	f015 0506 	ands.w	r5, r5, #6
 801ae4c:	d106      	bne.n	801ae5c <_printf_common+0x48>
 801ae4e:	f104 0a19 	add.w	sl, r4, #25
 801ae52:	68e3      	ldr	r3, [r4, #12]
 801ae54:	6832      	ldr	r2, [r6, #0]
 801ae56:	1a9b      	subs	r3, r3, r2
 801ae58:	42ab      	cmp	r3, r5
 801ae5a:	dc26      	bgt.n	801aeaa <_printf_common+0x96>
 801ae5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ae60:	6822      	ldr	r2, [r4, #0]
 801ae62:	3b00      	subs	r3, #0
 801ae64:	bf18      	it	ne
 801ae66:	2301      	movne	r3, #1
 801ae68:	0692      	lsls	r2, r2, #26
 801ae6a:	d42b      	bmi.n	801aec4 <_printf_common+0xb0>
 801ae6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ae70:	4641      	mov	r1, r8
 801ae72:	4638      	mov	r0, r7
 801ae74:	47c8      	blx	r9
 801ae76:	3001      	adds	r0, #1
 801ae78:	d01e      	beq.n	801aeb8 <_printf_common+0xa4>
 801ae7a:	6823      	ldr	r3, [r4, #0]
 801ae7c:	6922      	ldr	r2, [r4, #16]
 801ae7e:	f003 0306 	and.w	r3, r3, #6
 801ae82:	2b04      	cmp	r3, #4
 801ae84:	bf02      	ittt	eq
 801ae86:	68e5      	ldreq	r5, [r4, #12]
 801ae88:	6833      	ldreq	r3, [r6, #0]
 801ae8a:	1aed      	subeq	r5, r5, r3
 801ae8c:	68a3      	ldr	r3, [r4, #8]
 801ae8e:	bf0c      	ite	eq
 801ae90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae94:	2500      	movne	r5, #0
 801ae96:	4293      	cmp	r3, r2
 801ae98:	bfc4      	itt	gt
 801ae9a:	1a9b      	subgt	r3, r3, r2
 801ae9c:	18ed      	addgt	r5, r5, r3
 801ae9e:	2600      	movs	r6, #0
 801aea0:	341a      	adds	r4, #26
 801aea2:	42b5      	cmp	r5, r6
 801aea4:	d11a      	bne.n	801aedc <_printf_common+0xc8>
 801aea6:	2000      	movs	r0, #0
 801aea8:	e008      	b.n	801aebc <_printf_common+0xa8>
 801aeaa:	2301      	movs	r3, #1
 801aeac:	4652      	mov	r2, sl
 801aeae:	4641      	mov	r1, r8
 801aeb0:	4638      	mov	r0, r7
 801aeb2:	47c8      	blx	r9
 801aeb4:	3001      	adds	r0, #1
 801aeb6:	d103      	bne.n	801aec0 <_printf_common+0xac>
 801aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 801aebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aec0:	3501      	adds	r5, #1
 801aec2:	e7c6      	b.n	801ae52 <_printf_common+0x3e>
 801aec4:	18e1      	adds	r1, r4, r3
 801aec6:	1c5a      	adds	r2, r3, #1
 801aec8:	2030      	movs	r0, #48	@ 0x30
 801aeca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801aece:	4422      	add	r2, r4
 801aed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801aed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801aed8:	3302      	adds	r3, #2
 801aeda:	e7c7      	b.n	801ae6c <_printf_common+0x58>
 801aedc:	2301      	movs	r3, #1
 801aede:	4622      	mov	r2, r4
 801aee0:	4641      	mov	r1, r8
 801aee2:	4638      	mov	r0, r7
 801aee4:	47c8      	blx	r9
 801aee6:	3001      	adds	r0, #1
 801aee8:	d0e6      	beq.n	801aeb8 <_printf_common+0xa4>
 801aeea:	3601      	adds	r6, #1
 801aeec:	e7d9      	b.n	801aea2 <_printf_common+0x8e>
	...

0801aef0 <_printf_i>:
 801aef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aef4:	7e0f      	ldrb	r7, [r1, #24]
 801aef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aef8:	2f78      	cmp	r7, #120	@ 0x78
 801aefa:	4691      	mov	r9, r2
 801aefc:	4680      	mov	r8, r0
 801aefe:	460c      	mov	r4, r1
 801af00:	469a      	mov	sl, r3
 801af02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801af06:	d807      	bhi.n	801af18 <_printf_i+0x28>
 801af08:	2f62      	cmp	r7, #98	@ 0x62
 801af0a:	d80a      	bhi.n	801af22 <_printf_i+0x32>
 801af0c:	2f00      	cmp	r7, #0
 801af0e:	f000 80d2 	beq.w	801b0b6 <_printf_i+0x1c6>
 801af12:	2f58      	cmp	r7, #88	@ 0x58
 801af14:	f000 80b9 	beq.w	801b08a <_printf_i+0x19a>
 801af18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801af1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801af20:	e03a      	b.n	801af98 <_printf_i+0xa8>
 801af22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801af26:	2b15      	cmp	r3, #21
 801af28:	d8f6      	bhi.n	801af18 <_printf_i+0x28>
 801af2a:	a101      	add	r1, pc, #4	@ (adr r1, 801af30 <_printf_i+0x40>)
 801af2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801af30:	0801af89 	.word	0x0801af89
 801af34:	0801af9d 	.word	0x0801af9d
 801af38:	0801af19 	.word	0x0801af19
 801af3c:	0801af19 	.word	0x0801af19
 801af40:	0801af19 	.word	0x0801af19
 801af44:	0801af19 	.word	0x0801af19
 801af48:	0801af9d 	.word	0x0801af9d
 801af4c:	0801af19 	.word	0x0801af19
 801af50:	0801af19 	.word	0x0801af19
 801af54:	0801af19 	.word	0x0801af19
 801af58:	0801af19 	.word	0x0801af19
 801af5c:	0801b09d 	.word	0x0801b09d
 801af60:	0801afc7 	.word	0x0801afc7
 801af64:	0801b057 	.word	0x0801b057
 801af68:	0801af19 	.word	0x0801af19
 801af6c:	0801af19 	.word	0x0801af19
 801af70:	0801b0bf 	.word	0x0801b0bf
 801af74:	0801af19 	.word	0x0801af19
 801af78:	0801afc7 	.word	0x0801afc7
 801af7c:	0801af19 	.word	0x0801af19
 801af80:	0801af19 	.word	0x0801af19
 801af84:	0801b05f 	.word	0x0801b05f
 801af88:	6833      	ldr	r3, [r6, #0]
 801af8a:	1d1a      	adds	r2, r3, #4
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	6032      	str	r2, [r6, #0]
 801af90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801af94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801af98:	2301      	movs	r3, #1
 801af9a:	e09d      	b.n	801b0d8 <_printf_i+0x1e8>
 801af9c:	6833      	ldr	r3, [r6, #0]
 801af9e:	6820      	ldr	r0, [r4, #0]
 801afa0:	1d19      	adds	r1, r3, #4
 801afa2:	6031      	str	r1, [r6, #0]
 801afa4:	0606      	lsls	r6, r0, #24
 801afa6:	d501      	bpl.n	801afac <_printf_i+0xbc>
 801afa8:	681d      	ldr	r5, [r3, #0]
 801afaa:	e003      	b.n	801afb4 <_printf_i+0xc4>
 801afac:	0645      	lsls	r5, r0, #25
 801afae:	d5fb      	bpl.n	801afa8 <_printf_i+0xb8>
 801afb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801afb4:	2d00      	cmp	r5, #0
 801afb6:	da03      	bge.n	801afc0 <_printf_i+0xd0>
 801afb8:	232d      	movs	r3, #45	@ 0x2d
 801afba:	426d      	negs	r5, r5
 801afbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801afc0:	4859      	ldr	r0, [pc, #356]	@ (801b128 <_printf_i+0x238>)
 801afc2:	230a      	movs	r3, #10
 801afc4:	e011      	b.n	801afea <_printf_i+0xfa>
 801afc6:	6821      	ldr	r1, [r4, #0]
 801afc8:	6833      	ldr	r3, [r6, #0]
 801afca:	0608      	lsls	r0, r1, #24
 801afcc:	f853 5b04 	ldr.w	r5, [r3], #4
 801afd0:	d402      	bmi.n	801afd8 <_printf_i+0xe8>
 801afd2:	0649      	lsls	r1, r1, #25
 801afd4:	bf48      	it	mi
 801afd6:	b2ad      	uxthmi	r5, r5
 801afd8:	2f6f      	cmp	r7, #111	@ 0x6f
 801afda:	4853      	ldr	r0, [pc, #332]	@ (801b128 <_printf_i+0x238>)
 801afdc:	6033      	str	r3, [r6, #0]
 801afde:	bf14      	ite	ne
 801afe0:	230a      	movne	r3, #10
 801afe2:	2308      	moveq	r3, #8
 801afe4:	2100      	movs	r1, #0
 801afe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801afea:	6866      	ldr	r6, [r4, #4]
 801afec:	60a6      	str	r6, [r4, #8]
 801afee:	2e00      	cmp	r6, #0
 801aff0:	bfa2      	ittt	ge
 801aff2:	6821      	ldrge	r1, [r4, #0]
 801aff4:	f021 0104 	bicge.w	r1, r1, #4
 801aff8:	6021      	strge	r1, [r4, #0]
 801affa:	b90d      	cbnz	r5, 801b000 <_printf_i+0x110>
 801affc:	2e00      	cmp	r6, #0
 801affe:	d04b      	beq.n	801b098 <_printf_i+0x1a8>
 801b000:	4616      	mov	r6, r2
 801b002:	fbb5 f1f3 	udiv	r1, r5, r3
 801b006:	fb03 5711 	mls	r7, r3, r1, r5
 801b00a:	5dc7      	ldrb	r7, [r0, r7]
 801b00c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b010:	462f      	mov	r7, r5
 801b012:	42bb      	cmp	r3, r7
 801b014:	460d      	mov	r5, r1
 801b016:	d9f4      	bls.n	801b002 <_printf_i+0x112>
 801b018:	2b08      	cmp	r3, #8
 801b01a:	d10b      	bne.n	801b034 <_printf_i+0x144>
 801b01c:	6823      	ldr	r3, [r4, #0]
 801b01e:	07df      	lsls	r7, r3, #31
 801b020:	d508      	bpl.n	801b034 <_printf_i+0x144>
 801b022:	6923      	ldr	r3, [r4, #16]
 801b024:	6861      	ldr	r1, [r4, #4]
 801b026:	4299      	cmp	r1, r3
 801b028:	bfde      	ittt	le
 801b02a:	2330      	movle	r3, #48	@ 0x30
 801b02c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b030:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b034:	1b92      	subs	r2, r2, r6
 801b036:	6122      	str	r2, [r4, #16]
 801b038:	f8cd a000 	str.w	sl, [sp]
 801b03c:	464b      	mov	r3, r9
 801b03e:	aa03      	add	r2, sp, #12
 801b040:	4621      	mov	r1, r4
 801b042:	4640      	mov	r0, r8
 801b044:	f7ff fee6 	bl	801ae14 <_printf_common>
 801b048:	3001      	adds	r0, #1
 801b04a:	d14a      	bne.n	801b0e2 <_printf_i+0x1f2>
 801b04c:	f04f 30ff 	mov.w	r0, #4294967295
 801b050:	b004      	add	sp, #16
 801b052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b056:	6823      	ldr	r3, [r4, #0]
 801b058:	f043 0320 	orr.w	r3, r3, #32
 801b05c:	6023      	str	r3, [r4, #0]
 801b05e:	4833      	ldr	r0, [pc, #204]	@ (801b12c <_printf_i+0x23c>)
 801b060:	2778      	movs	r7, #120	@ 0x78
 801b062:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b066:	6823      	ldr	r3, [r4, #0]
 801b068:	6831      	ldr	r1, [r6, #0]
 801b06a:	061f      	lsls	r7, r3, #24
 801b06c:	f851 5b04 	ldr.w	r5, [r1], #4
 801b070:	d402      	bmi.n	801b078 <_printf_i+0x188>
 801b072:	065f      	lsls	r7, r3, #25
 801b074:	bf48      	it	mi
 801b076:	b2ad      	uxthmi	r5, r5
 801b078:	6031      	str	r1, [r6, #0]
 801b07a:	07d9      	lsls	r1, r3, #31
 801b07c:	bf44      	itt	mi
 801b07e:	f043 0320 	orrmi.w	r3, r3, #32
 801b082:	6023      	strmi	r3, [r4, #0]
 801b084:	b11d      	cbz	r5, 801b08e <_printf_i+0x19e>
 801b086:	2310      	movs	r3, #16
 801b088:	e7ac      	b.n	801afe4 <_printf_i+0xf4>
 801b08a:	4827      	ldr	r0, [pc, #156]	@ (801b128 <_printf_i+0x238>)
 801b08c:	e7e9      	b.n	801b062 <_printf_i+0x172>
 801b08e:	6823      	ldr	r3, [r4, #0]
 801b090:	f023 0320 	bic.w	r3, r3, #32
 801b094:	6023      	str	r3, [r4, #0]
 801b096:	e7f6      	b.n	801b086 <_printf_i+0x196>
 801b098:	4616      	mov	r6, r2
 801b09a:	e7bd      	b.n	801b018 <_printf_i+0x128>
 801b09c:	6833      	ldr	r3, [r6, #0]
 801b09e:	6825      	ldr	r5, [r4, #0]
 801b0a0:	6961      	ldr	r1, [r4, #20]
 801b0a2:	1d18      	adds	r0, r3, #4
 801b0a4:	6030      	str	r0, [r6, #0]
 801b0a6:	062e      	lsls	r6, r5, #24
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	d501      	bpl.n	801b0b0 <_printf_i+0x1c0>
 801b0ac:	6019      	str	r1, [r3, #0]
 801b0ae:	e002      	b.n	801b0b6 <_printf_i+0x1c6>
 801b0b0:	0668      	lsls	r0, r5, #25
 801b0b2:	d5fb      	bpl.n	801b0ac <_printf_i+0x1bc>
 801b0b4:	8019      	strh	r1, [r3, #0]
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	6123      	str	r3, [r4, #16]
 801b0ba:	4616      	mov	r6, r2
 801b0bc:	e7bc      	b.n	801b038 <_printf_i+0x148>
 801b0be:	6833      	ldr	r3, [r6, #0]
 801b0c0:	1d1a      	adds	r2, r3, #4
 801b0c2:	6032      	str	r2, [r6, #0]
 801b0c4:	681e      	ldr	r6, [r3, #0]
 801b0c6:	6862      	ldr	r2, [r4, #4]
 801b0c8:	2100      	movs	r1, #0
 801b0ca:	4630      	mov	r0, r6
 801b0cc:	f7e5 f858 	bl	8000180 <memchr>
 801b0d0:	b108      	cbz	r0, 801b0d6 <_printf_i+0x1e6>
 801b0d2:	1b80      	subs	r0, r0, r6
 801b0d4:	6060      	str	r0, [r4, #4]
 801b0d6:	6863      	ldr	r3, [r4, #4]
 801b0d8:	6123      	str	r3, [r4, #16]
 801b0da:	2300      	movs	r3, #0
 801b0dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b0e0:	e7aa      	b.n	801b038 <_printf_i+0x148>
 801b0e2:	6923      	ldr	r3, [r4, #16]
 801b0e4:	4632      	mov	r2, r6
 801b0e6:	4649      	mov	r1, r9
 801b0e8:	4640      	mov	r0, r8
 801b0ea:	47d0      	blx	sl
 801b0ec:	3001      	adds	r0, #1
 801b0ee:	d0ad      	beq.n	801b04c <_printf_i+0x15c>
 801b0f0:	6823      	ldr	r3, [r4, #0]
 801b0f2:	079b      	lsls	r3, r3, #30
 801b0f4:	d413      	bmi.n	801b11e <_printf_i+0x22e>
 801b0f6:	68e0      	ldr	r0, [r4, #12]
 801b0f8:	9b03      	ldr	r3, [sp, #12]
 801b0fa:	4298      	cmp	r0, r3
 801b0fc:	bfb8      	it	lt
 801b0fe:	4618      	movlt	r0, r3
 801b100:	e7a6      	b.n	801b050 <_printf_i+0x160>
 801b102:	2301      	movs	r3, #1
 801b104:	4632      	mov	r2, r6
 801b106:	4649      	mov	r1, r9
 801b108:	4640      	mov	r0, r8
 801b10a:	47d0      	blx	sl
 801b10c:	3001      	adds	r0, #1
 801b10e:	d09d      	beq.n	801b04c <_printf_i+0x15c>
 801b110:	3501      	adds	r5, #1
 801b112:	68e3      	ldr	r3, [r4, #12]
 801b114:	9903      	ldr	r1, [sp, #12]
 801b116:	1a5b      	subs	r3, r3, r1
 801b118:	42ab      	cmp	r3, r5
 801b11a:	dcf2      	bgt.n	801b102 <_printf_i+0x212>
 801b11c:	e7eb      	b.n	801b0f6 <_printf_i+0x206>
 801b11e:	2500      	movs	r5, #0
 801b120:	f104 0619 	add.w	r6, r4, #25
 801b124:	e7f5      	b.n	801b112 <_printf_i+0x222>
 801b126:	bf00      	nop
 801b128:	08022093 	.word	0x08022093
 801b12c:	080220a4 	.word	0x080220a4

0801b130 <_scanf_float>:
 801b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b134:	b087      	sub	sp, #28
 801b136:	4617      	mov	r7, r2
 801b138:	9303      	str	r3, [sp, #12]
 801b13a:	688b      	ldr	r3, [r1, #8]
 801b13c:	1e5a      	subs	r2, r3, #1
 801b13e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801b142:	bf81      	itttt	hi
 801b144:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801b148:	eb03 0b05 	addhi.w	fp, r3, r5
 801b14c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801b150:	608b      	strhi	r3, [r1, #8]
 801b152:	680b      	ldr	r3, [r1, #0]
 801b154:	460a      	mov	r2, r1
 801b156:	f04f 0500 	mov.w	r5, #0
 801b15a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801b15e:	f842 3b1c 	str.w	r3, [r2], #28
 801b162:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b166:	4680      	mov	r8, r0
 801b168:	460c      	mov	r4, r1
 801b16a:	bf98      	it	ls
 801b16c:	f04f 0b00 	movls.w	fp, #0
 801b170:	9201      	str	r2, [sp, #4]
 801b172:	4616      	mov	r6, r2
 801b174:	46aa      	mov	sl, r5
 801b176:	46a9      	mov	r9, r5
 801b178:	9502      	str	r5, [sp, #8]
 801b17a:	68a2      	ldr	r2, [r4, #8]
 801b17c:	b152      	cbz	r2, 801b194 <_scanf_float+0x64>
 801b17e:	683b      	ldr	r3, [r7, #0]
 801b180:	781b      	ldrb	r3, [r3, #0]
 801b182:	2b4e      	cmp	r3, #78	@ 0x4e
 801b184:	d864      	bhi.n	801b250 <_scanf_float+0x120>
 801b186:	2b40      	cmp	r3, #64	@ 0x40
 801b188:	d83c      	bhi.n	801b204 <_scanf_float+0xd4>
 801b18a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801b18e:	b2c8      	uxtb	r0, r1
 801b190:	280e      	cmp	r0, #14
 801b192:	d93a      	bls.n	801b20a <_scanf_float+0xda>
 801b194:	f1b9 0f00 	cmp.w	r9, #0
 801b198:	d003      	beq.n	801b1a2 <_scanf_float+0x72>
 801b19a:	6823      	ldr	r3, [r4, #0]
 801b19c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b1a0:	6023      	str	r3, [r4, #0]
 801b1a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b1a6:	f1ba 0f01 	cmp.w	sl, #1
 801b1aa:	f200 8117 	bhi.w	801b3dc <_scanf_float+0x2ac>
 801b1ae:	9b01      	ldr	r3, [sp, #4]
 801b1b0:	429e      	cmp	r6, r3
 801b1b2:	f200 8108 	bhi.w	801b3c6 <_scanf_float+0x296>
 801b1b6:	2001      	movs	r0, #1
 801b1b8:	b007      	add	sp, #28
 801b1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1be:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801b1c2:	2a0d      	cmp	r2, #13
 801b1c4:	d8e6      	bhi.n	801b194 <_scanf_float+0x64>
 801b1c6:	a101      	add	r1, pc, #4	@ (adr r1, 801b1cc <_scanf_float+0x9c>)
 801b1c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b1cc:	0801b313 	.word	0x0801b313
 801b1d0:	0801b195 	.word	0x0801b195
 801b1d4:	0801b195 	.word	0x0801b195
 801b1d8:	0801b195 	.word	0x0801b195
 801b1dc:	0801b373 	.word	0x0801b373
 801b1e0:	0801b34b 	.word	0x0801b34b
 801b1e4:	0801b195 	.word	0x0801b195
 801b1e8:	0801b195 	.word	0x0801b195
 801b1ec:	0801b321 	.word	0x0801b321
 801b1f0:	0801b195 	.word	0x0801b195
 801b1f4:	0801b195 	.word	0x0801b195
 801b1f8:	0801b195 	.word	0x0801b195
 801b1fc:	0801b195 	.word	0x0801b195
 801b200:	0801b2d9 	.word	0x0801b2d9
 801b204:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801b208:	e7db      	b.n	801b1c2 <_scanf_float+0x92>
 801b20a:	290e      	cmp	r1, #14
 801b20c:	d8c2      	bhi.n	801b194 <_scanf_float+0x64>
 801b20e:	a001      	add	r0, pc, #4	@ (adr r0, 801b214 <_scanf_float+0xe4>)
 801b210:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b214:	0801b2c9 	.word	0x0801b2c9
 801b218:	0801b195 	.word	0x0801b195
 801b21c:	0801b2c9 	.word	0x0801b2c9
 801b220:	0801b35f 	.word	0x0801b35f
 801b224:	0801b195 	.word	0x0801b195
 801b228:	0801b271 	.word	0x0801b271
 801b22c:	0801b2af 	.word	0x0801b2af
 801b230:	0801b2af 	.word	0x0801b2af
 801b234:	0801b2af 	.word	0x0801b2af
 801b238:	0801b2af 	.word	0x0801b2af
 801b23c:	0801b2af 	.word	0x0801b2af
 801b240:	0801b2af 	.word	0x0801b2af
 801b244:	0801b2af 	.word	0x0801b2af
 801b248:	0801b2af 	.word	0x0801b2af
 801b24c:	0801b2af 	.word	0x0801b2af
 801b250:	2b6e      	cmp	r3, #110	@ 0x6e
 801b252:	d809      	bhi.n	801b268 <_scanf_float+0x138>
 801b254:	2b60      	cmp	r3, #96	@ 0x60
 801b256:	d8b2      	bhi.n	801b1be <_scanf_float+0x8e>
 801b258:	2b54      	cmp	r3, #84	@ 0x54
 801b25a:	d07b      	beq.n	801b354 <_scanf_float+0x224>
 801b25c:	2b59      	cmp	r3, #89	@ 0x59
 801b25e:	d199      	bne.n	801b194 <_scanf_float+0x64>
 801b260:	2d07      	cmp	r5, #7
 801b262:	d197      	bne.n	801b194 <_scanf_float+0x64>
 801b264:	2508      	movs	r5, #8
 801b266:	e02c      	b.n	801b2c2 <_scanf_float+0x192>
 801b268:	2b74      	cmp	r3, #116	@ 0x74
 801b26a:	d073      	beq.n	801b354 <_scanf_float+0x224>
 801b26c:	2b79      	cmp	r3, #121	@ 0x79
 801b26e:	e7f6      	b.n	801b25e <_scanf_float+0x12e>
 801b270:	6821      	ldr	r1, [r4, #0]
 801b272:	05c8      	lsls	r0, r1, #23
 801b274:	d51b      	bpl.n	801b2ae <_scanf_float+0x17e>
 801b276:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801b27a:	6021      	str	r1, [r4, #0]
 801b27c:	f109 0901 	add.w	r9, r9, #1
 801b280:	f1bb 0f00 	cmp.w	fp, #0
 801b284:	d003      	beq.n	801b28e <_scanf_float+0x15e>
 801b286:	3201      	adds	r2, #1
 801b288:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b28c:	60a2      	str	r2, [r4, #8]
 801b28e:	68a3      	ldr	r3, [r4, #8]
 801b290:	3b01      	subs	r3, #1
 801b292:	60a3      	str	r3, [r4, #8]
 801b294:	6923      	ldr	r3, [r4, #16]
 801b296:	3301      	adds	r3, #1
 801b298:	6123      	str	r3, [r4, #16]
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	3b01      	subs	r3, #1
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	607b      	str	r3, [r7, #4]
 801b2a2:	f340 8087 	ble.w	801b3b4 <_scanf_float+0x284>
 801b2a6:	683b      	ldr	r3, [r7, #0]
 801b2a8:	3301      	adds	r3, #1
 801b2aa:	603b      	str	r3, [r7, #0]
 801b2ac:	e765      	b.n	801b17a <_scanf_float+0x4a>
 801b2ae:	eb1a 0105 	adds.w	r1, sl, r5
 801b2b2:	f47f af6f 	bne.w	801b194 <_scanf_float+0x64>
 801b2b6:	6822      	ldr	r2, [r4, #0]
 801b2b8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801b2bc:	6022      	str	r2, [r4, #0]
 801b2be:	460d      	mov	r5, r1
 801b2c0:	468a      	mov	sl, r1
 801b2c2:	f806 3b01 	strb.w	r3, [r6], #1
 801b2c6:	e7e2      	b.n	801b28e <_scanf_float+0x15e>
 801b2c8:	6822      	ldr	r2, [r4, #0]
 801b2ca:	0610      	lsls	r0, r2, #24
 801b2cc:	f57f af62 	bpl.w	801b194 <_scanf_float+0x64>
 801b2d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b2d4:	6022      	str	r2, [r4, #0]
 801b2d6:	e7f4      	b.n	801b2c2 <_scanf_float+0x192>
 801b2d8:	f1ba 0f00 	cmp.w	sl, #0
 801b2dc:	d10e      	bne.n	801b2fc <_scanf_float+0x1cc>
 801b2de:	f1b9 0f00 	cmp.w	r9, #0
 801b2e2:	d10e      	bne.n	801b302 <_scanf_float+0x1d2>
 801b2e4:	6822      	ldr	r2, [r4, #0]
 801b2e6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b2ea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b2ee:	d108      	bne.n	801b302 <_scanf_float+0x1d2>
 801b2f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b2f4:	6022      	str	r2, [r4, #0]
 801b2f6:	f04f 0a01 	mov.w	sl, #1
 801b2fa:	e7e2      	b.n	801b2c2 <_scanf_float+0x192>
 801b2fc:	f1ba 0f02 	cmp.w	sl, #2
 801b300:	d055      	beq.n	801b3ae <_scanf_float+0x27e>
 801b302:	2d01      	cmp	r5, #1
 801b304:	d002      	beq.n	801b30c <_scanf_float+0x1dc>
 801b306:	2d04      	cmp	r5, #4
 801b308:	f47f af44 	bne.w	801b194 <_scanf_float+0x64>
 801b30c:	3501      	adds	r5, #1
 801b30e:	b2ed      	uxtb	r5, r5
 801b310:	e7d7      	b.n	801b2c2 <_scanf_float+0x192>
 801b312:	f1ba 0f01 	cmp.w	sl, #1
 801b316:	f47f af3d 	bne.w	801b194 <_scanf_float+0x64>
 801b31a:	f04f 0a02 	mov.w	sl, #2
 801b31e:	e7d0      	b.n	801b2c2 <_scanf_float+0x192>
 801b320:	b97d      	cbnz	r5, 801b342 <_scanf_float+0x212>
 801b322:	f1b9 0f00 	cmp.w	r9, #0
 801b326:	f47f af38 	bne.w	801b19a <_scanf_float+0x6a>
 801b32a:	6822      	ldr	r2, [r4, #0]
 801b32c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b330:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b334:	f040 8108 	bne.w	801b548 <_scanf_float+0x418>
 801b338:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b33c:	6022      	str	r2, [r4, #0]
 801b33e:	2501      	movs	r5, #1
 801b340:	e7bf      	b.n	801b2c2 <_scanf_float+0x192>
 801b342:	2d03      	cmp	r5, #3
 801b344:	d0e2      	beq.n	801b30c <_scanf_float+0x1dc>
 801b346:	2d05      	cmp	r5, #5
 801b348:	e7de      	b.n	801b308 <_scanf_float+0x1d8>
 801b34a:	2d02      	cmp	r5, #2
 801b34c:	f47f af22 	bne.w	801b194 <_scanf_float+0x64>
 801b350:	2503      	movs	r5, #3
 801b352:	e7b6      	b.n	801b2c2 <_scanf_float+0x192>
 801b354:	2d06      	cmp	r5, #6
 801b356:	f47f af1d 	bne.w	801b194 <_scanf_float+0x64>
 801b35a:	2507      	movs	r5, #7
 801b35c:	e7b1      	b.n	801b2c2 <_scanf_float+0x192>
 801b35e:	6822      	ldr	r2, [r4, #0]
 801b360:	0591      	lsls	r1, r2, #22
 801b362:	f57f af17 	bpl.w	801b194 <_scanf_float+0x64>
 801b366:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801b36a:	6022      	str	r2, [r4, #0]
 801b36c:	f8cd 9008 	str.w	r9, [sp, #8]
 801b370:	e7a7      	b.n	801b2c2 <_scanf_float+0x192>
 801b372:	6822      	ldr	r2, [r4, #0]
 801b374:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801b378:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b37c:	d006      	beq.n	801b38c <_scanf_float+0x25c>
 801b37e:	0550      	lsls	r0, r2, #21
 801b380:	f57f af08 	bpl.w	801b194 <_scanf_float+0x64>
 801b384:	f1b9 0f00 	cmp.w	r9, #0
 801b388:	f000 80de 	beq.w	801b548 <_scanf_float+0x418>
 801b38c:	0591      	lsls	r1, r2, #22
 801b38e:	bf58      	it	pl
 801b390:	9902      	ldrpl	r1, [sp, #8]
 801b392:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b396:	bf58      	it	pl
 801b398:	eba9 0101 	subpl.w	r1, r9, r1
 801b39c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801b3a0:	bf58      	it	pl
 801b3a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b3a6:	6022      	str	r2, [r4, #0]
 801b3a8:	f04f 0900 	mov.w	r9, #0
 801b3ac:	e789      	b.n	801b2c2 <_scanf_float+0x192>
 801b3ae:	f04f 0a03 	mov.w	sl, #3
 801b3b2:	e786      	b.n	801b2c2 <_scanf_float+0x192>
 801b3b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b3b8:	4639      	mov	r1, r7
 801b3ba:	4640      	mov	r0, r8
 801b3bc:	4798      	blx	r3
 801b3be:	2800      	cmp	r0, #0
 801b3c0:	f43f aedb 	beq.w	801b17a <_scanf_float+0x4a>
 801b3c4:	e6e6      	b.n	801b194 <_scanf_float+0x64>
 801b3c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b3ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b3ce:	463a      	mov	r2, r7
 801b3d0:	4640      	mov	r0, r8
 801b3d2:	4798      	blx	r3
 801b3d4:	6923      	ldr	r3, [r4, #16]
 801b3d6:	3b01      	subs	r3, #1
 801b3d8:	6123      	str	r3, [r4, #16]
 801b3da:	e6e8      	b.n	801b1ae <_scanf_float+0x7e>
 801b3dc:	1e6b      	subs	r3, r5, #1
 801b3de:	2b06      	cmp	r3, #6
 801b3e0:	d824      	bhi.n	801b42c <_scanf_float+0x2fc>
 801b3e2:	2d02      	cmp	r5, #2
 801b3e4:	d836      	bhi.n	801b454 <_scanf_float+0x324>
 801b3e6:	9b01      	ldr	r3, [sp, #4]
 801b3e8:	429e      	cmp	r6, r3
 801b3ea:	f67f aee4 	bls.w	801b1b6 <_scanf_float+0x86>
 801b3ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b3f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b3f6:	463a      	mov	r2, r7
 801b3f8:	4640      	mov	r0, r8
 801b3fa:	4798      	blx	r3
 801b3fc:	6923      	ldr	r3, [r4, #16]
 801b3fe:	3b01      	subs	r3, #1
 801b400:	6123      	str	r3, [r4, #16]
 801b402:	e7f0      	b.n	801b3e6 <_scanf_float+0x2b6>
 801b404:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b408:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b40c:	463a      	mov	r2, r7
 801b40e:	4640      	mov	r0, r8
 801b410:	4798      	blx	r3
 801b412:	6923      	ldr	r3, [r4, #16]
 801b414:	3b01      	subs	r3, #1
 801b416:	6123      	str	r3, [r4, #16]
 801b418:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b41c:	fa5f fa8a 	uxtb.w	sl, sl
 801b420:	f1ba 0f02 	cmp.w	sl, #2
 801b424:	d1ee      	bne.n	801b404 <_scanf_float+0x2d4>
 801b426:	3d03      	subs	r5, #3
 801b428:	b2ed      	uxtb	r5, r5
 801b42a:	1b76      	subs	r6, r6, r5
 801b42c:	6823      	ldr	r3, [r4, #0]
 801b42e:	05da      	lsls	r2, r3, #23
 801b430:	d530      	bpl.n	801b494 <_scanf_float+0x364>
 801b432:	055b      	lsls	r3, r3, #21
 801b434:	d511      	bpl.n	801b45a <_scanf_float+0x32a>
 801b436:	9b01      	ldr	r3, [sp, #4]
 801b438:	429e      	cmp	r6, r3
 801b43a:	f67f aebc 	bls.w	801b1b6 <_scanf_float+0x86>
 801b43e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b446:	463a      	mov	r2, r7
 801b448:	4640      	mov	r0, r8
 801b44a:	4798      	blx	r3
 801b44c:	6923      	ldr	r3, [r4, #16]
 801b44e:	3b01      	subs	r3, #1
 801b450:	6123      	str	r3, [r4, #16]
 801b452:	e7f0      	b.n	801b436 <_scanf_float+0x306>
 801b454:	46aa      	mov	sl, r5
 801b456:	46b3      	mov	fp, r6
 801b458:	e7de      	b.n	801b418 <_scanf_float+0x2e8>
 801b45a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b45e:	6923      	ldr	r3, [r4, #16]
 801b460:	2965      	cmp	r1, #101	@ 0x65
 801b462:	f103 33ff 	add.w	r3, r3, #4294967295
 801b466:	f106 35ff 	add.w	r5, r6, #4294967295
 801b46a:	6123      	str	r3, [r4, #16]
 801b46c:	d00c      	beq.n	801b488 <_scanf_float+0x358>
 801b46e:	2945      	cmp	r1, #69	@ 0x45
 801b470:	d00a      	beq.n	801b488 <_scanf_float+0x358>
 801b472:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b476:	463a      	mov	r2, r7
 801b478:	4640      	mov	r0, r8
 801b47a:	4798      	blx	r3
 801b47c:	6923      	ldr	r3, [r4, #16]
 801b47e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b482:	3b01      	subs	r3, #1
 801b484:	1eb5      	subs	r5, r6, #2
 801b486:	6123      	str	r3, [r4, #16]
 801b488:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b48c:	463a      	mov	r2, r7
 801b48e:	4640      	mov	r0, r8
 801b490:	4798      	blx	r3
 801b492:	462e      	mov	r6, r5
 801b494:	6822      	ldr	r2, [r4, #0]
 801b496:	f012 0210 	ands.w	r2, r2, #16
 801b49a:	d001      	beq.n	801b4a0 <_scanf_float+0x370>
 801b49c:	2000      	movs	r0, #0
 801b49e:	e68b      	b.n	801b1b8 <_scanf_float+0x88>
 801b4a0:	7032      	strb	r2, [r6, #0]
 801b4a2:	6823      	ldr	r3, [r4, #0]
 801b4a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b4a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b4ac:	d11c      	bne.n	801b4e8 <_scanf_float+0x3b8>
 801b4ae:	9b02      	ldr	r3, [sp, #8]
 801b4b0:	454b      	cmp	r3, r9
 801b4b2:	eba3 0209 	sub.w	r2, r3, r9
 801b4b6:	d123      	bne.n	801b500 <_scanf_float+0x3d0>
 801b4b8:	9901      	ldr	r1, [sp, #4]
 801b4ba:	2200      	movs	r2, #0
 801b4bc:	4640      	mov	r0, r8
 801b4be:	f7ff f8ef 	bl	801a6a0 <_strtod_r>
 801b4c2:	9b03      	ldr	r3, [sp, #12]
 801b4c4:	6821      	ldr	r1, [r4, #0]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	f011 0f02 	tst.w	r1, #2
 801b4cc:	ec57 6b10 	vmov	r6, r7, d0
 801b4d0:	f103 0204 	add.w	r2, r3, #4
 801b4d4:	d01f      	beq.n	801b516 <_scanf_float+0x3e6>
 801b4d6:	9903      	ldr	r1, [sp, #12]
 801b4d8:	600a      	str	r2, [r1, #0]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	e9c3 6700 	strd	r6, r7, [r3]
 801b4e0:	68e3      	ldr	r3, [r4, #12]
 801b4e2:	3301      	adds	r3, #1
 801b4e4:	60e3      	str	r3, [r4, #12]
 801b4e6:	e7d9      	b.n	801b49c <_scanf_float+0x36c>
 801b4e8:	9b04      	ldr	r3, [sp, #16]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d0e4      	beq.n	801b4b8 <_scanf_float+0x388>
 801b4ee:	9905      	ldr	r1, [sp, #20]
 801b4f0:	230a      	movs	r3, #10
 801b4f2:	3101      	adds	r1, #1
 801b4f4:	4640      	mov	r0, r8
 801b4f6:	f7ff f9b7 	bl	801a868 <_strtol_r>
 801b4fa:	9b04      	ldr	r3, [sp, #16]
 801b4fc:	9e05      	ldr	r6, [sp, #20]
 801b4fe:	1ac2      	subs	r2, r0, r3
 801b500:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b504:	429e      	cmp	r6, r3
 801b506:	bf28      	it	cs
 801b508:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b50c:	4910      	ldr	r1, [pc, #64]	@ (801b550 <_scanf_float+0x420>)
 801b50e:	4630      	mov	r0, r6
 801b510:	f000 f918 	bl	801b744 <siprintf>
 801b514:	e7d0      	b.n	801b4b8 <_scanf_float+0x388>
 801b516:	f011 0f04 	tst.w	r1, #4
 801b51a:	9903      	ldr	r1, [sp, #12]
 801b51c:	600a      	str	r2, [r1, #0]
 801b51e:	d1dc      	bne.n	801b4da <_scanf_float+0x3aa>
 801b520:	681d      	ldr	r5, [r3, #0]
 801b522:	4632      	mov	r2, r6
 801b524:	463b      	mov	r3, r7
 801b526:	4630      	mov	r0, r6
 801b528:	4639      	mov	r1, r7
 801b52a:	f7e5 fad7 	bl	8000adc <__aeabi_dcmpun>
 801b52e:	b128      	cbz	r0, 801b53c <_scanf_float+0x40c>
 801b530:	4808      	ldr	r0, [pc, #32]	@ (801b554 <_scanf_float+0x424>)
 801b532:	f000 fa9d 	bl	801ba70 <nanf>
 801b536:	ed85 0a00 	vstr	s0, [r5]
 801b53a:	e7d1      	b.n	801b4e0 <_scanf_float+0x3b0>
 801b53c:	4630      	mov	r0, r6
 801b53e:	4639      	mov	r1, r7
 801b540:	f7e5 fb2a 	bl	8000b98 <__aeabi_d2f>
 801b544:	6028      	str	r0, [r5, #0]
 801b546:	e7cb      	b.n	801b4e0 <_scanf_float+0x3b0>
 801b548:	f04f 0900 	mov.w	r9, #0
 801b54c:	e629      	b.n	801b1a2 <_scanf_float+0x72>
 801b54e:	bf00      	nop
 801b550:	080220b5 	.word	0x080220b5
 801b554:	0802216e 	.word	0x0802216e

0801b558 <std>:
 801b558:	2300      	movs	r3, #0
 801b55a:	b510      	push	{r4, lr}
 801b55c:	4604      	mov	r4, r0
 801b55e:	e9c0 3300 	strd	r3, r3, [r0]
 801b562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b566:	6083      	str	r3, [r0, #8]
 801b568:	8181      	strh	r1, [r0, #12]
 801b56a:	6643      	str	r3, [r0, #100]	@ 0x64
 801b56c:	81c2      	strh	r2, [r0, #14]
 801b56e:	6183      	str	r3, [r0, #24]
 801b570:	4619      	mov	r1, r3
 801b572:	2208      	movs	r2, #8
 801b574:	305c      	adds	r0, #92	@ 0x5c
 801b576:	f000 f948 	bl	801b80a <memset>
 801b57a:	4b0d      	ldr	r3, [pc, #52]	@ (801b5b0 <std+0x58>)
 801b57c:	6263      	str	r3, [r4, #36]	@ 0x24
 801b57e:	4b0d      	ldr	r3, [pc, #52]	@ (801b5b4 <std+0x5c>)
 801b580:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b582:	4b0d      	ldr	r3, [pc, #52]	@ (801b5b8 <std+0x60>)
 801b584:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b586:	4b0d      	ldr	r3, [pc, #52]	@ (801b5bc <std+0x64>)
 801b588:	6323      	str	r3, [r4, #48]	@ 0x30
 801b58a:	4b0d      	ldr	r3, [pc, #52]	@ (801b5c0 <std+0x68>)
 801b58c:	6224      	str	r4, [r4, #32]
 801b58e:	429c      	cmp	r4, r3
 801b590:	d006      	beq.n	801b5a0 <std+0x48>
 801b592:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b596:	4294      	cmp	r4, r2
 801b598:	d002      	beq.n	801b5a0 <std+0x48>
 801b59a:	33d0      	adds	r3, #208	@ 0xd0
 801b59c:	429c      	cmp	r4, r3
 801b59e:	d105      	bne.n	801b5ac <std+0x54>
 801b5a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5a8:	f000 ba40 	b.w	801ba2c <__retarget_lock_init_recursive>
 801b5ac:	bd10      	pop	{r4, pc}
 801b5ae:	bf00      	nop
 801b5b0:	0801b785 	.word	0x0801b785
 801b5b4:	0801b7a7 	.word	0x0801b7a7
 801b5b8:	0801b7df 	.word	0x0801b7df
 801b5bc:	0801b803 	.word	0x0801b803
 801b5c0:	200030b0 	.word	0x200030b0

0801b5c4 <stdio_exit_handler>:
 801b5c4:	4a02      	ldr	r2, [pc, #8]	@ (801b5d0 <stdio_exit_handler+0xc>)
 801b5c6:	4903      	ldr	r1, [pc, #12]	@ (801b5d4 <stdio_exit_handler+0x10>)
 801b5c8:	4803      	ldr	r0, [pc, #12]	@ (801b5d8 <stdio_exit_handler+0x14>)
 801b5ca:	f000 b869 	b.w	801b6a0 <_fwalk_sglue>
 801b5ce:	bf00      	nop
 801b5d0:	20000144 	.word	0x20000144
 801b5d4:	0801de35 	.word	0x0801de35
 801b5d8:	200002c0 	.word	0x200002c0

0801b5dc <cleanup_stdio>:
 801b5dc:	6841      	ldr	r1, [r0, #4]
 801b5de:	4b0c      	ldr	r3, [pc, #48]	@ (801b610 <cleanup_stdio+0x34>)
 801b5e0:	4299      	cmp	r1, r3
 801b5e2:	b510      	push	{r4, lr}
 801b5e4:	4604      	mov	r4, r0
 801b5e6:	d001      	beq.n	801b5ec <cleanup_stdio+0x10>
 801b5e8:	f002 fc24 	bl	801de34 <_fflush_r>
 801b5ec:	68a1      	ldr	r1, [r4, #8]
 801b5ee:	4b09      	ldr	r3, [pc, #36]	@ (801b614 <cleanup_stdio+0x38>)
 801b5f0:	4299      	cmp	r1, r3
 801b5f2:	d002      	beq.n	801b5fa <cleanup_stdio+0x1e>
 801b5f4:	4620      	mov	r0, r4
 801b5f6:	f002 fc1d 	bl	801de34 <_fflush_r>
 801b5fa:	68e1      	ldr	r1, [r4, #12]
 801b5fc:	4b06      	ldr	r3, [pc, #24]	@ (801b618 <cleanup_stdio+0x3c>)
 801b5fe:	4299      	cmp	r1, r3
 801b600:	d004      	beq.n	801b60c <cleanup_stdio+0x30>
 801b602:	4620      	mov	r0, r4
 801b604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b608:	f002 bc14 	b.w	801de34 <_fflush_r>
 801b60c:	bd10      	pop	{r4, pc}
 801b60e:	bf00      	nop
 801b610:	200030b0 	.word	0x200030b0
 801b614:	20003118 	.word	0x20003118
 801b618:	20003180 	.word	0x20003180

0801b61c <global_stdio_init.part.0>:
 801b61c:	b510      	push	{r4, lr}
 801b61e:	4b0b      	ldr	r3, [pc, #44]	@ (801b64c <global_stdio_init.part.0+0x30>)
 801b620:	4c0b      	ldr	r4, [pc, #44]	@ (801b650 <global_stdio_init.part.0+0x34>)
 801b622:	4a0c      	ldr	r2, [pc, #48]	@ (801b654 <global_stdio_init.part.0+0x38>)
 801b624:	601a      	str	r2, [r3, #0]
 801b626:	4620      	mov	r0, r4
 801b628:	2200      	movs	r2, #0
 801b62a:	2104      	movs	r1, #4
 801b62c:	f7ff ff94 	bl	801b558 <std>
 801b630:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b634:	2201      	movs	r2, #1
 801b636:	2109      	movs	r1, #9
 801b638:	f7ff ff8e 	bl	801b558 <std>
 801b63c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b640:	2202      	movs	r2, #2
 801b642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b646:	2112      	movs	r1, #18
 801b648:	f7ff bf86 	b.w	801b558 <std>
 801b64c:	200031e8 	.word	0x200031e8
 801b650:	200030b0 	.word	0x200030b0
 801b654:	0801b5c5 	.word	0x0801b5c5

0801b658 <__sfp_lock_acquire>:
 801b658:	4801      	ldr	r0, [pc, #4]	@ (801b660 <__sfp_lock_acquire+0x8>)
 801b65a:	f000 b9e8 	b.w	801ba2e <__retarget_lock_acquire_recursive>
 801b65e:	bf00      	nop
 801b660:	200031f1 	.word	0x200031f1

0801b664 <__sfp_lock_release>:
 801b664:	4801      	ldr	r0, [pc, #4]	@ (801b66c <__sfp_lock_release+0x8>)
 801b666:	f000 b9e3 	b.w	801ba30 <__retarget_lock_release_recursive>
 801b66a:	bf00      	nop
 801b66c:	200031f1 	.word	0x200031f1

0801b670 <__sinit>:
 801b670:	b510      	push	{r4, lr}
 801b672:	4604      	mov	r4, r0
 801b674:	f7ff fff0 	bl	801b658 <__sfp_lock_acquire>
 801b678:	6a23      	ldr	r3, [r4, #32]
 801b67a:	b11b      	cbz	r3, 801b684 <__sinit+0x14>
 801b67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b680:	f7ff bff0 	b.w	801b664 <__sfp_lock_release>
 801b684:	4b04      	ldr	r3, [pc, #16]	@ (801b698 <__sinit+0x28>)
 801b686:	6223      	str	r3, [r4, #32]
 801b688:	4b04      	ldr	r3, [pc, #16]	@ (801b69c <__sinit+0x2c>)
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d1f5      	bne.n	801b67c <__sinit+0xc>
 801b690:	f7ff ffc4 	bl	801b61c <global_stdio_init.part.0>
 801b694:	e7f2      	b.n	801b67c <__sinit+0xc>
 801b696:	bf00      	nop
 801b698:	0801b5dd 	.word	0x0801b5dd
 801b69c:	200031e8 	.word	0x200031e8

0801b6a0 <_fwalk_sglue>:
 801b6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6a4:	4607      	mov	r7, r0
 801b6a6:	4688      	mov	r8, r1
 801b6a8:	4614      	mov	r4, r2
 801b6aa:	2600      	movs	r6, #0
 801b6ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b6b0:	f1b9 0901 	subs.w	r9, r9, #1
 801b6b4:	d505      	bpl.n	801b6c2 <_fwalk_sglue+0x22>
 801b6b6:	6824      	ldr	r4, [r4, #0]
 801b6b8:	2c00      	cmp	r4, #0
 801b6ba:	d1f7      	bne.n	801b6ac <_fwalk_sglue+0xc>
 801b6bc:	4630      	mov	r0, r6
 801b6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6c2:	89ab      	ldrh	r3, [r5, #12]
 801b6c4:	2b01      	cmp	r3, #1
 801b6c6:	d907      	bls.n	801b6d8 <_fwalk_sglue+0x38>
 801b6c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b6cc:	3301      	adds	r3, #1
 801b6ce:	d003      	beq.n	801b6d8 <_fwalk_sglue+0x38>
 801b6d0:	4629      	mov	r1, r5
 801b6d2:	4638      	mov	r0, r7
 801b6d4:	47c0      	blx	r8
 801b6d6:	4306      	orrs	r6, r0
 801b6d8:	3568      	adds	r5, #104	@ 0x68
 801b6da:	e7e9      	b.n	801b6b0 <_fwalk_sglue+0x10>

0801b6dc <sniprintf>:
 801b6dc:	b40c      	push	{r2, r3}
 801b6de:	b530      	push	{r4, r5, lr}
 801b6e0:	4b17      	ldr	r3, [pc, #92]	@ (801b740 <sniprintf+0x64>)
 801b6e2:	1e0c      	subs	r4, r1, #0
 801b6e4:	681d      	ldr	r5, [r3, #0]
 801b6e6:	b09d      	sub	sp, #116	@ 0x74
 801b6e8:	da08      	bge.n	801b6fc <sniprintf+0x20>
 801b6ea:	238b      	movs	r3, #139	@ 0x8b
 801b6ec:	602b      	str	r3, [r5, #0]
 801b6ee:	f04f 30ff 	mov.w	r0, #4294967295
 801b6f2:	b01d      	add	sp, #116	@ 0x74
 801b6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b6f8:	b002      	add	sp, #8
 801b6fa:	4770      	bx	lr
 801b6fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b700:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b704:	bf14      	ite	ne
 801b706:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b70a:	4623      	moveq	r3, r4
 801b70c:	9304      	str	r3, [sp, #16]
 801b70e:	9307      	str	r3, [sp, #28]
 801b710:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b714:	9002      	str	r0, [sp, #8]
 801b716:	9006      	str	r0, [sp, #24]
 801b718:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b71c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b71e:	ab21      	add	r3, sp, #132	@ 0x84
 801b720:	a902      	add	r1, sp, #8
 801b722:	4628      	mov	r0, r5
 801b724:	9301      	str	r3, [sp, #4]
 801b726:	f002 f8c3 	bl	801d8b0 <_svfiprintf_r>
 801b72a:	1c43      	adds	r3, r0, #1
 801b72c:	bfbc      	itt	lt
 801b72e:	238b      	movlt	r3, #139	@ 0x8b
 801b730:	602b      	strlt	r3, [r5, #0]
 801b732:	2c00      	cmp	r4, #0
 801b734:	d0dd      	beq.n	801b6f2 <sniprintf+0x16>
 801b736:	9b02      	ldr	r3, [sp, #8]
 801b738:	2200      	movs	r2, #0
 801b73a:	701a      	strb	r2, [r3, #0]
 801b73c:	e7d9      	b.n	801b6f2 <sniprintf+0x16>
 801b73e:	bf00      	nop
 801b740:	200002bc 	.word	0x200002bc

0801b744 <siprintf>:
 801b744:	b40e      	push	{r1, r2, r3}
 801b746:	b500      	push	{lr}
 801b748:	b09c      	sub	sp, #112	@ 0x70
 801b74a:	ab1d      	add	r3, sp, #116	@ 0x74
 801b74c:	9002      	str	r0, [sp, #8]
 801b74e:	9006      	str	r0, [sp, #24]
 801b750:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b754:	4809      	ldr	r0, [pc, #36]	@ (801b77c <siprintf+0x38>)
 801b756:	9107      	str	r1, [sp, #28]
 801b758:	9104      	str	r1, [sp, #16]
 801b75a:	4909      	ldr	r1, [pc, #36]	@ (801b780 <siprintf+0x3c>)
 801b75c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b760:	9105      	str	r1, [sp, #20]
 801b762:	6800      	ldr	r0, [r0, #0]
 801b764:	9301      	str	r3, [sp, #4]
 801b766:	a902      	add	r1, sp, #8
 801b768:	f002 f8a2 	bl	801d8b0 <_svfiprintf_r>
 801b76c:	9b02      	ldr	r3, [sp, #8]
 801b76e:	2200      	movs	r2, #0
 801b770:	701a      	strb	r2, [r3, #0]
 801b772:	b01c      	add	sp, #112	@ 0x70
 801b774:	f85d eb04 	ldr.w	lr, [sp], #4
 801b778:	b003      	add	sp, #12
 801b77a:	4770      	bx	lr
 801b77c:	200002bc 	.word	0x200002bc
 801b780:	ffff0208 	.word	0xffff0208

0801b784 <__sread>:
 801b784:	b510      	push	{r4, lr}
 801b786:	460c      	mov	r4, r1
 801b788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b78c:	f000 f8f0 	bl	801b970 <_read_r>
 801b790:	2800      	cmp	r0, #0
 801b792:	bfab      	itete	ge
 801b794:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b796:	89a3      	ldrhlt	r3, [r4, #12]
 801b798:	181b      	addge	r3, r3, r0
 801b79a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b79e:	bfac      	ite	ge
 801b7a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b7a2:	81a3      	strhlt	r3, [r4, #12]
 801b7a4:	bd10      	pop	{r4, pc}

0801b7a6 <__swrite>:
 801b7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7aa:	461f      	mov	r7, r3
 801b7ac:	898b      	ldrh	r3, [r1, #12]
 801b7ae:	05db      	lsls	r3, r3, #23
 801b7b0:	4605      	mov	r5, r0
 801b7b2:	460c      	mov	r4, r1
 801b7b4:	4616      	mov	r6, r2
 801b7b6:	d505      	bpl.n	801b7c4 <__swrite+0x1e>
 801b7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7bc:	2302      	movs	r3, #2
 801b7be:	2200      	movs	r2, #0
 801b7c0:	f000 f8c4 	bl	801b94c <_lseek_r>
 801b7c4:	89a3      	ldrh	r3, [r4, #12]
 801b7c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b7ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b7ce:	81a3      	strh	r3, [r4, #12]
 801b7d0:	4632      	mov	r2, r6
 801b7d2:	463b      	mov	r3, r7
 801b7d4:	4628      	mov	r0, r5
 801b7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7da:	f000 b8eb 	b.w	801b9b4 <_write_r>

0801b7de <__sseek>:
 801b7de:	b510      	push	{r4, lr}
 801b7e0:	460c      	mov	r4, r1
 801b7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7e6:	f000 f8b1 	bl	801b94c <_lseek_r>
 801b7ea:	1c43      	adds	r3, r0, #1
 801b7ec:	89a3      	ldrh	r3, [r4, #12]
 801b7ee:	bf15      	itete	ne
 801b7f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b7f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b7f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b7fa:	81a3      	strheq	r3, [r4, #12]
 801b7fc:	bf18      	it	ne
 801b7fe:	81a3      	strhne	r3, [r4, #12]
 801b800:	bd10      	pop	{r4, pc}

0801b802 <__sclose>:
 801b802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b806:	f000 b891 	b.w	801b92c <_close_r>

0801b80a <memset>:
 801b80a:	4402      	add	r2, r0
 801b80c:	4603      	mov	r3, r0
 801b80e:	4293      	cmp	r3, r2
 801b810:	d100      	bne.n	801b814 <memset+0xa>
 801b812:	4770      	bx	lr
 801b814:	f803 1b01 	strb.w	r1, [r3], #1
 801b818:	e7f9      	b.n	801b80e <memset+0x4>

0801b81a <strncmp>:
 801b81a:	b510      	push	{r4, lr}
 801b81c:	b16a      	cbz	r2, 801b83a <strncmp+0x20>
 801b81e:	3901      	subs	r1, #1
 801b820:	1884      	adds	r4, r0, r2
 801b822:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b826:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b82a:	429a      	cmp	r2, r3
 801b82c:	d103      	bne.n	801b836 <strncmp+0x1c>
 801b82e:	42a0      	cmp	r0, r4
 801b830:	d001      	beq.n	801b836 <strncmp+0x1c>
 801b832:	2a00      	cmp	r2, #0
 801b834:	d1f5      	bne.n	801b822 <strncmp+0x8>
 801b836:	1ad0      	subs	r0, r2, r3
 801b838:	bd10      	pop	{r4, pc}
 801b83a:	4610      	mov	r0, r2
 801b83c:	e7fc      	b.n	801b838 <strncmp+0x1e>
	...

0801b840 <strtok>:
 801b840:	4b16      	ldr	r3, [pc, #88]	@ (801b89c <strtok+0x5c>)
 801b842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b846:	681f      	ldr	r7, [r3, #0]
 801b848:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b84a:	4605      	mov	r5, r0
 801b84c:	460e      	mov	r6, r1
 801b84e:	b9ec      	cbnz	r4, 801b88c <strtok+0x4c>
 801b850:	2050      	movs	r0, #80	@ 0x50
 801b852:	f7fe f863 	bl	801991c <malloc>
 801b856:	4602      	mov	r2, r0
 801b858:	6478      	str	r0, [r7, #68]	@ 0x44
 801b85a:	b920      	cbnz	r0, 801b866 <strtok+0x26>
 801b85c:	4b10      	ldr	r3, [pc, #64]	@ (801b8a0 <strtok+0x60>)
 801b85e:	4811      	ldr	r0, [pc, #68]	@ (801b8a4 <strtok+0x64>)
 801b860:	215b      	movs	r1, #91	@ 0x5b
 801b862:	f000 f90b 	bl	801ba7c <__assert_func>
 801b866:	e9c0 4400 	strd	r4, r4, [r0]
 801b86a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b86e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b872:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b876:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b87a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b87e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b882:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b886:	6184      	str	r4, [r0, #24]
 801b888:	7704      	strb	r4, [r0, #28]
 801b88a:	6244      	str	r4, [r0, #36]	@ 0x24
 801b88c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b88e:	4631      	mov	r1, r6
 801b890:	4628      	mov	r0, r5
 801b892:	2301      	movs	r3, #1
 801b894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b898:	f000 b806 	b.w	801b8a8 <__strtok_r>
 801b89c:	200002bc 	.word	0x200002bc
 801b8a0:	080220ba 	.word	0x080220ba
 801b8a4:	080220d1 	.word	0x080220d1

0801b8a8 <__strtok_r>:
 801b8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8aa:	4604      	mov	r4, r0
 801b8ac:	b908      	cbnz	r0, 801b8b2 <__strtok_r+0xa>
 801b8ae:	6814      	ldr	r4, [r2, #0]
 801b8b0:	b144      	cbz	r4, 801b8c4 <__strtok_r+0x1c>
 801b8b2:	4620      	mov	r0, r4
 801b8b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b8b8:	460f      	mov	r7, r1
 801b8ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b8be:	b91e      	cbnz	r6, 801b8c8 <__strtok_r+0x20>
 801b8c0:	b965      	cbnz	r5, 801b8dc <__strtok_r+0x34>
 801b8c2:	6015      	str	r5, [r2, #0]
 801b8c4:	2000      	movs	r0, #0
 801b8c6:	e005      	b.n	801b8d4 <__strtok_r+0x2c>
 801b8c8:	42b5      	cmp	r5, r6
 801b8ca:	d1f6      	bne.n	801b8ba <__strtok_r+0x12>
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d1f0      	bne.n	801b8b2 <__strtok_r+0xa>
 801b8d0:	6014      	str	r4, [r2, #0]
 801b8d2:	7003      	strb	r3, [r0, #0]
 801b8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8d6:	461c      	mov	r4, r3
 801b8d8:	e00c      	b.n	801b8f4 <__strtok_r+0x4c>
 801b8da:	b915      	cbnz	r5, 801b8e2 <__strtok_r+0x3a>
 801b8dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b8e0:	460e      	mov	r6, r1
 801b8e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b8e6:	42ab      	cmp	r3, r5
 801b8e8:	d1f7      	bne.n	801b8da <__strtok_r+0x32>
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	d0f3      	beq.n	801b8d6 <__strtok_r+0x2e>
 801b8ee:	2300      	movs	r3, #0
 801b8f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b8f4:	6014      	str	r4, [r2, #0]
 801b8f6:	e7ed      	b.n	801b8d4 <__strtok_r+0x2c>

0801b8f8 <strstr>:
 801b8f8:	780a      	ldrb	r2, [r1, #0]
 801b8fa:	b570      	push	{r4, r5, r6, lr}
 801b8fc:	b96a      	cbnz	r2, 801b91a <strstr+0x22>
 801b8fe:	bd70      	pop	{r4, r5, r6, pc}
 801b900:	429a      	cmp	r2, r3
 801b902:	d109      	bne.n	801b918 <strstr+0x20>
 801b904:	460c      	mov	r4, r1
 801b906:	4605      	mov	r5, r0
 801b908:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d0f6      	beq.n	801b8fe <strstr+0x6>
 801b910:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b914:	429e      	cmp	r6, r3
 801b916:	d0f7      	beq.n	801b908 <strstr+0x10>
 801b918:	3001      	adds	r0, #1
 801b91a:	7803      	ldrb	r3, [r0, #0]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d1ef      	bne.n	801b900 <strstr+0x8>
 801b920:	4618      	mov	r0, r3
 801b922:	e7ec      	b.n	801b8fe <strstr+0x6>

0801b924 <_localeconv_r>:
 801b924:	4800      	ldr	r0, [pc, #0]	@ (801b928 <_localeconv_r+0x4>)
 801b926:	4770      	bx	lr
 801b928:	20000240 	.word	0x20000240

0801b92c <_close_r>:
 801b92c:	b538      	push	{r3, r4, r5, lr}
 801b92e:	4d06      	ldr	r5, [pc, #24]	@ (801b948 <_close_r+0x1c>)
 801b930:	2300      	movs	r3, #0
 801b932:	4604      	mov	r4, r0
 801b934:	4608      	mov	r0, r1
 801b936:	602b      	str	r3, [r5, #0]
 801b938:	f7ea ff98 	bl	800686c <_close>
 801b93c:	1c43      	adds	r3, r0, #1
 801b93e:	d102      	bne.n	801b946 <_close_r+0x1a>
 801b940:	682b      	ldr	r3, [r5, #0]
 801b942:	b103      	cbz	r3, 801b946 <_close_r+0x1a>
 801b944:	6023      	str	r3, [r4, #0]
 801b946:	bd38      	pop	{r3, r4, r5, pc}
 801b948:	200031ec 	.word	0x200031ec

0801b94c <_lseek_r>:
 801b94c:	b538      	push	{r3, r4, r5, lr}
 801b94e:	4d07      	ldr	r5, [pc, #28]	@ (801b96c <_lseek_r+0x20>)
 801b950:	4604      	mov	r4, r0
 801b952:	4608      	mov	r0, r1
 801b954:	4611      	mov	r1, r2
 801b956:	2200      	movs	r2, #0
 801b958:	602a      	str	r2, [r5, #0]
 801b95a:	461a      	mov	r2, r3
 801b95c:	f7ea ffad 	bl	80068ba <_lseek>
 801b960:	1c43      	adds	r3, r0, #1
 801b962:	d102      	bne.n	801b96a <_lseek_r+0x1e>
 801b964:	682b      	ldr	r3, [r5, #0]
 801b966:	b103      	cbz	r3, 801b96a <_lseek_r+0x1e>
 801b968:	6023      	str	r3, [r4, #0]
 801b96a:	bd38      	pop	{r3, r4, r5, pc}
 801b96c:	200031ec 	.word	0x200031ec

0801b970 <_read_r>:
 801b970:	b538      	push	{r3, r4, r5, lr}
 801b972:	4d07      	ldr	r5, [pc, #28]	@ (801b990 <_read_r+0x20>)
 801b974:	4604      	mov	r4, r0
 801b976:	4608      	mov	r0, r1
 801b978:	4611      	mov	r1, r2
 801b97a:	2200      	movs	r2, #0
 801b97c:	602a      	str	r2, [r5, #0]
 801b97e:	461a      	mov	r2, r3
 801b980:	f7ea ff3b 	bl	80067fa <_read>
 801b984:	1c43      	adds	r3, r0, #1
 801b986:	d102      	bne.n	801b98e <_read_r+0x1e>
 801b988:	682b      	ldr	r3, [r5, #0]
 801b98a:	b103      	cbz	r3, 801b98e <_read_r+0x1e>
 801b98c:	6023      	str	r3, [r4, #0]
 801b98e:	bd38      	pop	{r3, r4, r5, pc}
 801b990:	200031ec 	.word	0x200031ec

0801b994 <_sbrk_r>:
 801b994:	b538      	push	{r3, r4, r5, lr}
 801b996:	4d06      	ldr	r5, [pc, #24]	@ (801b9b0 <_sbrk_r+0x1c>)
 801b998:	2300      	movs	r3, #0
 801b99a:	4604      	mov	r4, r0
 801b99c:	4608      	mov	r0, r1
 801b99e:	602b      	str	r3, [r5, #0]
 801b9a0:	f7ea ff98 	bl	80068d4 <_sbrk>
 801b9a4:	1c43      	adds	r3, r0, #1
 801b9a6:	d102      	bne.n	801b9ae <_sbrk_r+0x1a>
 801b9a8:	682b      	ldr	r3, [r5, #0]
 801b9aa:	b103      	cbz	r3, 801b9ae <_sbrk_r+0x1a>
 801b9ac:	6023      	str	r3, [r4, #0]
 801b9ae:	bd38      	pop	{r3, r4, r5, pc}
 801b9b0:	200031ec 	.word	0x200031ec

0801b9b4 <_write_r>:
 801b9b4:	b538      	push	{r3, r4, r5, lr}
 801b9b6:	4d07      	ldr	r5, [pc, #28]	@ (801b9d4 <_write_r+0x20>)
 801b9b8:	4604      	mov	r4, r0
 801b9ba:	4608      	mov	r0, r1
 801b9bc:	4611      	mov	r1, r2
 801b9be:	2200      	movs	r2, #0
 801b9c0:	602a      	str	r2, [r5, #0]
 801b9c2:	461a      	mov	r2, r3
 801b9c4:	f7ea ff36 	bl	8006834 <_write>
 801b9c8:	1c43      	adds	r3, r0, #1
 801b9ca:	d102      	bne.n	801b9d2 <_write_r+0x1e>
 801b9cc:	682b      	ldr	r3, [r5, #0]
 801b9ce:	b103      	cbz	r3, 801b9d2 <_write_r+0x1e>
 801b9d0:	6023      	str	r3, [r4, #0]
 801b9d2:	bd38      	pop	{r3, r4, r5, pc}
 801b9d4:	200031ec 	.word	0x200031ec

0801b9d8 <__errno>:
 801b9d8:	4b01      	ldr	r3, [pc, #4]	@ (801b9e0 <__errno+0x8>)
 801b9da:	6818      	ldr	r0, [r3, #0]
 801b9dc:	4770      	bx	lr
 801b9de:	bf00      	nop
 801b9e0:	200002bc 	.word	0x200002bc

0801b9e4 <__libc_init_array>:
 801b9e4:	b570      	push	{r4, r5, r6, lr}
 801b9e6:	4d0d      	ldr	r5, [pc, #52]	@ (801ba1c <__libc_init_array+0x38>)
 801b9e8:	4c0d      	ldr	r4, [pc, #52]	@ (801ba20 <__libc_init_array+0x3c>)
 801b9ea:	1b64      	subs	r4, r4, r5
 801b9ec:	10a4      	asrs	r4, r4, #2
 801b9ee:	2600      	movs	r6, #0
 801b9f0:	42a6      	cmp	r6, r4
 801b9f2:	d109      	bne.n	801ba08 <__libc_init_array+0x24>
 801b9f4:	4d0b      	ldr	r5, [pc, #44]	@ (801ba24 <__libc_init_array+0x40>)
 801b9f6:	4c0c      	ldr	r4, [pc, #48]	@ (801ba28 <__libc_init_array+0x44>)
 801b9f8:	f004 f99a 	bl	801fd30 <_init>
 801b9fc:	1b64      	subs	r4, r4, r5
 801b9fe:	10a4      	asrs	r4, r4, #2
 801ba00:	2600      	movs	r6, #0
 801ba02:	42a6      	cmp	r6, r4
 801ba04:	d105      	bne.n	801ba12 <__libc_init_array+0x2e>
 801ba06:	bd70      	pop	{r4, r5, r6, pc}
 801ba08:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba0c:	4798      	blx	r3
 801ba0e:	3601      	adds	r6, #1
 801ba10:	e7ee      	b.n	801b9f0 <__libc_init_array+0xc>
 801ba12:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba16:	4798      	blx	r3
 801ba18:	3601      	adds	r6, #1
 801ba1a:	e7f2      	b.n	801ba02 <__libc_init_array+0x1e>
 801ba1c:	080225b0 	.word	0x080225b0
 801ba20:	080225b0 	.word	0x080225b0
 801ba24:	080225b0 	.word	0x080225b0
 801ba28:	080225b4 	.word	0x080225b4

0801ba2c <__retarget_lock_init_recursive>:
 801ba2c:	4770      	bx	lr

0801ba2e <__retarget_lock_acquire_recursive>:
 801ba2e:	4770      	bx	lr

0801ba30 <__retarget_lock_release_recursive>:
 801ba30:	4770      	bx	lr

0801ba32 <strcpy>:
 801ba32:	4603      	mov	r3, r0
 801ba34:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba38:	f803 2b01 	strb.w	r2, [r3], #1
 801ba3c:	2a00      	cmp	r2, #0
 801ba3e:	d1f9      	bne.n	801ba34 <strcpy+0x2>
 801ba40:	4770      	bx	lr

0801ba42 <memcpy>:
 801ba42:	440a      	add	r2, r1
 801ba44:	4291      	cmp	r1, r2
 801ba46:	f100 33ff 	add.w	r3, r0, #4294967295
 801ba4a:	d100      	bne.n	801ba4e <memcpy+0xc>
 801ba4c:	4770      	bx	lr
 801ba4e:	b510      	push	{r4, lr}
 801ba50:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba54:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba58:	4291      	cmp	r1, r2
 801ba5a:	d1f9      	bne.n	801ba50 <memcpy+0xe>
 801ba5c:	bd10      	pop	{r4, pc}
	...

0801ba60 <nan>:
 801ba60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ba68 <nan+0x8>
 801ba64:	4770      	bx	lr
 801ba66:	bf00      	nop
 801ba68:	00000000 	.word	0x00000000
 801ba6c:	7ff80000 	.word	0x7ff80000

0801ba70 <nanf>:
 801ba70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ba78 <nanf+0x8>
 801ba74:	4770      	bx	lr
 801ba76:	bf00      	nop
 801ba78:	7fc00000 	.word	0x7fc00000

0801ba7c <__assert_func>:
 801ba7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ba7e:	4614      	mov	r4, r2
 801ba80:	461a      	mov	r2, r3
 801ba82:	4b09      	ldr	r3, [pc, #36]	@ (801baa8 <__assert_func+0x2c>)
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	4605      	mov	r5, r0
 801ba88:	68d8      	ldr	r0, [r3, #12]
 801ba8a:	b954      	cbnz	r4, 801baa2 <__assert_func+0x26>
 801ba8c:	4b07      	ldr	r3, [pc, #28]	@ (801baac <__assert_func+0x30>)
 801ba8e:	461c      	mov	r4, r3
 801ba90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ba94:	9100      	str	r1, [sp, #0]
 801ba96:	462b      	mov	r3, r5
 801ba98:	4905      	ldr	r1, [pc, #20]	@ (801bab0 <__assert_func+0x34>)
 801ba9a:	f002 f9f3 	bl	801de84 <fiprintf>
 801ba9e:	f002 fab1 	bl	801e004 <abort>
 801baa2:	4b04      	ldr	r3, [pc, #16]	@ (801bab4 <__assert_func+0x38>)
 801baa4:	e7f4      	b.n	801ba90 <__assert_func+0x14>
 801baa6:	bf00      	nop
 801baa8:	200002bc 	.word	0x200002bc
 801baac:	0802216e 	.word	0x0802216e
 801bab0:	08022140 	.word	0x08022140
 801bab4:	08022133 	.word	0x08022133

0801bab8 <quorem>:
 801bab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801babc:	6903      	ldr	r3, [r0, #16]
 801babe:	690c      	ldr	r4, [r1, #16]
 801bac0:	42a3      	cmp	r3, r4
 801bac2:	4607      	mov	r7, r0
 801bac4:	db7e      	blt.n	801bbc4 <quorem+0x10c>
 801bac6:	3c01      	subs	r4, #1
 801bac8:	f101 0814 	add.w	r8, r1, #20
 801bacc:	00a3      	lsls	r3, r4, #2
 801bace:	f100 0514 	add.w	r5, r0, #20
 801bad2:	9300      	str	r3, [sp, #0]
 801bad4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bad8:	9301      	str	r3, [sp, #4]
 801bada:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bae2:	3301      	adds	r3, #1
 801bae4:	429a      	cmp	r2, r3
 801bae6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801baea:	fbb2 f6f3 	udiv	r6, r2, r3
 801baee:	d32e      	bcc.n	801bb4e <quorem+0x96>
 801baf0:	f04f 0a00 	mov.w	sl, #0
 801baf4:	46c4      	mov	ip, r8
 801baf6:	46ae      	mov	lr, r5
 801baf8:	46d3      	mov	fp, sl
 801bafa:	f85c 3b04 	ldr.w	r3, [ip], #4
 801bafe:	b298      	uxth	r0, r3
 801bb00:	fb06 a000 	mla	r0, r6, r0, sl
 801bb04:	0c02      	lsrs	r2, r0, #16
 801bb06:	0c1b      	lsrs	r3, r3, #16
 801bb08:	fb06 2303 	mla	r3, r6, r3, r2
 801bb0c:	f8de 2000 	ldr.w	r2, [lr]
 801bb10:	b280      	uxth	r0, r0
 801bb12:	b292      	uxth	r2, r2
 801bb14:	1a12      	subs	r2, r2, r0
 801bb16:	445a      	add	r2, fp
 801bb18:	f8de 0000 	ldr.w	r0, [lr]
 801bb1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bb20:	b29b      	uxth	r3, r3
 801bb22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801bb26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801bb2a:	b292      	uxth	r2, r2
 801bb2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801bb30:	45e1      	cmp	r9, ip
 801bb32:	f84e 2b04 	str.w	r2, [lr], #4
 801bb36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801bb3a:	d2de      	bcs.n	801bafa <quorem+0x42>
 801bb3c:	9b00      	ldr	r3, [sp, #0]
 801bb3e:	58eb      	ldr	r3, [r5, r3]
 801bb40:	b92b      	cbnz	r3, 801bb4e <quorem+0x96>
 801bb42:	9b01      	ldr	r3, [sp, #4]
 801bb44:	3b04      	subs	r3, #4
 801bb46:	429d      	cmp	r5, r3
 801bb48:	461a      	mov	r2, r3
 801bb4a:	d32f      	bcc.n	801bbac <quorem+0xf4>
 801bb4c:	613c      	str	r4, [r7, #16]
 801bb4e:	4638      	mov	r0, r7
 801bb50:	f001 fc58 	bl	801d404 <__mcmp>
 801bb54:	2800      	cmp	r0, #0
 801bb56:	db25      	blt.n	801bba4 <quorem+0xec>
 801bb58:	4629      	mov	r1, r5
 801bb5a:	2000      	movs	r0, #0
 801bb5c:	f858 2b04 	ldr.w	r2, [r8], #4
 801bb60:	f8d1 c000 	ldr.w	ip, [r1]
 801bb64:	fa1f fe82 	uxth.w	lr, r2
 801bb68:	fa1f f38c 	uxth.w	r3, ip
 801bb6c:	eba3 030e 	sub.w	r3, r3, lr
 801bb70:	4403      	add	r3, r0
 801bb72:	0c12      	lsrs	r2, r2, #16
 801bb74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801bb78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801bb7c:	b29b      	uxth	r3, r3
 801bb7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bb82:	45c1      	cmp	r9, r8
 801bb84:	f841 3b04 	str.w	r3, [r1], #4
 801bb88:	ea4f 4022 	mov.w	r0, r2, asr #16
 801bb8c:	d2e6      	bcs.n	801bb5c <quorem+0xa4>
 801bb8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bb92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bb96:	b922      	cbnz	r2, 801bba2 <quorem+0xea>
 801bb98:	3b04      	subs	r3, #4
 801bb9a:	429d      	cmp	r5, r3
 801bb9c:	461a      	mov	r2, r3
 801bb9e:	d30b      	bcc.n	801bbb8 <quorem+0x100>
 801bba0:	613c      	str	r4, [r7, #16]
 801bba2:	3601      	adds	r6, #1
 801bba4:	4630      	mov	r0, r6
 801bba6:	b003      	add	sp, #12
 801bba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbac:	6812      	ldr	r2, [r2, #0]
 801bbae:	3b04      	subs	r3, #4
 801bbb0:	2a00      	cmp	r2, #0
 801bbb2:	d1cb      	bne.n	801bb4c <quorem+0x94>
 801bbb4:	3c01      	subs	r4, #1
 801bbb6:	e7c6      	b.n	801bb46 <quorem+0x8e>
 801bbb8:	6812      	ldr	r2, [r2, #0]
 801bbba:	3b04      	subs	r3, #4
 801bbbc:	2a00      	cmp	r2, #0
 801bbbe:	d1ef      	bne.n	801bba0 <quorem+0xe8>
 801bbc0:	3c01      	subs	r4, #1
 801bbc2:	e7ea      	b.n	801bb9a <quorem+0xe2>
 801bbc4:	2000      	movs	r0, #0
 801bbc6:	e7ee      	b.n	801bba6 <quorem+0xee>

0801bbc8 <_dtoa_r>:
 801bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbcc:	69c7      	ldr	r7, [r0, #28]
 801bbce:	b099      	sub	sp, #100	@ 0x64
 801bbd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801bbd4:	ec55 4b10 	vmov	r4, r5, d0
 801bbd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801bbda:	9109      	str	r1, [sp, #36]	@ 0x24
 801bbdc:	4683      	mov	fp, r0
 801bbde:	920e      	str	r2, [sp, #56]	@ 0x38
 801bbe0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bbe2:	b97f      	cbnz	r7, 801bc04 <_dtoa_r+0x3c>
 801bbe4:	2010      	movs	r0, #16
 801bbe6:	f7fd fe99 	bl	801991c <malloc>
 801bbea:	4602      	mov	r2, r0
 801bbec:	f8cb 001c 	str.w	r0, [fp, #28]
 801bbf0:	b920      	cbnz	r0, 801bbfc <_dtoa_r+0x34>
 801bbf2:	4ba7      	ldr	r3, [pc, #668]	@ (801be90 <_dtoa_r+0x2c8>)
 801bbf4:	21ef      	movs	r1, #239	@ 0xef
 801bbf6:	48a7      	ldr	r0, [pc, #668]	@ (801be94 <_dtoa_r+0x2cc>)
 801bbf8:	f7ff ff40 	bl	801ba7c <__assert_func>
 801bbfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801bc00:	6007      	str	r7, [r0, #0]
 801bc02:	60c7      	str	r7, [r0, #12]
 801bc04:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bc08:	6819      	ldr	r1, [r3, #0]
 801bc0a:	b159      	cbz	r1, 801bc24 <_dtoa_r+0x5c>
 801bc0c:	685a      	ldr	r2, [r3, #4]
 801bc0e:	604a      	str	r2, [r1, #4]
 801bc10:	2301      	movs	r3, #1
 801bc12:	4093      	lsls	r3, r2
 801bc14:	608b      	str	r3, [r1, #8]
 801bc16:	4658      	mov	r0, fp
 801bc18:	f001 f970 	bl	801cefc <_Bfree>
 801bc1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bc20:	2200      	movs	r2, #0
 801bc22:	601a      	str	r2, [r3, #0]
 801bc24:	1e2b      	subs	r3, r5, #0
 801bc26:	bfb9      	ittee	lt
 801bc28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801bc2c:	9303      	strlt	r3, [sp, #12]
 801bc2e:	2300      	movge	r3, #0
 801bc30:	6033      	strge	r3, [r6, #0]
 801bc32:	9f03      	ldr	r7, [sp, #12]
 801bc34:	4b98      	ldr	r3, [pc, #608]	@ (801be98 <_dtoa_r+0x2d0>)
 801bc36:	bfbc      	itt	lt
 801bc38:	2201      	movlt	r2, #1
 801bc3a:	6032      	strlt	r2, [r6, #0]
 801bc3c:	43bb      	bics	r3, r7
 801bc3e:	d112      	bne.n	801bc66 <_dtoa_r+0x9e>
 801bc40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bc42:	f242 730f 	movw	r3, #9999	@ 0x270f
 801bc46:	6013      	str	r3, [r2, #0]
 801bc48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bc4c:	4323      	orrs	r3, r4
 801bc4e:	f000 854d 	beq.w	801c6ec <_dtoa_r+0xb24>
 801bc52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bc54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801beac <_dtoa_r+0x2e4>
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	f000 854f 	beq.w	801c6fc <_dtoa_r+0xb34>
 801bc5e:	f10a 0303 	add.w	r3, sl, #3
 801bc62:	f000 bd49 	b.w	801c6f8 <_dtoa_r+0xb30>
 801bc66:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	ec51 0b17 	vmov	r0, r1, d7
 801bc70:	2300      	movs	r3, #0
 801bc72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801bc76:	f7e4 feff 	bl	8000a78 <__aeabi_dcmpeq>
 801bc7a:	4680      	mov	r8, r0
 801bc7c:	b158      	cbz	r0, 801bc96 <_dtoa_r+0xce>
 801bc7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bc80:	2301      	movs	r3, #1
 801bc82:	6013      	str	r3, [r2, #0]
 801bc84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bc86:	b113      	cbz	r3, 801bc8e <_dtoa_r+0xc6>
 801bc88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801bc8a:	4b84      	ldr	r3, [pc, #528]	@ (801be9c <_dtoa_r+0x2d4>)
 801bc8c:	6013      	str	r3, [r2, #0]
 801bc8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801beb0 <_dtoa_r+0x2e8>
 801bc92:	f000 bd33 	b.w	801c6fc <_dtoa_r+0xb34>
 801bc96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801bc9a:	aa16      	add	r2, sp, #88	@ 0x58
 801bc9c:	a917      	add	r1, sp, #92	@ 0x5c
 801bc9e:	4658      	mov	r0, fp
 801bca0:	f001 fcd0 	bl	801d644 <__d2b>
 801bca4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801bca8:	4681      	mov	r9, r0
 801bcaa:	2e00      	cmp	r6, #0
 801bcac:	d077      	beq.n	801bd9e <_dtoa_r+0x1d6>
 801bcae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bcb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801bcb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bcb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bcbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801bcc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801bcc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801bcc8:	4619      	mov	r1, r3
 801bcca:	2200      	movs	r2, #0
 801bccc:	4b74      	ldr	r3, [pc, #464]	@ (801bea0 <_dtoa_r+0x2d8>)
 801bcce:	f7e4 fab3 	bl	8000238 <__aeabi_dsub>
 801bcd2:	a369      	add	r3, pc, #420	@ (adr r3, 801be78 <_dtoa_r+0x2b0>)
 801bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd8:	f7e4 fc66 	bl	80005a8 <__aeabi_dmul>
 801bcdc:	a368      	add	r3, pc, #416	@ (adr r3, 801be80 <_dtoa_r+0x2b8>)
 801bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bce2:	f7e4 faab 	bl	800023c <__adddf3>
 801bce6:	4604      	mov	r4, r0
 801bce8:	4630      	mov	r0, r6
 801bcea:	460d      	mov	r5, r1
 801bcec:	f7e4 fbf2 	bl	80004d4 <__aeabi_i2d>
 801bcf0:	a365      	add	r3, pc, #404	@ (adr r3, 801be88 <_dtoa_r+0x2c0>)
 801bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf6:	f7e4 fc57 	bl	80005a8 <__aeabi_dmul>
 801bcfa:	4602      	mov	r2, r0
 801bcfc:	460b      	mov	r3, r1
 801bcfe:	4620      	mov	r0, r4
 801bd00:	4629      	mov	r1, r5
 801bd02:	f7e4 fa9b 	bl	800023c <__adddf3>
 801bd06:	4604      	mov	r4, r0
 801bd08:	460d      	mov	r5, r1
 801bd0a:	f7e4 fefd 	bl	8000b08 <__aeabi_d2iz>
 801bd0e:	2200      	movs	r2, #0
 801bd10:	4607      	mov	r7, r0
 801bd12:	2300      	movs	r3, #0
 801bd14:	4620      	mov	r0, r4
 801bd16:	4629      	mov	r1, r5
 801bd18:	f7e4 feb8 	bl	8000a8c <__aeabi_dcmplt>
 801bd1c:	b140      	cbz	r0, 801bd30 <_dtoa_r+0x168>
 801bd1e:	4638      	mov	r0, r7
 801bd20:	f7e4 fbd8 	bl	80004d4 <__aeabi_i2d>
 801bd24:	4622      	mov	r2, r4
 801bd26:	462b      	mov	r3, r5
 801bd28:	f7e4 fea6 	bl	8000a78 <__aeabi_dcmpeq>
 801bd2c:	b900      	cbnz	r0, 801bd30 <_dtoa_r+0x168>
 801bd2e:	3f01      	subs	r7, #1
 801bd30:	2f16      	cmp	r7, #22
 801bd32:	d851      	bhi.n	801bdd8 <_dtoa_r+0x210>
 801bd34:	4b5b      	ldr	r3, [pc, #364]	@ (801bea4 <_dtoa_r+0x2dc>)
 801bd36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bd42:	f7e4 fea3 	bl	8000a8c <__aeabi_dcmplt>
 801bd46:	2800      	cmp	r0, #0
 801bd48:	d048      	beq.n	801bddc <_dtoa_r+0x214>
 801bd4a:	3f01      	subs	r7, #1
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	9312      	str	r3, [sp, #72]	@ 0x48
 801bd50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bd52:	1b9b      	subs	r3, r3, r6
 801bd54:	1e5a      	subs	r2, r3, #1
 801bd56:	bf44      	itt	mi
 801bd58:	f1c3 0801 	rsbmi	r8, r3, #1
 801bd5c:	2300      	movmi	r3, #0
 801bd5e:	9208      	str	r2, [sp, #32]
 801bd60:	bf54      	ite	pl
 801bd62:	f04f 0800 	movpl.w	r8, #0
 801bd66:	9308      	strmi	r3, [sp, #32]
 801bd68:	2f00      	cmp	r7, #0
 801bd6a:	db39      	blt.n	801bde0 <_dtoa_r+0x218>
 801bd6c:	9b08      	ldr	r3, [sp, #32]
 801bd6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801bd70:	443b      	add	r3, r7
 801bd72:	9308      	str	r3, [sp, #32]
 801bd74:	2300      	movs	r3, #0
 801bd76:	930a      	str	r3, [sp, #40]	@ 0x28
 801bd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd7a:	2b09      	cmp	r3, #9
 801bd7c:	d864      	bhi.n	801be48 <_dtoa_r+0x280>
 801bd7e:	2b05      	cmp	r3, #5
 801bd80:	bfc4      	itt	gt
 801bd82:	3b04      	subgt	r3, #4
 801bd84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801bd86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd88:	f1a3 0302 	sub.w	r3, r3, #2
 801bd8c:	bfcc      	ite	gt
 801bd8e:	2400      	movgt	r4, #0
 801bd90:	2401      	movle	r4, #1
 801bd92:	2b03      	cmp	r3, #3
 801bd94:	d863      	bhi.n	801be5e <_dtoa_r+0x296>
 801bd96:	e8df f003 	tbb	[pc, r3]
 801bd9a:	372a      	.short	0x372a
 801bd9c:	5535      	.short	0x5535
 801bd9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801bda2:	441e      	add	r6, r3
 801bda4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801bda8:	2b20      	cmp	r3, #32
 801bdaa:	bfc1      	itttt	gt
 801bdac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801bdb0:	409f      	lslgt	r7, r3
 801bdb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801bdb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801bdba:	bfd6      	itet	le
 801bdbc:	f1c3 0320 	rsble	r3, r3, #32
 801bdc0:	ea47 0003 	orrgt.w	r0, r7, r3
 801bdc4:	fa04 f003 	lslle.w	r0, r4, r3
 801bdc8:	f7e4 fb74 	bl	80004b4 <__aeabi_ui2d>
 801bdcc:	2201      	movs	r2, #1
 801bdce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801bdd2:	3e01      	subs	r6, #1
 801bdd4:	9214      	str	r2, [sp, #80]	@ 0x50
 801bdd6:	e777      	b.n	801bcc8 <_dtoa_r+0x100>
 801bdd8:	2301      	movs	r3, #1
 801bdda:	e7b8      	b.n	801bd4e <_dtoa_r+0x186>
 801bddc:	9012      	str	r0, [sp, #72]	@ 0x48
 801bdde:	e7b7      	b.n	801bd50 <_dtoa_r+0x188>
 801bde0:	427b      	negs	r3, r7
 801bde2:	930a      	str	r3, [sp, #40]	@ 0x28
 801bde4:	2300      	movs	r3, #0
 801bde6:	eba8 0807 	sub.w	r8, r8, r7
 801bdea:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bdec:	e7c4      	b.n	801bd78 <_dtoa_r+0x1b0>
 801bdee:	2300      	movs	r3, #0
 801bdf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bdf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	dc35      	bgt.n	801be64 <_dtoa_r+0x29c>
 801bdf8:	2301      	movs	r3, #1
 801bdfa:	9300      	str	r3, [sp, #0]
 801bdfc:	9307      	str	r3, [sp, #28]
 801bdfe:	461a      	mov	r2, r3
 801be00:	920e      	str	r2, [sp, #56]	@ 0x38
 801be02:	e00b      	b.n	801be1c <_dtoa_r+0x254>
 801be04:	2301      	movs	r3, #1
 801be06:	e7f3      	b.n	801bdf0 <_dtoa_r+0x228>
 801be08:	2300      	movs	r3, #0
 801be0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801be0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801be0e:	18fb      	adds	r3, r7, r3
 801be10:	9300      	str	r3, [sp, #0]
 801be12:	3301      	adds	r3, #1
 801be14:	2b01      	cmp	r3, #1
 801be16:	9307      	str	r3, [sp, #28]
 801be18:	bfb8      	it	lt
 801be1a:	2301      	movlt	r3, #1
 801be1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801be20:	2100      	movs	r1, #0
 801be22:	2204      	movs	r2, #4
 801be24:	f102 0514 	add.w	r5, r2, #20
 801be28:	429d      	cmp	r5, r3
 801be2a:	d91f      	bls.n	801be6c <_dtoa_r+0x2a4>
 801be2c:	6041      	str	r1, [r0, #4]
 801be2e:	4658      	mov	r0, fp
 801be30:	f001 f824 	bl	801ce7c <_Balloc>
 801be34:	4682      	mov	sl, r0
 801be36:	2800      	cmp	r0, #0
 801be38:	d13c      	bne.n	801beb4 <_dtoa_r+0x2ec>
 801be3a:	4b1b      	ldr	r3, [pc, #108]	@ (801bea8 <_dtoa_r+0x2e0>)
 801be3c:	4602      	mov	r2, r0
 801be3e:	f240 11af 	movw	r1, #431	@ 0x1af
 801be42:	e6d8      	b.n	801bbf6 <_dtoa_r+0x2e>
 801be44:	2301      	movs	r3, #1
 801be46:	e7e0      	b.n	801be0a <_dtoa_r+0x242>
 801be48:	2401      	movs	r4, #1
 801be4a:	2300      	movs	r3, #0
 801be4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801be4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801be50:	f04f 33ff 	mov.w	r3, #4294967295
 801be54:	9300      	str	r3, [sp, #0]
 801be56:	9307      	str	r3, [sp, #28]
 801be58:	2200      	movs	r2, #0
 801be5a:	2312      	movs	r3, #18
 801be5c:	e7d0      	b.n	801be00 <_dtoa_r+0x238>
 801be5e:	2301      	movs	r3, #1
 801be60:	930b      	str	r3, [sp, #44]	@ 0x2c
 801be62:	e7f5      	b.n	801be50 <_dtoa_r+0x288>
 801be64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801be66:	9300      	str	r3, [sp, #0]
 801be68:	9307      	str	r3, [sp, #28]
 801be6a:	e7d7      	b.n	801be1c <_dtoa_r+0x254>
 801be6c:	3101      	adds	r1, #1
 801be6e:	0052      	lsls	r2, r2, #1
 801be70:	e7d8      	b.n	801be24 <_dtoa_r+0x25c>
 801be72:	bf00      	nop
 801be74:	f3af 8000 	nop.w
 801be78:	636f4361 	.word	0x636f4361
 801be7c:	3fd287a7 	.word	0x3fd287a7
 801be80:	8b60c8b3 	.word	0x8b60c8b3
 801be84:	3fc68a28 	.word	0x3fc68a28
 801be88:	509f79fb 	.word	0x509f79fb
 801be8c:	3fd34413 	.word	0x3fd34413
 801be90:	080220ba 	.word	0x080220ba
 801be94:	0802217c 	.word	0x0802217c
 801be98:	7ff00000 	.word	0x7ff00000
 801be9c:	08022092 	.word	0x08022092
 801bea0:	3ff80000 	.word	0x3ff80000
 801bea4:	080222d8 	.word	0x080222d8
 801bea8:	080221d4 	.word	0x080221d4
 801beac:	08022178 	.word	0x08022178
 801beb0:	08022091 	.word	0x08022091
 801beb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801beb8:	6018      	str	r0, [r3, #0]
 801beba:	9b07      	ldr	r3, [sp, #28]
 801bebc:	2b0e      	cmp	r3, #14
 801bebe:	f200 80a4 	bhi.w	801c00a <_dtoa_r+0x442>
 801bec2:	2c00      	cmp	r4, #0
 801bec4:	f000 80a1 	beq.w	801c00a <_dtoa_r+0x442>
 801bec8:	2f00      	cmp	r7, #0
 801beca:	dd33      	ble.n	801bf34 <_dtoa_r+0x36c>
 801becc:	4bad      	ldr	r3, [pc, #692]	@ (801c184 <_dtoa_r+0x5bc>)
 801bece:	f007 020f 	and.w	r2, r7, #15
 801bed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bed6:	ed93 7b00 	vldr	d7, [r3]
 801beda:	05f8      	lsls	r0, r7, #23
 801bedc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801bee0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801bee4:	d516      	bpl.n	801bf14 <_dtoa_r+0x34c>
 801bee6:	4ba8      	ldr	r3, [pc, #672]	@ (801c188 <_dtoa_r+0x5c0>)
 801bee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801beec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bef0:	f7e4 fc84 	bl	80007fc <__aeabi_ddiv>
 801bef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bef8:	f004 040f 	and.w	r4, r4, #15
 801befc:	2603      	movs	r6, #3
 801befe:	4da2      	ldr	r5, [pc, #648]	@ (801c188 <_dtoa_r+0x5c0>)
 801bf00:	b954      	cbnz	r4, 801bf18 <_dtoa_r+0x350>
 801bf02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bf06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf0a:	f7e4 fc77 	bl	80007fc <__aeabi_ddiv>
 801bf0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf12:	e028      	b.n	801bf66 <_dtoa_r+0x39e>
 801bf14:	2602      	movs	r6, #2
 801bf16:	e7f2      	b.n	801befe <_dtoa_r+0x336>
 801bf18:	07e1      	lsls	r1, r4, #31
 801bf1a:	d508      	bpl.n	801bf2e <_dtoa_r+0x366>
 801bf1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bf20:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bf24:	f7e4 fb40 	bl	80005a8 <__aeabi_dmul>
 801bf28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bf2c:	3601      	adds	r6, #1
 801bf2e:	1064      	asrs	r4, r4, #1
 801bf30:	3508      	adds	r5, #8
 801bf32:	e7e5      	b.n	801bf00 <_dtoa_r+0x338>
 801bf34:	f000 80d2 	beq.w	801c0dc <_dtoa_r+0x514>
 801bf38:	427c      	negs	r4, r7
 801bf3a:	4b92      	ldr	r3, [pc, #584]	@ (801c184 <_dtoa_r+0x5bc>)
 801bf3c:	4d92      	ldr	r5, [pc, #584]	@ (801c188 <_dtoa_r+0x5c0>)
 801bf3e:	f004 020f 	and.w	r2, r4, #15
 801bf42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bf4e:	f7e4 fb2b 	bl	80005a8 <__aeabi_dmul>
 801bf52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf56:	1124      	asrs	r4, r4, #4
 801bf58:	2300      	movs	r3, #0
 801bf5a:	2602      	movs	r6, #2
 801bf5c:	2c00      	cmp	r4, #0
 801bf5e:	f040 80b2 	bne.w	801c0c6 <_dtoa_r+0x4fe>
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d1d3      	bne.n	801bf0e <_dtoa_r+0x346>
 801bf66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bf68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	f000 80b7 	beq.w	801c0e0 <_dtoa_r+0x518>
 801bf72:	4b86      	ldr	r3, [pc, #536]	@ (801c18c <_dtoa_r+0x5c4>)
 801bf74:	2200      	movs	r2, #0
 801bf76:	4620      	mov	r0, r4
 801bf78:	4629      	mov	r1, r5
 801bf7a:	f7e4 fd87 	bl	8000a8c <__aeabi_dcmplt>
 801bf7e:	2800      	cmp	r0, #0
 801bf80:	f000 80ae 	beq.w	801c0e0 <_dtoa_r+0x518>
 801bf84:	9b07      	ldr	r3, [sp, #28]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	f000 80aa 	beq.w	801c0e0 <_dtoa_r+0x518>
 801bf8c:	9b00      	ldr	r3, [sp, #0]
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	dd37      	ble.n	801c002 <_dtoa_r+0x43a>
 801bf92:	1e7b      	subs	r3, r7, #1
 801bf94:	9304      	str	r3, [sp, #16]
 801bf96:	4620      	mov	r0, r4
 801bf98:	4b7d      	ldr	r3, [pc, #500]	@ (801c190 <_dtoa_r+0x5c8>)
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	4629      	mov	r1, r5
 801bf9e:	f7e4 fb03 	bl	80005a8 <__aeabi_dmul>
 801bfa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bfa6:	9c00      	ldr	r4, [sp, #0]
 801bfa8:	3601      	adds	r6, #1
 801bfaa:	4630      	mov	r0, r6
 801bfac:	f7e4 fa92 	bl	80004d4 <__aeabi_i2d>
 801bfb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bfb4:	f7e4 faf8 	bl	80005a8 <__aeabi_dmul>
 801bfb8:	4b76      	ldr	r3, [pc, #472]	@ (801c194 <_dtoa_r+0x5cc>)
 801bfba:	2200      	movs	r2, #0
 801bfbc:	f7e4 f93e 	bl	800023c <__adddf3>
 801bfc0:	4605      	mov	r5, r0
 801bfc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bfc6:	2c00      	cmp	r4, #0
 801bfc8:	f040 808d 	bne.w	801c0e6 <_dtoa_r+0x51e>
 801bfcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bfd0:	4b71      	ldr	r3, [pc, #452]	@ (801c198 <_dtoa_r+0x5d0>)
 801bfd2:	2200      	movs	r2, #0
 801bfd4:	f7e4 f930 	bl	8000238 <__aeabi_dsub>
 801bfd8:	4602      	mov	r2, r0
 801bfda:	460b      	mov	r3, r1
 801bfdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bfe0:	462a      	mov	r2, r5
 801bfe2:	4633      	mov	r3, r6
 801bfe4:	f7e4 fd70 	bl	8000ac8 <__aeabi_dcmpgt>
 801bfe8:	2800      	cmp	r0, #0
 801bfea:	f040 828b 	bne.w	801c504 <_dtoa_r+0x93c>
 801bfee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bff2:	462a      	mov	r2, r5
 801bff4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801bff8:	f7e4 fd48 	bl	8000a8c <__aeabi_dcmplt>
 801bffc:	2800      	cmp	r0, #0
 801bffe:	f040 8128 	bne.w	801c252 <_dtoa_r+0x68a>
 801c002:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801c006:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801c00a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	f2c0 815a 	blt.w	801c2c6 <_dtoa_r+0x6fe>
 801c012:	2f0e      	cmp	r7, #14
 801c014:	f300 8157 	bgt.w	801c2c6 <_dtoa_r+0x6fe>
 801c018:	4b5a      	ldr	r3, [pc, #360]	@ (801c184 <_dtoa_r+0x5bc>)
 801c01a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c01e:	ed93 7b00 	vldr	d7, [r3]
 801c022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c024:	2b00      	cmp	r3, #0
 801c026:	ed8d 7b00 	vstr	d7, [sp]
 801c02a:	da03      	bge.n	801c034 <_dtoa_r+0x46c>
 801c02c:	9b07      	ldr	r3, [sp, #28]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	f340 8101 	ble.w	801c236 <_dtoa_r+0x66e>
 801c034:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801c038:	4656      	mov	r6, sl
 801c03a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c03e:	4620      	mov	r0, r4
 801c040:	4629      	mov	r1, r5
 801c042:	f7e4 fbdb 	bl	80007fc <__aeabi_ddiv>
 801c046:	f7e4 fd5f 	bl	8000b08 <__aeabi_d2iz>
 801c04a:	4680      	mov	r8, r0
 801c04c:	f7e4 fa42 	bl	80004d4 <__aeabi_i2d>
 801c050:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c054:	f7e4 faa8 	bl	80005a8 <__aeabi_dmul>
 801c058:	4602      	mov	r2, r0
 801c05a:	460b      	mov	r3, r1
 801c05c:	4620      	mov	r0, r4
 801c05e:	4629      	mov	r1, r5
 801c060:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801c064:	f7e4 f8e8 	bl	8000238 <__aeabi_dsub>
 801c068:	f806 4b01 	strb.w	r4, [r6], #1
 801c06c:	9d07      	ldr	r5, [sp, #28]
 801c06e:	eba6 040a 	sub.w	r4, r6, sl
 801c072:	42a5      	cmp	r5, r4
 801c074:	4602      	mov	r2, r0
 801c076:	460b      	mov	r3, r1
 801c078:	f040 8117 	bne.w	801c2aa <_dtoa_r+0x6e2>
 801c07c:	f7e4 f8de 	bl	800023c <__adddf3>
 801c080:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c084:	4604      	mov	r4, r0
 801c086:	460d      	mov	r5, r1
 801c088:	f7e4 fd1e 	bl	8000ac8 <__aeabi_dcmpgt>
 801c08c:	2800      	cmp	r0, #0
 801c08e:	f040 80f9 	bne.w	801c284 <_dtoa_r+0x6bc>
 801c092:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c096:	4620      	mov	r0, r4
 801c098:	4629      	mov	r1, r5
 801c09a:	f7e4 fced 	bl	8000a78 <__aeabi_dcmpeq>
 801c09e:	b118      	cbz	r0, 801c0a8 <_dtoa_r+0x4e0>
 801c0a0:	f018 0f01 	tst.w	r8, #1
 801c0a4:	f040 80ee 	bne.w	801c284 <_dtoa_r+0x6bc>
 801c0a8:	4649      	mov	r1, r9
 801c0aa:	4658      	mov	r0, fp
 801c0ac:	f000 ff26 	bl	801cefc <_Bfree>
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	7033      	strb	r3, [r6, #0]
 801c0b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c0b6:	3701      	adds	r7, #1
 801c0b8:	601f      	str	r7, [r3, #0]
 801c0ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	f000 831d 	beq.w	801c6fc <_dtoa_r+0xb34>
 801c0c2:	601e      	str	r6, [r3, #0]
 801c0c4:	e31a      	b.n	801c6fc <_dtoa_r+0xb34>
 801c0c6:	07e2      	lsls	r2, r4, #31
 801c0c8:	d505      	bpl.n	801c0d6 <_dtoa_r+0x50e>
 801c0ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c0ce:	f7e4 fa6b 	bl	80005a8 <__aeabi_dmul>
 801c0d2:	3601      	adds	r6, #1
 801c0d4:	2301      	movs	r3, #1
 801c0d6:	1064      	asrs	r4, r4, #1
 801c0d8:	3508      	adds	r5, #8
 801c0da:	e73f      	b.n	801bf5c <_dtoa_r+0x394>
 801c0dc:	2602      	movs	r6, #2
 801c0de:	e742      	b.n	801bf66 <_dtoa_r+0x39e>
 801c0e0:	9c07      	ldr	r4, [sp, #28]
 801c0e2:	9704      	str	r7, [sp, #16]
 801c0e4:	e761      	b.n	801bfaa <_dtoa_r+0x3e2>
 801c0e6:	4b27      	ldr	r3, [pc, #156]	@ (801c184 <_dtoa_r+0x5bc>)
 801c0e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c0ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c0ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c0f2:	4454      	add	r4, sl
 801c0f4:	2900      	cmp	r1, #0
 801c0f6:	d053      	beq.n	801c1a0 <_dtoa_r+0x5d8>
 801c0f8:	4928      	ldr	r1, [pc, #160]	@ (801c19c <_dtoa_r+0x5d4>)
 801c0fa:	2000      	movs	r0, #0
 801c0fc:	f7e4 fb7e 	bl	80007fc <__aeabi_ddiv>
 801c100:	4633      	mov	r3, r6
 801c102:	462a      	mov	r2, r5
 801c104:	f7e4 f898 	bl	8000238 <__aeabi_dsub>
 801c108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c10c:	4656      	mov	r6, sl
 801c10e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c112:	f7e4 fcf9 	bl	8000b08 <__aeabi_d2iz>
 801c116:	4605      	mov	r5, r0
 801c118:	f7e4 f9dc 	bl	80004d4 <__aeabi_i2d>
 801c11c:	4602      	mov	r2, r0
 801c11e:	460b      	mov	r3, r1
 801c120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c124:	f7e4 f888 	bl	8000238 <__aeabi_dsub>
 801c128:	3530      	adds	r5, #48	@ 0x30
 801c12a:	4602      	mov	r2, r0
 801c12c:	460b      	mov	r3, r1
 801c12e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c132:	f806 5b01 	strb.w	r5, [r6], #1
 801c136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c13a:	f7e4 fca7 	bl	8000a8c <__aeabi_dcmplt>
 801c13e:	2800      	cmp	r0, #0
 801c140:	d171      	bne.n	801c226 <_dtoa_r+0x65e>
 801c142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c146:	4911      	ldr	r1, [pc, #68]	@ (801c18c <_dtoa_r+0x5c4>)
 801c148:	2000      	movs	r0, #0
 801c14a:	f7e4 f875 	bl	8000238 <__aeabi_dsub>
 801c14e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c152:	f7e4 fc9b 	bl	8000a8c <__aeabi_dcmplt>
 801c156:	2800      	cmp	r0, #0
 801c158:	f040 8095 	bne.w	801c286 <_dtoa_r+0x6be>
 801c15c:	42a6      	cmp	r6, r4
 801c15e:	f43f af50 	beq.w	801c002 <_dtoa_r+0x43a>
 801c162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c166:	4b0a      	ldr	r3, [pc, #40]	@ (801c190 <_dtoa_r+0x5c8>)
 801c168:	2200      	movs	r2, #0
 801c16a:	f7e4 fa1d 	bl	80005a8 <__aeabi_dmul>
 801c16e:	4b08      	ldr	r3, [pc, #32]	@ (801c190 <_dtoa_r+0x5c8>)
 801c170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c174:	2200      	movs	r2, #0
 801c176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c17a:	f7e4 fa15 	bl	80005a8 <__aeabi_dmul>
 801c17e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c182:	e7c4      	b.n	801c10e <_dtoa_r+0x546>
 801c184:	080222d8 	.word	0x080222d8
 801c188:	080222b0 	.word	0x080222b0
 801c18c:	3ff00000 	.word	0x3ff00000
 801c190:	40240000 	.word	0x40240000
 801c194:	401c0000 	.word	0x401c0000
 801c198:	40140000 	.word	0x40140000
 801c19c:	3fe00000 	.word	0x3fe00000
 801c1a0:	4631      	mov	r1, r6
 801c1a2:	4628      	mov	r0, r5
 801c1a4:	f7e4 fa00 	bl	80005a8 <__aeabi_dmul>
 801c1a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c1ac:	9415      	str	r4, [sp, #84]	@ 0x54
 801c1ae:	4656      	mov	r6, sl
 801c1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1b4:	f7e4 fca8 	bl	8000b08 <__aeabi_d2iz>
 801c1b8:	4605      	mov	r5, r0
 801c1ba:	f7e4 f98b 	bl	80004d4 <__aeabi_i2d>
 801c1be:	4602      	mov	r2, r0
 801c1c0:	460b      	mov	r3, r1
 801c1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1c6:	f7e4 f837 	bl	8000238 <__aeabi_dsub>
 801c1ca:	3530      	adds	r5, #48	@ 0x30
 801c1cc:	f806 5b01 	strb.w	r5, [r6], #1
 801c1d0:	4602      	mov	r2, r0
 801c1d2:	460b      	mov	r3, r1
 801c1d4:	42a6      	cmp	r6, r4
 801c1d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c1da:	f04f 0200 	mov.w	r2, #0
 801c1de:	d124      	bne.n	801c22a <_dtoa_r+0x662>
 801c1e0:	4bac      	ldr	r3, [pc, #688]	@ (801c494 <_dtoa_r+0x8cc>)
 801c1e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c1e6:	f7e4 f829 	bl	800023c <__adddf3>
 801c1ea:	4602      	mov	r2, r0
 801c1ec:	460b      	mov	r3, r1
 801c1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1f2:	f7e4 fc69 	bl	8000ac8 <__aeabi_dcmpgt>
 801c1f6:	2800      	cmp	r0, #0
 801c1f8:	d145      	bne.n	801c286 <_dtoa_r+0x6be>
 801c1fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c1fe:	49a5      	ldr	r1, [pc, #660]	@ (801c494 <_dtoa_r+0x8cc>)
 801c200:	2000      	movs	r0, #0
 801c202:	f7e4 f819 	bl	8000238 <__aeabi_dsub>
 801c206:	4602      	mov	r2, r0
 801c208:	460b      	mov	r3, r1
 801c20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c20e:	f7e4 fc3d 	bl	8000a8c <__aeabi_dcmplt>
 801c212:	2800      	cmp	r0, #0
 801c214:	f43f aef5 	beq.w	801c002 <_dtoa_r+0x43a>
 801c218:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801c21a:	1e73      	subs	r3, r6, #1
 801c21c:	9315      	str	r3, [sp, #84]	@ 0x54
 801c21e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c222:	2b30      	cmp	r3, #48	@ 0x30
 801c224:	d0f8      	beq.n	801c218 <_dtoa_r+0x650>
 801c226:	9f04      	ldr	r7, [sp, #16]
 801c228:	e73e      	b.n	801c0a8 <_dtoa_r+0x4e0>
 801c22a:	4b9b      	ldr	r3, [pc, #620]	@ (801c498 <_dtoa_r+0x8d0>)
 801c22c:	f7e4 f9bc 	bl	80005a8 <__aeabi_dmul>
 801c230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c234:	e7bc      	b.n	801c1b0 <_dtoa_r+0x5e8>
 801c236:	d10c      	bne.n	801c252 <_dtoa_r+0x68a>
 801c238:	4b98      	ldr	r3, [pc, #608]	@ (801c49c <_dtoa_r+0x8d4>)
 801c23a:	2200      	movs	r2, #0
 801c23c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c240:	f7e4 f9b2 	bl	80005a8 <__aeabi_dmul>
 801c244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c248:	f7e4 fc34 	bl	8000ab4 <__aeabi_dcmpge>
 801c24c:	2800      	cmp	r0, #0
 801c24e:	f000 8157 	beq.w	801c500 <_dtoa_r+0x938>
 801c252:	2400      	movs	r4, #0
 801c254:	4625      	mov	r5, r4
 801c256:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c258:	43db      	mvns	r3, r3
 801c25a:	9304      	str	r3, [sp, #16]
 801c25c:	4656      	mov	r6, sl
 801c25e:	2700      	movs	r7, #0
 801c260:	4621      	mov	r1, r4
 801c262:	4658      	mov	r0, fp
 801c264:	f000 fe4a 	bl	801cefc <_Bfree>
 801c268:	2d00      	cmp	r5, #0
 801c26a:	d0dc      	beq.n	801c226 <_dtoa_r+0x65e>
 801c26c:	b12f      	cbz	r7, 801c27a <_dtoa_r+0x6b2>
 801c26e:	42af      	cmp	r7, r5
 801c270:	d003      	beq.n	801c27a <_dtoa_r+0x6b2>
 801c272:	4639      	mov	r1, r7
 801c274:	4658      	mov	r0, fp
 801c276:	f000 fe41 	bl	801cefc <_Bfree>
 801c27a:	4629      	mov	r1, r5
 801c27c:	4658      	mov	r0, fp
 801c27e:	f000 fe3d 	bl	801cefc <_Bfree>
 801c282:	e7d0      	b.n	801c226 <_dtoa_r+0x65e>
 801c284:	9704      	str	r7, [sp, #16]
 801c286:	4633      	mov	r3, r6
 801c288:	461e      	mov	r6, r3
 801c28a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c28e:	2a39      	cmp	r2, #57	@ 0x39
 801c290:	d107      	bne.n	801c2a2 <_dtoa_r+0x6da>
 801c292:	459a      	cmp	sl, r3
 801c294:	d1f8      	bne.n	801c288 <_dtoa_r+0x6c0>
 801c296:	9a04      	ldr	r2, [sp, #16]
 801c298:	3201      	adds	r2, #1
 801c29a:	9204      	str	r2, [sp, #16]
 801c29c:	2230      	movs	r2, #48	@ 0x30
 801c29e:	f88a 2000 	strb.w	r2, [sl]
 801c2a2:	781a      	ldrb	r2, [r3, #0]
 801c2a4:	3201      	adds	r2, #1
 801c2a6:	701a      	strb	r2, [r3, #0]
 801c2a8:	e7bd      	b.n	801c226 <_dtoa_r+0x65e>
 801c2aa:	4b7b      	ldr	r3, [pc, #492]	@ (801c498 <_dtoa_r+0x8d0>)
 801c2ac:	2200      	movs	r2, #0
 801c2ae:	f7e4 f97b 	bl	80005a8 <__aeabi_dmul>
 801c2b2:	2200      	movs	r2, #0
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	4604      	mov	r4, r0
 801c2b8:	460d      	mov	r5, r1
 801c2ba:	f7e4 fbdd 	bl	8000a78 <__aeabi_dcmpeq>
 801c2be:	2800      	cmp	r0, #0
 801c2c0:	f43f aebb 	beq.w	801c03a <_dtoa_r+0x472>
 801c2c4:	e6f0      	b.n	801c0a8 <_dtoa_r+0x4e0>
 801c2c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c2c8:	2a00      	cmp	r2, #0
 801c2ca:	f000 80db 	beq.w	801c484 <_dtoa_r+0x8bc>
 801c2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c2d0:	2a01      	cmp	r2, #1
 801c2d2:	f300 80bf 	bgt.w	801c454 <_dtoa_r+0x88c>
 801c2d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c2d8:	2a00      	cmp	r2, #0
 801c2da:	f000 80b7 	beq.w	801c44c <_dtoa_r+0x884>
 801c2de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801c2e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c2e4:	4646      	mov	r6, r8
 801c2e6:	9a08      	ldr	r2, [sp, #32]
 801c2e8:	2101      	movs	r1, #1
 801c2ea:	441a      	add	r2, r3
 801c2ec:	4658      	mov	r0, fp
 801c2ee:	4498      	add	r8, r3
 801c2f0:	9208      	str	r2, [sp, #32]
 801c2f2:	f000 ff01 	bl	801d0f8 <__i2b>
 801c2f6:	4605      	mov	r5, r0
 801c2f8:	b15e      	cbz	r6, 801c312 <_dtoa_r+0x74a>
 801c2fa:	9b08      	ldr	r3, [sp, #32]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	dd08      	ble.n	801c312 <_dtoa_r+0x74a>
 801c300:	42b3      	cmp	r3, r6
 801c302:	9a08      	ldr	r2, [sp, #32]
 801c304:	bfa8      	it	ge
 801c306:	4633      	movge	r3, r6
 801c308:	eba8 0803 	sub.w	r8, r8, r3
 801c30c:	1af6      	subs	r6, r6, r3
 801c30e:	1ad3      	subs	r3, r2, r3
 801c310:	9308      	str	r3, [sp, #32]
 801c312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c314:	b1f3      	cbz	r3, 801c354 <_dtoa_r+0x78c>
 801c316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c318:	2b00      	cmp	r3, #0
 801c31a:	f000 80b7 	beq.w	801c48c <_dtoa_r+0x8c4>
 801c31e:	b18c      	cbz	r4, 801c344 <_dtoa_r+0x77c>
 801c320:	4629      	mov	r1, r5
 801c322:	4622      	mov	r2, r4
 801c324:	4658      	mov	r0, fp
 801c326:	f000 ffa7 	bl	801d278 <__pow5mult>
 801c32a:	464a      	mov	r2, r9
 801c32c:	4601      	mov	r1, r0
 801c32e:	4605      	mov	r5, r0
 801c330:	4658      	mov	r0, fp
 801c332:	f000 fef7 	bl	801d124 <__multiply>
 801c336:	4649      	mov	r1, r9
 801c338:	9004      	str	r0, [sp, #16]
 801c33a:	4658      	mov	r0, fp
 801c33c:	f000 fdde 	bl	801cefc <_Bfree>
 801c340:	9b04      	ldr	r3, [sp, #16]
 801c342:	4699      	mov	r9, r3
 801c344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c346:	1b1a      	subs	r2, r3, r4
 801c348:	d004      	beq.n	801c354 <_dtoa_r+0x78c>
 801c34a:	4649      	mov	r1, r9
 801c34c:	4658      	mov	r0, fp
 801c34e:	f000 ff93 	bl	801d278 <__pow5mult>
 801c352:	4681      	mov	r9, r0
 801c354:	2101      	movs	r1, #1
 801c356:	4658      	mov	r0, fp
 801c358:	f000 fece 	bl	801d0f8 <__i2b>
 801c35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c35e:	4604      	mov	r4, r0
 801c360:	2b00      	cmp	r3, #0
 801c362:	f000 81cf 	beq.w	801c704 <_dtoa_r+0xb3c>
 801c366:	461a      	mov	r2, r3
 801c368:	4601      	mov	r1, r0
 801c36a:	4658      	mov	r0, fp
 801c36c:	f000 ff84 	bl	801d278 <__pow5mult>
 801c370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c372:	2b01      	cmp	r3, #1
 801c374:	4604      	mov	r4, r0
 801c376:	f300 8095 	bgt.w	801c4a4 <_dtoa_r+0x8dc>
 801c37a:	9b02      	ldr	r3, [sp, #8]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	f040 8087 	bne.w	801c490 <_dtoa_r+0x8c8>
 801c382:	9b03      	ldr	r3, [sp, #12]
 801c384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c388:	2b00      	cmp	r3, #0
 801c38a:	f040 8089 	bne.w	801c4a0 <_dtoa_r+0x8d8>
 801c38e:	9b03      	ldr	r3, [sp, #12]
 801c390:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c394:	0d1b      	lsrs	r3, r3, #20
 801c396:	051b      	lsls	r3, r3, #20
 801c398:	b12b      	cbz	r3, 801c3a6 <_dtoa_r+0x7de>
 801c39a:	9b08      	ldr	r3, [sp, #32]
 801c39c:	3301      	adds	r3, #1
 801c39e:	9308      	str	r3, [sp, #32]
 801c3a0:	f108 0801 	add.w	r8, r8, #1
 801c3a4:	2301      	movs	r3, #1
 801c3a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c3a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	f000 81b0 	beq.w	801c710 <_dtoa_r+0xb48>
 801c3b0:	6923      	ldr	r3, [r4, #16]
 801c3b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c3b6:	6918      	ldr	r0, [r3, #16]
 801c3b8:	f000 fe52 	bl	801d060 <__hi0bits>
 801c3bc:	f1c0 0020 	rsb	r0, r0, #32
 801c3c0:	9b08      	ldr	r3, [sp, #32]
 801c3c2:	4418      	add	r0, r3
 801c3c4:	f010 001f 	ands.w	r0, r0, #31
 801c3c8:	d077      	beq.n	801c4ba <_dtoa_r+0x8f2>
 801c3ca:	f1c0 0320 	rsb	r3, r0, #32
 801c3ce:	2b04      	cmp	r3, #4
 801c3d0:	dd6b      	ble.n	801c4aa <_dtoa_r+0x8e2>
 801c3d2:	9b08      	ldr	r3, [sp, #32]
 801c3d4:	f1c0 001c 	rsb	r0, r0, #28
 801c3d8:	4403      	add	r3, r0
 801c3da:	4480      	add	r8, r0
 801c3dc:	4406      	add	r6, r0
 801c3de:	9308      	str	r3, [sp, #32]
 801c3e0:	f1b8 0f00 	cmp.w	r8, #0
 801c3e4:	dd05      	ble.n	801c3f2 <_dtoa_r+0x82a>
 801c3e6:	4649      	mov	r1, r9
 801c3e8:	4642      	mov	r2, r8
 801c3ea:	4658      	mov	r0, fp
 801c3ec:	f000 ff9e 	bl	801d32c <__lshift>
 801c3f0:	4681      	mov	r9, r0
 801c3f2:	9b08      	ldr	r3, [sp, #32]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	dd05      	ble.n	801c404 <_dtoa_r+0x83c>
 801c3f8:	4621      	mov	r1, r4
 801c3fa:	461a      	mov	r2, r3
 801c3fc:	4658      	mov	r0, fp
 801c3fe:	f000 ff95 	bl	801d32c <__lshift>
 801c402:	4604      	mov	r4, r0
 801c404:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c406:	2b00      	cmp	r3, #0
 801c408:	d059      	beq.n	801c4be <_dtoa_r+0x8f6>
 801c40a:	4621      	mov	r1, r4
 801c40c:	4648      	mov	r0, r9
 801c40e:	f000 fff9 	bl	801d404 <__mcmp>
 801c412:	2800      	cmp	r0, #0
 801c414:	da53      	bge.n	801c4be <_dtoa_r+0x8f6>
 801c416:	1e7b      	subs	r3, r7, #1
 801c418:	9304      	str	r3, [sp, #16]
 801c41a:	4649      	mov	r1, r9
 801c41c:	2300      	movs	r3, #0
 801c41e:	220a      	movs	r2, #10
 801c420:	4658      	mov	r0, fp
 801c422:	f000 fd8d 	bl	801cf40 <__multadd>
 801c426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c428:	4681      	mov	r9, r0
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	f000 8172 	beq.w	801c714 <_dtoa_r+0xb4c>
 801c430:	2300      	movs	r3, #0
 801c432:	4629      	mov	r1, r5
 801c434:	220a      	movs	r2, #10
 801c436:	4658      	mov	r0, fp
 801c438:	f000 fd82 	bl	801cf40 <__multadd>
 801c43c:	9b00      	ldr	r3, [sp, #0]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	4605      	mov	r5, r0
 801c442:	dc67      	bgt.n	801c514 <_dtoa_r+0x94c>
 801c444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c446:	2b02      	cmp	r3, #2
 801c448:	dc41      	bgt.n	801c4ce <_dtoa_r+0x906>
 801c44a:	e063      	b.n	801c514 <_dtoa_r+0x94c>
 801c44c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c44e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c452:	e746      	b.n	801c2e2 <_dtoa_r+0x71a>
 801c454:	9b07      	ldr	r3, [sp, #28]
 801c456:	1e5c      	subs	r4, r3, #1
 801c458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c45a:	42a3      	cmp	r3, r4
 801c45c:	bfbf      	itttt	lt
 801c45e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801c460:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801c462:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801c464:	1ae3      	sublt	r3, r4, r3
 801c466:	bfb4      	ite	lt
 801c468:	18d2      	addlt	r2, r2, r3
 801c46a:	1b1c      	subge	r4, r3, r4
 801c46c:	9b07      	ldr	r3, [sp, #28]
 801c46e:	bfbc      	itt	lt
 801c470:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c472:	2400      	movlt	r4, #0
 801c474:	2b00      	cmp	r3, #0
 801c476:	bfb5      	itete	lt
 801c478:	eba8 0603 	sublt.w	r6, r8, r3
 801c47c:	9b07      	ldrge	r3, [sp, #28]
 801c47e:	2300      	movlt	r3, #0
 801c480:	4646      	movge	r6, r8
 801c482:	e730      	b.n	801c2e6 <_dtoa_r+0x71e>
 801c484:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c486:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c488:	4646      	mov	r6, r8
 801c48a:	e735      	b.n	801c2f8 <_dtoa_r+0x730>
 801c48c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c48e:	e75c      	b.n	801c34a <_dtoa_r+0x782>
 801c490:	2300      	movs	r3, #0
 801c492:	e788      	b.n	801c3a6 <_dtoa_r+0x7de>
 801c494:	3fe00000 	.word	0x3fe00000
 801c498:	40240000 	.word	0x40240000
 801c49c:	40140000 	.word	0x40140000
 801c4a0:	9b02      	ldr	r3, [sp, #8]
 801c4a2:	e780      	b.n	801c3a6 <_dtoa_r+0x7de>
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c4a8:	e782      	b.n	801c3b0 <_dtoa_r+0x7e8>
 801c4aa:	d099      	beq.n	801c3e0 <_dtoa_r+0x818>
 801c4ac:	9a08      	ldr	r2, [sp, #32]
 801c4ae:	331c      	adds	r3, #28
 801c4b0:	441a      	add	r2, r3
 801c4b2:	4498      	add	r8, r3
 801c4b4:	441e      	add	r6, r3
 801c4b6:	9208      	str	r2, [sp, #32]
 801c4b8:	e792      	b.n	801c3e0 <_dtoa_r+0x818>
 801c4ba:	4603      	mov	r3, r0
 801c4bc:	e7f6      	b.n	801c4ac <_dtoa_r+0x8e4>
 801c4be:	9b07      	ldr	r3, [sp, #28]
 801c4c0:	9704      	str	r7, [sp, #16]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	dc20      	bgt.n	801c508 <_dtoa_r+0x940>
 801c4c6:	9300      	str	r3, [sp, #0]
 801c4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4ca:	2b02      	cmp	r3, #2
 801c4cc:	dd1e      	ble.n	801c50c <_dtoa_r+0x944>
 801c4ce:	9b00      	ldr	r3, [sp, #0]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	f47f aec0 	bne.w	801c256 <_dtoa_r+0x68e>
 801c4d6:	4621      	mov	r1, r4
 801c4d8:	2205      	movs	r2, #5
 801c4da:	4658      	mov	r0, fp
 801c4dc:	f000 fd30 	bl	801cf40 <__multadd>
 801c4e0:	4601      	mov	r1, r0
 801c4e2:	4604      	mov	r4, r0
 801c4e4:	4648      	mov	r0, r9
 801c4e6:	f000 ff8d 	bl	801d404 <__mcmp>
 801c4ea:	2800      	cmp	r0, #0
 801c4ec:	f77f aeb3 	ble.w	801c256 <_dtoa_r+0x68e>
 801c4f0:	4656      	mov	r6, sl
 801c4f2:	2331      	movs	r3, #49	@ 0x31
 801c4f4:	f806 3b01 	strb.w	r3, [r6], #1
 801c4f8:	9b04      	ldr	r3, [sp, #16]
 801c4fa:	3301      	adds	r3, #1
 801c4fc:	9304      	str	r3, [sp, #16]
 801c4fe:	e6ae      	b.n	801c25e <_dtoa_r+0x696>
 801c500:	9c07      	ldr	r4, [sp, #28]
 801c502:	9704      	str	r7, [sp, #16]
 801c504:	4625      	mov	r5, r4
 801c506:	e7f3      	b.n	801c4f0 <_dtoa_r+0x928>
 801c508:	9b07      	ldr	r3, [sp, #28]
 801c50a:	9300      	str	r3, [sp, #0]
 801c50c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c50e:	2b00      	cmp	r3, #0
 801c510:	f000 8104 	beq.w	801c71c <_dtoa_r+0xb54>
 801c514:	2e00      	cmp	r6, #0
 801c516:	dd05      	ble.n	801c524 <_dtoa_r+0x95c>
 801c518:	4629      	mov	r1, r5
 801c51a:	4632      	mov	r2, r6
 801c51c:	4658      	mov	r0, fp
 801c51e:	f000 ff05 	bl	801d32c <__lshift>
 801c522:	4605      	mov	r5, r0
 801c524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c526:	2b00      	cmp	r3, #0
 801c528:	d05a      	beq.n	801c5e0 <_dtoa_r+0xa18>
 801c52a:	6869      	ldr	r1, [r5, #4]
 801c52c:	4658      	mov	r0, fp
 801c52e:	f000 fca5 	bl	801ce7c <_Balloc>
 801c532:	4606      	mov	r6, r0
 801c534:	b928      	cbnz	r0, 801c542 <_dtoa_r+0x97a>
 801c536:	4b84      	ldr	r3, [pc, #528]	@ (801c748 <_dtoa_r+0xb80>)
 801c538:	4602      	mov	r2, r0
 801c53a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c53e:	f7ff bb5a 	b.w	801bbf6 <_dtoa_r+0x2e>
 801c542:	692a      	ldr	r2, [r5, #16]
 801c544:	3202      	adds	r2, #2
 801c546:	0092      	lsls	r2, r2, #2
 801c548:	f105 010c 	add.w	r1, r5, #12
 801c54c:	300c      	adds	r0, #12
 801c54e:	f7ff fa78 	bl	801ba42 <memcpy>
 801c552:	2201      	movs	r2, #1
 801c554:	4631      	mov	r1, r6
 801c556:	4658      	mov	r0, fp
 801c558:	f000 fee8 	bl	801d32c <__lshift>
 801c55c:	f10a 0301 	add.w	r3, sl, #1
 801c560:	9307      	str	r3, [sp, #28]
 801c562:	9b00      	ldr	r3, [sp, #0]
 801c564:	4453      	add	r3, sl
 801c566:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c568:	9b02      	ldr	r3, [sp, #8]
 801c56a:	f003 0301 	and.w	r3, r3, #1
 801c56e:	462f      	mov	r7, r5
 801c570:	930a      	str	r3, [sp, #40]	@ 0x28
 801c572:	4605      	mov	r5, r0
 801c574:	9b07      	ldr	r3, [sp, #28]
 801c576:	4621      	mov	r1, r4
 801c578:	3b01      	subs	r3, #1
 801c57a:	4648      	mov	r0, r9
 801c57c:	9300      	str	r3, [sp, #0]
 801c57e:	f7ff fa9b 	bl	801bab8 <quorem>
 801c582:	4639      	mov	r1, r7
 801c584:	9002      	str	r0, [sp, #8]
 801c586:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c58a:	4648      	mov	r0, r9
 801c58c:	f000 ff3a 	bl	801d404 <__mcmp>
 801c590:	462a      	mov	r2, r5
 801c592:	9008      	str	r0, [sp, #32]
 801c594:	4621      	mov	r1, r4
 801c596:	4658      	mov	r0, fp
 801c598:	f000 ff50 	bl	801d43c <__mdiff>
 801c59c:	68c2      	ldr	r2, [r0, #12]
 801c59e:	4606      	mov	r6, r0
 801c5a0:	bb02      	cbnz	r2, 801c5e4 <_dtoa_r+0xa1c>
 801c5a2:	4601      	mov	r1, r0
 801c5a4:	4648      	mov	r0, r9
 801c5a6:	f000 ff2d 	bl	801d404 <__mcmp>
 801c5aa:	4602      	mov	r2, r0
 801c5ac:	4631      	mov	r1, r6
 801c5ae:	4658      	mov	r0, fp
 801c5b0:	920e      	str	r2, [sp, #56]	@ 0x38
 801c5b2:	f000 fca3 	bl	801cefc <_Bfree>
 801c5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c5ba:	9e07      	ldr	r6, [sp, #28]
 801c5bc:	ea43 0102 	orr.w	r1, r3, r2
 801c5c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c5c2:	4319      	orrs	r1, r3
 801c5c4:	d110      	bne.n	801c5e8 <_dtoa_r+0xa20>
 801c5c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c5ca:	d029      	beq.n	801c620 <_dtoa_r+0xa58>
 801c5cc:	9b08      	ldr	r3, [sp, #32]
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	dd02      	ble.n	801c5d8 <_dtoa_r+0xa10>
 801c5d2:	9b02      	ldr	r3, [sp, #8]
 801c5d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c5d8:	9b00      	ldr	r3, [sp, #0]
 801c5da:	f883 8000 	strb.w	r8, [r3]
 801c5de:	e63f      	b.n	801c260 <_dtoa_r+0x698>
 801c5e0:	4628      	mov	r0, r5
 801c5e2:	e7bb      	b.n	801c55c <_dtoa_r+0x994>
 801c5e4:	2201      	movs	r2, #1
 801c5e6:	e7e1      	b.n	801c5ac <_dtoa_r+0x9e4>
 801c5e8:	9b08      	ldr	r3, [sp, #32]
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	db04      	blt.n	801c5f8 <_dtoa_r+0xa30>
 801c5ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c5f0:	430b      	orrs	r3, r1
 801c5f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c5f4:	430b      	orrs	r3, r1
 801c5f6:	d120      	bne.n	801c63a <_dtoa_r+0xa72>
 801c5f8:	2a00      	cmp	r2, #0
 801c5fa:	dded      	ble.n	801c5d8 <_dtoa_r+0xa10>
 801c5fc:	4649      	mov	r1, r9
 801c5fe:	2201      	movs	r2, #1
 801c600:	4658      	mov	r0, fp
 801c602:	f000 fe93 	bl	801d32c <__lshift>
 801c606:	4621      	mov	r1, r4
 801c608:	4681      	mov	r9, r0
 801c60a:	f000 fefb 	bl	801d404 <__mcmp>
 801c60e:	2800      	cmp	r0, #0
 801c610:	dc03      	bgt.n	801c61a <_dtoa_r+0xa52>
 801c612:	d1e1      	bne.n	801c5d8 <_dtoa_r+0xa10>
 801c614:	f018 0f01 	tst.w	r8, #1
 801c618:	d0de      	beq.n	801c5d8 <_dtoa_r+0xa10>
 801c61a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c61e:	d1d8      	bne.n	801c5d2 <_dtoa_r+0xa0a>
 801c620:	9a00      	ldr	r2, [sp, #0]
 801c622:	2339      	movs	r3, #57	@ 0x39
 801c624:	7013      	strb	r3, [r2, #0]
 801c626:	4633      	mov	r3, r6
 801c628:	461e      	mov	r6, r3
 801c62a:	3b01      	subs	r3, #1
 801c62c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c630:	2a39      	cmp	r2, #57	@ 0x39
 801c632:	d052      	beq.n	801c6da <_dtoa_r+0xb12>
 801c634:	3201      	adds	r2, #1
 801c636:	701a      	strb	r2, [r3, #0]
 801c638:	e612      	b.n	801c260 <_dtoa_r+0x698>
 801c63a:	2a00      	cmp	r2, #0
 801c63c:	dd07      	ble.n	801c64e <_dtoa_r+0xa86>
 801c63e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c642:	d0ed      	beq.n	801c620 <_dtoa_r+0xa58>
 801c644:	9a00      	ldr	r2, [sp, #0]
 801c646:	f108 0301 	add.w	r3, r8, #1
 801c64a:	7013      	strb	r3, [r2, #0]
 801c64c:	e608      	b.n	801c260 <_dtoa_r+0x698>
 801c64e:	9b07      	ldr	r3, [sp, #28]
 801c650:	9a07      	ldr	r2, [sp, #28]
 801c652:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c658:	4293      	cmp	r3, r2
 801c65a:	d028      	beq.n	801c6ae <_dtoa_r+0xae6>
 801c65c:	4649      	mov	r1, r9
 801c65e:	2300      	movs	r3, #0
 801c660:	220a      	movs	r2, #10
 801c662:	4658      	mov	r0, fp
 801c664:	f000 fc6c 	bl	801cf40 <__multadd>
 801c668:	42af      	cmp	r7, r5
 801c66a:	4681      	mov	r9, r0
 801c66c:	f04f 0300 	mov.w	r3, #0
 801c670:	f04f 020a 	mov.w	r2, #10
 801c674:	4639      	mov	r1, r7
 801c676:	4658      	mov	r0, fp
 801c678:	d107      	bne.n	801c68a <_dtoa_r+0xac2>
 801c67a:	f000 fc61 	bl	801cf40 <__multadd>
 801c67e:	4607      	mov	r7, r0
 801c680:	4605      	mov	r5, r0
 801c682:	9b07      	ldr	r3, [sp, #28]
 801c684:	3301      	adds	r3, #1
 801c686:	9307      	str	r3, [sp, #28]
 801c688:	e774      	b.n	801c574 <_dtoa_r+0x9ac>
 801c68a:	f000 fc59 	bl	801cf40 <__multadd>
 801c68e:	4629      	mov	r1, r5
 801c690:	4607      	mov	r7, r0
 801c692:	2300      	movs	r3, #0
 801c694:	220a      	movs	r2, #10
 801c696:	4658      	mov	r0, fp
 801c698:	f000 fc52 	bl	801cf40 <__multadd>
 801c69c:	4605      	mov	r5, r0
 801c69e:	e7f0      	b.n	801c682 <_dtoa_r+0xaba>
 801c6a0:	9b00      	ldr	r3, [sp, #0]
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	bfcc      	ite	gt
 801c6a6:	461e      	movgt	r6, r3
 801c6a8:	2601      	movle	r6, #1
 801c6aa:	4456      	add	r6, sl
 801c6ac:	2700      	movs	r7, #0
 801c6ae:	4649      	mov	r1, r9
 801c6b0:	2201      	movs	r2, #1
 801c6b2:	4658      	mov	r0, fp
 801c6b4:	f000 fe3a 	bl	801d32c <__lshift>
 801c6b8:	4621      	mov	r1, r4
 801c6ba:	4681      	mov	r9, r0
 801c6bc:	f000 fea2 	bl	801d404 <__mcmp>
 801c6c0:	2800      	cmp	r0, #0
 801c6c2:	dcb0      	bgt.n	801c626 <_dtoa_r+0xa5e>
 801c6c4:	d102      	bne.n	801c6cc <_dtoa_r+0xb04>
 801c6c6:	f018 0f01 	tst.w	r8, #1
 801c6ca:	d1ac      	bne.n	801c626 <_dtoa_r+0xa5e>
 801c6cc:	4633      	mov	r3, r6
 801c6ce:	461e      	mov	r6, r3
 801c6d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c6d4:	2a30      	cmp	r2, #48	@ 0x30
 801c6d6:	d0fa      	beq.n	801c6ce <_dtoa_r+0xb06>
 801c6d8:	e5c2      	b.n	801c260 <_dtoa_r+0x698>
 801c6da:	459a      	cmp	sl, r3
 801c6dc:	d1a4      	bne.n	801c628 <_dtoa_r+0xa60>
 801c6de:	9b04      	ldr	r3, [sp, #16]
 801c6e0:	3301      	adds	r3, #1
 801c6e2:	9304      	str	r3, [sp, #16]
 801c6e4:	2331      	movs	r3, #49	@ 0x31
 801c6e6:	f88a 3000 	strb.w	r3, [sl]
 801c6ea:	e5b9      	b.n	801c260 <_dtoa_r+0x698>
 801c6ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c6ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c74c <_dtoa_r+0xb84>
 801c6f2:	b11b      	cbz	r3, 801c6fc <_dtoa_r+0xb34>
 801c6f4:	f10a 0308 	add.w	r3, sl, #8
 801c6f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c6fa:	6013      	str	r3, [r2, #0]
 801c6fc:	4650      	mov	r0, sl
 801c6fe:	b019      	add	sp, #100	@ 0x64
 801c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c706:	2b01      	cmp	r3, #1
 801c708:	f77f ae37 	ble.w	801c37a <_dtoa_r+0x7b2>
 801c70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c70e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c710:	2001      	movs	r0, #1
 801c712:	e655      	b.n	801c3c0 <_dtoa_r+0x7f8>
 801c714:	9b00      	ldr	r3, [sp, #0]
 801c716:	2b00      	cmp	r3, #0
 801c718:	f77f aed6 	ble.w	801c4c8 <_dtoa_r+0x900>
 801c71c:	4656      	mov	r6, sl
 801c71e:	4621      	mov	r1, r4
 801c720:	4648      	mov	r0, r9
 801c722:	f7ff f9c9 	bl	801bab8 <quorem>
 801c726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c72a:	f806 8b01 	strb.w	r8, [r6], #1
 801c72e:	9b00      	ldr	r3, [sp, #0]
 801c730:	eba6 020a 	sub.w	r2, r6, sl
 801c734:	4293      	cmp	r3, r2
 801c736:	ddb3      	ble.n	801c6a0 <_dtoa_r+0xad8>
 801c738:	4649      	mov	r1, r9
 801c73a:	2300      	movs	r3, #0
 801c73c:	220a      	movs	r2, #10
 801c73e:	4658      	mov	r0, fp
 801c740:	f000 fbfe 	bl	801cf40 <__multadd>
 801c744:	4681      	mov	r9, r0
 801c746:	e7ea      	b.n	801c71e <_dtoa_r+0xb56>
 801c748:	080221d4 	.word	0x080221d4
 801c74c:	0802216f 	.word	0x0802216f

0801c750 <_free_r>:
 801c750:	b538      	push	{r3, r4, r5, lr}
 801c752:	4605      	mov	r5, r0
 801c754:	2900      	cmp	r1, #0
 801c756:	d041      	beq.n	801c7dc <_free_r+0x8c>
 801c758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c75c:	1f0c      	subs	r4, r1, #4
 801c75e:	2b00      	cmp	r3, #0
 801c760:	bfb8      	it	lt
 801c762:	18e4      	addlt	r4, r4, r3
 801c764:	f7fd f98c 	bl	8019a80 <__malloc_lock>
 801c768:	4a1d      	ldr	r2, [pc, #116]	@ (801c7e0 <_free_r+0x90>)
 801c76a:	6813      	ldr	r3, [r2, #0]
 801c76c:	b933      	cbnz	r3, 801c77c <_free_r+0x2c>
 801c76e:	6063      	str	r3, [r4, #4]
 801c770:	6014      	str	r4, [r2, #0]
 801c772:	4628      	mov	r0, r5
 801c774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c778:	f7fd b988 	b.w	8019a8c <__malloc_unlock>
 801c77c:	42a3      	cmp	r3, r4
 801c77e:	d908      	bls.n	801c792 <_free_r+0x42>
 801c780:	6820      	ldr	r0, [r4, #0]
 801c782:	1821      	adds	r1, r4, r0
 801c784:	428b      	cmp	r3, r1
 801c786:	bf01      	itttt	eq
 801c788:	6819      	ldreq	r1, [r3, #0]
 801c78a:	685b      	ldreq	r3, [r3, #4]
 801c78c:	1809      	addeq	r1, r1, r0
 801c78e:	6021      	streq	r1, [r4, #0]
 801c790:	e7ed      	b.n	801c76e <_free_r+0x1e>
 801c792:	461a      	mov	r2, r3
 801c794:	685b      	ldr	r3, [r3, #4]
 801c796:	b10b      	cbz	r3, 801c79c <_free_r+0x4c>
 801c798:	42a3      	cmp	r3, r4
 801c79a:	d9fa      	bls.n	801c792 <_free_r+0x42>
 801c79c:	6811      	ldr	r1, [r2, #0]
 801c79e:	1850      	adds	r0, r2, r1
 801c7a0:	42a0      	cmp	r0, r4
 801c7a2:	d10b      	bne.n	801c7bc <_free_r+0x6c>
 801c7a4:	6820      	ldr	r0, [r4, #0]
 801c7a6:	4401      	add	r1, r0
 801c7a8:	1850      	adds	r0, r2, r1
 801c7aa:	4283      	cmp	r3, r0
 801c7ac:	6011      	str	r1, [r2, #0]
 801c7ae:	d1e0      	bne.n	801c772 <_free_r+0x22>
 801c7b0:	6818      	ldr	r0, [r3, #0]
 801c7b2:	685b      	ldr	r3, [r3, #4]
 801c7b4:	6053      	str	r3, [r2, #4]
 801c7b6:	4408      	add	r0, r1
 801c7b8:	6010      	str	r0, [r2, #0]
 801c7ba:	e7da      	b.n	801c772 <_free_r+0x22>
 801c7bc:	d902      	bls.n	801c7c4 <_free_r+0x74>
 801c7be:	230c      	movs	r3, #12
 801c7c0:	602b      	str	r3, [r5, #0]
 801c7c2:	e7d6      	b.n	801c772 <_free_r+0x22>
 801c7c4:	6820      	ldr	r0, [r4, #0]
 801c7c6:	1821      	adds	r1, r4, r0
 801c7c8:	428b      	cmp	r3, r1
 801c7ca:	bf04      	itt	eq
 801c7cc:	6819      	ldreq	r1, [r3, #0]
 801c7ce:	685b      	ldreq	r3, [r3, #4]
 801c7d0:	6063      	str	r3, [r4, #4]
 801c7d2:	bf04      	itt	eq
 801c7d4:	1809      	addeq	r1, r1, r0
 801c7d6:	6021      	streq	r1, [r4, #0]
 801c7d8:	6054      	str	r4, [r2, #4]
 801c7da:	e7ca      	b.n	801c772 <_free_r+0x22>
 801c7dc:	bd38      	pop	{r3, r4, r5, pc}
 801c7de:	bf00      	nop
 801c7e0:	200030ac 	.word	0x200030ac

0801c7e4 <rshift>:
 801c7e4:	6903      	ldr	r3, [r0, #16]
 801c7e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c7ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c7ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c7f2:	f100 0414 	add.w	r4, r0, #20
 801c7f6:	dd45      	ble.n	801c884 <rshift+0xa0>
 801c7f8:	f011 011f 	ands.w	r1, r1, #31
 801c7fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c800:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c804:	d10c      	bne.n	801c820 <rshift+0x3c>
 801c806:	f100 0710 	add.w	r7, r0, #16
 801c80a:	4629      	mov	r1, r5
 801c80c:	42b1      	cmp	r1, r6
 801c80e:	d334      	bcc.n	801c87a <rshift+0x96>
 801c810:	1a9b      	subs	r3, r3, r2
 801c812:	009b      	lsls	r3, r3, #2
 801c814:	1eea      	subs	r2, r5, #3
 801c816:	4296      	cmp	r6, r2
 801c818:	bf38      	it	cc
 801c81a:	2300      	movcc	r3, #0
 801c81c:	4423      	add	r3, r4
 801c81e:	e015      	b.n	801c84c <rshift+0x68>
 801c820:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c824:	f1c1 0820 	rsb	r8, r1, #32
 801c828:	40cf      	lsrs	r7, r1
 801c82a:	f105 0e04 	add.w	lr, r5, #4
 801c82e:	46a1      	mov	r9, r4
 801c830:	4576      	cmp	r6, lr
 801c832:	46f4      	mov	ip, lr
 801c834:	d815      	bhi.n	801c862 <rshift+0x7e>
 801c836:	1a9a      	subs	r2, r3, r2
 801c838:	0092      	lsls	r2, r2, #2
 801c83a:	3a04      	subs	r2, #4
 801c83c:	3501      	adds	r5, #1
 801c83e:	42ae      	cmp	r6, r5
 801c840:	bf38      	it	cc
 801c842:	2200      	movcc	r2, #0
 801c844:	18a3      	adds	r3, r4, r2
 801c846:	50a7      	str	r7, [r4, r2]
 801c848:	b107      	cbz	r7, 801c84c <rshift+0x68>
 801c84a:	3304      	adds	r3, #4
 801c84c:	1b1a      	subs	r2, r3, r4
 801c84e:	42a3      	cmp	r3, r4
 801c850:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c854:	bf08      	it	eq
 801c856:	2300      	moveq	r3, #0
 801c858:	6102      	str	r2, [r0, #16]
 801c85a:	bf08      	it	eq
 801c85c:	6143      	streq	r3, [r0, #20]
 801c85e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c862:	f8dc c000 	ldr.w	ip, [ip]
 801c866:	fa0c fc08 	lsl.w	ip, ip, r8
 801c86a:	ea4c 0707 	orr.w	r7, ip, r7
 801c86e:	f849 7b04 	str.w	r7, [r9], #4
 801c872:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c876:	40cf      	lsrs	r7, r1
 801c878:	e7da      	b.n	801c830 <rshift+0x4c>
 801c87a:	f851 cb04 	ldr.w	ip, [r1], #4
 801c87e:	f847 cf04 	str.w	ip, [r7, #4]!
 801c882:	e7c3      	b.n	801c80c <rshift+0x28>
 801c884:	4623      	mov	r3, r4
 801c886:	e7e1      	b.n	801c84c <rshift+0x68>

0801c888 <__hexdig_fun>:
 801c888:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c88c:	2b09      	cmp	r3, #9
 801c88e:	d802      	bhi.n	801c896 <__hexdig_fun+0xe>
 801c890:	3820      	subs	r0, #32
 801c892:	b2c0      	uxtb	r0, r0
 801c894:	4770      	bx	lr
 801c896:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c89a:	2b05      	cmp	r3, #5
 801c89c:	d801      	bhi.n	801c8a2 <__hexdig_fun+0x1a>
 801c89e:	3847      	subs	r0, #71	@ 0x47
 801c8a0:	e7f7      	b.n	801c892 <__hexdig_fun+0xa>
 801c8a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c8a6:	2b05      	cmp	r3, #5
 801c8a8:	d801      	bhi.n	801c8ae <__hexdig_fun+0x26>
 801c8aa:	3827      	subs	r0, #39	@ 0x27
 801c8ac:	e7f1      	b.n	801c892 <__hexdig_fun+0xa>
 801c8ae:	2000      	movs	r0, #0
 801c8b0:	4770      	bx	lr
	...

0801c8b4 <__gethex>:
 801c8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8b8:	b085      	sub	sp, #20
 801c8ba:	468a      	mov	sl, r1
 801c8bc:	9302      	str	r3, [sp, #8]
 801c8be:	680b      	ldr	r3, [r1, #0]
 801c8c0:	9001      	str	r0, [sp, #4]
 801c8c2:	4690      	mov	r8, r2
 801c8c4:	1c9c      	adds	r4, r3, #2
 801c8c6:	46a1      	mov	r9, r4
 801c8c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c8cc:	2830      	cmp	r0, #48	@ 0x30
 801c8ce:	d0fa      	beq.n	801c8c6 <__gethex+0x12>
 801c8d0:	eba9 0303 	sub.w	r3, r9, r3
 801c8d4:	f1a3 0b02 	sub.w	fp, r3, #2
 801c8d8:	f7ff ffd6 	bl	801c888 <__hexdig_fun>
 801c8dc:	4605      	mov	r5, r0
 801c8de:	2800      	cmp	r0, #0
 801c8e0:	d168      	bne.n	801c9b4 <__gethex+0x100>
 801c8e2:	49a0      	ldr	r1, [pc, #640]	@ (801cb64 <__gethex+0x2b0>)
 801c8e4:	2201      	movs	r2, #1
 801c8e6:	4648      	mov	r0, r9
 801c8e8:	f7fe ff97 	bl	801b81a <strncmp>
 801c8ec:	4607      	mov	r7, r0
 801c8ee:	2800      	cmp	r0, #0
 801c8f0:	d167      	bne.n	801c9c2 <__gethex+0x10e>
 801c8f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c8f6:	4626      	mov	r6, r4
 801c8f8:	f7ff ffc6 	bl	801c888 <__hexdig_fun>
 801c8fc:	2800      	cmp	r0, #0
 801c8fe:	d062      	beq.n	801c9c6 <__gethex+0x112>
 801c900:	4623      	mov	r3, r4
 801c902:	7818      	ldrb	r0, [r3, #0]
 801c904:	2830      	cmp	r0, #48	@ 0x30
 801c906:	4699      	mov	r9, r3
 801c908:	f103 0301 	add.w	r3, r3, #1
 801c90c:	d0f9      	beq.n	801c902 <__gethex+0x4e>
 801c90e:	f7ff ffbb 	bl	801c888 <__hexdig_fun>
 801c912:	fab0 f580 	clz	r5, r0
 801c916:	096d      	lsrs	r5, r5, #5
 801c918:	f04f 0b01 	mov.w	fp, #1
 801c91c:	464a      	mov	r2, r9
 801c91e:	4616      	mov	r6, r2
 801c920:	3201      	adds	r2, #1
 801c922:	7830      	ldrb	r0, [r6, #0]
 801c924:	f7ff ffb0 	bl	801c888 <__hexdig_fun>
 801c928:	2800      	cmp	r0, #0
 801c92a:	d1f8      	bne.n	801c91e <__gethex+0x6a>
 801c92c:	498d      	ldr	r1, [pc, #564]	@ (801cb64 <__gethex+0x2b0>)
 801c92e:	2201      	movs	r2, #1
 801c930:	4630      	mov	r0, r6
 801c932:	f7fe ff72 	bl	801b81a <strncmp>
 801c936:	2800      	cmp	r0, #0
 801c938:	d13f      	bne.n	801c9ba <__gethex+0x106>
 801c93a:	b944      	cbnz	r4, 801c94e <__gethex+0x9a>
 801c93c:	1c74      	adds	r4, r6, #1
 801c93e:	4622      	mov	r2, r4
 801c940:	4616      	mov	r6, r2
 801c942:	3201      	adds	r2, #1
 801c944:	7830      	ldrb	r0, [r6, #0]
 801c946:	f7ff ff9f 	bl	801c888 <__hexdig_fun>
 801c94a:	2800      	cmp	r0, #0
 801c94c:	d1f8      	bne.n	801c940 <__gethex+0x8c>
 801c94e:	1ba4      	subs	r4, r4, r6
 801c950:	00a7      	lsls	r7, r4, #2
 801c952:	7833      	ldrb	r3, [r6, #0]
 801c954:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c958:	2b50      	cmp	r3, #80	@ 0x50
 801c95a:	d13e      	bne.n	801c9da <__gethex+0x126>
 801c95c:	7873      	ldrb	r3, [r6, #1]
 801c95e:	2b2b      	cmp	r3, #43	@ 0x2b
 801c960:	d033      	beq.n	801c9ca <__gethex+0x116>
 801c962:	2b2d      	cmp	r3, #45	@ 0x2d
 801c964:	d034      	beq.n	801c9d0 <__gethex+0x11c>
 801c966:	1c71      	adds	r1, r6, #1
 801c968:	2400      	movs	r4, #0
 801c96a:	7808      	ldrb	r0, [r1, #0]
 801c96c:	f7ff ff8c 	bl	801c888 <__hexdig_fun>
 801c970:	1e43      	subs	r3, r0, #1
 801c972:	b2db      	uxtb	r3, r3
 801c974:	2b18      	cmp	r3, #24
 801c976:	d830      	bhi.n	801c9da <__gethex+0x126>
 801c978:	f1a0 0210 	sub.w	r2, r0, #16
 801c97c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c980:	f7ff ff82 	bl	801c888 <__hexdig_fun>
 801c984:	f100 3cff 	add.w	ip, r0, #4294967295
 801c988:	fa5f fc8c 	uxtb.w	ip, ip
 801c98c:	f1bc 0f18 	cmp.w	ip, #24
 801c990:	f04f 030a 	mov.w	r3, #10
 801c994:	d91e      	bls.n	801c9d4 <__gethex+0x120>
 801c996:	b104      	cbz	r4, 801c99a <__gethex+0xe6>
 801c998:	4252      	negs	r2, r2
 801c99a:	4417      	add	r7, r2
 801c99c:	f8ca 1000 	str.w	r1, [sl]
 801c9a0:	b1ed      	cbz	r5, 801c9de <__gethex+0x12a>
 801c9a2:	f1bb 0f00 	cmp.w	fp, #0
 801c9a6:	bf0c      	ite	eq
 801c9a8:	2506      	moveq	r5, #6
 801c9aa:	2500      	movne	r5, #0
 801c9ac:	4628      	mov	r0, r5
 801c9ae:	b005      	add	sp, #20
 801c9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9b4:	2500      	movs	r5, #0
 801c9b6:	462c      	mov	r4, r5
 801c9b8:	e7b0      	b.n	801c91c <__gethex+0x68>
 801c9ba:	2c00      	cmp	r4, #0
 801c9bc:	d1c7      	bne.n	801c94e <__gethex+0x9a>
 801c9be:	4627      	mov	r7, r4
 801c9c0:	e7c7      	b.n	801c952 <__gethex+0x9e>
 801c9c2:	464e      	mov	r6, r9
 801c9c4:	462f      	mov	r7, r5
 801c9c6:	2501      	movs	r5, #1
 801c9c8:	e7c3      	b.n	801c952 <__gethex+0x9e>
 801c9ca:	2400      	movs	r4, #0
 801c9cc:	1cb1      	adds	r1, r6, #2
 801c9ce:	e7cc      	b.n	801c96a <__gethex+0xb6>
 801c9d0:	2401      	movs	r4, #1
 801c9d2:	e7fb      	b.n	801c9cc <__gethex+0x118>
 801c9d4:	fb03 0002 	mla	r0, r3, r2, r0
 801c9d8:	e7ce      	b.n	801c978 <__gethex+0xc4>
 801c9da:	4631      	mov	r1, r6
 801c9dc:	e7de      	b.n	801c99c <__gethex+0xe8>
 801c9de:	eba6 0309 	sub.w	r3, r6, r9
 801c9e2:	3b01      	subs	r3, #1
 801c9e4:	4629      	mov	r1, r5
 801c9e6:	2b07      	cmp	r3, #7
 801c9e8:	dc0a      	bgt.n	801ca00 <__gethex+0x14c>
 801c9ea:	9801      	ldr	r0, [sp, #4]
 801c9ec:	f000 fa46 	bl	801ce7c <_Balloc>
 801c9f0:	4604      	mov	r4, r0
 801c9f2:	b940      	cbnz	r0, 801ca06 <__gethex+0x152>
 801c9f4:	4b5c      	ldr	r3, [pc, #368]	@ (801cb68 <__gethex+0x2b4>)
 801c9f6:	4602      	mov	r2, r0
 801c9f8:	21e4      	movs	r1, #228	@ 0xe4
 801c9fa:	485c      	ldr	r0, [pc, #368]	@ (801cb6c <__gethex+0x2b8>)
 801c9fc:	f7ff f83e 	bl	801ba7c <__assert_func>
 801ca00:	3101      	adds	r1, #1
 801ca02:	105b      	asrs	r3, r3, #1
 801ca04:	e7ef      	b.n	801c9e6 <__gethex+0x132>
 801ca06:	f100 0a14 	add.w	sl, r0, #20
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	4655      	mov	r5, sl
 801ca0e:	469b      	mov	fp, r3
 801ca10:	45b1      	cmp	r9, r6
 801ca12:	d337      	bcc.n	801ca84 <__gethex+0x1d0>
 801ca14:	f845 bb04 	str.w	fp, [r5], #4
 801ca18:	eba5 050a 	sub.w	r5, r5, sl
 801ca1c:	10ad      	asrs	r5, r5, #2
 801ca1e:	6125      	str	r5, [r4, #16]
 801ca20:	4658      	mov	r0, fp
 801ca22:	f000 fb1d 	bl	801d060 <__hi0bits>
 801ca26:	016d      	lsls	r5, r5, #5
 801ca28:	f8d8 6000 	ldr.w	r6, [r8]
 801ca2c:	1a2d      	subs	r5, r5, r0
 801ca2e:	42b5      	cmp	r5, r6
 801ca30:	dd54      	ble.n	801cadc <__gethex+0x228>
 801ca32:	1bad      	subs	r5, r5, r6
 801ca34:	4629      	mov	r1, r5
 801ca36:	4620      	mov	r0, r4
 801ca38:	f000 feb1 	bl	801d79e <__any_on>
 801ca3c:	4681      	mov	r9, r0
 801ca3e:	b178      	cbz	r0, 801ca60 <__gethex+0x1ac>
 801ca40:	1e6b      	subs	r3, r5, #1
 801ca42:	1159      	asrs	r1, r3, #5
 801ca44:	f003 021f 	and.w	r2, r3, #31
 801ca48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ca4c:	f04f 0901 	mov.w	r9, #1
 801ca50:	fa09 f202 	lsl.w	r2, r9, r2
 801ca54:	420a      	tst	r2, r1
 801ca56:	d003      	beq.n	801ca60 <__gethex+0x1ac>
 801ca58:	454b      	cmp	r3, r9
 801ca5a:	dc36      	bgt.n	801caca <__gethex+0x216>
 801ca5c:	f04f 0902 	mov.w	r9, #2
 801ca60:	4629      	mov	r1, r5
 801ca62:	4620      	mov	r0, r4
 801ca64:	f7ff febe 	bl	801c7e4 <rshift>
 801ca68:	442f      	add	r7, r5
 801ca6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ca6e:	42bb      	cmp	r3, r7
 801ca70:	da42      	bge.n	801caf8 <__gethex+0x244>
 801ca72:	9801      	ldr	r0, [sp, #4]
 801ca74:	4621      	mov	r1, r4
 801ca76:	f000 fa41 	bl	801cefc <_Bfree>
 801ca7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	6013      	str	r3, [r2, #0]
 801ca80:	25a3      	movs	r5, #163	@ 0xa3
 801ca82:	e793      	b.n	801c9ac <__gethex+0xf8>
 801ca84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801ca88:	2a2e      	cmp	r2, #46	@ 0x2e
 801ca8a:	d012      	beq.n	801cab2 <__gethex+0x1fe>
 801ca8c:	2b20      	cmp	r3, #32
 801ca8e:	d104      	bne.n	801ca9a <__gethex+0x1e6>
 801ca90:	f845 bb04 	str.w	fp, [r5], #4
 801ca94:	f04f 0b00 	mov.w	fp, #0
 801ca98:	465b      	mov	r3, fp
 801ca9a:	7830      	ldrb	r0, [r6, #0]
 801ca9c:	9303      	str	r3, [sp, #12]
 801ca9e:	f7ff fef3 	bl	801c888 <__hexdig_fun>
 801caa2:	9b03      	ldr	r3, [sp, #12]
 801caa4:	f000 000f 	and.w	r0, r0, #15
 801caa8:	4098      	lsls	r0, r3
 801caaa:	ea4b 0b00 	orr.w	fp, fp, r0
 801caae:	3304      	adds	r3, #4
 801cab0:	e7ae      	b.n	801ca10 <__gethex+0x15c>
 801cab2:	45b1      	cmp	r9, r6
 801cab4:	d8ea      	bhi.n	801ca8c <__gethex+0x1d8>
 801cab6:	492b      	ldr	r1, [pc, #172]	@ (801cb64 <__gethex+0x2b0>)
 801cab8:	9303      	str	r3, [sp, #12]
 801caba:	2201      	movs	r2, #1
 801cabc:	4630      	mov	r0, r6
 801cabe:	f7fe feac 	bl	801b81a <strncmp>
 801cac2:	9b03      	ldr	r3, [sp, #12]
 801cac4:	2800      	cmp	r0, #0
 801cac6:	d1e1      	bne.n	801ca8c <__gethex+0x1d8>
 801cac8:	e7a2      	b.n	801ca10 <__gethex+0x15c>
 801caca:	1ea9      	subs	r1, r5, #2
 801cacc:	4620      	mov	r0, r4
 801cace:	f000 fe66 	bl	801d79e <__any_on>
 801cad2:	2800      	cmp	r0, #0
 801cad4:	d0c2      	beq.n	801ca5c <__gethex+0x1a8>
 801cad6:	f04f 0903 	mov.w	r9, #3
 801cada:	e7c1      	b.n	801ca60 <__gethex+0x1ac>
 801cadc:	da09      	bge.n	801caf2 <__gethex+0x23e>
 801cade:	1b75      	subs	r5, r6, r5
 801cae0:	4621      	mov	r1, r4
 801cae2:	9801      	ldr	r0, [sp, #4]
 801cae4:	462a      	mov	r2, r5
 801cae6:	f000 fc21 	bl	801d32c <__lshift>
 801caea:	1b7f      	subs	r7, r7, r5
 801caec:	4604      	mov	r4, r0
 801caee:	f100 0a14 	add.w	sl, r0, #20
 801caf2:	f04f 0900 	mov.w	r9, #0
 801caf6:	e7b8      	b.n	801ca6a <__gethex+0x1b6>
 801caf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801cafc:	42bd      	cmp	r5, r7
 801cafe:	dd6f      	ble.n	801cbe0 <__gethex+0x32c>
 801cb00:	1bed      	subs	r5, r5, r7
 801cb02:	42ae      	cmp	r6, r5
 801cb04:	dc34      	bgt.n	801cb70 <__gethex+0x2bc>
 801cb06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cb0a:	2b02      	cmp	r3, #2
 801cb0c:	d022      	beq.n	801cb54 <__gethex+0x2a0>
 801cb0e:	2b03      	cmp	r3, #3
 801cb10:	d024      	beq.n	801cb5c <__gethex+0x2a8>
 801cb12:	2b01      	cmp	r3, #1
 801cb14:	d115      	bne.n	801cb42 <__gethex+0x28e>
 801cb16:	42ae      	cmp	r6, r5
 801cb18:	d113      	bne.n	801cb42 <__gethex+0x28e>
 801cb1a:	2e01      	cmp	r6, #1
 801cb1c:	d10b      	bne.n	801cb36 <__gethex+0x282>
 801cb1e:	9a02      	ldr	r2, [sp, #8]
 801cb20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cb24:	6013      	str	r3, [r2, #0]
 801cb26:	2301      	movs	r3, #1
 801cb28:	6123      	str	r3, [r4, #16]
 801cb2a:	f8ca 3000 	str.w	r3, [sl]
 801cb2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb30:	2562      	movs	r5, #98	@ 0x62
 801cb32:	601c      	str	r4, [r3, #0]
 801cb34:	e73a      	b.n	801c9ac <__gethex+0xf8>
 801cb36:	1e71      	subs	r1, r6, #1
 801cb38:	4620      	mov	r0, r4
 801cb3a:	f000 fe30 	bl	801d79e <__any_on>
 801cb3e:	2800      	cmp	r0, #0
 801cb40:	d1ed      	bne.n	801cb1e <__gethex+0x26a>
 801cb42:	9801      	ldr	r0, [sp, #4]
 801cb44:	4621      	mov	r1, r4
 801cb46:	f000 f9d9 	bl	801cefc <_Bfree>
 801cb4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	6013      	str	r3, [r2, #0]
 801cb50:	2550      	movs	r5, #80	@ 0x50
 801cb52:	e72b      	b.n	801c9ac <__gethex+0xf8>
 801cb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d1f3      	bne.n	801cb42 <__gethex+0x28e>
 801cb5a:	e7e0      	b.n	801cb1e <__gethex+0x26a>
 801cb5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d1dd      	bne.n	801cb1e <__gethex+0x26a>
 801cb62:	e7ee      	b.n	801cb42 <__gethex+0x28e>
 801cb64:	08021f28 	.word	0x08021f28
 801cb68:	080221d4 	.word	0x080221d4
 801cb6c:	080221e5 	.word	0x080221e5
 801cb70:	1e6f      	subs	r7, r5, #1
 801cb72:	f1b9 0f00 	cmp.w	r9, #0
 801cb76:	d130      	bne.n	801cbda <__gethex+0x326>
 801cb78:	b127      	cbz	r7, 801cb84 <__gethex+0x2d0>
 801cb7a:	4639      	mov	r1, r7
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	f000 fe0e 	bl	801d79e <__any_on>
 801cb82:	4681      	mov	r9, r0
 801cb84:	117a      	asrs	r2, r7, #5
 801cb86:	2301      	movs	r3, #1
 801cb88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801cb8c:	f007 071f 	and.w	r7, r7, #31
 801cb90:	40bb      	lsls	r3, r7
 801cb92:	4213      	tst	r3, r2
 801cb94:	4629      	mov	r1, r5
 801cb96:	4620      	mov	r0, r4
 801cb98:	bf18      	it	ne
 801cb9a:	f049 0902 	orrne.w	r9, r9, #2
 801cb9e:	f7ff fe21 	bl	801c7e4 <rshift>
 801cba2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801cba6:	1b76      	subs	r6, r6, r5
 801cba8:	2502      	movs	r5, #2
 801cbaa:	f1b9 0f00 	cmp.w	r9, #0
 801cbae:	d047      	beq.n	801cc40 <__gethex+0x38c>
 801cbb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cbb4:	2b02      	cmp	r3, #2
 801cbb6:	d015      	beq.n	801cbe4 <__gethex+0x330>
 801cbb8:	2b03      	cmp	r3, #3
 801cbba:	d017      	beq.n	801cbec <__gethex+0x338>
 801cbbc:	2b01      	cmp	r3, #1
 801cbbe:	d109      	bne.n	801cbd4 <__gethex+0x320>
 801cbc0:	f019 0f02 	tst.w	r9, #2
 801cbc4:	d006      	beq.n	801cbd4 <__gethex+0x320>
 801cbc6:	f8da 3000 	ldr.w	r3, [sl]
 801cbca:	ea49 0903 	orr.w	r9, r9, r3
 801cbce:	f019 0f01 	tst.w	r9, #1
 801cbd2:	d10e      	bne.n	801cbf2 <__gethex+0x33e>
 801cbd4:	f045 0510 	orr.w	r5, r5, #16
 801cbd8:	e032      	b.n	801cc40 <__gethex+0x38c>
 801cbda:	f04f 0901 	mov.w	r9, #1
 801cbde:	e7d1      	b.n	801cb84 <__gethex+0x2d0>
 801cbe0:	2501      	movs	r5, #1
 801cbe2:	e7e2      	b.n	801cbaa <__gethex+0x2f6>
 801cbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbe6:	f1c3 0301 	rsb	r3, r3, #1
 801cbea:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cbec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d0f0      	beq.n	801cbd4 <__gethex+0x320>
 801cbf2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cbf6:	f104 0314 	add.w	r3, r4, #20
 801cbfa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801cbfe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801cc02:	f04f 0c00 	mov.w	ip, #0
 801cc06:	4618      	mov	r0, r3
 801cc08:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cc10:	d01b      	beq.n	801cc4a <__gethex+0x396>
 801cc12:	3201      	adds	r2, #1
 801cc14:	6002      	str	r2, [r0, #0]
 801cc16:	2d02      	cmp	r5, #2
 801cc18:	f104 0314 	add.w	r3, r4, #20
 801cc1c:	d13c      	bne.n	801cc98 <__gethex+0x3e4>
 801cc1e:	f8d8 2000 	ldr.w	r2, [r8]
 801cc22:	3a01      	subs	r2, #1
 801cc24:	42b2      	cmp	r2, r6
 801cc26:	d109      	bne.n	801cc3c <__gethex+0x388>
 801cc28:	1171      	asrs	r1, r6, #5
 801cc2a:	2201      	movs	r2, #1
 801cc2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cc30:	f006 061f 	and.w	r6, r6, #31
 801cc34:	fa02 f606 	lsl.w	r6, r2, r6
 801cc38:	421e      	tst	r6, r3
 801cc3a:	d13a      	bne.n	801ccb2 <__gethex+0x3fe>
 801cc3c:	f045 0520 	orr.w	r5, r5, #32
 801cc40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cc42:	601c      	str	r4, [r3, #0]
 801cc44:	9b02      	ldr	r3, [sp, #8]
 801cc46:	601f      	str	r7, [r3, #0]
 801cc48:	e6b0      	b.n	801c9ac <__gethex+0xf8>
 801cc4a:	4299      	cmp	r1, r3
 801cc4c:	f843 cc04 	str.w	ip, [r3, #-4]
 801cc50:	d8d9      	bhi.n	801cc06 <__gethex+0x352>
 801cc52:	68a3      	ldr	r3, [r4, #8]
 801cc54:	459b      	cmp	fp, r3
 801cc56:	db17      	blt.n	801cc88 <__gethex+0x3d4>
 801cc58:	6861      	ldr	r1, [r4, #4]
 801cc5a:	9801      	ldr	r0, [sp, #4]
 801cc5c:	3101      	adds	r1, #1
 801cc5e:	f000 f90d 	bl	801ce7c <_Balloc>
 801cc62:	4681      	mov	r9, r0
 801cc64:	b918      	cbnz	r0, 801cc6e <__gethex+0x3ba>
 801cc66:	4b1a      	ldr	r3, [pc, #104]	@ (801ccd0 <__gethex+0x41c>)
 801cc68:	4602      	mov	r2, r0
 801cc6a:	2184      	movs	r1, #132	@ 0x84
 801cc6c:	e6c5      	b.n	801c9fa <__gethex+0x146>
 801cc6e:	6922      	ldr	r2, [r4, #16]
 801cc70:	3202      	adds	r2, #2
 801cc72:	f104 010c 	add.w	r1, r4, #12
 801cc76:	0092      	lsls	r2, r2, #2
 801cc78:	300c      	adds	r0, #12
 801cc7a:	f7fe fee2 	bl	801ba42 <memcpy>
 801cc7e:	4621      	mov	r1, r4
 801cc80:	9801      	ldr	r0, [sp, #4]
 801cc82:	f000 f93b 	bl	801cefc <_Bfree>
 801cc86:	464c      	mov	r4, r9
 801cc88:	6923      	ldr	r3, [r4, #16]
 801cc8a:	1c5a      	adds	r2, r3, #1
 801cc8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cc90:	6122      	str	r2, [r4, #16]
 801cc92:	2201      	movs	r2, #1
 801cc94:	615a      	str	r2, [r3, #20]
 801cc96:	e7be      	b.n	801cc16 <__gethex+0x362>
 801cc98:	6922      	ldr	r2, [r4, #16]
 801cc9a:	455a      	cmp	r2, fp
 801cc9c:	dd0b      	ble.n	801ccb6 <__gethex+0x402>
 801cc9e:	2101      	movs	r1, #1
 801cca0:	4620      	mov	r0, r4
 801cca2:	f7ff fd9f 	bl	801c7e4 <rshift>
 801cca6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ccaa:	3701      	adds	r7, #1
 801ccac:	42bb      	cmp	r3, r7
 801ccae:	f6ff aee0 	blt.w	801ca72 <__gethex+0x1be>
 801ccb2:	2501      	movs	r5, #1
 801ccb4:	e7c2      	b.n	801cc3c <__gethex+0x388>
 801ccb6:	f016 061f 	ands.w	r6, r6, #31
 801ccba:	d0fa      	beq.n	801ccb2 <__gethex+0x3fe>
 801ccbc:	4453      	add	r3, sl
 801ccbe:	f1c6 0620 	rsb	r6, r6, #32
 801ccc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ccc6:	f000 f9cb 	bl	801d060 <__hi0bits>
 801ccca:	42b0      	cmp	r0, r6
 801cccc:	dbe7      	blt.n	801cc9e <__gethex+0x3ea>
 801ccce:	e7f0      	b.n	801ccb2 <__gethex+0x3fe>
 801ccd0:	080221d4 	.word	0x080221d4

0801ccd4 <L_shift>:
 801ccd4:	f1c2 0208 	rsb	r2, r2, #8
 801ccd8:	0092      	lsls	r2, r2, #2
 801ccda:	b570      	push	{r4, r5, r6, lr}
 801ccdc:	f1c2 0620 	rsb	r6, r2, #32
 801cce0:	6843      	ldr	r3, [r0, #4]
 801cce2:	6804      	ldr	r4, [r0, #0]
 801cce4:	fa03 f506 	lsl.w	r5, r3, r6
 801cce8:	432c      	orrs	r4, r5
 801ccea:	40d3      	lsrs	r3, r2
 801ccec:	6004      	str	r4, [r0, #0]
 801ccee:	f840 3f04 	str.w	r3, [r0, #4]!
 801ccf2:	4288      	cmp	r0, r1
 801ccf4:	d3f4      	bcc.n	801cce0 <L_shift+0xc>
 801ccf6:	bd70      	pop	{r4, r5, r6, pc}

0801ccf8 <__match>:
 801ccf8:	b530      	push	{r4, r5, lr}
 801ccfa:	6803      	ldr	r3, [r0, #0]
 801ccfc:	3301      	adds	r3, #1
 801ccfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cd02:	b914      	cbnz	r4, 801cd0a <__match+0x12>
 801cd04:	6003      	str	r3, [r0, #0]
 801cd06:	2001      	movs	r0, #1
 801cd08:	bd30      	pop	{r4, r5, pc}
 801cd0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801cd12:	2d19      	cmp	r5, #25
 801cd14:	bf98      	it	ls
 801cd16:	3220      	addls	r2, #32
 801cd18:	42a2      	cmp	r2, r4
 801cd1a:	d0f0      	beq.n	801ccfe <__match+0x6>
 801cd1c:	2000      	movs	r0, #0
 801cd1e:	e7f3      	b.n	801cd08 <__match+0x10>

0801cd20 <__hexnan>:
 801cd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd24:	680b      	ldr	r3, [r1, #0]
 801cd26:	6801      	ldr	r1, [r0, #0]
 801cd28:	115e      	asrs	r6, r3, #5
 801cd2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cd2e:	f013 031f 	ands.w	r3, r3, #31
 801cd32:	b087      	sub	sp, #28
 801cd34:	bf18      	it	ne
 801cd36:	3604      	addne	r6, #4
 801cd38:	2500      	movs	r5, #0
 801cd3a:	1f37      	subs	r7, r6, #4
 801cd3c:	4682      	mov	sl, r0
 801cd3e:	4690      	mov	r8, r2
 801cd40:	9301      	str	r3, [sp, #4]
 801cd42:	f846 5c04 	str.w	r5, [r6, #-4]
 801cd46:	46b9      	mov	r9, r7
 801cd48:	463c      	mov	r4, r7
 801cd4a:	9502      	str	r5, [sp, #8]
 801cd4c:	46ab      	mov	fp, r5
 801cd4e:	784a      	ldrb	r2, [r1, #1]
 801cd50:	1c4b      	adds	r3, r1, #1
 801cd52:	9303      	str	r3, [sp, #12]
 801cd54:	b342      	cbz	r2, 801cda8 <__hexnan+0x88>
 801cd56:	4610      	mov	r0, r2
 801cd58:	9105      	str	r1, [sp, #20]
 801cd5a:	9204      	str	r2, [sp, #16]
 801cd5c:	f7ff fd94 	bl	801c888 <__hexdig_fun>
 801cd60:	2800      	cmp	r0, #0
 801cd62:	d151      	bne.n	801ce08 <__hexnan+0xe8>
 801cd64:	9a04      	ldr	r2, [sp, #16]
 801cd66:	9905      	ldr	r1, [sp, #20]
 801cd68:	2a20      	cmp	r2, #32
 801cd6a:	d818      	bhi.n	801cd9e <__hexnan+0x7e>
 801cd6c:	9b02      	ldr	r3, [sp, #8]
 801cd6e:	459b      	cmp	fp, r3
 801cd70:	dd13      	ble.n	801cd9a <__hexnan+0x7a>
 801cd72:	454c      	cmp	r4, r9
 801cd74:	d206      	bcs.n	801cd84 <__hexnan+0x64>
 801cd76:	2d07      	cmp	r5, #7
 801cd78:	dc04      	bgt.n	801cd84 <__hexnan+0x64>
 801cd7a:	462a      	mov	r2, r5
 801cd7c:	4649      	mov	r1, r9
 801cd7e:	4620      	mov	r0, r4
 801cd80:	f7ff ffa8 	bl	801ccd4 <L_shift>
 801cd84:	4544      	cmp	r4, r8
 801cd86:	d952      	bls.n	801ce2e <__hexnan+0x10e>
 801cd88:	2300      	movs	r3, #0
 801cd8a:	f1a4 0904 	sub.w	r9, r4, #4
 801cd8e:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd92:	f8cd b008 	str.w	fp, [sp, #8]
 801cd96:	464c      	mov	r4, r9
 801cd98:	461d      	mov	r5, r3
 801cd9a:	9903      	ldr	r1, [sp, #12]
 801cd9c:	e7d7      	b.n	801cd4e <__hexnan+0x2e>
 801cd9e:	2a29      	cmp	r2, #41	@ 0x29
 801cda0:	d157      	bne.n	801ce52 <__hexnan+0x132>
 801cda2:	3102      	adds	r1, #2
 801cda4:	f8ca 1000 	str.w	r1, [sl]
 801cda8:	f1bb 0f00 	cmp.w	fp, #0
 801cdac:	d051      	beq.n	801ce52 <__hexnan+0x132>
 801cdae:	454c      	cmp	r4, r9
 801cdb0:	d206      	bcs.n	801cdc0 <__hexnan+0xa0>
 801cdb2:	2d07      	cmp	r5, #7
 801cdb4:	dc04      	bgt.n	801cdc0 <__hexnan+0xa0>
 801cdb6:	462a      	mov	r2, r5
 801cdb8:	4649      	mov	r1, r9
 801cdba:	4620      	mov	r0, r4
 801cdbc:	f7ff ff8a 	bl	801ccd4 <L_shift>
 801cdc0:	4544      	cmp	r4, r8
 801cdc2:	d936      	bls.n	801ce32 <__hexnan+0x112>
 801cdc4:	f1a8 0204 	sub.w	r2, r8, #4
 801cdc8:	4623      	mov	r3, r4
 801cdca:	f853 1b04 	ldr.w	r1, [r3], #4
 801cdce:	f842 1f04 	str.w	r1, [r2, #4]!
 801cdd2:	429f      	cmp	r7, r3
 801cdd4:	d2f9      	bcs.n	801cdca <__hexnan+0xaa>
 801cdd6:	1b3b      	subs	r3, r7, r4
 801cdd8:	f023 0303 	bic.w	r3, r3, #3
 801cddc:	3304      	adds	r3, #4
 801cdde:	3401      	adds	r4, #1
 801cde0:	3e03      	subs	r6, #3
 801cde2:	42b4      	cmp	r4, r6
 801cde4:	bf88      	it	hi
 801cde6:	2304      	movhi	r3, #4
 801cde8:	4443      	add	r3, r8
 801cdea:	2200      	movs	r2, #0
 801cdec:	f843 2b04 	str.w	r2, [r3], #4
 801cdf0:	429f      	cmp	r7, r3
 801cdf2:	d2fb      	bcs.n	801cdec <__hexnan+0xcc>
 801cdf4:	683b      	ldr	r3, [r7, #0]
 801cdf6:	b91b      	cbnz	r3, 801ce00 <__hexnan+0xe0>
 801cdf8:	4547      	cmp	r7, r8
 801cdfa:	d128      	bne.n	801ce4e <__hexnan+0x12e>
 801cdfc:	2301      	movs	r3, #1
 801cdfe:	603b      	str	r3, [r7, #0]
 801ce00:	2005      	movs	r0, #5
 801ce02:	b007      	add	sp, #28
 801ce04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce08:	3501      	adds	r5, #1
 801ce0a:	2d08      	cmp	r5, #8
 801ce0c:	f10b 0b01 	add.w	fp, fp, #1
 801ce10:	dd06      	ble.n	801ce20 <__hexnan+0x100>
 801ce12:	4544      	cmp	r4, r8
 801ce14:	d9c1      	bls.n	801cd9a <__hexnan+0x7a>
 801ce16:	2300      	movs	r3, #0
 801ce18:	f844 3c04 	str.w	r3, [r4, #-4]
 801ce1c:	2501      	movs	r5, #1
 801ce1e:	3c04      	subs	r4, #4
 801ce20:	6822      	ldr	r2, [r4, #0]
 801ce22:	f000 000f 	and.w	r0, r0, #15
 801ce26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ce2a:	6020      	str	r0, [r4, #0]
 801ce2c:	e7b5      	b.n	801cd9a <__hexnan+0x7a>
 801ce2e:	2508      	movs	r5, #8
 801ce30:	e7b3      	b.n	801cd9a <__hexnan+0x7a>
 801ce32:	9b01      	ldr	r3, [sp, #4]
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	d0dd      	beq.n	801cdf4 <__hexnan+0xd4>
 801ce38:	f1c3 0320 	rsb	r3, r3, #32
 801ce3c:	f04f 32ff 	mov.w	r2, #4294967295
 801ce40:	40da      	lsrs	r2, r3
 801ce42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ce46:	4013      	ands	r3, r2
 801ce48:	f846 3c04 	str.w	r3, [r6, #-4]
 801ce4c:	e7d2      	b.n	801cdf4 <__hexnan+0xd4>
 801ce4e:	3f04      	subs	r7, #4
 801ce50:	e7d0      	b.n	801cdf4 <__hexnan+0xd4>
 801ce52:	2004      	movs	r0, #4
 801ce54:	e7d5      	b.n	801ce02 <__hexnan+0xe2>

0801ce56 <__ascii_mbtowc>:
 801ce56:	b082      	sub	sp, #8
 801ce58:	b901      	cbnz	r1, 801ce5c <__ascii_mbtowc+0x6>
 801ce5a:	a901      	add	r1, sp, #4
 801ce5c:	b142      	cbz	r2, 801ce70 <__ascii_mbtowc+0x1a>
 801ce5e:	b14b      	cbz	r3, 801ce74 <__ascii_mbtowc+0x1e>
 801ce60:	7813      	ldrb	r3, [r2, #0]
 801ce62:	600b      	str	r3, [r1, #0]
 801ce64:	7812      	ldrb	r2, [r2, #0]
 801ce66:	1e10      	subs	r0, r2, #0
 801ce68:	bf18      	it	ne
 801ce6a:	2001      	movne	r0, #1
 801ce6c:	b002      	add	sp, #8
 801ce6e:	4770      	bx	lr
 801ce70:	4610      	mov	r0, r2
 801ce72:	e7fb      	b.n	801ce6c <__ascii_mbtowc+0x16>
 801ce74:	f06f 0001 	mvn.w	r0, #1
 801ce78:	e7f8      	b.n	801ce6c <__ascii_mbtowc+0x16>
	...

0801ce7c <_Balloc>:
 801ce7c:	b570      	push	{r4, r5, r6, lr}
 801ce7e:	69c6      	ldr	r6, [r0, #28]
 801ce80:	4604      	mov	r4, r0
 801ce82:	460d      	mov	r5, r1
 801ce84:	b976      	cbnz	r6, 801cea4 <_Balloc+0x28>
 801ce86:	2010      	movs	r0, #16
 801ce88:	f7fc fd48 	bl	801991c <malloc>
 801ce8c:	4602      	mov	r2, r0
 801ce8e:	61e0      	str	r0, [r4, #28]
 801ce90:	b920      	cbnz	r0, 801ce9c <_Balloc+0x20>
 801ce92:	4b18      	ldr	r3, [pc, #96]	@ (801cef4 <_Balloc+0x78>)
 801ce94:	4818      	ldr	r0, [pc, #96]	@ (801cef8 <_Balloc+0x7c>)
 801ce96:	216b      	movs	r1, #107	@ 0x6b
 801ce98:	f7fe fdf0 	bl	801ba7c <__assert_func>
 801ce9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cea0:	6006      	str	r6, [r0, #0]
 801cea2:	60c6      	str	r6, [r0, #12]
 801cea4:	69e6      	ldr	r6, [r4, #28]
 801cea6:	68f3      	ldr	r3, [r6, #12]
 801cea8:	b183      	cbz	r3, 801cecc <_Balloc+0x50>
 801ceaa:	69e3      	ldr	r3, [r4, #28]
 801ceac:	68db      	ldr	r3, [r3, #12]
 801ceae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ceb2:	b9b8      	cbnz	r0, 801cee4 <_Balloc+0x68>
 801ceb4:	2101      	movs	r1, #1
 801ceb6:	fa01 f605 	lsl.w	r6, r1, r5
 801ceba:	1d72      	adds	r2, r6, #5
 801cebc:	0092      	lsls	r2, r2, #2
 801cebe:	4620      	mov	r0, r4
 801cec0:	f001 f8a7 	bl	801e012 <_calloc_r>
 801cec4:	b160      	cbz	r0, 801cee0 <_Balloc+0x64>
 801cec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ceca:	e00e      	b.n	801ceea <_Balloc+0x6e>
 801cecc:	2221      	movs	r2, #33	@ 0x21
 801cece:	2104      	movs	r1, #4
 801ced0:	4620      	mov	r0, r4
 801ced2:	f001 f89e 	bl	801e012 <_calloc_r>
 801ced6:	69e3      	ldr	r3, [r4, #28]
 801ced8:	60f0      	str	r0, [r6, #12]
 801ceda:	68db      	ldr	r3, [r3, #12]
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d1e4      	bne.n	801ceaa <_Balloc+0x2e>
 801cee0:	2000      	movs	r0, #0
 801cee2:	bd70      	pop	{r4, r5, r6, pc}
 801cee4:	6802      	ldr	r2, [r0, #0]
 801cee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ceea:	2300      	movs	r3, #0
 801ceec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cef0:	e7f7      	b.n	801cee2 <_Balloc+0x66>
 801cef2:	bf00      	nop
 801cef4:	080220ba 	.word	0x080220ba
 801cef8:	08022245 	.word	0x08022245

0801cefc <_Bfree>:
 801cefc:	b570      	push	{r4, r5, r6, lr}
 801cefe:	69c6      	ldr	r6, [r0, #28]
 801cf00:	4605      	mov	r5, r0
 801cf02:	460c      	mov	r4, r1
 801cf04:	b976      	cbnz	r6, 801cf24 <_Bfree+0x28>
 801cf06:	2010      	movs	r0, #16
 801cf08:	f7fc fd08 	bl	801991c <malloc>
 801cf0c:	4602      	mov	r2, r0
 801cf0e:	61e8      	str	r0, [r5, #28]
 801cf10:	b920      	cbnz	r0, 801cf1c <_Bfree+0x20>
 801cf12:	4b09      	ldr	r3, [pc, #36]	@ (801cf38 <_Bfree+0x3c>)
 801cf14:	4809      	ldr	r0, [pc, #36]	@ (801cf3c <_Bfree+0x40>)
 801cf16:	218f      	movs	r1, #143	@ 0x8f
 801cf18:	f7fe fdb0 	bl	801ba7c <__assert_func>
 801cf1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cf20:	6006      	str	r6, [r0, #0]
 801cf22:	60c6      	str	r6, [r0, #12]
 801cf24:	b13c      	cbz	r4, 801cf36 <_Bfree+0x3a>
 801cf26:	69eb      	ldr	r3, [r5, #28]
 801cf28:	6862      	ldr	r2, [r4, #4]
 801cf2a:	68db      	ldr	r3, [r3, #12]
 801cf2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cf30:	6021      	str	r1, [r4, #0]
 801cf32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cf36:	bd70      	pop	{r4, r5, r6, pc}
 801cf38:	080220ba 	.word	0x080220ba
 801cf3c:	08022245 	.word	0x08022245

0801cf40 <__multadd>:
 801cf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf44:	690d      	ldr	r5, [r1, #16]
 801cf46:	4607      	mov	r7, r0
 801cf48:	460c      	mov	r4, r1
 801cf4a:	461e      	mov	r6, r3
 801cf4c:	f101 0c14 	add.w	ip, r1, #20
 801cf50:	2000      	movs	r0, #0
 801cf52:	f8dc 3000 	ldr.w	r3, [ip]
 801cf56:	b299      	uxth	r1, r3
 801cf58:	fb02 6101 	mla	r1, r2, r1, r6
 801cf5c:	0c1e      	lsrs	r6, r3, #16
 801cf5e:	0c0b      	lsrs	r3, r1, #16
 801cf60:	fb02 3306 	mla	r3, r2, r6, r3
 801cf64:	b289      	uxth	r1, r1
 801cf66:	3001      	adds	r0, #1
 801cf68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cf6c:	4285      	cmp	r5, r0
 801cf6e:	f84c 1b04 	str.w	r1, [ip], #4
 801cf72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cf76:	dcec      	bgt.n	801cf52 <__multadd+0x12>
 801cf78:	b30e      	cbz	r6, 801cfbe <__multadd+0x7e>
 801cf7a:	68a3      	ldr	r3, [r4, #8]
 801cf7c:	42ab      	cmp	r3, r5
 801cf7e:	dc19      	bgt.n	801cfb4 <__multadd+0x74>
 801cf80:	6861      	ldr	r1, [r4, #4]
 801cf82:	4638      	mov	r0, r7
 801cf84:	3101      	adds	r1, #1
 801cf86:	f7ff ff79 	bl	801ce7c <_Balloc>
 801cf8a:	4680      	mov	r8, r0
 801cf8c:	b928      	cbnz	r0, 801cf9a <__multadd+0x5a>
 801cf8e:	4602      	mov	r2, r0
 801cf90:	4b0c      	ldr	r3, [pc, #48]	@ (801cfc4 <__multadd+0x84>)
 801cf92:	480d      	ldr	r0, [pc, #52]	@ (801cfc8 <__multadd+0x88>)
 801cf94:	21ba      	movs	r1, #186	@ 0xba
 801cf96:	f7fe fd71 	bl	801ba7c <__assert_func>
 801cf9a:	6922      	ldr	r2, [r4, #16]
 801cf9c:	3202      	adds	r2, #2
 801cf9e:	f104 010c 	add.w	r1, r4, #12
 801cfa2:	0092      	lsls	r2, r2, #2
 801cfa4:	300c      	adds	r0, #12
 801cfa6:	f7fe fd4c 	bl	801ba42 <memcpy>
 801cfaa:	4621      	mov	r1, r4
 801cfac:	4638      	mov	r0, r7
 801cfae:	f7ff ffa5 	bl	801cefc <_Bfree>
 801cfb2:	4644      	mov	r4, r8
 801cfb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cfb8:	3501      	adds	r5, #1
 801cfba:	615e      	str	r6, [r3, #20]
 801cfbc:	6125      	str	r5, [r4, #16]
 801cfbe:	4620      	mov	r0, r4
 801cfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfc4:	080221d4 	.word	0x080221d4
 801cfc8:	08022245 	.word	0x08022245

0801cfcc <__s2b>:
 801cfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfd0:	460c      	mov	r4, r1
 801cfd2:	4615      	mov	r5, r2
 801cfd4:	461f      	mov	r7, r3
 801cfd6:	2209      	movs	r2, #9
 801cfd8:	3308      	adds	r3, #8
 801cfda:	4606      	mov	r6, r0
 801cfdc:	fb93 f3f2 	sdiv	r3, r3, r2
 801cfe0:	2100      	movs	r1, #0
 801cfe2:	2201      	movs	r2, #1
 801cfe4:	429a      	cmp	r2, r3
 801cfe6:	db09      	blt.n	801cffc <__s2b+0x30>
 801cfe8:	4630      	mov	r0, r6
 801cfea:	f7ff ff47 	bl	801ce7c <_Balloc>
 801cfee:	b940      	cbnz	r0, 801d002 <__s2b+0x36>
 801cff0:	4602      	mov	r2, r0
 801cff2:	4b19      	ldr	r3, [pc, #100]	@ (801d058 <__s2b+0x8c>)
 801cff4:	4819      	ldr	r0, [pc, #100]	@ (801d05c <__s2b+0x90>)
 801cff6:	21d3      	movs	r1, #211	@ 0xd3
 801cff8:	f7fe fd40 	bl	801ba7c <__assert_func>
 801cffc:	0052      	lsls	r2, r2, #1
 801cffe:	3101      	adds	r1, #1
 801d000:	e7f0      	b.n	801cfe4 <__s2b+0x18>
 801d002:	9b08      	ldr	r3, [sp, #32]
 801d004:	6143      	str	r3, [r0, #20]
 801d006:	2d09      	cmp	r5, #9
 801d008:	f04f 0301 	mov.w	r3, #1
 801d00c:	6103      	str	r3, [r0, #16]
 801d00e:	dd16      	ble.n	801d03e <__s2b+0x72>
 801d010:	f104 0909 	add.w	r9, r4, #9
 801d014:	46c8      	mov	r8, r9
 801d016:	442c      	add	r4, r5
 801d018:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d01c:	4601      	mov	r1, r0
 801d01e:	3b30      	subs	r3, #48	@ 0x30
 801d020:	220a      	movs	r2, #10
 801d022:	4630      	mov	r0, r6
 801d024:	f7ff ff8c 	bl	801cf40 <__multadd>
 801d028:	45a0      	cmp	r8, r4
 801d02a:	d1f5      	bne.n	801d018 <__s2b+0x4c>
 801d02c:	f1a5 0408 	sub.w	r4, r5, #8
 801d030:	444c      	add	r4, r9
 801d032:	1b2d      	subs	r5, r5, r4
 801d034:	1963      	adds	r3, r4, r5
 801d036:	42bb      	cmp	r3, r7
 801d038:	db04      	blt.n	801d044 <__s2b+0x78>
 801d03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d03e:	340a      	adds	r4, #10
 801d040:	2509      	movs	r5, #9
 801d042:	e7f6      	b.n	801d032 <__s2b+0x66>
 801d044:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d048:	4601      	mov	r1, r0
 801d04a:	3b30      	subs	r3, #48	@ 0x30
 801d04c:	220a      	movs	r2, #10
 801d04e:	4630      	mov	r0, r6
 801d050:	f7ff ff76 	bl	801cf40 <__multadd>
 801d054:	e7ee      	b.n	801d034 <__s2b+0x68>
 801d056:	bf00      	nop
 801d058:	080221d4 	.word	0x080221d4
 801d05c:	08022245 	.word	0x08022245

0801d060 <__hi0bits>:
 801d060:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d064:	4603      	mov	r3, r0
 801d066:	bf36      	itet	cc
 801d068:	0403      	lslcc	r3, r0, #16
 801d06a:	2000      	movcs	r0, #0
 801d06c:	2010      	movcc	r0, #16
 801d06e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d072:	bf3c      	itt	cc
 801d074:	021b      	lslcc	r3, r3, #8
 801d076:	3008      	addcc	r0, #8
 801d078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d07c:	bf3c      	itt	cc
 801d07e:	011b      	lslcc	r3, r3, #4
 801d080:	3004      	addcc	r0, #4
 801d082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d086:	bf3c      	itt	cc
 801d088:	009b      	lslcc	r3, r3, #2
 801d08a:	3002      	addcc	r0, #2
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	db05      	blt.n	801d09c <__hi0bits+0x3c>
 801d090:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d094:	f100 0001 	add.w	r0, r0, #1
 801d098:	bf08      	it	eq
 801d09a:	2020      	moveq	r0, #32
 801d09c:	4770      	bx	lr

0801d09e <__lo0bits>:
 801d09e:	6803      	ldr	r3, [r0, #0]
 801d0a0:	4602      	mov	r2, r0
 801d0a2:	f013 0007 	ands.w	r0, r3, #7
 801d0a6:	d00b      	beq.n	801d0c0 <__lo0bits+0x22>
 801d0a8:	07d9      	lsls	r1, r3, #31
 801d0aa:	d421      	bmi.n	801d0f0 <__lo0bits+0x52>
 801d0ac:	0798      	lsls	r0, r3, #30
 801d0ae:	bf49      	itett	mi
 801d0b0:	085b      	lsrmi	r3, r3, #1
 801d0b2:	089b      	lsrpl	r3, r3, #2
 801d0b4:	2001      	movmi	r0, #1
 801d0b6:	6013      	strmi	r3, [r2, #0]
 801d0b8:	bf5c      	itt	pl
 801d0ba:	6013      	strpl	r3, [r2, #0]
 801d0bc:	2002      	movpl	r0, #2
 801d0be:	4770      	bx	lr
 801d0c0:	b299      	uxth	r1, r3
 801d0c2:	b909      	cbnz	r1, 801d0c8 <__lo0bits+0x2a>
 801d0c4:	0c1b      	lsrs	r3, r3, #16
 801d0c6:	2010      	movs	r0, #16
 801d0c8:	b2d9      	uxtb	r1, r3
 801d0ca:	b909      	cbnz	r1, 801d0d0 <__lo0bits+0x32>
 801d0cc:	3008      	adds	r0, #8
 801d0ce:	0a1b      	lsrs	r3, r3, #8
 801d0d0:	0719      	lsls	r1, r3, #28
 801d0d2:	bf04      	itt	eq
 801d0d4:	091b      	lsreq	r3, r3, #4
 801d0d6:	3004      	addeq	r0, #4
 801d0d8:	0799      	lsls	r1, r3, #30
 801d0da:	bf04      	itt	eq
 801d0dc:	089b      	lsreq	r3, r3, #2
 801d0de:	3002      	addeq	r0, #2
 801d0e0:	07d9      	lsls	r1, r3, #31
 801d0e2:	d403      	bmi.n	801d0ec <__lo0bits+0x4e>
 801d0e4:	085b      	lsrs	r3, r3, #1
 801d0e6:	f100 0001 	add.w	r0, r0, #1
 801d0ea:	d003      	beq.n	801d0f4 <__lo0bits+0x56>
 801d0ec:	6013      	str	r3, [r2, #0]
 801d0ee:	4770      	bx	lr
 801d0f0:	2000      	movs	r0, #0
 801d0f2:	4770      	bx	lr
 801d0f4:	2020      	movs	r0, #32
 801d0f6:	4770      	bx	lr

0801d0f8 <__i2b>:
 801d0f8:	b510      	push	{r4, lr}
 801d0fa:	460c      	mov	r4, r1
 801d0fc:	2101      	movs	r1, #1
 801d0fe:	f7ff febd 	bl	801ce7c <_Balloc>
 801d102:	4602      	mov	r2, r0
 801d104:	b928      	cbnz	r0, 801d112 <__i2b+0x1a>
 801d106:	4b05      	ldr	r3, [pc, #20]	@ (801d11c <__i2b+0x24>)
 801d108:	4805      	ldr	r0, [pc, #20]	@ (801d120 <__i2b+0x28>)
 801d10a:	f240 1145 	movw	r1, #325	@ 0x145
 801d10e:	f7fe fcb5 	bl	801ba7c <__assert_func>
 801d112:	2301      	movs	r3, #1
 801d114:	6144      	str	r4, [r0, #20]
 801d116:	6103      	str	r3, [r0, #16]
 801d118:	bd10      	pop	{r4, pc}
 801d11a:	bf00      	nop
 801d11c:	080221d4 	.word	0x080221d4
 801d120:	08022245 	.word	0x08022245

0801d124 <__multiply>:
 801d124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d128:	4614      	mov	r4, r2
 801d12a:	690a      	ldr	r2, [r1, #16]
 801d12c:	6923      	ldr	r3, [r4, #16]
 801d12e:	429a      	cmp	r2, r3
 801d130:	bfa8      	it	ge
 801d132:	4623      	movge	r3, r4
 801d134:	460f      	mov	r7, r1
 801d136:	bfa4      	itt	ge
 801d138:	460c      	movge	r4, r1
 801d13a:	461f      	movge	r7, r3
 801d13c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801d140:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801d144:	68a3      	ldr	r3, [r4, #8]
 801d146:	6861      	ldr	r1, [r4, #4]
 801d148:	eb0a 0609 	add.w	r6, sl, r9
 801d14c:	42b3      	cmp	r3, r6
 801d14e:	b085      	sub	sp, #20
 801d150:	bfb8      	it	lt
 801d152:	3101      	addlt	r1, #1
 801d154:	f7ff fe92 	bl	801ce7c <_Balloc>
 801d158:	b930      	cbnz	r0, 801d168 <__multiply+0x44>
 801d15a:	4602      	mov	r2, r0
 801d15c:	4b44      	ldr	r3, [pc, #272]	@ (801d270 <__multiply+0x14c>)
 801d15e:	4845      	ldr	r0, [pc, #276]	@ (801d274 <__multiply+0x150>)
 801d160:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d164:	f7fe fc8a 	bl	801ba7c <__assert_func>
 801d168:	f100 0514 	add.w	r5, r0, #20
 801d16c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d170:	462b      	mov	r3, r5
 801d172:	2200      	movs	r2, #0
 801d174:	4543      	cmp	r3, r8
 801d176:	d321      	bcc.n	801d1bc <__multiply+0x98>
 801d178:	f107 0114 	add.w	r1, r7, #20
 801d17c:	f104 0214 	add.w	r2, r4, #20
 801d180:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801d184:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801d188:	9302      	str	r3, [sp, #8]
 801d18a:	1b13      	subs	r3, r2, r4
 801d18c:	3b15      	subs	r3, #21
 801d18e:	f023 0303 	bic.w	r3, r3, #3
 801d192:	3304      	adds	r3, #4
 801d194:	f104 0715 	add.w	r7, r4, #21
 801d198:	42ba      	cmp	r2, r7
 801d19a:	bf38      	it	cc
 801d19c:	2304      	movcc	r3, #4
 801d19e:	9301      	str	r3, [sp, #4]
 801d1a0:	9b02      	ldr	r3, [sp, #8]
 801d1a2:	9103      	str	r1, [sp, #12]
 801d1a4:	428b      	cmp	r3, r1
 801d1a6:	d80c      	bhi.n	801d1c2 <__multiply+0x9e>
 801d1a8:	2e00      	cmp	r6, #0
 801d1aa:	dd03      	ble.n	801d1b4 <__multiply+0x90>
 801d1ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d05b      	beq.n	801d26c <__multiply+0x148>
 801d1b4:	6106      	str	r6, [r0, #16]
 801d1b6:	b005      	add	sp, #20
 801d1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1bc:	f843 2b04 	str.w	r2, [r3], #4
 801d1c0:	e7d8      	b.n	801d174 <__multiply+0x50>
 801d1c2:	f8b1 a000 	ldrh.w	sl, [r1]
 801d1c6:	f1ba 0f00 	cmp.w	sl, #0
 801d1ca:	d024      	beq.n	801d216 <__multiply+0xf2>
 801d1cc:	f104 0e14 	add.w	lr, r4, #20
 801d1d0:	46a9      	mov	r9, r5
 801d1d2:	f04f 0c00 	mov.w	ip, #0
 801d1d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d1da:	f8d9 3000 	ldr.w	r3, [r9]
 801d1de:	fa1f fb87 	uxth.w	fp, r7
 801d1e2:	b29b      	uxth	r3, r3
 801d1e4:	fb0a 330b 	mla	r3, sl, fp, r3
 801d1e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801d1ec:	f8d9 7000 	ldr.w	r7, [r9]
 801d1f0:	4463      	add	r3, ip
 801d1f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d1f6:	fb0a c70b 	mla	r7, sl, fp, ip
 801d1fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801d1fe:	b29b      	uxth	r3, r3
 801d200:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d204:	4572      	cmp	r2, lr
 801d206:	f849 3b04 	str.w	r3, [r9], #4
 801d20a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d20e:	d8e2      	bhi.n	801d1d6 <__multiply+0xb2>
 801d210:	9b01      	ldr	r3, [sp, #4]
 801d212:	f845 c003 	str.w	ip, [r5, r3]
 801d216:	9b03      	ldr	r3, [sp, #12]
 801d218:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d21c:	3104      	adds	r1, #4
 801d21e:	f1b9 0f00 	cmp.w	r9, #0
 801d222:	d021      	beq.n	801d268 <__multiply+0x144>
 801d224:	682b      	ldr	r3, [r5, #0]
 801d226:	f104 0c14 	add.w	ip, r4, #20
 801d22a:	46ae      	mov	lr, r5
 801d22c:	f04f 0a00 	mov.w	sl, #0
 801d230:	f8bc b000 	ldrh.w	fp, [ip]
 801d234:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801d238:	fb09 770b 	mla	r7, r9, fp, r7
 801d23c:	4457      	add	r7, sl
 801d23e:	b29b      	uxth	r3, r3
 801d240:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d244:	f84e 3b04 	str.w	r3, [lr], #4
 801d248:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d24c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d250:	f8be 3000 	ldrh.w	r3, [lr]
 801d254:	fb09 330a 	mla	r3, r9, sl, r3
 801d258:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801d25c:	4562      	cmp	r2, ip
 801d25e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d262:	d8e5      	bhi.n	801d230 <__multiply+0x10c>
 801d264:	9f01      	ldr	r7, [sp, #4]
 801d266:	51eb      	str	r3, [r5, r7]
 801d268:	3504      	adds	r5, #4
 801d26a:	e799      	b.n	801d1a0 <__multiply+0x7c>
 801d26c:	3e01      	subs	r6, #1
 801d26e:	e79b      	b.n	801d1a8 <__multiply+0x84>
 801d270:	080221d4 	.word	0x080221d4
 801d274:	08022245 	.word	0x08022245

0801d278 <__pow5mult>:
 801d278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d27c:	4615      	mov	r5, r2
 801d27e:	f012 0203 	ands.w	r2, r2, #3
 801d282:	4607      	mov	r7, r0
 801d284:	460e      	mov	r6, r1
 801d286:	d007      	beq.n	801d298 <__pow5mult+0x20>
 801d288:	4c25      	ldr	r4, [pc, #148]	@ (801d320 <__pow5mult+0xa8>)
 801d28a:	3a01      	subs	r2, #1
 801d28c:	2300      	movs	r3, #0
 801d28e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d292:	f7ff fe55 	bl	801cf40 <__multadd>
 801d296:	4606      	mov	r6, r0
 801d298:	10ad      	asrs	r5, r5, #2
 801d29a:	d03d      	beq.n	801d318 <__pow5mult+0xa0>
 801d29c:	69fc      	ldr	r4, [r7, #28]
 801d29e:	b97c      	cbnz	r4, 801d2c0 <__pow5mult+0x48>
 801d2a0:	2010      	movs	r0, #16
 801d2a2:	f7fc fb3b 	bl	801991c <malloc>
 801d2a6:	4602      	mov	r2, r0
 801d2a8:	61f8      	str	r0, [r7, #28]
 801d2aa:	b928      	cbnz	r0, 801d2b8 <__pow5mult+0x40>
 801d2ac:	4b1d      	ldr	r3, [pc, #116]	@ (801d324 <__pow5mult+0xac>)
 801d2ae:	481e      	ldr	r0, [pc, #120]	@ (801d328 <__pow5mult+0xb0>)
 801d2b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d2b4:	f7fe fbe2 	bl	801ba7c <__assert_func>
 801d2b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d2bc:	6004      	str	r4, [r0, #0]
 801d2be:	60c4      	str	r4, [r0, #12]
 801d2c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d2c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d2c8:	b94c      	cbnz	r4, 801d2de <__pow5mult+0x66>
 801d2ca:	f240 2171 	movw	r1, #625	@ 0x271
 801d2ce:	4638      	mov	r0, r7
 801d2d0:	f7ff ff12 	bl	801d0f8 <__i2b>
 801d2d4:	2300      	movs	r3, #0
 801d2d6:	f8c8 0008 	str.w	r0, [r8, #8]
 801d2da:	4604      	mov	r4, r0
 801d2dc:	6003      	str	r3, [r0, #0]
 801d2de:	f04f 0900 	mov.w	r9, #0
 801d2e2:	07eb      	lsls	r3, r5, #31
 801d2e4:	d50a      	bpl.n	801d2fc <__pow5mult+0x84>
 801d2e6:	4631      	mov	r1, r6
 801d2e8:	4622      	mov	r2, r4
 801d2ea:	4638      	mov	r0, r7
 801d2ec:	f7ff ff1a 	bl	801d124 <__multiply>
 801d2f0:	4631      	mov	r1, r6
 801d2f2:	4680      	mov	r8, r0
 801d2f4:	4638      	mov	r0, r7
 801d2f6:	f7ff fe01 	bl	801cefc <_Bfree>
 801d2fa:	4646      	mov	r6, r8
 801d2fc:	106d      	asrs	r5, r5, #1
 801d2fe:	d00b      	beq.n	801d318 <__pow5mult+0xa0>
 801d300:	6820      	ldr	r0, [r4, #0]
 801d302:	b938      	cbnz	r0, 801d314 <__pow5mult+0x9c>
 801d304:	4622      	mov	r2, r4
 801d306:	4621      	mov	r1, r4
 801d308:	4638      	mov	r0, r7
 801d30a:	f7ff ff0b 	bl	801d124 <__multiply>
 801d30e:	6020      	str	r0, [r4, #0]
 801d310:	f8c0 9000 	str.w	r9, [r0]
 801d314:	4604      	mov	r4, r0
 801d316:	e7e4      	b.n	801d2e2 <__pow5mult+0x6a>
 801d318:	4630      	mov	r0, r6
 801d31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d31e:	bf00      	nop
 801d320:	080222a0 	.word	0x080222a0
 801d324:	080220ba 	.word	0x080220ba
 801d328:	08022245 	.word	0x08022245

0801d32c <__lshift>:
 801d32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d330:	460c      	mov	r4, r1
 801d332:	6849      	ldr	r1, [r1, #4]
 801d334:	6923      	ldr	r3, [r4, #16]
 801d336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d33a:	68a3      	ldr	r3, [r4, #8]
 801d33c:	4607      	mov	r7, r0
 801d33e:	4691      	mov	r9, r2
 801d340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d344:	f108 0601 	add.w	r6, r8, #1
 801d348:	42b3      	cmp	r3, r6
 801d34a:	db0b      	blt.n	801d364 <__lshift+0x38>
 801d34c:	4638      	mov	r0, r7
 801d34e:	f7ff fd95 	bl	801ce7c <_Balloc>
 801d352:	4605      	mov	r5, r0
 801d354:	b948      	cbnz	r0, 801d36a <__lshift+0x3e>
 801d356:	4602      	mov	r2, r0
 801d358:	4b28      	ldr	r3, [pc, #160]	@ (801d3fc <__lshift+0xd0>)
 801d35a:	4829      	ldr	r0, [pc, #164]	@ (801d400 <__lshift+0xd4>)
 801d35c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d360:	f7fe fb8c 	bl	801ba7c <__assert_func>
 801d364:	3101      	adds	r1, #1
 801d366:	005b      	lsls	r3, r3, #1
 801d368:	e7ee      	b.n	801d348 <__lshift+0x1c>
 801d36a:	2300      	movs	r3, #0
 801d36c:	f100 0114 	add.w	r1, r0, #20
 801d370:	f100 0210 	add.w	r2, r0, #16
 801d374:	4618      	mov	r0, r3
 801d376:	4553      	cmp	r3, sl
 801d378:	db33      	blt.n	801d3e2 <__lshift+0xb6>
 801d37a:	6920      	ldr	r0, [r4, #16]
 801d37c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d380:	f104 0314 	add.w	r3, r4, #20
 801d384:	f019 091f 	ands.w	r9, r9, #31
 801d388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d38c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d390:	d02b      	beq.n	801d3ea <__lshift+0xbe>
 801d392:	f1c9 0e20 	rsb	lr, r9, #32
 801d396:	468a      	mov	sl, r1
 801d398:	2200      	movs	r2, #0
 801d39a:	6818      	ldr	r0, [r3, #0]
 801d39c:	fa00 f009 	lsl.w	r0, r0, r9
 801d3a0:	4310      	orrs	r0, r2
 801d3a2:	f84a 0b04 	str.w	r0, [sl], #4
 801d3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3aa:	459c      	cmp	ip, r3
 801d3ac:	fa22 f20e 	lsr.w	r2, r2, lr
 801d3b0:	d8f3      	bhi.n	801d39a <__lshift+0x6e>
 801d3b2:	ebac 0304 	sub.w	r3, ip, r4
 801d3b6:	3b15      	subs	r3, #21
 801d3b8:	f023 0303 	bic.w	r3, r3, #3
 801d3bc:	3304      	adds	r3, #4
 801d3be:	f104 0015 	add.w	r0, r4, #21
 801d3c2:	4584      	cmp	ip, r0
 801d3c4:	bf38      	it	cc
 801d3c6:	2304      	movcc	r3, #4
 801d3c8:	50ca      	str	r2, [r1, r3]
 801d3ca:	b10a      	cbz	r2, 801d3d0 <__lshift+0xa4>
 801d3cc:	f108 0602 	add.w	r6, r8, #2
 801d3d0:	3e01      	subs	r6, #1
 801d3d2:	4638      	mov	r0, r7
 801d3d4:	612e      	str	r6, [r5, #16]
 801d3d6:	4621      	mov	r1, r4
 801d3d8:	f7ff fd90 	bl	801cefc <_Bfree>
 801d3dc:	4628      	mov	r0, r5
 801d3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3e2:	f842 0f04 	str.w	r0, [r2, #4]!
 801d3e6:	3301      	adds	r3, #1
 801d3e8:	e7c5      	b.n	801d376 <__lshift+0x4a>
 801d3ea:	3904      	subs	r1, #4
 801d3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3f0:	f841 2f04 	str.w	r2, [r1, #4]!
 801d3f4:	459c      	cmp	ip, r3
 801d3f6:	d8f9      	bhi.n	801d3ec <__lshift+0xc0>
 801d3f8:	e7ea      	b.n	801d3d0 <__lshift+0xa4>
 801d3fa:	bf00      	nop
 801d3fc:	080221d4 	.word	0x080221d4
 801d400:	08022245 	.word	0x08022245

0801d404 <__mcmp>:
 801d404:	690a      	ldr	r2, [r1, #16]
 801d406:	4603      	mov	r3, r0
 801d408:	6900      	ldr	r0, [r0, #16]
 801d40a:	1a80      	subs	r0, r0, r2
 801d40c:	b530      	push	{r4, r5, lr}
 801d40e:	d10e      	bne.n	801d42e <__mcmp+0x2a>
 801d410:	3314      	adds	r3, #20
 801d412:	3114      	adds	r1, #20
 801d414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d41c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d424:	4295      	cmp	r5, r2
 801d426:	d003      	beq.n	801d430 <__mcmp+0x2c>
 801d428:	d205      	bcs.n	801d436 <__mcmp+0x32>
 801d42a:	f04f 30ff 	mov.w	r0, #4294967295
 801d42e:	bd30      	pop	{r4, r5, pc}
 801d430:	42a3      	cmp	r3, r4
 801d432:	d3f3      	bcc.n	801d41c <__mcmp+0x18>
 801d434:	e7fb      	b.n	801d42e <__mcmp+0x2a>
 801d436:	2001      	movs	r0, #1
 801d438:	e7f9      	b.n	801d42e <__mcmp+0x2a>
	...

0801d43c <__mdiff>:
 801d43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d440:	4689      	mov	r9, r1
 801d442:	4606      	mov	r6, r0
 801d444:	4611      	mov	r1, r2
 801d446:	4648      	mov	r0, r9
 801d448:	4614      	mov	r4, r2
 801d44a:	f7ff ffdb 	bl	801d404 <__mcmp>
 801d44e:	1e05      	subs	r5, r0, #0
 801d450:	d112      	bne.n	801d478 <__mdiff+0x3c>
 801d452:	4629      	mov	r1, r5
 801d454:	4630      	mov	r0, r6
 801d456:	f7ff fd11 	bl	801ce7c <_Balloc>
 801d45a:	4602      	mov	r2, r0
 801d45c:	b928      	cbnz	r0, 801d46a <__mdiff+0x2e>
 801d45e:	4b3f      	ldr	r3, [pc, #252]	@ (801d55c <__mdiff+0x120>)
 801d460:	f240 2137 	movw	r1, #567	@ 0x237
 801d464:	483e      	ldr	r0, [pc, #248]	@ (801d560 <__mdiff+0x124>)
 801d466:	f7fe fb09 	bl	801ba7c <__assert_func>
 801d46a:	2301      	movs	r3, #1
 801d46c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d470:	4610      	mov	r0, r2
 801d472:	b003      	add	sp, #12
 801d474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d478:	bfbc      	itt	lt
 801d47a:	464b      	movlt	r3, r9
 801d47c:	46a1      	movlt	r9, r4
 801d47e:	4630      	mov	r0, r6
 801d480:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d484:	bfba      	itte	lt
 801d486:	461c      	movlt	r4, r3
 801d488:	2501      	movlt	r5, #1
 801d48a:	2500      	movge	r5, #0
 801d48c:	f7ff fcf6 	bl	801ce7c <_Balloc>
 801d490:	4602      	mov	r2, r0
 801d492:	b918      	cbnz	r0, 801d49c <__mdiff+0x60>
 801d494:	4b31      	ldr	r3, [pc, #196]	@ (801d55c <__mdiff+0x120>)
 801d496:	f240 2145 	movw	r1, #581	@ 0x245
 801d49a:	e7e3      	b.n	801d464 <__mdiff+0x28>
 801d49c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d4a0:	6926      	ldr	r6, [r4, #16]
 801d4a2:	60c5      	str	r5, [r0, #12]
 801d4a4:	f109 0310 	add.w	r3, r9, #16
 801d4a8:	f109 0514 	add.w	r5, r9, #20
 801d4ac:	f104 0e14 	add.w	lr, r4, #20
 801d4b0:	f100 0b14 	add.w	fp, r0, #20
 801d4b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d4b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d4bc:	9301      	str	r3, [sp, #4]
 801d4be:	46d9      	mov	r9, fp
 801d4c0:	f04f 0c00 	mov.w	ip, #0
 801d4c4:	9b01      	ldr	r3, [sp, #4]
 801d4c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d4ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d4ce:	9301      	str	r3, [sp, #4]
 801d4d0:	fa1f f38a 	uxth.w	r3, sl
 801d4d4:	4619      	mov	r1, r3
 801d4d6:	b283      	uxth	r3, r0
 801d4d8:	1acb      	subs	r3, r1, r3
 801d4da:	0c00      	lsrs	r0, r0, #16
 801d4dc:	4463      	add	r3, ip
 801d4de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d4e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d4e6:	b29b      	uxth	r3, r3
 801d4e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d4ec:	4576      	cmp	r6, lr
 801d4ee:	f849 3b04 	str.w	r3, [r9], #4
 801d4f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d4f6:	d8e5      	bhi.n	801d4c4 <__mdiff+0x88>
 801d4f8:	1b33      	subs	r3, r6, r4
 801d4fa:	3b15      	subs	r3, #21
 801d4fc:	f023 0303 	bic.w	r3, r3, #3
 801d500:	3415      	adds	r4, #21
 801d502:	3304      	adds	r3, #4
 801d504:	42a6      	cmp	r6, r4
 801d506:	bf38      	it	cc
 801d508:	2304      	movcc	r3, #4
 801d50a:	441d      	add	r5, r3
 801d50c:	445b      	add	r3, fp
 801d50e:	461e      	mov	r6, r3
 801d510:	462c      	mov	r4, r5
 801d512:	4544      	cmp	r4, r8
 801d514:	d30e      	bcc.n	801d534 <__mdiff+0xf8>
 801d516:	f108 0103 	add.w	r1, r8, #3
 801d51a:	1b49      	subs	r1, r1, r5
 801d51c:	f021 0103 	bic.w	r1, r1, #3
 801d520:	3d03      	subs	r5, #3
 801d522:	45a8      	cmp	r8, r5
 801d524:	bf38      	it	cc
 801d526:	2100      	movcc	r1, #0
 801d528:	440b      	add	r3, r1
 801d52a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d52e:	b191      	cbz	r1, 801d556 <__mdiff+0x11a>
 801d530:	6117      	str	r7, [r2, #16]
 801d532:	e79d      	b.n	801d470 <__mdiff+0x34>
 801d534:	f854 1b04 	ldr.w	r1, [r4], #4
 801d538:	46e6      	mov	lr, ip
 801d53a:	0c08      	lsrs	r0, r1, #16
 801d53c:	fa1c fc81 	uxtah	ip, ip, r1
 801d540:	4471      	add	r1, lr
 801d542:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d546:	b289      	uxth	r1, r1
 801d548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d54c:	f846 1b04 	str.w	r1, [r6], #4
 801d550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d554:	e7dd      	b.n	801d512 <__mdiff+0xd6>
 801d556:	3f01      	subs	r7, #1
 801d558:	e7e7      	b.n	801d52a <__mdiff+0xee>
 801d55a:	bf00      	nop
 801d55c:	080221d4 	.word	0x080221d4
 801d560:	08022245 	.word	0x08022245

0801d564 <__ulp>:
 801d564:	b082      	sub	sp, #8
 801d566:	ed8d 0b00 	vstr	d0, [sp]
 801d56a:	9a01      	ldr	r2, [sp, #4]
 801d56c:	4b0f      	ldr	r3, [pc, #60]	@ (801d5ac <__ulp+0x48>)
 801d56e:	4013      	ands	r3, r2
 801d570:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d574:	2b00      	cmp	r3, #0
 801d576:	dc08      	bgt.n	801d58a <__ulp+0x26>
 801d578:	425b      	negs	r3, r3
 801d57a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d57e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d582:	da04      	bge.n	801d58e <__ulp+0x2a>
 801d584:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d588:	4113      	asrs	r3, r2
 801d58a:	2200      	movs	r2, #0
 801d58c:	e008      	b.n	801d5a0 <__ulp+0x3c>
 801d58e:	f1a2 0314 	sub.w	r3, r2, #20
 801d592:	2b1e      	cmp	r3, #30
 801d594:	bfda      	itte	le
 801d596:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d59a:	40da      	lsrle	r2, r3
 801d59c:	2201      	movgt	r2, #1
 801d59e:	2300      	movs	r3, #0
 801d5a0:	4619      	mov	r1, r3
 801d5a2:	4610      	mov	r0, r2
 801d5a4:	ec41 0b10 	vmov	d0, r0, r1
 801d5a8:	b002      	add	sp, #8
 801d5aa:	4770      	bx	lr
 801d5ac:	7ff00000 	.word	0x7ff00000

0801d5b0 <__b2d>:
 801d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5b4:	6906      	ldr	r6, [r0, #16]
 801d5b6:	f100 0814 	add.w	r8, r0, #20
 801d5ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d5be:	1f37      	subs	r7, r6, #4
 801d5c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d5c4:	4610      	mov	r0, r2
 801d5c6:	f7ff fd4b 	bl	801d060 <__hi0bits>
 801d5ca:	f1c0 0320 	rsb	r3, r0, #32
 801d5ce:	280a      	cmp	r0, #10
 801d5d0:	600b      	str	r3, [r1, #0]
 801d5d2:	491b      	ldr	r1, [pc, #108]	@ (801d640 <__b2d+0x90>)
 801d5d4:	dc15      	bgt.n	801d602 <__b2d+0x52>
 801d5d6:	f1c0 0c0b 	rsb	ip, r0, #11
 801d5da:	fa22 f30c 	lsr.w	r3, r2, ip
 801d5de:	45b8      	cmp	r8, r7
 801d5e0:	ea43 0501 	orr.w	r5, r3, r1
 801d5e4:	bf34      	ite	cc
 801d5e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d5ea:	2300      	movcs	r3, #0
 801d5ec:	3015      	adds	r0, #21
 801d5ee:	fa02 f000 	lsl.w	r0, r2, r0
 801d5f2:	fa23 f30c 	lsr.w	r3, r3, ip
 801d5f6:	4303      	orrs	r3, r0
 801d5f8:	461c      	mov	r4, r3
 801d5fa:	ec45 4b10 	vmov	d0, r4, r5
 801d5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d602:	45b8      	cmp	r8, r7
 801d604:	bf3a      	itte	cc
 801d606:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d60a:	f1a6 0708 	subcc.w	r7, r6, #8
 801d60e:	2300      	movcs	r3, #0
 801d610:	380b      	subs	r0, #11
 801d612:	d012      	beq.n	801d63a <__b2d+0x8a>
 801d614:	f1c0 0120 	rsb	r1, r0, #32
 801d618:	fa23 f401 	lsr.w	r4, r3, r1
 801d61c:	4082      	lsls	r2, r0
 801d61e:	4322      	orrs	r2, r4
 801d620:	4547      	cmp	r7, r8
 801d622:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d626:	bf8c      	ite	hi
 801d628:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d62c:	2200      	movls	r2, #0
 801d62e:	4083      	lsls	r3, r0
 801d630:	40ca      	lsrs	r2, r1
 801d632:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d636:	4313      	orrs	r3, r2
 801d638:	e7de      	b.n	801d5f8 <__b2d+0x48>
 801d63a:	ea42 0501 	orr.w	r5, r2, r1
 801d63e:	e7db      	b.n	801d5f8 <__b2d+0x48>
 801d640:	3ff00000 	.word	0x3ff00000

0801d644 <__d2b>:
 801d644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d648:	460f      	mov	r7, r1
 801d64a:	2101      	movs	r1, #1
 801d64c:	ec59 8b10 	vmov	r8, r9, d0
 801d650:	4616      	mov	r6, r2
 801d652:	f7ff fc13 	bl	801ce7c <_Balloc>
 801d656:	4604      	mov	r4, r0
 801d658:	b930      	cbnz	r0, 801d668 <__d2b+0x24>
 801d65a:	4602      	mov	r2, r0
 801d65c:	4b23      	ldr	r3, [pc, #140]	@ (801d6ec <__d2b+0xa8>)
 801d65e:	4824      	ldr	r0, [pc, #144]	@ (801d6f0 <__d2b+0xac>)
 801d660:	f240 310f 	movw	r1, #783	@ 0x30f
 801d664:	f7fe fa0a 	bl	801ba7c <__assert_func>
 801d668:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d66c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d670:	b10d      	cbz	r5, 801d676 <__d2b+0x32>
 801d672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d676:	9301      	str	r3, [sp, #4]
 801d678:	f1b8 0300 	subs.w	r3, r8, #0
 801d67c:	d023      	beq.n	801d6c6 <__d2b+0x82>
 801d67e:	4668      	mov	r0, sp
 801d680:	9300      	str	r3, [sp, #0]
 801d682:	f7ff fd0c 	bl	801d09e <__lo0bits>
 801d686:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d68a:	b1d0      	cbz	r0, 801d6c2 <__d2b+0x7e>
 801d68c:	f1c0 0320 	rsb	r3, r0, #32
 801d690:	fa02 f303 	lsl.w	r3, r2, r3
 801d694:	430b      	orrs	r3, r1
 801d696:	40c2      	lsrs	r2, r0
 801d698:	6163      	str	r3, [r4, #20]
 801d69a:	9201      	str	r2, [sp, #4]
 801d69c:	9b01      	ldr	r3, [sp, #4]
 801d69e:	61a3      	str	r3, [r4, #24]
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	bf0c      	ite	eq
 801d6a4:	2201      	moveq	r2, #1
 801d6a6:	2202      	movne	r2, #2
 801d6a8:	6122      	str	r2, [r4, #16]
 801d6aa:	b1a5      	cbz	r5, 801d6d6 <__d2b+0x92>
 801d6ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d6b0:	4405      	add	r5, r0
 801d6b2:	603d      	str	r5, [r7, #0]
 801d6b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d6b8:	6030      	str	r0, [r6, #0]
 801d6ba:	4620      	mov	r0, r4
 801d6bc:	b003      	add	sp, #12
 801d6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6c2:	6161      	str	r1, [r4, #20]
 801d6c4:	e7ea      	b.n	801d69c <__d2b+0x58>
 801d6c6:	a801      	add	r0, sp, #4
 801d6c8:	f7ff fce9 	bl	801d09e <__lo0bits>
 801d6cc:	9b01      	ldr	r3, [sp, #4]
 801d6ce:	6163      	str	r3, [r4, #20]
 801d6d0:	3020      	adds	r0, #32
 801d6d2:	2201      	movs	r2, #1
 801d6d4:	e7e8      	b.n	801d6a8 <__d2b+0x64>
 801d6d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d6da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d6de:	6038      	str	r0, [r7, #0]
 801d6e0:	6918      	ldr	r0, [r3, #16]
 801d6e2:	f7ff fcbd 	bl	801d060 <__hi0bits>
 801d6e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d6ea:	e7e5      	b.n	801d6b8 <__d2b+0x74>
 801d6ec:	080221d4 	.word	0x080221d4
 801d6f0:	08022245 	.word	0x08022245

0801d6f4 <__ratio>:
 801d6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6f8:	b085      	sub	sp, #20
 801d6fa:	e9cd 1000 	strd	r1, r0, [sp]
 801d6fe:	a902      	add	r1, sp, #8
 801d700:	f7ff ff56 	bl	801d5b0 <__b2d>
 801d704:	9800      	ldr	r0, [sp, #0]
 801d706:	a903      	add	r1, sp, #12
 801d708:	ec55 4b10 	vmov	r4, r5, d0
 801d70c:	f7ff ff50 	bl	801d5b0 <__b2d>
 801d710:	9b01      	ldr	r3, [sp, #4]
 801d712:	6919      	ldr	r1, [r3, #16]
 801d714:	9b00      	ldr	r3, [sp, #0]
 801d716:	691b      	ldr	r3, [r3, #16]
 801d718:	1ac9      	subs	r1, r1, r3
 801d71a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d71e:	1a9b      	subs	r3, r3, r2
 801d720:	ec5b ab10 	vmov	sl, fp, d0
 801d724:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d728:	2b00      	cmp	r3, #0
 801d72a:	bfce      	itee	gt
 801d72c:	462a      	movgt	r2, r5
 801d72e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d732:	465a      	movle	r2, fp
 801d734:	462f      	mov	r7, r5
 801d736:	46d9      	mov	r9, fp
 801d738:	bfcc      	ite	gt
 801d73a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d73e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d742:	464b      	mov	r3, r9
 801d744:	4652      	mov	r2, sl
 801d746:	4620      	mov	r0, r4
 801d748:	4639      	mov	r1, r7
 801d74a:	f7e3 f857 	bl	80007fc <__aeabi_ddiv>
 801d74e:	ec41 0b10 	vmov	d0, r0, r1
 801d752:	b005      	add	sp, #20
 801d754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d758 <__copybits>:
 801d758:	3901      	subs	r1, #1
 801d75a:	b570      	push	{r4, r5, r6, lr}
 801d75c:	1149      	asrs	r1, r1, #5
 801d75e:	6914      	ldr	r4, [r2, #16]
 801d760:	3101      	adds	r1, #1
 801d762:	f102 0314 	add.w	r3, r2, #20
 801d766:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d76a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d76e:	1f05      	subs	r5, r0, #4
 801d770:	42a3      	cmp	r3, r4
 801d772:	d30c      	bcc.n	801d78e <__copybits+0x36>
 801d774:	1aa3      	subs	r3, r4, r2
 801d776:	3b11      	subs	r3, #17
 801d778:	f023 0303 	bic.w	r3, r3, #3
 801d77c:	3211      	adds	r2, #17
 801d77e:	42a2      	cmp	r2, r4
 801d780:	bf88      	it	hi
 801d782:	2300      	movhi	r3, #0
 801d784:	4418      	add	r0, r3
 801d786:	2300      	movs	r3, #0
 801d788:	4288      	cmp	r0, r1
 801d78a:	d305      	bcc.n	801d798 <__copybits+0x40>
 801d78c:	bd70      	pop	{r4, r5, r6, pc}
 801d78e:	f853 6b04 	ldr.w	r6, [r3], #4
 801d792:	f845 6f04 	str.w	r6, [r5, #4]!
 801d796:	e7eb      	b.n	801d770 <__copybits+0x18>
 801d798:	f840 3b04 	str.w	r3, [r0], #4
 801d79c:	e7f4      	b.n	801d788 <__copybits+0x30>

0801d79e <__any_on>:
 801d79e:	f100 0214 	add.w	r2, r0, #20
 801d7a2:	6900      	ldr	r0, [r0, #16]
 801d7a4:	114b      	asrs	r3, r1, #5
 801d7a6:	4298      	cmp	r0, r3
 801d7a8:	b510      	push	{r4, lr}
 801d7aa:	db11      	blt.n	801d7d0 <__any_on+0x32>
 801d7ac:	dd0a      	ble.n	801d7c4 <__any_on+0x26>
 801d7ae:	f011 011f 	ands.w	r1, r1, #31
 801d7b2:	d007      	beq.n	801d7c4 <__any_on+0x26>
 801d7b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d7b8:	fa24 f001 	lsr.w	r0, r4, r1
 801d7bc:	fa00 f101 	lsl.w	r1, r0, r1
 801d7c0:	428c      	cmp	r4, r1
 801d7c2:	d10b      	bne.n	801d7dc <__any_on+0x3e>
 801d7c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d7c8:	4293      	cmp	r3, r2
 801d7ca:	d803      	bhi.n	801d7d4 <__any_on+0x36>
 801d7cc:	2000      	movs	r0, #0
 801d7ce:	bd10      	pop	{r4, pc}
 801d7d0:	4603      	mov	r3, r0
 801d7d2:	e7f7      	b.n	801d7c4 <__any_on+0x26>
 801d7d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d7d8:	2900      	cmp	r1, #0
 801d7da:	d0f5      	beq.n	801d7c8 <__any_on+0x2a>
 801d7dc:	2001      	movs	r0, #1
 801d7de:	e7f6      	b.n	801d7ce <__any_on+0x30>

0801d7e0 <__ascii_wctomb>:
 801d7e0:	4603      	mov	r3, r0
 801d7e2:	4608      	mov	r0, r1
 801d7e4:	b141      	cbz	r1, 801d7f8 <__ascii_wctomb+0x18>
 801d7e6:	2aff      	cmp	r2, #255	@ 0xff
 801d7e8:	d904      	bls.n	801d7f4 <__ascii_wctomb+0x14>
 801d7ea:	228a      	movs	r2, #138	@ 0x8a
 801d7ec:	601a      	str	r2, [r3, #0]
 801d7ee:	f04f 30ff 	mov.w	r0, #4294967295
 801d7f2:	4770      	bx	lr
 801d7f4:	700a      	strb	r2, [r1, #0]
 801d7f6:	2001      	movs	r0, #1
 801d7f8:	4770      	bx	lr

0801d7fa <__ssputs_r>:
 801d7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d7fe:	688e      	ldr	r6, [r1, #8]
 801d800:	461f      	mov	r7, r3
 801d802:	42be      	cmp	r6, r7
 801d804:	680b      	ldr	r3, [r1, #0]
 801d806:	4682      	mov	sl, r0
 801d808:	460c      	mov	r4, r1
 801d80a:	4690      	mov	r8, r2
 801d80c:	d82d      	bhi.n	801d86a <__ssputs_r+0x70>
 801d80e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d812:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d816:	d026      	beq.n	801d866 <__ssputs_r+0x6c>
 801d818:	6965      	ldr	r5, [r4, #20]
 801d81a:	6909      	ldr	r1, [r1, #16]
 801d81c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d820:	eba3 0901 	sub.w	r9, r3, r1
 801d824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d828:	1c7b      	adds	r3, r7, #1
 801d82a:	444b      	add	r3, r9
 801d82c:	106d      	asrs	r5, r5, #1
 801d82e:	429d      	cmp	r5, r3
 801d830:	bf38      	it	cc
 801d832:	461d      	movcc	r5, r3
 801d834:	0553      	lsls	r3, r2, #21
 801d836:	d527      	bpl.n	801d888 <__ssputs_r+0x8e>
 801d838:	4629      	mov	r1, r5
 801d83a:	f7fc f8a1 	bl	8019980 <_malloc_r>
 801d83e:	4606      	mov	r6, r0
 801d840:	b360      	cbz	r0, 801d89c <__ssputs_r+0xa2>
 801d842:	6921      	ldr	r1, [r4, #16]
 801d844:	464a      	mov	r2, r9
 801d846:	f7fe f8fc 	bl	801ba42 <memcpy>
 801d84a:	89a3      	ldrh	r3, [r4, #12]
 801d84c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d854:	81a3      	strh	r3, [r4, #12]
 801d856:	6126      	str	r6, [r4, #16]
 801d858:	6165      	str	r5, [r4, #20]
 801d85a:	444e      	add	r6, r9
 801d85c:	eba5 0509 	sub.w	r5, r5, r9
 801d860:	6026      	str	r6, [r4, #0]
 801d862:	60a5      	str	r5, [r4, #8]
 801d864:	463e      	mov	r6, r7
 801d866:	42be      	cmp	r6, r7
 801d868:	d900      	bls.n	801d86c <__ssputs_r+0x72>
 801d86a:	463e      	mov	r6, r7
 801d86c:	6820      	ldr	r0, [r4, #0]
 801d86e:	4632      	mov	r2, r6
 801d870:	4641      	mov	r1, r8
 801d872:	f000 fbad 	bl	801dfd0 <memmove>
 801d876:	68a3      	ldr	r3, [r4, #8]
 801d878:	1b9b      	subs	r3, r3, r6
 801d87a:	60a3      	str	r3, [r4, #8]
 801d87c:	6823      	ldr	r3, [r4, #0]
 801d87e:	4433      	add	r3, r6
 801d880:	6023      	str	r3, [r4, #0]
 801d882:	2000      	movs	r0, #0
 801d884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d888:	462a      	mov	r2, r5
 801d88a:	f000 fbd6 	bl	801e03a <_realloc_r>
 801d88e:	4606      	mov	r6, r0
 801d890:	2800      	cmp	r0, #0
 801d892:	d1e0      	bne.n	801d856 <__ssputs_r+0x5c>
 801d894:	6921      	ldr	r1, [r4, #16]
 801d896:	4650      	mov	r0, sl
 801d898:	f7fe ff5a 	bl	801c750 <_free_r>
 801d89c:	230c      	movs	r3, #12
 801d89e:	f8ca 3000 	str.w	r3, [sl]
 801d8a2:	89a3      	ldrh	r3, [r4, #12]
 801d8a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d8a8:	81a3      	strh	r3, [r4, #12]
 801d8aa:	f04f 30ff 	mov.w	r0, #4294967295
 801d8ae:	e7e9      	b.n	801d884 <__ssputs_r+0x8a>

0801d8b0 <_svfiprintf_r>:
 801d8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8b4:	4698      	mov	r8, r3
 801d8b6:	898b      	ldrh	r3, [r1, #12]
 801d8b8:	061b      	lsls	r3, r3, #24
 801d8ba:	b09d      	sub	sp, #116	@ 0x74
 801d8bc:	4607      	mov	r7, r0
 801d8be:	460d      	mov	r5, r1
 801d8c0:	4614      	mov	r4, r2
 801d8c2:	d510      	bpl.n	801d8e6 <_svfiprintf_r+0x36>
 801d8c4:	690b      	ldr	r3, [r1, #16]
 801d8c6:	b973      	cbnz	r3, 801d8e6 <_svfiprintf_r+0x36>
 801d8c8:	2140      	movs	r1, #64	@ 0x40
 801d8ca:	f7fc f859 	bl	8019980 <_malloc_r>
 801d8ce:	6028      	str	r0, [r5, #0]
 801d8d0:	6128      	str	r0, [r5, #16]
 801d8d2:	b930      	cbnz	r0, 801d8e2 <_svfiprintf_r+0x32>
 801d8d4:	230c      	movs	r3, #12
 801d8d6:	603b      	str	r3, [r7, #0]
 801d8d8:	f04f 30ff 	mov.w	r0, #4294967295
 801d8dc:	b01d      	add	sp, #116	@ 0x74
 801d8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8e2:	2340      	movs	r3, #64	@ 0x40
 801d8e4:	616b      	str	r3, [r5, #20]
 801d8e6:	2300      	movs	r3, #0
 801d8e8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8ea:	2320      	movs	r3, #32
 801d8ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d8f0:	f8cd 800c 	str.w	r8, [sp, #12]
 801d8f4:	2330      	movs	r3, #48	@ 0x30
 801d8f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801da94 <_svfiprintf_r+0x1e4>
 801d8fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d8fe:	f04f 0901 	mov.w	r9, #1
 801d902:	4623      	mov	r3, r4
 801d904:	469a      	mov	sl, r3
 801d906:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d90a:	b10a      	cbz	r2, 801d910 <_svfiprintf_r+0x60>
 801d90c:	2a25      	cmp	r2, #37	@ 0x25
 801d90e:	d1f9      	bne.n	801d904 <_svfiprintf_r+0x54>
 801d910:	ebba 0b04 	subs.w	fp, sl, r4
 801d914:	d00b      	beq.n	801d92e <_svfiprintf_r+0x7e>
 801d916:	465b      	mov	r3, fp
 801d918:	4622      	mov	r2, r4
 801d91a:	4629      	mov	r1, r5
 801d91c:	4638      	mov	r0, r7
 801d91e:	f7ff ff6c 	bl	801d7fa <__ssputs_r>
 801d922:	3001      	adds	r0, #1
 801d924:	f000 80a7 	beq.w	801da76 <_svfiprintf_r+0x1c6>
 801d928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d92a:	445a      	add	r2, fp
 801d92c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d92e:	f89a 3000 	ldrb.w	r3, [sl]
 801d932:	2b00      	cmp	r3, #0
 801d934:	f000 809f 	beq.w	801da76 <_svfiprintf_r+0x1c6>
 801d938:	2300      	movs	r3, #0
 801d93a:	f04f 32ff 	mov.w	r2, #4294967295
 801d93e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d942:	f10a 0a01 	add.w	sl, sl, #1
 801d946:	9304      	str	r3, [sp, #16]
 801d948:	9307      	str	r3, [sp, #28]
 801d94a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d94e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d950:	4654      	mov	r4, sl
 801d952:	2205      	movs	r2, #5
 801d954:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d958:	484e      	ldr	r0, [pc, #312]	@ (801da94 <_svfiprintf_r+0x1e4>)
 801d95a:	f7e2 fc11 	bl	8000180 <memchr>
 801d95e:	9a04      	ldr	r2, [sp, #16]
 801d960:	b9d8      	cbnz	r0, 801d99a <_svfiprintf_r+0xea>
 801d962:	06d0      	lsls	r0, r2, #27
 801d964:	bf44      	itt	mi
 801d966:	2320      	movmi	r3, #32
 801d968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d96c:	0711      	lsls	r1, r2, #28
 801d96e:	bf44      	itt	mi
 801d970:	232b      	movmi	r3, #43	@ 0x2b
 801d972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d976:	f89a 3000 	ldrb.w	r3, [sl]
 801d97a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d97c:	d015      	beq.n	801d9aa <_svfiprintf_r+0xfa>
 801d97e:	9a07      	ldr	r2, [sp, #28]
 801d980:	4654      	mov	r4, sl
 801d982:	2000      	movs	r0, #0
 801d984:	f04f 0c0a 	mov.w	ip, #10
 801d988:	4621      	mov	r1, r4
 801d98a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d98e:	3b30      	subs	r3, #48	@ 0x30
 801d990:	2b09      	cmp	r3, #9
 801d992:	d94b      	bls.n	801da2c <_svfiprintf_r+0x17c>
 801d994:	b1b0      	cbz	r0, 801d9c4 <_svfiprintf_r+0x114>
 801d996:	9207      	str	r2, [sp, #28]
 801d998:	e014      	b.n	801d9c4 <_svfiprintf_r+0x114>
 801d99a:	eba0 0308 	sub.w	r3, r0, r8
 801d99e:	fa09 f303 	lsl.w	r3, r9, r3
 801d9a2:	4313      	orrs	r3, r2
 801d9a4:	9304      	str	r3, [sp, #16]
 801d9a6:	46a2      	mov	sl, r4
 801d9a8:	e7d2      	b.n	801d950 <_svfiprintf_r+0xa0>
 801d9aa:	9b03      	ldr	r3, [sp, #12]
 801d9ac:	1d19      	adds	r1, r3, #4
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	9103      	str	r1, [sp, #12]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	bfbb      	ittet	lt
 801d9b6:	425b      	neglt	r3, r3
 801d9b8:	f042 0202 	orrlt.w	r2, r2, #2
 801d9bc:	9307      	strge	r3, [sp, #28]
 801d9be:	9307      	strlt	r3, [sp, #28]
 801d9c0:	bfb8      	it	lt
 801d9c2:	9204      	strlt	r2, [sp, #16]
 801d9c4:	7823      	ldrb	r3, [r4, #0]
 801d9c6:	2b2e      	cmp	r3, #46	@ 0x2e
 801d9c8:	d10a      	bne.n	801d9e0 <_svfiprintf_r+0x130>
 801d9ca:	7863      	ldrb	r3, [r4, #1]
 801d9cc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d9ce:	d132      	bne.n	801da36 <_svfiprintf_r+0x186>
 801d9d0:	9b03      	ldr	r3, [sp, #12]
 801d9d2:	1d1a      	adds	r2, r3, #4
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	9203      	str	r2, [sp, #12]
 801d9d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d9dc:	3402      	adds	r4, #2
 801d9de:	9305      	str	r3, [sp, #20]
 801d9e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801daa4 <_svfiprintf_r+0x1f4>
 801d9e4:	7821      	ldrb	r1, [r4, #0]
 801d9e6:	2203      	movs	r2, #3
 801d9e8:	4650      	mov	r0, sl
 801d9ea:	f7e2 fbc9 	bl	8000180 <memchr>
 801d9ee:	b138      	cbz	r0, 801da00 <_svfiprintf_r+0x150>
 801d9f0:	9b04      	ldr	r3, [sp, #16]
 801d9f2:	eba0 000a 	sub.w	r0, r0, sl
 801d9f6:	2240      	movs	r2, #64	@ 0x40
 801d9f8:	4082      	lsls	r2, r0
 801d9fa:	4313      	orrs	r3, r2
 801d9fc:	3401      	adds	r4, #1
 801d9fe:	9304      	str	r3, [sp, #16]
 801da00:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da04:	4824      	ldr	r0, [pc, #144]	@ (801da98 <_svfiprintf_r+0x1e8>)
 801da06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801da0a:	2206      	movs	r2, #6
 801da0c:	f7e2 fbb8 	bl	8000180 <memchr>
 801da10:	2800      	cmp	r0, #0
 801da12:	d036      	beq.n	801da82 <_svfiprintf_r+0x1d2>
 801da14:	4b21      	ldr	r3, [pc, #132]	@ (801da9c <_svfiprintf_r+0x1ec>)
 801da16:	bb1b      	cbnz	r3, 801da60 <_svfiprintf_r+0x1b0>
 801da18:	9b03      	ldr	r3, [sp, #12]
 801da1a:	3307      	adds	r3, #7
 801da1c:	f023 0307 	bic.w	r3, r3, #7
 801da20:	3308      	adds	r3, #8
 801da22:	9303      	str	r3, [sp, #12]
 801da24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da26:	4433      	add	r3, r6
 801da28:	9309      	str	r3, [sp, #36]	@ 0x24
 801da2a:	e76a      	b.n	801d902 <_svfiprintf_r+0x52>
 801da2c:	fb0c 3202 	mla	r2, ip, r2, r3
 801da30:	460c      	mov	r4, r1
 801da32:	2001      	movs	r0, #1
 801da34:	e7a8      	b.n	801d988 <_svfiprintf_r+0xd8>
 801da36:	2300      	movs	r3, #0
 801da38:	3401      	adds	r4, #1
 801da3a:	9305      	str	r3, [sp, #20]
 801da3c:	4619      	mov	r1, r3
 801da3e:	f04f 0c0a 	mov.w	ip, #10
 801da42:	4620      	mov	r0, r4
 801da44:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da48:	3a30      	subs	r2, #48	@ 0x30
 801da4a:	2a09      	cmp	r2, #9
 801da4c:	d903      	bls.n	801da56 <_svfiprintf_r+0x1a6>
 801da4e:	2b00      	cmp	r3, #0
 801da50:	d0c6      	beq.n	801d9e0 <_svfiprintf_r+0x130>
 801da52:	9105      	str	r1, [sp, #20]
 801da54:	e7c4      	b.n	801d9e0 <_svfiprintf_r+0x130>
 801da56:	fb0c 2101 	mla	r1, ip, r1, r2
 801da5a:	4604      	mov	r4, r0
 801da5c:	2301      	movs	r3, #1
 801da5e:	e7f0      	b.n	801da42 <_svfiprintf_r+0x192>
 801da60:	ab03      	add	r3, sp, #12
 801da62:	9300      	str	r3, [sp, #0]
 801da64:	462a      	mov	r2, r5
 801da66:	4b0e      	ldr	r3, [pc, #56]	@ (801daa0 <_svfiprintf_r+0x1f0>)
 801da68:	a904      	add	r1, sp, #16
 801da6a:	4638      	mov	r0, r7
 801da6c:	f7fc ffa8 	bl	801a9c0 <_printf_float>
 801da70:	1c42      	adds	r2, r0, #1
 801da72:	4606      	mov	r6, r0
 801da74:	d1d6      	bne.n	801da24 <_svfiprintf_r+0x174>
 801da76:	89ab      	ldrh	r3, [r5, #12]
 801da78:	065b      	lsls	r3, r3, #25
 801da7a:	f53f af2d 	bmi.w	801d8d8 <_svfiprintf_r+0x28>
 801da7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801da80:	e72c      	b.n	801d8dc <_svfiprintf_r+0x2c>
 801da82:	ab03      	add	r3, sp, #12
 801da84:	9300      	str	r3, [sp, #0]
 801da86:	462a      	mov	r2, r5
 801da88:	4b05      	ldr	r3, [pc, #20]	@ (801daa0 <_svfiprintf_r+0x1f0>)
 801da8a:	a904      	add	r1, sp, #16
 801da8c:	4638      	mov	r0, r7
 801da8e:	f7fd fa2f 	bl	801aef0 <_printf_i>
 801da92:	e7ed      	b.n	801da70 <_svfiprintf_r+0x1c0>
 801da94:	080223a0 	.word	0x080223a0
 801da98:	080223aa 	.word	0x080223aa
 801da9c:	0801a9c1 	.word	0x0801a9c1
 801daa0:	0801d7fb 	.word	0x0801d7fb
 801daa4:	080223a6 	.word	0x080223a6

0801daa8 <__sfputc_r>:
 801daa8:	6893      	ldr	r3, [r2, #8]
 801daaa:	3b01      	subs	r3, #1
 801daac:	2b00      	cmp	r3, #0
 801daae:	b410      	push	{r4}
 801dab0:	6093      	str	r3, [r2, #8]
 801dab2:	da08      	bge.n	801dac6 <__sfputc_r+0x1e>
 801dab4:	6994      	ldr	r4, [r2, #24]
 801dab6:	42a3      	cmp	r3, r4
 801dab8:	db01      	blt.n	801dabe <__sfputc_r+0x16>
 801daba:	290a      	cmp	r1, #10
 801dabc:	d103      	bne.n	801dac6 <__sfputc_r+0x1e>
 801dabe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dac2:	f000 b9f1 	b.w	801dea8 <__swbuf_r>
 801dac6:	6813      	ldr	r3, [r2, #0]
 801dac8:	1c58      	adds	r0, r3, #1
 801daca:	6010      	str	r0, [r2, #0]
 801dacc:	7019      	strb	r1, [r3, #0]
 801dace:	4608      	mov	r0, r1
 801dad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dad4:	4770      	bx	lr

0801dad6 <__sfputs_r>:
 801dad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dad8:	4606      	mov	r6, r0
 801dada:	460f      	mov	r7, r1
 801dadc:	4614      	mov	r4, r2
 801dade:	18d5      	adds	r5, r2, r3
 801dae0:	42ac      	cmp	r4, r5
 801dae2:	d101      	bne.n	801dae8 <__sfputs_r+0x12>
 801dae4:	2000      	movs	r0, #0
 801dae6:	e007      	b.n	801daf8 <__sfputs_r+0x22>
 801dae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801daec:	463a      	mov	r2, r7
 801daee:	4630      	mov	r0, r6
 801daf0:	f7ff ffda 	bl	801daa8 <__sfputc_r>
 801daf4:	1c43      	adds	r3, r0, #1
 801daf6:	d1f3      	bne.n	801dae0 <__sfputs_r+0xa>
 801daf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dafc <_vfiprintf_r>:
 801dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db00:	460d      	mov	r5, r1
 801db02:	b09d      	sub	sp, #116	@ 0x74
 801db04:	4614      	mov	r4, r2
 801db06:	4698      	mov	r8, r3
 801db08:	4606      	mov	r6, r0
 801db0a:	b118      	cbz	r0, 801db14 <_vfiprintf_r+0x18>
 801db0c:	6a03      	ldr	r3, [r0, #32]
 801db0e:	b90b      	cbnz	r3, 801db14 <_vfiprintf_r+0x18>
 801db10:	f7fd fdae 	bl	801b670 <__sinit>
 801db14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801db16:	07d9      	lsls	r1, r3, #31
 801db18:	d405      	bmi.n	801db26 <_vfiprintf_r+0x2a>
 801db1a:	89ab      	ldrh	r3, [r5, #12]
 801db1c:	059a      	lsls	r2, r3, #22
 801db1e:	d402      	bmi.n	801db26 <_vfiprintf_r+0x2a>
 801db20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801db22:	f7fd ff84 	bl	801ba2e <__retarget_lock_acquire_recursive>
 801db26:	89ab      	ldrh	r3, [r5, #12]
 801db28:	071b      	lsls	r3, r3, #28
 801db2a:	d501      	bpl.n	801db30 <_vfiprintf_r+0x34>
 801db2c:	692b      	ldr	r3, [r5, #16]
 801db2e:	b99b      	cbnz	r3, 801db58 <_vfiprintf_r+0x5c>
 801db30:	4629      	mov	r1, r5
 801db32:	4630      	mov	r0, r6
 801db34:	f000 f9f6 	bl	801df24 <__swsetup_r>
 801db38:	b170      	cbz	r0, 801db58 <_vfiprintf_r+0x5c>
 801db3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801db3c:	07dc      	lsls	r4, r3, #31
 801db3e:	d504      	bpl.n	801db4a <_vfiprintf_r+0x4e>
 801db40:	f04f 30ff 	mov.w	r0, #4294967295
 801db44:	b01d      	add	sp, #116	@ 0x74
 801db46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db4a:	89ab      	ldrh	r3, [r5, #12]
 801db4c:	0598      	lsls	r0, r3, #22
 801db4e:	d4f7      	bmi.n	801db40 <_vfiprintf_r+0x44>
 801db50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801db52:	f7fd ff6d 	bl	801ba30 <__retarget_lock_release_recursive>
 801db56:	e7f3      	b.n	801db40 <_vfiprintf_r+0x44>
 801db58:	2300      	movs	r3, #0
 801db5a:	9309      	str	r3, [sp, #36]	@ 0x24
 801db5c:	2320      	movs	r3, #32
 801db5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801db62:	f8cd 800c 	str.w	r8, [sp, #12]
 801db66:	2330      	movs	r3, #48	@ 0x30
 801db68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dd18 <_vfiprintf_r+0x21c>
 801db6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801db70:	f04f 0901 	mov.w	r9, #1
 801db74:	4623      	mov	r3, r4
 801db76:	469a      	mov	sl, r3
 801db78:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db7c:	b10a      	cbz	r2, 801db82 <_vfiprintf_r+0x86>
 801db7e:	2a25      	cmp	r2, #37	@ 0x25
 801db80:	d1f9      	bne.n	801db76 <_vfiprintf_r+0x7a>
 801db82:	ebba 0b04 	subs.w	fp, sl, r4
 801db86:	d00b      	beq.n	801dba0 <_vfiprintf_r+0xa4>
 801db88:	465b      	mov	r3, fp
 801db8a:	4622      	mov	r2, r4
 801db8c:	4629      	mov	r1, r5
 801db8e:	4630      	mov	r0, r6
 801db90:	f7ff ffa1 	bl	801dad6 <__sfputs_r>
 801db94:	3001      	adds	r0, #1
 801db96:	f000 80a7 	beq.w	801dce8 <_vfiprintf_r+0x1ec>
 801db9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db9c:	445a      	add	r2, fp
 801db9e:	9209      	str	r2, [sp, #36]	@ 0x24
 801dba0:	f89a 3000 	ldrb.w	r3, [sl]
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	f000 809f 	beq.w	801dce8 <_vfiprintf_r+0x1ec>
 801dbaa:	2300      	movs	r3, #0
 801dbac:	f04f 32ff 	mov.w	r2, #4294967295
 801dbb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dbb4:	f10a 0a01 	add.w	sl, sl, #1
 801dbb8:	9304      	str	r3, [sp, #16]
 801dbba:	9307      	str	r3, [sp, #28]
 801dbbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dbc0:	931a      	str	r3, [sp, #104]	@ 0x68
 801dbc2:	4654      	mov	r4, sl
 801dbc4:	2205      	movs	r2, #5
 801dbc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbca:	4853      	ldr	r0, [pc, #332]	@ (801dd18 <_vfiprintf_r+0x21c>)
 801dbcc:	f7e2 fad8 	bl	8000180 <memchr>
 801dbd0:	9a04      	ldr	r2, [sp, #16]
 801dbd2:	b9d8      	cbnz	r0, 801dc0c <_vfiprintf_r+0x110>
 801dbd4:	06d1      	lsls	r1, r2, #27
 801dbd6:	bf44      	itt	mi
 801dbd8:	2320      	movmi	r3, #32
 801dbda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dbde:	0713      	lsls	r3, r2, #28
 801dbe0:	bf44      	itt	mi
 801dbe2:	232b      	movmi	r3, #43	@ 0x2b
 801dbe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dbe8:	f89a 3000 	ldrb.w	r3, [sl]
 801dbec:	2b2a      	cmp	r3, #42	@ 0x2a
 801dbee:	d015      	beq.n	801dc1c <_vfiprintf_r+0x120>
 801dbf0:	9a07      	ldr	r2, [sp, #28]
 801dbf2:	4654      	mov	r4, sl
 801dbf4:	2000      	movs	r0, #0
 801dbf6:	f04f 0c0a 	mov.w	ip, #10
 801dbfa:	4621      	mov	r1, r4
 801dbfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc00:	3b30      	subs	r3, #48	@ 0x30
 801dc02:	2b09      	cmp	r3, #9
 801dc04:	d94b      	bls.n	801dc9e <_vfiprintf_r+0x1a2>
 801dc06:	b1b0      	cbz	r0, 801dc36 <_vfiprintf_r+0x13a>
 801dc08:	9207      	str	r2, [sp, #28]
 801dc0a:	e014      	b.n	801dc36 <_vfiprintf_r+0x13a>
 801dc0c:	eba0 0308 	sub.w	r3, r0, r8
 801dc10:	fa09 f303 	lsl.w	r3, r9, r3
 801dc14:	4313      	orrs	r3, r2
 801dc16:	9304      	str	r3, [sp, #16]
 801dc18:	46a2      	mov	sl, r4
 801dc1a:	e7d2      	b.n	801dbc2 <_vfiprintf_r+0xc6>
 801dc1c:	9b03      	ldr	r3, [sp, #12]
 801dc1e:	1d19      	adds	r1, r3, #4
 801dc20:	681b      	ldr	r3, [r3, #0]
 801dc22:	9103      	str	r1, [sp, #12]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	bfbb      	ittet	lt
 801dc28:	425b      	neglt	r3, r3
 801dc2a:	f042 0202 	orrlt.w	r2, r2, #2
 801dc2e:	9307      	strge	r3, [sp, #28]
 801dc30:	9307      	strlt	r3, [sp, #28]
 801dc32:	bfb8      	it	lt
 801dc34:	9204      	strlt	r2, [sp, #16]
 801dc36:	7823      	ldrb	r3, [r4, #0]
 801dc38:	2b2e      	cmp	r3, #46	@ 0x2e
 801dc3a:	d10a      	bne.n	801dc52 <_vfiprintf_r+0x156>
 801dc3c:	7863      	ldrb	r3, [r4, #1]
 801dc3e:	2b2a      	cmp	r3, #42	@ 0x2a
 801dc40:	d132      	bne.n	801dca8 <_vfiprintf_r+0x1ac>
 801dc42:	9b03      	ldr	r3, [sp, #12]
 801dc44:	1d1a      	adds	r2, r3, #4
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	9203      	str	r2, [sp, #12]
 801dc4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dc4e:	3402      	adds	r4, #2
 801dc50:	9305      	str	r3, [sp, #20]
 801dc52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dd28 <_vfiprintf_r+0x22c>
 801dc56:	7821      	ldrb	r1, [r4, #0]
 801dc58:	2203      	movs	r2, #3
 801dc5a:	4650      	mov	r0, sl
 801dc5c:	f7e2 fa90 	bl	8000180 <memchr>
 801dc60:	b138      	cbz	r0, 801dc72 <_vfiprintf_r+0x176>
 801dc62:	9b04      	ldr	r3, [sp, #16]
 801dc64:	eba0 000a 	sub.w	r0, r0, sl
 801dc68:	2240      	movs	r2, #64	@ 0x40
 801dc6a:	4082      	lsls	r2, r0
 801dc6c:	4313      	orrs	r3, r2
 801dc6e:	3401      	adds	r4, #1
 801dc70:	9304      	str	r3, [sp, #16]
 801dc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc76:	4829      	ldr	r0, [pc, #164]	@ (801dd1c <_vfiprintf_r+0x220>)
 801dc78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dc7c:	2206      	movs	r2, #6
 801dc7e:	f7e2 fa7f 	bl	8000180 <memchr>
 801dc82:	2800      	cmp	r0, #0
 801dc84:	d03f      	beq.n	801dd06 <_vfiprintf_r+0x20a>
 801dc86:	4b26      	ldr	r3, [pc, #152]	@ (801dd20 <_vfiprintf_r+0x224>)
 801dc88:	bb1b      	cbnz	r3, 801dcd2 <_vfiprintf_r+0x1d6>
 801dc8a:	9b03      	ldr	r3, [sp, #12]
 801dc8c:	3307      	adds	r3, #7
 801dc8e:	f023 0307 	bic.w	r3, r3, #7
 801dc92:	3308      	adds	r3, #8
 801dc94:	9303      	str	r3, [sp, #12]
 801dc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc98:	443b      	add	r3, r7
 801dc9a:	9309      	str	r3, [sp, #36]	@ 0x24
 801dc9c:	e76a      	b.n	801db74 <_vfiprintf_r+0x78>
 801dc9e:	fb0c 3202 	mla	r2, ip, r2, r3
 801dca2:	460c      	mov	r4, r1
 801dca4:	2001      	movs	r0, #1
 801dca6:	e7a8      	b.n	801dbfa <_vfiprintf_r+0xfe>
 801dca8:	2300      	movs	r3, #0
 801dcaa:	3401      	adds	r4, #1
 801dcac:	9305      	str	r3, [sp, #20]
 801dcae:	4619      	mov	r1, r3
 801dcb0:	f04f 0c0a 	mov.w	ip, #10
 801dcb4:	4620      	mov	r0, r4
 801dcb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dcba:	3a30      	subs	r2, #48	@ 0x30
 801dcbc:	2a09      	cmp	r2, #9
 801dcbe:	d903      	bls.n	801dcc8 <_vfiprintf_r+0x1cc>
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d0c6      	beq.n	801dc52 <_vfiprintf_r+0x156>
 801dcc4:	9105      	str	r1, [sp, #20]
 801dcc6:	e7c4      	b.n	801dc52 <_vfiprintf_r+0x156>
 801dcc8:	fb0c 2101 	mla	r1, ip, r1, r2
 801dccc:	4604      	mov	r4, r0
 801dcce:	2301      	movs	r3, #1
 801dcd0:	e7f0      	b.n	801dcb4 <_vfiprintf_r+0x1b8>
 801dcd2:	ab03      	add	r3, sp, #12
 801dcd4:	9300      	str	r3, [sp, #0]
 801dcd6:	462a      	mov	r2, r5
 801dcd8:	4b12      	ldr	r3, [pc, #72]	@ (801dd24 <_vfiprintf_r+0x228>)
 801dcda:	a904      	add	r1, sp, #16
 801dcdc:	4630      	mov	r0, r6
 801dcde:	f7fc fe6f 	bl	801a9c0 <_printf_float>
 801dce2:	4607      	mov	r7, r0
 801dce4:	1c78      	adds	r0, r7, #1
 801dce6:	d1d6      	bne.n	801dc96 <_vfiprintf_r+0x19a>
 801dce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dcea:	07d9      	lsls	r1, r3, #31
 801dcec:	d405      	bmi.n	801dcfa <_vfiprintf_r+0x1fe>
 801dcee:	89ab      	ldrh	r3, [r5, #12]
 801dcf0:	059a      	lsls	r2, r3, #22
 801dcf2:	d402      	bmi.n	801dcfa <_vfiprintf_r+0x1fe>
 801dcf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dcf6:	f7fd fe9b 	bl	801ba30 <__retarget_lock_release_recursive>
 801dcfa:	89ab      	ldrh	r3, [r5, #12]
 801dcfc:	065b      	lsls	r3, r3, #25
 801dcfe:	f53f af1f 	bmi.w	801db40 <_vfiprintf_r+0x44>
 801dd02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd04:	e71e      	b.n	801db44 <_vfiprintf_r+0x48>
 801dd06:	ab03      	add	r3, sp, #12
 801dd08:	9300      	str	r3, [sp, #0]
 801dd0a:	462a      	mov	r2, r5
 801dd0c:	4b05      	ldr	r3, [pc, #20]	@ (801dd24 <_vfiprintf_r+0x228>)
 801dd0e:	a904      	add	r1, sp, #16
 801dd10:	4630      	mov	r0, r6
 801dd12:	f7fd f8ed 	bl	801aef0 <_printf_i>
 801dd16:	e7e4      	b.n	801dce2 <_vfiprintf_r+0x1e6>
 801dd18:	080223a0 	.word	0x080223a0
 801dd1c:	080223aa 	.word	0x080223aa
 801dd20:	0801a9c1 	.word	0x0801a9c1
 801dd24:	0801dad7 	.word	0x0801dad7
 801dd28:	080223a6 	.word	0x080223a6

0801dd2c <__sflush_r>:
 801dd2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd34:	0716      	lsls	r6, r2, #28
 801dd36:	4605      	mov	r5, r0
 801dd38:	460c      	mov	r4, r1
 801dd3a:	d454      	bmi.n	801dde6 <__sflush_r+0xba>
 801dd3c:	684b      	ldr	r3, [r1, #4]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	dc02      	bgt.n	801dd48 <__sflush_r+0x1c>
 801dd42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	dd48      	ble.n	801ddda <__sflush_r+0xae>
 801dd48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dd4a:	2e00      	cmp	r6, #0
 801dd4c:	d045      	beq.n	801ddda <__sflush_r+0xae>
 801dd4e:	2300      	movs	r3, #0
 801dd50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dd54:	682f      	ldr	r7, [r5, #0]
 801dd56:	6a21      	ldr	r1, [r4, #32]
 801dd58:	602b      	str	r3, [r5, #0]
 801dd5a:	d030      	beq.n	801ddbe <__sflush_r+0x92>
 801dd5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dd5e:	89a3      	ldrh	r3, [r4, #12]
 801dd60:	0759      	lsls	r1, r3, #29
 801dd62:	d505      	bpl.n	801dd70 <__sflush_r+0x44>
 801dd64:	6863      	ldr	r3, [r4, #4]
 801dd66:	1ad2      	subs	r2, r2, r3
 801dd68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dd6a:	b10b      	cbz	r3, 801dd70 <__sflush_r+0x44>
 801dd6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dd6e:	1ad2      	subs	r2, r2, r3
 801dd70:	2300      	movs	r3, #0
 801dd72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dd74:	6a21      	ldr	r1, [r4, #32]
 801dd76:	4628      	mov	r0, r5
 801dd78:	47b0      	blx	r6
 801dd7a:	1c43      	adds	r3, r0, #1
 801dd7c:	89a3      	ldrh	r3, [r4, #12]
 801dd7e:	d106      	bne.n	801dd8e <__sflush_r+0x62>
 801dd80:	6829      	ldr	r1, [r5, #0]
 801dd82:	291d      	cmp	r1, #29
 801dd84:	d82b      	bhi.n	801ddde <__sflush_r+0xb2>
 801dd86:	4a2a      	ldr	r2, [pc, #168]	@ (801de30 <__sflush_r+0x104>)
 801dd88:	410a      	asrs	r2, r1
 801dd8a:	07d6      	lsls	r6, r2, #31
 801dd8c:	d427      	bmi.n	801ddde <__sflush_r+0xb2>
 801dd8e:	2200      	movs	r2, #0
 801dd90:	6062      	str	r2, [r4, #4]
 801dd92:	04d9      	lsls	r1, r3, #19
 801dd94:	6922      	ldr	r2, [r4, #16]
 801dd96:	6022      	str	r2, [r4, #0]
 801dd98:	d504      	bpl.n	801dda4 <__sflush_r+0x78>
 801dd9a:	1c42      	adds	r2, r0, #1
 801dd9c:	d101      	bne.n	801dda2 <__sflush_r+0x76>
 801dd9e:	682b      	ldr	r3, [r5, #0]
 801dda0:	b903      	cbnz	r3, 801dda4 <__sflush_r+0x78>
 801dda2:	6560      	str	r0, [r4, #84]	@ 0x54
 801dda4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dda6:	602f      	str	r7, [r5, #0]
 801dda8:	b1b9      	cbz	r1, 801ddda <__sflush_r+0xae>
 801ddaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ddae:	4299      	cmp	r1, r3
 801ddb0:	d002      	beq.n	801ddb8 <__sflush_r+0x8c>
 801ddb2:	4628      	mov	r0, r5
 801ddb4:	f7fe fccc 	bl	801c750 <_free_r>
 801ddb8:	2300      	movs	r3, #0
 801ddba:	6363      	str	r3, [r4, #52]	@ 0x34
 801ddbc:	e00d      	b.n	801ddda <__sflush_r+0xae>
 801ddbe:	2301      	movs	r3, #1
 801ddc0:	4628      	mov	r0, r5
 801ddc2:	47b0      	blx	r6
 801ddc4:	4602      	mov	r2, r0
 801ddc6:	1c50      	adds	r0, r2, #1
 801ddc8:	d1c9      	bne.n	801dd5e <__sflush_r+0x32>
 801ddca:	682b      	ldr	r3, [r5, #0]
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d0c6      	beq.n	801dd5e <__sflush_r+0x32>
 801ddd0:	2b1d      	cmp	r3, #29
 801ddd2:	d001      	beq.n	801ddd8 <__sflush_r+0xac>
 801ddd4:	2b16      	cmp	r3, #22
 801ddd6:	d11e      	bne.n	801de16 <__sflush_r+0xea>
 801ddd8:	602f      	str	r7, [r5, #0]
 801ddda:	2000      	movs	r0, #0
 801dddc:	e022      	b.n	801de24 <__sflush_r+0xf8>
 801ddde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dde2:	b21b      	sxth	r3, r3
 801dde4:	e01b      	b.n	801de1e <__sflush_r+0xf2>
 801dde6:	690f      	ldr	r7, [r1, #16]
 801dde8:	2f00      	cmp	r7, #0
 801ddea:	d0f6      	beq.n	801ddda <__sflush_r+0xae>
 801ddec:	0793      	lsls	r3, r2, #30
 801ddee:	680e      	ldr	r6, [r1, #0]
 801ddf0:	bf08      	it	eq
 801ddf2:	694b      	ldreq	r3, [r1, #20]
 801ddf4:	600f      	str	r7, [r1, #0]
 801ddf6:	bf18      	it	ne
 801ddf8:	2300      	movne	r3, #0
 801ddfa:	eba6 0807 	sub.w	r8, r6, r7
 801ddfe:	608b      	str	r3, [r1, #8]
 801de00:	f1b8 0f00 	cmp.w	r8, #0
 801de04:	dde9      	ble.n	801ddda <__sflush_r+0xae>
 801de06:	6a21      	ldr	r1, [r4, #32]
 801de08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801de0a:	4643      	mov	r3, r8
 801de0c:	463a      	mov	r2, r7
 801de0e:	4628      	mov	r0, r5
 801de10:	47b0      	blx	r6
 801de12:	2800      	cmp	r0, #0
 801de14:	dc08      	bgt.n	801de28 <__sflush_r+0xfc>
 801de16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de1e:	81a3      	strh	r3, [r4, #12]
 801de20:	f04f 30ff 	mov.w	r0, #4294967295
 801de24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de28:	4407      	add	r7, r0
 801de2a:	eba8 0800 	sub.w	r8, r8, r0
 801de2e:	e7e7      	b.n	801de00 <__sflush_r+0xd4>
 801de30:	dfbffffe 	.word	0xdfbffffe

0801de34 <_fflush_r>:
 801de34:	b538      	push	{r3, r4, r5, lr}
 801de36:	690b      	ldr	r3, [r1, #16]
 801de38:	4605      	mov	r5, r0
 801de3a:	460c      	mov	r4, r1
 801de3c:	b913      	cbnz	r3, 801de44 <_fflush_r+0x10>
 801de3e:	2500      	movs	r5, #0
 801de40:	4628      	mov	r0, r5
 801de42:	bd38      	pop	{r3, r4, r5, pc}
 801de44:	b118      	cbz	r0, 801de4e <_fflush_r+0x1a>
 801de46:	6a03      	ldr	r3, [r0, #32]
 801de48:	b90b      	cbnz	r3, 801de4e <_fflush_r+0x1a>
 801de4a:	f7fd fc11 	bl	801b670 <__sinit>
 801de4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de52:	2b00      	cmp	r3, #0
 801de54:	d0f3      	beq.n	801de3e <_fflush_r+0xa>
 801de56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801de58:	07d0      	lsls	r0, r2, #31
 801de5a:	d404      	bmi.n	801de66 <_fflush_r+0x32>
 801de5c:	0599      	lsls	r1, r3, #22
 801de5e:	d402      	bmi.n	801de66 <_fflush_r+0x32>
 801de60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de62:	f7fd fde4 	bl	801ba2e <__retarget_lock_acquire_recursive>
 801de66:	4628      	mov	r0, r5
 801de68:	4621      	mov	r1, r4
 801de6a:	f7ff ff5f 	bl	801dd2c <__sflush_r>
 801de6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801de70:	07da      	lsls	r2, r3, #31
 801de72:	4605      	mov	r5, r0
 801de74:	d4e4      	bmi.n	801de40 <_fflush_r+0xc>
 801de76:	89a3      	ldrh	r3, [r4, #12]
 801de78:	059b      	lsls	r3, r3, #22
 801de7a:	d4e1      	bmi.n	801de40 <_fflush_r+0xc>
 801de7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de7e:	f7fd fdd7 	bl	801ba30 <__retarget_lock_release_recursive>
 801de82:	e7dd      	b.n	801de40 <_fflush_r+0xc>

0801de84 <fiprintf>:
 801de84:	b40e      	push	{r1, r2, r3}
 801de86:	b503      	push	{r0, r1, lr}
 801de88:	4601      	mov	r1, r0
 801de8a:	ab03      	add	r3, sp, #12
 801de8c:	4805      	ldr	r0, [pc, #20]	@ (801dea4 <fiprintf+0x20>)
 801de8e:	f853 2b04 	ldr.w	r2, [r3], #4
 801de92:	6800      	ldr	r0, [r0, #0]
 801de94:	9301      	str	r3, [sp, #4]
 801de96:	f7ff fe31 	bl	801dafc <_vfiprintf_r>
 801de9a:	b002      	add	sp, #8
 801de9c:	f85d eb04 	ldr.w	lr, [sp], #4
 801dea0:	b003      	add	sp, #12
 801dea2:	4770      	bx	lr
 801dea4:	200002bc 	.word	0x200002bc

0801dea8 <__swbuf_r>:
 801dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deaa:	460e      	mov	r6, r1
 801deac:	4614      	mov	r4, r2
 801deae:	4605      	mov	r5, r0
 801deb0:	b118      	cbz	r0, 801deba <__swbuf_r+0x12>
 801deb2:	6a03      	ldr	r3, [r0, #32]
 801deb4:	b90b      	cbnz	r3, 801deba <__swbuf_r+0x12>
 801deb6:	f7fd fbdb 	bl	801b670 <__sinit>
 801deba:	69a3      	ldr	r3, [r4, #24]
 801debc:	60a3      	str	r3, [r4, #8]
 801debe:	89a3      	ldrh	r3, [r4, #12]
 801dec0:	071a      	lsls	r2, r3, #28
 801dec2:	d501      	bpl.n	801dec8 <__swbuf_r+0x20>
 801dec4:	6923      	ldr	r3, [r4, #16]
 801dec6:	b943      	cbnz	r3, 801deda <__swbuf_r+0x32>
 801dec8:	4621      	mov	r1, r4
 801deca:	4628      	mov	r0, r5
 801decc:	f000 f82a 	bl	801df24 <__swsetup_r>
 801ded0:	b118      	cbz	r0, 801deda <__swbuf_r+0x32>
 801ded2:	f04f 37ff 	mov.w	r7, #4294967295
 801ded6:	4638      	mov	r0, r7
 801ded8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801deda:	6823      	ldr	r3, [r4, #0]
 801dedc:	6922      	ldr	r2, [r4, #16]
 801dede:	1a98      	subs	r0, r3, r2
 801dee0:	6963      	ldr	r3, [r4, #20]
 801dee2:	b2f6      	uxtb	r6, r6
 801dee4:	4283      	cmp	r3, r0
 801dee6:	4637      	mov	r7, r6
 801dee8:	dc05      	bgt.n	801def6 <__swbuf_r+0x4e>
 801deea:	4621      	mov	r1, r4
 801deec:	4628      	mov	r0, r5
 801deee:	f7ff ffa1 	bl	801de34 <_fflush_r>
 801def2:	2800      	cmp	r0, #0
 801def4:	d1ed      	bne.n	801ded2 <__swbuf_r+0x2a>
 801def6:	68a3      	ldr	r3, [r4, #8]
 801def8:	3b01      	subs	r3, #1
 801defa:	60a3      	str	r3, [r4, #8]
 801defc:	6823      	ldr	r3, [r4, #0]
 801defe:	1c5a      	adds	r2, r3, #1
 801df00:	6022      	str	r2, [r4, #0]
 801df02:	701e      	strb	r6, [r3, #0]
 801df04:	6962      	ldr	r2, [r4, #20]
 801df06:	1c43      	adds	r3, r0, #1
 801df08:	429a      	cmp	r2, r3
 801df0a:	d004      	beq.n	801df16 <__swbuf_r+0x6e>
 801df0c:	89a3      	ldrh	r3, [r4, #12]
 801df0e:	07db      	lsls	r3, r3, #31
 801df10:	d5e1      	bpl.n	801ded6 <__swbuf_r+0x2e>
 801df12:	2e0a      	cmp	r6, #10
 801df14:	d1df      	bne.n	801ded6 <__swbuf_r+0x2e>
 801df16:	4621      	mov	r1, r4
 801df18:	4628      	mov	r0, r5
 801df1a:	f7ff ff8b 	bl	801de34 <_fflush_r>
 801df1e:	2800      	cmp	r0, #0
 801df20:	d0d9      	beq.n	801ded6 <__swbuf_r+0x2e>
 801df22:	e7d6      	b.n	801ded2 <__swbuf_r+0x2a>

0801df24 <__swsetup_r>:
 801df24:	b538      	push	{r3, r4, r5, lr}
 801df26:	4b29      	ldr	r3, [pc, #164]	@ (801dfcc <__swsetup_r+0xa8>)
 801df28:	4605      	mov	r5, r0
 801df2a:	6818      	ldr	r0, [r3, #0]
 801df2c:	460c      	mov	r4, r1
 801df2e:	b118      	cbz	r0, 801df38 <__swsetup_r+0x14>
 801df30:	6a03      	ldr	r3, [r0, #32]
 801df32:	b90b      	cbnz	r3, 801df38 <__swsetup_r+0x14>
 801df34:	f7fd fb9c 	bl	801b670 <__sinit>
 801df38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df3c:	0719      	lsls	r1, r3, #28
 801df3e:	d422      	bmi.n	801df86 <__swsetup_r+0x62>
 801df40:	06da      	lsls	r2, r3, #27
 801df42:	d407      	bmi.n	801df54 <__swsetup_r+0x30>
 801df44:	2209      	movs	r2, #9
 801df46:	602a      	str	r2, [r5, #0]
 801df48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801df4c:	81a3      	strh	r3, [r4, #12]
 801df4e:	f04f 30ff 	mov.w	r0, #4294967295
 801df52:	e033      	b.n	801dfbc <__swsetup_r+0x98>
 801df54:	0758      	lsls	r0, r3, #29
 801df56:	d512      	bpl.n	801df7e <__swsetup_r+0x5a>
 801df58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801df5a:	b141      	cbz	r1, 801df6e <__swsetup_r+0x4a>
 801df5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801df60:	4299      	cmp	r1, r3
 801df62:	d002      	beq.n	801df6a <__swsetup_r+0x46>
 801df64:	4628      	mov	r0, r5
 801df66:	f7fe fbf3 	bl	801c750 <_free_r>
 801df6a:	2300      	movs	r3, #0
 801df6c:	6363      	str	r3, [r4, #52]	@ 0x34
 801df6e:	89a3      	ldrh	r3, [r4, #12]
 801df70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801df74:	81a3      	strh	r3, [r4, #12]
 801df76:	2300      	movs	r3, #0
 801df78:	6063      	str	r3, [r4, #4]
 801df7a:	6923      	ldr	r3, [r4, #16]
 801df7c:	6023      	str	r3, [r4, #0]
 801df7e:	89a3      	ldrh	r3, [r4, #12]
 801df80:	f043 0308 	orr.w	r3, r3, #8
 801df84:	81a3      	strh	r3, [r4, #12]
 801df86:	6923      	ldr	r3, [r4, #16]
 801df88:	b94b      	cbnz	r3, 801df9e <__swsetup_r+0x7a>
 801df8a:	89a3      	ldrh	r3, [r4, #12]
 801df8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801df90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801df94:	d003      	beq.n	801df9e <__swsetup_r+0x7a>
 801df96:	4621      	mov	r1, r4
 801df98:	4628      	mov	r0, r5
 801df9a:	f000 f8a2 	bl	801e0e2 <__smakebuf_r>
 801df9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dfa2:	f013 0201 	ands.w	r2, r3, #1
 801dfa6:	d00a      	beq.n	801dfbe <__swsetup_r+0x9a>
 801dfa8:	2200      	movs	r2, #0
 801dfaa:	60a2      	str	r2, [r4, #8]
 801dfac:	6962      	ldr	r2, [r4, #20]
 801dfae:	4252      	negs	r2, r2
 801dfb0:	61a2      	str	r2, [r4, #24]
 801dfb2:	6922      	ldr	r2, [r4, #16]
 801dfb4:	b942      	cbnz	r2, 801dfc8 <__swsetup_r+0xa4>
 801dfb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dfba:	d1c5      	bne.n	801df48 <__swsetup_r+0x24>
 801dfbc:	bd38      	pop	{r3, r4, r5, pc}
 801dfbe:	0799      	lsls	r1, r3, #30
 801dfc0:	bf58      	it	pl
 801dfc2:	6962      	ldrpl	r2, [r4, #20]
 801dfc4:	60a2      	str	r2, [r4, #8]
 801dfc6:	e7f4      	b.n	801dfb2 <__swsetup_r+0x8e>
 801dfc8:	2000      	movs	r0, #0
 801dfca:	e7f7      	b.n	801dfbc <__swsetup_r+0x98>
 801dfcc:	200002bc 	.word	0x200002bc

0801dfd0 <memmove>:
 801dfd0:	4288      	cmp	r0, r1
 801dfd2:	b510      	push	{r4, lr}
 801dfd4:	eb01 0402 	add.w	r4, r1, r2
 801dfd8:	d902      	bls.n	801dfe0 <memmove+0x10>
 801dfda:	4284      	cmp	r4, r0
 801dfdc:	4623      	mov	r3, r4
 801dfde:	d807      	bhi.n	801dff0 <memmove+0x20>
 801dfe0:	1e43      	subs	r3, r0, #1
 801dfe2:	42a1      	cmp	r1, r4
 801dfe4:	d008      	beq.n	801dff8 <memmove+0x28>
 801dfe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dfea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dfee:	e7f8      	b.n	801dfe2 <memmove+0x12>
 801dff0:	4402      	add	r2, r0
 801dff2:	4601      	mov	r1, r0
 801dff4:	428a      	cmp	r2, r1
 801dff6:	d100      	bne.n	801dffa <memmove+0x2a>
 801dff8:	bd10      	pop	{r4, pc}
 801dffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e002:	e7f7      	b.n	801dff4 <memmove+0x24>

0801e004 <abort>:
 801e004:	b508      	push	{r3, lr}
 801e006:	2006      	movs	r0, #6
 801e008:	f000 f8d0 	bl	801e1ac <raise>
 801e00c:	2001      	movs	r0, #1
 801e00e:	f7e8 fbe9 	bl	80067e4 <_exit>

0801e012 <_calloc_r>:
 801e012:	b570      	push	{r4, r5, r6, lr}
 801e014:	fba1 5402 	umull	r5, r4, r1, r2
 801e018:	b93c      	cbnz	r4, 801e02a <_calloc_r+0x18>
 801e01a:	4629      	mov	r1, r5
 801e01c:	f7fb fcb0 	bl	8019980 <_malloc_r>
 801e020:	4606      	mov	r6, r0
 801e022:	b928      	cbnz	r0, 801e030 <_calloc_r+0x1e>
 801e024:	2600      	movs	r6, #0
 801e026:	4630      	mov	r0, r6
 801e028:	bd70      	pop	{r4, r5, r6, pc}
 801e02a:	220c      	movs	r2, #12
 801e02c:	6002      	str	r2, [r0, #0]
 801e02e:	e7f9      	b.n	801e024 <_calloc_r+0x12>
 801e030:	462a      	mov	r2, r5
 801e032:	4621      	mov	r1, r4
 801e034:	f7fd fbe9 	bl	801b80a <memset>
 801e038:	e7f5      	b.n	801e026 <_calloc_r+0x14>

0801e03a <_realloc_r>:
 801e03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e03e:	4680      	mov	r8, r0
 801e040:	4615      	mov	r5, r2
 801e042:	460c      	mov	r4, r1
 801e044:	b921      	cbnz	r1, 801e050 <_realloc_r+0x16>
 801e046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e04a:	4611      	mov	r1, r2
 801e04c:	f7fb bc98 	b.w	8019980 <_malloc_r>
 801e050:	b92a      	cbnz	r2, 801e05e <_realloc_r+0x24>
 801e052:	f7fe fb7d 	bl	801c750 <_free_r>
 801e056:	2400      	movs	r4, #0
 801e058:	4620      	mov	r0, r4
 801e05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e05e:	f000 f8e3 	bl	801e228 <_malloc_usable_size_r>
 801e062:	4285      	cmp	r5, r0
 801e064:	4606      	mov	r6, r0
 801e066:	d802      	bhi.n	801e06e <_realloc_r+0x34>
 801e068:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801e06c:	d8f4      	bhi.n	801e058 <_realloc_r+0x1e>
 801e06e:	4629      	mov	r1, r5
 801e070:	4640      	mov	r0, r8
 801e072:	f7fb fc85 	bl	8019980 <_malloc_r>
 801e076:	4607      	mov	r7, r0
 801e078:	2800      	cmp	r0, #0
 801e07a:	d0ec      	beq.n	801e056 <_realloc_r+0x1c>
 801e07c:	42b5      	cmp	r5, r6
 801e07e:	462a      	mov	r2, r5
 801e080:	4621      	mov	r1, r4
 801e082:	bf28      	it	cs
 801e084:	4632      	movcs	r2, r6
 801e086:	f7fd fcdc 	bl	801ba42 <memcpy>
 801e08a:	4621      	mov	r1, r4
 801e08c:	4640      	mov	r0, r8
 801e08e:	f7fe fb5f 	bl	801c750 <_free_r>
 801e092:	463c      	mov	r4, r7
 801e094:	e7e0      	b.n	801e058 <_realloc_r+0x1e>

0801e096 <__swhatbuf_r>:
 801e096:	b570      	push	{r4, r5, r6, lr}
 801e098:	460c      	mov	r4, r1
 801e09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e09e:	2900      	cmp	r1, #0
 801e0a0:	b096      	sub	sp, #88	@ 0x58
 801e0a2:	4615      	mov	r5, r2
 801e0a4:	461e      	mov	r6, r3
 801e0a6:	da0d      	bge.n	801e0c4 <__swhatbuf_r+0x2e>
 801e0a8:	89a3      	ldrh	r3, [r4, #12]
 801e0aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e0ae:	f04f 0100 	mov.w	r1, #0
 801e0b2:	bf14      	ite	ne
 801e0b4:	2340      	movne	r3, #64	@ 0x40
 801e0b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e0ba:	2000      	movs	r0, #0
 801e0bc:	6031      	str	r1, [r6, #0]
 801e0be:	602b      	str	r3, [r5, #0]
 801e0c0:	b016      	add	sp, #88	@ 0x58
 801e0c2:	bd70      	pop	{r4, r5, r6, pc}
 801e0c4:	466a      	mov	r2, sp
 801e0c6:	f000 f879 	bl	801e1bc <_fstat_r>
 801e0ca:	2800      	cmp	r0, #0
 801e0cc:	dbec      	blt.n	801e0a8 <__swhatbuf_r+0x12>
 801e0ce:	9901      	ldr	r1, [sp, #4]
 801e0d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e0d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e0d8:	4259      	negs	r1, r3
 801e0da:	4159      	adcs	r1, r3
 801e0dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e0e0:	e7eb      	b.n	801e0ba <__swhatbuf_r+0x24>

0801e0e2 <__smakebuf_r>:
 801e0e2:	898b      	ldrh	r3, [r1, #12]
 801e0e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e0e6:	079d      	lsls	r5, r3, #30
 801e0e8:	4606      	mov	r6, r0
 801e0ea:	460c      	mov	r4, r1
 801e0ec:	d507      	bpl.n	801e0fe <__smakebuf_r+0x1c>
 801e0ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e0f2:	6023      	str	r3, [r4, #0]
 801e0f4:	6123      	str	r3, [r4, #16]
 801e0f6:	2301      	movs	r3, #1
 801e0f8:	6163      	str	r3, [r4, #20]
 801e0fa:	b003      	add	sp, #12
 801e0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e0fe:	ab01      	add	r3, sp, #4
 801e100:	466a      	mov	r2, sp
 801e102:	f7ff ffc8 	bl	801e096 <__swhatbuf_r>
 801e106:	9f00      	ldr	r7, [sp, #0]
 801e108:	4605      	mov	r5, r0
 801e10a:	4639      	mov	r1, r7
 801e10c:	4630      	mov	r0, r6
 801e10e:	f7fb fc37 	bl	8019980 <_malloc_r>
 801e112:	b948      	cbnz	r0, 801e128 <__smakebuf_r+0x46>
 801e114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e118:	059a      	lsls	r2, r3, #22
 801e11a:	d4ee      	bmi.n	801e0fa <__smakebuf_r+0x18>
 801e11c:	f023 0303 	bic.w	r3, r3, #3
 801e120:	f043 0302 	orr.w	r3, r3, #2
 801e124:	81a3      	strh	r3, [r4, #12]
 801e126:	e7e2      	b.n	801e0ee <__smakebuf_r+0xc>
 801e128:	89a3      	ldrh	r3, [r4, #12]
 801e12a:	6020      	str	r0, [r4, #0]
 801e12c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e130:	81a3      	strh	r3, [r4, #12]
 801e132:	9b01      	ldr	r3, [sp, #4]
 801e134:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e138:	b15b      	cbz	r3, 801e152 <__smakebuf_r+0x70>
 801e13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e13e:	4630      	mov	r0, r6
 801e140:	f000 f84e 	bl	801e1e0 <_isatty_r>
 801e144:	b128      	cbz	r0, 801e152 <__smakebuf_r+0x70>
 801e146:	89a3      	ldrh	r3, [r4, #12]
 801e148:	f023 0303 	bic.w	r3, r3, #3
 801e14c:	f043 0301 	orr.w	r3, r3, #1
 801e150:	81a3      	strh	r3, [r4, #12]
 801e152:	89a3      	ldrh	r3, [r4, #12]
 801e154:	431d      	orrs	r5, r3
 801e156:	81a5      	strh	r5, [r4, #12]
 801e158:	e7cf      	b.n	801e0fa <__smakebuf_r+0x18>

0801e15a <_raise_r>:
 801e15a:	291f      	cmp	r1, #31
 801e15c:	b538      	push	{r3, r4, r5, lr}
 801e15e:	4605      	mov	r5, r0
 801e160:	460c      	mov	r4, r1
 801e162:	d904      	bls.n	801e16e <_raise_r+0x14>
 801e164:	2316      	movs	r3, #22
 801e166:	6003      	str	r3, [r0, #0]
 801e168:	f04f 30ff 	mov.w	r0, #4294967295
 801e16c:	bd38      	pop	{r3, r4, r5, pc}
 801e16e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e170:	b112      	cbz	r2, 801e178 <_raise_r+0x1e>
 801e172:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e176:	b94b      	cbnz	r3, 801e18c <_raise_r+0x32>
 801e178:	4628      	mov	r0, r5
 801e17a:	f000 f853 	bl	801e224 <_getpid_r>
 801e17e:	4622      	mov	r2, r4
 801e180:	4601      	mov	r1, r0
 801e182:	4628      	mov	r0, r5
 801e184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e188:	f000 b83a 	b.w	801e200 <_kill_r>
 801e18c:	2b01      	cmp	r3, #1
 801e18e:	d00a      	beq.n	801e1a6 <_raise_r+0x4c>
 801e190:	1c59      	adds	r1, r3, #1
 801e192:	d103      	bne.n	801e19c <_raise_r+0x42>
 801e194:	2316      	movs	r3, #22
 801e196:	6003      	str	r3, [r0, #0]
 801e198:	2001      	movs	r0, #1
 801e19a:	e7e7      	b.n	801e16c <_raise_r+0x12>
 801e19c:	2100      	movs	r1, #0
 801e19e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	4798      	blx	r3
 801e1a6:	2000      	movs	r0, #0
 801e1a8:	e7e0      	b.n	801e16c <_raise_r+0x12>
	...

0801e1ac <raise>:
 801e1ac:	4b02      	ldr	r3, [pc, #8]	@ (801e1b8 <raise+0xc>)
 801e1ae:	4601      	mov	r1, r0
 801e1b0:	6818      	ldr	r0, [r3, #0]
 801e1b2:	f7ff bfd2 	b.w	801e15a <_raise_r>
 801e1b6:	bf00      	nop
 801e1b8:	200002bc 	.word	0x200002bc

0801e1bc <_fstat_r>:
 801e1bc:	b538      	push	{r3, r4, r5, lr}
 801e1be:	4d07      	ldr	r5, [pc, #28]	@ (801e1dc <_fstat_r+0x20>)
 801e1c0:	2300      	movs	r3, #0
 801e1c2:	4604      	mov	r4, r0
 801e1c4:	4608      	mov	r0, r1
 801e1c6:	4611      	mov	r1, r2
 801e1c8:	602b      	str	r3, [r5, #0]
 801e1ca:	f7e8 fb5b 	bl	8006884 <_fstat>
 801e1ce:	1c43      	adds	r3, r0, #1
 801e1d0:	d102      	bne.n	801e1d8 <_fstat_r+0x1c>
 801e1d2:	682b      	ldr	r3, [r5, #0]
 801e1d4:	b103      	cbz	r3, 801e1d8 <_fstat_r+0x1c>
 801e1d6:	6023      	str	r3, [r4, #0]
 801e1d8:	bd38      	pop	{r3, r4, r5, pc}
 801e1da:	bf00      	nop
 801e1dc:	200031ec 	.word	0x200031ec

0801e1e0 <_isatty_r>:
 801e1e0:	b538      	push	{r3, r4, r5, lr}
 801e1e2:	4d06      	ldr	r5, [pc, #24]	@ (801e1fc <_isatty_r+0x1c>)
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	4604      	mov	r4, r0
 801e1e8:	4608      	mov	r0, r1
 801e1ea:	602b      	str	r3, [r5, #0]
 801e1ec:	f7e8 fb5a 	bl	80068a4 <_isatty>
 801e1f0:	1c43      	adds	r3, r0, #1
 801e1f2:	d102      	bne.n	801e1fa <_isatty_r+0x1a>
 801e1f4:	682b      	ldr	r3, [r5, #0]
 801e1f6:	b103      	cbz	r3, 801e1fa <_isatty_r+0x1a>
 801e1f8:	6023      	str	r3, [r4, #0]
 801e1fa:	bd38      	pop	{r3, r4, r5, pc}
 801e1fc:	200031ec 	.word	0x200031ec

0801e200 <_kill_r>:
 801e200:	b538      	push	{r3, r4, r5, lr}
 801e202:	4d07      	ldr	r5, [pc, #28]	@ (801e220 <_kill_r+0x20>)
 801e204:	2300      	movs	r3, #0
 801e206:	4604      	mov	r4, r0
 801e208:	4608      	mov	r0, r1
 801e20a:	4611      	mov	r1, r2
 801e20c:	602b      	str	r3, [r5, #0]
 801e20e:	f7e8 fad9 	bl	80067c4 <_kill>
 801e212:	1c43      	adds	r3, r0, #1
 801e214:	d102      	bne.n	801e21c <_kill_r+0x1c>
 801e216:	682b      	ldr	r3, [r5, #0]
 801e218:	b103      	cbz	r3, 801e21c <_kill_r+0x1c>
 801e21a:	6023      	str	r3, [r4, #0]
 801e21c:	bd38      	pop	{r3, r4, r5, pc}
 801e21e:	bf00      	nop
 801e220:	200031ec 	.word	0x200031ec

0801e224 <_getpid_r>:
 801e224:	f7e8 bac6 	b.w	80067b4 <_getpid>

0801e228 <_malloc_usable_size_r>:
 801e228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e22c:	1f18      	subs	r0, r3, #4
 801e22e:	2b00      	cmp	r3, #0
 801e230:	bfbc      	itt	lt
 801e232:	580b      	ldrlt	r3, [r1, r0]
 801e234:	18c0      	addlt	r0, r0, r3
 801e236:	4770      	bx	lr

0801e238 <cos>:
 801e238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e23a:	ec53 2b10 	vmov	r2, r3, d0
 801e23e:	4826      	ldr	r0, [pc, #152]	@ (801e2d8 <cos+0xa0>)
 801e240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e244:	4281      	cmp	r1, r0
 801e246:	d806      	bhi.n	801e256 <cos+0x1e>
 801e248:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e2d0 <cos+0x98>
 801e24c:	b005      	add	sp, #20
 801e24e:	f85d eb04 	ldr.w	lr, [sp], #4
 801e252:	f000 b9b1 	b.w	801e5b8 <__kernel_cos>
 801e256:	4821      	ldr	r0, [pc, #132]	@ (801e2dc <cos+0xa4>)
 801e258:	4281      	cmp	r1, r0
 801e25a:	d908      	bls.n	801e26e <cos+0x36>
 801e25c:	4610      	mov	r0, r2
 801e25e:	4619      	mov	r1, r3
 801e260:	f7e1 ffea 	bl	8000238 <__aeabi_dsub>
 801e264:	ec41 0b10 	vmov	d0, r0, r1
 801e268:	b005      	add	sp, #20
 801e26a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e26e:	4668      	mov	r0, sp
 801e270:	f000 fb26 	bl	801e8c0 <__ieee754_rem_pio2>
 801e274:	f000 0003 	and.w	r0, r0, #3
 801e278:	2801      	cmp	r0, #1
 801e27a:	d00b      	beq.n	801e294 <cos+0x5c>
 801e27c:	2802      	cmp	r0, #2
 801e27e:	d015      	beq.n	801e2ac <cos+0x74>
 801e280:	b9d8      	cbnz	r0, 801e2ba <cos+0x82>
 801e282:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e286:	ed9d 0b00 	vldr	d0, [sp]
 801e28a:	f000 f995 	bl	801e5b8 <__kernel_cos>
 801e28e:	ec51 0b10 	vmov	r0, r1, d0
 801e292:	e7e7      	b.n	801e264 <cos+0x2c>
 801e294:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e298:	ed9d 0b00 	vldr	d0, [sp]
 801e29c:	f000 fa54 	bl	801e748 <__kernel_sin>
 801e2a0:	ec53 2b10 	vmov	r2, r3, d0
 801e2a4:	4610      	mov	r0, r2
 801e2a6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e2aa:	e7db      	b.n	801e264 <cos+0x2c>
 801e2ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2b0:	ed9d 0b00 	vldr	d0, [sp]
 801e2b4:	f000 f980 	bl	801e5b8 <__kernel_cos>
 801e2b8:	e7f2      	b.n	801e2a0 <cos+0x68>
 801e2ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2be:	ed9d 0b00 	vldr	d0, [sp]
 801e2c2:	2001      	movs	r0, #1
 801e2c4:	f000 fa40 	bl	801e748 <__kernel_sin>
 801e2c8:	e7e1      	b.n	801e28e <cos+0x56>
 801e2ca:	bf00      	nop
 801e2cc:	f3af 8000 	nop.w
	...
 801e2d8:	3fe921fb 	.word	0x3fe921fb
 801e2dc:	7fefffff 	.word	0x7fefffff

0801e2e0 <sin>:
 801e2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e2e2:	ec53 2b10 	vmov	r2, r3, d0
 801e2e6:	4826      	ldr	r0, [pc, #152]	@ (801e380 <sin+0xa0>)
 801e2e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e2ec:	4281      	cmp	r1, r0
 801e2ee:	d807      	bhi.n	801e300 <sin+0x20>
 801e2f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e378 <sin+0x98>
 801e2f4:	2000      	movs	r0, #0
 801e2f6:	b005      	add	sp, #20
 801e2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e2fc:	f000 ba24 	b.w	801e748 <__kernel_sin>
 801e300:	4820      	ldr	r0, [pc, #128]	@ (801e384 <sin+0xa4>)
 801e302:	4281      	cmp	r1, r0
 801e304:	d908      	bls.n	801e318 <sin+0x38>
 801e306:	4610      	mov	r0, r2
 801e308:	4619      	mov	r1, r3
 801e30a:	f7e1 ff95 	bl	8000238 <__aeabi_dsub>
 801e30e:	ec41 0b10 	vmov	d0, r0, r1
 801e312:	b005      	add	sp, #20
 801e314:	f85d fb04 	ldr.w	pc, [sp], #4
 801e318:	4668      	mov	r0, sp
 801e31a:	f000 fad1 	bl	801e8c0 <__ieee754_rem_pio2>
 801e31e:	f000 0003 	and.w	r0, r0, #3
 801e322:	2801      	cmp	r0, #1
 801e324:	d00c      	beq.n	801e340 <sin+0x60>
 801e326:	2802      	cmp	r0, #2
 801e328:	d011      	beq.n	801e34e <sin+0x6e>
 801e32a:	b9e8      	cbnz	r0, 801e368 <sin+0x88>
 801e32c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e330:	ed9d 0b00 	vldr	d0, [sp]
 801e334:	2001      	movs	r0, #1
 801e336:	f000 fa07 	bl	801e748 <__kernel_sin>
 801e33a:	ec51 0b10 	vmov	r0, r1, d0
 801e33e:	e7e6      	b.n	801e30e <sin+0x2e>
 801e340:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e344:	ed9d 0b00 	vldr	d0, [sp]
 801e348:	f000 f936 	bl	801e5b8 <__kernel_cos>
 801e34c:	e7f5      	b.n	801e33a <sin+0x5a>
 801e34e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e352:	ed9d 0b00 	vldr	d0, [sp]
 801e356:	2001      	movs	r0, #1
 801e358:	f000 f9f6 	bl	801e748 <__kernel_sin>
 801e35c:	ec53 2b10 	vmov	r2, r3, d0
 801e360:	4610      	mov	r0, r2
 801e362:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e366:	e7d2      	b.n	801e30e <sin+0x2e>
 801e368:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e36c:	ed9d 0b00 	vldr	d0, [sp]
 801e370:	f000 f922 	bl	801e5b8 <__kernel_cos>
 801e374:	e7f2      	b.n	801e35c <sin+0x7c>
 801e376:	bf00      	nop
	...
 801e380:	3fe921fb 	.word	0x3fe921fb
 801e384:	7fefffff 	.word	0x7fefffff

0801e388 <expf>:
 801e388:	b508      	push	{r3, lr}
 801e38a:	ed2d 8b02 	vpush	{d8}
 801e38e:	eef0 8a40 	vmov.f32	s17, s0
 801e392:	f000 fccd 	bl	801ed30 <__ieee754_expf>
 801e396:	eeb0 8a40 	vmov.f32	s16, s0
 801e39a:	eeb0 0a68 	vmov.f32	s0, s17
 801e39e:	f000 f87d 	bl	801e49c <finitef>
 801e3a2:	b160      	cbz	r0, 801e3be <expf+0x36>
 801e3a4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801e3e4 <expf+0x5c>
 801e3a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3b0:	dd0a      	ble.n	801e3c8 <expf+0x40>
 801e3b2:	f7fd fb11 	bl	801b9d8 <__errno>
 801e3b6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801e3e8 <expf+0x60>
 801e3ba:	2322      	movs	r3, #34	@ 0x22
 801e3bc:	6003      	str	r3, [r0, #0]
 801e3be:	eeb0 0a48 	vmov.f32	s0, s16
 801e3c2:	ecbd 8b02 	vpop	{d8}
 801e3c6:	bd08      	pop	{r3, pc}
 801e3c8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801e3ec <expf+0x64>
 801e3cc:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3d4:	d5f3      	bpl.n	801e3be <expf+0x36>
 801e3d6:	f7fd faff 	bl	801b9d8 <__errno>
 801e3da:	2322      	movs	r3, #34	@ 0x22
 801e3dc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801e3f0 <expf+0x68>
 801e3e0:	6003      	str	r3, [r0, #0]
 801e3e2:	e7ec      	b.n	801e3be <expf+0x36>
 801e3e4:	42b17217 	.word	0x42b17217
 801e3e8:	7f800000 	.word	0x7f800000
 801e3ec:	c2cff1b5 	.word	0xc2cff1b5
 801e3f0:	00000000 	.word	0x00000000

0801e3f4 <fmin>:
 801e3f4:	b508      	push	{r3, lr}
 801e3f6:	ed2d 8b04 	vpush	{d8-d9}
 801e3fa:	eeb0 8a40 	vmov.f32	s16, s0
 801e3fe:	eef0 8a60 	vmov.f32	s17, s1
 801e402:	eeb0 9a41 	vmov.f32	s18, s2
 801e406:	eef0 9a61 	vmov.f32	s19, s3
 801e40a:	f000 f81d 	bl	801e448 <__fpclassifyd>
 801e40e:	b950      	cbnz	r0, 801e426 <fmin+0x32>
 801e410:	eeb0 8a49 	vmov.f32	s16, s18
 801e414:	eef0 8a69 	vmov.f32	s17, s19
 801e418:	eeb0 0a48 	vmov.f32	s0, s16
 801e41c:	eef0 0a68 	vmov.f32	s1, s17
 801e420:	ecbd 8b04 	vpop	{d8-d9}
 801e424:	bd08      	pop	{r3, pc}
 801e426:	eeb0 0a49 	vmov.f32	s0, s18
 801e42a:	eef0 0a69 	vmov.f32	s1, s19
 801e42e:	f000 f80b 	bl	801e448 <__fpclassifyd>
 801e432:	2800      	cmp	r0, #0
 801e434:	d0f0      	beq.n	801e418 <fmin+0x24>
 801e436:	ec53 2b19 	vmov	r2, r3, d9
 801e43a:	ec51 0b18 	vmov	r0, r1, d8
 801e43e:	f7e2 fb25 	bl	8000a8c <__aeabi_dcmplt>
 801e442:	2800      	cmp	r0, #0
 801e444:	d0e4      	beq.n	801e410 <fmin+0x1c>
 801e446:	e7e7      	b.n	801e418 <fmin+0x24>

0801e448 <__fpclassifyd>:
 801e448:	ec51 0b10 	vmov	r0, r1, d0
 801e44c:	b510      	push	{r4, lr}
 801e44e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801e452:	460b      	mov	r3, r1
 801e454:	d019      	beq.n	801e48a <__fpclassifyd+0x42>
 801e456:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801e45a:	490e      	ldr	r1, [pc, #56]	@ (801e494 <__fpclassifyd+0x4c>)
 801e45c:	428a      	cmp	r2, r1
 801e45e:	d90e      	bls.n	801e47e <__fpclassifyd+0x36>
 801e460:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801e464:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801e468:	428a      	cmp	r2, r1
 801e46a:	d908      	bls.n	801e47e <__fpclassifyd+0x36>
 801e46c:	4a0a      	ldr	r2, [pc, #40]	@ (801e498 <__fpclassifyd+0x50>)
 801e46e:	4213      	tst	r3, r2
 801e470:	d007      	beq.n	801e482 <__fpclassifyd+0x3a>
 801e472:	4294      	cmp	r4, r2
 801e474:	d107      	bne.n	801e486 <__fpclassifyd+0x3e>
 801e476:	fab0 f080 	clz	r0, r0
 801e47a:	0940      	lsrs	r0, r0, #5
 801e47c:	bd10      	pop	{r4, pc}
 801e47e:	2004      	movs	r0, #4
 801e480:	e7fc      	b.n	801e47c <__fpclassifyd+0x34>
 801e482:	2003      	movs	r0, #3
 801e484:	e7fa      	b.n	801e47c <__fpclassifyd+0x34>
 801e486:	2000      	movs	r0, #0
 801e488:	e7f8      	b.n	801e47c <__fpclassifyd+0x34>
 801e48a:	2800      	cmp	r0, #0
 801e48c:	d1ee      	bne.n	801e46c <__fpclassifyd+0x24>
 801e48e:	2002      	movs	r0, #2
 801e490:	e7f4      	b.n	801e47c <__fpclassifyd+0x34>
 801e492:	bf00      	nop
 801e494:	7fdfffff 	.word	0x7fdfffff
 801e498:	7ff00000 	.word	0x7ff00000

0801e49c <finitef>:
 801e49c:	ee10 3a10 	vmov	r3, s0
 801e4a0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801e4a4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801e4a8:	bfac      	ite	ge
 801e4aa:	2000      	movge	r0, #0
 801e4ac:	2001      	movlt	r0, #1
 801e4ae:	4770      	bx	lr

0801e4b0 <cosl>:
 801e4b0:	f7ff bec2 	b.w	801e238 <cos>

0801e4b4 <sinl>:
 801e4b4:	f7ff bf14 	b.w	801e2e0 <sin>

0801e4b8 <acosl>:
 801e4b8:	f000 bbfe 	b.w	801ecb8 <acos>
 801e4bc:	0000      	movs	r0, r0
	...

0801e4c0 <floor>:
 801e4c0:	ec51 0b10 	vmov	r0, r1, d0
 801e4c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e4d0:	2e13      	cmp	r6, #19
 801e4d2:	460c      	mov	r4, r1
 801e4d4:	4605      	mov	r5, r0
 801e4d6:	4680      	mov	r8, r0
 801e4d8:	dc34      	bgt.n	801e544 <floor+0x84>
 801e4da:	2e00      	cmp	r6, #0
 801e4dc:	da17      	bge.n	801e50e <floor+0x4e>
 801e4de:	a332      	add	r3, pc, #200	@ (adr r3, 801e5a8 <floor+0xe8>)
 801e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4e4:	f7e1 feaa 	bl	800023c <__adddf3>
 801e4e8:	2200      	movs	r2, #0
 801e4ea:	2300      	movs	r3, #0
 801e4ec:	f7e2 faec 	bl	8000ac8 <__aeabi_dcmpgt>
 801e4f0:	b150      	cbz	r0, 801e508 <floor+0x48>
 801e4f2:	2c00      	cmp	r4, #0
 801e4f4:	da55      	bge.n	801e5a2 <floor+0xe2>
 801e4f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e4fa:	432c      	orrs	r4, r5
 801e4fc:	2500      	movs	r5, #0
 801e4fe:	42ac      	cmp	r4, r5
 801e500:	4c2b      	ldr	r4, [pc, #172]	@ (801e5b0 <floor+0xf0>)
 801e502:	bf08      	it	eq
 801e504:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e508:	4621      	mov	r1, r4
 801e50a:	4628      	mov	r0, r5
 801e50c:	e023      	b.n	801e556 <floor+0x96>
 801e50e:	4f29      	ldr	r7, [pc, #164]	@ (801e5b4 <floor+0xf4>)
 801e510:	4137      	asrs	r7, r6
 801e512:	ea01 0307 	and.w	r3, r1, r7
 801e516:	4303      	orrs	r3, r0
 801e518:	d01d      	beq.n	801e556 <floor+0x96>
 801e51a:	a323      	add	r3, pc, #140	@ (adr r3, 801e5a8 <floor+0xe8>)
 801e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e520:	f7e1 fe8c 	bl	800023c <__adddf3>
 801e524:	2200      	movs	r2, #0
 801e526:	2300      	movs	r3, #0
 801e528:	f7e2 face 	bl	8000ac8 <__aeabi_dcmpgt>
 801e52c:	2800      	cmp	r0, #0
 801e52e:	d0eb      	beq.n	801e508 <floor+0x48>
 801e530:	2c00      	cmp	r4, #0
 801e532:	bfbe      	ittt	lt
 801e534:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e538:	4133      	asrlt	r3, r6
 801e53a:	18e4      	addlt	r4, r4, r3
 801e53c:	ea24 0407 	bic.w	r4, r4, r7
 801e540:	2500      	movs	r5, #0
 801e542:	e7e1      	b.n	801e508 <floor+0x48>
 801e544:	2e33      	cmp	r6, #51	@ 0x33
 801e546:	dd0a      	ble.n	801e55e <floor+0x9e>
 801e548:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e54c:	d103      	bne.n	801e556 <floor+0x96>
 801e54e:	4602      	mov	r2, r0
 801e550:	460b      	mov	r3, r1
 801e552:	f7e1 fe73 	bl	800023c <__adddf3>
 801e556:	ec41 0b10 	vmov	d0, r0, r1
 801e55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e55e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e562:	f04f 37ff 	mov.w	r7, #4294967295
 801e566:	40df      	lsrs	r7, r3
 801e568:	4207      	tst	r7, r0
 801e56a:	d0f4      	beq.n	801e556 <floor+0x96>
 801e56c:	a30e      	add	r3, pc, #56	@ (adr r3, 801e5a8 <floor+0xe8>)
 801e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e572:	f7e1 fe63 	bl	800023c <__adddf3>
 801e576:	2200      	movs	r2, #0
 801e578:	2300      	movs	r3, #0
 801e57a:	f7e2 faa5 	bl	8000ac8 <__aeabi_dcmpgt>
 801e57e:	2800      	cmp	r0, #0
 801e580:	d0c2      	beq.n	801e508 <floor+0x48>
 801e582:	2c00      	cmp	r4, #0
 801e584:	da0a      	bge.n	801e59c <floor+0xdc>
 801e586:	2e14      	cmp	r6, #20
 801e588:	d101      	bne.n	801e58e <floor+0xce>
 801e58a:	3401      	adds	r4, #1
 801e58c:	e006      	b.n	801e59c <floor+0xdc>
 801e58e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e592:	2301      	movs	r3, #1
 801e594:	40b3      	lsls	r3, r6
 801e596:	441d      	add	r5, r3
 801e598:	4545      	cmp	r5, r8
 801e59a:	d3f6      	bcc.n	801e58a <floor+0xca>
 801e59c:	ea25 0507 	bic.w	r5, r5, r7
 801e5a0:	e7b2      	b.n	801e508 <floor+0x48>
 801e5a2:	2500      	movs	r5, #0
 801e5a4:	462c      	mov	r4, r5
 801e5a6:	e7af      	b.n	801e508 <floor+0x48>
 801e5a8:	8800759c 	.word	0x8800759c
 801e5ac:	7e37e43c 	.word	0x7e37e43c
 801e5b0:	bff00000 	.word	0xbff00000
 801e5b4:	000fffff 	.word	0x000fffff

0801e5b8 <__kernel_cos>:
 801e5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5bc:	ec57 6b10 	vmov	r6, r7, d0
 801e5c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e5c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e5c8:	ed8d 1b00 	vstr	d1, [sp]
 801e5cc:	d206      	bcs.n	801e5dc <__kernel_cos+0x24>
 801e5ce:	4630      	mov	r0, r6
 801e5d0:	4639      	mov	r1, r7
 801e5d2:	f7e2 fa99 	bl	8000b08 <__aeabi_d2iz>
 801e5d6:	2800      	cmp	r0, #0
 801e5d8:	f000 8088 	beq.w	801e6ec <__kernel_cos+0x134>
 801e5dc:	4632      	mov	r2, r6
 801e5de:	463b      	mov	r3, r7
 801e5e0:	4630      	mov	r0, r6
 801e5e2:	4639      	mov	r1, r7
 801e5e4:	f7e1 ffe0 	bl	80005a8 <__aeabi_dmul>
 801e5e8:	4b51      	ldr	r3, [pc, #324]	@ (801e730 <__kernel_cos+0x178>)
 801e5ea:	2200      	movs	r2, #0
 801e5ec:	4604      	mov	r4, r0
 801e5ee:	460d      	mov	r5, r1
 801e5f0:	f7e1 ffda 	bl	80005a8 <__aeabi_dmul>
 801e5f4:	a340      	add	r3, pc, #256	@ (adr r3, 801e6f8 <__kernel_cos+0x140>)
 801e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5fa:	4682      	mov	sl, r0
 801e5fc:	468b      	mov	fp, r1
 801e5fe:	4620      	mov	r0, r4
 801e600:	4629      	mov	r1, r5
 801e602:	f7e1 ffd1 	bl	80005a8 <__aeabi_dmul>
 801e606:	a33e      	add	r3, pc, #248	@ (adr r3, 801e700 <__kernel_cos+0x148>)
 801e608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e60c:	f7e1 fe16 	bl	800023c <__adddf3>
 801e610:	4622      	mov	r2, r4
 801e612:	462b      	mov	r3, r5
 801e614:	f7e1 ffc8 	bl	80005a8 <__aeabi_dmul>
 801e618:	a33b      	add	r3, pc, #236	@ (adr r3, 801e708 <__kernel_cos+0x150>)
 801e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e61e:	f7e1 fe0b 	bl	8000238 <__aeabi_dsub>
 801e622:	4622      	mov	r2, r4
 801e624:	462b      	mov	r3, r5
 801e626:	f7e1 ffbf 	bl	80005a8 <__aeabi_dmul>
 801e62a:	a339      	add	r3, pc, #228	@ (adr r3, 801e710 <__kernel_cos+0x158>)
 801e62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e630:	f7e1 fe04 	bl	800023c <__adddf3>
 801e634:	4622      	mov	r2, r4
 801e636:	462b      	mov	r3, r5
 801e638:	f7e1 ffb6 	bl	80005a8 <__aeabi_dmul>
 801e63c:	a336      	add	r3, pc, #216	@ (adr r3, 801e718 <__kernel_cos+0x160>)
 801e63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e642:	f7e1 fdf9 	bl	8000238 <__aeabi_dsub>
 801e646:	4622      	mov	r2, r4
 801e648:	462b      	mov	r3, r5
 801e64a:	f7e1 ffad 	bl	80005a8 <__aeabi_dmul>
 801e64e:	a334      	add	r3, pc, #208	@ (adr r3, 801e720 <__kernel_cos+0x168>)
 801e650:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e654:	f7e1 fdf2 	bl	800023c <__adddf3>
 801e658:	4622      	mov	r2, r4
 801e65a:	462b      	mov	r3, r5
 801e65c:	f7e1 ffa4 	bl	80005a8 <__aeabi_dmul>
 801e660:	4622      	mov	r2, r4
 801e662:	462b      	mov	r3, r5
 801e664:	f7e1 ffa0 	bl	80005a8 <__aeabi_dmul>
 801e668:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e66c:	4604      	mov	r4, r0
 801e66e:	460d      	mov	r5, r1
 801e670:	4630      	mov	r0, r6
 801e672:	4639      	mov	r1, r7
 801e674:	f7e1 ff98 	bl	80005a8 <__aeabi_dmul>
 801e678:	460b      	mov	r3, r1
 801e67a:	4602      	mov	r2, r0
 801e67c:	4629      	mov	r1, r5
 801e67e:	4620      	mov	r0, r4
 801e680:	f7e1 fdda 	bl	8000238 <__aeabi_dsub>
 801e684:	4b2b      	ldr	r3, [pc, #172]	@ (801e734 <__kernel_cos+0x17c>)
 801e686:	4598      	cmp	r8, r3
 801e688:	4606      	mov	r6, r0
 801e68a:	460f      	mov	r7, r1
 801e68c:	d810      	bhi.n	801e6b0 <__kernel_cos+0xf8>
 801e68e:	4602      	mov	r2, r0
 801e690:	460b      	mov	r3, r1
 801e692:	4650      	mov	r0, sl
 801e694:	4659      	mov	r1, fp
 801e696:	f7e1 fdcf 	bl	8000238 <__aeabi_dsub>
 801e69a:	460b      	mov	r3, r1
 801e69c:	4926      	ldr	r1, [pc, #152]	@ (801e738 <__kernel_cos+0x180>)
 801e69e:	4602      	mov	r2, r0
 801e6a0:	2000      	movs	r0, #0
 801e6a2:	f7e1 fdc9 	bl	8000238 <__aeabi_dsub>
 801e6a6:	ec41 0b10 	vmov	d0, r0, r1
 801e6aa:	b003      	add	sp, #12
 801e6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6b0:	4b22      	ldr	r3, [pc, #136]	@ (801e73c <__kernel_cos+0x184>)
 801e6b2:	4921      	ldr	r1, [pc, #132]	@ (801e738 <__kernel_cos+0x180>)
 801e6b4:	4598      	cmp	r8, r3
 801e6b6:	bf8c      	ite	hi
 801e6b8:	4d21      	ldrhi	r5, [pc, #132]	@ (801e740 <__kernel_cos+0x188>)
 801e6ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801e6be:	2400      	movs	r4, #0
 801e6c0:	4622      	mov	r2, r4
 801e6c2:	462b      	mov	r3, r5
 801e6c4:	2000      	movs	r0, #0
 801e6c6:	f7e1 fdb7 	bl	8000238 <__aeabi_dsub>
 801e6ca:	4622      	mov	r2, r4
 801e6cc:	4680      	mov	r8, r0
 801e6ce:	4689      	mov	r9, r1
 801e6d0:	462b      	mov	r3, r5
 801e6d2:	4650      	mov	r0, sl
 801e6d4:	4659      	mov	r1, fp
 801e6d6:	f7e1 fdaf 	bl	8000238 <__aeabi_dsub>
 801e6da:	4632      	mov	r2, r6
 801e6dc:	463b      	mov	r3, r7
 801e6de:	f7e1 fdab 	bl	8000238 <__aeabi_dsub>
 801e6e2:	4602      	mov	r2, r0
 801e6e4:	460b      	mov	r3, r1
 801e6e6:	4640      	mov	r0, r8
 801e6e8:	4649      	mov	r1, r9
 801e6ea:	e7da      	b.n	801e6a2 <__kernel_cos+0xea>
 801e6ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801e728 <__kernel_cos+0x170>
 801e6f0:	e7db      	b.n	801e6aa <__kernel_cos+0xf2>
 801e6f2:	bf00      	nop
 801e6f4:	f3af 8000 	nop.w
 801e6f8:	be8838d4 	.word	0xbe8838d4
 801e6fc:	bda8fae9 	.word	0xbda8fae9
 801e700:	bdb4b1c4 	.word	0xbdb4b1c4
 801e704:	3e21ee9e 	.word	0x3e21ee9e
 801e708:	809c52ad 	.word	0x809c52ad
 801e70c:	3e927e4f 	.word	0x3e927e4f
 801e710:	19cb1590 	.word	0x19cb1590
 801e714:	3efa01a0 	.word	0x3efa01a0
 801e718:	16c15177 	.word	0x16c15177
 801e71c:	3f56c16c 	.word	0x3f56c16c
 801e720:	5555554c 	.word	0x5555554c
 801e724:	3fa55555 	.word	0x3fa55555
 801e728:	00000000 	.word	0x00000000
 801e72c:	3ff00000 	.word	0x3ff00000
 801e730:	3fe00000 	.word	0x3fe00000
 801e734:	3fd33332 	.word	0x3fd33332
 801e738:	3ff00000 	.word	0x3ff00000
 801e73c:	3fe90000 	.word	0x3fe90000
 801e740:	3fd20000 	.word	0x3fd20000
 801e744:	00000000 	.word	0x00000000

0801e748 <__kernel_sin>:
 801e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e74c:	ec55 4b10 	vmov	r4, r5, d0
 801e750:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e754:	b085      	sub	sp, #20
 801e756:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e75a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e75e:	4680      	mov	r8, r0
 801e760:	d205      	bcs.n	801e76e <__kernel_sin+0x26>
 801e762:	4620      	mov	r0, r4
 801e764:	4629      	mov	r1, r5
 801e766:	f7e2 f9cf 	bl	8000b08 <__aeabi_d2iz>
 801e76a:	2800      	cmp	r0, #0
 801e76c:	d052      	beq.n	801e814 <__kernel_sin+0xcc>
 801e76e:	4622      	mov	r2, r4
 801e770:	462b      	mov	r3, r5
 801e772:	4620      	mov	r0, r4
 801e774:	4629      	mov	r1, r5
 801e776:	f7e1 ff17 	bl	80005a8 <__aeabi_dmul>
 801e77a:	4682      	mov	sl, r0
 801e77c:	468b      	mov	fp, r1
 801e77e:	4602      	mov	r2, r0
 801e780:	460b      	mov	r3, r1
 801e782:	4620      	mov	r0, r4
 801e784:	4629      	mov	r1, r5
 801e786:	f7e1 ff0f 	bl	80005a8 <__aeabi_dmul>
 801e78a:	a342      	add	r3, pc, #264	@ (adr r3, 801e894 <__kernel_sin+0x14c>)
 801e78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e790:	e9cd 0100 	strd	r0, r1, [sp]
 801e794:	4650      	mov	r0, sl
 801e796:	4659      	mov	r1, fp
 801e798:	f7e1 ff06 	bl	80005a8 <__aeabi_dmul>
 801e79c:	a33f      	add	r3, pc, #252	@ (adr r3, 801e89c <__kernel_sin+0x154>)
 801e79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7a2:	f7e1 fd49 	bl	8000238 <__aeabi_dsub>
 801e7a6:	4652      	mov	r2, sl
 801e7a8:	465b      	mov	r3, fp
 801e7aa:	f7e1 fefd 	bl	80005a8 <__aeabi_dmul>
 801e7ae:	a33d      	add	r3, pc, #244	@ (adr r3, 801e8a4 <__kernel_sin+0x15c>)
 801e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b4:	f7e1 fd42 	bl	800023c <__adddf3>
 801e7b8:	4652      	mov	r2, sl
 801e7ba:	465b      	mov	r3, fp
 801e7bc:	f7e1 fef4 	bl	80005a8 <__aeabi_dmul>
 801e7c0:	a33a      	add	r3, pc, #232	@ (adr r3, 801e8ac <__kernel_sin+0x164>)
 801e7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7c6:	f7e1 fd37 	bl	8000238 <__aeabi_dsub>
 801e7ca:	4652      	mov	r2, sl
 801e7cc:	465b      	mov	r3, fp
 801e7ce:	f7e1 feeb 	bl	80005a8 <__aeabi_dmul>
 801e7d2:	a338      	add	r3, pc, #224	@ (adr r3, 801e8b4 <__kernel_sin+0x16c>)
 801e7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7d8:	f7e1 fd30 	bl	800023c <__adddf3>
 801e7dc:	4606      	mov	r6, r0
 801e7de:	460f      	mov	r7, r1
 801e7e0:	f1b8 0f00 	cmp.w	r8, #0
 801e7e4:	d11b      	bne.n	801e81e <__kernel_sin+0xd6>
 801e7e6:	4602      	mov	r2, r0
 801e7e8:	460b      	mov	r3, r1
 801e7ea:	4650      	mov	r0, sl
 801e7ec:	4659      	mov	r1, fp
 801e7ee:	f7e1 fedb 	bl	80005a8 <__aeabi_dmul>
 801e7f2:	a325      	add	r3, pc, #148	@ (adr r3, 801e888 <__kernel_sin+0x140>)
 801e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7f8:	f7e1 fd1e 	bl	8000238 <__aeabi_dsub>
 801e7fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e800:	f7e1 fed2 	bl	80005a8 <__aeabi_dmul>
 801e804:	4602      	mov	r2, r0
 801e806:	460b      	mov	r3, r1
 801e808:	4620      	mov	r0, r4
 801e80a:	4629      	mov	r1, r5
 801e80c:	f7e1 fd16 	bl	800023c <__adddf3>
 801e810:	4604      	mov	r4, r0
 801e812:	460d      	mov	r5, r1
 801e814:	ec45 4b10 	vmov	d0, r4, r5
 801e818:	b005      	add	sp, #20
 801e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e81e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e822:	4b1b      	ldr	r3, [pc, #108]	@ (801e890 <__kernel_sin+0x148>)
 801e824:	2200      	movs	r2, #0
 801e826:	f7e1 febf 	bl	80005a8 <__aeabi_dmul>
 801e82a:	4632      	mov	r2, r6
 801e82c:	4680      	mov	r8, r0
 801e82e:	4689      	mov	r9, r1
 801e830:	463b      	mov	r3, r7
 801e832:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e836:	f7e1 feb7 	bl	80005a8 <__aeabi_dmul>
 801e83a:	4602      	mov	r2, r0
 801e83c:	460b      	mov	r3, r1
 801e83e:	4640      	mov	r0, r8
 801e840:	4649      	mov	r1, r9
 801e842:	f7e1 fcf9 	bl	8000238 <__aeabi_dsub>
 801e846:	4652      	mov	r2, sl
 801e848:	465b      	mov	r3, fp
 801e84a:	f7e1 fead 	bl	80005a8 <__aeabi_dmul>
 801e84e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e852:	f7e1 fcf1 	bl	8000238 <__aeabi_dsub>
 801e856:	a30c      	add	r3, pc, #48	@ (adr r3, 801e888 <__kernel_sin+0x140>)
 801e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e85c:	4606      	mov	r6, r0
 801e85e:	460f      	mov	r7, r1
 801e860:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e864:	f7e1 fea0 	bl	80005a8 <__aeabi_dmul>
 801e868:	4602      	mov	r2, r0
 801e86a:	460b      	mov	r3, r1
 801e86c:	4630      	mov	r0, r6
 801e86e:	4639      	mov	r1, r7
 801e870:	f7e1 fce4 	bl	800023c <__adddf3>
 801e874:	4602      	mov	r2, r0
 801e876:	460b      	mov	r3, r1
 801e878:	4620      	mov	r0, r4
 801e87a:	4629      	mov	r1, r5
 801e87c:	f7e1 fcdc 	bl	8000238 <__aeabi_dsub>
 801e880:	e7c6      	b.n	801e810 <__kernel_sin+0xc8>
 801e882:	bf00      	nop
 801e884:	f3af 8000 	nop.w
 801e888:	55555549 	.word	0x55555549
 801e88c:	3fc55555 	.word	0x3fc55555
 801e890:	3fe00000 	.word	0x3fe00000
 801e894:	5acfd57c 	.word	0x5acfd57c
 801e898:	3de5d93a 	.word	0x3de5d93a
 801e89c:	8a2b9ceb 	.word	0x8a2b9ceb
 801e8a0:	3e5ae5e6 	.word	0x3e5ae5e6
 801e8a4:	57b1fe7d 	.word	0x57b1fe7d
 801e8a8:	3ec71de3 	.word	0x3ec71de3
 801e8ac:	19c161d5 	.word	0x19c161d5
 801e8b0:	3f2a01a0 	.word	0x3f2a01a0
 801e8b4:	1110f8a6 	.word	0x1110f8a6
 801e8b8:	3f811111 	.word	0x3f811111
 801e8bc:	00000000 	.word	0x00000000

0801e8c0 <__ieee754_rem_pio2>:
 801e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c4:	ec57 6b10 	vmov	r6, r7, d0
 801e8c8:	4bc5      	ldr	r3, [pc, #788]	@ (801ebe0 <__ieee754_rem_pio2+0x320>)
 801e8ca:	b08d      	sub	sp, #52	@ 0x34
 801e8cc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e8d0:	4598      	cmp	r8, r3
 801e8d2:	4604      	mov	r4, r0
 801e8d4:	9704      	str	r7, [sp, #16]
 801e8d6:	d807      	bhi.n	801e8e8 <__ieee754_rem_pio2+0x28>
 801e8d8:	2200      	movs	r2, #0
 801e8da:	2300      	movs	r3, #0
 801e8dc:	ed80 0b00 	vstr	d0, [r0]
 801e8e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e8e4:	2500      	movs	r5, #0
 801e8e6:	e028      	b.n	801e93a <__ieee754_rem_pio2+0x7a>
 801e8e8:	4bbe      	ldr	r3, [pc, #760]	@ (801ebe4 <__ieee754_rem_pio2+0x324>)
 801e8ea:	4598      	cmp	r8, r3
 801e8ec:	d878      	bhi.n	801e9e0 <__ieee754_rem_pio2+0x120>
 801e8ee:	9b04      	ldr	r3, [sp, #16]
 801e8f0:	4dbd      	ldr	r5, [pc, #756]	@ (801ebe8 <__ieee754_rem_pio2+0x328>)
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	4630      	mov	r0, r6
 801e8f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 801eba8 <__ieee754_rem_pio2+0x2e8>)
 801e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fc:	4639      	mov	r1, r7
 801e8fe:	dd38      	ble.n	801e972 <__ieee754_rem_pio2+0xb2>
 801e900:	f7e1 fc9a 	bl	8000238 <__aeabi_dsub>
 801e904:	45a8      	cmp	r8, r5
 801e906:	4606      	mov	r6, r0
 801e908:	460f      	mov	r7, r1
 801e90a:	d01a      	beq.n	801e942 <__ieee754_rem_pio2+0x82>
 801e90c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801ebb0 <__ieee754_rem_pio2+0x2f0>)
 801e90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e912:	f7e1 fc91 	bl	8000238 <__aeabi_dsub>
 801e916:	4602      	mov	r2, r0
 801e918:	460b      	mov	r3, r1
 801e91a:	4680      	mov	r8, r0
 801e91c:	4689      	mov	r9, r1
 801e91e:	4630      	mov	r0, r6
 801e920:	4639      	mov	r1, r7
 801e922:	f7e1 fc89 	bl	8000238 <__aeabi_dsub>
 801e926:	a3a2      	add	r3, pc, #648	@ (adr r3, 801ebb0 <__ieee754_rem_pio2+0x2f0>)
 801e928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e92c:	f7e1 fc84 	bl	8000238 <__aeabi_dsub>
 801e930:	e9c4 8900 	strd	r8, r9, [r4]
 801e934:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e938:	2501      	movs	r5, #1
 801e93a:	4628      	mov	r0, r5
 801e93c:	b00d      	add	sp, #52	@ 0x34
 801e93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e942:	a39d      	add	r3, pc, #628	@ (adr r3, 801ebb8 <__ieee754_rem_pio2+0x2f8>)
 801e944:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e948:	f7e1 fc76 	bl	8000238 <__aeabi_dsub>
 801e94c:	a39c      	add	r3, pc, #624	@ (adr r3, 801ebc0 <__ieee754_rem_pio2+0x300>)
 801e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e952:	4606      	mov	r6, r0
 801e954:	460f      	mov	r7, r1
 801e956:	f7e1 fc6f 	bl	8000238 <__aeabi_dsub>
 801e95a:	4602      	mov	r2, r0
 801e95c:	460b      	mov	r3, r1
 801e95e:	4680      	mov	r8, r0
 801e960:	4689      	mov	r9, r1
 801e962:	4630      	mov	r0, r6
 801e964:	4639      	mov	r1, r7
 801e966:	f7e1 fc67 	bl	8000238 <__aeabi_dsub>
 801e96a:	a395      	add	r3, pc, #596	@ (adr r3, 801ebc0 <__ieee754_rem_pio2+0x300>)
 801e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e970:	e7dc      	b.n	801e92c <__ieee754_rem_pio2+0x6c>
 801e972:	f7e1 fc63 	bl	800023c <__adddf3>
 801e976:	45a8      	cmp	r8, r5
 801e978:	4606      	mov	r6, r0
 801e97a:	460f      	mov	r7, r1
 801e97c:	d018      	beq.n	801e9b0 <__ieee754_rem_pio2+0xf0>
 801e97e:	a38c      	add	r3, pc, #560	@ (adr r3, 801ebb0 <__ieee754_rem_pio2+0x2f0>)
 801e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e984:	f7e1 fc5a 	bl	800023c <__adddf3>
 801e988:	4602      	mov	r2, r0
 801e98a:	460b      	mov	r3, r1
 801e98c:	4680      	mov	r8, r0
 801e98e:	4689      	mov	r9, r1
 801e990:	4630      	mov	r0, r6
 801e992:	4639      	mov	r1, r7
 801e994:	f7e1 fc50 	bl	8000238 <__aeabi_dsub>
 801e998:	a385      	add	r3, pc, #532	@ (adr r3, 801ebb0 <__ieee754_rem_pio2+0x2f0>)
 801e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e99e:	f7e1 fc4d 	bl	800023c <__adddf3>
 801e9a2:	f04f 35ff 	mov.w	r5, #4294967295
 801e9a6:	e9c4 8900 	strd	r8, r9, [r4]
 801e9aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e9ae:	e7c4      	b.n	801e93a <__ieee754_rem_pio2+0x7a>
 801e9b0:	a381      	add	r3, pc, #516	@ (adr r3, 801ebb8 <__ieee754_rem_pio2+0x2f8>)
 801e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9b6:	f7e1 fc41 	bl	800023c <__adddf3>
 801e9ba:	a381      	add	r3, pc, #516	@ (adr r3, 801ebc0 <__ieee754_rem_pio2+0x300>)
 801e9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9c0:	4606      	mov	r6, r0
 801e9c2:	460f      	mov	r7, r1
 801e9c4:	f7e1 fc3a 	bl	800023c <__adddf3>
 801e9c8:	4602      	mov	r2, r0
 801e9ca:	460b      	mov	r3, r1
 801e9cc:	4680      	mov	r8, r0
 801e9ce:	4689      	mov	r9, r1
 801e9d0:	4630      	mov	r0, r6
 801e9d2:	4639      	mov	r1, r7
 801e9d4:	f7e1 fc30 	bl	8000238 <__aeabi_dsub>
 801e9d8:	a379      	add	r3, pc, #484	@ (adr r3, 801ebc0 <__ieee754_rem_pio2+0x300>)
 801e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9de:	e7de      	b.n	801e99e <__ieee754_rem_pio2+0xde>
 801e9e0:	4b82      	ldr	r3, [pc, #520]	@ (801ebec <__ieee754_rem_pio2+0x32c>)
 801e9e2:	4598      	cmp	r8, r3
 801e9e4:	f200 80d1 	bhi.w	801eb8a <__ieee754_rem_pio2+0x2ca>
 801e9e8:	f000 f99a 	bl	801ed20 <fabs>
 801e9ec:	ec57 6b10 	vmov	r6, r7, d0
 801e9f0:	a375      	add	r3, pc, #468	@ (adr r3, 801ebc8 <__ieee754_rem_pio2+0x308>)
 801e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f6:	4630      	mov	r0, r6
 801e9f8:	4639      	mov	r1, r7
 801e9fa:	f7e1 fdd5 	bl	80005a8 <__aeabi_dmul>
 801e9fe:	4b7c      	ldr	r3, [pc, #496]	@ (801ebf0 <__ieee754_rem_pio2+0x330>)
 801ea00:	2200      	movs	r2, #0
 801ea02:	f7e1 fc1b 	bl	800023c <__adddf3>
 801ea06:	f7e2 f87f 	bl	8000b08 <__aeabi_d2iz>
 801ea0a:	4605      	mov	r5, r0
 801ea0c:	f7e1 fd62 	bl	80004d4 <__aeabi_i2d>
 801ea10:	4602      	mov	r2, r0
 801ea12:	460b      	mov	r3, r1
 801ea14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ea18:	a363      	add	r3, pc, #396	@ (adr r3, 801eba8 <__ieee754_rem_pio2+0x2e8>)
 801ea1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea1e:	f7e1 fdc3 	bl	80005a8 <__aeabi_dmul>
 801ea22:	4602      	mov	r2, r0
 801ea24:	460b      	mov	r3, r1
 801ea26:	4630      	mov	r0, r6
 801ea28:	4639      	mov	r1, r7
 801ea2a:	f7e1 fc05 	bl	8000238 <__aeabi_dsub>
 801ea2e:	a360      	add	r3, pc, #384	@ (adr r3, 801ebb0 <__ieee754_rem_pio2+0x2f0>)
 801ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea34:	4682      	mov	sl, r0
 801ea36:	468b      	mov	fp, r1
 801ea38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea3c:	f7e1 fdb4 	bl	80005a8 <__aeabi_dmul>
 801ea40:	2d1f      	cmp	r5, #31
 801ea42:	4606      	mov	r6, r0
 801ea44:	460f      	mov	r7, r1
 801ea46:	dc0c      	bgt.n	801ea62 <__ieee754_rem_pio2+0x1a2>
 801ea48:	4b6a      	ldr	r3, [pc, #424]	@ (801ebf4 <__ieee754_rem_pio2+0x334>)
 801ea4a:	1e6a      	subs	r2, r5, #1
 801ea4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ea50:	4543      	cmp	r3, r8
 801ea52:	d006      	beq.n	801ea62 <__ieee754_rem_pio2+0x1a2>
 801ea54:	4632      	mov	r2, r6
 801ea56:	463b      	mov	r3, r7
 801ea58:	4650      	mov	r0, sl
 801ea5a:	4659      	mov	r1, fp
 801ea5c:	f7e1 fbec 	bl	8000238 <__aeabi_dsub>
 801ea60:	e00e      	b.n	801ea80 <__ieee754_rem_pio2+0x1c0>
 801ea62:	463b      	mov	r3, r7
 801ea64:	4632      	mov	r2, r6
 801ea66:	4650      	mov	r0, sl
 801ea68:	4659      	mov	r1, fp
 801ea6a:	f7e1 fbe5 	bl	8000238 <__aeabi_dsub>
 801ea6e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ea72:	9305      	str	r3, [sp, #20]
 801ea74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ea78:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801ea7c:	2b10      	cmp	r3, #16
 801ea7e:	dc02      	bgt.n	801ea86 <__ieee754_rem_pio2+0x1c6>
 801ea80:	e9c4 0100 	strd	r0, r1, [r4]
 801ea84:	e039      	b.n	801eafa <__ieee754_rem_pio2+0x23a>
 801ea86:	a34c      	add	r3, pc, #304	@ (adr r3, 801ebb8 <__ieee754_rem_pio2+0x2f8>)
 801ea88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea90:	f7e1 fd8a 	bl	80005a8 <__aeabi_dmul>
 801ea94:	4606      	mov	r6, r0
 801ea96:	460f      	mov	r7, r1
 801ea98:	4602      	mov	r2, r0
 801ea9a:	460b      	mov	r3, r1
 801ea9c:	4650      	mov	r0, sl
 801ea9e:	4659      	mov	r1, fp
 801eaa0:	f7e1 fbca 	bl	8000238 <__aeabi_dsub>
 801eaa4:	4602      	mov	r2, r0
 801eaa6:	460b      	mov	r3, r1
 801eaa8:	4680      	mov	r8, r0
 801eaaa:	4689      	mov	r9, r1
 801eaac:	4650      	mov	r0, sl
 801eaae:	4659      	mov	r1, fp
 801eab0:	f7e1 fbc2 	bl	8000238 <__aeabi_dsub>
 801eab4:	4632      	mov	r2, r6
 801eab6:	463b      	mov	r3, r7
 801eab8:	f7e1 fbbe 	bl	8000238 <__aeabi_dsub>
 801eabc:	a340      	add	r3, pc, #256	@ (adr r3, 801ebc0 <__ieee754_rem_pio2+0x300>)
 801eabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eac2:	4606      	mov	r6, r0
 801eac4:	460f      	mov	r7, r1
 801eac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eaca:	f7e1 fd6d 	bl	80005a8 <__aeabi_dmul>
 801eace:	4632      	mov	r2, r6
 801ead0:	463b      	mov	r3, r7
 801ead2:	f7e1 fbb1 	bl	8000238 <__aeabi_dsub>
 801ead6:	4602      	mov	r2, r0
 801ead8:	460b      	mov	r3, r1
 801eada:	4606      	mov	r6, r0
 801eadc:	460f      	mov	r7, r1
 801eade:	4640      	mov	r0, r8
 801eae0:	4649      	mov	r1, r9
 801eae2:	f7e1 fba9 	bl	8000238 <__aeabi_dsub>
 801eae6:	9a05      	ldr	r2, [sp, #20]
 801eae8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801eaec:	1ad3      	subs	r3, r2, r3
 801eaee:	2b31      	cmp	r3, #49	@ 0x31
 801eaf0:	dc20      	bgt.n	801eb34 <__ieee754_rem_pio2+0x274>
 801eaf2:	e9c4 0100 	strd	r0, r1, [r4]
 801eaf6:	46c2      	mov	sl, r8
 801eaf8:	46cb      	mov	fp, r9
 801eafa:	e9d4 8900 	ldrd	r8, r9, [r4]
 801eafe:	4650      	mov	r0, sl
 801eb00:	4642      	mov	r2, r8
 801eb02:	464b      	mov	r3, r9
 801eb04:	4659      	mov	r1, fp
 801eb06:	f7e1 fb97 	bl	8000238 <__aeabi_dsub>
 801eb0a:	463b      	mov	r3, r7
 801eb0c:	4632      	mov	r2, r6
 801eb0e:	f7e1 fb93 	bl	8000238 <__aeabi_dsub>
 801eb12:	9b04      	ldr	r3, [sp, #16]
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801eb1a:	f6bf af0e 	bge.w	801e93a <__ieee754_rem_pio2+0x7a>
 801eb1e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801eb22:	6063      	str	r3, [r4, #4]
 801eb24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801eb28:	f8c4 8000 	str.w	r8, [r4]
 801eb2c:	60a0      	str	r0, [r4, #8]
 801eb2e:	60e3      	str	r3, [r4, #12]
 801eb30:	426d      	negs	r5, r5
 801eb32:	e702      	b.n	801e93a <__ieee754_rem_pio2+0x7a>
 801eb34:	a326      	add	r3, pc, #152	@ (adr r3, 801ebd0 <__ieee754_rem_pio2+0x310>)
 801eb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb3e:	f7e1 fd33 	bl	80005a8 <__aeabi_dmul>
 801eb42:	4606      	mov	r6, r0
 801eb44:	460f      	mov	r7, r1
 801eb46:	4602      	mov	r2, r0
 801eb48:	460b      	mov	r3, r1
 801eb4a:	4640      	mov	r0, r8
 801eb4c:	4649      	mov	r1, r9
 801eb4e:	f7e1 fb73 	bl	8000238 <__aeabi_dsub>
 801eb52:	4602      	mov	r2, r0
 801eb54:	460b      	mov	r3, r1
 801eb56:	4682      	mov	sl, r0
 801eb58:	468b      	mov	fp, r1
 801eb5a:	4640      	mov	r0, r8
 801eb5c:	4649      	mov	r1, r9
 801eb5e:	f7e1 fb6b 	bl	8000238 <__aeabi_dsub>
 801eb62:	4632      	mov	r2, r6
 801eb64:	463b      	mov	r3, r7
 801eb66:	f7e1 fb67 	bl	8000238 <__aeabi_dsub>
 801eb6a:	a31b      	add	r3, pc, #108	@ (adr r3, 801ebd8 <__ieee754_rem_pio2+0x318>)
 801eb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb70:	4606      	mov	r6, r0
 801eb72:	460f      	mov	r7, r1
 801eb74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb78:	f7e1 fd16 	bl	80005a8 <__aeabi_dmul>
 801eb7c:	4632      	mov	r2, r6
 801eb7e:	463b      	mov	r3, r7
 801eb80:	f7e1 fb5a 	bl	8000238 <__aeabi_dsub>
 801eb84:	4606      	mov	r6, r0
 801eb86:	460f      	mov	r7, r1
 801eb88:	e764      	b.n	801ea54 <__ieee754_rem_pio2+0x194>
 801eb8a:	4b1b      	ldr	r3, [pc, #108]	@ (801ebf8 <__ieee754_rem_pio2+0x338>)
 801eb8c:	4598      	cmp	r8, r3
 801eb8e:	d935      	bls.n	801ebfc <__ieee754_rem_pio2+0x33c>
 801eb90:	4632      	mov	r2, r6
 801eb92:	463b      	mov	r3, r7
 801eb94:	4630      	mov	r0, r6
 801eb96:	4639      	mov	r1, r7
 801eb98:	f7e1 fb4e 	bl	8000238 <__aeabi_dsub>
 801eb9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801eba0:	e9c4 0100 	strd	r0, r1, [r4]
 801eba4:	e69e      	b.n	801e8e4 <__ieee754_rem_pio2+0x24>
 801eba6:	bf00      	nop
 801eba8:	54400000 	.word	0x54400000
 801ebac:	3ff921fb 	.word	0x3ff921fb
 801ebb0:	1a626331 	.word	0x1a626331
 801ebb4:	3dd0b461 	.word	0x3dd0b461
 801ebb8:	1a600000 	.word	0x1a600000
 801ebbc:	3dd0b461 	.word	0x3dd0b461
 801ebc0:	2e037073 	.word	0x2e037073
 801ebc4:	3ba3198a 	.word	0x3ba3198a
 801ebc8:	6dc9c883 	.word	0x6dc9c883
 801ebcc:	3fe45f30 	.word	0x3fe45f30
 801ebd0:	2e000000 	.word	0x2e000000
 801ebd4:	3ba3198a 	.word	0x3ba3198a
 801ebd8:	252049c1 	.word	0x252049c1
 801ebdc:	397b839a 	.word	0x397b839a
 801ebe0:	3fe921fb 	.word	0x3fe921fb
 801ebe4:	4002d97b 	.word	0x4002d97b
 801ebe8:	3ff921fb 	.word	0x3ff921fb
 801ebec:	413921fb 	.word	0x413921fb
 801ebf0:	3fe00000 	.word	0x3fe00000
 801ebf4:	080223b4 	.word	0x080223b4
 801ebf8:	7fefffff 	.word	0x7fefffff
 801ebfc:	ea4f 5528 	mov.w	r5, r8, asr #20
 801ec00:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801ec04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801ec08:	4630      	mov	r0, r6
 801ec0a:	460f      	mov	r7, r1
 801ec0c:	f7e1 ff7c 	bl	8000b08 <__aeabi_d2iz>
 801ec10:	f7e1 fc60 	bl	80004d4 <__aeabi_i2d>
 801ec14:	4602      	mov	r2, r0
 801ec16:	460b      	mov	r3, r1
 801ec18:	4630      	mov	r0, r6
 801ec1a:	4639      	mov	r1, r7
 801ec1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ec20:	f7e1 fb0a 	bl	8000238 <__aeabi_dsub>
 801ec24:	4b22      	ldr	r3, [pc, #136]	@ (801ecb0 <__ieee754_rem_pio2+0x3f0>)
 801ec26:	2200      	movs	r2, #0
 801ec28:	f7e1 fcbe 	bl	80005a8 <__aeabi_dmul>
 801ec2c:	460f      	mov	r7, r1
 801ec2e:	4606      	mov	r6, r0
 801ec30:	f7e1 ff6a 	bl	8000b08 <__aeabi_d2iz>
 801ec34:	f7e1 fc4e 	bl	80004d4 <__aeabi_i2d>
 801ec38:	4602      	mov	r2, r0
 801ec3a:	460b      	mov	r3, r1
 801ec3c:	4630      	mov	r0, r6
 801ec3e:	4639      	mov	r1, r7
 801ec40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ec44:	f7e1 faf8 	bl	8000238 <__aeabi_dsub>
 801ec48:	4b19      	ldr	r3, [pc, #100]	@ (801ecb0 <__ieee754_rem_pio2+0x3f0>)
 801ec4a:	2200      	movs	r2, #0
 801ec4c:	f7e1 fcac 	bl	80005a8 <__aeabi_dmul>
 801ec50:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801ec54:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801ec58:	f04f 0803 	mov.w	r8, #3
 801ec5c:	2600      	movs	r6, #0
 801ec5e:	2700      	movs	r7, #0
 801ec60:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801ec64:	4632      	mov	r2, r6
 801ec66:	463b      	mov	r3, r7
 801ec68:	46c2      	mov	sl, r8
 801ec6a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ec6e:	f7e1 ff03 	bl	8000a78 <__aeabi_dcmpeq>
 801ec72:	2800      	cmp	r0, #0
 801ec74:	d1f4      	bne.n	801ec60 <__ieee754_rem_pio2+0x3a0>
 801ec76:	4b0f      	ldr	r3, [pc, #60]	@ (801ecb4 <__ieee754_rem_pio2+0x3f4>)
 801ec78:	9301      	str	r3, [sp, #4]
 801ec7a:	2302      	movs	r3, #2
 801ec7c:	9300      	str	r3, [sp, #0]
 801ec7e:	462a      	mov	r2, r5
 801ec80:	4653      	mov	r3, sl
 801ec82:	4621      	mov	r1, r4
 801ec84:	a806      	add	r0, sp, #24
 801ec86:	f000 f947 	bl	801ef18 <__kernel_rem_pio2>
 801ec8a:	9b04      	ldr	r3, [sp, #16]
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	4605      	mov	r5, r0
 801ec90:	f6bf ae53 	bge.w	801e93a <__ieee754_rem_pio2+0x7a>
 801ec94:	e9d4 2100 	ldrd	r2, r1, [r4]
 801ec98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ec9c:	e9c4 2300 	strd	r2, r3, [r4]
 801eca0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801eca4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801eca8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801ecac:	e740      	b.n	801eb30 <__ieee754_rem_pio2+0x270>
 801ecae:	bf00      	nop
 801ecb0:	41700000 	.word	0x41700000
 801ecb4:	08022434 	.word	0x08022434

0801ecb8 <acos>:
 801ecb8:	b538      	push	{r3, r4, r5, lr}
 801ecba:	ed2d 8b02 	vpush	{d8}
 801ecbe:	ec55 4b10 	vmov	r4, r5, d0
 801ecc2:	f000 fc81 	bl	801f5c8 <__ieee754_acos>
 801ecc6:	4622      	mov	r2, r4
 801ecc8:	462b      	mov	r3, r5
 801ecca:	4620      	mov	r0, r4
 801eccc:	4629      	mov	r1, r5
 801ecce:	eeb0 8a40 	vmov.f32	s16, s0
 801ecd2:	eef0 8a60 	vmov.f32	s17, s1
 801ecd6:	f7e1 ff01 	bl	8000adc <__aeabi_dcmpun>
 801ecda:	b9a8      	cbnz	r0, 801ed08 <acos+0x50>
 801ecdc:	ec45 4b10 	vmov	d0, r4, r5
 801ece0:	f000 f81e 	bl	801ed20 <fabs>
 801ece4:	4b0c      	ldr	r3, [pc, #48]	@ (801ed18 <acos+0x60>)
 801ece6:	ec51 0b10 	vmov	r0, r1, d0
 801ecea:	2200      	movs	r2, #0
 801ecec:	f7e1 feec 	bl	8000ac8 <__aeabi_dcmpgt>
 801ecf0:	b150      	cbz	r0, 801ed08 <acos+0x50>
 801ecf2:	f7fc fe71 	bl	801b9d8 <__errno>
 801ecf6:	ecbd 8b02 	vpop	{d8}
 801ecfa:	2321      	movs	r3, #33	@ 0x21
 801ecfc:	6003      	str	r3, [r0, #0]
 801ecfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ed02:	4806      	ldr	r0, [pc, #24]	@ (801ed1c <acos+0x64>)
 801ed04:	f7fc beac 	b.w	801ba60 <nan>
 801ed08:	eeb0 0a48 	vmov.f32	s0, s16
 801ed0c:	eef0 0a68 	vmov.f32	s1, s17
 801ed10:	ecbd 8b02 	vpop	{d8}
 801ed14:	bd38      	pop	{r3, r4, r5, pc}
 801ed16:	bf00      	nop
 801ed18:	3ff00000 	.word	0x3ff00000
 801ed1c:	0802216e 	.word	0x0802216e

0801ed20 <fabs>:
 801ed20:	ec51 0b10 	vmov	r0, r1, d0
 801ed24:	4602      	mov	r2, r0
 801ed26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ed2a:	ec43 2b10 	vmov	d0, r2, r3
 801ed2e:	4770      	bx	lr

0801ed30 <__ieee754_expf>:
 801ed30:	ee10 2a10 	vmov	r2, s0
 801ed34:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801ed38:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ed3c:	d902      	bls.n	801ed44 <__ieee754_expf+0x14>
 801ed3e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ed42:	4770      	bx	lr
 801ed44:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801ed48:	d106      	bne.n	801ed58 <__ieee754_expf+0x28>
 801ed4a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801ee84 <__ieee754_expf+0x154>
 801ed4e:	2900      	cmp	r1, #0
 801ed50:	bf18      	it	ne
 801ed52:	eeb0 0a67 	vmovne.f32	s0, s15
 801ed56:	4770      	bx	lr
 801ed58:	484b      	ldr	r0, [pc, #300]	@ (801ee88 <__ieee754_expf+0x158>)
 801ed5a:	4282      	cmp	r2, r0
 801ed5c:	dd02      	ble.n	801ed64 <__ieee754_expf+0x34>
 801ed5e:	2000      	movs	r0, #0
 801ed60:	f000 b8d4 	b.w	801ef0c <__math_oflowf>
 801ed64:	2a00      	cmp	r2, #0
 801ed66:	da05      	bge.n	801ed74 <__ieee754_expf+0x44>
 801ed68:	4a48      	ldr	r2, [pc, #288]	@ (801ee8c <__ieee754_expf+0x15c>)
 801ed6a:	4293      	cmp	r3, r2
 801ed6c:	d902      	bls.n	801ed74 <__ieee754_expf+0x44>
 801ed6e:	2000      	movs	r0, #0
 801ed70:	f000 b8c6 	b.w	801ef00 <__math_uflowf>
 801ed74:	4a46      	ldr	r2, [pc, #280]	@ (801ee90 <__ieee754_expf+0x160>)
 801ed76:	4293      	cmp	r3, r2
 801ed78:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801ed7c:	d952      	bls.n	801ee24 <__ieee754_expf+0xf4>
 801ed7e:	4a45      	ldr	r2, [pc, #276]	@ (801ee94 <__ieee754_expf+0x164>)
 801ed80:	4293      	cmp	r3, r2
 801ed82:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801ed86:	d834      	bhi.n	801edf2 <__ieee754_expf+0xc2>
 801ed88:	4b43      	ldr	r3, [pc, #268]	@ (801ee98 <__ieee754_expf+0x168>)
 801ed8a:	4413      	add	r3, r2
 801ed8c:	ed93 7a00 	vldr	s14, [r3]
 801ed90:	4b42      	ldr	r3, [pc, #264]	@ (801ee9c <__ieee754_expf+0x16c>)
 801ed92:	4413      	add	r3, r2
 801ed94:	ee30 7a47 	vsub.f32	s14, s0, s14
 801ed98:	f1c1 0201 	rsb	r2, r1, #1
 801ed9c:	edd3 7a00 	vldr	s15, [r3]
 801eda0:	1a52      	subs	r2, r2, r1
 801eda2:	ee37 0a67 	vsub.f32	s0, s14, s15
 801eda6:	ee20 6a00 	vmul.f32	s12, s0, s0
 801edaa:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801eea0 <__ieee754_expf+0x170>
 801edae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801eea4 <__ieee754_expf+0x174>
 801edb2:	eee6 6a05 	vfma.f32	s13, s12, s10
 801edb6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801eea8 <__ieee754_expf+0x178>
 801edba:	eea6 5a86 	vfma.f32	s10, s13, s12
 801edbe:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801eeac <__ieee754_expf+0x17c>
 801edc2:	eee5 6a06 	vfma.f32	s13, s10, s12
 801edc6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801eeb0 <__ieee754_expf+0x180>
 801edca:	eea6 5a86 	vfma.f32	s10, s13, s12
 801edce:	eef0 6a40 	vmov.f32	s13, s0
 801edd2:	eee5 6a46 	vfms.f32	s13, s10, s12
 801edd6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801edda:	ee20 5a26 	vmul.f32	s10, s0, s13
 801edde:	bb92      	cbnz	r2, 801ee46 <__ieee754_expf+0x116>
 801ede0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801ede4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801ede8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801edec:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801edf0:	4770      	bx	lr
 801edf2:	4b30      	ldr	r3, [pc, #192]	@ (801eeb4 <__ieee754_expf+0x184>)
 801edf4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801eeb8 <__ieee754_expf+0x188>
 801edf8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801eebc <__ieee754_expf+0x18c>
 801edfc:	4413      	add	r3, r2
 801edfe:	edd3 7a00 	vldr	s15, [r3]
 801ee02:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ee06:	eeb0 7a40 	vmov.f32	s14, s0
 801ee0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ee0e:	ee17 2a90 	vmov	r2, s15
 801ee12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ee16:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ee1a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801eec0 <__ieee754_expf+0x190>
 801ee1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ee22:	e7be      	b.n	801eda2 <__ieee754_expf+0x72>
 801ee24:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801ee28:	d20b      	bcs.n	801ee42 <__ieee754_expf+0x112>
 801ee2a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801eec4 <__ieee754_expf+0x194>
 801ee2e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ee32:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ee36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee3a:	dd02      	ble.n	801ee42 <__ieee754_expf+0x112>
 801ee3c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801ee40:	4770      	bx	lr
 801ee42:	2200      	movs	r2, #0
 801ee44:	e7af      	b.n	801eda6 <__ieee754_expf+0x76>
 801ee46:	ee36 6a66 	vsub.f32	s12, s12, s13
 801ee4a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801ee4e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801ee52:	bfb8      	it	lt
 801ee54:	3264      	addlt	r2, #100	@ 0x64
 801ee56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ee5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ee5e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ee62:	ee17 3a90 	vmov	r3, s15
 801ee66:	bfab      	itete	ge
 801ee68:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801ee6c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801ee70:	ee00 3a10 	vmovge	s0, r3
 801ee74:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801eec8 <__ieee754_expf+0x198>
 801ee78:	bfbc      	itt	lt
 801ee7a:	ee00 3a10 	vmovlt	s0, r3
 801ee7e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801ee82:	4770      	bx	lr
 801ee84:	00000000 	.word	0x00000000
 801ee88:	42b17217 	.word	0x42b17217
 801ee8c:	42cff1b5 	.word	0x42cff1b5
 801ee90:	3eb17218 	.word	0x3eb17218
 801ee94:	3f851591 	.word	0x3f851591
 801ee98:	08022544 	.word	0x08022544
 801ee9c:	0802253c 	.word	0x0802253c
 801eea0:	3331bb4c 	.word	0x3331bb4c
 801eea4:	b5ddea0e 	.word	0xb5ddea0e
 801eea8:	388ab355 	.word	0x388ab355
 801eeac:	bb360b61 	.word	0xbb360b61
 801eeb0:	3e2aaaab 	.word	0x3e2aaaab
 801eeb4:	0802254c 	.word	0x0802254c
 801eeb8:	3fb8aa3b 	.word	0x3fb8aa3b
 801eebc:	3f317180 	.word	0x3f317180
 801eec0:	3717f7d1 	.word	0x3717f7d1
 801eec4:	7149f2ca 	.word	0x7149f2ca
 801eec8:	0d800000 	.word	0x0d800000

0801eecc <with_errnof>:
 801eecc:	b510      	push	{r4, lr}
 801eece:	ed2d 8b02 	vpush	{d8}
 801eed2:	eeb0 8a40 	vmov.f32	s16, s0
 801eed6:	4604      	mov	r4, r0
 801eed8:	f7fc fd7e 	bl	801b9d8 <__errno>
 801eedc:	eeb0 0a48 	vmov.f32	s0, s16
 801eee0:	ecbd 8b02 	vpop	{d8}
 801eee4:	6004      	str	r4, [r0, #0]
 801eee6:	bd10      	pop	{r4, pc}

0801eee8 <xflowf>:
 801eee8:	b130      	cbz	r0, 801eef8 <xflowf+0x10>
 801eeea:	eef1 7a40 	vneg.f32	s15, s0
 801eeee:	ee27 0a80 	vmul.f32	s0, s15, s0
 801eef2:	2022      	movs	r0, #34	@ 0x22
 801eef4:	f7ff bfea 	b.w	801eecc <with_errnof>
 801eef8:	eef0 7a40 	vmov.f32	s15, s0
 801eefc:	e7f7      	b.n	801eeee <xflowf+0x6>
	...

0801ef00 <__math_uflowf>:
 801ef00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ef08 <__math_uflowf+0x8>
 801ef04:	f7ff bff0 	b.w	801eee8 <xflowf>
 801ef08:	10000000 	.word	0x10000000

0801ef0c <__math_oflowf>:
 801ef0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ef14 <__math_oflowf+0x8>
 801ef10:	f7ff bfea 	b.w	801eee8 <xflowf>
 801ef14:	70000000 	.word	0x70000000

0801ef18 <__kernel_rem_pio2>:
 801ef18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef1c:	ed2d 8b02 	vpush	{d8}
 801ef20:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801ef24:	f112 0f14 	cmn.w	r2, #20
 801ef28:	9306      	str	r3, [sp, #24]
 801ef2a:	9104      	str	r1, [sp, #16]
 801ef2c:	4bbe      	ldr	r3, [pc, #760]	@ (801f228 <__kernel_rem_pio2+0x310>)
 801ef2e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801ef30:	9008      	str	r0, [sp, #32]
 801ef32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ef36:	9300      	str	r3, [sp, #0]
 801ef38:	9b06      	ldr	r3, [sp, #24]
 801ef3a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ef3e:	bfa8      	it	ge
 801ef40:	1ed4      	subge	r4, r2, #3
 801ef42:	9305      	str	r3, [sp, #20]
 801ef44:	bfb2      	itee	lt
 801ef46:	2400      	movlt	r4, #0
 801ef48:	2318      	movge	r3, #24
 801ef4a:	fb94 f4f3 	sdivge	r4, r4, r3
 801ef4e:	f06f 0317 	mvn.w	r3, #23
 801ef52:	fb04 3303 	mla	r3, r4, r3, r3
 801ef56:	eb03 0b02 	add.w	fp, r3, r2
 801ef5a:	9b00      	ldr	r3, [sp, #0]
 801ef5c:	9a05      	ldr	r2, [sp, #20]
 801ef5e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801f218 <__kernel_rem_pio2+0x300>
 801ef62:	eb03 0802 	add.w	r8, r3, r2
 801ef66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ef68:	1aa7      	subs	r7, r4, r2
 801ef6a:	ae20      	add	r6, sp, #128	@ 0x80
 801ef6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ef70:	2500      	movs	r5, #0
 801ef72:	4545      	cmp	r5, r8
 801ef74:	dd13      	ble.n	801ef9e <__kernel_rem_pio2+0x86>
 801ef76:	9b06      	ldr	r3, [sp, #24]
 801ef78:	aa20      	add	r2, sp, #128	@ 0x80
 801ef7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ef7e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801ef82:	f04f 0800 	mov.w	r8, #0
 801ef86:	9b00      	ldr	r3, [sp, #0]
 801ef88:	4598      	cmp	r8, r3
 801ef8a:	dc31      	bgt.n	801eff0 <__kernel_rem_pio2+0xd8>
 801ef8c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801f218 <__kernel_rem_pio2+0x300>
 801ef90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ef94:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ef98:	462f      	mov	r7, r5
 801ef9a:	2600      	movs	r6, #0
 801ef9c:	e01b      	b.n	801efd6 <__kernel_rem_pio2+0xbe>
 801ef9e:	42ef      	cmn	r7, r5
 801efa0:	d407      	bmi.n	801efb2 <__kernel_rem_pio2+0x9a>
 801efa2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801efa6:	f7e1 fa95 	bl	80004d4 <__aeabi_i2d>
 801efaa:	e8e6 0102 	strd	r0, r1, [r6], #8
 801efae:	3501      	adds	r5, #1
 801efb0:	e7df      	b.n	801ef72 <__kernel_rem_pio2+0x5a>
 801efb2:	ec51 0b18 	vmov	r0, r1, d8
 801efb6:	e7f8      	b.n	801efaa <__kernel_rem_pio2+0x92>
 801efb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801efbc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801efc0:	f7e1 faf2 	bl	80005a8 <__aeabi_dmul>
 801efc4:	4602      	mov	r2, r0
 801efc6:	460b      	mov	r3, r1
 801efc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efcc:	f7e1 f936 	bl	800023c <__adddf3>
 801efd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801efd4:	3601      	adds	r6, #1
 801efd6:	9b05      	ldr	r3, [sp, #20]
 801efd8:	429e      	cmp	r6, r3
 801efda:	f1a7 0708 	sub.w	r7, r7, #8
 801efde:	ddeb      	ble.n	801efb8 <__kernel_rem_pio2+0xa0>
 801efe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801efe4:	f108 0801 	add.w	r8, r8, #1
 801efe8:	ecaa 7b02 	vstmia	sl!, {d7}
 801efec:	3508      	adds	r5, #8
 801efee:	e7ca      	b.n	801ef86 <__kernel_rem_pio2+0x6e>
 801eff0:	9b00      	ldr	r3, [sp, #0]
 801eff2:	f8dd 8000 	ldr.w	r8, [sp]
 801eff6:	aa0c      	add	r2, sp, #48	@ 0x30
 801eff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801effc:	930a      	str	r3, [sp, #40]	@ 0x28
 801effe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801f000:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801f004:	9309      	str	r3, [sp, #36]	@ 0x24
 801f006:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801f00a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f00c:	ab98      	add	r3, sp, #608	@ 0x260
 801f00e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801f012:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801f016:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f01a:	ac0c      	add	r4, sp, #48	@ 0x30
 801f01c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801f01e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801f022:	46a1      	mov	r9, r4
 801f024:	46c2      	mov	sl, r8
 801f026:	f1ba 0f00 	cmp.w	sl, #0
 801f02a:	f1a5 0508 	sub.w	r5, r5, #8
 801f02e:	dc77      	bgt.n	801f120 <__kernel_rem_pio2+0x208>
 801f030:	4658      	mov	r0, fp
 801f032:	ed9d 0b02 	vldr	d0, [sp, #8]
 801f036:	f000 fd23 	bl	801fa80 <scalbn>
 801f03a:	ec57 6b10 	vmov	r6, r7, d0
 801f03e:	2200      	movs	r2, #0
 801f040:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801f044:	4630      	mov	r0, r6
 801f046:	4639      	mov	r1, r7
 801f048:	f7e1 faae 	bl	80005a8 <__aeabi_dmul>
 801f04c:	ec41 0b10 	vmov	d0, r0, r1
 801f050:	f7ff fa36 	bl	801e4c0 <floor>
 801f054:	4b75      	ldr	r3, [pc, #468]	@ (801f22c <__kernel_rem_pio2+0x314>)
 801f056:	ec51 0b10 	vmov	r0, r1, d0
 801f05a:	2200      	movs	r2, #0
 801f05c:	f7e1 faa4 	bl	80005a8 <__aeabi_dmul>
 801f060:	4602      	mov	r2, r0
 801f062:	460b      	mov	r3, r1
 801f064:	4630      	mov	r0, r6
 801f066:	4639      	mov	r1, r7
 801f068:	f7e1 f8e6 	bl	8000238 <__aeabi_dsub>
 801f06c:	460f      	mov	r7, r1
 801f06e:	4606      	mov	r6, r0
 801f070:	f7e1 fd4a 	bl	8000b08 <__aeabi_d2iz>
 801f074:	9002      	str	r0, [sp, #8]
 801f076:	f7e1 fa2d 	bl	80004d4 <__aeabi_i2d>
 801f07a:	4602      	mov	r2, r0
 801f07c:	460b      	mov	r3, r1
 801f07e:	4630      	mov	r0, r6
 801f080:	4639      	mov	r1, r7
 801f082:	f7e1 f8d9 	bl	8000238 <__aeabi_dsub>
 801f086:	f1bb 0f00 	cmp.w	fp, #0
 801f08a:	4606      	mov	r6, r0
 801f08c:	460f      	mov	r7, r1
 801f08e:	dd6c      	ble.n	801f16a <__kernel_rem_pio2+0x252>
 801f090:	f108 31ff 	add.w	r1, r8, #4294967295
 801f094:	ab0c      	add	r3, sp, #48	@ 0x30
 801f096:	9d02      	ldr	r5, [sp, #8]
 801f098:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f09c:	f1cb 0018 	rsb	r0, fp, #24
 801f0a0:	fa43 f200 	asr.w	r2, r3, r0
 801f0a4:	4415      	add	r5, r2
 801f0a6:	4082      	lsls	r2, r0
 801f0a8:	1a9b      	subs	r3, r3, r2
 801f0aa:	aa0c      	add	r2, sp, #48	@ 0x30
 801f0ac:	9502      	str	r5, [sp, #8]
 801f0ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f0b2:	f1cb 0217 	rsb	r2, fp, #23
 801f0b6:	fa43 f902 	asr.w	r9, r3, r2
 801f0ba:	f1b9 0f00 	cmp.w	r9, #0
 801f0be:	dd64      	ble.n	801f18a <__kernel_rem_pio2+0x272>
 801f0c0:	9b02      	ldr	r3, [sp, #8]
 801f0c2:	2200      	movs	r2, #0
 801f0c4:	3301      	adds	r3, #1
 801f0c6:	9302      	str	r3, [sp, #8]
 801f0c8:	4615      	mov	r5, r2
 801f0ca:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801f0ce:	4590      	cmp	r8, r2
 801f0d0:	f300 80b8 	bgt.w	801f244 <__kernel_rem_pio2+0x32c>
 801f0d4:	f1bb 0f00 	cmp.w	fp, #0
 801f0d8:	dd07      	ble.n	801f0ea <__kernel_rem_pio2+0x1d2>
 801f0da:	f1bb 0f01 	cmp.w	fp, #1
 801f0de:	f000 80bf 	beq.w	801f260 <__kernel_rem_pio2+0x348>
 801f0e2:	f1bb 0f02 	cmp.w	fp, #2
 801f0e6:	f000 80c6 	beq.w	801f276 <__kernel_rem_pio2+0x35e>
 801f0ea:	f1b9 0f02 	cmp.w	r9, #2
 801f0ee:	d14c      	bne.n	801f18a <__kernel_rem_pio2+0x272>
 801f0f0:	4632      	mov	r2, r6
 801f0f2:	463b      	mov	r3, r7
 801f0f4:	494e      	ldr	r1, [pc, #312]	@ (801f230 <__kernel_rem_pio2+0x318>)
 801f0f6:	2000      	movs	r0, #0
 801f0f8:	f7e1 f89e 	bl	8000238 <__aeabi_dsub>
 801f0fc:	4606      	mov	r6, r0
 801f0fe:	460f      	mov	r7, r1
 801f100:	2d00      	cmp	r5, #0
 801f102:	d042      	beq.n	801f18a <__kernel_rem_pio2+0x272>
 801f104:	4658      	mov	r0, fp
 801f106:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801f220 <__kernel_rem_pio2+0x308>
 801f10a:	f000 fcb9 	bl	801fa80 <scalbn>
 801f10e:	4630      	mov	r0, r6
 801f110:	4639      	mov	r1, r7
 801f112:	ec53 2b10 	vmov	r2, r3, d0
 801f116:	f7e1 f88f 	bl	8000238 <__aeabi_dsub>
 801f11a:	4606      	mov	r6, r0
 801f11c:	460f      	mov	r7, r1
 801f11e:	e034      	b.n	801f18a <__kernel_rem_pio2+0x272>
 801f120:	4b44      	ldr	r3, [pc, #272]	@ (801f234 <__kernel_rem_pio2+0x31c>)
 801f122:	2200      	movs	r2, #0
 801f124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f128:	f7e1 fa3e 	bl	80005a8 <__aeabi_dmul>
 801f12c:	f7e1 fcec 	bl	8000b08 <__aeabi_d2iz>
 801f130:	f7e1 f9d0 	bl	80004d4 <__aeabi_i2d>
 801f134:	4b40      	ldr	r3, [pc, #256]	@ (801f238 <__kernel_rem_pio2+0x320>)
 801f136:	2200      	movs	r2, #0
 801f138:	4606      	mov	r6, r0
 801f13a:	460f      	mov	r7, r1
 801f13c:	f7e1 fa34 	bl	80005a8 <__aeabi_dmul>
 801f140:	4602      	mov	r2, r0
 801f142:	460b      	mov	r3, r1
 801f144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f148:	f7e1 f876 	bl	8000238 <__aeabi_dsub>
 801f14c:	f7e1 fcdc 	bl	8000b08 <__aeabi_d2iz>
 801f150:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f154:	f849 0b04 	str.w	r0, [r9], #4
 801f158:	4639      	mov	r1, r7
 801f15a:	4630      	mov	r0, r6
 801f15c:	f7e1 f86e 	bl	800023c <__adddf3>
 801f160:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f168:	e75d      	b.n	801f026 <__kernel_rem_pio2+0x10e>
 801f16a:	d107      	bne.n	801f17c <__kernel_rem_pio2+0x264>
 801f16c:	f108 33ff 	add.w	r3, r8, #4294967295
 801f170:	aa0c      	add	r2, sp, #48	@ 0x30
 801f172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f176:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801f17a:	e79e      	b.n	801f0ba <__kernel_rem_pio2+0x1a2>
 801f17c:	4b2f      	ldr	r3, [pc, #188]	@ (801f23c <__kernel_rem_pio2+0x324>)
 801f17e:	2200      	movs	r2, #0
 801f180:	f7e1 fc98 	bl	8000ab4 <__aeabi_dcmpge>
 801f184:	2800      	cmp	r0, #0
 801f186:	d143      	bne.n	801f210 <__kernel_rem_pio2+0x2f8>
 801f188:	4681      	mov	r9, r0
 801f18a:	2200      	movs	r2, #0
 801f18c:	2300      	movs	r3, #0
 801f18e:	4630      	mov	r0, r6
 801f190:	4639      	mov	r1, r7
 801f192:	f7e1 fc71 	bl	8000a78 <__aeabi_dcmpeq>
 801f196:	2800      	cmp	r0, #0
 801f198:	f000 80bf 	beq.w	801f31a <__kernel_rem_pio2+0x402>
 801f19c:	f108 33ff 	add.w	r3, r8, #4294967295
 801f1a0:	2200      	movs	r2, #0
 801f1a2:	9900      	ldr	r1, [sp, #0]
 801f1a4:	428b      	cmp	r3, r1
 801f1a6:	da6e      	bge.n	801f286 <__kernel_rem_pio2+0x36e>
 801f1a8:	2a00      	cmp	r2, #0
 801f1aa:	f000 8089 	beq.w	801f2c0 <__kernel_rem_pio2+0x3a8>
 801f1ae:	f108 38ff 	add.w	r8, r8, #4294967295
 801f1b2:	ab0c      	add	r3, sp, #48	@ 0x30
 801f1b4:	f1ab 0b18 	sub.w	fp, fp, #24
 801f1b8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	d0f6      	beq.n	801f1ae <__kernel_rem_pio2+0x296>
 801f1c0:	4658      	mov	r0, fp
 801f1c2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f220 <__kernel_rem_pio2+0x308>
 801f1c6:	f000 fc5b 	bl	801fa80 <scalbn>
 801f1ca:	f108 0301 	add.w	r3, r8, #1
 801f1ce:	00da      	lsls	r2, r3, #3
 801f1d0:	9205      	str	r2, [sp, #20]
 801f1d2:	ec55 4b10 	vmov	r4, r5, d0
 801f1d6:	aa70      	add	r2, sp, #448	@ 0x1c0
 801f1d8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801f234 <__kernel_rem_pio2+0x31c>
 801f1dc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801f1e0:	4646      	mov	r6, r8
 801f1e2:	f04f 0a00 	mov.w	sl, #0
 801f1e6:	2e00      	cmp	r6, #0
 801f1e8:	f280 80cf 	bge.w	801f38a <__kernel_rem_pio2+0x472>
 801f1ec:	4644      	mov	r4, r8
 801f1ee:	2c00      	cmp	r4, #0
 801f1f0:	f2c0 80fd 	blt.w	801f3ee <__kernel_rem_pio2+0x4d6>
 801f1f4:	4b12      	ldr	r3, [pc, #72]	@ (801f240 <__kernel_rem_pio2+0x328>)
 801f1f6:	461f      	mov	r7, r3
 801f1f8:	ab70      	add	r3, sp, #448	@ 0x1c0
 801f1fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f1fe:	9306      	str	r3, [sp, #24]
 801f200:	f04f 0a00 	mov.w	sl, #0
 801f204:	f04f 0b00 	mov.w	fp, #0
 801f208:	2600      	movs	r6, #0
 801f20a:	eba8 0504 	sub.w	r5, r8, r4
 801f20e:	e0e2      	b.n	801f3d6 <__kernel_rem_pio2+0x4be>
 801f210:	f04f 0902 	mov.w	r9, #2
 801f214:	e754      	b.n	801f0c0 <__kernel_rem_pio2+0x1a8>
 801f216:	bf00      	nop
	...
 801f224:	3ff00000 	.word	0x3ff00000
 801f228:	08022598 	.word	0x08022598
 801f22c:	40200000 	.word	0x40200000
 801f230:	3ff00000 	.word	0x3ff00000
 801f234:	3e700000 	.word	0x3e700000
 801f238:	41700000 	.word	0x41700000
 801f23c:	3fe00000 	.word	0x3fe00000
 801f240:	08022558 	.word	0x08022558
 801f244:	f854 3b04 	ldr.w	r3, [r4], #4
 801f248:	b945      	cbnz	r5, 801f25c <__kernel_rem_pio2+0x344>
 801f24a:	b123      	cbz	r3, 801f256 <__kernel_rem_pio2+0x33e>
 801f24c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801f250:	f844 3c04 	str.w	r3, [r4, #-4]
 801f254:	2301      	movs	r3, #1
 801f256:	3201      	adds	r2, #1
 801f258:	461d      	mov	r5, r3
 801f25a:	e738      	b.n	801f0ce <__kernel_rem_pio2+0x1b6>
 801f25c:	1acb      	subs	r3, r1, r3
 801f25e:	e7f7      	b.n	801f250 <__kernel_rem_pio2+0x338>
 801f260:	f108 32ff 	add.w	r2, r8, #4294967295
 801f264:	ab0c      	add	r3, sp, #48	@ 0x30
 801f266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f26a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f26e:	a90c      	add	r1, sp, #48	@ 0x30
 801f270:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f274:	e739      	b.n	801f0ea <__kernel_rem_pio2+0x1d2>
 801f276:	f108 32ff 	add.w	r2, r8, #4294967295
 801f27a:	ab0c      	add	r3, sp, #48	@ 0x30
 801f27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f280:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f284:	e7f3      	b.n	801f26e <__kernel_rem_pio2+0x356>
 801f286:	a90c      	add	r1, sp, #48	@ 0x30
 801f288:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f28c:	3b01      	subs	r3, #1
 801f28e:	430a      	orrs	r2, r1
 801f290:	e787      	b.n	801f1a2 <__kernel_rem_pio2+0x28a>
 801f292:	3401      	adds	r4, #1
 801f294:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f298:	2a00      	cmp	r2, #0
 801f29a:	d0fa      	beq.n	801f292 <__kernel_rem_pio2+0x37a>
 801f29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f29e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f2a2:	eb0d 0503 	add.w	r5, sp, r3
 801f2a6:	9b06      	ldr	r3, [sp, #24]
 801f2a8:	aa20      	add	r2, sp, #128	@ 0x80
 801f2aa:	4443      	add	r3, r8
 801f2ac:	f108 0701 	add.w	r7, r8, #1
 801f2b0:	3d98      	subs	r5, #152	@ 0x98
 801f2b2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801f2b6:	4444      	add	r4, r8
 801f2b8:	42bc      	cmp	r4, r7
 801f2ba:	da04      	bge.n	801f2c6 <__kernel_rem_pio2+0x3ae>
 801f2bc:	46a0      	mov	r8, r4
 801f2be:	e6a2      	b.n	801f006 <__kernel_rem_pio2+0xee>
 801f2c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f2c2:	2401      	movs	r4, #1
 801f2c4:	e7e6      	b.n	801f294 <__kernel_rem_pio2+0x37c>
 801f2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2c8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801f2cc:	f7e1 f902 	bl	80004d4 <__aeabi_i2d>
 801f2d0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801f598 <__kernel_rem_pio2+0x680>
 801f2d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f2d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f2dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f2e0:	46b2      	mov	sl, r6
 801f2e2:	f04f 0800 	mov.w	r8, #0
 801f2e6:	9b05      	ldr	r3, [sp, #20]
 801f2e8:	4598      	cmp	r8, r3
 801f2ea:	dd05      	ble.n	801f2f8 <__kernel_rem_pio2+0x3e0>
 801f2ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f2f0:	3701      	adds	r7, #1
 801f2f2:	eca5 7b02 	vstmia	r5!, {d7}
 801f2f6:	e7df      	b.n	801f2b8 <__kernel_rem_pio2+0x3a0>
 801f2f8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801f2fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f300:	f7e1 f952 	bl	80005a8 <__aeabi_dmul>
 801f304:	4602      	mov	r2, r0
 801f306:	460b      	mov	r3, r1
 801f308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f30c:	f7e0 ff96 	bl	800023c <__adddf3>
 801f310:	f108 0801 	add.w	r8, r8, #1
 801f314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f318:	e7e5      	b.n	801f2e6 <__kernel_rem_pio2+0x3ce>
 801f31a:	f1cb 0000 	rsb	r0, fp, #0
 801f31e:	ec47 6b10 	vmov	d0, r6, r7
 801f322:	f000 fbad 	bl	801fa80 <scalbn>
 801f326:	ec55 4b10 	vmov	r4, r5, d0
 801f32a:	4b9d      	ldr	r3, [pc, #628]	@ (801f5a0 <__kernel_rem_pio2+0x688>)
 801f32c:	2200      	movs	r2, #0
 801f32e:	4620      	mov	r0, r4
 801f330:	4629      	mov	r1, r5
 801f332:	f7e1 fbbf 	bl	8000ab4 <__aeabi_dcmpge>
 801f336:	b300      	cbz	r0, 801f37a <__kernel_rem_pio2+0x462>
 801f338:	4b9a      	ldr	r3, [pc, #616]	@ (801f5a4 <__kernel_rem_pio2+0x68c>)
 801f33a:	2200      	movs	r2, #0
 801f33c:	4620      	mov	r0, r4
 801f33e:	4629      	mov	r1, r5
 801f340:	f7e1 f932 	bl	80005a8 <__aeabi_dmul>
 801f344:	f7e1 fbe0 	bl	8000b08 <__aeabi_d2iz>
 801f348:	4606      	mov	r6, r0
 801f34a:	f7e1 f8c3 	bl	80004d4 <__aeabi_i2d>
 801f34e:	4b94      	ldr	r3, [pc, #592]	@ (801f5a0 <__kernel_rem_pio2+0x688>)
 801f350:	2200      	movs	r2, #0
 801f352:	f7e1 f929 	bl	80005a8 <__aeabi_dmul>
 801f356:	460b      	mov	r3, r1
 801f358:	4602      	mov	r2, r0
 801f35a:	4629      	mov	r1, r5
 801f35c:	4620      	mov	r0, r4
 801f35e:	f7e0 ff6b 	bl	8000238 <__aeabi_dsub>
 801f362:	f7e1 fbd1 	bl	8000b08 <__aeabi_d2iz>
 801f366:	ab0c      	add	r3, sp, #48	@ 0x30
 801f368:	f10b 0b18 	add.w	fp, fp, #24
 801f36c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f370:	f108 0801 	add.w	r8, r8, #1
 801f374:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801f378:	e722      	b.n	801f1c0 <__kernel_rem_pio2+0x2a8>
 801f37a:	4620      	mov	r0, r4
 801f37c:	4629      	mov	r1, r5
 801f37e:	f7e1 fbc3 	bl	8000b08 <__aeabi_d2iz>
 801f382:	ab0c      	add	r3, sp, #48	@ 0x30
 801f384:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f388:	e71a      	b.n	801f1c0 <__kernel_rem_pio2+0x2a8>
 801f38a:	ab0c      	add	r3, sp, #48	@ 0x30
 801f38c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f390:	f7e1 f8a0 	bl	80004d4 <__aeabi_i2d>
 801f394:	4622      	mov	r2, r4
 801f396:	462b      	mov	r3, r5
 801f398:	f7e1 f906 	bl	80005a8 <__aeabi_dmul>
 801f39c:	4652      	mov	r2, sl
 801f39e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801f3a2:	465b      	mov	r3, fp
 801f3a4:	4620      	mov	r0, r4
 801f3a6:	4629      	mov	r1, r5
 801f3a8:	f7e1 f8fe 	bl	80005a8 <__aeabi_dmul>
 801f3ac:	3e01      	subs	r6, #1
 801f3ae:	4604      	mov	r4, r0
 801f3b0:	460d      	mov	r5, r1
 801f3b2:	e718      	b.n	801f1e6 <__kernel_rem_pio2+0x2ce>
 801f3b4:	9906      	ldr	r1, [sp, #24]
 801f3b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801f3ba:	9106      	str	r1, [sp, #24]
 801f3bc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801f3c0:	f7e1 f8f2 	bl	80005a8 <__aeabi_dmul>
 801f3c4:	4602      	mov	r2, r0
 801f3c6:	460b      	mov	r3, r1
 801f3c8:	4650      	mov	r0, sl
 801f3ca:	4659      	mov	r1, fp
 801f3cc:	f7e0 ff36 	bl	800023c <__adddf3>
 801f3d0:	3601      	adds	r6, #1
 801f3d2:	4682      	mov	sl, r0
 801f3d4:	468b      	mov	fp, r1
 801f3d6:	9b00      	ldr	r3, [sp, #0]
 801f3d8:	429e      	cmp	r6, r3
 801f3da:	dc01      	bgt.n	801f3e0 <__kernel_rem_pio2+0x4c8>
 801f3dc:	42b5      	cmp	r5, r6
 801f3de:	dae9      	bge.n	801f3b4 <__kernel_rem_pio2+0x49c>
 801f3e0:	ab48      	add	r3, sp, #288	@ 0x120
 801f3e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801f3e6:	e9c5 ab00 	strd	sl, fp, [r5]
 801f3ea:	3c01      	subs	r4, #1
 801f3ec:	e6ff      	b.n	801f1ee <__kernel_rem_pio2+0x2d6>
 801f3ee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f3f0:	2b02      	cmp	r3, #2
 801f3f2:	dc0b      	bgt.n	801f40c <__kernel_rem_pio2+0x4f4>
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	dc39      	bgt.n	801f46c <__kernel_rem_pio2+0x554>
 801f3f8:	d05d      	beq.n	801f4b6 <__kernel_rem_pio2+0x59e>
 801f3fa:	9b02      	ldr	r3, [sp, #8]
 801f3fc:	f003 0007 	and.w	r0, r3, #7
 801f400:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801f404:	ecbd 8b02 	vpop	{d8}
 801f408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f40c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f40e:	2b03      	cmp	r3, #3
 801f410:	d1f3      	bne.n	801f3fa <__kernel_rem_pio2+0x4e2>
 801f412:	9b05      	ldr	r3, [sp, #20]
 801f414:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f418:	eb0d 0403 	add.w	r4, sp, r3
 801f41c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801f420:	4625      	mov	r5, r4
 801f422:	46c2      	mov	sl, r8
 801f424:	f1ba 0f00 	cmp.w	sl, #0
 801f428:	f1a5 0508 	sub.w	r5, r5, #8
 801f42c:	dc6b      	bgt.n	801f506 <__kernel_rem_pio2+0x5ee>
 801f42e:	4645      	mov	r5, r8
 801f430:	2d01      	cmp	r5, #1
 801f432:	f1a4 0408 	sub.w	r4, r4, #8
 801f436:	f300 8087 	bgt.w	801f548 <__kernel_rem_pio2+0x630>
 801f43a:	9c05      	ldr	r4, [sp, #20]
 801f43c:	ab48      	add	r3, sp, #288	@ 0x120
 801f43e:	441c      	add	r4, r3
 801f440:	2000      	movs	r0, #0
 801f442:	2100      	movs	r1, #0
 801f444:	f1b8 0f01 	cmp.w	r8, #1
 801f448:	f300 809c 	bgt.w	801f584 <__kernel_rem_pio2+0x66c>
 801f44c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801f450:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801f454:	f1b9 0f00 	cmp.w	r9, #0
 801f458:	f040 80a6 	bne.w	801f5a8 <__kernel_rem_pio2+0x690>
 801f45c:	9b04      	ldr	r3, [sp, #16]
 801f45e:	e9c3 7800 	strd	r7, r8, [r3]
 801f462:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801f466:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f46a:	e7c6      	b.n	801f3fa <__kernel_rem_pio2+0x4e2>
 801f46c:	9d05      	ldr	r5, [sp, #20]
 801f46e:	ab48      	add	r3, sp, #288	@ 0x120
 801f470:	441d      	add	r5, r3
 801f472:	4644      	mov	r4, r8
 801f474:	2000      	movs	r0, #0
 801f476:	2100      	movs	r1, #0
 801f478:	2c00      	cmp	r4, #0
 801f47a:	da35      	bge.n	801f4e8 <__kernel_rem_pio2+0x5d0>
 801f47c:	f1b9 0f00 	cmp.w	r9, #0
 801f480:	d038      	beq.n	801f4f4 <__kernel_rem_pio2+0x5dc>
 801f482:	4602      	mov	r2, r0
 801f484:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f488:	9c04      	ldr	r4, [sp, #16]
 801f48a:	e9c4 2300 	strd	r2, r3, [r4]
 801f48e:	4602      	mov	r2, r0
 801f490:	460b      	mov	r3, r1
 801f492:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801f496:	f7e0 fecf 	bl	8000238 <__aeabi_dsub>
 801f49a:	ad4a      	add	r5, sp, #296	@ 0x128
 801f49c:	2401      	movs	r4, #1
 801f49e:	45a0      	cmp	r8, r4
 801f4a0:	da2b      	bge.n	801f4fa <__kernel_rem_pio2+0x5e2>
 801f4a2:	f1b9 0f00 	cmp.w	r9, #0
 801f4a6:	d002      	beq.n	801f4ae <__kernel_rem_pio2+0x596>
 801f4a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f4ac:	4619      	mov	r1, r3
 801f4ae:	9b04      	ldr	r3, [sp, #16]
 801f4b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f4b4:	e7a1      	b.n	801f3fa <__kernel_rem_pio2+0x4e2>
 801f4b6:	9c05      	ldr	r4, [sp, #20]
 801f4b8:	ab48      	add	r3, sp, #288	@ 0x120
 801f4ba:	441c      	add	r4, r3
 801f4bc:	2000      	movs	r0, #0
 801f4be:	2100      	movs	r1, #0
 801f4c0:	f1b8 0f00 	cmp.w	r8, #0
 801f4c4:	da09      	bge.n	801f4da <__kernel_rem_pio2+0x5c2>
 801f4c6:	f1b9 0f00 	cmp.w	r9, #0
 801f4ca:	d002      	beq.n	801f4d2 <__kernel_rem_pio2+0x5ba>
 801f4cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f4d0:	4619      	mov	r1, r3
 801f4d2:	9b04      	ldr	r3, [sp, #16]
 801f4d4:	e9c3 0100 	strd	r0, r1, [r3]
 801f4d8:	e78f      	b.n	801f3fa <__kernel_rem_pio2+0x4e2>
 801f4da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f4de:	f7e0 fead 	bl	800023c <__adddf3>
 801f4e2:	f108 38ff 	add.w	r8, r8, #4294967295
 801f4e6:	e7eb      	b.n	801f4c0 <__kernel_rem_pio2+0x5a8>
 801f4e8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801f4ec:	f7e0 fea6 	bl	800023c <__adddf3>
 801f4f0:	3c01      	subs	r4, #1
 801f4f2:	e7c1      	b.n	801f478 <__kernel_rem_pio2+0x560>
 801f4f4:	4602      	mov	r2, r0
 801f4f6:	460b      	mov	r3, r1
 801f4f8:	e7c6      	b.n	801f488 <__kernel_rem_pio2+0x570>
 801f4fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801f4fe:	f7e0 fe9d 	bl	800023c <__adddf3>
 801f502:	3401      	adds	r4, #1
 801f504:	e7cb      	b.n	801f49e <__kernel_rem_pio2+0x586>
 801f506:	ed95 7b00 	vldr	d7, [r5]
 801f50a:	ed8d 7b00 	vstr	d7, [sp]
 801f50e:	ed95 7b02 	vldr	d7, [r5, #8]
 801f512:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f516:	ec53 2b17 	vmov	r2, r3, d7
 801f51a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f51e:	f7e0 fe8d 	bl	800023c <__adddf3>
 801f522:	4602      	mov	r2, r0
 801f524:	460b      	mov	r3, r1
 801f526:	4606      	mov	r6, r0
 801f528:	460f      	mov	r7, r1
 801f52a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f52e:	f7e0 fe83 	bl	8000238 <__aeabi_dsub>
 801f532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f536:	f7e0 fe81 	bl	800023c <__adddf3>
 801f53a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f53e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801f542:	e9c5 6700 	strd	r6, r7, [r5]
 801f546:	e76d      	b.n	801f424 <__kernel_rem_pio2+0x50c>
 801f548:	ed94 7b00 	vldr	d7, [r4]
 801f54c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801f550:	ec51 0b17 	vmov	r0, r1, d7
 801f554:	4652      	mov	r2, sl
 801f556:	465b      	mov	r3, fp
 801f558:	ed8d 7b00 	vstr	d7, [sp]
 801f55c:	f7e0 fe6e 	bl	800023c <__adddf3>
 801f560:	4602      	mov	r2, r0
 801f562:	460b      	mov	r3, r1
 801f564:	4606      	mov	r6, r0
 801f566:	460f      	mov	r7, r1
 801f568:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f56c:	f7e0 fe64 	bl	8000238 <__aeabi_dsub>
 801f570:	4652      	mov	r2, sl
 801f572:	465b      	mov	r3, fp
 801f574:	f7e0 fe62 	bl	800023c <__adddf3>
 801f578:	3d01      	subs	r5, #1
 801f57a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f57e:	e9c4 6700 	strd	r6, r7, [r4]
 801f582:	e755      	b.n	801f430 <__kernel_rem_pio2+0x518>
 801f584:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f588:	f7e0 fe58 	bl	800023c <__adddf3>
 801f58c:	f108 38ff 	add.w	r8, r8, #4294967295
 801f590:	e758      	b.n	801f444 <__kernel_rem_pio2+0x52c>
 801f592:	bf00      	nop
 801f594:	f3af 8000 	nop.w
	...
 801f5a0:	41700000 	.word	0x41700000
 801f5a4:	3e700000 	.word	0x3e700000
 801f5a8:	9b04      	ldr	r3, [sp, #16]
 801f5aa:	9a04      	ldr	r2, [sp, #16]
 801f5ac:	601f      	str	r7, [r3, #0]
 801f5ae:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801f5b2:	605c      	str	r4, [r3, #4]
 801f5b4:	609d      	str	r5, [r3, #8]
 801f5b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f5ba:	60d3      	str	r3, [r2, #12]
 801f5bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f5c0:	6110      	str	r0, [r2, #16]
 801f5c2:	6153      	str	r3, [r2, #20]
 801f5c4:	e719      	b.n	801f3fa <__kernel_rem_pio2+0x4e2>
 801f5c6:	bf00      	nop

0801f5c8 <__ieee754_acos>:
 801f5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5cc:	ec55 4b10 	vmov	r4, r5, d0
 801f5d0:	49b7      	ldr	r1, [pc, #732]	@ (801f8b0 <__ieee754_acos+0x2e8>)
 801f5d2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f5d6:	428b      	cmp	r3, r1
 801f5d8:	d919      	bls.n	801f60e <__ieee754_acos+0x46>
 801f5da:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801f5de:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801f5e2:	4323      	orrs	r3, r4
 801f5e4:	d106      	bne.n	801f5f4 <__ieee754_acos+0x2c>
 801f5e6:	2d00      	cmp	r5, #0
 801f5e8:	f340 8210 	ble.w	801fa0c <__ieee754_acos+0x444>
 801f5ec:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801f840 <__ieee754_acos+0x278>
 801f5f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5f4:	4622      	mov	r2, r4
 801f5f6:	462b      	mov	r3, r5
 801f5f8:	4620      	mov	r0, r4
 801f5fa:	4629      	mov	r1, r5
 801f5fc:	f7e0 fe1c 	bl	8000238 <__aeabi_dsub>
 801f600:	4602      	mov	r2, r0
 801f602:	460b      	mov	r3, r1
 801f604:	f7e1 f8fa 	bl	80007fc <__aeabi_ddiv>
 801f608:	ec41 0b10 	vmov	d0, r0, r1
 801f60c:	e7f0      	b.n	801f5f0 <__ieee754_acos+0x28>
 801f60e:	49a9      	ldr	r1, [pc, #676]	@ (801f8b4 <__ieee754_acos+0x2ec>)
 801f610:	428b      	cmp	r3, r1
 801f612:	f200 8085 	bhi.w	801f720 <__ieee754_acos+0x158>
 801f616:	4aa8      	ldr	r2, [pc, #672]	@ (801f8b8 <__ieee754_acos+0x2f0>)
 801f618:	4293      	cmp	r3, r2
 801f61a:	f240 81fa 	bls.w	801fa12 <__ieee754_acos+0x44a>
 801f61e:	4622      	mov	r2, r4
 801f620:	462b      	mov	r3, r5
 801f622:	4620      	mov	r0, r4
 801f624:	4629      	mov	r1, r5
 801f626:	f7e0 ffbf 	bl	80005a8 <__aeabi_dmul>
 801f62a:	a387      	add	r3, pc, #540	@ (adr r3, 801f848 <__ieee754_acos+0x280>)
 801f62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f630:	4606      	mov	r6, r0
 801f632:	460f      	mov	r7, r1
 801f634:	f7e0 ffb8 	bl	80005a8 <__aeabi_dmul>
 801f638:	a385      	add	r3, pc, #532	@ (adr r3, 801f850 <__ieee754_acos+0x288>)
 801f63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f63e:	f7e0 fdfd 	bl	800023c <__adddf3>
 801f642:	4632      	mov	r2, r6
 801f644:	463b      	mov	r3, r7
 801f646:	f7e0 ffaf 	bl	80005a8 <__aeabi_dmul>
 801f64a:	a383      	add	r3, pc, #524	@ (adr r3, 801f858 <__ieee754_acos+0x290>)
 801f64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f650:	f7e0 fdf2 	bl	8000238 <__aeabi_dsub>
 801f654:	4632      	mov	r2, r6
 801f656:	463b      	mov	r3, r7
 801f658:	f7e0 ffa6 	bl	80005a8 <__aeabi_dmul>
 801f65c:	a380      	add	r3, pc, #512	@ (adr r3, 801f860 <__ieee754_acos+0x298>)
 801f65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f662:	f7e0 fdeb 	bl	800023c <__adddf3>
 801f666:	4632      	mov	r2, r6
 801f668:	463b      	mov	r3, r7
 801f66a:	f7e0 ff9d 	bl	80005a8 <__aeabi_dmul>
 801f66e:	a37e      	add	r3, pc, #504	@ (adr r3, 801f868 <__ieee754_acos+0x2a0>)
 801f670:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f674:	f7e0 fde0 	bl	8000238 <__aeabi_dsub>
 801f678:	4632      	mov	r2, r6
 801f67a:	463b      	mov	r3, r7
 801f67c:	f7e0 ff94 	bl	80005a8 <__aeabi_dmul>
 801f680:	a37b      	add	r3, pc, #492	@ (adr r3, 801f870 <__ieee754_acos+0x2a8>)
 801f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f686:	f7e0 fdd9 	bl	800023c <__adddf3>
 801f68a:	4632      	mov	r2, r6
 801f68c:	463b      	mov	r3, r7
 801f68e:	f7e0 ff8b 	bl	80005a8 <__aeabi_dmul>
 801f692:	a379      	add	r3, pc, #484	@ (adr r3, 801f878 <__ieee754_acos+0x2b0>)
 801f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f698:	4680      	mov	r8, r0
 801f69a:	4689      	mov	r9, r1
 801f69c:	4630      	mov	r0, r6
 801f69e:	4639      	mov	r1, r7
 801f6a0:	f7e0 ff82 	bl	80005a8 <__aeabi_dmul>
 801f6a4:	a376      	add	r3, pc, #472	@ (adr r3, 801f880 <__ieee754_acos+0x2b8>)
 801f6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6aa:	f7e0 fdc5 	bl	8000238 <__aeabi_dsub>
 801f6ae:	4632      	mov	r2, r6
 801f6b0:	463b      	mov	r3, r7
 801f6b2:	f7e0 ff79 	bl	80005a8 <__aeabi_dmul>
 801f6b6:	a374      	add	r3, pc, #464	@ (adr r3, 801f888 <__ieee754_acos+0x2c0>)
 801f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6bc:	f7e0 fdbe 	bl	800023c <__adddf3>
 801f6c0:	4632      	mov	r2, r6
 801f6c2:	463b      	mov	r3, r7
 801f6c4:	f7e0 ff70 	bl	80005a8 <__aeabi_dmul>
 801f6c8:	a371      	add	r3, pc, #452	@ (adr r3, 801f890 <__ieee754_acos+0x2c8>)
 801f6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6ce:	f7e0 fdb3 	bl	8000238 <__aeabi_dsub>
 801f6d2:	4632      	mov	r2, r6
 801f6d4:	463b      	mov	r3, r7
 801f6d6:	f7e0 ff67 	bl	80005a8 <__aeabi_dmul>
 801f6da:	4b78      	ldr	r3, [pc, #480]	@ (801f8bc <__ieee754_acos+0x2f4>)
 801f6dc:	2200      	movs	r2, #0
 801f6de:	f7e0 fdad 	bl	800023c <__adddf3>
 801f6e2:	4602      	mov	r2, r0
 801f6e4:	460b      	mov	r3, r1
 801f6e6:	4640      	mov	r0, r8
 801f6e8:	4649      	mov	r1, r9
 801f6ea:	f7e1 f887 	bl	80007fc <__aeabi_ddiv>
 801f6ee:	4622      	mov	r2, r4
 801f6f0:	462b      	mov	r3, r5
 801f6f2:	f7e0 ff59 	bl	80005a8 <__aeabi_dmul>
 801f6f6:	4602      	mov	r2, r0
 801f6f8:	460b      	mov	r3, r1
 801f6fa:	a167      	add	r1, pc, #412	@ (adr r1, 801f898 <__ieee754_acos+0x2d0>)
 801f6fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f700:	f7e0 fd9a 	bl	8000238 <__aeabi_dsub>
 801f704:	4602      	mov	r2, r0
 801f706:	460b      	mov	r3, r1
 801f708:	4620      	mov	r0, r4
 801f70a:	4629      	mov	r1, r5
 801f70c:	f7e0 fd94 	bl	8000238 <__aeabi_dsub>
 801f710:	4602      	mov	r2, r0
 801f712:	460b      	mov	r3, r1
 801f714:	a162      	add	r1, pc, #392	@ (adr r1, 801f8a0 <__ieee754_acos+0x2d8>)
 801f716:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f71a:	f7e0 fd8d 	bl	8000238 <__aeabi_dsub>
 801f71e:	e773      	b.n	801f608 <__ieee754_acos+0x40>
 801f720:	2d00      	cmp	r5, #0
 801f722:	f280 80cf 	bge.w	801f8c4 <__ieee754_acos+0x2fc>
 801f726:	4b65      	ldr	r3, [pc, #404]	@ (801f8bc <__ieee754_acos+0x2f4>)
 801f728:	2200      	movs	r2, #0
 801f72a:	4620      	mov	r0, r4
 801f72c:	4629      	mov	r1, r5
 801f72e:	f7e0 fd85 	bl	800023c <__adddf3>
 801f732:	4b63      	ldr	r3, [pc, #396]	@ (801f8c0 <__ieee754_acos+0x2f8>)
 801f734:	2200      	movs	r2, #0
 801f736:	f7e0 ff37 	bl	80005a8 <__aeabi_dmul>
 801f73a:	a343      	add	r3, pc, #268	@ (adr r3, 801f848 <__ieee754_acos+0x280>)
 801f73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f740:	4604      	mov	r4, r0
 801f742:	460d      	mov	r5, r1
 801f744:	f7e0 ff30 	bl	80005a8 <__aeabi_dmul>
 801f748:	a341      	add	r3, pc, #260	@ (adr r3, 801f850 <__ieee754_acos+0x288>)
 801f74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f74e:	f7e0 fd75 	bl	800023c <__adddf3>
 801f752:	4622      	mov	r2, r4
 801f754:	462b      	mov	r3, r5
 801f756:	f7e0 ff27 	bl	80005a8 <__aeabi_dmul>
 801f75a:	a33f      	add	r3, pc, #252	@ (adr r3, 801f858 <__ieee754_acos+0x290>)
 801f75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f760:	f7e0 fd6a 	bl	8000238 <__aeabi_dsub>
 801f764:	4622      	mov	r2, r4
 801f766:	462b      	mov	r3, r5
 801f768:	f7e0 ff1e 	bl	80005a8 <__aeabi_dmul>
 801f76c:	a33c      	add	r3, pc, #240	@ (adr r3, 801f860 <__ieee754_acos+0x298>)
 801f76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f772:	f7e0 fd63 	bl	800023c <__adddf3>
 801f776:	4622      	mov	r2, r4
 801f778:	462b      	mov	r3, r5
 801f77a:	f7e0 ff15 	bl	80005a8 <__aeabi_dmul>
 801f77e:	a33a      	add	r3, pc, #232	@ (adr r3, 801f868 <__ieee754_acos+0x2a0>)
 801f780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f784:	f7e0 fd58 	bl	8000238 <__aeabi_dsub>
 801f788:	4622      	mov	r2, r4
 801f78a:	462b      	mov	r3, r5
 801f78c:	f7e0 ff0c 	bl	80005a8 <__aeabi_dmul>
 801f790:	a337      	add	r3, pc, #220	@ (adr r3, 801f870 <__ieee754_acos+0x2a8>)
 801f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f796:	f7e0 fd51 	bl	800023c <__adddf3>
 801f79a:	4622      	mov	r2, r4
 801f79c:	462b      	mov	r3, r5
 801f79e:	f7e0 ff03 	bl	80005a8 <__aeabi_dmul>
 801f7a2:	a335      	add	r3, pc, #212	@ (adr r3, 801f878 <__ieee754_acos+0x2b0>)
 801f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7a8:	4606      	mov	r6, r0
 801f7aa:	460f      	mov	r7, r1
 801f7ac:	4620      	mov	r0, r4
 801f7ae:	4629      	mov	r1, r5
 801f7b0:	f7e0 fefa 	bl	80005a8 <__aeabi_dmul>
 801f7b4:	a332      	add	r3, pc, #200	@ (adr r3, 801f880 <__ieee754_acos+0x2b8>)
 801f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7ba:	f7e0 fd3d 	bl	8000238 <__aeabi_dsub>
 801f7be:	4622      	mov	r2, r4
 801f7c0:	462b      	mov	r3, r5
 801f7c2:	f7e0 fef1 	bl	80005a8 <__aeabi_dmul>
 801f7c6:	a330      	add	r3, pc, #192	@ (adr r3, 801f888 <__ieee754_acos+0x2c0>)
 801f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7cc:	f7e0 fd36 	bl	800023c <__adddf3>
 801f7d0:	4622      	mov	r2, r4
 801f7d2:	462b      	mov	r3, r5
 801f7d4:	f7e0 fee8 	bl	80005a8 <__aeabi_dmul>
 801f7d8:	a32d      	add	r3, pc, #180	@ (adr r3, 801f890 <__ieee754_acos+0x2c8>)
 801f7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7de:	f7e0 fd2b 	bl	8000238 <__aeabi_dsub>
 801f7e2:	4622      	mov	r2, r4
 801f7e4:	462b      	mov	r3, r5
 801f7e6:	f7e0 fedf 	bl	80005a8 <__aeabi_dmul>
 801f7ea:	4b34      	ldr	r3, [pc, #208]	@ (801f8bc <__ieee754_acos+0x2f4>)
 801f7ec:	2200      	movs	r2, #0
 801f7ee:	f7e0 fd25 	bl	800023c <__adddf3>
 801f7f2:	ec45 4b10 	vmov	d0, r4, r5
 801f7f6:	4680      	mov	r8, r0
 801f7f8:	4689      	mov	r9, r1
 801f7fa:	f000 f9bf 	bl	801fb7c <__ieee754_sqrt>
 801f7fe:	ec55 4b10 	vmov	r4, r5, d0
 801f802:	4642      	mov	r2, r8
 801f804:	464b      	mov	r3, r9
 801f806:	4630      	mov	r0, r6
 801f808:	4639      	mov	r1, r7
 801f80a:	f7e0 fff7 	bl	80007fc <__aeabi_ddiv>
 801f80e:	4622      	mov	r2, r4
 801f810:	462b      	mov	r3, r5
 801f812:	f7e0 fec9 	bl	80005a8 <__aeabi_dmul>
 801f816:	a320      	add	r3, pc, #128	@ (adr r3, 801f898 <__ieee754_acos+0x2d0>)
 801f818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f81c:	f7e0 fd0c 	bl	8000238 <__aeabi_dsub>
 801f820:	4622      	mov	r2, r4
 801f822:	462b      	mov	r3, r5
 801f824:	f7e0 fd0a 	bl	800023c <__adddf3>
 801f828:	4602      	mov	r2, r0
 801f82a:	460b      	mov	r3, r1
 801f82c:	f7e0 fd06 	bl	800023c <__adddf3>
 801f830:	4602      	mov	r2, r0
 801f832:	460b      	mov	r3, r1
 801f834:	a11c      	add	r1, pc, #112	@ (adr r1, 801f8a8 <__ieee754_acos+0x2e0>)
 801f836:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f83a:	e76e      	b.n	801f71a <__ieee754_acos+0x152>
 801f83c:	f3af 8000 	nop.w
	...
 801f848:	0dfdf709 	.word	0x0dfdf709
 801f84c:	3f023de1 	.word	0x3f023de1
 801f850:	7501b288 	.word	0x7501b288
 801f854:	3f49efe0 	.word	0x3f49efe0
 801f858:	b5688f3b 	.word	0xb5688f3b
 801f85c:	3fa48228 	.word	0x3fa48228
 801f860:	0e884455 	.word	0x0e884455
 801f864:	3fc9c155 	.word	0x3fc9c155
 801f868:	03eb6f7d 	.word	0x03eb6f7d
 801f86c:	3fd4d612 	.word	0x3fd4d612
 801f870:	55555555 	.word	0x55555555
 801f874:	3fc55555 	.word	0x3fc55555
 801f878:	b12e9282 	.word	0xb12e9282
 801f87c:	3fb3b8c5 	.word	0x3fb3b8c5
 801f880:	1b8d0159 	.word	0x1b8d0159
 801f884:	3fe6066c 	.word	0x3fe6066c
 801f888:	9c598ac8 	.word	0x9c598ac8
 801f88c:	40002ae5 	.word	0x40002ae5
 801f890:	1c8a2d4b 	.word	0x1c8a2d4b
 801f894:	40033a27 	.word	0x40033a27
 801f898:	33145c07 	.word	0x33145c07
 801f89c:	3c91a626 	.word	0x3c91a626
 801f8a0:	54442d18 	.word	0x54442d18
 801f8a4:	3ff921fb 	.word	0x3ff921fb
 801f8a8:	54442d18 	.word	0x54442d18
 801f8ac:	400921fb 	.word	0x400921fb
 801f8b0:	3fefffff 	.word	0x3fefffff
 801f8b4:	3fdfffff 	.word	0x3fdfffff
 801f8b8:	3c600000 	.word	0x3c600000
 801f8bc:	3ff00000 	.word	0x3ff00000
 801f8c0:	3fe00000 	.word	0x3fe00000
 801f8c4:	4622      	mov	r2, r4
 801f8c6:	462b      	mov	r3, r5
 801f8c8:	496b      	ldr	r1, [pc, #428]	@ (801fa78 <__ieee754_acos+0x4b0>)
 801f8ca:	2000      	movs	r0, #0
 801f8cc:	f7e0 fcb4 	bl	8000238 <__aeabi_dsub>
 801f8d0:	4b6a      	ldr	r3, [pc, #424]	@ (801fa7c <__ieee754_acos+0x4b4>)
 801f8d2:	2200      	movs	r2, #0
 801f8d4:	f7e0 fe68 	bl	80005a8 <__aeabi_dmul>
 801f8d8:	4604      	mov	r4, r0
 801f8da:	460d      	mov	r5, r1
 801f8dc:	ec45 4b10 	vmov	d0, r4, r5
 801f8e0:	f000 f94c 	bl	801fb7c <__ieee754_sqrt>
 801f8e4:	a34c      	add	r3, pc, #304	@ (adr r3, 801fa18 <__ieee754_acos+0x450>)
 801f8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8ea:	4620      	mov	r0, r4
 801f8ec:	4629      	mov	r1, r5
 801f8ee:	ec59 8b10 	vmov	r8, r9, d0
 801f8f2:	f7e0 fe59 	bl	80005a8 <__aeabi_dmul>
 801f8f6:	a34a      	add	r3, pc, #296	@ (adr r3, 801fa20 <__ieee754_acos+0x458>)
 801f8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8fc:	f7e0 fc9e 	bl	800023c <__adddf3>
 801f900:	4622      	mov	r2, r4
 801f902:	462b      	mov	r3, r5
 801f904:	f7e0 fe50 	bl	80005a8 <__aeabi_dmul>
 801f908:	a347      	add	r3, pc, #284	@ (adr r3, 801fa28 <__ieee754_acos+0x460>)
 801f90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f90e:	f7e0 fc93 	bl	8000238 <__aeabi_dsub>
 801f912:	4622      	mov	r2, r4
 801f914:	462b      	mov	r3, r5
 801f916:	f7e0 fe47 	bl	80005a8 <__aeabi_dmul>
 801f91a:	a345      	add	r3, pc, #276	@ (adr r3, 801fa30 <__ieee754_acos+0x468>)
 801f91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f920:	f7e0 fc8c 	bl	800023c <__adddf3>
 801f924:	4622      	mov	r2, r4
 801f926:	462b      	mov	r3, r5
 801f928:	f7e0 fe3e 	bl	80005a8 <__aeabi_dmul>
 801f92c:	a342      	add	r3, pc, #264	@ (adr r3, 801fa38 <__ieee754_acos+0x470>)
 801f92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f932:	f7e0 fc81 	bl	8000238 <__aeabi_dsub>
 801f936:	4622      	mov	r2, r4
 801f938:	462b      	mov	r3, r5
 801f93a:	f7e0 fe35 	bl	80005a8 <__aeabi_dmul>
 801f93e:	a340      	add	r3, pc, #256	@ (adr r3, 801fa40 <__ieee754_acos+0x478>)
 801f940:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f944:	f7e0 fc7a 	bl	800023c <__adddf3>
 801f948:	4622      	mov	r2, r4
 801f94a:	462b      	mov	r3, r5
 801f94c:	f7e0 fe2c 	bl	80005a8 <__aeabi_dmul>
 801f950:	a33d      	add	r3, pc, #244	@ (adr r3, 801fa48 <__ieee754_acos+0x480>)
 801f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f956:	4682      	mov	sl, r0
 801f958:	468b      	mov	fp, r1
 801f95a:	4620      	mov	r0, r4
 801f95c:	4629      	mov	r1, r5
 801f95e:	f7e0 fe23 	bl	80005a8 <__aeabi_dmul>
 801f962:	a33b      	add	r3, pc, #236	@ (adr r3, 801fa50 <__ieee754_acos+0x488>)
 801f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f968:	f7e0 fc66 	bl	8000238 <__aeabi_dsub>
 801f96c:	4622      	mov	r2, r4
 801f96e:	462b      	mov	r3, r5
 801f970:	f7e0 fe1a 	bl	80005a8 <__aeabi_dmul>
 801f974:	a338      	add	r3, pc, #224	@ (adr r3, 801fa58 <__ieee754_acos+0x490>)
 801f976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f97a:	f7e0 fc5f 	bl	800023c <__adddf3>
 801f97e:	4622      	mov	r2, r4
 801f980:	462b      	mov	r3, r5
 801f982:	f7e0 fe11 	bl	80005a8 <__aeabi_dmul>
 801f986:	a336      	add	r3, pc, #216	@ (adr r3, 801fa60 <__ieee754_acos+0x498>)
 801f988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f98c:	f7e0 fc54 	bl	8000238 <__aeabi_dsub>
 801f990:	4622      	mov	r2, r4
 801f992:	462b      	mov	r3, r5
 801f994:	f7e0 fe08 	bl	80005a8 <__aeabi_dmul>
 801f998:	4b37      	ldr	r3, [pc, #220]	@ (801fa78 <__ieee754_acos+0x4b0>)
 801f99a:	2200      	movs	r2, #0
 801f99c:	f7e0 fc4e 	bl	800023c <__adddf3>
 801f9a0:	4602      	mov	r2, r0
 801f9a2:	460b      	mov	r3, r1
 801f9a4:	4650      	mov	r0, sl
 801f9a6:	4659      	mov	r1, fp
 801f9a8:	f7e0 ff28 	bl	80007fc <__aeabi_ddiv>
 801f9ac:	4642      	mov	r2, r8
 801f9ae:	464b      	mov	r3, r9
 801f9b0:	f7e0 fdfa 	bl	80005a8 <__aeabi_dmul>
 801f9b4:	2600      	movs	r6, #0
 801f9b6:	4682      	mov	sl, r0
 801f9b8:	468b      	mov	fp, r1
 801f9ba:	4632      	mov	r2, r6
 801f9bc:	464b      	mov	r3, r9
 801f9be:	4630      	mov	r0, r6
 801f9c0:	4649      	mov	r1, r9
 801f9c2:	f7e0 fdf1 	bl	80005a8 <__aeabi_dmul>
 801f9c6:	4602      	mov	r2, r0
 801f9c8:	460b      	mov	r3, r1
 801f9ca:	4620      	mov	r0, r4
 801f9cc:	4629      	mov	r1, r5
 801f9ce:	f7e0 fc33 	bl	8000238 <__aeabi_dsub>
 801f9d2:	4632      	mov	r2, r6
 801f9d4:	4604      	mov	r4, r0
 801f9d6:	460d      	mov	r5, r1
 801f9d8:	464b      	mov	r3, r9
 801f9da:	4640      	mov	r0, r8
 801f9dc:	4649      	mov	r1, r9
 801f9de:	f7e0 fc2d 	bl	800023c <__adddf3>
 801f9e2:	4602      	mov	r2, r0
 801f9e4:	460b      	mov	r3, r1
 801f9e6:	4620      	mov	r0, r4
 801f9e8:	4629      	mov	r1, r5
 801f9ea:	f7e0 ff07 	bl	80007fc <__aeabi_ddiv>
 801f9ee:	4602      	mov	r2, r0
 801f9f0:	460b      	mov	r3, r1
 801f9f2:	4650      	mov	r0, sl
 801f9f4:	4659      	mov	r1, fp
 801f9f6:	f7e0 fc21 	bl	800023c <__adddf3>
 801f9fa:	4632      	mov	r2, r6
 801f9fc:	464b      	mov	r3, r9
 801f9fe:	f7e0 fc1d 	bl	800023c <__adddf3>
 801fa02:	4602      	mov	r2, r0
 801fa04:	460b      	mov	r3, r1
 801fa06:	f7e0 fc19 	bl	800023c <__adddf3>
 801fa0a:	e5fd      	b.n	801f608 <__ieee754_acos+0x40>
 801fa0c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801fa68 <__ieee754_acos+0x4a0>
 801fa10:	e5ee      	b.n	801f5f0 <__ieee754_acos+0x28>
 801fa12:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801fa70 <__ieee754_acos+0x4a8>
 801fa16:	e5eb      	b.n	801f5f0 <__ieee754_acos+0x28>
 801fa18:	0dfdf709 	.word	0x0dfdf709
 801fa1c:	3f023de1 	.word	0x3f023de1
 801fa20:	7501b288 	.word	0x7501b288
 801fa24:	3f49efe0 	.word	0x3f49efe0
 801fa28:	b5688f3b 	.word	0xb5688f3b
 801fa2c:	3fa48228 	.word	0x3fa48228
 801fa30:	0e884455 	.word	0x0e884455
 801fa34:	3fc9c155 	.word	0x3fc9c155
 801fa38:	03eb6f7d 	.word	0x03eb6f7d
 801fa3c:	3fd4d612 	.word	0x3fd4d612
 801fa40:	55555555 	.word	0x55555555
 801fa44:	3fc55555 	.word	0x3fc55555
 801fa48:	b12e9282 	.word	0xb12e9282
 801fa4c:	3fb3b8c5 	.word	0x3fb3b8c5
 801fa50:	1b8d0159 	.word	0x1b8d0159
 801fa54:	3fe6066c 	.word	0x3fe6066c
 801fa58:	9c598ac8 	.word	0x9c598ac8
 801fa5c:	40002ae5 	.word	0x40002ae5
 801fa60:	1c8a2d4b 	.word	0x1c8a2d4b
 801fa64:	40033a27 	.word	0x40033a27
 801fa68:	54442d18 	.word	0x54442d18
 801fa6c:	400921fb 	.word	0x400921fb
 801fa70:	54442d18 	.word	0x54442d18
 801fa74:	3ff921fb 	.word	0x3ff921fb
 801fa78:	3ff00000 	.word	0x3ff00000
 801fa7c:	3fe00000 	.word	0x3fe00000

0801fa80 <scalbn>:
 801fa80:	b570      	push	{r4, r5, r6, lr}
 801fa82:	ec55 4b10 	vmov	r4, r5, d0
 801fa86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801fa8a:	4606      	mov	r6, r0
 801fa8c:	462b      	mov	r3, r5
 801fa8e:	b991      	cbnz	r1, 801fab6 <scalbn+0x36>
 801fa90:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801fa94:	4323      	orrs	r3, r4
 801fa96:	d03d      	beq.n	801fb14 <scalbn+0x94>
 801fa98:	4b35      	ldr	r3, [pc, #212]	@ (801fb70 <scalbn+0xf0>)
 801fa9a:	4620      	mov	r0, r4
 801fa9c:	4629      	mov	r1, r5
 801fa9e:	2200      	movs	r2, #0
 801faa0:	f7e0 fd82 	bl	80005a8 <__aeabi_dmul>
 801faa4:	4b33      	ldr	r3, [pc, #204]	@ (801fb74 <scalbn+0xf4>)
 801faa6:	429e      	cmp	r6, r3
 801faa8:	4604      	mov	r4, r0
 801faaa:	460d      	mov	r5, r1
 801faac:	da0f      	bge.n	801face <scalbn+0x4e>
 801faae:	a328      	add	r3, pc, #160	@ (adr r3, 801fb50 <scalbn+0xd0>)
 801fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fab4:	e01e      	b.n	801faf4 <scalbn+0x74>
 801fab6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801faba:	4291      	cmp	r1, r2
 801fabc:	d10b      	bne.n	801fad6 <scalbn+0x56>
 801fabe:	4622      	mov	r2, r4
 801fac0:	4620      	mov	r0, r4
 801fac2:	4629      	mov	r1, r5
 801fac4:	f7e0 fbba 	bl	800023c <__adddf3>
 801fac8:	4604      	mov	r4, r0
 801faca:	460d      	mov	r5, r1
 801facc:	e022      	b.n	801fb14 <scalbn+0x94>
 801face:	460b      	mov	r3, r1
 801fad0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801fad4:	3936      	subs	r1, #54	@ 0x36
 801fad6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801fada:	4296      	cmp	r6, r2
 801fadc:	dd0d      	ble.n	801fafa <scalbn+0x7a>
 801fade:	2d00      	cmp	r5, #0
 801fae0:	a11d      	add	r1, pc, #116	@ (adr r1, 801fb58 <scalbn+0xd8>)
 801fae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fae6:	da02      	bge.n	801faee <scalbn+0x6e>
 801fae8:	a11d      	add	r1, pc, #116	@ (adr r1, 801fb60 <scalbn+0xe0>)
 801faea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801faee:	a31a      	add	r3, pc, #104	@ (adr r3, 801fb58 <scalbn+0xd8>)
 801faf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801faf4:	f7e0 fd58 	bl	80005a8 <__aeabi_dmul>
 801faf8:	e7e6      	b.n	801fac8 <scalbn+0x48>
 801fafa:	1872      	adds	r2, r6, r1
 801fafc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801fb00:	428a      	cmp	r2, r1
 801fb02:	dcec      	bgt.n	801fade <scalbn+0x5e>
 801fb04:	2a00      	cmp	r2, #0
 801fb06:	dd08      	ble.n	801fb1a <scalbn+0x9a>
 801fb08:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fb0c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fb10:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fb14:	ec45 4b10 	vmov	d0, r4, r5
 801fb18:	bd70      	pop	{r4, r5, r6, pc}
 801fb1a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801fb1e:	da08      	bge.n	801fb32 <scalbn+0xb2>
 801fb20:	2d00      	cmp	r5, #0
 801fb22:	a10b      	add	r1, pc, #44	@ (adr r1, 801fb50 <scalbn+0xd0>)
 801fb24:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb28:	dac1      	bge.n	801faae <scalbn+0x2e>
 801fb2a:	a10f      	add	r1, pc, #60	@ (adr r1, 801fb68 <scalbn+0xe8>)
 801fb2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fb30:	e7bd      	b.n	801faae <scalbn+0x2e>
 801fb32:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fb36:	3236      	adds	r2, #54	@ 0x36
 801fb38:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fb3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fb40:	4620      	mov	r0, r4
 801fb42:	4b0d      	ldr	r3, [pc, #52]	@ (801fb78 <scalbn+0xf8>)
 801fb44:	4629      	mov	r1, r5
 801fb46:	2200      	movs	r2, #0
 801fb48:	e7d4      	b.n	801faf4 <scalbn+0x74>
 801fb4a:	bf00      	nop
 801fb4c:	f3af 8000 	nop.w
 801fb50:	c2f8f359 	.word	0xc2f8f359
 801fb54:	01a56e1f 	.word	0x01a56e1f
 801fb58:	8800759c 	.word	0x8800759c
 801fb5c:	7e37e43c 	.word	0x7e37e43c
 801fb60:	8800759c 	.word	0x8800759c
 801fb64:	fe37e43c 	.word	0xfe37e43c
 801fb68:	c2f8f359 	.word	0xc2f8f359
 801fb6c:	81a56e1f 	.word	0x81a56e1f
 801fb70:	43500000 	.word	0x43500000
 801fb74:	ffff3cb0 	.word	0xffff3cb0
 801fb78:	3c900000 	.word	0x3c900000

0801fb7c <__ieee754_sqrt>:
 801fb7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb80:	4a68      	ldr	r2, [pc, #416]	@ (801fd24 <__ieee754_sqrt+0x1a8>)
 801fb82:	ec55 4b10 	vmov	r4, r5, d0
 801fb86:	43aa      	bics	r2, r5
 801fb88:	462b      	mov	r3, r5
 801fb8a:	4621      	mov	r1, r4
 801fb8c:	d110      	bne.n	801fbb0 <__ieee754_sqrt+0x34>
 801fb8e:	4622      	mov	r2, r4
 801fb90:	4620      	mov	r0, r4
 801fb92:	4629      	mov	r1, r5
 801fb94:	f7e0 fd08 	bl	80005a8 <__aeabi_dmul>
 801fb98:	4602      	mov	r2, r0
 801fb9a:	460b      	mov	r3, r1
 801fb9c:	4620      	mov	r0, r4
 801fb9e:	4629      	mov	r1, r5
 801fba0:	f7e0 fb4c 	bl	800023c <__adddf3>
 801fba4:	4604      	mov	r4, r0
 801fba6:	460d      	mov	r5, r1
 801fba8:	ec45 4b10 	vmov	d0, r4, r5
 801fbac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbb0:	2d00      	cmp	r5, #0
 801fbb2:	dc0e      	bgt.n	801fbd2 <__ieee754_sqrt+0x56>
 801fbb4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801fbb8:	4322      	orrs	r2, r4
 801fbba:	d0f5      	beq.n	801fba8 <__ieee754_sqrt+0x2c>
 801fbbc:	b19d      	cbz	r5, 801fbe6 <__ieee754_sqrt+0x6a>
 801fbbe:	4622      	mov	r2, r4
 801fbc0:	4620      	mov	r0, r4
 801fbc2:	4629      	mov	r1, r5
 801fbc4:	f7e0 fb38 	bl	8000238 <__aeabi_dsub>
 801fbc8:	4602      	mov	r2, r0
 801fbca:	460b      	mov	r3, r1
 801fbcc:	f7e0 fe16 	bl	80007fc <__aeabi_ddiv>
 801fbd0:	e7e8      	b.n	801fba4 <__ieee754_sqrt+0x28>
 801fbd2:	152a      	asrs	r2, r5, #20
 801fbd4:	d115      	bne.n	801fc02 <__ieee754_sqrt+0x86>
 801fbd6:	2000      	movs	r0, #0
 801fbd8:	e009      	b.n	801fbee <__ieee754_sqrt+0x72>
 801fbda:	0acb      	lsrs	r3, r1, #11
 801fbdc:	3a15      	subs	r2, #21
 801fbde:	0549      	lsls	r1, r1, #21
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d0fa      	beq.n	801fbda <__ieee754_sqrt+0x5e>
 801fbe4:	e7f7      	b.n	801fbd6 <__ieee754_sqrt+0x5a>
 801fbe6:	462a      	mov	r2, r5
 801fbe8:	e7fa      	b.n	801fbe0 <__ieee754_sqrt+0x64>
 801fbea:	005b      	lsls	r3, r3, #1
 801fbec:	3001      	adds	r0, #1
 801fbee:	02dc      	lsls	r4, r3, #11
 801fbf0:	d5fb      	bpl.n	801fbea <__ieee754_sqrt+0x6e>
 801fbf2:	1e44      	subs	r4, r0, #1
 801fbf4:	1b12      	subs	r2, r2, r4
 801fbf6:	f1c0 0420 	rsb	r4, r0, #32
 801fbfa:	fa21 f404 	lsr.w	r4, r1, r4
 801fbfe:	4323      	orrs	r3, r4
 801fc00:	4081      	lsls	r1, r0
 801fc02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fc06:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801fc0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fc0e:	07d2      	lsls	r2, r2, #31
 801fc10:	bf5c      	itt	pl
 801fc12:	005b      	lslpl	r3, r3, #1
 801fc14:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801fc18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fc1c:	bf58      	it	pl
 801fc1e:	0049      	lslpl	r1, r1, #1
 801fc20:	2600      	movs	r6, #0
 801fc22:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801fc26:	106d      	asrs	r5, r5, #1
 801fc28:	0049      	lsls	r1, r1, #1
 801fc2a:	2016      	movs	r0, #22
 801fc2c:	4632      	mov	r2, r6
 801fc2e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801fc32:	1917      	adds	r7, r2, r4
 801fc34:	429f      	cmp	r7, r3
 801fc36:	bfde      	ittt	le
 801fc38:	193a      	addle	r2, r7, r4
 801fc3a:	1bdb      	suble	r3, r3, r7
 801fc3c:	1936      	addle	r6, r6, r4
 801fc3e:	0fcf      	lsrs	r7, r1, #31
 801fc40:	3801      	subs	r0, #1
 801fc42:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801fc46:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fc4a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fc4e:	d1f0      	bne.n	801fc32 <__ieee754_sqrt+0xb6>
 801fc50:	4604      	mov	r4, r0
 801fc52:	2720      	movs	r7, #32
 801fc54:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801fc58:	429a      	cmp	r2, r3
 801fc5a:	eb00 0e0c 	add.w	lr, r0, ip
 801fc5e:	db02      	blt.n	801fc66 <__ieee754_sqrt+0xea>
 801fc60:	d113      	bne.n	801fc8a <__ieee754_sqrt+0x10e>
 801fc62:	458e      	cmp	lr, r1
 801fc64:	d811      	bhi.n	801fc8a <__ieee754_sqrt+0x10e>
 801fc66:	f1be 0f00 	cmp.w	lr, #0
 801fc6a:	eb0e 000c 	add.w	r0, lr, ip
 801fc6e:	da42      	bge.n	801fcf6 <__ieee754_sqrt+0x17a>
 801fc70:	2800      	cmp	r0, #0
 801fc72:	db40      	blt.n	801fcf6 <__ieee754_sqrt+0x17a>
 801fc74:	f102 0801 	add.w	r8, r2, #1
 801fc78:	1a9b      	subs	r3, r3, r2
 801fc7a:	458e      	cmp	lr, r1
 801fc7c:	bf88      	it	hi
 801fc7e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801fc82:	eba1 010e 	sub.w	r1, r1, lr
 801fc86:	4464      	add	r4, ip
 801fc88:	4642      	mov	r2, r8
 801fc8a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801fc8e:	3f01      	subs	r7, #1
 801fc90:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801fc94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fc98:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801fc9c:	d1dc      	bne.n	801fc58 <__ieee754_sqrt+0xdc>
 801fc9e:	4319      	orrs	r1, r3
 801fca0:	d01b      	beq.n	801fcda <__ieee754_sqrt+0x15e>
 801fca2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801fd28 <__ieee754_sqrt+0x1ac>
 801fca6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801fd2c <__ieee754_sqrt+0x1b0>
 801fcaa:	e9da 0100 	ldrd	r0, r1, [sl]
 801fcae:	e9db 2300 	ldrd	r2, r3, [fp]
 801fcb2:	f7e0 fac1 	bl	8000238 <__aeabi_dsub>
 801fcb6:	e9da 8900 	ldrd	r8, r9, [sl]
 801fcba:	4602      	mov	r2, r0
 801fcbc:	460b      	mov	r3, r1
 801fcbe:	4640      	mov	r0, r8
 801fcc0:	4649      	mov	r1, r9
 801fcc2:	f7e0 feed 	bl	8000aa0 <__aeabi_dcmple>
 801fcc6:	b140      	cbz	r0, 801fcda <__ieee754_sqrt+0x15e>
 801fcc8:	f1b4 3fff 	cmp.w	r4, #4294967295
 801fccc:	e9da 0100 	ldrd	r0, r1, [sl]
 801fcd0:	e9db 2300 	ldrd	r2, r3, [fp]
 801fcd4:	d111      	bne.n	801fcfa <__ieee754_sqrt+0x17e>
 801fcd6:	3601      	adds	r6, #1
 801fcd8:	463c      	mov	r4, r7
 801fcda:	1072      	asrs	r2, r6, #1
 801fcdc:	0863      	lsrs	r3, r4, #1
 801fcde:	07f1      	lsls	r1, r6, #31
 801fce0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801fce4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801fce8:	bf48      	it	mi
 801fcea:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801fcee:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801fcf2:	4618      	mov	r0, r3
 801fcf4:	e756      	b.n	801fba4 <__ieee754_sqrt+0x28>
 801fcf6:	4690      	mov	r8, r2
 801fcf8:	e7be      	b.n	801fc78 <__ieee754_sqrt+0xfc>
 801fcfa:	f7e0 fa9f 	bl	800023c <__adddf3>
 801fcfe:	e9da 8900 	ldrd	r8, r9, [sl]
 801fd02:	4602      	mov	r2, r0
 801fd04:	460b      	mov	r3, r1
 801fd06:	4640      	mov	r0, r8
 801fd08:	4649      	mov	r1, r9
 801fd0a:	f7e0 febf 	bl	8000a8c <__aeabi_dcmplt>
 801fd0e:	b120      	cbz	r0, 801fd1a <__ieee754_sqrt+0x19e>
 801fd10:	1ca0      	adds	r0, r4, #2
 801fd12:	bf08      	it	eq
 801fd14:	3601      	addeq	r6, #1
 801fd16:	3402      	adds	r4, #2
 801fd18:	e7df      	b.n	801fcda <__ieee754_sqrt+0x15e>
 801fd1a:	1c63      	adds	r3, r4, #1
 801fd1c:	f023 0401 	bic.w	r4, r3, #1
 801fd20:	e7db      	b.n	801fcda <__ieee754_sqrt+0x15e>
 801fd22:	bf00      	nop
 801fd24:	7ff00000 	.word	0x7ff00000
 801fd28:	20000318 	.word	0x20000318
 801fd2c:	20000310 	.word	0x20000310

0801fd30 <_init>:
 801fd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd32:	bf00      	nop
 801fd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd36:	bc08      	pop	{r3}
 801fd38:	469e      	mov	lr, r3
 801fd3a:	4770      	bx	lr

0801fd3c <_fini>:
 801fd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd3e:	bf00      	nop
 801fd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd42:	bc08      	pop	{r3}
 801fd44:	469e      	mov	lr, r3
 801fd46:	4770      	bx	lr
