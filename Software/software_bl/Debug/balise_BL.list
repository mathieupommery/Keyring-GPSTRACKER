
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f860  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027f0  0801f9a0  0801f9a0  000209a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022190  08022190  00023190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022198  08022198  00023198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802219c  0802219c  0002319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  080221a0  00024008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000320  080224b8  00024320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000358  080224ed  00024358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003044  20000370  080224fe  00024370  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200033b4  080224fe  000243b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00026000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00026000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080224fe  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004c93e  00000000  00000000  00025a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a5dc  00000000  00000000  000723d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f50  00000000  00000000  0007c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000307d  00000000  00000000  00080908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000158da  00000000  00000000  00083985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00054bc2  00000000  00000000  0009925f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e801  00000000  00000000  000ede21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020c622  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012450  00000000  00000000  0020c668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  0021eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0801f988 	.word	0x0801f988

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0801f988 	.word	0x0801f988

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <MX_ADC1_Init+0xfc>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800100a:	2201      	movs	r2, #1
 800100c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800100e:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001010:	2203      	movs	r2, #3
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800101e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001042:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001044:	f006 f9da 	bl	80073fc <HAL_ADC_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800104e:	f001 fe45 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ADC1_Init+0x100>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2306      	movs	r3, #6
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105e:	237f      	movs	r3, #127	@ 0x7f
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001062:	2304      	movs	r3, #4
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001070:	f006 fba8 	bl	80077c4 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f001 fe2f 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_ADC1_Init+0x104>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800108c:	f006 fb9a 	bl	80077c4 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001096:	f001 fe21 	bl	8002cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_ADC1_Init+0x108>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109e:	2312      	movs	r3, #18
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 80010a8:	f006 fb8c 	bl	80077c4 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010b2:	f001 fe13 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000038c 	.word	0x2000038c
 80010c4:	50040000 	.word	0x50040000
 80010c8:	80000001 	.word	0x80000001
 80010cc:	c7520000 	.word	0xc7520000
 80010d0:	25b00200 	.word	0x25b00200

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_ADC_MspInit+0xa8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d13e      	bne.n	8001174 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fa:	f7ff ff4b 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff48 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f007 fd95 	bl	8008c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_ADC_MspInit+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001126:	2205      	movs	r2, #5
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800113e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800115a:	f007 f9a1 	bl	80084a0 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001164:	f001 fdba 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800116c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	50040000 	.word	0x50040000
 8001180:	200003f0 	.word	0x200003f0
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8091 	bne.w	80012c0 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f996 	bl	80004d4 <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	a14a      	add	r1, pc, #296	@ (adr r1, 80012d8 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b2:	f7ff fb23 	bl	80007fc <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fceb 	bl	8000b98 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 80011c6:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f98c 	bl	80004f8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4944      	ldr	r1, [pc, #272]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011ea:	f7ff fb07 	bl	80007fc <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4690      	mov	r8, r2
 80011f4:	4699      	mov	r9, r3
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f96a 	bl	80004d4 <__aeabi_i2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f975 	bl	80004f8 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 8001214:	f7ff faf2 	bl	80007fc <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f9c2 	bl	80005a8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7fe fffb 	bl	8000238 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9ad 	bl	80005a8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2f>
 800125a:	ee07 0a10 	vmov	s14, r0
 800125e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f92f 	bl	80004d4 <__aeabi_i2d>
 8001276:	a31a      	add	r3, pc, #104	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fabe 	bl	80007fc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7fe ffd6 	bl	800023c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f92b 	bl	80004f8 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f97d 	bl	80005a8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc6f 	bl	8000b98 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x180>)
 80012be:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012c0:	2203      	movs	r2, #3
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <HAL_ADC_ConvCpltCallback+0x184>)
 80012c6:	f006 f9e5 	bl	8007694 <HAL_ADC_Start_DMA>



}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	d70a3d70 	.word	0xd70a3d70
 80012dc:	40b36323 	.word	0x40b36323
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40affe00 	.word	0x40affe00
 80012e8:	50040000 	.word	0x50040000
 80012ec:	20000888 	.word	0x20000888
 80012f0:	20000894 	.word	0x20000894
 80012f4:	20000008 	.word	0x20000008
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	40590000 	.word	0x40590000
 8001300:	40080000 	.word	0x40080000
 8001304:	20000890 	.word	0x20000890
 8001308:	20000898 	.word	0x20000898
 800130c:	2000038c 	.word	0x2000038c

08001310 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <APPD_EnableCPU2+0x34>)
 8001318:	1d3c      	adds	r4, r7, #4
 800131a:	461d      	mov	r5, r3
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001324:	c403      	stmia	r4!, {r0, r1}
 8001326:	8022      	strh	r2, [r4, #0]
 8001328:	3402      	adds	r4, #2
 800132a:	0c13      	lsrs	r3, r2, #16
 800132c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800132e:	f015 fb5b 	bl	80169e8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f014 fdec 	bl	8015f12 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800133a:	bf00      	nop
}
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	0801f9a0 	.word	0x0801f9a0

08001348 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4905      	ldr	r1, [pc, #20]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 800137e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001382:	4905      	ldr	r1, [pc, #20]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000800 	.word	0x58000800

0800139c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80013aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013b6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	cafecafe 	.word	0xcafecafe

080013d8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <LL_DBGMCU_GetDeviceID+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e0042000 	.word	0xe0042000

0800141c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <LL_DBGMCU_GetRevisionID+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	b29b      	uxth	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e0042000 	.word	0xe0042000

08001438 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6113      	str	r3, [r2, #16]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	22ca      	movs	r2, #202	@ 0xca
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2253      	movs	r2, #83	@ 0x53
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 0207 	bic.w	r2, r3, #7
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <MX_APPE_Config+0x18>)
 80014be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80014c4:	f000 f824 	bl	8001510 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80014c8:	f000 f829 	bl	800151e <Config_HSE>

  return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58004000 	.word	0x58004000

080014d4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014d8:	f000 f835 	bl	8001546 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014dc:	f000 f84e 	bl	800157c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <MX_APPE_Init+0x1c>)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fe4c 	bl	8002180 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014e8:	f000 f856 	bl	8001598 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014ec:	bf00      	nop
}
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000ce4 	.word	0x20000ce4

080014f4 <Init_Smps>:

void Init_Smps(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014f8:	bf00      	nop
}
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <Init_Exti>:

void Init_Exti(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001506:	2050      	movs	r0, #80	@ 0x50
 8001508:	f7ff ff34 	bl	8001374 <LL_EXTI_EnableIT_32_63>

  return;
 800150c:	bf00      	nop
}
 800150e:	bd80      	pop	{r7, pc}

08001510 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001514:	bf00      	nop
}
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f015 faeb 	bl	8016b00 <OTP_Read>
 800152a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	799b      	ldrb	r3, [r3, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff30 	bl	800139c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800153c:	bf00      	nop
 800153e:	bf00      	nop
}
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <System_Init>:

static void System_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  Init_Smps();
 800154a:	f7ff ffd3 	bl	80014f4 <Init_Smps>

  Init_Exti();
 800154e:	f7ff ffd8 	bl	8001502 <Init_Exti>

  Init_Rtc();
 8001552:	f000 f803 	bl	800155c <Init_Rtc>

  return;
 8001556:	bf00      	nop
}
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <Init_Rtc>:

static void Init_Rtc(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <Init_Rtc+0x1c>)
 8001562:	f7ff ff86 	bl	8001472 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001566:	2100      	movs	r1, #0
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <Init_Rtc+0x1c>)
 800156a:	f7ff ff92 	bl	8001492 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <Init_Rtc+0x1c>)
 8001570:	f7ff ff72 	bl	8001458 <LL_RTC_EnableWriteProtection>

  return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40002800 	.word	0x40002800

0800157c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001580:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001584:	f7ff ff28 	bl	80013d8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001588:	f017 fd94 	bl	80190b4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fedb 	bl	8001348 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001592:	bf00      	nop
}
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800159e:	f015 f86d 	bl	801667c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80015a2:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <appe_Tl_Init+0x50>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	2008      	movs	r0, #8
 80015a8:	f017 fec2 	bl	8019330 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <appe_Tl_Init+0x54>)
 80015ae:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <appe_Tl_Init+0x58>)
 80015b2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <appe_Tl_Init+0x5c>)
 80015ba:	f014 ff21 	bl	8016400 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <appe_Tl_Init+0x60>)
 80015c0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <appe_Tl_Init+0x64>)
 80015c4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <appe_Tl_Init+0x68>)
 80015c8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015ca:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015ce:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f015 f993 	bl	8016900 <TL_MM_Init>

  TL_Enable();
 80015da:	f015 f849 	bl	8016670 <TL_Enable>

  return;
 80015de:	bf00      	nop
}
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08016439 	.word	0x08016439
 80015ec:	20030734 	.word	0x20030734
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800161d 	.word	0x0800161d
 80015f8:	2003094c 	.word	0x2003094c
 80015fc:	20030840 	.word	0x20030840
 8001600:	200301f8 	.word	0x200301f8

08001604 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800160e:	bf00      	nop
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	330b      	adds	r3, #11
 800162a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001636:	2b07      	cmp	r3, #7
 8001638:	d81f      	bhi.n	800167a <APPE_SysUserEvtRx+0x5e>
 800163a:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <APPE_SysUserEvtRx+0x24>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001661 	.word	0x08001661
 8001644:	08001673 	.word	0x08001673
 8001648:	0800167b 	.word	0x0800167b
 800164c:	0800167b 	.word	0x0800167b
 8001650:	0800167b 	.word	0x0800167b
 8001654:	0800167b 	.word	0x0800167b
 8001658:	0800167b 	.word	0x0800167b
 800165c:	0800167b 	.word	0x0800167b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f014 fc81 	bl	8015f6c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f81b 	bl	80016a6 <APPE_SysEvtReadyProcessing>
    break;
 8001670:	e004      	b.n	800167c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f806 	bl	8001684 <APPE_SysEvtError>
    break;
 8001678:	e000      	b.n	800167c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800167a:	bf00      	nop
  }

  return;
 800167c:	bf00      	nop
}
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	330b      	adds	r3, #11
 8001692:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3302      	adds	r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800169a:	bf00      	nop
}
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b08a      	sub	sp, #40	@ 0x28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	330b      	adds	r3, #11
 80016ca:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11d      	bne.n	8001716 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016da:	f7ff fe19 	bl	8001310 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016de:	230f      	movs	r3, #15
 80016e0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016e2:	237f      	movs	r3, #127	@ 0x7f
 80016e4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016e6:	f7ff fe99 	bl	800141c <LL_DBGMCU_GetRevisionID>
 80016ea:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016f2:	f7ff fe85 	bl	8001400 <LL_DBGMCU_GetDeviceID>
 80016f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f014 fc1c 	bl	8015f40 <SHCI_C2_Config>

    APP_BLE_Init();
 8001708:	f016 f84e 	bl	80177a8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f017 fce2 	bl	80190d8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001714:	e007      	b.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d103      	bne.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  return;
 8001724:	bf00      	nop
 8001726:	bf00      	nop
}
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001736:	f005 fc75 	bl	8007024 <HAL_GetTick>
 800173a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d00a      	beq.n	800175e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001748:	f005 fc84 	bl	8007054 <HAL_GetTickFreq>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	e002      	b.n	800175e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001758:	f7ff fe6e 	bl	8001438 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800175c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	f005 fc61 	bl	8007024 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f4      	bhi.n	8001758 <HAL_Delay+0x2a>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f017 fcda 	bl	8019138 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800178c:	bf00      	nop
}
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f017 fcc8 	bl	8019138 <UTIL_SEQ_Run>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2008      	movs	r0, #8
 80017bc:	f017 fdda 	bl	8019374 <UTIL_SEQ_SetTask>
  return;
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f017 fe3b 	bl	801944c <UTIL_SEQ_SetEvt>
  return;
 80017d6:	bf00      	nop
}
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f017 fe50 	bl	801948c <UTIL_SEQ_WaitEvt>
  return;
 80017ec:	bf00      	nop
}
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <LL_AHB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800182a:	2004      	movs	r0, #4
 800182c:	f7ff ffe2 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff ffdf 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	200b      	movs	r0, #11
 800183c:	f006 fdd1 	bl	80083e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001840:	200b      	movs	r0, #11
 8001842:	f006 fde8 	bl	8008416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	200c      	movs	r0, #12
 800184c:	f006 fdc9 	bl	80083e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001850:	200c      	movs	r0, #12
 8001852:	f006 fde0 	bl	8008416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	200d      	movs	r0, #13
 800185c:	f006 fdc1 	bl	80083e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001860:	200d      	movs	r0, #13
 8001862:	f006 fdd8 	bl	8008416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	200e      	movs	r0, #14
 800186c:	f006 fdb9 	bl	80083e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001870:	200e      	movs	r0, #14
 8001872:	f006 fdd0 	bl	8008416 <HAL_NVIC_EnableIRQ>

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <LL_AHB2_GRP1_EnableClock>:
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4313      	orrs	r3, r2
 8001890:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4013      	ands	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2004      	movs	r0, #4
 80018c2:	f7ff ffda 	bl	800187a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7ff ffd7 	bl	800187a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff ffd4 	bl	800187a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018da:	f007 fc1b 	bl	8009114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2183      	movs	r1, #131	@ 0x83
 80018e2:	481b      	ldr	r0, [pc, #108]	@ (8001950 <MX_GPIO_Init+0xa4>)
 80018e4:	f007 fc16 	bl	8009114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018e8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4815      	ldr	r0, [pc, #84]	@ (8001954 <MX_GPIO_Init+0xa8>)
 80018fe:	f007 f9a3 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001902:	2301      	movs	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191a:	f007 f995 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 800191e:	2383      	movs	r3, #131	@ 0x83
 8001920:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	@ (8001950 <MX_GPIO_Init+0xa4>)
 8001934:	f007 f988 	bl	8008c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2028      	movs	r0, #40	@ 0x28
 800193e:	f006 fd50 	bl	80083e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001942:	2028      	movs	r0, #40	@ 0x28
 8001944:	f006 fd67 	bl	8008416 <HAL_NVIC_EnableIRQ>

}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000400 	.word	0x48000400
 8001954:	48000800 	.word	0x48000800

08001958 <LL_EXTI_EnableIT_0_31>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <LL_EXTI_EnableIT_0_31+0x24>)
 8001962:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001966:	4905      	ldr	r1, [pc, #20]	@ (800197c <LL_EXTI_EnableIT_0_31+0x24>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	58000800 	.word	0x58000800

08001980 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4904      	ldr	r1, [pc, #16]	@ (80019a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]

}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	58000800 	.word	0x58000800

080019a4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80019ba:	e005      	b.n	80019c8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019c0:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1f5      	bne.n	80019bc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80019d0:	683b      	ldr	r3, [r7, #0]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40002800 	.word	0x40002800

080019e4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	460a      	mov	r2, r1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	4613      	mov	r3, r2
 80019f2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80019f4:	79ba      	ldrb	r2, [r7, #6]
 80019f6:	491d      	ldr	r1, [pc, #116]	@ (8001a6c <LinkTimerAfter+0x88>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	3315      	adds	r3, #21
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d009      	beq.n	8001a22 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3314      	adds	r3, #20
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001a22:	79fa      	ldrb	r2, [r7, #7]
 8001a24:	4911      	ldr	r1, [pc, #68]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3315      	adds	r3, #21
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	3314      	adds	r3, #20
 8001a46:	79ba      	ldrb	r2, [r7, #6]
 8001a48:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a4a:	79ba      	ldrb	r2, [r7, #6]
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	3315      	adds	r3, #21
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	701a      	strb	r2, [r3, #0]

  return;
 8001a5e:	bf00      	nop
}
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000450 	.word	0x20000450

08001a70 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <LinkTimerBefore+0xb8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	79ba      	ldrb	r2, [r7, #6]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d032      	beq.n	8001af2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a8c:	79ba      	ldrb	r2, [r7, #6]
 8001a8e:	4927      	ldr	r1, [pc, #156]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3314      	adds	r3, #20
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	4922      	ldr	r1, [pc, #136]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3315      	adds	r3, #21
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	491d      	ldr	r1, [pc, #116]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3315      	adds	r3, #21
 8001ac4:	79ba      	ldrb	r2, [r7, #6]
 8001ac6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	4918      	ldr	r1, [pc, #96]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3314      	adds	r3, #20
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001adc:	79ba      	ldrb	r2, [r7, #6]
 8001ade:	4913      	ldr	r1, [pc, #76]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3314      	adds	r3, #20
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001af0:	e014      	b.n	8001b1c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	3315      	adds	r3, #21
 8001b02:	79ba      	ldrb	r2, [r7, #6]
 8001b04:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001b06:	79ba      	ldrb	r2, [r7, #6]
 8001b08:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	3314      	adds	r3, #20
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	701a      	strb	r2, [r3, #0]
  return;
 8001b1a:	bf00      	nop
}
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200004e0 	.word	0x200004e0
 8001b2c:	20000450 	.word	0x20000450

08001b30 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c74 <linkTimer+0x144>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b06      	cmp	r3, #6
 8001b42:	d118      	bne.n	8001b76 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b44:	4b4b      	ldr	r3, [pc, #300]	@ (8001c74 <linkTimer+0x144>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <linkTimer+0x148>)
 8001b4c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b4e:	4a49      	ldr	r2, [pc, #292]	@ (8001c74 <linkTimer+0x144>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b54:	79fa      	ldrb	r2, [r7, #7]
 8001b56:	4949      	ldr	r1, [pc, #292]	@ (8001c7c <linkTimer+0x14c>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	3315      	adds	r3, #21
 8001b64:	2206      	movs	r2, #6
 8001b66:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b68:	4b45      	ldr	r3, [pc, #276]	@ (8001c80 <linkTimer+0x150>)
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	81fb      	strh	r3, [r7, #14]
 8001b74:	e078      	b.n	8001c68 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b76:	f000 f909 	bl	8001d8c <ReturnTimeElapsed>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	493e      	ldr	r1, [pc, #248]	@ (8001c7c <linkTimer+0x14c>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	79fa      	ldrb	r2, [r7, #7]
 8001b94:	4419      	add	r1, r3
 8001b96:	4839      	ldr	r0, [pc, #228]	@ (8001c7c <linkTimer+0x14c>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4403      	add	r3, r0
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	4934      	ldr	r1, [pc, #208]	@ (8001c7c <linkTimer+0x14c>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <linkTimer+0x144>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c7c <linkTimer+0x14c>)
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	440b      	add	r3, r1
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3308      	adds	r3, #8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d337      	bcc.n	8001c48 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <linkTimer+0x144>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001bde:	7b7a      	ldrb	r2, [r7, #13]
 8001be0:	4926      	ldr	r1, [pc, #152]	@ (8001c7c <linkTimer+0x14c>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3315      	adds	r3, #21
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001bf2:	e013      	b.n	8001c1c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001bf4:	7b7a      	ldrb	r2, [r7, #13]
 8001bf6:	4921      	ldr	r1, [pc, #132]	@ (8001c7c <linkTimer+0x14c>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3315      	adds	r3, #21
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001c08:	7b7a      	ldrb	r2, [r7, #13]
 8001c0a:	491c      	ldr	r1, [pc, #112]	@ (8001c7c <linkTimer+0x14c>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3315      	adds	r3, #21
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c1c:	7b3b      	ldrb	r3, [r7, #12]
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d00b      	beq.n	8001c3a <linkTimer+0x10a>
 8001c22:	7b3a      	ldrb	r2, [r7, #12]
 8001c24:	4915      	ldr	r1, [pc, #84]	@ (8001c7c <linkTimer+0x14c>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	3308      	adds	r3, #8
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d2dc      	bcs.n	8001bf4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001c3a:	7b7a      	ldrb	r2, [r7, #13]
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fecf 	bl	80019e4 <LinkTimerAfter>
 8001c46:	e00f      	b.n	8001c68 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <linkTimer+0x144>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff0c 	bl	8001a70 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <linkTimer+0x144>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <linkTimer+0x148>)
 8001c60:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <linkTimer+0x144>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c68:	89fb      	ldrh	r3, [r7, #14]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200004e0 	.word	0x200004e0
 8001c78:	200004e1 	.word	0x200004e1
 8001c7c:	20000450 	.word	0x20000450
 8001c80:	200004e4 	.word	0x200004e4

08001c84 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001c94:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d111      	bne.n	8001cc4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ca0:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <UnlinkTimer+0xfc>)
 8001ca8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	4935      	ldr	r1, [pc, #212]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3315      	adds	r3, #21
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e03e      	b.n	8001d42 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001cc4:	79fa      	ldrb	r2, [r7, #7]
 8001cc6:	492f      	ldr	r1, [pc, #188]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3314      	adds	r3, #20
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	492a      	ldr	r1, [pc, #168]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3315      	adds	r3, #21
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001cec:	79f9      	ldrb	r1, [r7, #7]
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	4824      	ldr	r0, [pc, #144]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	440b      	add	r3, r1
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4403      	add	r3, r0
 8001cfc:	3315      	adds	r3, #21
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2d8      	uxtb	r0, r3
 8001d02:	4920      	ldr	r1, [pc, #128]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3315      	adds	r3, #21
 8001d10:	4602      	mov	r2, r0
 8001d12:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d013      	beq.n	8001d42 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001d1a:	79f9      	ldrb	r1, [r7, #7]
 8001d1c:	7bba      	ldrb	r2, [r7, #14]
 8001d1e:	4819      	ldr	r0, [pc, #100]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d20:	460b      	mov	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4403      	add	r3, r0
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2d8      	uxtb	r0, r3
 8001d30:	4914      	ldr	r1, [pc, #80]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3314      	adds	r3, #20
 8001d3e:	4602      	mov	r2, r0
 8001d40:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	490f      	ldr	r1, [pc, #60]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	330c      	adds	r3, #12
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b06      	cmp	r3, #6
 8001d5e:	d107      	bne.n	8001d70 <UnlinkTimer+0xec>
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d104      	bne.n	8001d70 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <UnlinkTimer+0x104>)
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
}
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	200004e0 	.word	0x200004e0
 8001d80:	200004e1 	.word	0x200004e1
 8001d84:	20000450 	.word	0x20000450
 8001d88:	200004e4 	.word	0x200004e4

08001d8c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d026      	beq.n	8001dea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001d9c:	f7ff fe02 	bl	80019a4 <ReadRtcSsrValue>
 8001da0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d805      	bhi.n	8001db8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e00a      	b.n	8001dce <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <ReturnTimeElapsed+0x74>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <ReturnTimeElapsed+0x78>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <ReturnTimeElapsed+0x7c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	40d3      	lsrs	r3, r2
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	e001      	b.n	8001dee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	b29b      	uxth	r3, r3
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200004e4 	.word	0x200004e4
 8001e00:	200004ec 	.word	0x200004ec
 8001e04:	200004ea 	.word	0x200004ea
 8001e08:	200004e9 	.word	0x200004e9

08001e0c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d108      	bne.n	8001e2e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e1c:	f7ff fdc2 	bl	80019a4 <ReadRtcSsrValue>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <RestartWakeupCounter+0x9c>)
 8001e24:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e26:	2003      	movs	r0, #3
 8001e28:	f006 fb1d 	bl	8008466 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001e2c:	e039      	b.n	8001ea2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d803      	bhi.n	8001e3c <RestartWakeupCounter+0x30>
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <RestartWakeupCounter+0xa0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d002      	beq.n	8001e42 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e42:	bf00      	nop
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f8      	beq.n	8001e44 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e62:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <RestartWakeupCounter+0xa8>)
 8001e66:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e6a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f006 fb08 	bl	8008482 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <RestartWakeupCounter+0xac>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	490e      	ldr	r1, [pc, #56]	@ (8001eb8 <RestartWakeupCounter+0xac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e82:	f7ff fd8f 	bl	80019a4 <ReadRtcSsrValue>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <RestartWakeupCounter+0x9c>)
 8001e8a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e9a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001e9c:	f3af 8000 	nop.w
  return ;
 8001ea0:	bf00      	nop
}
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200004e4 	.word	0x200004e4
 8001eac:	200004e9 	.word	0x200004e9
 8001eb0:	20000ce4 	.word	0x20000ce4
 8001eb4:	58000800 	.word	0x58000800
 8001eb8:	40002800 	.word	0x40002800

08001ebc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ec2:	4b45      	ldr	r3, [pc, #276]	@ (8001fd8 <RescheduleTimerList+0x11c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ece:	d107      	bne.n	8001ee0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ed0:	bf00      	nop
 8001ed2:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f8      	bne.n	8001ed2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eee:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <RescheduleTimerList+0x124>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	493a      	ldr	r1, [pc, #232]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3308      	adds	r3, #8
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001f0a:	f7ff ff3f 	bl	8001d8c <ReturnTimeElapsed>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d205      	bcs.n	8001f26 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f1e:	4b32      	ldr	r3, [pc, #200]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e04d      	b.n	8001fc2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4a30      	ldr	r2, [pc, #192]	@ (8001fec <RescheduleTimerList+0x130>)
 8001f2a:	8812      	ldrh	r2, [r2, #0]
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	4413      	add	r3, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d906      	bls.n	8001f46 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <RescheduleTimerList+0x130>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e03d      	b.n	8001fc2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f50:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f56:	e034      	b.n	8001fc2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	4922      	ldr	r1, [pc, #136]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	3308      	adds	r3, #8
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d20a      	bcs.n	8001f86 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	491c      	ldr	r1, [pc, #112]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3308      	adds	r3, #8
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e013      	b.n	8001fae <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	4916      	ldr	r1, [pc, #88]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	3308      	adds	r3, #8
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	1ac9      	subs	r1, r1, r3
 8001f9e:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4403      	add	r3, r0
 8001faa:	3308      	adds	r3, #8
 8001fac:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	3315      	adds	r3, #21
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b06      	cmp	r3, #6
 8001fc6:	d1c7      	bne.n	8001f58 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff1e 	bl	8001e0c <RestartWakeupCounter>

  return ;
 8001fd0:	bf00      	nop
}
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40002800 	.word	0x40002800
 8001fdc:	20000ce4 	.word	0x20000ce4
 8001fe0:	200004e0 	.word	0x200004e0
 8001fe4:	20000450 	.word	0x20000450
 8001fe8:	200004e8 	.word	0x200004e8
 8001fec:	200004ee 	.word	0x200004ee

08001ff0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffa:	617b      	str	r3, [r7, #20]
  return(result);
 8001ffc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002004:	4b59      	ldr	r3, [pc, #356]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	22ca      	movs	r2, #202	@ 0xca
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24
 800200c:	4b57      	ldr	r3, [pc, #348]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2253      	movs	r2, #83	@ 0x53
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002014:	4b55      	ldr	r3, [pc, #340]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002022:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002024:	4b52      	ldr	r3, [pc, #328]	@ (8002170 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800202c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002030:	4950      	ldr	r1, [pc, #320]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	330c      	adds	r3, #12
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d16e      	bne.n	8002124 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002046:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800204a:	494a      	ldr	r1, [pc, #296]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800205a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800205e:	4945      	ldr	r1, [pc, #276]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3310      	adds	r3, #16
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002070:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d04c      	beq.n	8002114 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800207a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800207e:	493d      	ldr	r1, [pc, #244]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	330d      	adds	r3, #13
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d124      	bne.n	80020de <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fdf2 	bl	8001c84 <UnlinkTimer>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f383 8810 	msr	PRIMASK, r3
}
 80020aa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80020ac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020b0:	4930      	ldr	r1, [pc, #192]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	3304      	adds	r3, #4
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f9b8 	bl	800243c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	22ca      	movs	r2, #202	@ 0xca
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80020d4:	4b25      	ldr	r3, [pc, #148]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2253      	movs	r2, #83	@ 0x53
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
 80020dc:	e012      	b.n	8002104 <HW_TS_RTC_Wakeup_Handler+0x114>
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f383 8810 	msr	PRIMASK, r3
}
 80020e8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80020ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f920 	bl	8002334 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	22ca      	movs	r2, #202	@ 0xca
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2253      	movs	r2, #83	@ 0x53
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	4619      	mov	r1, r3
 800210c:	69b8      	ldr	r0, [r7, #24]
 800210e:	f000 fa1b 	bl	8002548 <HW_TS_RTC_Int_AppNot>
 8002112:	e022      	b.n	800215a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002114:	f7ff fed2 	bl	8001ebc <RescheduleTimerList>
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f383 8810 	msr	PRIMASK, r3
}
 8002122:	e01a      	b.n	800215a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002124:	bf00      	nop
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f8      	beq.n	8002126 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002134:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002144:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002148:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f383 8810 	msr	PRIMASK, r3
}
 8002158:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	22ff      	movs	r2, #255	@ 0xff
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002162:	bf00      	nop
}
 8002164:	3728      	adds	r7, #40	@ 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000ce4 	.word	0x20000ce4
 8002170:	200004e0 	.word	0x200004e0
 8002174:	20000450 	.word	0x20000450
 8002178:	200004e8 	.word	0x200004e8
 800217c:	58000800 	.word	0x58000800

08002180 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800218c:	4b5e      	ldr	r3, [pc, #376]	@ (8002308 <HW_TS_Init+0x188>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	22ca      	movs	r2, #202	@ 0xca
 8002192:	625a      	str	r2, [r3, #36]	@ 0x24
 8002194:	4b5c      	ldr	r3, [pc, #368]	@ (8002308 <HW_TS_Init+0x188>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2253      	movs	r2, #83	@ 0x53
 800219a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800219c:	4b5b      	ldr	r3, [pc, #364]	@ (800230c <HW_TS_Init+0x18c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a5a      	ldr	r2, [pc, #360]	@ (800230c <HW_TS_Init+0x18c>)
 80021a2:	f043 0320 	orr.w	r3, r3, #32
 80021a6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80021a8:	4b58      	ldr	r3, [pc, #352]	@ (800230c <HW_TS_Init+0x18c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f1c3 0304 	rsb	r3, r3, #4
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b55      	ldr	r3, [pc, #340]	@ (8002310 <HW_TS_Init+0x190>)
 80021bc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80021be:	4b53      	ldr	r3, [pc, #332]	@ (800230c <HW_TS_Init+0x18c>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021c6:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80021ca:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	fa92 f2a2 	rbit	r2, r2
 80021d2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	2a00      	cmp	r2, #0
 80021dc:	d101      	bne.n	80021e2 <HW_TS_Init+0x62>
  {
    return 32U;
 80021de:	2220      	movs	r2, #32
 80021e0:	e003      	b.n	80021ea <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	40d3      	lsrs	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3301      	adds	r3, #1
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b48      	ldr	r3, [pc, #288]	@ (8002314 <HW_TS_Init+0x194>)
 80021f4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80021f6:	4b45      	ldr	r3, [pc, #276]	@ (800230c <HW_TS_Init+0x18c>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002200:	b29b      	uxth	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <HW_TS_Init+0x198>)
 8002208:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800220a:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <HW_TS_Init+0x198>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	4a40      	ldr	r2, [pc, #256]	@ (8002314 <HW_TS_Init+0x194>)
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800221c:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <HW_TS_Init+0x190>)
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	40d3      	lsrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800222a:	4293      	cmp	r3, r2
 800222c:	d904      	bls.n	8002238 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HW_TS_Init+0x19c>)
 8002230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e003      	b.n	8002240 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b37      	ldr	r3, [pc, #220]	@ (800231c <HW_TS_Init+0x19c>)
 800223e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002240:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002244:	f7ff fb9c 	bl	8001980 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002248:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800224c:	f7ff fb84 	bl	8001958 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d13d      	bne.n	80022d2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002256:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <HW_TS_Init+0x1a0>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800225c:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <HW_TS_Init+0x1a4>)
 800225e:	f04f 32ff 	mov.w	r2, #4294967295
 8002262:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002264:	2300      	movs	r3, #0
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	e00c      	b.n	8002284 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800226a:	7ffa      	ldrb	r2, [r7, #31]
 800226c:	492e      	ldr	r1, [pc, #184]	@ (8002328 <HW_TS_Init+0x1a8>)
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	330c      	adds	r3, #12
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	3301      	adds	r3, #1
 8002282:	77fb      	strb	r3, [r7, #31]
 8002284:	7ffb      	ldrb	r3, [r7, #31]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d9ef      	bls.n	800226a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800228a:	4b28      	ldr	r3, [pc, #160]	@ (800232c <HW_TS_Init+0x1ac>)
 800228c:	2206      	movs	r2, #6
 800228e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HW_TS_Init+0x188>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HW_TS_Init+0x188>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800229e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HW_TS_Init+0x188>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HW_TS_Init+0x188>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80022b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HW_TS_Init+0x1b0>)
 80022b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022b8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80022ba:	2003      	movs	r0, #3
 80022bc:	f006 f8e1 	bl	8008482 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HW_TS_Init+0x188>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HW_TS_Init+0x188>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	e009      	b.n	80022e6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HW_TS_Init+0x188>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80022e0:	2003      	movs	r0, #3
 80022e2:	f006 f8c0 	bl	8008466 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HW_TS_Init+0x188>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	22ff      	movs	r2, #255	@ 0xff
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80022ee:	2200      	movs	r2, #0
 80022f0:	2103      	movs	r1, #3
 80022f2:	2003      	movs	r0, #3
 80022f4:	f006 f875 	bl	80083e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022f8:	2003      	movs	r0, #3
 80022fa:	f006 f88c 	bl	8008416 <HAL_NVIC_EnableIRQ>

  return;
 80022fe:	bf00      	nop
}
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000ce4 	.word	0x20000ce4
 800230c:	40002800 	.word	0x40002800
 8002310:	200004e9 	.word	0x200004e9
 8002314:	200004ea 	.word	0x200004ea
 8002318:	200004ec 	.word	0x200004ec
 800231c:	200004ee 	.word	0x200004ee
 8002320:	200004e8 	.word	0x200004e8
 8002324:	200004e4 	.word	0x200004e4
 8002328:	20000450 	.word	0x20000450
 800232c:	200004e0 	.word	0x200004e0
 8002330:	58000800 	.word	0x58000800

08002334 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233e:	f3ef 8310 	mrs	r3, PRIMASK
 8002342:	60fb      	str	r3, [r7, #12]
  return(result);
 8002344:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002346:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800234c:	2003      	movs	r0, #3
 800234e:	f006 f870 	bl	8008432 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002352:	4b34      	ldr	r3, [pc, #208]	@ (8002424 <HW_TS_Stop+0xf0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	22ca      	movs	r2, #202	@ 0xca
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24
 800235a:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <HW_TS_Stop+0xf0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2253      	movs	r2, #83	@ 0x53
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002362:	79fa      	ldrb	r2, [r7, #7]
 8002364:	4930      	ldr	r1, [pc, #192]	@ (8002428 <HW_TS_Stop+0xf4>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	330c      	adds	r3, #12
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d142      	bne.n	8002400 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fc80 	bl	8001c84 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002384:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HW_TS_Stop+0xf8>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	2b06      	cmp	r3, #6
 800238e:	d12f      	bne.n	80023f0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002390:	4b27      	ldr	r3, [pc, #156]	@ (8002430 <HW_TS_Stop+0xfc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800239c:	d107      	bne.n	80023ae <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800239e:	bf00      	nop
 80023a0:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f8      	bne.n	80023a0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80023ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023bc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80023be:	bf00      	nop
 80023c0:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f8      	beq.n	80023c0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80023de:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <HW_TS_Stop+0x100>)
 80023e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023e6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80023e8:	2003      	movs	r0, #3
 80023ea:	f006 f84a 	bl	8008482 <HAL_NVIC_ClearPendingIRQ>
 80023ee:	e007      	b.n	8002400 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HW_TS_Stop+0x104>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	7cfa      	ldrb	r2, [r7, #19]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023fc:	f7ff fd5e 	bl	8001ebc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HW_TS_Stop+0xf0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	22ff      	movs	r2, #255	@ 0xff
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002408:	2003      	movs	r0, #3
 800240a:	f006 f804 	bl	8008416 <HAL_NVIC_EnableIRQ>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f383 8810 	msr	PRIMASK, r3
}
 8002418:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800241a:	bf00      	nop
}
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000ce4 	.word	0x20000ce4
 8002428:	20000450 	.word	0x20000450
 800242c:	200004e0 	.word	0x200004e0
 8002430:	40002800 	.word	0x40002800
 8002434:	58000800 	.word	0x58000800
 8002438:	200004e1 	.word	0x200004e1

0800243c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	493b      	ldr	r1, [pc, #236]	@ (8002538 <HW_TS_Start+0xfc>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	330c      	adds	r3, #12
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d103      	bne.n	8002468 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff66 	bl	8002334 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002468:	f3ef 8310 	mrs	r3, PRIMASK
 800246c:	60fb      	str	r3, [r7, #12]
  return(result);
 800246e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002472:	b672      	cpsid	i
}
 8002474:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002476:	2003      	movs	r0, #3
 8002478:	f005 ffdb 	bl	8008432 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HW_TS_Start+0x100>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	22ca      	movs	r2, #202	@ 0xca
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HW_TS_Start+0x100>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2253      	movs	r2, #83	@ 0x53
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	492a      	ldr	r1, [pc, #168]	@ (8002538 <HW_TS_Start+0xfc>)
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	330c      	adds	r3, #12
 800249c:	2202      	movs	r2, #2
 800249e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80024a0:	79fa      	ldrb	r2, [r7, #7]
 80024a2:	4925      	ldr	r1, [pc, #148]	@ (8002538 <HW_TS_Start+0xfc>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3308      	adds	r3, #8
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80024b4:	79fa      	ldrb	r2, [r7, #7]
 80024b6:	4920      	ldr	r1, [pc, #128]	@ (8002538 <HW_TS_Start+0xfc>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	3304      	adds	r3, #4
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fb30 	bl	8001b30 <linkTimer>
 80024d0:	4603      	mov	r3, r0
 80024d2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80024d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HW_TS_Start+0x104>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HW_TS_Start+0x108>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	7c7a      	ldrb	r2, [r7, #17]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d002      	beq.n	80024ec <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80024e6:	f7ff fce9 	bl	8001ebc <RescheduleTimerList>
 80024ea:	e013      	b.n	8002514 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80024ec:	79fa      	ldrb	r2, [r7, #7]
 80024ee:	4912      	ldr	r1, [pc, #72]	@ (8002538 <HW_TS_Start+0xfc>)
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3308      	adds	r3, #8
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	8a7b      	ldrh	r3, [r7, #18]
 8002500:	79fa      	ldrb	r2, [r7, #7]
 8002502:	1ac9      	subs	r1, r1, r3
 8002504:	480c      	ldr	r0, [pc, #48]	@ (8002538 <HW_TS_Start+0xfc>)
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4403      	add	r3, r0
 8002510:	3308      	adds	r3, #8
 8002512:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HW_TS_Start+0x100>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	22ff      	movs	r2, #255	@ 0xff
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800251c:	2003      	movs	r0, #3
 800251e:	f005 ff7a 	bl	8008416 <HAL_NVIC_EnableIRQ>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f383 8810 	msr	PRIMASK, r3
}
 800252c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800252e:	bf00      	nop
}
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000450 	.word	0x20000450
 800253c:	20000ce4 	.word	0x20000ce4
 8002540:	200004e0 	.word	0x200004e0
 8002544:	200004e1 	.word	0x200004e1

08002548 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	460b      	mov	r3, r1
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4798      	blx	r3

  return;
 800255a:	bf00      	nop
}
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <LL_AHB2_GRP1_EnableClock>:
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4313      	orrs	r3, r2
 8002578:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4013      	ands	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025b8:	68fb      	ldr	r3, [r7, #12]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025dc:	4013      	ands	r3, r2
 80025de:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <MX_I2C1_Init+0x74>)
 80025f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002664 <MX_I2C1_Init+0x78>)
 80025f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <MX_I2C1_Init+0x74>)
 80025f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002668 <MX_I2C1_Init+0x7c>)
 80025fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <MX_I2C1_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002602:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002604:	2201      	movs	r2, #1
 8002606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002608:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <MX_I2C1_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800260e:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <MX_I2C1_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002620:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002626:	480e      	ldr	r0, [pc, #56]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002628:	f006 fde2 	bl	80091f0 <HAL_I2C_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002632:	f000 fb53 	bl	8002cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002636:	2100      	movs	r1, #0
 8002638:	4809      	ldr	r0, [pc, #36]	@ (8002660 <MX_I2C1_Init+0x74>)
 800263a:	f007 fa25 	bl	8009a88 <HAL_I2CEx_ConfigAnalogFilter>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002644:	f000 fb4a 	bl	8002cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002648:	2100      	movs	r1, #0
 800264a:	4805      	ldr	r0, [pc, #20]	@ (8002660 <MX_I2C1_Init+0x74>)
 800264c:	f007 fa67 	bl	8009b1e <HAL_I2CEx_ConfigDigitalFilter>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002656:	f000 fb41 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200004f0 	.word	0x200004f0
 8002664:	40005400 	.word	0x40005400
 8002668:	10707dbc 	.word	0x10707dbc

0800266c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002672:	4a1e      	ldr	r2, [pc, #120]	@ (80026ec <MX_I2C3_Init+0x80>)
 8002674:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300B29;
 8002676:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002678:	4a1d      	ldr	r2, [pc, #116]	@ (80026f0 <MX_I2C3_Init+0x84>)
 800267a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800267c:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002682:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002684:	2201      	movs	r2, #1
 8002686:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002688:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800268e:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002694:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 800269c:	2200      	movs	r2, #0
 800269e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026a0:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026a6:	4810      	ldr	r0, [pc, #64]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026a8:	f006 fda2 	bl	80091f0 <HAL_I2C_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80026b2:	f000 fb13 	bl	8002cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026b6:	2100      	movs	r1, #0
 80026b8:	480b      	ldr	r0, [pc, #44]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026ba:	f007 f9e5 	bl	8009a88 <HAL_I2CEx_ConfigAnalogFilter>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80026c4:	f000 fb0a 	bl	8002cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026c8:	2100      	movs	r1, #0
 80026ca:	4807      	ldr	r0, [pc, #28]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026cc:	f007 fa27 	bl	8009b1e <HAL_I2CEx_ConfigDigitalFilter>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80026d6:	f000 fb01 	bl	8002cdc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80026da:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80026de:	f007 fa6b 	bl	8009bb8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000544 	.word	0x20000544
 80026ec:	40005c00 	.word	0x40005c00
 80026f0:	00300b29 	.word	0x00300b29

080026f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b09c      	sub	sp, #112	@ 0x70
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	2250      	movs	r2, #80	@ 0x50
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f018 fea4 	bl	801b462 <memset>
  if(i2cHandle->Instance==I2C1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a37      	ldr	r2, [pc, #220]	@ (80027fc <HAL_I2C_MspInit+0x108>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d127      	bne.n	8002774 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002724:	2304      	movs	r3, #4
 8002726:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002728:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4618      	mov	r0, r3
 8002734:	f00a fb2f 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800273e:	f000 facd 	bl	8002cdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2002      	movs	r0, #2
 8002744:	f7ff ff0d 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002748:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800274c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800274e:	2312      	movs	r3, #18
 8002750:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800275a:	2304      	movs	r3, #4
 800275c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002762:	4619      	mov	r1, r3
 8002764:	4826      	ldr	r0, [pc, #152]	@ (8002800 <HAL_I2C_MspInit+0x10c>)
 8002766:	f006 fa6f 	bl	8008c48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800276a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800276e:	f7ff ff11 	bl	8002594 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002772:	e03e      	b.n	80027f2 <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a22      	ldr	r2, [pc, #136]	@ (8002804 <HAL_I2C_MspInit+0x110>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d139      	bne.n	80027f2 <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800277e:	2308      	movs	r3, #8
 8002780:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002782:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002786:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	4618      	mov	r0, r3
 800278e:	f00a fb02 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002798:	f000 faa0 	bl	8002cdc <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	2001      	movs	r0, #1
 800279e:	f7ff fee0 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	2002      	movs	r0, #2
 80027a4:	f7ff fedd 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ac:	2312      	movs	r3, #18
 80027ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027b8:	2304      	movs	r3, #4
 80027ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027c0:	4619      	mov	r1, r3
 80027c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027c6:	f006 fa3f 	bl	8008c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ca:	2310      	movs	r3, #16
 80027cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ce:	2312      	movs	r3, #18
 80027d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027da:	2304      	movs	r3, #4
 80027dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027e2:	4619      	mov	r1, r3
 80027e4:	4806      	ldr	r0, [pc, #24]	@ (8002800 <HAL_I2C_MspInit+0x10c>)
 80027e6:	f006 fa2f 	bl	8008c48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80027ee:	f7ff fed1 	bl	8002594 <LL_APB1_GRP1_EnableClock>
}
 80027f2:	bf00      	nop
 80027f4:	3770      	adds	r7, #112	@ 0x70
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40005400 	.word	0x40005400
 8002800:	48000400 	.word	0x48000400
 8002804:	40005c00 	.word	0x40005c00

08002808 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a13      	ldr	r2, [pc, #76]	@ (8002864 <HAL_I2C_MspDeInit+0x5c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10e      	bne.n	8002838 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800281a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800281e:	f7ff fed2 	bl	80025c6 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002826:	4810      	ldr	r0, [pc, #64]	@ (8002868 <HAL_I2C_MspDeInit+0x60>)
 8002828:	f006 fb7e 	bl	8008f28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800282c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002830:	480d      	ldr	r0, [pc, #52]	@ (8002868 <HAL_I2C_MspDeInit+0x60>)
 8002832:	f006 fb79 	bl	8008f28 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002836:	e011      	b.n	800285c <HAL_I2C_MspDeInit+0x54>
  else if(i2cHandle->Instance==I2C3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0b      	ldr	r2, [pc, #44]	@ (800286c <HAL_I2C_MspDeInit+0x64>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10c      	bne.n	800285c <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002842:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002846:	f7ff febe 	bl	80025c6 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 800284a:	2180      	movs	r1, #128	@ 0x80
 800284c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002850:	f006 fb6a 	bl	8008f28 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8002854:	2110      	movs	r1, #16
 8002856:	4804      	ldr	r0, [pc, #16]	@ (8002868 <HAL_I2C_MspDeInit+0x60>)
 8002858:	f006 fb66 	bl	8008f28 <HAL_GPIO_DeInit>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40005400 	.word	0x40005400
 8002868:	48000400 	.word	0x48000400
 800286c:	40005c00 	.word	0x40005c00

08002870 <LL_AHB3_GRP1_EnableClock>:
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800287e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4313      	orrs	r3, r2
 8002886:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002894:	68fb      	ldr	r3, [r7, #12]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <MX_IPCC_Init+0x20>)
 80028aa:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <MX_IPCC_Init+0x24>)
 80028ac:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <MX_IPCC_Init+0x20>)
 80028b0:	f007 f994 	bl	8009bdc <HAL_IPCC_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80028ba:	f000 fa0f 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000598 	.word	0x20000598
 80028c8:	58000c00 	.word	0x58000c00

080028cc <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <HAL_IPCC_MspInit+0x44>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d113      	bne.n	8002906 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80028de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80028e2:	f7ff ffc5 	bl	8002870 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	202c      	movs	r0, #44	@ 0x2c
 80028ec:	f005 fd79 	bl	80083e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80028f0:	202c      	movs	r0, #44	@ 0x2c
 80028f2:	f005 fd90 	bl	8008416 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	202d      	movs	r0, #45	@ 0x2d
 80028fc:	f005 fd71 	bl	80083e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002900:	202d      	movs	r0, #45	@ 0x2d
 8002902:	f005 fd88 	bl	8008416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	58000c00 	.word	0x58000c00

08002914 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	3220      	adds	r2, #32
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <LL_HSEM_1StepLock+0x2c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d001      	beq.n	8002932 <LL_HSEM_1StepLock+0x1e>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <LL_HSEM_1StepLock+0x20>
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	80000400 	.word	0x80000400

08002944 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002954:	d12f      	bne.n	80029b6 <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002956:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800295a:	4833      	ldr	r0, [pc, #204]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0xe4>)
 800295c:	f006 fbc2 	bl	80090e4 <HAL_GPIO_ReadPin>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002966:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 800296c:	f004 fb5a 	bl	8007024 <HAL_GetTick>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xec>)
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e010      	b.n	800299c <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 800297a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0xf0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	4a2c      	ldr	r2, [pc, #176]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002982:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002984:	f004 fb4e 	bl	8007024 <HAL_GetTick>
 8002988:	4603      	mov	r3, r0
 800298a:	4a29      	ldr	r2, [pc, #164]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xec>)
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4b26      	ldr	r3, [pc, #152]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002994:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002996:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xec>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 800299c:	4b23      	ldr	r3, [pc, #140]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xe8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80029a4:	db07      	blt.n	80029b6 <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 80029a6:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xf4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	4a22      	ldr	r2, [pc, #136]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xf4>)
 80029ae:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 80029b0:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0xf0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029bc:	d12f      	bne.n	8002a1e <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 80029be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029c2:	4819      	ldr	r0, [pc, #100]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0xe4>)
 80029c4:	f006 fb8e 	bl	80090e4 <HAL_GPIO_ReadPin>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 80029ce:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 80029d4:	f004 fb26 	bl	8007024 <HAL_GetTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e010      	b.n	8002a04 <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 80029e2:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0x100>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	4a16      	ldr	r2, [pc, #88]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0x100>)
 80029ea:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 80029ec:	f004 fb1a 	bl	8007024 <HAL_GetTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a13      	ldr	r2, [pc, #76]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029fc:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002a0c:	db07      	blt.n	8002a1e <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0x104>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	4a0c      	ldr	r2, [pc, #48]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0x104>)
 8002a16:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0x100>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	48000800 	.word	0x48000800
 8002a2c:	20000b8c 	.word	0x20000b8c
 8002a30:	20000b94 	.word	0x20000b94
 8002a34:	20000860 	.word	0x20000860
 8002a38:	20000ba0 	.word	0x20000ba0
 8002a3c:	20000b90 	.word	0x20000b90
 8002a40:	20000b98 	.word	0x20000b98
 8002a44:	20000864 	.word	0x20000864
 8002a48:	20000b9c 	.word	0x20000b9c

08002a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a52:	f004 fa79 	bl	8006f48 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002a56:	f7fe fd2f 	bl	80014b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a5a:	f000 f8a1 	bl	8002ba0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a5e:	f000 f903 	bl	8002c68 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002a62:	f7ff ff1f 	bl	80028a4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002a66:	f000 fdd3 	bl	8003610 <MX_RF_Init>
  MX_GPIO_Init();
 8002a6a:	f7fe ff1f 	bl	80018ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002a6e:	f7fe feda 	bl	8001826 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a72:	f7fe faa9 	bl	8000fc8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002a76:	f7ff fdb9 	bl	80025ec <MX_I2C1_Init>
  MX_I2C3_Init();
 8002a7a:	f7ff fdf7 	bl	800266c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002a7e:	f004 f843 	bl	8006b08 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002a82:	f003 fd71 	bl	8006568 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002a86:	f003 fdbd 	bl	8006604 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002a8a:	f003 fde3 	bl	8006654 <MX_TIM17_Init>
  MX_SPI1_Init();
 8002a8e:	f000 fec5 	bl	800381c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a92:	f004 f885 	bl	8006ba0 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002a96:	f015 fdbd 	bl	8018614 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002a9a:	f000 fdeb 	bl	8003674 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Abort(&huart1);
 8002a9e:	4831      	ldr	r0, [pc, #196]	@ (8002b64 <main+0x118>)
 8002aa0:	f00c fdbc 	bl	800f61c <HAL_UART_Abort>
    HAL_UART_DeInit(&huart1);
 8002aa4:	482f      	ldr	r0, [pc, #188]	@ (8002b64 <main+0x118>)
 8002aa6:	f00c fd2d 	bl	800f504 <HAL_UART_DeInit>

    HAL_I2C_DeInit(&hi2c1);
 8002aaa:	482f      	ldr	r0, [pc, #188]	@ (8002b68 <main+0x11c>)
 8002aac:	f006 fc3b 	bl	8009326 <HAL_I2C_DeInit>



  	ssd1306_Init();
 8002ab0:	f001 f996 	bl	8003de0 <ssd1306_Init>

  	HAL_Delay(10);
 8002ab4:	200a      	movs	r0, #10
 8002ab6:	f7fe fe3a 	bl	800172e <HAL_Delay>
  	ssd1306_Fill(Black);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f001 f9fa 	bl	8003eb4 <ssd1306_Fill>

  	ssd1306_DrawBitmap(30, 12, startimg, 72, 40, White);
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2328      	movs	r3, #40	@ 0x28
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2348      	movs	r3, #72	@ 0x48
 8002aca:	4a28      	ldr	r2, [pc, #160]	@ (8002b6c <main+0x120>)
 8002acc:	210c      	movs	r1, #12
 8002ace:	201e      	movs	r0, #30
 8002ad0:	f001 fc3b 	bl	800434a <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002ad4:	f001 fa06 	bl	8003ee4 <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002ad8:	2203      	movs	r2, #3
 8002ada:	4925      	ldr	r1, [pc, #148]	@ (8002b70 <main+0x124>)
 8002adc:	4825      	ldr	r0, [pc, #148]	@ (8002b74 <main+0x128>)
 8002ade:	f004 fdd9 	bl	8007694 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002ae2:	4825      	ldr	r0, [pc, #148]	@ (8002b78 <main+0x12c>)
 8002ae4:	f00c f84e 	bl	800eb84 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002ae8:	4824      	ldr	r0, [pc, #144]	@ (8002b7c <main+0x130>)
 8002aea:	f00c f891 	bl	800ec10 <HAL_TIM_Base_Start_IT>
  	//HAL_TIM_Base_Start_IT(&htim17);

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002aee:	2201      	movs	r2, #1
 8002af0:	2101      	movs	r1, #1
 8002af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af6:	f006 fb0d 	bl	8009114 <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002afa:	2064      	movs	r0, #100	@ 0x64
 8002afc:	f7fe fe17 	bl	800172e <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002b00:	481f      	ldr	r0, [pc, #124]	@ (8002b80 <main+0x134>)
 8002b02:	f00c fd8b 	bl	800f61c <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002b06:	2240      	movs	r2, #64	@ 0x40
 8002b08:	491e      	ldr	r1, [pc, #120]	@ (8002b84 <main+0x138>)
 8002b0a:	481d      	ldr	r0, [pc, #116]	@ (8002b80 <main+0x134>)
 8002b0c:	f00c fd3a 	bl	800f584 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8002b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b14:	2131      	movs	r1, #49	@ 0x31
 8002b16:	481c      	ldr	r0, [pc, #112]	@ (8002b88 <main+0x13c>)
 8002b18:	f018 fca3 	bl	801b462 <memset>
  	memset(flashwrite,'\0',256);
 8002b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b20:	2100      	movs	r1, #0
 8002b22:	481a      	ldr	r0, [pc, #104]	@ (8002b8c <main+0x140>)
 8002b24:	f018 fc9d 	bl	801b462 <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002b28:	2232      	movs	r2, #50	@ 0x32
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4818      	ldr	r0, [pc, #96]	@ (8002b90 <main+0x144>)
 8002b2e:	f018 fc98 	bl	801b462 <memset>

  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <main+0x148>)
 8002b36:	4918      	ldr	r1, [pc, #96]	@ (8002b98 <main+0x14c>)
 8002b38:	4818      	ldr	r0, [pc, #96]	@ (8002b9c <main+0x150>)
 8002b3a:	f014 fcf8 	bl	801752e <SPIF_Init>



  	getindex();
 8002b3e:	f001 f81b 	bl	8003b78 <getindex>

  	ssd1306_Fill(Black);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f001 f9b6 	bl	8003eb4 <ssd1306_Fill>

  	HAL_Delay(700);
 8002b48:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002b4c:	f7fe fdef 	bl	800172e <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002b50:	f7fe fcc0 	bl	80014d4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002b54:	f7fe fe10 	bl	8001778 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002b58:	f001 fe62 	bl	8004820 <statemachine>
	  ssd1306_UpdateScreen();
 8002b5c:	f001 f9c2 	bl	8003ee4 <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002b60:	bf00      	nop
 8002b62:	e7f7      	b.n	8002b54 <main+0x108>
 8002b64:	200013e4 	.word	0x200013e4
 8002b68:	200004f0 	.word	0x200004f0
 8002b6c:	0801fe04 	.word	0x0801fe04
 8002b70:	20000888 	.word	0x20000888
 8002b74:	2000038c 	.word	0x2000038c
 8002b78:	2000126c 	.word	0x2000126c
 8002b7c:	200012b8 	.word	0x200012b8
 8002b80:	20001350 	.word	0x20001350
 8002b84:	200005e0 	.word	0x200005e0
 8002b88:	2000099c 	.word	0x2000099c
 8002b8c:	2000089c 	.word	0x2000089c
 8002b90:	20000ac0 	.word	0x20000ac0
 8002b94:	48000400 	.word	0x48000400
 8002b98:	20000d3c 	.word	0x20000d3c
 8002b9c:	20000868 	.word	0x20000868

08002ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b09a      	sub	sp, #104	@ 0x68
 8002ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ba6:	f107 0320 	add.w	r3, r7, #32
 8002baa:	2248      	movs	r2, #72	@ 0x48
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f018 fc57 	bl	801b462 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	611a      	str	r2, [r3, #16]
 8002bc2:	615a      	str	r2, [r3, #20]
 8002bc4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc6:	4b27      	ldr	r3, [pc, #156]	@ (8002c64 <SystemClock_Config+0xc4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bce:	4a25      	ldr	r2, [pc, #148]	@ (8002c64 <SystemClock_Config+0xc4>)
 8002bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b23      	ldr	r3, [pc, #140]	@ (8002c64 <SystemClock_Config+0xc4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002be2:	2303      	movs	r3, #3
 8002be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bf2:	2340      	movs	r3, #64	@ 0x40
 8002bf4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002c02:	2308      	movs	r3, #8
 8002c04:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c0c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c10:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c16:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c18:	f107 0320 	add.w	r3, r7, #32
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f009 f909 	bl	800be34 <HAL_RCC_OscConfig>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c28:	f000 f858 	bl	8002cdc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002c2c:	236f      	movs	r3, #111	@ 0x6f
 8002c2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c30:	2303      	movs	r3, #3
 8002c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002c40:	2380      	movs	r3, #128	@ 0x80
 8002c42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f009 fc65 	bl	800c51c <HAL_RCC_ClockConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002c58:	f000 f840 	bl	8002cdc <Error_Handler>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3768      	adds	r7, #104	@ 0x68
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	58000400 	.word	0x58000400

08002c68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b094      	sub	sp, #80	@ 0x50
 8002c6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2250      	movs	r2, #80	@ 0x50
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f018 fbf4 	bl	801b462 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002c7a:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002c7e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002c80:	2306      	movs	r3, #6
 8002c82:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002c84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c88:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002c90:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c94:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002c96:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002c9a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002c9c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002ca2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002ca8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002cac:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f00a f86c 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002cc4:	f000 f80a 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002cc8:	2105      	movs	r1, #5
 8002cca:	4803      	ldr	r0, [pc, #12]	@ (8002cd8 <PeriphCommonClock_Config+0x70>)
 8002ccc:	f7ff fe22 	bl	8002914 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8002cd0:	bf00      	nop
 8002cd2:	3750      	adds	r7, #80	@ 0x50
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	58001400 	.word	0x58001400

08002cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <Error_Handler+0x8>

08002ce8 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fd fa95 	bl	8000220 <strlen>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d801      	bhi.n	8002d00 <gps_checksum+0x18>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e038      	b.n	8002d72 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fd fa8d 	bl	8000220 <strlen>
 8002d06:	4603      	mov	r3, r0
 8002d08:	3b04      	subs	r3, #4
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fa84 	bl	8000220 <strlen>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	3b03      	subs	r3, #3
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	e00a      	b.n	8002d44 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4053      	eors	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	3301      	adds	r3, #1
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fd fa6b 	bl	8000220 <strlen>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	1f5a      	subs	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8ec      	bhi.n	8002d2e <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8002d54:	f107 0308 	add.w	r3, r7, #8
 8002d58:	2210      	movs	r2, #16
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f017 fbb1 	bl	801a4c4 <strtol>
 8002d62:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d101      	bne.n	8002d70 <gps_checksum+0x88>
        return 1;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002d70:	2300      	movs	r3, #0
    }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b0b7      	sub	sp, #220	@ 0xdc
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	2264      	movs	r2, #100	@ 0x64
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f018 fb64 	bl	801b462 <memset>
    char *marker = strtok(inputString, ",");
 8002d9a:	49c2      	ldr	r1, [pc, #776]	@ (80030a4 <nmea_GPGGA+0x328>)
 8002d9c:	6838      	ldr	r0, [r7, #0]
 8002d9e:	f018 fb7b 	bl	801b498 <strtok>
 8002da2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002da6:	e027      	b.n	8002df8 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002da8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002dac:	f7fd fa38 	bl	8000220 <strlen>
 8002db0:	4603      	mov	r3, r0
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8002db8:	1c63      	adds	r3, r4, #1
 8002dba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f016 fbd8 	bl	8019574 <malloc>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	00a3      	lsls	r3, r4, #2
 8002dca:	33d8      	adds	r3, #216	@ 0xd8
 8002dcc:	443b      	add	r3, r7
 8002dce:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8002dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	33d8      	adds	r3, #216	@ 0xd8
 8002ddc:	443b      	add	r3, r7
 8002dde:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002de2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f018 fc4f 	bl	801b68a <strcpy>
        marker = strtok(NULL, ",");
 8002dec:	49ad      	ldr	r1, [pc, #692]	@ (80030a4 <nmea_GPGGA+0x328>)
 8002dee:	2000      	movs	r0, #0
 8002df0:	f018 fb52 	bl	801b498 <strtok>
 8002df4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002df8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1d3      	bne.n	8002da8 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8002e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	332c      	adds	r3, #44	@ 0x2c
 8002e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f018 fc36 	bl	801b68a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002e1e:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e22:	2b53      	cmp	r3, #83	@ 0x53
 8002e24:	d004      	beq.n	8002e30 <nmea_GPGGA+0xb4>
 8002e26:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e2a:	2b4e      	cmp	r3, #78	@ 0x4e
 8002e2c:	f040 8159 	bne.w	80030e2 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e36:	e010      	b.n	8002e5a <nmea_GPGGA+0xde>
 8002e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e3e:	4413      	add	r3, r2
 8002e40:	7819      	ldrb	r1, [r3, #0]
 8002e42:	f107 021c 	add.w	r2, r7, #28
 8002e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e4a:	4413      	add	r3, r2
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e54:	3301      	adds	r3, #1
 8002e56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	ddea      	ble.n	8002e38 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e68:	e011      	b.n	8002e8e <nmea_GPGGA+0x112>
 8002e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e70:	3302      	adds	r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	7819      	ldrb	r1, [r3, #0]
 8002e76:	f107 0214 	add.w	r2, r7, #20
 8002e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e7e:	4413      	add	r3, r2
 8002e80:	460a      	mov	r2, r1
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	dde9      	ble.n	8002e6a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	220a      	movs	r2, #10
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f017 fb10 	bl	801a4c4 <strtol>
 8002ea4:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f017 fa28 	bl	801a304 <strtof>
 8002eb4:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002eb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec4:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8002ec8:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80030a8 <nmea_GPGGA+0x32c>
 8002ecc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	ee17 0a90 	vmov	r0, s15
 8002ed8:	f7fd fb0e 	bl	80004f8 <__aeabi_f2d>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eea:	e010      	b.n	8002f0e <nmea_GPGGA+0x192>
 8002eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ef2:	4413      	add	r3, r2
 8002ef4:	7819      	ldrb	r1, [r3, #0]
 8002ef6:	f107 0210 	add.w	r2, r7, #16
 8002efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efe:	4413      	add	r3, r2
 8002f00:	460a      	mov	r2, r1
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	ddea      	ble.n	8002eec <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f1c:	e011      	b.n	8002f42 <nmea_GPGGA+0x1c6>
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f24:	3303      	adds	r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	7819      	ldrb	r1, [r3, #0]
 8002f2a:	f107 0208 	add.w	r2, r7, #8
 8002f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f32:	4413      	add	r3, r2
 8002f34:	460a      	mov	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	dde9      	ble.n	8002f1e <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002f4a:	f107 0310 	add.w	r3, r7, #16
 8002f4e:	220a      	movs	r2, #10
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f017 fab6 	bl	801a4c4 <strtol>
 8002f58:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f017 f9ce 	bl	801a304 <strtof>
 8002f68:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f70:	ee07 3a90 	vmov	s15, r3
 8002f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f78:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002f7c:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80030a8 <nmea_GPGGA+0x32c>
 8002f80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f88:	ee17 0a90 	vmov	r0, s15
 8002f8c:	f7fd fab4 	bl	80004f8 <__aeabi_f2d>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002fa4:	f7fd fd68 	bl	8000a78 <__aeabi_dcmpeq>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d176      	bne.n	800309c <nmea_GPGGA+0x320>
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002fba:	f7fd fd5d 	bl	8000a78 <__aeabi_dcmpeq>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d16b      	bne.n	800309c <nmea_GPGGA+0x320>
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <nmea_GPGGA+0x330>)
 8002fca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002fce:	f7fd fd5d 	bl	8000a8c <__aeabi_dcmplt>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d061      	beq.n	800309c <nmea_GPGGA+0x320>
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <nmea_GPGGA+0x334>)
 8002fde:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002fe2:	f7fd fd53 	bl	8000a8c <__aeabi_dcmplt>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d057      	beq.n	800309c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002ff2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8002ffc:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003004:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800300e:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f017 f975 	bl	801a304 <strtof>
 800301a:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800301e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003022:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	d102      	bne.n	8003032 <nmea_GPGGA+0x2b6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	e001      	b.n	8003036 <nmea_GPGGA+0x2ba>
 8003032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800303a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303c:	220a      	movs	r2, #10
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f017 fa3f 	bl	801a4c4 <strtol>
 8003046:	4602      	mov	r2, r0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	220a      	movs	r2, #10
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f017 fa36 	bl	801a4c4 <strtol>
 8003058:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 800305c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003060:	2b00      	cmp	r3, #0
 8003062:	bfcc      	ite	gt
 8003064:	2301      	movgt	r3, #1
 8003066:	2300      	movle	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8003070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f017 f945 	bl	801a304 <strtof>
 800307a:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800307e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003082:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308a:	d102      	bne.n	8003092 <nmea_GPGGA+0x316>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	e001      	b.n	8003096 <nmea_GPGGA+0x31a>
 8003092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800309a:	e022      	b.n	80030e2 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030a2:	e016      	b.n	80030d2 <nmea_GPGGA+0x356>
 80030a4:	0801f9bc 	.word	0x0801f9bc
 80030a8:	42700000 	.word	0x42700000
 80030ac:	40568000 	.word	0x40568000
 80030b0:	40668000 	.word	0x40668000
 80030b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	33d8      	adds	r3, #216	@ 0xd8
 80030bc:	443b      	add	r3, r7
 80030be:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f016 fa5e 	bl	8019584 <free>
 80030c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030cc:	3301      	adds	r3, #1
 80030ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80030d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030da:	429a      	cmp	r2, r3
 80030dc:	dbea      	blt.n	80030b4 <nmea_GPGGA+0x338>
            return 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	e019      	b.n	8003116 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030e8:	e00e      	b.n	8003108 <nmea_GPGGA+0x38c>
 80030ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	33d8      	adds	r3, #216	@ 0xd8
 80030f2:	443b      	add	r3, r7
 80030f4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f016 fa43 	bl	8019584 <free>
 80030fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003102:	3301      	adds	r3, #1
 8003104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003108:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800310c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003110:	429a      	cmp	r2, r3
 8003112:	dbea      	blt.n	80030ea <nmea_GPGGA+0x36e>
    return 1;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	37dc      	adds	r7, #220	@ 0xdc
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}
 800311e:	bf00      	nop

08003120 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b0a3      	sub	sp, #140	@ 0x8c
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	2264      	movs	r2, #100	@ 0x64
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f018 f992 	bl	801b462 <memset>
    char *marker = strtok(inputString, ",");
 800313e:	493b      	ldr	r1, [pc, #236]	@ (800322c <nmea_GPGSA+0x10c>)
 8003140:	6838      	ldr	r0, [r7, #0]
 8003142:	f018 f9a9 	bl	801b498 <strtok>
 8003146:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 800314a:	e027      	b.n	800319c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800314c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003150:	f7fd f866 	bl	8000220 <strlen>
 8003154:	4603      	mov	r3, r0
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800315c:	1c63      	adds	r3, r4, #1
 800315e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003162:	4610      	mov	r0, r2
 8003164:	f016 fa06 	bl	8019574 <malloc>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	00a3      	lsls	r3, r4, #2
 800316e:	3388      	adds	r3, #136	@ 0x88
 8003170:	443b      	add	r3, r7
 8003172:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8003176:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800317a:	3b01      	subs	r3, #1
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	3388      	adds	r3, #136	@ 0x88
 8003180:	443b      	add	r3, r7
 8003182:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003186:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800318a:	4618      	mov	r0, r3
 800318c:	f018 fa7d 	bl	801b68a <strcpy>
        marker = strtok(NULL, ",");
 8003190:	4926      	ldr	r1, [pc, #152]	@ (800322c <nmea_GPGSA+0x10c>)
 8003192:	2000      	movs	r0, #0
 8003194:	f018 f980 	bl	801b498 <strtok>
 8003198:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 800319c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1d3      	bne.n	800314c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	220a      	movs	r2, #10
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f017 f98a 	bl	801a4c4 <strtol>
 80031b0:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80031b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	bfcc      	ite	gt
 80031b8:	2301      	movgt	r3, #1
 80031ba:	2300      	movle	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80031c8:	2303      	movs	r3, #3
 80031ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031cc:	e00e      	b.n	80031ec <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 80031ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3388      	adds	r3, #136	@ 0x88
 80031d4:	443b      	add	r3, r7
 80031d6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <nmea_GPGSA+0xc6>
            satelliteCount++;
 80031e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031e2:	3301      	adds	r3, #1
 80031e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80031e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031e8:	3301      	adds	r3, #1
 80031ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ee:	2b0e      	cmp	r3, #14
 80031f0:	dded      	ble.n	80031ce <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 80031f8:	2300      	movs	r3, #0
 80031fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80031fc:	e00b      	b.n	8003216 <nmea_GPGSA+0xf6>
 80031fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	3388      	adds	r3, #136	@ 0x88
 8003204:	443b      	add	r3, r7
 8003206:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800320a:	4618      	mov	r0, r3
 800320c:	f016 f9ba 	bl	8019584 <free>
 8003210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003212:	3301      	adds	r3, #1
 8003214:	677b      	str	r3, [r7, #116]	@ 0x74
 8003216:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003218:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800321c:	429a      	cmp	r2, r3
 800321e:	dbee      	blt.n	80031fe <nmea_GPGSA+0xde>
    return 1;
 8003220:	2301      	movs	r3, #1
}
 8003222:	4618      	mov	r0, r3
 8003224:	378c      	adds	r7, #140	@ 0x8c
 8003226:	46bd      	mov	sp, r7
 8003228:	bd90      	pop	{r4, r7, pc}
 800322a:	bf00      	nop
 800322c:	0801f9bc 	.word	0x0801f9bc

08003230 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b0a1      	sub	sp, #132	@ 0x84
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	2264      	movs	r2, #100	@ 0x64
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f018 f90b 	bl	801b462 <memset>
    char *marker = strtok(inputString, ",");
 800324c:	4930      	ldr	r1, [pc, #192]	@ (8003310 <nmea_GNRMC+0xe0>)
 800324e:	6838      	ldr	r0, [r7, #0]
 8003250:	f018 f922 	bl	801b498 <strtok>
 8003254:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8003256:	e021      	b.n	800329c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003258:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800325a:	f7fc ffe1 	bl	8000220 <strlen>
 800325e:	4603      	mov	r3, r0
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8003264:	1c63      	adds	r3, r4, #1
 8003266:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003268:	4610      	mov	r0, r2
 800326a:	f016 f983 	bl	8019574 <malloc>
 800326e:	4603      	mov	r3, r0
 8003270:	461a      	mov	r2, r3
 8003272:	00a3      	lsls	r3, r4, #2
 8003274:	3380      	adds	r3, #128	@ 0x80
 8003276:	443b      	add	r3, r7
 8003278:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 800327c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800327e:	3b01      	subs	r3, #1
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	3380      	adds	r3, #128	@ 0x80
 8003284:	443b      	add	r3, r7
 8003286:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800328a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800328c:	4618      	mov	r0, r3
 800328e:	f018 f9fc 	bl	801b68a <strcpy>
        marker = strtok(NULL, ",");
 8003292:	491f      	ldr	r1, [pc, #124]	@ (8003310 <nmea_GNRMC+0xe0>)
 8003294:	2000      	movs	r0, #0
 8003296:	f018 f8ff 	bl	801b498 <strtok>
 800329a:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800329c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1da      	bne.n	8003258 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80032a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a4:	2100      	movs	r1, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f017 f82c 	bl	801a304 <strtof>
 80032ac:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 80032b0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80032b2:	f7fd f921 	bl	80004f8 <__aeabi_f2d>
 80032b6:	a314      	add	r3, pc, #80	@ (adr r3, 8003308 <nmea_GNRMC+0xd8>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f7fd fa9e 	bl	80007fc <__aeabi_ddiv>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	f7fd fc66 	bl	8000b98 <__aeabi_d2f>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80032d2:	2300      	movs	r3, #0
 80032d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80032d6:	e00b      	b.n	80032f0 <nmea_GNRMC+0xc0>
 80032d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	3380      	adds	r3, #128	@ 0x80
 80032de:	443b      	add	r3, r7
 80032e0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f016 f94d 	bl	8019584 <free>
 80032ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ec:	3301      	adds	r3, #1
 80032ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80032f0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	dbef      	blt.n	80032d8 <nmea_GNRMC+0xa8>
    return 1;
 80032f8:	2301      	movs	r3, #1
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3784      	adds	r7, #132	@ 0x84
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd90      	pop	{r4, r7, pc}
 8003302:	bf00      	nop
 8003304:	f3af 8000 	nop.w
 8003308:	be76c8b4 	.word	0xbe76c8b4
 800330c:	3fff1a9f 	.word	0x3fff1a9f
 8003310:	0801f9bc 	.word	0x0801f9bc

08003314 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800331e:	223c      	movs	r2, #60	@ 0x3c
 8003320:	2100      	movs	r1, #0
 8003322:	484e      	ldr	r0, [pc, #312]	@ (800345c <nmea_parse+0x148>)
 8003324:	f018 f89d 	bl	801b462 <memset>
    char * token = strtok(buffer, "$");
 8003328:	494d      	ldr	r1, [pc, #308]	@ (8003460 <nmea_parse+0x14c>)
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f018 f8b4 	bl	801b498 <strtok>
 8003330:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8003336:	e01d      	b.n	8003374 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003338:	6978      	ldr	r0, [r7, #20]
 800333a:	f7fc ff71 	bl	8000220 <strlen>
 800333e:	4603      	mov	r3, r0
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	693c      	ldr	r4, [r7, #16]
 8003344:	1c63      	adds	r3, r4, #1
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	4610      	mov	r0, r2
 800334a:	f016 f913 	bl	8019574 <malloc>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	4b42      	ldr	r3, [pc, #264]	@ (800345c <nmea_parse+0x148>)
 8003354:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	3b01      	subs	r3, #1
 800335c:	4a3f      	ldr	r2, [pc, #252]	@ (800345c <nmea_parse+0x148>)
 800335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003362:	6979      	ldr	r1, [r7, #20]
 8003364:	4618      	mov	r0, r3
 8003366:	f018 f990 	bl	801b68a <strcpy>
        token = strtok(NULL, "$");
 800336a:	493d      	ldr	r1, [pc, #244]	@ (8003460 <nmea_parse+0x14c>)
 800336c:	2000      	movs	r0, #0
 800336e:	f018 f893 	bl	801b498 <strtok>
 8003372:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1de      	bne.n	8003338 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e052      	b.n	8003426 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003380:	4a36      	ldr	r2, [pc, #216]	@ (800345c <nmea_parse+0x148>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003388:	4936      	ldr	r1, [pc, #216]	@ (8003464 <nmea_parse+0x150>)
 800338a:	4618      	mov	r0, r3
 800338c:	f018 f8e0 	bl	801b550 <strstr>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d044      	beq.n	8003420 <nmea_parse+0x10c>
 8003396:	4a31      	ldr	r2, [pc, #196]	@ (800345c <nmea_parse+0x148>)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fca2 	bl	8002ce8 <gps_checksum>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d03a      	beq.n	8003420 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80033aa:	4a2c      	ldr	r2, [pc, #176]	@ (800345c <nmea_parse+0x148>)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b2:	492d      	ldr	r1, [pc, #180]	@ (8003468 <nmea_parse+0x154>)
 80033b4:	4618      	mov	r0, r3
 80033b6:	f018 f8cb 	bl	801b550 <strstr>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80033c0:	4a26      	ldr	r2, [pc, #152]	@ (800345c <nmea_parse+0x148>)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ff30 	bl	8003230 <nmea_GNRMC>
 80033d0:	e026      	b.n	8003420 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80033d2:	4a22      	ldr	r2, [pc, #136]	@ (800345c <nmea_parse+0x148>)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033da:	4924      	ldr	r1, [pc, #144]	@ (800346c <nmea_parse+0x158>)
 80033dc:	4618      	mov	r0, r3
 80033de:	f018 f8b7 	bl	801b550 <strstr>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 80033e8:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <nmea_parse+0x148>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff fe94 	bl	8003120 <nmea_GPGSA>
 80033f8:	e012      	b.n	8003420 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80033fa:	4a18      	ldr	r2, [pc, #96]	@ (800345c <nmea_parse+0x148>)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	491b      	ldr	r1, [pc, #108]	@ (8003470 <nmea_parse+0x15c>)
 8003404:	4618      	mov	r0, r3
 8003406:	f018 f8a3 	bl	801b550 <strstr>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8003410:	4a12      	ldr	r2, [pc, #72]	@ (800345c <nmea_parse+0x148>)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff fcae 	bl	8002d7c <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	429a      	cmp	r2, r3
 800342c:	dba8      	blt.n	8003380 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	e009      	b.n	8003448 <nmea_parse+0x134>
 8003434:	4a09      	ldr	r2, [pc, #36]	@ (800345c <nmea_parse+0x148>)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	4618      	mov	r0, r3
 800343e:	f016 f8a1 	bl	8019584 <free>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	429a      	cmp	r2, r3
 800344e:	dbf1      	blt.n	8003434 <nmea_parse+0x120>


}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	bf00      	nop
 800345c:	20000ca8 	.word	0x20000ca8
 8003460:	0801f9c0 	.word	0x0801f9c0
 8003464:	0801f9c4 	.word	0x0801f9c4
 8003468:	0801f9c8 	.word	0x0801f9c8
 800346c:	0801f9d0 	.word	0x0801f9d0
 8003470:	0801f9d8 	.word	0x0801f9d8
 8003474:	00000000 	.word	0x00000000

08003478 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8003478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800347c:	b08a      	sub	sp, #40	@ 0x28
 800347e:	af00      	add	r7, sp, #0
 8003480:	ed87 0b06 	vstr	d0, [r7, #24]
 8003484:	ed87 1b04 	vstr	d1, [r7, #16]
 8003488:	ed87 2b02 	vstr	d2, [r7, #8]
 800348c:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 800349c:	a358      	add	r3, pc, #352	@ (adr r3, 8003600 <distancecalc+0x188>)
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034a6:	f7fd f87f 	bl	80005a8 <__aeabi_dmul>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	ec43 2b17 	vmov	d7, r2, r3
 80034b2:	eeb0 0a47 	vmov.f32	s0, s14
 80034b6:	eef0 0a67 	vmov.f32	s1, s15
 80034ba:	f01a fe27 	bl	801e10c <sinl>
 80034be:	ec55 4b10 	vmov	r4, r5, d0
 80034c2:	a34f      	add	r3, pc, #316	@ (adr r3, 8003600 <distancecalc+0x188>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034cc:	f7fd f86c 	bl	80005a8 <__aeabi_dmul>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	ec43 2b17 	vmov	d7, r2, r3
 80034d8:	eeb0 0a47 	vmov.f32	s0, s14
 80034dc:	eef0 0a67 	vmov.f32	s1, s15
 80034e0:	f01a fe14 	bl	801e10c <sinl>
 80034e4:	ec53 2b10 	vmov	r2, r3, d0
 80034e8:	4620      	mov	r0, r4
 80034ea:	4629      	mov	r1, r5
 80034ec:	f7fd f85c 	bl	80005a8 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4614      	mov	r4, r2
 80034f6:	461d      	mov	r5, r3
 80034f8:	a341      	add	r3, pc, #260	@ (adr r3, 8003600 <distancecalc+0x188>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003502:	f7fd f851 	bl	80005a8 <__aeabi_dmul>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	ec43 2b17 	vmov	d7, r2, r3
 800350e:	eeb0 0a47 	vmov.f32	s0, s14
 8003512:	eef0 0a67 	vmov.f32	s1, s15
 8003516:	f01a fdf7 	bl	801e108 <cosl>
 800351a:	ec59 8b10 	vmov	r8, r9, d0
 800351e:	a338      	add	r3, pc, #224	@ (adr r3, 8003600 <distancecalc+0x188>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003528:	f7fd f83e 	bl	80005a8 <__aeabi_dmul>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	ec43 2b17 	vmov	d7, r2, r3
 8003534:	eeb0 0a47 	vmov.f32	s0, s14
 8003538:	eef0 0a67 	vmov.f32	s1, s15
 800353c:	f01a fde4 	bl	801e108 <cosl>
 8003540:	ec53 2b10 	vmov	r2, r3, d0
 8003544:	4640      	mov	r0, r8
 8003546:	4649      	mov	r1, r9
 8003548:	f7fd f82e 	bl	80005a8 <__aeabi_dmul>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4690      	mov	r8, r2
 8003552:	4699      	mov	r9, r3
 8003554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800355c:	f7fc fe6c 	bl	8000238 <__aeabi_dsub>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	a325      	add	r3, pc, #148	@ (adr r3, 8003600 <distancecalc+0x188>)
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	f7fd f81b 	bl	80005a8 <__aeabi_dmul>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	ec43 2b17 	vmov	d7, r2, r3
 800357a:	eeb0 0a47 	vmov.f32	s0, s14
 800357e:	eef0 0a67 	vmov.f32	s1, s15
 8003582:	f01a fdc1 	bl	801e108 <cosl>
 8003586:	ec53 2b10 	vmov	r2, r3, d0
 800358a:	4640      	mov	r0, r8
 800358c:	4649      	mov	r1, r9
 800358e:	f7fd f80b 	bl	80005a8 <__aeabi_dmul>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4620      	mov	r0, r4
 8003598:	4629      	mov	r1, r5
 800359a:	f7fc fe4f 	bl	800023c <__adddf3>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	ec43 2b17 	vmov	d7, r2, r3
 80035a6:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80035f8 <distancecalc+0x180>
 80035aa:	eeb0 0a47 	vmov.f32	s0, s14
 80035ae:	eef0 0a67 	vmov.f32	s1, s15
 80035b2:	f01a fd4b 	bl	801e04c <fmin>
 80035b6:	eeb0 7a40 	vmov.f32	s14, s0
 80035ba:	eef0 7a60 	vmov.f32	s15, s1
 80035be:	eeb0 0a47 	vmov.f32	s0, s14
 80035c2:	eef0 0a67 	vmov.f32	s1, s15
 80035c6:	f01a fda3 	bl	801e110 <acosl>
 80035ca:	ec51 0b10 	vmov	r0, r1, d0
 80035ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8003608 <distancecalc+0x190>)
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f7fc ffe8 	bl	80005a8 <__aeabi_dmul>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80035e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80035e8:	eeb0 0a47 	vmov.f32	s0, s14
 80035ec:	eef0 0a67 	vmov.f32	s1, s15
 80035f0:	3728      	adds	r7, #40	@ 0x28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035f8:	00000000 	.word	0x00000000
 80035fc:	3ff00000 	.word	0x3ff00000
 8003600:	a2529d39 	.word	0xa2529d39
 8003604:	3f91df46 	.word	0x3f91df46
 8003608:	00000000 	.word	0x00000000
 800360c:	41584dae 	.word	0x41584dae

08003610 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800362e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_APB1_GRP1_EnableClock>:
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800364e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4313      	orrs	r3, r2
 8003656:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800365c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003688:	2300      	movs	r3, #0
 800368a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800368c:	4b2c      	ldr	r3, [pc, #176]	@ (8003740 <MX_RTC_Init+0xcc>)
 800368e:	4a2d      	ldr	r2, [pc, #180]	@ (8003744 <MX_RTC_Init+0xd0>)
 8003690:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003692:	4b2b      	ldr	r3, [pc, #172]	@ (8003740 <MX_RTC_Init+0xcc>)
 8003694:	2200      	movs	r2, #0
 8003696:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003698:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <MX_RTC_Init+0xcc>)
 800369a:	227f      	movs	r2, #127	@ 0x7f
 800369c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800369e:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <MX_RTC_Init+0xcc>)
 80036a0:	f641 6284 	movw	r2, #7812	@ 0x1e84
 80036a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036a6:	4b26      	ldr	r3, [pc, #152]	@ (8003740 <MX_RTC_Init+0xcc>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036ac:	4b24      	ldr	r3, [pc, #144]	@ (8003740 <MX_RTC_Init+0xcc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036b2:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <MX_RTC_Init+0xcc>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036b8:	4b21      	ldr	r3, [pc, #132]	@ (8003740 <MX_RTC_Init+0xcc>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036be:	4820      	ldr	r0, [pc, #128]	@ (8003740 <MX_RTC_Init+0xcc>)
 80036c0:	f009 fdf0 	bl	800d2a4 <HAL_RTC_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80036ca:	f7ff fb07 	bl	8002cdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	2201      	movs	r2, #1
 80036ea:	4619      	mov	r1, r3
 80036ec:	4814      	ldr	r0, [pc, #80]	@ (8003740 <MX_RTC_Init+0xcc>)
 80036ee:	f009 fe89 	bl	800d404 <HAL_RTC_SetTime>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_RTC_Init+0x88>
  {
    Error_Handler();
 80036f8:	f7ff faf0 	bl	8002cdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036fc:	2301      	movs	r3, #1
 80036fe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003700:	2301      	movs	r3, #1
 8003702:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003704:	2301      	movs	r3, #1
 8003706:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003708:	2300      	movs	r3, #0
 800370a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800370c:	463b      	mov	r3, r7
 800370e:	2201      	movs	r2, #1
 8003710:	4619      	mov	r1, r3
 8003712:	480b      	ldr	r0, [pc, #44]	@ (8003740 <MX_RTC_Init+0xcc>)
 8003714:	f009 ff3a 	bl	800d58c <HAL_RTC_SetDate>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800371e:	f7ff fadd 	bl	8002cdc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003722:	2204      	movs	r2, #4
 8003724:	2100      	movs	r1, #0
 8003726:	4806      	ldr	r0, [pc, #24]	@ (8003740 <MX_RTC_Init+0xcc>)
 8003728:	f00a f84e 	bl	800d7c8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003732:	f7ff fad3 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000ce4 	.word	0x20000ce4
 8003744:	40002800 	.word	0x40002800

08003748 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b096      	sub	sp, #88	@ 0x58
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003750:	f107 0308 	add.w	r3, r7, #8
 8003754:	2250      	movs	r2, #80	@ 0x50
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f017 fe82 	bl	801b462 <memset>
  if(rtcHandle->Instance==RTC)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a14      	ldr	r2, [pc, #80]	@ (80037b4 <HAL_RTC_MspInit+0x6c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d121      	bne.n	80037ac <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003768:	f007 ffc0 	bl	800b6ec <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 800376c:	f007 ffbe 	bl	800b6ec <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003770:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003774:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8003776:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800377c:	f107 0308 	add.w	r3, r7, #8
 8003780:	4618      	mov	r0, r3
 8003782:	f009 fb08 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800378c:	f7ff faa6 	bl	8002cdc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003790:	f7ff ff45 	bl	800361e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003794:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003798:	f7ff ff52 	bl	8003640 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800379c:	2200      	movs	r2, #0
 800379e:	2100      	movs	r1, #0
 80037a0:	2003      	movs	r0, #3
 80037a2:	f004 fe1e 	bl	80083e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80037a6:	2003      	movs	r0, #3
 80037a8:	f004 fe35 	bl	8008416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037ac:	bf00      	nop
 80037ae:	3758      	adds	r7, #88	@ 0x58
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40002800 	.word	0x40002800

080037b8 <LL_AHB2_GRP1_EnableClock>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4013      	ands	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037dc:	68fb      	ldr	r3, [r7, #12]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4313      	orrs	r3, r2
 8003800:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003806:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4013      	ands	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003820:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003822:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <MX_SPI1_Init+0x78>)
 8003824:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003826:	4b1a      	ldr	r3, [pc, #104]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003828:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800382c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800382e:	4b18      	ldr	r3, [pc, #96]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003834:	4b16      	ldr	r3, [pc, #88]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003836:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800383a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800383c:	4b14      	ldr	r3, [pc, #80]	@ (8003890 <MX_SPI1_Init+0x74>)
 800383e:	2200      	movs	r2, #0
 8003840:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003842:	4b13      	ldr	r3, [pc, #76]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003844:	2200      	movs	r2, #0
 8003846:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003848:	4b11      	ldr	r3, [pc, #68]	@ (8003890 <MX_SPI1_Init+0x74>)
 800384a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800384e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003850:	4b0f      	ldr	r3, [pc, #60]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003852:	2210      	movs	r2, #16
 8003854:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003858:	2200      	movs	r2, #0
 800385a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800385c:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <MX_SPI1_Init+0x74>)
 800385e:	2200      	movs	r2, #0
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003862:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003864:	2200      	movs	r2, #0
 8003866:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003868:	4b09      	ldr	r3, [pc, #36]	@ (8003890 <MX_SPI1_Init+0x74>)
 800386a:	2207      	movs	r2, #7
 800386c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800386e:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003874:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <MX_SPI1_Init+0x74>)
 8003876:	2208      	movs	r2, #8
 8003878:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800387a:	4805      	ldr	r0, [pc, #20]	@ (8003890 <MX_SPI1_Init+0x74>)
 800387c:	f00a f860 	bl	800d940 <HAL_SPI_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003886:	f7ff fa29 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000d3c 	.word	0x20000d3c
 8003894:	40013000 	.word	0x40013000

08003898 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a0:	f107 030c 	add.w	r3, r7, #12
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a46      	ldr	r2, [pc, #280]	@ (80039d0 <HAL_SPI_MspInit+0x138>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	f040 8085 	bne.w	80039c6 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038bc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80038c0:	f7ff ff93 	bl	80037ea <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c4:	2001      	movs	r0, #1
 80038c6:	f7ff ff77 	bl	80037b8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ca:	2002      	movs	r0, #2
 80038cc:	f7ff ff74 	bl	80037b8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80038d0:	2342      	movs	r3, #66	@ 0x42
 80038d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038e0:	2305      	movs	r3, #5
 80038e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	4619      	mov	r1, r3
 80038ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038ee:	f005 f9ab 	bl	8008c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038f2:	2320      	movs	r3, #32
 80038f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003902:	2305      	movs	r3, #5
 8003904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003906:	f107 030c 	add.w	r3, r7, #12
 800390a:	4619      	mov	r1, r3
 800390c:	4831      	ldr	r0, [pc, #196]	@ (80039d4 <HAL_SPI_MspInit+0x13c>)
 800390e:	f005 f99b 	bl	8008c48 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003912:	4b31      	ldr	r3, [pc, #196]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 8003914:	4a31      	ldr	r2, [pc, #196]	@ (80039dc <HAL_SPI_MspInit+0x144>)
 8003916:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003918:	4b2f      	ldr	r3, [pc, #188]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 800391a:	2206      	movs	r2, #6
 800391c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800391e:	4b2e      	ldr	r3, [pc, #184]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 8003920:	2200      	movs	r2, #0
 8003922:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003924:	4b2c      	ldr	r3, [pc, #176]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 8003926:	2200      	movs	r2, #0
 8003928:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800392a:	4b2b      	ldr	r3, [pc, #172]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 800392c:	2280      	movs	r2, #128	@ 0x80
 800392e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003930:	4b29      	ldr	r3, [pc, #164]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 8003932:	2200      	movs	r2, #0
 8003934:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003936:	4b28      	ldr	r3, [pc, #160]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 8003938:	2200      	movs	r2, #0
 800393a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800393c:	4b26      	ldr	r3, [pc, #152]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 800393e:	2200      	movs	r2, #0
 8003940:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003942:	4b25      	ldr	r3, [pc, #148]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003948:	4823      	ldr	r0, [pc, #140]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 800394a:	f004 fda9 	bl	80084a0 <HAL_DMA_Init>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003954:	f7ff f9c2 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1f      	ldr	r2, [pc, #124]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 800395c:	659a      	str	r2, [r3, #88]	@ 0x58
 800395e:	4a1e      	ldr	r2, [pc, #120]	@ (80039d8 <HAL_SPI_MspInit+0x140>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003964:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 8003966:	4a1f      	ldr	r2, [pc, #124]	@ (80039e4 <HAL_SPI_MspInit+0x14c>)
 8003968:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800396a:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 800396c:	2207      	movs	r2, #7
 800396e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003970:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 8003972:	2210      	movs	r2, #16
 8003974:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003976:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 8003978:	2200      	movs	r2, #0
 800397a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800397c:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 800397e:	2280      	movs	r2, #128	@ 0x80
 8003980:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003982:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 8003984:	2200      	movs	r2, #0
 8003986:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003988:	4b15      	ldr	r3, [pc, #84]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 800398a:	2200      	movs	r2, #0
 800398c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800398e:	4b14      	ldr	r3, [pc, #80]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 8003990:	2200      	movs	r2, #0
 8003992:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003994:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 8003996:	2200      	movs	r2, #0
 8003998:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800399a:	4811      	ldr	r0, [pc, #68]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 800399c:	f004 fd80 	bl	80084a0 <HAL_DMA_Init>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80039a6:	f7ff f999 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a0c      	ldr	r2, [pc, #48]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 80039ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80039b0:	4a0b      	ldr	r2, [pc, #44]	@ (80039e0 <HAL_SPI_MspInit+0x148>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80039b6:	2200      	movs	r2, #0
 80039b8:	2100      	movs	r1, #0
 80039ba:	2022      	movs	r0, #34	@ 0x22
 80039bc:	f004 fd11 	bl	80083e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039c0:	2022      	movs	r0, #34	@ 0x22
 80039c2:	f004 fd28 	bl	8008416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039c6:	bf00      	nop
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40013000 	.word	0x40013000
 80039d4:	48000400 	.word	0x48000400
 80039d8:	20000da0 	.word	0x20000da0
 80039dc:	40020030 	.word	0x40020030
 80039e0:	20000e00 	.word	0x20000e00
 80039e4:	40020044 	.word	0x40020044

080039e8 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 80039e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ec:	ed2d 8b02 	vpush	{d8}
 80039f0:	b0a7      	sub	sp, #156	@ 0x9c
 80039f2:	af16      	add	r7, sp, #88	@ 0x58
 80039f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80039f6:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 80039fa:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 80039fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a00:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a02:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003a0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a0c:	f7fc fd74 	bl	80004f8 <__aeabi_f2d>
 8003a10:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003a14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a16:	f7fc fd6f 	bl	80004f8 <__aeabi_f2d>
 8003a1a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fc fd68 	bl	80004f8 <__aeabi_f2d>
 8003a28:	a332      	add	r3, pc, #200	@ (adr r3, 8003af4 <csvframe+0x10c>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fc fdbb 	bl	80005a8 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	ec43 2b18 	vmov	d8, r2, r3
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fd54 	bl	80004f8 <__aeabi_f2d>
 8003a50:	4682      	mov	sl, r0
 8003a52:	468b      	mov	fp, r1
 8003a54:	6a38      	ldr	r0, [r7, #32]
 8003a56:	f7fc fd4f 	bl	80004f8 <__aeabi_f2d>
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad8 <csvframe+0xf0>)
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	4b1e      	ldr	r3, [pc, #120]	@ (8003adc <csvframe+0xf4>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae0 <csvframe+0xf8>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	607b      	str	r3, [r7, #4]
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae4 <csvframe+0xfc>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	461e      	mov	r6, r3
 8003a72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae8 <csvframe+0x100>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <csvframe+0x104>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8003a7e:	9214      	str	r2, [sp, #80]	@ 0x50
 8003a80:	9613      	str	r6, [sp, #76]	@ 0x4c
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	9212      	str	r2, [sp, #72]	@ 0x48
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	9211      	str	r2, [sp, #68]	@ 0x44
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8003a8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	930c      	str	r3, [sp, #48]	@ 0x30
 8003a96:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003a9a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003a9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003aa2:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003aa6:	ed97 7b04 	vldr	d7, [r7, #16]
 8003aaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003aae:	ed97 7b06 	vldr	d7, [r7, #24]
 8003ab2:	ed8d 7b00 	vstr	d7, [sp]
 8003ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8003af0 <csvframe+0x108>)
 8003ab8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003abc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003abe:	f017 fc39 	bl	801b334 <sniprintf>
 8003ac2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	return framesize;
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3744      	adds	r7, #68	@ 0x44
 8003aca:	46bd      	mov	sp, r7
 8003acc:	ecbd 8b02 	vpop	{d8}
 8003ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad4:	f3af 8000 	nop.w
 8003ad8:	20000012 	.word	0x20000012
 8003adc:	20000011 	.word	0x20000011
 8003ae0:	20000010 	.word	0x20000010
 8003ae4:	20000b85 	.word	0x20000b85
 8003ae8:	20000b86 	.word	0x20000b86
 8003aec:	20000b84 	.word	0x20000b84
 8003af0:	0801f9e0 	.word	0x0801f9e0
 8003af4:	cccccccd 	.word	0xcccccccd
 8003af8:	400ccccc 	.word	0x400ccccc

08003afc <storeindex>:


void storeindex(void){
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b09c      	sub	sp, #112	@ 0x70
 8003b00:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8003b02:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003b06:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003b08:	463b      	mov	r3, r7
 8003b0a:	2264      	movs	r2, #100	@ 0x64
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f017 fca7 	bl	801b462 <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8003b14:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <storeindex+0x6c>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b14      	ldr	r3, [pc, #80]	@ (8003b6c <storeindex+0x70>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	4a13      	ldr	r2, [pc, #76]	@ (8003b70 <storeindex+0x74>)
 8003b24:	2164      	movs	r1, #100	@ 0x64
 8003b26:	f017 fc05 	bl	801b334 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003b2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da00      	bge.n	8003b32 <storeindex+0x36>
 8003b30:	330f      	adds	r3, #15
 8003b32:	111b      	asrs	r3, r3, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fccd 	bl	80004d4 <__aeabi_i2d>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	f7fc ffe1 	bl	8000b08 <__aeabi_d2iz>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4619      	mov	r1, r3
 8003b4a:	480a      	ldr	r0, [pc, #40]	@ (8003b74 <storeindex+0x78>)
 8003b4c:	f013 fd3b 	bl	80175c6 <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003b50:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003b52:	463a      	mov	r2, r7
 8003b54:	2300      	movs	r3, #0
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2364      	movs	r3, #100	@ 0x64
 8003b5a:	4806      	ldr	r0, [pc, #24]	@ (8003b74 <storeindex+0x78>)
 8003b5c:	f013 fdb6 	bl	80176cc <SPIF_WritePage>

}
 8003b60:	bf00      	nop
 8003b62:	3768      	adds	r7, #104	@ 0x68
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000a9c 	.word	0x20000a9c
 8003b6c:	20000aa0 	.word	0x20000aa0
 8003b70:	0801fa34 	.word	0x0801fa34
 8003b74:	20000868 	.word	0x20000868

08003b78 <getindex>:

void getindex(void){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003b7e:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003b82:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	2300      	movs	r3, #0
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2332      	movs	r3, #50	@ 0x32
 8003b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c3c <getindex+0xc4>)
 8003b8e:	482c      	ldr	r0, [pc, #176]	@ (8003c40 <getindex+0xc8>)
 8003b90:	f013 fdba 	bl	8017708 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8003b94:	220a      	movs	r2, #10
 8003b96:	2124      	movs	r1, #36	@ 0x24
 8003b98:	482a      	ldr	r0, [pc, #168]	@ (8003c44 <getindex+0xcc>)
 8003b9a:	f017 fc62 	bl	801b462 <memset>
	memset(numbuf2,'$',10);
 8003b9e:	220a      	movs	r2, #10
 8003ba0:	2124      	movs	r1, #36	@ 0x24
 8003ba2:	4829      	ldr	r0, [pc, #164]	@ (8003c48 <getindex+0xd0>)
 8003ba4:	f017 fc5d 	bl	801b462 <memset>
	int cnt=0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003bac:	4b23      	ldr	r3, [pc, #140]	@ (8003c3c <getindex+0xc4>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	dc3a      	bgt.n	8003c2e <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003bb8:	e00b      	b.n	8003bd2 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003bba:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <getindex+0xc4>)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	7819      	ldrb	r1, [r3, #0]
 8003bc2:	4a20      	ldr	r2, [pc, #128]	@ (8003c44 <getindex+0xcc>)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	460a      	mov	r2, r1
 8003bca:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c3c <getindex+0xc4>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b24      	cmp	r3, #36	@ 0x24
 8003bdc:	d1ed      	bne.n	8003bba <getindex+0x42>
		  }
		  cnt++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3301      	adds	r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003be8:	e00e      	b.n	8003c08 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003bea:	4a14      	ldr	r2, [pc, #80]	@ (8003c3c <getindex+0xc4>)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	7819      	ldrb	r1, [r3, #0]
 8003bf2:	4a15      	ldr	r2, [pc, #84]	@ (8003c48 <getindex+0xd0>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003c08:	4a0c      	ldr	r2, [pc, #48]	@ (8003c3c <getindex+0xc4>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b24      	cmp	r3, #36	@ 0x24
 8003c12:	d1ea      	bne.n	8003bea <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003c14:	480b      	ldr	r0, [pc, #44]	@ (8003c44 <getindex+0xcc>)
 8003c16:	f015 fca9 	bl	801956c <atoi>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c4c <getindex+0xd4>)
 8003c1e:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003c20:	4809      	ldr	r0, [pc, #36]	@ (8003c48 <getindex+0xd0>)
 8003c22:	f015 fca3 	bl	801956c <atoi>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4a09      	ldr	r2, [pc, #36]	@ (8003c50 <getindex+0xd8>)
 8003c2a:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003c2c:	e001      	b.n	8003c32 <getindex+0xba>
		storeindex();
 8003c2e:	f7ff ff65 	bl	8003afc <storeindex>
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000d08 	.word	0x20000d08
 8003c40:	20000868 	.word	0x20000868
 8003c44:	20000aa8 	.word	0x20000aa8
 8003c48:	20000ab4 	.word	0x20000ab4
 8003c4c:	20000a9c 	.word	0x20000a9c
 8003c50:	20000aa0 	.word	0x20000aa0

08003c54 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d5c <writebuffertoflash+0x108>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d11b      	bne.n	8003ca4 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d60 <writebuffertoflash+0x10c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d117      	bne.n	8003ca4 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003c74:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <writebuffertoflash+0x108>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da00      	bge.n	8003c80 <writebuffertoflash+0x2c>
 8003c7e:	330f      	adds	r3, #15
 8003c80:	111b      	asrs	r3, r3, #4
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fc26 	bl	80004d4 <__aeabi_i2d>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f7fc ff3a 	bl	8000b08 <__aeabi_d2iz>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4619      	mov	r1, r3
 8003c98:	4832      	ldr	r0, [pc, #200]	@ (8003d64 <writebuffertoflash+0x110>)
 8003c9a:	f013 fc94 	bl	80175c6 <SPIF_EraseSector>
		sectoreraseen=1;
 8003c9e:	4b30      	ldr	r3, [pc, #192]	@ (8003d60 <writebuffertoflash+0x10c>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003ca4:	4b30      	ldr	r3, [pc, #192]	@ (8003d68 <writebuffertoflash+0x114>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	2bff      	cmp	r3, #255	@ 0xff
 8003cae:	dc11      	bgt.n	8003cd4 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d5c <writebuffertoflash+0x108>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d68 <writebuffertoflash+0x114>)
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	9200      	str	r2, [sp, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4828      	ldr	r0, [pc, #160]	@ (8003d64 <writebuffertoflash+0x110>)
 8003cc2:	f013 fd03 	bl	80176cc <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003cc6:	4b28      	ldr	r3, [pc, #160]	@ (8003d68 <writebuffertoflash+0x114>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	4413      	add	r3, r2
 8003cce:	4a26      	ldr	r2, [pc, #152]	@ (8003d68 <writebuffertoflash+0x114>)
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e03c      	b.n	8003d4e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003cd4:	4b21      	ldr	r3, [pc, #132]	@ (8003d5c <writebuffertoflash+0x108>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4b23      	ldr	r3, [pc, #140]	@ (8003d68 <writebuffertoflash+0x114>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b20      	ldr	r3, [pc, #128]	@ (8003d68 <writebuffertoflash+0x114>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	481d      	ldr	r0, [pc, #116]	@ (8003d64 <writebuffertoflash+0x110>)
 8003cf0:	f013 fcec 	bl	80176cc <SPIF_WritePage>
		HAL_Delay(100);
 8003cf4:	2064      	movs	r0, #100	@ 0x64
 8003cf6:	f7fd fd1a 	bl	800172e <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003cfa:	4b18      	ldr	r3, [pc, #96]	@ (8003d5c <writebuffertoflash+0x108>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <writebuffertoflash+0x114>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	1899      	adds	r1, r3, r2
 8003d10:	4b15      	ldr	r3, [pc, #84]	@ (8003d68 <writebuffertoflash+0x114>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	460a      	mov	r2, r1
 8003d26:	4601      	mov	r1, r0
 8003d28:	480e      	ldr	r0, [pc, #56]	@ (8003d64 <writebuffertoflash+0x110>)
 8003d2a:	f013 fccf 	bl	80176cc <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <writebuffertoflash+0x108>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <writebuffertoflash+0x108>)
 8003d36:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003d38:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <writebuffertoflash+0x10c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <writebuffertoflash+0x114>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	4a07      	ldr	r2, [pc, #28]	@ (8003d68 <writebuffertoflash+0x114>)
 8003d4c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003d4e:	f7ff fed5 	bl	8003afc <storeindex>

}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000aa0 	.word	0x20000aa0
 8003d60:	20000aa4 	.word	0x20000aa4
 8003d64:	20000868 	.word	0x20000868
 8003d68:	20000a9c 	.word	0x20000a9c

08003d6c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af04      	add	r7, sp, #16
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	9302      	str	r3, [sp, #8]
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	1dfb      	adds	r3, r7, #7
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	2301      	movs	r3, #1
 8003d96:	2200      	movs	r2, #0
 8003d98:	2178      	movs	r1, #120	@ 0x78
 8003d9a:	4803      	ldr	r0, [pc, #12]	@ (8003da8 <ssd1306_WriteCommand+0x2c>)
 8003d9c:	f005 faf2 	bl	8009384 <HAL_I2C_Mem_Write>
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000544 	.word	0x20000544

08003dac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af04      	add	r7, sp, #16
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbe:	9202      	str	r2, [sp, #8]
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	2240      	movs	r2, #64	@ 0x40
 8003dca:	2178      	movs	r1, #120	@ 0x78
 8003dcc:	4803      	ldr	r0, [pc, #12]	@ (8003ddc <ssd1306_WriteData+0x30>)
 8003dce:	f005 fad9 	bl	8009384 <HAL_I2C_Mem_Write>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000544 	.word	0x20000544

08003de0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003de4:	f7ff ffc2 	bl	8003d6c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003de8:	2064      	movs	r0, #100	@ 0x64
 8003dea:	f7fd fca0 	bl	800172e <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003dee:	2000      	movs	r0, #0
 8003df0:	f000 fb1a 	bl	8004428 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003df4:	2020      	movs	r0, #32
 8003df6:	f7ff ffc1 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7ff ffbe 	bl	8003d7c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e00:	20b0      	movs	r0, #176	@ 0xb0
 8003e02:	f7ff ffbb 	bl	8003d7c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003e06:	20c8      	movs	r0, #200	@ 0xc8
 8003e08:	f7ff ffb8 	bl	8003d7c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f7ff ffb5 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003e12:	2010      	movs	r0, #16
 8003e14:	f7ff ffb2 	bl	8003d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003e18:	2040      	movs	r0, #64	@ 0x40
 8003e1a:	f7ff ffaf 	bl	8003d7c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003e1e:	20ff      	movs	r0, #255	@ 0xff
 8003e20:	f000 faee 	bl	8004400 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003e24:	20a1      	movs	r0, #161	@ 0xa1
 8003e26:	f7ff ffa9 	bl	8003d7c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003e2a:	20a6      	movs	r0, #166	@ 0xa6
 8003e2c:	f7ff ffa6 	bl	8003d7c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003e30:	20a8      	movs	r0, #168	@ 0xa8
 8003e32:	f7ff ffa3 	bl	8003d7c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003e36:	203f      	movs	r0, #63	@ 0x3f
 8003e38:	f7ff ffa0 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e3c:	20a4      	movs	r0, #164	@ 0xa4
 8003e3e:	f7ff ff9d 	bl	8003d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003e42:	20d3      	movs	r0, #211	@ 0xd3
 8003e44:	f7ff ff9a 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f7ff ff97 	bl	8003d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e4e:	20d5      	movs	r0, #213	@ 0xd5
 8003e50:	f7ff ff94 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003e54:	20f0      	movs	r0, #240	@ 0xf0
 8003e56:	f7ff ff91 	bl	8003d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003e5a:	20d9      	movs	r0, #217	@ 0xd9
 8003e5c:	f7ff ff8e 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003e60:	2022      	movs	r0, #34	@ 0x22
 8003e62:	f7ff ff8b 	bl	8003d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003e66:	20da      	movs	r0, #218	@ 0xda
 8003e68:	f7ff ff88 	bl	8003d7c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003e6c:	2012      	movs	r0, #18
 8003e6e:	f7ff ff85 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003e72:	20db      	movs	r0, #219	@ 0xdb
 8003e74:	f7ff ff82 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003e78:	2020      	movs	r0, #32
 8003e7a:	f7ff ff7f 	bl	8003d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003e7e:	208d      	movs	r0, #141	@ 0x8d
 8003e80:	f7ff ff7c 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003e84:	2014      	movs	r0, #20
 8003e86:	f7ff ff79 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	f000 facc 	bl	8004428 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003e90:	2000      	movs	r0, #0
 8003e92:	f000 f80f 	bl	8003eb4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003e96:	f000 f825 	bl	8003ee4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003e9a:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <ssd1306_Init+0xd0>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	@ (8003eb0 <ssd1306_Init+0xd0>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003ea6:	4b02      	ldr	r3, [pc, #8]	@ (8003eb0 <ssd1306_Init+0xd0>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	711a      	strb	r2, [r3, #4]
}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20001260 	.word	0x20001260

08003eb4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <ssd1306_Fill+0x14>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <ssd1306_Fill+0x16>
 8003ec8:	23ff      	movs	r3, #255	@ 0xff
 8003eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4803      	ldr	r0, [pc, #12]	@ (8003ee0 <ssd1306_Fill+0x2c>)
 8003ed2:	f017 fac6 	bl	801b462 <memset>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000e60 	.word	0x20000e60

08003ee4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003eea:	2300      	movs	r3, #0
 8003eec:	71fb      	strb	r3, [r7, #7]
 8003eee:	e016      	b.n	8003f1e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	3b50      	subs	r3, #80	@ 0x50
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ff40 	bl	8003d7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003efc:	2000      	movs	r0, #0
 8003efe:	f7ff ff3d 	bl	8003d7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003f02:	2010      	movs	r0, #16
 8003f04:	f7ff ff3a 	bl	8003d7c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	01db      	lsls	r3, r3, #7
 8003f0c:	4a08      	ldr	r2, [pc, #32]	@ (8003f30 <ssd1306_UpdateScreen+0x4c>)
 8003f0e:	4413      	add	r3, r2
 8003f10:	2180      	movs	r1, #128	@ 0x80
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ff4a 	bl	8003dac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	71fb      	strb	r3, [r7, #7]
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	2b07      	cmp	r3, #7
 8003f22:	d9e5      	bls.n	8003ef0 <ssd1306_UpdateScreen+0xc>
    }
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000e60 	.word	0x20000e60

08003f34 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	71fb      	strb	r3, [r7, #7]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	71bb      	strb	r3, [r7, #6]
 8003f42:	4613      	mov	r3, r2
 8003f44:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	db3d      	blt.n	8003fca <ssd1306_DrawPixel+0x96>
 8003f4e:	79bb      	ldrb	r3, [r7, #6]
 8003f50:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f52:	d83a      	bhi.n	8003fca <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003f54:	797b      	ldrb	r3, [r7, #5]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d11a      	bne.n	8003f90 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003f5a:	79fa      	ldrb	r2, [r7, #7]
 8003f5c:	79bb      	ldrb	r3, [r7, #6]
 8003f5e:	08db      	lsrs	r3, r3, #3
 8003f60:	b2d8      	uxtb	r0, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	01db      	lsls	r3, r3, #7
 8003f66:	4413      	add	r3, r2
 8003f68:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd8 <ssd1306_DrawPixel+0xa4>)
 8003f6a:	5cd3      	ldrb	r3, [r2, r3]
 8003f6c:	b25a      	sxtb	r2, r3
 8003f6e:	79bb      	ldrb	r3, [r7, #6]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b259      	sxtb	r1, r3
 8003f80:	79fa      	ldrb	r2, [r7, #7]
 8003f82:	4603      	mov	r3, r0
 8003f84:	01db      	lsls	r3, r3, #7
 8003f86:	4413      	add	r3, r2
 8003f88:	b2c9      	uxtb	r1, r1
 8003f8a:	4a13      	ldr	r2, [pc, #76]	@ (8003fd8 <ssd1306_DrawPixel+0xa4>)
 8003f8c:	54d1      	strb	r1, [r2, r3]
 8003f8e:	e01d      	b.n	8003fcc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003f90:	79fa      	ldrb	r2, [r7, #7]
 8003f92:	79bb      	ldrb	r3, [r7, #6]
 8003f94:	08db      	lsrs	r3, r3, #3
 8003f96:	b2d8      	uxtb	r0, r3
 8003f98:	4603      	mov	r3, r0
 8003f9a:	01db      	lsls	r3, r3, #7
 8003f9c:	4413      	add	r3, r2
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd8 <ssd1306_DrawPixel+0xa4>)
 8003fa0:	5cd3      	ldrb	r3, [r2, r3]
 8003fa2:	b25a      	sxtb	r2, r3
 8003fa4:	79bb      	ldrb	r3, [r7, #6]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	b25b      	sxtb	r3, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	b25b      	sxtb	r3, r3
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b259      	sxtb	r1, r3
 8003fba:	79fa      	ldrb	r2, [r7, #7]
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	01db      	lsls	r3, r3, #7
 8003fc0:	4413      	add	r3, r2
 8003fc2:	b2c9      	uxtb	r1, r1
 8003fc4:	4a04      	ldr	r2, [pc, #16]	@ (8003fd8 <ssd1306_DrawPixel+0xa4>)
 8003fc6:	54d1      	strb	r1, [r2, r3]
 8003fc8:	e000      	b.n	8003fcc <ssd1306_DrawPixel+0x98>
        return;
 8003fca:	bf00      	nop
    }
}
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000e60 	.word	0x20000e60

08003fdc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b089      	sub	sp, #36	@ 0x24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	1d38      	adds	r0, r7, #4
 8003fe6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003fea:	461a      	mov	r2, r3
 8003fec:	4623      	mov	r3, r4
 8003fee:	73fb      	strb	r3, [r7, #15]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b1f      	cmp	r3, #31
 8003ff8:	d902      	bls.n	8004000 <ssd1306_WriteChar+0x24>
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	2b7e      	cmp	r3, #126	@ 0x7e
 8003ffe:	d901      	bls.n	8004004 <ssd1306_WriteChar+0x28>
        return 0;
 8004000:	2300      	movs	r3, #0
 8004002:	e06c      	b.n	80040de <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004004:	4b38      	ldr	r3, [pc, #224]	@ (80040e8 <ssd1306_WriteChar+0x10c>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	793b      	ldrb	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	2b80      	cmp	r3, #128	@ 0x80
 8004010:	dc06      	bgt.n	8004020 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004012:	4b35      	ldr	r3, [pc, #212]	@ (80040e8 <ssd1306_WriteChar+0x10c>)
 8004014:	885b      	ldrh	r3, [r3, #2]
 8004016:	461a      	mov	r2, r3
 8004018:	797b      	ldrb	r3, [r7, #5]
 800401a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	dd01      	ble.n	8004024 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004020:	2300      	movs	r3, #0
 8004022:	e05c      	b.n	80040de <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	e04c      	b.n	80040c4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	3b20      	subs	r3, #32
 8004030:	7979      	ldrb	r1, [r7, #5]
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4619      	mov	r1, r3
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	440b      	add	r3, r1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	e034      	b.n	80040b4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d012      	beq.n	8004080 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800405a:	4b23      	ldr	r3, [pc, #140]	@ (80040e8 <ssd1306_WriteChar+0x10c>)
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	4413      	add	r3, r2
 8004066:	b2d8      	uxtb	r0, r3
 8004068:	4b1f      	ldr	r3, [pc, #124]	@ (80040e8 <ssd1306_WriteChar+0x10c>)
 800406a:	885b      	ldrh	r3, [r3, #2]
 800406c:	b2da      	uxtb	r2, r3
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	4413      	add	r3, r2
 8004074:	b2db      	uxtb	r3, r3
 8004076:	7bba      	ldrb	r2, [r7, #14]
 8004078:	4619      	mov	r1, r3
 800407a:	f7ff ff5b 	bl	8003f34 <ssd1306_DrawPixel>
 800407e:	e016      	b.n	80040ae <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004080:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <ssd1306_WriteChar+0x10c>)
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	4413      	add	r3, r2
 800408c:	b2d8      	uxtb	r0, r3
 800408e:	4b16      	ldr	r3, [pc, #88]	@ (80040e8 <ssd1306_WriteChar+0x10c>)
 8004090:	885b      	ldrh	r3, [r3, #2]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4413      	add	r3, r2
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	7bbb      	ldrb	r3, [r7, #14]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	f7ff ff43 	bl	8003f34 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	793b      	ldrb	r3, [r7, #4]
 80040b6:	461a      	mov	r2, r3
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d3c5      	bcc.n	800404a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3301      	adds	r3, #1
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	797b      	ldrb	r3, [r7, #5]
 80040c6:	461a      	mov	r2, r3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d3ad      	bcc.n	800402a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80040ce:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <ssd1306_WriteChar+0x10c>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	793a      	ldrb	r2, [r7, #4]
 80040d4:	4413      	add	r3, r2
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	4b03      	ldr	r3, [pc, #12]	@ (80040e8 <ssd1306_WriteChar+0x10c>)
 80040da:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3724      	adds	r7, #36	@ 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20001260 	.word	0x20001260

080040ec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	1d38      	adds	r0, r7, #4
 80040f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80040fa:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80040fc:	e012      	b.n	8004124 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	7818      	ldrb	r0, [r3, #0]
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	1d3a      	adds	r2, r7, #4
 8004106:	ca06      	ldmia	r2, {r1, r2}
 8004108:	f7ff ff68 	bl	8003fdc <ssd1306_WriteChar>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d002      	beq.n	800411e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	e008      	b.n	8004130 <ssd1306_WriteString+0x44>
        }
        str++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3301      	adds	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e8      	bne.n	80040fe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	781b      	ldrb	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	460a      	mov	r2, r1
 8004142:	71fb      	strb	r3, [r7, #7]
 8004144:	4613      	mov	r3, r2
 8004146:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	b29a      	uxth	r2, r3
 800414c:	4b05      	ldr	r3, [pc, #20]	@ (8004164 <ssd1306_SetCursor+0x2c>)
 800414e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004150:	79bb      	ldrb	r3, [r7, #6]
 8004152:	b29a      	uxth	r2, r3
 8004154:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <ssd1306_SetCursor+0x2c>)
 8004156:	805a      	strh	r2, [r3, #2]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	20001260 	.word	0x20001260

08004168 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b089      	sub	sp, #36	@ 0x24
 800416c:	af00      	add	r7, sp, #0
 800416e:	4604      	mov	r4, r0
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	461a      	mov	r2, r3
 8004176:	4623      	mov	r3, r4
 8004178:	71fb      	strb	r3, [r7, #7]
 800417a:	4603      	mov	r3, r0
 800417c:	71bb      	strb	r3, [r7, #6]
 800417e:	460b      	mov	r3, r1
 8004180:	717b      	strb	r3, [r7, #5]
 8004182:	4613      	mov	r3, r2
 8004184:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8004186:	797a      	ldrb	r2, [r7, #5]
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	bfb8      	it	lt
 8004190:	425b      	neglt	r3, r3
 8004192:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8004194:	793a      	ldrb	r2, [r7, #4]
 8004196:	79bb      	ldrb	r3, [r7, #6]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfb8      	it	lt
 800419e:	425b      	neglt	r3, r3
 80041a0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80041a2:	79fa      	ldrb	r2, [r7, #7]
 80041a4:	797b      	ldrb	r3, [r7, #5]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d201      	bcs.n	80041ae <ssd1306_Line+0x46>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e001      	b.n	80041b2 <ssd1306_Line+0x4a>
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295
 80041b2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80041b4:	79ba      	ldrb	r2, [r7, #6]
 80041b6:	793b      	ldrb	r3, [r7, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d201      	bcs.n	80041c0 <ssd1306_Line+0x58>
 80041bc:	2301      	movs	r3, #1
 80041be:	e001      	b.n	80041c4 <ssd1306_Line+0x5c>
 80041c0:	f04f 33ff 	mov.w	r3, #4294967295
 80041c4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80041ce:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80041d2:	7939      	ldrb	r1, [r7, #4]
 80041d4:	797b      	ldrb	r3, [r7, #5]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff feac 	bl	8003f34 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80041dc:	e024      	b.n	8004228 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80041de:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80041e2:	79b9      	ldrb	r1, [r7, #6]
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fea4 	bl	8003f34 <ssd1306_DrawPixel>
        error2 = error * 2;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	425b      	negs	r3, r3
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	dd08      	ble.n	800420e <ssd1306_Line+0xa6>
            error -= deltaY;
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	4413      	add	r3, r2
 800420c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	429a      	cmp	r2, r3
 8004214:	da08      	bge.n	8004228 <ssd1306_Line+0xc0>
            error += deltaX;
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	4413      	add	r3, r2
 800421c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	79bb      	ldrb	r3, [r7, #6]
 8004224:	4413      	add	r3, r2
 8004226:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004228:	79fa      	ldrb	r2, [r7, #7]
 800422a:	797b      	ldrb	r3, [r7, #5]
 800422c:	429a      	cmp	r2, r3
 800422e:	d1d6      	bne.n	80041de <ssd1306_Line+0x76>
 8004230:	79ba      	ldrb	r2, [r7, #6]
 8004232:	793b      	ldrb	r3, [r7, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	d1d2      	bne.n	80041de <ssd1306_Line+0x76>
        }
    }
    return;
 8004238:	bf00      	nop
}
 800423a:	3724      	adds	r7, #36	@ 0x24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd90      	pop	{r4, r7, pc}

08004240 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b085      	sub	sp, #20
 8004244:	af02      	add	r7, sp, #8
 8004246:	4604      	mov	r4, r0
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	4623      	mov	r3, r4
 8004250:	71fb      	strb	r3, [r7, #7]
 8004252:	4603      	mov	r3, r0
 8004254:	71bb      	strb	r3, [r7, #6]
 8004256:	460b      	mov	r3, r1
 8004258:	717b      	strb	r3, [r7, #5]
 800425a:	4613      	mov	r3, r2
 800425c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800425e:	79bc      	ldrb	r4, [r7, #6]
 8004260:	797a      	ldrb	r2, [r7, #5]
 8004262:	79b9      	ldrb	r1, [r7, #6]
 8004264:	79f8      	ldrb	r0, [r7, #7]
 8004266:	7e3b      	ldrb	r3, [r7, #24]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	4623      	mov	r3, r4
 800426c:	f7ff ff7c 	bl	8004168 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004270:	793c      	ldrb	r4, [r7, #4]
 8004272:	797a      	ldrb	r2, [r7, #5]
 8004274:	79b9      	ldrb	r1, [r7, #6]
 8004276:	7978      	ldrb	r0, [r7, #5]
 8004278:	7e3b      	ldrb	r3, [r7, #24]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	4623      	mov	r3, r4
 800427e:	f7ff ff73 	bl	8004168 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8004282:	793c      	ldrb	r4, [r7, #4]
 8004284:	79fa      	ldrb	r2, [r7, #7]
 8004286:	7939      	ldrb	r1, [r7, #4]
 8004288:	7978      	ldrb	r0, [r7, #5]
 800428a:	7e3b      	ldrb	r3, [r7, #24]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4623      	mov	r3, r4
 8004290:	f7ff ff6a 	bl	8004168 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8004294:	79bc      	ldrb	r4, [r7, #6]
 8004296:	79fa      	ldrb	r2, [r7, #7]
 8004298:	7939      	ldrb	r1, [r7, #4]
 800429a:	79f8      	ldrb	r0, [r7, #7]
 800429c:	7e3b      	ldrb	r3, [r7, #24]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	4623      	mov	r3, r4
 80042a2:	f7ff ff61 	bl	8004168 <ssd1306_Line>

    return;
 80042a6:	bf00      	nop
}
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd90      	pop	{r4, r7, pc}

080042ae <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80042ae:	b590      	push	{r4, r7, lr}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	4604      	mov	r4, r0
 80042b6:	4608      	mov	r0, r1
 80042b8:	4611      	mov	r1, r2
 80042ba:	461a      	mov	r2, r3
 80042bc:	4623      	mov	r3, r4
 80042be:	71fb      	strb	r3, [r7, #7]
 80042c0:	4603      	mov	r3, r0
 80042c2:	71bb      	strb	r3, [r7, #6]
 80042c4:	460b      	mov	r3, r1
 80042c6:	717b      	strb	r3, [r7, #5]
 80042c8:	4613      	mov	r3, r2
 80042ca:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80042cc:	79fa      	ldrb	r2, [r7, #7]
 80042ce:	797b      	ldrb	r3, [r7, #5]
 80042d0:	4293      	cmp	r3, r2
 80042d2:	bf28      	it	cs
 80042d4:	4613      	movcs	r3, r2
 80042d6:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80042d8:	797a      	ldrb	r2, [r7, #5]
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	4293      	cmp	r3, r2
 80042de:	bf38      	it	cc
 80042e0:	4613      	movcc	r3, r2
 80042e2:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80042e4:	79ba      	ldrb	r2, [r7, #6]
 80042e6:	793b      	ldrb	r3, [r7, #4]
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf28      	it	cs
 80042ec:	4613      	movcs	r3, r2
 80042ee:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80042f0:	793a      	ldrb	r2, [r7, #4]
 80042f2:	79bb      	ldrb	r3, [r7, #6]
 80042f4:	4293      	cmp	r3, r2
 80042f6:	bf38      	it	cc
 80042f8:	4613      	movcc	r3, r2
 80042fa:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80042fc:	7afb      	ldrb	r3, [r7, #11]
 80042fe:	73fb      	strb	r3, [r7, #15]
 8004300:	e017      	b.n	8004332 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004302:	7b7b      	ldrb	r3, [r7, #13]
 8004304:	73bb      	strb	r3, [r7, #14]
 8004306:	e009      	b.n	800431c <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004308:	f897 2020 	ldrb.w	r2, [r7, #32]
 800430c:	7bf9      	ldrb	r1, [r7, #15]
 800430e:	7bbb      	ldrb	r3, [r7, #14]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fe0f 	bl	8003f34 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004316:	7bbb      	ldrb	r3, [r7, #14]
 8004318:	3301      	adds	r3, #1
 800431a:	73bb      	strb	r3, [r7, #14]
 800431c:	7bba      	ldrb	r2, [r7, #14]
 800431e:	7b3b      	ldrb	r3, [r7, #12]
 8004320:	429a      	cmp	r2, r3
 8004322:	d803      	bhi.n	800432c <ssd1306_FillRectangle+0x7e>
 8004324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004328:	2b00      	cmp	r3, #0
 800432a:	daed      	bge.n	8004308 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	3301      	adds	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	7abb      	ldrb	r3, [r7, #10]
 8004336:	429a      	cmp	r2, r3
 8004338:	d803      	bhi.n	8004342 <ssd1306_FillRectangle+0x94>
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b3f      	cmp	r3, #63	@ 0x3f
 800433e:	d9e0      	bls.n	8004302 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004340:	bf00      	nop
 8004342:	bf00      	nop
}
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bd90      	pop	{r4, r7, pc}

0800434a <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	603a      	str	r2, [r7, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	4603      	mov	r3, r0
 8004356:	71fb      	strb	r3, [r7, #7]
 8004358:	460b      	mov	r3, r1
 800435a:	71bb      	strb	r3, [r7, #6]
 800435c:	4613      	mov	r3, r2
 800435e:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004360:	797b      	ldrb	r3, [r7, #5]
 8004362:	3307      	adds	r3, #7
 8004364:	2b00      	cmp	r3, #0
 8004366:	da00      	bge.n	800436a <ssd1306_DrawBitmap+0x20>
 8004368:	3307      	adds	r3, #7
 800436a:	10db      	asrs	r3, r3, #3
 800436c:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004376:	2b00      	cmp	r3, #0
 8004378:	db3e      	blt.n	80043f8 <ssd1306_DrawBitmap+0xae>
 800437a:	79bb      	ldrb	r3, [r7, #6]
 800437c:	2b3f      	cmp	r3, #63	@ 0x3f
 800437e:	d83b      	bhi.n	80043f8 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8004380:	2300      	movs	r3, #0
 8004382:	73bb      	strb	r3, [r7, #14]
 8004384:	e033      	b.n	80043ee <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8004386:	2300      	movs	r3, #0
 8004388:	737b      	strb	r3, [r7, #13]
 800438a:	e026      	b.n	80043da <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800438c:	7b7b      	ldrb	r3, [r7, #13]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
 800439c:	e00d      	b.n	80043ba <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800439e:	7bbb      	ldrb	r3, [r7, #14]
 80043a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	7b7a      	ldrb	r2, [r7, #13]
 80043aa:	08d2      	lsrs	r2, r2, #3
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	4413      	add	r3, r2
 80043b0:	461a      	mov	r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80043ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	da08      	bge.n	80043d4 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80043c2:	79fa      	ldrb	r2, [r7, #7]
 80043c4:	7b7b      	ldrb	r3, [r7, #13]
 80043c6:	4413      	add	r3, r2
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	7f3a      	ldrb	r2, [r7, #28]
 80043cc:	79b9      	ldrb	r1, [r7, #6]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fdb0 	bl	8003f34 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80043d4:	7b7b      	ldrb	r3, [r7, #13]
 80043d6:	3301      	adds	r3, #1
 80043d8:	737b      	strb	r3, [r7, #13]
 80043da:	7b7a      	ldrb	r2, [r7, #13]
 80043dc:	797b      	ldrb	r3, [r7, #5]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d3d4      	bcc.n	800438c <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80043e2:	7bbb      	ldrb	r3, [r7, #14]
 80043e4:	3301      	adds	r3, #1
 80043e6:	73bb      	strb	r3, [r7, #14]
 80043e8:	79bb      	ldrb	r3, [r7, #6]
 80043ea:	3301      	adds	r3, #1
 80043ec:	71bb      	strb	r3, [r7, #6]
 80043ee:	7bba      	ldrb	r2, [r7, #14]
 80043f0:	7e3b      	ldrb	r3, [r7, #24]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d3c7      	bcc.n	8004386 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80043f6:	e000      	b.n	80043fa <ssd1306_DrawBitmap+0xb0>
        return;
 80043f8:	bf00      	nop
}
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800440a:	2381      	movs	r3, #129	@ 0x81
 800440c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fcb3 	bl	8003d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fcaf 	bl	8003d7c <ssd1306_WriteCommand>
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004438:	23af      	movs	r3, #175	@ 0xaf
 800443a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800443c:	4b08      	ldr	r3, [pc, #32]	@ (8004460 <ssd1306_SetDisplayOn+0x38>)
 800443e:	2201      	movs	r2, #1
 8004440:	715a      	strb	r2, [r3, #5]
 8004442:	e004      	b.n	800444e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004444:	23ae      	movs	r3, #174	@ 0xae
 8004446:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004448:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <ssd1306_SetDisplayOn+0x38>)
 800444a:	2200      	movs	r2, #0
 800444c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fc93 	bl	8003d7c <ssd1306_WriteCommand>
}
 8004456:	bf00      	nop
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20001260 	.word	0x20001260
 8004464:	00000000 	.word	0x00000000

08004468 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b087      	sub	sp, #28
 800446c:	af02      	add	r7, sp, #8
 800446e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004472:	60b8      	str	r0, [r7, #8]
 8004474:	6079      	str	r1, [r7, #4]
 8004476:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	330f      	adds	r3, #15
 800447e:	b2d8      	uxtb	r0, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	3301      	adds	r3, #1
 8004486:	b2d9      	uxtb	r1, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	330f      	adds	r3, #15
 800448e:	b2da      	uxtb	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	3305      	adds	r3, #5
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2401      	movs	r4, #1
 800449a:	9400      	str	r4, [sp, #0]
 800449c:	f7ff fe64 	bl	8004168 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	3310      	adds	r3, #16
 80044a6:	b2d8      	uxtb	r0, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	3301      	adds	r3, #1
 80044ae:	b2d9      	uxtb	r1, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3310      	adds	r3, #16
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	3305      	adds	r3, #5
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2401      	movs	r4, #1
 80044c2:	9400      	str	r4, [sp, #0]
 80044c4:	f7ff fe50 	bl	8004168 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	b2d8      	uxtb	r0, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	b2d9      	uxtb	r1, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	330e      	adds	r3, #14
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	3306      	adds	r3, #6
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2401      	movs	r4, #1
 80044e2:	9400      	str	r4, [sp, #0]
 80044e4:	f7ff feac 	bl	8004240 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7fc f805 	bl	80004f8 <__aeabi_f2d>
 80044ee:	a396      	add	r3, pc, #600	@ (adr r3, 8004748 <batterygauge+0x2e0>)
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f7fc fad4 	bl	8000aa0 <__aeabi_dcmple>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d02a      	beq.n	8004554 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	3302      	adds	r3, #2
 8004504:	b2d8      	uxtb	r0, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	3302      	adds	r3, #2
 800450c:	b2d9      	uxtb	r1, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	3303      	adds	r3, #3
 8004514:	b2da      	uxtb	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	3304      	adds	r3, #4
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2401      	movs	r4, #1
 8004520:	9400      	str	r4, [sp, #0]
 8004522:	f7ff fe8d 	bl	8004240 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d113      	bne.n	8004554 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	3302      	adds	r3, #2
 8004532:	b2d8      	uxtb	r0, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	3302      	adds	r3, #2
 800453a:	b2d9      	uxtb	r1, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	3303      	adds	r3, #3
 8004542:	b2da      	uxtb	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	3304      	adds	r3, #4
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2401      	movs	r4, #1
 800454e:	9400      	str	r4, [sp, #0]
 8004550:	f7ff fe76 	bl	8004240 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7fb ffcf 	bl	80004f8 <__aeabi_f2d>
 800455a:	a37b      	add	r3, pc, #492	@ (adr r3, 8004748 <batterygauge+0x2e0>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f7fc fab2 	bl	8000ac8 <__aeabi_dcmpgt>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d035      	beq.n	80045d6 <batterygauge+0x16e>
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7fb ffc4 	bl	80004f8 <__aeabi_f2d>
 8004570:	a377      	add	r3, pc, #476	@ (adr r3, 8004750 <batterygauge+0x2e8>)
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f7fc fa93 	bl	8000aa0 <__aeabi_dcmple>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d02a      	beq.n	80045d6 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	3302      	adds	r3, #2
 8004586:	b2d8      	uxtb	r0, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3302      	adds	r3, #2
 800458e:	b2d9      	uxtb	r1, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	3303      	adds	r3, #3
 8004596:	b2da      	uxtb	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3304      	adds	r3, #4
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2401      	movs	r4, #1
 80045a2:	9400      	str	r4, [sp, #0]
 80045a4:	f7ff fe4c 	bl	8004240 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d113      	bne.n	80045d6 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	3305      	adds	r3, #5
 80045b4:	b2d8      	uxtb	r0, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	3302      	adds	r3, #2
 80045bc:	b2d9      	uxtb	r1, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3306      	adds	r3, #6
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	3304      	adds	r3, #4
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2401      	movs	r4, #1
 80045d0:	9400      	str	r4, [sp, #0]
 80045d2:	f7ff fe35 	bl	8004240 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7fb ff8e 	bl	80004f8 <__aeabi_f2d>
 80045dc:	a35c      	add	r3, pc, #368	@ (adr r3, 8004750 <batterygauge+0x2e8>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fc fa71 	bl	8000ac8 <__aeabi_dcmpgt>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d049      	beq.n	8004680 <batterygauge+0x218>
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7fb ff83 	bl	80004f8 <__aeabi_f2d>
 80045f2:	a359      	add	r3, pc, #356	@ (adr r3, 8004758 <batterygauge+0x2f0>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fc fa52 	bl	8000aa0 <__aeabi_dcmple>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d03e      	beq.n	8004680 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	3302      	adds	r3, #2
 8004608:	b2d8      	uxtb	r0, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	3302      	adds	r3, #2
 8004610:	b2d9      	uxtb	r1, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	3303      	adds	r3, #3
 8004618:	b2da      	uxtb	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	3304      	adds	r3, #4
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2401      	movs	r4, #1
 8004624:	9400      	str	r4, [sp, #0]
 8004626:	f7ff fe0b 	bl	8004240 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	3305      	adds	r3, #5
 8004630:	b2d8      	uxtb	r0, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	3302      	adds	r3, #2
 8004638:	b2d9      	uxtb	r1, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	3306      	adds	r3, #6
 8004640:	b2da      	uxtb	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	3304      	adds	r3, #4
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2401      	movs	r4, #1
 800464c:	9400      	str	r4, [sp, #0]
 800464e:	f7ff fdf7 	bl	8004240 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d113      	bne.n	8004680 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3308      	adds	r3, #8
 800465e:	b2d8      	uxtb	r0, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	3302      	adds	r3, #2
 8004666:	b2d9      	uxtb	r1, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	3309      	adds	r3, #9
 800466e:	b2da      	uxtb	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	3304      	adds	r3, #4
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2401      	movs	r4, #1
 800467a:	9400      	str	r4, [sp, #0]
 800467c:	f7ff fde0 	bl	8004240 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7fb ff39 	bl	80004f8 <__aeabi_f2d>
 8004686:	a334      	add	r3, pc, #208	@ (adr r3, 8004758 <batterygauge+0x2f0>)
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f7fc fa1c 	bl	8000ac8 <__aeabi_dcmpgt>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d100      	bne.n	8004698 <batterygauge+0x230>
	}




}
 8004696:	e052      	b.n	800473e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	3302      	adds	r3, #2
 800469e:	b2d8      	uxtb	r0, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	3302      	adds	r3, #2
 80046a6:	b2d9      	uxtb	r1, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	3303      	adds	r3, #3
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	3304      	adds	r3, #4
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2401      	movs	r4, #1
 80046ba:	9400      	str	r4, [sp, #0]
 80046bc:	f7ff fdc0 	bl	8004240 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3305      	adds	r3, #5
 80046c6:	b2d8      	uxtb	r0, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3302      	adds	r3, #2
 80046ce:	b2d9      	uxtb	r1, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3306      	adds	r3, #6
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3304      	adds	r3, #4
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2401      	movs	r4, #1
 80046e2:	9400      	str	r4, [sp, #0]
 80046e4:	f7ff fdac 	bl	8004240 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	3308      	adds	r3, #8
 80046ee:	b2d8      	uxtb	r0, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3302      	adds	r3, #2
 80046f6:	b2d9      	uxtb	r1, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	3309      	adds	r3, #9
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	3304      	adds	r3, #4
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2401      	movs	r4, #1
 800470a:	9400      	str	r4, [sp, #0]
 800470c:	f7ff fd98 	bl	8004240 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d113      	bne.n	800473e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	330b      	adds	r3, #11
 800471c:	b2d8      	uxtb	r0, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	3302      	adds	r3, #2
 8004724:	b2d9      	uxtb	r1, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	330c      	adds	r3, #12
 800472c:	b2da      	uxtb	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	3304      	adds	r3, #4
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2401      	movs	r4, #1
 8004738:	9400      	str	r4, [sp, #0]
 800473a:	f7ff fd81 	bl	8004240 <ssd1306_DrawRectangle>
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bd90      	pop	{r4, r7, pc}
 8004746:	bf00      	nop
 8004748:	9999999a 	.word	0x9999999a
 800474c:	400d9999 	.word	0x400d9999
 8004750:	33333333 	.word	0x33333333
 8004754:	400f3333 	.word	0x400f3333
 8004758:	66666666 	.word	0x66666666
 800475c:	40106666 	.word	0x40106666

08004760 <percentage>:

void percentage(float percent){
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af02      	add	r7, sp, #8
 8004766:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 20, floor(0.64*percent+32), 36, White);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fb fec4 	bl	80004f8 <__aeabi_f2d>
 8004770:	a329      	add	r3, pc, #164	@ (adr r3, 8004818 <percentage+0xb8>)
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	f7fb ff17 	bl	80005a8 <__aeabi_dmul>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	4b20      	ldr	r3, [pc, #128]	@ (8004808 <percentage+0xa8>)
 8004788:	f7fb fd58 	bl	800023c <__adddf3>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	ec43 2b17 	vmov	d7, r2, r3
 8004794:	eeb0 0a47 	vmov.f32	s0, s14
 8004798:	eef0 0a67 	vmov.f32	s1, s15
 800479c:	f019 fcbc 	bl	801e118 <floor>
 80047a0:	ec53 2b10 	vmov	r2, r3, d0
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	f7fc f9d6 	bl	8000b58 <__aeabi_d2uiz>
 80047ac:	4603      	mov	r3, r0
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	2301      	movs	r3, #1
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2324      	movs	r3, #36	@ 0x24
 80047b6:	2114      	movs	r1, #20
 80047b8:	2020      	movs	r0, #32
 80047ba:	f7ff fd78 	bl	80042ae <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 20, 95, 36, White);
 80047be:	2301      	movs	r3, #1
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	2324      	movs	r3, #36	@ 0x24
 80047c4:	225f      	movs	r2, #95	@ 0x5f
 80047c6:	2114      	movs	r1, #20
 80047c8:	2020      	movs	r0, #32
 80047ca:	f7ff fd39 	bl	8004240 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fb fe92 	bl	80004f8 <__aeabi_f2d>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	e9cd 2300 	strd	r2, r3, [sp]
 80047dc:	4a0b      	ldr	r2, [pc, #44]	@ (800480c <percentage+0xac>)
 80047de:	2114      	movs	r1, #20
 80047e0:	480b      	ldr	r0, [pc, #44]	@ (8004810 <percentage+0xb0>)
 80047e2:	f016 fda7 	bl	801b334 <sniprintf>
	ssd1306_SetCursor(45,24);
 80047e6:	2118      	movs	r1, #24
 80047e8:	202d      	movs	r0, #45	@ 0x2d
 80047ea:	f7ff fca5 	bl	8004138 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 80047ee:	4a09      	ldr	r2, [pc, #36]	@ (8004814 <percentage+0xb4>)
 80047f0:	2301      	movs	r3, #1
 80047f2:	ca06      	ldmia	r2, {r1, r2}
 80047f4:	4806      	ldr	r0, [pc, #24]	@ (8004810 <percentage+0xb0>)
 80047f6:	f7ff fc79 	bl	80040ec <ssd1306_WriteString>


}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	f3af 8000 	nop.w
 8004808:	40400000 	.word	0x40400000
 800480c:	0801fa3c 	.word	0x0801fa3c
 8004810:	20000ac0 	.word	0x20000ac0
 8004814:	20000014 	.word	0x20000014
 8004818:	47ae147b 	.word	0x47ae147b
 800481c:	3fe47ae1 	.word	0x3fe47ae1

08004820 <statemachine>:





void statemachine(void){
 8004820:	b5b0      	push	{r4, r5, r7, lr}
 8004822:	ed2d 8b02 	vpush	{d8}
 8004826:	b08a      	sub	sp, #40	@ 0x28
 8004828:	af04      	add	r7, sp, #16
	switch(state){
 800482a:	4b9b      	ldr	r3, [pc, #620]	@ (8004a98 <statemachine+0x278>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b05      	cmp	r3, #5
 8004830:	f201 83ed 	bhi.w	800600e <statemachine+0x17ee>
 8004834:	a201      	add	r2, pc, #4	@ (adr r2, 800483c <statemachine+0x1c>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004855 	.word	0x08004855
 8004840:	08004b5d 	.word	0x08004b5d
 8004844:	08005101 	.word	0x08005101
 8004848:	080057b1 	.word	0x080057b1
 800484c:	08005a2b 	.word	0x08005a2b
 8004850:	08005f37 	.word	0x08005f37
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8004854:	2000      	movs	r0, #0
 8004856:	f7ff fb2d 	bl	8003eb4 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 800485a:	2120      	movs	r1, #32
 800485c:	2020      	movs	r0, #32
 800485e:	f7ff fc6b 	bl	8004138 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8004862:	498e      	ldr	r1, [pc, #568]	@ (8004a9c <statemachine+0x27c>)
 8004864:	488e      	ldr	r0, [pc, #568]	@ (8004aa0 <statemachine+0x280>)
 8004866:	f7fe fd55 	bl	8003314 <nmea_parse>
				 if(myData.speed>=vitmax){
 800486a:	4b8d      	ldr	r3, [pc, #564]	@ (8004aa0 <statemachine+0x280>)
 800486c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004870:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa4 <statemachine+0x284>)
 8004872:	edd3 7a00 	vldr	s15, [r3]
 8004876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487e:	db03      	blt.n	8004888 <statemachine+0x68>
									 vitmax=myData.speed;
 8004880:	4b87      	ldr	r3, [pc, #540]	@ (8004aa0 <statemachine+0x280>)
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	4a87      	ldr	r2, [pc, #540]	@ (8004aa4 <statemachine+0x284>)
 8004886:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
								 float sec=0;
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 8004894:	4b82      	ldr	r3, [pc, #520]	@ (8004aa0 <statemachine+0x280>)
 8004896:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800489a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a2:	d032      	beq.n	800490a <statemachine+0xea>
									 pace=1000/(60*myData.speed);
 80048a4:	4b7e      	ldr	r3, [pc, #504]	@ (8004aa0 <statemachine+0x280>)
 80048a6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80048aa:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8004aa8 <statemachine+0x288>
 80048ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048b2:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004aac <statemachine+0x28c>
 80048b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ba:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 80048be:	6978      	ldr	r0, [r7, #20]
 80048c0:	f7fb fe1a 	bl	80004f8 <__aeabi_f2d>
 80048c4:	4604      	mov	r4, r0
 80048c6:	460d      	mov	r5, r1
 80048c8:	6978      	ldr	r0, [r7, #20]
 80048ca:	f7fb fe15 	bl	80004f8 <__aeabi_f2d>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	ec43 2b10 	vmov	d0, r2, r3
 80048d6:	f019 fc1f 	bl	801e118 <floor>
 80048da:	ec53 2b10 	vmov	r2, r3, d0
 80048de:	4620      	mov	r0, r4
 80048e0:	4629      	mov	r1, r5
 80048e2:	f7fb fca9 	bl	8000238 <__aeabi_dsub>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4610      	mov	r0, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab0 <statemachine+0x290>)
 80048f4:	f7fb fe58 	bl	80005a8 <__aeabi_dmul>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	f7fc f94a 	bl	8000b98 <__aeabi_d2f>
 8004904:	4603      	mov	r3, r0
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e001      	b.n	800490e <statemachine+0xee>
								 }
								 else {
									 pace=9999;
 800490a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab4 <statemachine+0x294>)
 800490c:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 800490e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab8 <statemachine+0x298>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <statemachine+0xfe>
 8004916:	2b01      	cmp	r3, #1
 8004918:	f000 8081 	beq.w	8004a1e <statemachine+0x1fe>
 800491c:	e0e3      	b.n	8004ae6 <statemachine+0x2c6>


				 case STATE_SUMMARY:

						snprintf((char *)bufferscreen,15, "MaxV=%.1f",vitmax*3.6);
 800491e:	4b61      	ldr	r3, [pc, #388]	@ (8004aa4 <statemachine+0x284>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fb fde8 	bl	80004f8 <__aeabi_f2d>
 8004928:	a359      	add	r3, pc, #356	@ (adr r3, 8004a90 <statemachine+0x270>)
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f7fb fe3b 	bl	80005a8 <__aeabi_dmul>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	e9cd 2300 	strd	r2, r3, [sp]
 800493a:	4a60      	ldr	r2, [pc, #384]	@ (8004abc <statemachine+0x29c>)
 800493c:	210f      	movs	r1, #15
 800493e:	4860      	ldr	r0, [pc, #384]	@ (8004ac0 <statemachine+0x2a0>)
 8004940:	f016 fcf8 	bl	801b334 <sniprintf>
						ssd1306_SetCursor(32, 12);
 8004944:	210c      	movs	r1, #12
 8004946:	2020      	movs	r0, #32
 8004948:	f7ff fbf6 	bl	8004138 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800494c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ac4 <statemachine+0x2a4>)
 800494e:	2301      	movs	r3, #1
 8004950:	ca06      	ldmia	r2, {r1, r2}
 8004952:	485b      	ldr	r0, [pc, #364]	@ (8004ac0 <statemachine+0x2a0>)
 8004954:	f7ff fbca 	bl	80040ec <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8004958:	4b51      	ldr	r3, [pc, #324]	@ (8004aa0 <statemachine+0x280>)
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	4618      	mov	r0, r3
 800495e:	f7fb fdcb 	bl	80004f8 <__aeabi_f2d>
 8004962:	a34b      	add	r3, pc, #300	@ (adr r3, 8004a90 <statemachine+0x270>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fe1e 	bl	80005a8 <__aeabi_dmul>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	e9cd 2300 	strd	r2, r3, [sp]
 8004974:	4a54      	ldr	r2, [pc, #336]	@ (8004ac8 <statemachine+0x2a8>)
 8004976:	210f      	movs	r1, #15
 8004978:	4851      	ldr	r0, [pc, #324]	@ (8004ac0 <statemachine+0x2a0>)
 800497a:	f016 fcdb 	bl	801b334 <sniprintf>
						ssd1306_SetCursor(32, 20);
 800497e:	2114      	movs	r1, #20
 8004980:	2020      	movs	r0, #32
 8004982:	f7ff fbd9 	bl	8004138 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004986:	4a4f      	ldr	r2, [pc, #316]	@ (8004ac4 <statemachine+0x2a4>)
 8004988:	2301      	movs	r3, #1
 800498a:	ca06      	ldmia	r2, {r1, r2}
 800498c:	484c      	ldr	r0, [pc, #304]	@ (8004ac0 <statemachine+0x2a0>)
 800498e:	f7ff fbad 	bl	80040ec <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 8004992:	6978      	ldr	r0, [r7, #20]
 8004994:	f7fb fdb0 	bl	80004f8 <__aeabi_f2d>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	ec43 2b10 	vmov	d0, r2, r3
 80049a0:	f019 fbba 	bl	801e118 <floor>
 80049a4:	eeb0 8a40 	vmov.f32	s16, s0
 80049a8:	eef0 8a60 	vmov.f32	s17, s1
 80049ac:	6938      	ldr	r0, [r7, #16]
 80049ae:	f7fb fda3 	bl	80004f8 <__aeabi_f2d>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	ec43 2b10 	vmov	d0, r2, r3
 80049ba:	f019 fbad 	bl	801e118 <floor>
 80049be:	eeb0 7a40 	vmov.f32	s14, s0
 80049c2:	eef0 7a60 	vmov.f32	s15, s1
 80049c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80049ca:	ed8d 8b00 	vstr	d8, [sp]
 80049ce:	4a3f      	ldr	r2, [pc, #252]	@ (8004acc <statemachine+0x2ac>)
 80049d0:	210f      	movs	r1, #15
 80049d2:	483b      	ldr	r0, [pc, #236]	@ (8004ac0 <statemachine+0x2a0>)
 80049d4:	f016 fcae 	bl	801b334 <sniprintf>
						ssd1306_SetCursor(32, 28);
 80049d8:	211c      	movs	r1, #28
 80049da:	2020      	movs	r0, #32
 80049dc:	f7ff fbac 	bl	8004138 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80049e0:	4a38      	ldr	r2, [pc, #224]	@ (8004ac4 <statemachine+0x2a4>)
 80049e2:	2301      	movs	r3, #1
 80049e4:	ca06      	ldmia	r2, {r1, r2}
 80049e6:	4836      	ldr	r0, [pc, #216]	@ (8004ac0 <statemachine+0x2a0>)
 80049e8:	f7ff fb80 	bl	80040ec <ssd1306_WriteString>



					 if(BTN_B>=1){
 80049ec:	4b38      	ldr	r3, [pc, #224]	@ (8004ad0 <statemachine+0x2b0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dd08      	ble.n	8004a06 <statemachine+0x1e6>
								spdstate++;
 80049f4:	4b30      	ldr	r3, [pc, #192]	@ (8004ab8 <statemachine+0x298>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab8 <statemachine+0x298>)
 80049fe:	701a      	strb	r2, [r3, #0]
								BTN_B=0;
 8004a00:	4b33      	ldr	r3, [pc, #204]	@ (8004ad0 <statemachine+0x2b0>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
					 					 				  	}
					 if(BTN_B_LONG>=1){
 8004a06:	4b33      	ldr	r3, [pc, #204]	@ (8004ad4 <statemachine+0x2b4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	dd3c      	ble.n	8004a88 <statemachine+0x268>
							  vitmax=0;
 8004a0e:	4b25      	ldr	r3, [pc, #148]	@ (8004aa4 <statemachine+0x284>)
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
							BTN_B_LONG=0;
 8004a16:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad4 <statemachine+0x2b4>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
						}



					 break;
 8004a1c:	e034      	b.n	8004a88 <statemachine+0x268>
				 case STATE_GROS:


						ssd1306_SetCursor(32, 12);
 8004a1e:	210c      	movs	r1, #12
 8004a20:	2020      	movs	r0, #32
 8004a22:	f7ff fb89 	bl	8004138 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004a26:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa0 <statemachine+0x280>)
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fb fd64 	bl	80004f8 <__aeabi_f2d>
 8004a30:	a317      	add	r3, pc, #92	@ (adr r3, 8004a90 <statemachine+0x270>)
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f7fb fdb7 	bl	80005a8 <__aeabi_dmul>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	e9cd 2300 	strd	r2, r3, [sp]
 8004a42:	4a25      	ldr	r2, [pc, #148]	@ (8004ad8 <statemachine+0x2b8>)
 8004a44:	210f      	movs	r1, #15
 8004a46:	481e      	ldr	r0, [pc, #120]	@ (8004ac0 <statemachine+0x2a0>)
 8004a48:	f016 fc74 	bl	801b334 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8004a4c:	4a23      	ldr	r2, [pc, #140]	@ (8004adc <statemachine+0x2bc>)
 8004a4e:	2301      	movs	r3, #1
 8004a50:	ca06      	ldmia	r2, {r1, r2}
 8004a52:	481b      	ldr	r0, [pc, #108]	@ (8004ac0 <statemachine+0x2a0>)
 8004a54:	f7ff fb4a 	bl	80040ec <ssd1306_WriteString>
						batterygauge(vbat,35, 34,1);
 8004a58:	4b21      	ldr	r3, [pc, #132]	@ (8004ae0 <statemachine+0x2c0>)
 8004a5a:	edd3 7a00 	vldr	s15, [r3]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	2122      	movs	r1, #34	@ 0x22
 8004a62:	2023      	movs	r0, #35	@ 0x23
 8004a64:	eeb0 0a67 	vmov.f32	s0, s15
 8004a68:	f7ff fcfe 	bl	8004468 <batterygauge>

					 if(BTN_B>=1){
 8004a6c:	4b18      	ldr	r3, [pc, #96]	@ (8004ad0 <statemachine+0x2b0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	dd37      	ble.n	8004ae4 <statemachine+0x2c4>
							spdstate--;
 8004a74:	4b10      	ldr	r3, [pc, #64]	@ (8004ab8 <statemachine+0x298>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab8 <statemachine+0x298>)
 8004a7e:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8004a80:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <statemachine+0x2b0>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8004a86:	e02d      	b.n	8004ae4 <statemachine+0x2c4>
					 break;
 8004a88:	bf00      	nop
 8004a8a:	e02c      	b.n	8004ae6 <statemachine+0x2c6>
 8004a8c:	f3af 8000 	nop.w
 8004a90:	cccccccd 	.word	0xcccccccd
 8004a94:	400ccccc 	.word	0x400ccccc
 8004a98:	200005d4 	.word	0x200005d4
 8004a9c:	20000620 	.word	0x20000620
 8004aa0:	20000820 	.word	0x20000820
 8004aa4:	20000b34 	.word	0x20000b34
 8004aa8:	42700000 	.word	0x42700000
 8004aac:	447a0000 	.word	0x447a0000
 8004ab0:	404e0000 	.word	0x404e0000
 8004ab4:	461c3c00 	.word	0x461c3c00
 8004ab8:	200005d5 	.word	0x200005d5
 8004abc:	0801fa48 	.word	0x0801fa48
 8004ac0:	20000ac0 	.word	0x20000ac0
 8004ac4:	20000014 	.word	0x20000014
 8004ac8:	0801fa54 	.word	0x0801fa54
 8004acc:	0801fa5c 	.word	0x0801fa5c
 8004ad0:	20000864 	.word	0x20000864
 8004ad4:	20000b9c 	.word	0x20000b9c
 8004ad8:	0801fa70 	.word	0x0801fa70
 8004adc:	20000024 	.word	0x20000024
 8004ae0:	20000898 	.word	0x20000898
					 break;
 8004ae4:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8004ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ce4 <statemachine+0x4c4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	dd0b      	ble.n	8004b06 <statemachine+0x2e6>
				 					state++;
 8004aee:	4b7e      	ldr	r3, [pc, #504]	@ (8004ce8 <statemachine+0x4c8>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	3301      	adds	r3, #1
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ce8 <statemachine+0x4c8>)
 8004af8:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8004afa:	4b7a      	ldr	r3, [pc, #488]	@ (8004ce4 <statemachine+0x4c4>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 8004b00:	4b7a      	ldr	r3, [pc, #488]	@ (8004cec <statemachine+0x4cc>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
				  	}
				 	 if(BTN_A_LONG>=1){
 8004b06:	4b7a      	ldr	r3, [pc, #488]	@ (8004cf0 <statemachine+0x4d0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f341 8273 	ble.w	8005ff6 <statemachine+0x17d6>
				 						 				 									state++;
 8004b10:	4b75      	ldr	r3, [pc, #468]	@ (8004ce8 <statemachine+0x4c8>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	3301      	adds	r3, #1
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	4b73      	ldr	r3, [pc, #460]	@ (8004ce8 <statemachine+0x4c8>)
 8004b1a:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8004b1c:	4b72      	ldr	r3, [pc, #456]	@ (8004ce8 <statemachine+0x4c8>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	3301      	adds	r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	4b70      	ldr	r3, [pc, #448]	@ (8004ce8 <statemachine+0x4c8>)
 8004b26:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8004b28:	4b6f      	ldr	r3, [pc, #444]	@ (8004ce8 <statemachine+0x4c8>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	4b6d      	ldr	r3, [pc, #436]	@ (8004ce8 <statemachine+0x4c8>)
 8004b32:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8004b34:	4b6c      	ldr	r3, [pc, #432]	@ (8004ce8 <statemachine+0x4c8>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce8 <statemachine+0x4c8>)
 8004b3e:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8004b40:	4b69      	ldr	r3, [pc, #420]	@ (8004ce8 <statemachine+0x4c8>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	4b67      	ldr	r3, [pc, #412]	@ (8004ce8 <statemachine+0x4c8>)
 8004b4a:	701a      	strb	r2, [r3, #0]

				 						 				 									  			 	BTN_A_LONG=0;
 8004b4c:	4b68      	ldr	r3, [pc, #416]	@ (8004cf0 <statemachine+0x4d0>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
				 						 				 									  			 	BTN_B=0;
 8004b52:	4b66      	ldr	r3, [pc, #408]	@ (8004cec <statemachine+0x4cc>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
				 						 				 									  	}
				  break;
 8004b58:	f001 ba4d 	b.w	8005ff6 <statemachine+0x17d6>

				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7ff f9a9 	bl	8003eb4 <ssd1306_Fill>

					  if(settimeen==0){
 8004b62:	4b64      	ldr	r3, [pc, #400]	@ (8004cf4 <statemachine+0x4d4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d145      	bne.n	8004bf6 <statemachine+0x3d6>

						  if(myData.fix==1){
 8004b6a:	4b63      	ldr	r3, [pc, #396]	@ (8004cf8 <statemachine+0x4d8>)
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d141      	bne.n	8004bf6 <statemachine+0x3d6>
							settimeen=1;
 8004b72:	4b60      	ldr	r3, [pc, #384]	@ (8004cf4 <statemachine+0x4d4>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004b78:	4b5f      	ldr	r3, [pc, #380]	@ (8004cf8 <statemachine+0x4d8>)
 8004b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	0092      	lsls	r2, r2, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8004cf8 <statemachine+0x4d8>)
 8004b90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4b57      	ldr	r3, [pc, #348]	@ (8004cfc <statemachine+0x4dc>)
 8004ba0:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004ba2:	4b55      	ldr	r3, [pc, #340]	@ (8004cf8 <statemachine+0x4d8>)
 8004ba4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	0092      	lsls	r2, r2, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf8 <statemachine+0x4d8>)
 8004bba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8004d00 <statemachine+0x4e0>)
 8004bca:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004bcc:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf8 <statemachine+0x4d8>)
 8004bce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	0092      	lsls	r2, r2, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <statemachine+0x4d8>)
 8004be4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	4413      	add	r3, r2
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4b44      	ldr	r3, [pc, #272]	@ (8004d04 <statemachine+0x4e4>)
 8004bf4:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8004bf6:	4b44      	ldr	r3, [pc, #272]	@ (8004d08 <statemachine+0x4e8>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	f000 8228 	beq.w	8005050 <statemachine+0x830>
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	f301 81fa 	bgt.w	8005ffa <statemachine+0x17da>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <statemachine+0x3f4>
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	f000 8090 	beq.w	8004d30 <statemachine+0x510>
						  				 									 									  	}

					  }


					  break;
 8004c10:	f001 b9f3 	b.w	8005ffa <statemachine+0x17da>
						  ssd1306_SetCursor(32,12);
 8004c14:	210c      	movs	r1, #12
 8004c16:	2020      	movs	r0, #32
 8004c18:	f7ff fa8e 	bl	8004138 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d0c <statemachine+0x4ec>)
 8004c1e:	2301      	movs	r3, #1
 8004c20:	ca06      	ldmia	r2, {r1, r2}
 8004c22:	483b      	ldr	r0, [pc, #236]	@ (8004d10 <statemachine+0x4f0>)
 8004c24:	f7ff fa62 	bl	80040ec <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8004c28:	4b3a      	ldr	r3, [pc, #232]	@ (8004d14 <statemachine+0x4f4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d18 <statemachine+0x4f8>)
 8004c2e:	2132      	movs	r1, #50	@ 0x32
 8004c30:	483a      	ldr	r0, [pc, #232]	@ (8004d1c <statemachine+0x4fc>)
 8004c32:	f016 fb7f 	bl	801b334 <sniprintf>
						  ssd1306_SetCursor(32,22);
 8004c36:	2116      	movs	r1, #22
 8004c38:	2020      	movs	r0, #32
 8004c3a:	f7ff fa7d 	bl	8004138 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004c3e:	4a38      	ldr	r2, [pc, #224]	@ (8004d20 <statemachine+0x500>)
 8004c40:	2301      	movs	r3, #1
 8004c42:	ca06      	ldmia	r2, {r1, r2}
 8004c44:	4835      	ldr	r0, [pc, #212]	@ (8004d1c <statemachine+0x4fc>)
 8004c46:	f7ff fa51 	bl	80040ec <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004c4a:	4b36      	ldr	r3, [pc, #216]	@ (8004d24 <statemachine+0x504>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a36      	ldr	r2, [pc, #216]	@ (8004d28 <statemachine+0x508>)
 8004c50:	2132      	movs	r1, #50	@ 0x32
 8004c52:	4832      	ldr	r0, [pc, #200]	@ (8004d1c <statemachine+0x4fc>)
 8004c54:	f016 fb6e 	bl	801b334 <sniprintf>
						  ssd1306_SetCursor(32,32);
 8004c58:	2120      	movs	r1, #32
 8004c5a:	2020      	movs	r0, #32
 8004c5c:	f7ff fa6c 	bl	8004138 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004c60:	4a2f      	ldr	r2, [pc, #188]	@ (8004d20 <statemachine+0x500>)
 8004c62:	2301      	movs	r3, #1
 8004c64:	ca06      	ldmia	r2, {r1, r2}
 8004c66:	482d      	ldr	r0, [pc, #180]	@ (8004d1c <statemachine+0x4fc>)
 8004c68:	f7ff fa40 	bl	80040ec <ssd1306_WriteString>
						  if(BTN_B>=1){
 8004c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cec <statemachine+0x4cc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	dd0e      	ble.n	8004c92 <statemachine+0x472>
							balisestate++;
 8004c74:	4b24      	ldr	r3, [pc, #144]	@ (8004d08 <statemachine+0x4e8>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	4b22      	ldr	r3, [pc, #136]	@ (8004d08 <statemachine+0x4e8>)
 8004c7e:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8004c80:	4b1a      	ldr	r3, [pc, #104]	@ (8004cec <statemachine+0x4cc>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8004c86:	4b17      	ldr	r3, [pc, #92]	@ (8004ce4 <statemachine+0x4c4>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8004c8c:	4827      	ldr	r0, [pc, #156]	@ (8004d2c <statemachine+0x50c>)
 8004c8e:	f009 ffbf 	bl	800ec10 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8004c92:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <statemachine+0x4c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dd0e      	ble.n	8004cb8 <statemachine+0x498>
						  				  			 	state++;
 8004c9a:	4b13      	ldr	r3, [pc, #76]	@ (8004ce8 <statemachine+0x4c8>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	4b11      	ldr	r3, [pc, #68]	@ (8004ce8 <statemachine+0x4c8>)
 8004ca4:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce4 <statemachine+0x4c4>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004cac:	4b0f      	ldr	r3, [pc, #60]	@ (8004cec <statemachine+0x4cc>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004cb2:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <statemachine+0x4d4>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <statemachine+0x4d0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f340 8219 	ble.w	80050f4 <statemachine+0x8d4>
									  state--;
 8004cc2:	4b09      	ldr	r3, [pc, #36]	@ (8004ce8 <statemachine+0x4c8>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <statemachine+0x4c8>)
 8004ccc:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004cce:	4b08      	ldr	r3, [pc, #32]	@ (8004cf0 <statemachine+0x4d0>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8004cd4:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <statemachine+0x4cc>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004cda:	4b06      	ldr	r3, [pc, #24]	@ (8004cf4 <statemachine+0x4d4>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
						  break;
 8004ce0:	e208      	b.n	80050f4 <statemachine+0x8d4>
 8004ce2:	bf00      	nop
 8004ce4:	20000860 	.word	0x20000860
 8004ce8:	200005d4 	.word	0x200005d4
 8004cec:	20000864 	.word	0x20000864
 8004cf0:	20000ba0 	.word	0x20000ba0
 8004cf4:	20000b88 	.word	0x20000b88
 8004cf8:	20000820 	.word	0x20000820
 8004cfc:	20000b85 	.word	0x20000b85
 8004d00:	20000b86 	.word	0x20000b86
 8004d04:	20000b84 	.word	0x20000b84
 8004d08:	200005d9 	.word	0x200005d9
 8004d0c:	20000014 	.word	0x20000014
 8004d10:	0801fa78 	.word	0x0801fa78
 8004d14:	20000a9c 	.word	0x20000a9c
 8004d18:	0801fa80 	.word	0x0801fa80
 8004d1c:	20000ac0 	.word	0x20000ac0
 8004d20:	2000001c 	.word	0x2000001c
 8004d24:	20000aa0 	.word	0x20000aa0
 8004d28:	0801fa8c 	.word	0x0801fa8c
 8004d2c:	20001304 	.word	0x20001304
						  erasetime=HAL_GetTick();
 8004d30:	f002 f978 	bl	8007024 <HAL_GetTick>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	4bab      	ldr	r3, [pc, #684]	@ (8004fe8 <statemachine+0x7c8>)
 8004d3a:	601a      	str	r2, [r3, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004d3c:	4bab      	ldr	r3, [pc, #684]	@ (8004fec <statemachine+0x7cc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8004d44:	4293      	cmp	r3, r2
 8004d46:	dd05      	ble.n	8004d54 <statemachine+0x534>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8004d48:	48a9      	ldr	r0, [pc, #676]	@ (8004ff0 <statemachine+0x7d0>)
 8004d4a:	f009 ffaf 	bl	800ecac <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8004d4e:	4ba9      	ldr	r3, [pc, #676]	@ (8004ff4 <statemachine+0x7d4>)
 8004d50:	2202      	movs	r2, #2
 8004d52:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8004d54:	4ba8      	ldr	r3, [pc, #672]	@ (8004ff8 <statemachine+0x7d8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	f040 80b0 	bne.w	8004ebe <statemachine+0x69e>
							  oldlat=myData.latitude;
 8004d5e:	4ba7      	ldr	r3, [pc, #668]	@ (8004ffc <statemachine+0x7dc>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	49a6      	ldr	r1, [pc, #664]	@ (8005000 <statemachine+0x7e0>)
 8004d66:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8004d6a:	4ba4      	ldr	r3, [pc, #656]	@ (8004ffc <statemachine+0x7dc>)
 8004d6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d70:	49a4      	ldr	r1, [pc, #656]	@ (8005004 <statemachine+0x7e4>)
 8004d72:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8004d76:	49a4      	ldr	r1, [pc, #656]	@ (8005008 <statemachine+0x7e8>)
 8004d78:	48a0      	ldr	r0, [pc, #640]	@ (8004ffc <statemachine+0x7dc>)
 8004d7a:	f7fe facb 	bl	8003314 <nmea_parse>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004d7e:	4ba0      	ldr	r3, [pc, #640]	@ (8005000 <statemachine+0x7e0>)
 8004d80:	ed93 7b00 	vldr	d7, [r3]
 8004d84:	4b9d      	ldr	r3, [pc, #628]	@ (8004ffc <statemachine+0x7dc>)
 8004d86:	ed93 6b00 	vldr	d6, [r3]
 8004d8a:	4b9e      	ldr	r3, [pc, #632]	@ (8005004 <statemachine+0x7e4>)
 8004d8c:	ed93 5b00 	vldr	d5, [r3]
 8004d90:	4b9a      	ldr	r3, [pc, #616]	@ (8004ffc <statemachine+0x7dc>)
 8004d92:	ed93 4b04 	vldr	d4, [r3, #16]
 8004d96:	eeb0 3a44 	vmov.f32	s6, s8
 8004d9a:	eef0 3a64 	vmov.f32	s7, s9
 8004d9e:	eeb0 2a45 	vmov.f32	s4, s10
 8004da2:	eef0 2a65 	vmov.f32	s5, s11
 8004da6:	eeb0 1a46 	vmov.f32	s2, s12
 8004daa:	eef0 1a66 	vmov.f32	s3, s13
 8004dae:	eeb0 0a47 	vmov.f32	s0, s14
 8004db2:	eef0 0a67 	vmov.f32	s1, s15
 8004db6:	f7fe fb5f 	bl	8003478 <distancecalc>
 8004dba:	ec51 0b10 	vmov	r0, r1, d0
 8004dbe:	a388      	add	r3, pc, #544	@ (adr r3, 8004fe0 <statemachine+0x7c0>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f7fb fe80 	bl	8000ac8 <__aeabi_dcmpgt>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02b      	beq.n	8004e26 <statemachine+0x606>
								  myData.latitude=oldlat;
 8004dce:	4b8c      	ldr	r3, [pc, #560]	@ (8005000 <statemachine+0x7e0>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	4989      	ldr	r1, [pc, #548]	@ (8004ffc <statemachine+0x7dc>)
 8004dd6:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8004dda:	4b8a      	ldr	r3, [pc, #552]	@ (8005004 <statemachine+0x7e4>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	4986      	ldr	r1, [pc, #536]	@ (8004ffc <statemachine+0x7dc>)
 8004de2:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004de6:	4b89      	ldr	r3, [pc, #548]	@ (800500c <statemachine+0x7ec>)
 8004de8:	edd3 7a00 	vldr	s15, [r3]
 8004dec:	4b88      	ldr	r3, [pc, #544]	@ (8005010 <statemachine+0x7f0>)
 8004dee:	ed93 7a00 	vldr	s14, [r3]
 8004df2:	4b82      	ldr	r3, [pc, #520]	@ (8004ffc <statemachine+0x7dc>)
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	4a81      	ldr	r2, [pc, #516]	@ (8004ffc <statemachine+0x7dc>)
 8004df8:	edd2 6a08 	vldr	s13, [r2, #32]
 8004dfc:	eeb0 1a66 	vmov.f32	s2, s13
 8004e00:	461a      	mov	r2, r3
 8004e02:	497e      	ldr	r1, [pc, #504]	@ (8004ffc <statemachine+0x7dc>)
 8004e04:	eef0 0a47 	vmov.f32	s1, s14
 8004e08:	eeb0 0a67 	vmov.f32	s0, s15
 8004e0c:	4881      	ldr	r0, [pc, #516]	@ (8005014 <statemachine+0x7f4>)
 8004e0e:	f7fe fdeb 	bl	80039e8 <csvframe>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4a80      	ldr	r2, [pc, #512]	@ (8005018 <statemachine+0x7f8>)
 8004e16:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004e18:	4b7f      	ldr	r3, [pc, #508]	@ (8005018 <statemachine+0x7f8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	487d      	ldr	r0, [pc, #500]	@ (8005014 <statemachine+0x7f4>)
 8004e20:	f7fe ff18 	bl	8003c54 <writebuffertoflash>
 8004e24:	e048      	b.n	8004eb8 <statemachine+0x698>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004e26:	4b76      	ldr	r3, [pc, #472]	@ (8005000 <statemachine+0x7e0>)
 8004e28:	ed93 7b00 	vldr	d7, [r3]
 8004e2c:	4b73      	ldr	r3, [pc, #460]	@ (8004ffc <statemachine+0x7dc>)
 8004e2e:	ed93 6b00 	vldr	d6, [r3]
 8004e32:	4b74      	ldr	r3, [pc, #464]	@ (8005004 <statemachine+0x7e4>)
 8004e34:	ed93 5b00 	vldr	d5, [r3]
 8004e38:	4b70      	ldr	r3, [pc, #448]	@ (8004ffc <statemachine+0x7dc>)
 8004e3a:	ed93 4b04 	vldr	d4, [r3, #16]
 8004e3e:	eeb0 3a44 	vmov.f32	s6, s8
 8004e42:	eef0 3a64 	vmov.f32	s7, s9
 8004e46:	eeb0 2a45 	vmov.f32	s4, s10
 8004e4a:	eef0 2a65 	vmov.f32	s5, s11
 8004e4e:	eeb0 1a46 	vmov.f32	s2, s12
 8004e52:	eef0 1a66 	vmov.f32	s3, s13
 8004e56:	eeb0 0a47 	vmov.f32	s0, s14
 8004e5a:	eef0 0a67 	vmov.f32	s1, s15
 8004e5e:	f7fe fb0b 	bl	8003478 <distancecalc>
 8004e62:	ec51 0b10 	vmov	r0, r1, d0
 8004e66:	4b6d      	ldr	r3, [pc, #436]	@ (800501c <statemachine+0x7fc>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f7fb f9e6 	bl	800023c <__adddf3>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4969      	ldr	r1, [pc, #420]	@ (800501c <statemachine+0x7fc>)
 8004e76:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004e7a:	4b64      	ldr	r3, [pc, #400]	@ (800500c <statemachine+0x7ec>)
 8004e7c:	edd3 7a00 	vldr	s15, [r3]
 8004e80:	4b63      	ldr	r3, [pc, #396]	@ (8005010 <statemachine+0x7f0>)
 8004e82:	ed93 7a00 	vldr	s14, [r3]
 8004e86:	4b5d      	ldr	r3, [pc, #372]	@ (8004ffc <statemachine+0x7dc>)
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ffc <statemachine+0x7dc>)
 8004e8c:	edd2 6a08 	vldr	s13, [r2, #32]
 8004e90:	eeb0 1a66 	vmov.f32	s2, s13
 8004e94:	461a      	mov	r2, r3
 8004e96:	4959      	ldr	r1, [pc, #356]	@ (8004ffc <statemachine+0x7dc>)
 8004e98:	eef0 0a47 	vmov.f32	s1, s14
 8004e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8004ea0:	485c      	ldr	r0, [pc, #368]	@ (8005014 <statemachine+0x7f4>)
 8004ea2:	f7fe fda1 	bl	80039e8 <csvframe>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4a5b      	ldr	r2, [pc, #364]	@ (8005018 <statemachine+0x7f8>)
 8004eaa:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004eac:	4b5a      	ldr	r3, [pc, #360]	@ (8005018 <statemachine+0x7f8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4858      	ldr	r0, [pc, #352]	@ (8005014 <statemachine+0x7f4>)
 8004eb4:	f7fe fece 	bl	8003c54 <writebuffertoflash>
							  enablewrite=0;
 8004eb8:	4b4f      	ldr	r3, [pc, #316]	@ (8004ff8 <statemachine+0x7d8>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
						  if(doubledonnee==0){
 8004ebe:	4b58      	ldr	r3, [pc, #352]	@ (8005020 <statemachine+0x800>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d111      	bne.n	8004eea <statemachine+0x6ca>
						 	ssd1306_SetCursor(32,12);
 8004ec6:	210c      	movs	r1, #12
 8004ec8:	2020      	movs	r0, #32
 8004eca:	f7ff f935 	bl	8004138 <ssd1306_SetCursor>
						 	snprintf((char *)bufferscreen,50,"p=%d",pagenumber);
 8004ece:	4b47      	ldr	r3, [pc, #284]	@ (8004fec <statemachine+0x7cc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a54      	ldr	r2, [pc, #336]	@ (8005024 <statemachine+0x804>)
 8004ed4:	2132      	movs	r1, #50	@ 0x32
 8004ed6:	4854      	ldr	r0, [pc, #336]	@ (8005028 <statemachine+0x808>)
 8004ed8:	f016 fa2c 	bl	801b334 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004edc:	4a53      	ldr	r2, [pc, #332]	@ (800502c <statemachine+0x80c>)
 8004ede:	2301      	movs	r3, #1
 8004ee0:	ca06      	ldmia	r2, {r1, r2}
 8004ee2:	4851      	ldr	r0, [pc, #324]	@ (8005028 <statemachine+0x808>)
 8004ee4:	f7ff f902 	bl	80040ec <ssd1306_WriteString>
 8004ee8:	e013      	b.n	8004f12 <statemachine+0x6f2>
						 	ssd1306_SetCursor(32,12);
 8004eea:	210c      	movs	r1, #12
 8004eec:	2020      	movs	r0, #32
 8004eee:	f7ff f923 	bl	8004138 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 8004ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800501c <statemachine+0x7fc>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	e9cd 2300 	strd	r2, r3, [sp]
 8004efc:	4a4c      	ldr	r2, [pc, #304]	@ (8005030 <statemachine+0x810>)
 8004efe:	2132      	movs	r1, #50	@ 0x32
 8004f00:	4849      	ldr	r0, [pc, #292]	@ (8005028 <statemachine+0x808>)
 8004f02:	f016 fa17 	bl	801b334 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004f06:	4a49      	ldr	r2, [pc, #292]	@ (800502c <statemachine+0x80c>)
 8004f08:	2301      	movs	r3, #1
 8004f0a:	ca06      	ldmia	r2, {r1, r2}
 8004f0c:	4846      	ldr	r0, [pc, #280]	@ (8005028 <statemachine+0x808>)
 8004f0e:	f7ff f8ed 	bl	80040ec <ssd1306_WriteString>
						 	ssd1306_SetCursor(32,22);
 8004f12:	2116      	movs	r1, #22
 8004f14:	2020      	movs	r0, #32
 8004f16:	f7ff f90f 	bl	8004138 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8004f1a:	4b38      	ldr	r3, [pc, #224]	@ (8004ffc <statemachine+0x7dc>)
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	4a45      	ldr	r2, [pc, #276]	@ (8005034 <statemachine+0x814>)
 8004f20:	2132      	movs	r1, #50	@ 0x32
 8004f22:	4841      	ldr	r0, [pc, #260]	@ (8005028 <statemachine+0x808>)
 8004f24:	f016 fa06 	bl	801b334 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004f28:	4a43      	ldr	r2, [pc, #268]	@ (8005038 <statemachine+0x818>)
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	ca06      	ldmia	r2, {r1, r2}
 8004f2e:	483e      	ldr	r0, [pc, #248]	@ (8005028 <statemachine+0x808>)
 8004f30:	f7ff f8dc 	bl	80040ec <ssd1306_WriteString>
						 	batterygauge(vbat,34, 32,1);
 8004f34:	4b36      	ldr	r3, [pc, #216]	@ (8005010 <statemachine+0x7f0>)
 8004f36:	edd3 7a00 	vldr	s15, [r3]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	2120      	movs	r1, #32
 8004f3e:	2022      	movs	r0, #34	@ 0x22
 8004f40:	eeb0 0a67 	vmov.f32	s0, s15
 8004f44:	f7ff fa90 	bl	8004468 <batterygauge>
						 	ssd1306_SetCursor(55,32);
 8004f48:	2120      	movs	r1, #32
 8004f4a:	2037      	movs	r0, #55	@ 0x37
 8004f4c:	f7ff f8f4 	bl	8004138 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8004f50:	4b2f      	ldr	r3, [pc, #188]	@ (8005010 <statemachine+0x7f0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fb facf 	bl	80004f8 <__aeabi_f2d>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	e9cd 2300 	strd	r2, r3, [sp]
 8004f62:	4a36      	ldr	r2, [pc, #216]	@ (800503c <statemachine+0x81c>)
 8004f64:	2132      	movs	r1, #50	@ 0x32
 8004f66:	4830      	ldr	r0, [pc, #192]	@ (8005028 <statemachine+0x808>)
 8004f68:	f016 f9e4 	bl	801b334 <sniprintf>
						 	if(cptdoubledonnee==3){
 8004f6c:	4b34      	ldr	r3, [pc, #208]	@ (8005040 <statemachine+0x820>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d108      	bne.n	8004f86 <statemachine+0x766>
						 	  		doubledonnee=1-doubledonnee;
 8004f74:	4b2a      	ldr	r3, [pc, #168]	@ (8005020 <statemachine+0x800>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f1c3 0301 	rsb	r3, r3, #1
 8004f7c:	4a28      	ldr	r2, [pc, #160]	@ (8005020 <statemachine+0x800>)
 8004f7e:	6013      	str	r3, [r2, #0]
						 	  		cptdoubledonnee=0;
 8004f80:	4b2f      	ldr	r3, [pc, #188]	@ (8005040 <statemachine+0x820>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
						 	erasetime=HAL_GetTick()-erasetime;
 8004f86:	f002 f84d 	bl	8007024 <HAL_GetTick>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4a16      	ldr	r2, [pc, #88]	@ (8004fe8 <statemachine+0x7c8>)
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b14      	ldr	r3, [pc, #80]	@ (8004fe8 <statemachine+0x7c8>)
 8004f96:	601a      	str	r2, [r3, #0]
						  if(BTN_B>=1){
 8004f98:	4b2a      	ldr	r3, [pc, #168]	@ (8005044 <statemachine+0x824>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dd0e      	ble.n	8004fbe <statemachine+0x79e>
						  						  balisestate--;
 8004fa0:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <statemachine+0x7d4>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	4b12      	ldr	r3, [pc, #72]	@ (8004ff4 <statemachine+0x7d4>)
 8004faa:	701a      	strb	r2, [r3, #0]
						  						  BTN_B=0;
 8004fac:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <statemachine+0x824>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 8004fb2:	4b25      	ldr	r3, [pc, #148]	@ (8005048 <statemachine+0x828>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 8004fb8:	480d      	ldr	r0, [pc, #52]	@ (8004ff0 <statemachine+0x7d0>)
 8004fba:	f009 fe77 	bl	800ecac <HAL_TIM_Base_Stop_IT>
						  if(BTN_B_LONG>=1){
 8004fbe:	4b23      	ldr	r3, [pc, #140]	@ (800504c <statemachine+0x82c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f340 8099 	ble.w	80050fa <statemachine+0x8da>
							distanceparcouru=0;
 8004fc8:	4914      	ldr	r1, [pc, #80]	@ (800501c <statemachine+0x7fc>)
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	e9c1 2300 	strd	r2, r3, [r1]
						  	BTN_B_LONG=0;
 8004fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800504c <statemachine+0x82c>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
						  break;
 8004fdc:	e08d      	b.n	80050fa <statemachine+0x8da>
 8004fde:	bf00      	nop
 8004fe0:	00000000 	.word	0x00000000
 8004fe4:	40616000 	.word	0x40616000
 8004fe8:	20000b50 	.word	0x20000b50
 8004fec:	20000aa0 	.word	0x20000aa0
 8004ff0:	20001304 	.word	0x20001304
 8004ff4:	200005d9 	.word	0x200005d9
 8004ff8:	20000b80 	.word	0x20000b80
 8004ffc:	20000820 	.word	0x20000820
 8005000:	20000b70 	.word	0x20000b70
 8005004:	20000b78 	.word	0x20000b78
 8005008:	20000620 	.word	0x20000620
 800500c:	20000890 	.word	0x20000890
 8005010:	20000898 	.word	0x20000898
 8005014:	2000089c 	.word	0x2000089c
 8005018:	20000b4c 	.word	0x20000b4c
 800501c:	20000b68 	.word	0x20000b68
 8005020:	20000b60 	.word	0x20000b60
 8005024:	0801fa94 	.word	0x0801fa94
 8005028:	20000ac0 	.word	0x20000ac0
 800502c:	2000001c 	.word	0x2000001c
 8005030:	0801fa9c 	.word	0x0801fa9c
 8005034:	0801faa8 	.word	0x0801faa8
 8005038:	20000014 	.word	0x20000014
 800503c:	0801fab0 	.word	0x0801fab0
 8005040:	20000b64 	.word	0x20000b64
 8005044:	20000864 	.word	0x20000864
 8005048:	20000860 	.word	0x20000860
 800504c:	20000b9c 	.word	0x20000b9c
						  ssd1306_SetCursor(32,12);
 8005050:	210c      	movs	r1, #12
 8005052:	2020      	movs	r0, #32
 8005054:	f7ff f870 	bl	8004138 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 8005058:	4a97      	ldr	r2, [pc, #604]	@ (80052b8 <statemachine+0xa98>)
 800505a:	2301      	movs	r3, #1
 800505c:	ca06      	ldmia	r2, {r1, r2}
 800505e:	4897      	ldr	r0, [pc, #604]	@ (80052bc <statemachine+0xa9c>)
 8005060:	f7ff f844 	bl	80040ec <ssd1306_WriteString>
						  ssd1306_SetCursor(32,20);
 8005064:	2114      	movs	r1, #20
 8005066:	2020      	movs	r0, #32
 8005068:	f7ff f866 	bl	8004138 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 800506c:	4a92      	ldr	r2, [pc, #584]	@ (80052b8 <statemachine+0xa98>)
 800506e:	2301      	movs	r3, #1
 8005070:	ca06      	ldmia	r2, {r1, r2}
 8005072:	4893      	ldr	r0, [pc, #588]	@ (80052c0 <statemachine+0xaa0>)
 8005074:	f7ff f83a 	bl	80040ec <ssd1306_WriteString>
						  ssd1306_SetCursor(32,28);
 8005078:	211c      	movs	r1, #28
 800507a:	2020      	movs	r0, #32
 800507c:	f7ff f85c 	bl	8004138 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8005080:	4b90      	ldr	r3, [pc, #576]	@ (80052c4 <statemachine+0xaa4>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b90      	ldr	r3, [pc, #576]	@ (80052c8 <statemachine+0xaa8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	4a8f      	ldr	r2, [pc, #572]	@ (80052cc <statemachine+0xaac>)
 800508e:	2132      	movs	r1, #50	@ 0x32
 8005090:	488f      	ldr	r0, [pc, #572]	@ (80052d0 <statemachine+0xab0>)
 8005092:	f016 f94f 	bl	801b334 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005096:	4a88      	ldr	r2, [pc, #544]	@ (80052b8 <statemachine+0xa98>)
 8005098:	2301      	movs	r3, #1
 800509a:	ca06      	ldmia	r2, {r1, r2}
 800509c:	488c      	ldr	r0, [pc, #560]	@ (80052d0 <statemachine+0xab0>)
 800509e:	f7ff f825 	bl	80040ec <ssd1306_WriteString>
						  if(BTN_A>=1){
 80050a2:	4b8c      	ldr	r3, [pc, #560]	@ (80052d4 <statemachine+0xab4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dd0e      	ble.n	80050c8 <statemachine+0x8a8>
						  				  			 	state++;
 80050aa:	4b8b      	ldr	r3, [pc, #556]	@ (80052d8 <statemachine+0xab8>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	3301      	adds	r3, #1
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	4b89      	ldr	r3, [pc, #548]	@ (80052d8 <statemachine+0xab8>)
 80050b4:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 80050b6:	4b87      	ldr	r3, [pc, #540]	@ (80052d4 <statemachine+0xab4>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 80050bc:	4b87      	ldr	r3, [pc, #540]	@ (80052dc <statemachine+0xabc>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 80050c2:	4b87      	ldr	r3, [pc, #540]	@ (80052e0 <statemachine+0xac0>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 80050c8:	4b86      	ldr	r3, [pc, #536]	@ (80052e4 <statemachine+0xac4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f340 8794 	ble.w	8005ffa <statemachine+0x17da>
						  				 									 									  			 	state--;
 80050d2:	4b81      	ldr	r3, [pc, #516]	@ (80052d8 <statemachine+0xab8>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b7f      	ldr	r3, [pc, #508]	@ (80052d8 <statemachine+0xab8>)
 80050dc:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 80050de:	4b7d      	ldr	r3, [pc, #500]	@ (80052d4 <statemachine+0xab4>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 80050e4:	4b7d      	ldr	r3, [pc, #500]	@ (80052dc <statemachine+0xabc>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 80050ea:	4b7e      	ldr	r3, [pc, #504]	@ (80052e4 <statemachine+0xac4>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
					  break;
 80050f0:	f000 bf83 	b.w	8005ffa <statemachine+0x17da>
						  break;
 80050f4:	bf00      	nop
 80050f6:	f000 bf80 	b.w	8005ffa <statemachine+0x17da>
						  break;
 80050fa:	bf00      	nop
					  break;
 80050fc:	f000 bf7d 	b.w	8005ffa <statemachine+0x17da>

	case STATE_POS:
			  ssd1306_Fill(Black);
 8005100:	2000      	movs	r0, #0
 8005102:	f7fe fed7 	bl	8003eb4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005106:	4978      	ldr	r1, [pc, #480]	@ (80052e8 <statemachine+0xac8>)
 8005108:	4878      	ldr	r0, [pc, #480]	@ (80052ec <statemachine+0xacc>)
 800510a:	f7fe f903 	bl	8003314 <nmea_parse>
			  switch(posstate){
 800510e:	4b78      	ldr	r3, [pc, #480]	@ (80052f0 <statemachine+0xad0>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b05      	cmp	r3, #5
 8005114:	f200 8326 	bhi.w	8005764 <statemachine+0xf44>
 8005118:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <statemachine+0x900>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005139 	.word	0x08005139
 8005124:	080051e3 	.word	0x080051e3
 8005128:	08005319 	.word	0x08005319
 800512c:	080053d7 	.word	0x080053d7
 8005130:	08005495 	.word	0x08005495
 8005134:	080055ed 	.word	0x080055ed

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 12);
 8005138:	210c      	movs	r1, #12
 800513a:	2020      	movs	r0, #32
 800513c:	f7fe fffc 	bl	8004138 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8005140:	4a6c      	ldr	r2, [pc, #432]	@ (80052f4 <statemachine+0xad4>)
 8005142:	210f      	movs	r1, #15
 8005144:	4862      	ldr	r0, [pc, #392]	@ (80052d0 <statemachine+0xab0>)
 8005146:	f016 f8f5 	bl	801b334 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800514a:	4a5b      	ldr	r2, [pc, #364]	@ (80052b8 <statemachine+0xa98>)
 800514c:	2301      	movs	r3, #1
 800514e:	ca06      	ldmia	r2, {r1, r2}
 8005150:	485f      	ldr	r0, [pc, #380]	@ (80052d0 <statemachine+0xab0>)
 8005152:	f7fe ffcb 	bl	80040ec <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005156:	4b65      	ldr	r3, [pc, #404]	@ (80052ec <statemachine+0xacc>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	e9cd 2300 	strd	r2, r3, [sp]
 8005160:	4a65      	ldr	r2, [pc, #404]	@ (80052f8 <statemachine+0xad8>)
 8005162:	210f      	movs	r1, #15
 8005164:	485a      	ldr	r0, [pc, #360]	@ (80052d0 <statemachine+0xab0>)
 8005166:	f016 f8e5 	bl	801b334 <sniprintf>
						ssd1306_SetCursor(32, 20);
 800516a:	2114      	movs	r1, #20
 800516c:	2020      	movs	r0, #32
 800516e:	f7fe ffe3 	bl	8004138 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005172:	4a51      	ldr	r2, [pc, #324]	@ (80052b8 <statemachine+0xa98>)
 8005174:	2301      	movs	r3, #1
 8005176:	ca06      	ldmia	r2, {r1, r2}
 8005178:	4855      	ldr	r0, [pc, #340]	@ (80052d0 <statemachine+0xab0>)
 800517a:	f7fe ffb7 	bl	80040ec <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 800517e:	4a5f      	ldr	r2, [pc, #380]	@ (80052fc <statemachine+0xadc>)
 8005180:	210f      	movs	r1, #15
 8005182:	4853      	ldr	r0, [pc, #332]	@ (80052d0 <statemachine+0xab0>)
 8005184:	f016 f8d6 	bl	801b334 <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005188:	211c      	movs	r1, #28
 800518a:	2020      	movs	r0, #32
 800518c:	f7fe ffd4 	bl	8004138 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005190:	4a49      	ldr	r2, [pc, #292]	@ (80052b8 <statemachine+0xa98>)
 8005192:	2301      	movs	r3, #1
 8005194:	ca06      	ldmia	r2, {r1, r2}
 8005196:	484e      	ldr	r0, [pc, #312]	@ (80052d0 <statemachine+0xab0>)
 8005198:	f7fe ffa8 	bl	80040ec <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 800519c:	4b53      	ldr	r3, [pc, #332]	@ (80052ec <statemachine+0xacc>)
 800519e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80051a2:	e9cd 2300 	strd	r2, r3, [sp]
 80051a6:	4a54      	ldr	r2, [pc, #336]	@ (80052f8 <statemachine+0xad8>)
 80051a8:	210f      	movs	r1, #15
 80051aa:	4849      	ldr	r0, [pc, #292]	@ (80052d0 <statemachine+0xab0>)
 80051ac:	f016 f8c2 	bl	801b334 <sniprintf>
						ssd1306_SetCursor(32, 36);
 80051b0:	2124      	movs	r1, #36	@ 0x24
 80051b2:	2020      	movs	r0, #32
 80051b4:	f7fe ffc0 	bl	8004138 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80051b8:	4a3f      	ldr	r2, [pc, #252]	@ (80052b8 <statemachine+0xa98>)
 80051ba:	2301      	movs	r3, #1
 80051bc:	ca06      	ldmia	r2, {r1, r2}
 80051be:	4844      	ldr	r0, [pc, #272]	@ (80052d0 <statemachine+0xab0>)
 80051c0:	f7fe ff94 	bl	80040ec <ssd1306_WriteString>
				  if(BTN_B>=1){
 80051c4:	4b45      	ldr	r3, [pc, #276]	@ (80052dc <statemachine+0xabc>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f340 82c0 	ble.w	800574e <statemachine+0xf2e>
					  posstate++;
 80051ce:	4b48      	ldr	r3, [pc, #288]	@ (80052f0 <statemachine+0xad0>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	3301      	adds	r3, #1
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4b46      	ldr	r3, [pc, #280]	@ (80052f0 <statemachine+0xad0>)
 80051d8:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 80051da:	4b40      	ldr	r3, [pc, #256]	@ (80052dc <statemachine+0xabc>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
				  }



				  break;
 80051e0:	e2b5      	b.n	800574e <statemachine+0xf2e>
			  case STATE_INFO:
				  ssd1306_Fill(Black);
 80051e2:	2000      	movs	r0, #0
 80051e4:	f7fe fe66 	bl	8003eb4 <ssd1306_Fill>
				  nmea_parse(&myData, DataBuffer);
 80051e8:	493f      	ldr	r1, [pc, #252]	@ (80052e8 <statemachine+0xac8>)
 80051ea:	4840      	ldr	r0, [pc, #256]	@ (80052ec <statemachine+0xacc>)
 80051ec:	f7fe f892 	bl	8003314 <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 80051f0:	4b3e      	ldr	r3, [pc, #248]	@ (80052ec <statemachine+0xacc>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb f97f 	bl	80004f8 <__aeabi_f2d>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	e9cd 2300 	strd	r2, r3, [sp]
 8005202:	4a3f      	ldr	r2, [pc, #252]	@ (8005300 <statemachine+0xae0>)
 8005204:	210f      	movs	r1, #15
 8005206:	4832      	ldr	r0, [pc, #200]	@ (80052d0 <statemachine+0xab0>)
 8005208:	f016 f894 	bl	801b334 <sniprintf>
				ssd1306_SetCursor(32, 12);
 800520c:	210c      	movs	r1, #12
 800520e:	2020      	movs	r0, #32
 8005210:	f7fe ff92 	bl	8004138 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005214:	4a28      	ldr	r2, [pc, #160]	@ (80052b8 <statemachine+0xa98>)
 8005216:	2301      	movs	r3, #1
 8005218:	ca06      	ldmia	r2, {r1, r2}
 800521a:	482d      	ldr	r0, [pc, #180]	@ (80052d0 <statemachine+0xab0>)
 800521c:	f7fe ff66 	bl	80040ec <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005220:	4b38      	ldr	r3, [pc, #224]	@ (8005304 <statemachine+0xae4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f7fb f967 	bl	80004f8 <__aeabi_f2d>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	e9cd 2300 	strd	r2, r3, [sp]
 8005232:	4a35      	ldr	r2, [pc, #212]	@ (8005308 <statemachine+0xae8>)
 8005234:	2114      	movs	r1, #20
 8005236:	4826      	ldr	r0, [pc, #152]	@ (80052d0 <statemachine+0xab0>)
 8005238:	f016 f87c 	bl	801b334 <sniprintf>
				ssd1306_SetCursor(32, 20);
 800523c:	2114      	movs	r1, #20
 800523e:	2020      	movs	r0, #32
 8005240:	f7fe ff7a 	bl	8004138 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005244:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <statemachine+0xa98>)
 8005246:	2301      	movs	r3, #1
 8005248:	ca06      	ldmia	r2, {r1, r2}
 800524a:	4821      	ldr	r0, [pc, #132]	@ (80052d0 <statemachine+0xab0>)
 800524c:	f7fe ff4e 	bl	80040ec <ssd1306_WriteString>
				ssd1306_SetCursor(32, 28);
 8005250:	211c      	movs	r1, #28
 8005252:	2020      	movs	r0, #32
 8005254:	f7fe ff70 	bl	8004138 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 8005258:	4b2c      	ldr	r3, [pc, #176]	@ (800530c <statemachine+0xaec>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7fb f94b 	bl	80004f8 <__aeabi_f2d>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	e9cd 2300 	strd	r2, r3, [sp]
 800526a:	4a29      	ldr	r2, [pc, #164]	@ (8005310 <statemachine+0xaf0>)
 800526c:	210f      	movs	r1, #15
 800526e:	4818      	ldr	r0, [pc, #96]	@ (80052d0 <statemachine+0xab0>)
 8005270:	f016 f860 	bl	801b334 <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005274:	4a10      	ldr	r2, [pc, #64]	@ (80052b8 <statemachine+0xa98>)
 8005276:	2301      	movs	r3, #1
 8005278:	ca06      	ldmia	r2, {r1, r2}
 800527a:	4815      	ldr	r0, [pc, #84]	@ (80052d0 <statemachine+0xab0>)
 800527c:	f7fe ff36 	bl	80040ec <ssd1306_WriteString>
				 if(BTN_B>=1){
 8005280:	4b16      	ldr	r3, [pc, #88]	@ (80052dc <statemachine+0xabc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	dd08      	ble.n	800529a <statemachine+0xa7a>
								  					  posstate++;
 8005288:	4b19      	ldr	r3, [pc, #100]	@ (80052f0 <statemachine+0xad0>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	b2da      	uxtb	r2, r3
 8005290:	4b17      	ldr	r3, [pc, #92]	@ (80052f0 <statemachine+0xad0>)
 8005292:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 8005294:	4b11      	ldr	r3, [pc, #68]	@ (80052dc <statemachine+0xabc>)
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 800529a:	4b1e      	ldr	r3, [pc, #120]	@ (8005314 <statemachine+0xaf4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f340 8257 	ble.w	8005752 <statemachine+0xf32>
													  posstate--;
 80052a4:	4b12      	ldr	r3, [pc, #72]	@ (80052f0 <statemachine+0xad0>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	4b10      	ldr	r3, [pc, #64]	@ (80052f0 <statemachine+0xad0>)
 80052ae:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 80052b0:	4b18      	ldr	r3, [pc, #96]	@ (8005314 <statemachine+0xaf4>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
												}

				  break;
 80052b6:	e24c      	b.n	8005752 <statemachine+0xf32>
 80052b8:	20000014 	.word	0x20000014
 80052bc:	0801fab8 	.word	0x0801fab8
 80052c0:	0801fac0 	.word	0x0801fac0
 80052c4:	20000a9c 	.word	0x20000a9c
 80052c8:	20000aa0 	.word	0x20000aa0
 80052cc:	0801fac8 	.word	0x0801fac8
 80052d0:	20000ac0 	.word	0x20000ac0
 80052d4:	20000860 	.word	0x20000860
 80052d8:	200005d4 	.word	0x200005d4
 80052dc:	20000864 	.word	0x20000864
 80052e0:	20000b88 	.word	0x20000b88
 80052e4:	20000ba0 	.word	0x20000ba0
 80052e8:	20000620 	.word	0x20000620
 80052ec:	20000820 	.word	0x20000820
 80052f0:	200005d6 	.word	0x200005d6
 80052f4:	0801fad0 	.word	0x0801fad0
 80052f8:	0801fadc 	.word	0x0801fadc
 80052fc:	0801fae4 	.word	0x0801fae4
 8005300:	0801faf0 	.word	0x0801faf0
 8005304:	20000898 	.word	0x20000898
 8005308:	0801fafc 	.word	0x0801fafc
 800530c:	20000890 	.word	0x20000890
 8005310:	0801fb08 	.word	0x0801fb08
 8005314:	20000b9c 	.word	0x20000b9c
			  case STATE_LAT:
						ssd1306_SetCursor(32, 12);
 8005318:	210c      	movs	r1, #12
 800531a:	2020      	movs	r0, #32
 800531c:	f7fe ff0c 	bl	8004138 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8005320:	4aa1      	ldr	r2, [pc, #644]	@ (80055a8 <statemachine+0xd88>)
 8005322:	210f      	movs	r1, #15
 8005324:	48a1      	ldr	r0, [pc, #644]	@ (80055ac <statemachine+0xd8c>)
 8005326:	f016 f805 	bl	801b334 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800532a:	4aa1      	ldr	r2, [pc, #644]	@ (80055b0 <statemachine+0xd90>)
 800532c:	2301      	movs	r3, #1
 800532e:	ca06      	ldmia	r2, {r1, r2}
 8005330:	489e      	ldr	r0, [pc, #632]	@ (80055ac <statemachine+0xd8c>)
 8005332:	f7fe fedb 	bl	80040ec <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005336:	4b9f      	ldr	r3, [pc, #636]	@ (80055b4 <statemachine+0xd94>)
 8005338:	7a1b      	ldrb	r3, [r3, #8]
 800533a:	4a9f      	ldr	r2, [pc, #636]	@ (80055b8 <statemachine+0xd98>)
 800533c:	210f      	movs	r1, #15
 800533e:	489b      	ldr	r0, [pc, #620]	@ (80055ac <statemachine+0xd8c>)
 8005340:	f015 fff8 	bl	801b334 <sniprintf>
						ssd1306_SetCursor(32, 20);
 8005344:	2114      	movs	r1, #20
 8005346:	2020      	movs	r0, #32
 8005348:	f7fe fef6 	bl	8004138 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800534c:	4a98      	ldr	r2, [pc, #608]	@ (80055b0 <statemachine+0xd90>)
 800534e:	2301      	movs	r3, #1
 8005350:	ca06      	ldmia	r2, {r1, r2}
 8005352:	4896      	ldr	r0, [pc, #600]	@ (80055ac <statemachine+0xd8c>)
 8005354:	f7fe feca 	bl	80040ec <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8005358:	4a98      	ldr	r2, [pc, #608]	@ (80055bc <statemachine+0xd9c>)
 800535a:	210f      	movs	r1, #15
 800535c:	4893      	ldr	r0, [pc, #588]	@ (80055ac <statemachine+0xd8c>)
 800535e:	f015 ffe9 	bl	801b334 <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005362:	211c      	movs	r1, #28
 8005364:	2020      	movs	r0, #32
 8005366:	f7fe fee7 	bl	8004138 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800536a:	4a91      	ldr	r2, [pc, #580]	@ (80055b0 <statemachine+0xd90>)
 800536c:	2301      	movs	r3, #1
 800536e:	ca06      	ldmia	r2, {r1, r2}
 8005370:	488e      	ldr	r0, [pc, #568]	@ (80055ac <statemachine+0xd8c>)
 8005372:	f7fe febb 	bl	80040ec <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 8005376:	4b8f      	ldr	r3, [pc, #572]	@ (80055b4 <statemachine+0xd94>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	e9cd 2300 	strd	r2, r3, [sp]
 8005380:	4a8f      	ldr	r2, [pc, #572]	@ (80055c0 <statemachine+0xda0>)
 8005382:	210f      	movs	r1, #15
 8005384:	4889      	ldr	r0, [pc, #548]	@ (80055ac <statemachine+0xd8c>)
 8005386:	f015 ffd5 	bl	801b334 <sniprintf>
						ssd1306_SetCursor(32, 36);
 800538a:	2124      	movs	r1, #36	@ 0x24
 800538c:	2020      	movs	r0, #32
 800538e:	f7fe fed3 	bl	8004138 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005392:	4a87      	ldr	r2, [pc, #540]	@ (80055b0 <statemachine+0xd90>)
 8005394:	2301      	movs	r3, #1
 8005396:	ca06      	ldmia	r2, {r1, r2}
 8005398:	4884      	ldr	r0, [pc, #528]	@ (80055ac <statemachine+0xd8c>)
 800539a:	f7fe fea7 	bl	80040ec <ssd1306_WriteString>


				  if(BTN_B>=1){
 800539e:	4b89      	ldr	r3, [pc, #548]	@ (80055c4 <statemachine+0xda4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dd08      	ble.n	80053b8 <statemachine+0xb98>
				  					  posstate++;
 80053a6:	4b88      	ldr	r3, [pc, #544]	@ (80055c8 <statemachine+0xda8>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	3301      	adds	r3, #1
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	4b86      	ldr	r3, [pc, #536]	@ (80055c8 <statemachine+0xda8>)
 80053b0:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80053b2:	4b84      	ldr	r3, [pc, #528]	@ (80055c4 <statemachine+0xda4>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80053b8:	4b84      	ldr	r3, [pc, #528]	@ (80055cc <statemachine+0xdac>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f340 81ca 	ble.w	8005756 <statemachine+0xf36>
									  posstate--;
 80053c2:	4b81      	ldr	r3, [pc, #516]	@ (80055c8 <statemachine+0xda8>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	4b7f      	ldr	r3, [pc, #508]	@ (80055c8 <statemachine+0xda8>)
 80053cc:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 80053ce:	4b7f      	ldr	r3, [pc, #508]	@ (80055cc <statemachine+0xdac>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
								}



				  break;
 80053d4:	e1bf      	b.n	8005756 <statemachine+0xf36>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 12);
 80053d6:	210c      	movs	r1, #12
 80053d8:	2020      	movs	r0, #32
 80053da:	f7fe fead 	bl	8004138 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 80053de:	4a7c      	ldr	r2, [pc, #496]	@ (80055d0 <statemachine+0xdb0>)
 80053e0:	210f      	movs	r1, #15
 80053e2:	4872      	ldr	r0, [pc, #456]	@ (80055ac <statemachine+0xd8c>)
 80053e4:	f015 ffa6 	bl	801b334 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80053e8:	4a71      	ldr	r2, [pc, #452]	@ (80055b0 <statemachine+0xd90>)
 80053ea:	2301      	movs	r3, #1
 80053ec:	ca06      	ldmia	r2, {r1, r2}
 80053ee:	486f      	ldr	r0, [pc, #444]	@ (80055ac <statemachine+0xd8c>)
 80053f0:	f7fe fe7c 	bl	80040ec <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80053f4:	4b6f      	ldr	r3, [pc, #444]	@ (80055b4 <statemachine+0xd94>)
 80053f6:	7e1b      	ldrb	r3, [r3, #24]
 80053f8:	4a6f      	ldr	r2, [pc, #444]	@ (80055b8 <statemachine+0xd98>)
 80053fa:	210f      	movs	r1, #15
 80053fc:	486b      	ldr	r0, [pc, #428]	@ (80055ac <statemachine+0xd8c>)
 80053fe:	f015 ff99 	bl	801b334 <sniprintf>
					ssd1306_SetCursor(32, 20);
 8005402:	2114      	movs	r1, #20
 8005404:	2020      	movs	r0, #32
 8005406:	f7fe fe97 	bl	8004138 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800540a:	4a69      	ldr	r2, [pc, #420]	@ (80055b0 <statemachine+0xd90>)
 800540c:	2301      	movs	r3, #1
 800540e:	ca06      	ldmia	r2, {r1, r2}
 8005410:	4866      	ldr	r0, [pc, #408]	@ (80055ac <statemachine+0xd8c>)
 8005412:	f7fe fe6b 	bl	80040ec <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 8005416:	4a6f      	ldr	r2, [pc, #444]	@ (80055d4 <statemachine+0xdb4>)
 8005418:	210f      	movs	r1, #15
 800541a:	4864      	ldr	r0, [pc, #400]	@ (80055ac <statemachine+0xd8c>)
 800541c:	f015 ff8a 	bl	801b334 <sniprintf>
					ssd1306_SetCursor(32, 28);
 8005420:	211c      	movs	r1, #28
 8005422:	2020      	movs	r0, #32
 8005424:	f7fe fe88 	bl	8004138 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005428:	4a61      	ldr	r2, [pc, #388]	@ (80055b0 <statemachine+0xd90>)
 800542a:	2301      	movs	r3, #1
 800542c:	ca06      	ldmia	r2, {r1, r2}
 800542e:	485f      	ldr	r0, [pc, #380]	@ (80055ac <statemachine+0xd8c>)
 8005430:	f7fe fe5c 	bl	80040ec <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005434:	4b5f      	ldr	r3, [pc, #380]	@ (80055b4 <statemachine+0xd94>)
 8005436:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800543a:	e9cd 2300 	strd	r2, r3, [sp]
 800543e:	4a60      	ldr	r2, [pc, #384]	@ (80055c0 <statemachine+0xda0>)
 8005440:	210f      	movs	r1, #15
 8005442:	485a      	ldr	r0, [pc, #360]	@ (80055ac <statemachine+0xd8c>)
 8005444:	f015 ff76 	bl	801b334 <sniprintf>
					ssd1306_SetCursor(32, 36);
 8005448:	2124      	movs	r1, #36	@ 0x24
 800544a:	2020      	movs	r0, #32
 800544c:	f7fe fe74 	bl	8004138 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005450:	4a57      	ldr	r2, [pc, #348]	@ (80055b0 <statemachine+0xd90>)
 8005452:	2301      	movs	r3, #1
 8005454:	ca06      	ldmia	r2, {r1, r2}
 8005456:	4855      	ldr	r0, [pc, #340]	@ (80055ac <statemachine+0xd8c>)
 8005458:	f7fe fe48 	bl	80040ec <ssd1306_WriteString>

				  if(BTN_B>=1){
 800545c:	4b59      	ldr	r3, [pc, #356]	@ (80055c4 <statemachine+0xda4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	dd08      	ble.n	8005476 <statemachine+0xc56>
				  					  posstate++;
 8005464:	4b58      	ldr	r3, [pc, #352]	@ (80055c8 <statemachine+0xda8>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	3301      	adds	r3, #1
 800546a:	b2da      	uxtb	r2, r3
 800546c:	4b56      	ldr	r3, [pc, #344]	@ (80055c8 <statemachine+0xda8>)
 800546e:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005470:	4b54      	ldr	r3, [pc, #336]	@ (80055c4 <statemachine+0xda4>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005476:	4b55      	ldr	r3, [pc, #340]	@ (80055cc <statemachine+0xdac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f340 816d 	ble.w	800575a <statemachine+0xf3a>
									  posstate--;
 8005480:	4b51      	ldr	r3, [pc, #324]	@ (80055c8 <statemachine+0xda8>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	3b01      	subs	r3, #1
 8005486:	b2da      	uxtb	r2, r3
 8005488:	4b4f      	ldr	r3, [pc, #316]	@ (80055c8 <statemachine+0xda8>)
 800548a:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 800548c:	4b4f      	ldr	r3, [pc, #316]	@ (80055cc <statemachine+0xdac>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
								}

				  break;
 8005492:	e162      	b.n	800575a <statemachine+0xf3a>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 12);
 8005494:	210c      	movs	r1, #12
 8005496:	2020      	movs	r0, #32
 8005498:	f7fe fe4e 	bl	8004138 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 800549c:	4a4e      	ldr	r2, [pc, #312]	@ (80055d8 <statemachine+0xdb8>)
 800549e:	210f      	movs	r1, #15
 80054a0:	4842      	ldr	r0, [pc, #264]	@ (80055ac <statemachine+0xd8c>)
 80054a2:	f015 ff47 	bl	801b334 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054a6:	4a42      	ldr	r2, [pc, #264]	@ (80055b0 <statemachine+0xd90>)
 80054a8:	2301      	movs	r3, #1
 80054aa:	ca06      	ldmia	r2, {r1, r2}
 80054ac:	483f      	ldr	r0, [pc, #252]	@ (80055ac <statemachine+0xd8c>)
 80054ae:	f7fe fe1d 	bl	80040ec <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80054b2:	4b40      	ldr	r3, [pc, #256]	@ (80055b4 <statemachine+0xd94>)
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fb f81e 	bl	80004f8 <__aeabi_f2d>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	e9cd 2300 	strd	r2, r3, [sp]
 80054c4:	4a45      	ldr	r2, [pc, #276]	@ (80055dc <statemachine+0xdbc>)
 80054c6:	210f      	movs	r1, #15
 80054c8:	4838      	ldr	r0, [pc, #224]	@ (80055ac <statemachine+0xd8c>)
 80054ca:	f015 ff33 	bl	801b334 <sniprintf>
				  						ssd1306_SetCursor(32, 20);
 80054ce:	2114      	movs	r1, #20
 80054d0:	2020      	movs	r0, #32
 80054d2:	f7fe fe31 	bl	8004138 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054d6:	4a36      	ldr	r2, [pc, #216]	@ (80055b0 <statemachine+0xd90>)
 80054d8:	2301      	movs	r3, #1
 80054da:	ca06      	ldmia	r2, {r1, r2}
 80054dc:	4833      	ldr	r0, [pc, #204]	@ (80055ac <statemachine+0xd8c>)
 80054de:	f7fe fe05 	bl	80040ec <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 80054e2:	4a3f      	ldr	r2, [pc, #252]	@ (80055e0 <statemachine+0xdc0>)
 80054e4:	210f      	movs	r1, #15
 80054e6:	4831      	ldr	r0, [pc, #196]	@ (80055ac <statemachine+0xd8c>)
 80054e8:	f015 ff24 	bl	801b334 <sniprintf>
				  						ssd1306_SetCursor(32, 28);
 80054ec:	211c      	movs	r1, #28
 80054ee:	2020      	movs	r0, #32
 80054f0:	f7fe fe22 	bl	8004138 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054f4:	4a2e      	ldr	r2, [pc, #184]	@ (80055b0 <statemachine+0xd90>)
 80054f6:	2301      	movs	r3, #1
 80054f8:	ca06      	ldmia	r2, {r1, r2}
 80054fa:	482c      	ldr	r0, [pc, #176]	@ (80055ac <statemachine+0xd8c>)
 80054fc:	f7fe fdf6 	bl	80040ec <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8005500:	4b2c      	ldr	r3, [pc, #176]	@ (80055b4 <statemachine+0xd94>)
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	4618      	mov	r0, r3
 8005506:	f7fa fff7 	bl	80004f8 <__aeabi_f2d>
 800550a:	a325      	add	r3, pc, #148	@ (adr r3, 80055a0 <statemachine+0xd80>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fb f84a 	bl	80005a8 <__aeabi_dmul>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	f7fb fb3c 	bl	8000b98 <__aeabi_d2f>
 8005520:	4603      	mov	r3, r0
 8005522:	ee00 3a10 	vmov	s0, r3
 8005526:	f018 fd5b 	bl	801dfe0 <expf>
 800552a:	eef0 7a40 	vmov.f32	s15, s0
 800552e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80055e4 <statemachine+0xdc4>
 8005532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005536:	ee17 0a90 	vmov	r0, s15
 800553a:	f7fa ffdd 	bl	80004f8 <__aeabi_f2d>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	e9cd 2300 	strd	r2, r3, [sp]
 8005546:	4a28      	ldr	r2, [pc, #160]	@ (80055e8 <statemachine+0xdc8>)
 8005548:	210f      	movs	r1, #15
 800554a:	4818      	ldr	r0, [pc, #96]	@ (80055ac <statemachine+0xd8c>)
 800554c:	f015 fef2 	bl	801b334 <sniprintf>
				  						ssd1306_SetCursor(32, 36);
 8005550:	2124      	movs	r1, #36	@ 0x24
 8005552:	2020      	movs	r0, #32
 8005554:	f7fe fdf0 	bl	8004138 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005558:	4a15      	ldr	r2, [pc, #84]	@ (80055b0 <statemachine+0xd90>)
 800555a:	2301      	movs	r3, #1
 800555c:	ca06      	ldmia	r2, {r1, r2}
 800555e:	4813      	ldr	r0, [pc, #76]	@ (80055ac <statemachine+0xd8c>)
 8005560:	f7fe fdc4 	bl	80040ec <ssd1306_WriteString>

				  if(BTN_B>=1){
 8005564:	4b17      	ldr	r3, [pc, #92]	@ (80055c4 <statemachine+0xda4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dd08      	ble.n	800557e <statemachine+0xd5e>
				  					posstate++;
 800556c:	4b16      	ldr	r3, [pc, #88]	@ (80055c8 <statemachine+0xda8>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	3301      	adds	r3, #1
 8005572:	b2da      	uxtb	r2, r3
 8005574:	4b14      	ldr	r3, [pc, #80]	@ (80055c8 <statemachine+0xda8>)
 8005576:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8005578:	4b12      	ldr	r3, [pc, #72]	@ (80055c4 <statemachine+0xda4>)
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800557e:	4b13      	ldr	r3, [pc, #76]	@ (80055cc <statemachine+0xdac>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f340 80eb 	ble.w	800575e <statemachine+0xf3e>
					  posstate--;
 8005588:	4b0f      	ldr	r3, [pc, #60]	@ (80055c8 <statemachine+0xda8>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	3b01      	subs	r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	4b0d      	ldr	r3, [pc, #52]	@ (80055c8 <statemachine+0xda8>)
 8005592:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8005594:	4b0d      	ldr	r3, [pc, #52]	@ (80055cc <statemachine+0xdac>)
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
				}
				  break;
 800559a:	e0e0      	b.n	800575e <statemachine+0xf3e>
 800559c:	f3af 8000 	nop.w
 80055a0:	fb798882 	.word	0xfb798882
 80055a4:	bf1e1818 	.word	0xbf1e1818
 80055a8:	0801fb14 	.word	0x0801fb14
 80055ac:	20000ac0 	.word	0x20000ac0
 80055b0:	20000014 	.word	0x20000014
 80055b4:	20000820 	.word	0x20000820
 80055b8:	0801fb20 	.word	0x0801fb20
 80055bc:	0801fad0 	.word	0x0801fad0
 80055c0:	0801fadc 	.word	0x0801fadc
 80055c4:	20000864 	.word	0x20000864
 80055c8:	200005d6 	.word	0x200005d6
 80055cc:	20000b9c 	.word	0x20000b9c
 80055d0:	0801fb24 	.word	0x0801fb24
 80055d4:	0801fae4 	.word	0x0801fae4
 80055d8:	0801fb30 	.word	0x0801fb30
 80055dc:	0801fb3c 	.word	0x0801fb3c
 80055e0:	0801fb44 	.word	0x0801fb44
 80055e4:	447a0000 	.word	0x447a0000
 80055e8:	0801fb50 	.word	0x0801fb50
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 80055ec:	2000      	movs	r0, #0
 80055ee:	f7fe fc61 	bl	8003eb4 <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 80055f2:	4999      	ldr	r1, [pc, #612]	@ (8005858 <statemachine+0x1038>)
 80055f4:	4899      	ldr	r0, [pc, #612]	@ (800585c <statemachine+0x103c>)
 80055f6:	f7fd fe8d 	bl	8003314 <nmea_parse>
			  			  if(settimeen==0){
 80055fa:	4b99      	ldr	r3, [pc, #612]	@ (8005860 <statemachine+0x1040>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d141      	bne.n	8005686 <statemachine+0xe66>

			  							settimeen=1;
 8005602:	4b97      	ldr	r3, [pc, #604]	@ (8005860 <statemachine+0x1040>)
 8005604:	2201      	movs	r2, #1
 8005606:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005608:	4b94      	ldr	r3, [pc, #592]	@ (800585c <statemachine+0x103c>)
 800560a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	0092      	lsls	r2, r2, #2
 8005618:	4413      	add	r3, r2
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	b2da      	uxtb	r2, r3
 800561e:	4b8f      	ldr	r3, [pc, #572]	@ (800585c <statemachine+0x103c>)
 8005620:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4413      	add	r3, r2
 800562c:	b2da      	uxtb	r2, r3
 800562e:	4b8d      	ldr	r3, [pc, #564]	@ (8005864 <statemachine+0x1044>)
 8005630:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005632:	4b8a      	ldr	r3, [pc, #552]	@ (800585c <statemachine+0x103c>)
 8005634:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	0092      	lsls	r2, r2, #2
 8005642:	4413      	add	r3, r2
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	4b84      	ldr	r3, [pc, #528]	@ (800585c <statemachine+0x103c>)
 800564a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	b2db      	uxtb	r3, r3
 8005654:	4413      	add	r3, r2
 8005656:	b2da      	uxtb	r2, r3
 8005658:	4b83      	ldr	r3, [pc, #524]	@ (8005868 <statemachine+0x1048>)
 800565a:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 800565c:	4b7f      	ldr	r3, [pc, #508]	@ (800585c <statemachine+0x103c>)
 800565e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	b2db      	uxtb	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	0092      	lsls	r2, r2, #2
 800566c:	4413      	add	r3, r2
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4b7a      	ldr	r3, [pc, #488]	@ (800585c <statemachine+0x103c>)
 8005674:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	b2db      	uxtb	r3, r3
 800567e:	4413      	add	r3, r2
 8005680:	b2da      	uxtb	r2, r3
 8005682:	4b7a      	ldr	r3, [pc, #488]	@ (800586c <statemachine+0x104c>)
 8005684:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 12);
 8005686:	210c      	movs	r1, #12
 8005688:	2020      	movs	r0, #32
 800568a:	f7fe fd55 	bl	8004138 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 800568e:	4a78      	ldr	r2, [pc, #480]	@ (8005870 <statemachine+0x1050>)
 8005690:	2301      	movs	r3, #1
 8005692:	ca06      	ldmia	r2, {r1, r2}
 8005694:	4877      	ldr	r0, [pc, #476]	@ (8005874 <statemachine+0x1054>)
 8005696:	f7fe fd29 	bl	80040ec <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 22);
 800569a:	2116      	movs	r1, #22
 800569c:	2020      	movs	r0, #32
 800569e:	f7fe fd4b 	bl	8004138 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 80056a2:	4b70      	ldr	r3, [pc, #448]	@ (8005864 <statemachine+0x1044>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005868 <statemachine+0x1048>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	4613      	mov	r3, r2
 80056b0:	4a71      	ldr	r2, [pc, #452]	@ (8005878 <statemachine+0x1058>)
 80056b2:	210f      	movs	r1, #15
 80056b4:	4871      	ldr	r0, [pc, #452]	@ (800587c <statemachine+0x105c>)
 80056b6:	f015 fe3d 	bl	801b334 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80056ba:	4a71      	ldr	r2, [pc, #452]	@ (8005880 <statemachine+0x1060>)
 80056bc:	2301      	movs	r3, #1
 80056be:	ca06      	ldmia	r2, {r1, r2}
 80056c0:	486e      	ldr	r0, [pc, #440]	@ (800587c <statemachine+0x105c>)
 80056c2:	f7fe fd13 	bl	80040ec <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 32);
 80056c6:	2120      	movs	r1, #32
 80056c8:	2020      	movs	r0, #32
 80056ca:	f7fe fd35 	bl	8004138 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 80056ce:	4b67      	ldr	r3, [pc, #412]	@ (800586c <statemachine+0x104c>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	4a6c      	ldr	r2, [pc, #432]	@ (8005884 <statemachine+0x1064>)
 80056d4:	210f      	movs	r1, #15
 80056d6:	4869      	ldr	r0, [pc, #420]	@ (800587c <statemachine+0x105c>)
 80056d8:	f015 fe2c 	bl	801b334 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80056dc:	4a64      	ldr	r2, [pc, #400]	@ (8005870 <statemachine+0x1050>)
 80056de:	2301      	movs	r3, #1
 80056e0:	ca06      	ldmia	r2, {r1, r2}
 80056e2:	4866      	ldr	r0, [pc, #408]	@ (800587c <statemachine+0x105c>)
 80056e4:	f7fe fd02 	bl	80040ec <ssd1306_WriteString>
			  				if(BTN_B>=1){
 80056e8:	4b67      	ldr	r3, [pc, #412]	@ (8005888 <statemachine+0x1068>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dd20      	ble.n	8005732 <statemachine+0xf12>
			  					posstate--;
 80056f0:	4b66      	ldr	r3, [pc, #408]	@ (800588c <statemachine+0x106c>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	4b64      	ldr	r3, [pc, #400]	@ (800588c <statemachine+0x106c>)
 80056fa:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 80056fc:	4b63      	ldr	r3, [pc, #396]	@ (800588c <statemachine+0x106c>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	3b01      	subs	r3, #1
 8005702:	b2da      	uxtb	r2, r3
 8005704:	4b61      	ldr	r3, [pc, #388]	@ (800588c <statemachine+0x106c>)
 8005706:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005708:	4b60      	ldr	r3, [pc, #384]	@ (800588c <statemachine+0x106c>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	3b01      	subs	r3, #1
 800570e:	b2da      	uxtb	r2, r3
 8005710:	4b5e      	ldr	r3, [pc, #376]	@ (800588c <statemachine+0x106c>)
 8005712:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005714:	4b5d      	ldr	r3, [pc, #372]	@ (800588c <statemachine+0x106c>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	4b5b      	ldr	r3, [pc, #364]	@ (800588c <statemachine+0x106c>)
 800571e:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005720:	4b5a      	ldr	r3, [pc, #360]	@ (800588c <statemachine+0x106c>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	3b01      	subs	r3, #1
 8005726:	b2da      	uxtb	r2, r3
 8005728:	4b58      	ldr	r3, [pc, #352]	@ (800588c <statemachine+0x106c>)
 800572a:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 800572c:	4b56      	ldr	r3, [pc, #344]	@ (8005888 <statemachine+0x1068>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8005732:	4b57      	ldr	r3, [pc, #348]	@ (8005890 <statemachine+0x1070>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	dd13      	ble.n	8005762 <statemachine+0xf42>
			  							  					posstate--;
 800573a:	4b54      	ldr	r3, [pc, #336]	@ (800588c <statemachine+0x106c>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	3b01      	subs	r3, #1
 8005740:	b2da      	uxtb	r2, r3
 8005742:	4b52      	ldr	r3, [pc, #328]	@ (800588c <statemachine+0x106c>)
 8005744:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 8005746:	4b52      	ldr	r3, [pc, #328]	@ (8005890 <statemachine+0x1070>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 800574c:	e009      	b.n	8005762 <statemachine+0xf42>
				  break;
 800574e:	bf00      	nop
 8005750:	e008      	b.n	8005764 <statemachine+0xf44>
				  break;
 8005752:	bf00      	nop
 8005754:	e006      	b.n	8005764 <statemachine+0xf44>
				  break;
 8005756:	bf00      	nop
 8005758:	e004      	b.n	8005764 <statemachine+0xf44>
				  break;
 800575a:	bf00      	nop
 800575c:	e002      	b.n	8005764 <statemachine+0xf44>
				  break;
 800575e:	bf00      	nop
 8005760:	e000      	b.n	8005764 <statemachine+0xf44>
			  			break;
 8005762:	bf00      	nop
			  }

					if(BTN_A>=1){
 8005764:	4b4b      	ldr	r3, [pc, #300]	@ (8005894 <statemachine+0x1074>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	dd0b      	ble.n	8005784 <statemachine+0xf64>
							state++;
 800576c:	4b4a      	ldr	r3, [pc, #296]	@ (8005898 <statemachine+0x1078>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4b48      	ldr	r3, [pc, #288]	@ (8005898 <statemachine+0x1078>)
 8005776:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005778:	4b46      	ldr	r3, [pc, #280]	@ (8005894 <statemachine+0x1074>)
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 800577e:	4b42      	ldr	r3, [pc, #264]	@ (8005888 <statemachine+0x1068>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8005784:	4b45      	ldr	r3, [pc, #276]	@ (800589c <statemachine+0x107c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f340 8438 	ble.w	8005ffe <statemachine+0x17de>
									 									 									  			 	state--;
 800578e:	4b42      	ldr	r3, [pc, #264]	@ (8005898 <statemachine+0x1078>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	3b01      	subs	r3, #1
 8005794:	b2da      	uxtb	r2, r3
 8005796:	4b40      	ldr	r3, [pc, #256]	@ (8005898 <statemachine+0x1078>)
 8005798:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 800579a:	4b3e      	ldr	r3, [pc, #248]	@ (8005894 <statemachine+0x1074>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 80057a0:	4b39      	ldr	r3, [pc, #228]	@ (8005888 <statemachine+0x1068>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 80057a6:	4b3d      	ldr	r3, [pc, #244]	@ (800589c <statemachine+0x107c>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 80057ac:	f000 bc27 	b.w	8005ffe <statemachine+0x17de>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 80057b0:	2000      	movs	r0, #0
 80057b2:	f7fe fb7f 	bl	8003eb4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 12);
 80057b6:	210c      	movs	r1, #12
 80057b8:	2020      	movs	r0, #32
 80057ba:	f7fe fcbd 	bl	8004138 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 80057be:	4a2c      	ldr	r2, [pc, #176]	@ (8005870 <statemachine+0x1050>)
 80057c0:	2301      	movs	r3, #1
 80057c2:	ca06      	ldmia	r2, {r1, r2}
 80057c4:	4836      	ldr	r0, [pc, #216]	@ (80058a0 <statemachine+0x1080>)
 80057c6:	f7fe fc91 	bl	80040ec <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 32);
 80057ca:	2120      	movs	r1, #32
 80057cc:	2020      	movs	r0, #32
 80057ce:	f7fe fcb3 	bl	8004138 <ssd1306_SetCursor>

			  switch(chronostate){
 80057d2:	4b34      	ldr	r3, [pc, #208]	@ (80058a4 <statemachine+0x1084>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d072      	beq.n	80058c0 <statemachine+0x10a0>
 80057da:	2b02      	cmp	r3, #2
 80057dc:	f300 80a1 	bgt.w	8005922 <statemachine+0x1102>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <statemachine+0xfca>
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d01e      	beq.n	8005826 <statemachine+0x1006>
 80057e8:	e09b      	b.n	8005922 <statemachine+0x1102>
			  case STATE_RESET:
				  min=0;
 80057ea:	4b2f      	ldr	r3, [pc, #188]	@ (80058a8 <statemachine+0x1088>)
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]
				  seconde=0;
 80057f2:	4b2e      	ldr	r3, [pc, #184]	@ (80058ac <statemachine+0x108c>)
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
				  calctime=0;
 80057fa:	4b2d      	ldr	r3, [pc, #180]	@ (80058b0 <statemachine+0x1090>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005800:	4b21      	ldr	r3, [pc, #132]	@ (8005888 <statemachine+0x1068>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	f340 8087 	ble.w	8005918 <statemachine+0x10f8>
				  		chronostate++;
 800580a:	4b26      	ldr	r3, [pc, #152]	@ (80058a4 <statemachine+0x1084>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	3301      	adds	r3, #1
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4b24      	ldr	r3, [pc, #144]	@ (80058a4 <statemachine+0x1084>)
 8005814:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005816:	4b1c      	ldr	r3, [pc, #112]	@ (8005888 <statemachine+0x1068>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 800581c:	4b25      	ldr	r3, [pc, #148]	@ (80058b4 <statemachine+0x1094>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a25      	ldr	r2, [pc, #148]	@ (80058b8 <statemachine+0x1098>)
 8005822:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005824:	e078      	b.n	8005918 <statemachine+0x10f8>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005826:	4b23      	ldr	r3, [pc, #140]	@ (80058b4 <statemachine+0x1094>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b23      	ldr	r3, [pc, #140]	@ (80058b8 <statemachine+0x1098>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	1ad2      	subs	r2, r2, r3
 8005830:	4b22      	ldr	r3, [pc, #136]	@ (80058bc <statemachine+0x109c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4413      	add	r3, r2
 8005836:	4a1e      	ldr	r2, [pc, #120]	@ (80058b0 <statemachine+0x1090>)
 8005838:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 800583a:	4b13      	ldr	r3, [pc, #76]	@ (8005888 <statemachine+0x1068>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	dd6c      	ble.n	800591c <statemachine+0x10fc>
				  		chronostate++;
 8005842:	4b18      	ldr	r3, [pc, #96]	@ (80058a4 <statemachine+0x1084>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	b2da      	uxtb	r2, r3
 800584a:	4b16      	ldr	r3, [pc, #88]	@ (80058a4 <statemachine+0x1084>)
 800584c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 800584e:	4b0e      	ldr	r3, [pc, #56]	@ (8005888 <statemachine+0x1068>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8005854:	e062      	b.n	800591c <statemachine+0x10fc>
 8005856:	bf00      	nop
 8005858:	20000620 	.word	0x20000620
 800585c:	20000820 	.word	0x20000820
 8005860:	20000b88 	.word	0x20000b88
 8005864:	20000b85 	.word	0x20000b85
 8005868:	20000b86 	.word	0x20000b86
 800586c:	20000b84 	.word	0x20000b84
 8005870:	20000014 	.word	0x20000014
 8005874:	0801fb5c 	.word	0x0801fb5c
 8005878:	0801fb64 	.word	0x0801fb64
 800587c:	20000ac0 	.word	0x20000ac0
 8005880:	2000001c 	.word	0x2000001c
 8005884:	0801fb70 	.word	0x0801fb70
 8005888:	20000864 	.word	0x20000864
 800588c:	200005d6 	.word	0x200005d6
 8005890:	20000b9c 	.word	0x20000b9c
 8005894:	20000860 	.word	0x20000860
 8005898:	200005d4 	.word	0x200005d4
 800589c:	20000ba0 	.word	0x20000ba0
 80058a0:	0801fb7c 	.word	0x0801fb7c
 80058a4:	200005d7 	.word	0x200005d7
 80058a8:	20000b3c 	.word	0x20000b3c
 80058ac:	20000b38 	.word	0x20000b38
 80058b0:	20000b44 	.word	0x20000b44
 80058b4:	200014d8 	.word	0x200014d8
 80058b8:	20000b40 	.word	0x20000b40
 80058bc:	20000b48 	.word	0x20000b48
			  case STATE_PAUSE:
				  timehandler=calctime;
 80058c0:	4b88      	ldr	r3, [pc, #544]	@ (8005ae4 <statemachine+0x12c4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a88      	ldr	r2, [pc, #544]	@ (8005ae8 <statemachine+0x12c8>)
 80058c6:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 80058c8:	4b88      	ldr	r3, [pc, #544]	@ (8005aec <statemachine+0x12cc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dd0c      	ble.n	80058ea <statemachine+0x10ca>
				  			chronostate--;
 80058d0:	4b87      	ldr	r3, [pc, #540]	@ (8005af0 <statemachine+0x12d0>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	4b85      	ldr	r3, [pc, #532]	@ (8005af0 <statemachine+0x12d0>)
 80058da:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 80058dc:	4b83      	ldr	r3, [pc, #524]	@ (8005aec <statemachine+0x12cc>)
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 80058e2:	4b84      	ldr	r3, [pc, #528]	@ (8005af4 <statemachine+0x12d4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a84      	ldr	r2, [pc, #528]	@ (8005af8 <statemachine+0x12d8>)
 80058e8:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 80058ea:	4b84      	ldr	r3, [pc, #528]	@ (8005afc <statemachine+0x12dc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dd16      	ble.n	8005920 <statemachine+0x1100>
				  				  	chronostate--;
 80058f2:	4b7f      	ldr	r3, [pc, #508]	@ (8005af0 <statemachine+0x12d0>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	4b7d      	ldr	r3, [pc, #500]	@ (8005af0 <statemachine+0x12d0>)
 80058fc:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 80058fe:	4b7c      	ldr	r3, [pc, #496]	@ (8005af0 <statemachine+0x12d0>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	3b01      	subs	r3, #1
 8005904:	b2da      	uxtb	r2, r3
 8005906:	4b7a      	ldr	r3, [pc, #488]	@ (8005af0 <statemachine+0x12d0>)
 8005908:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 800590a:	4b7c      	ldr	r3, [pc, #496]	@ (8005afc <statemachine+0x12dc>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005910:	4b75      	ldr	r3, [pc, #468]	@ (8005ae8 <statemachine+0x12c8>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005916:	e003      	b.n	8005920 <statemachine+0x1100>
				  break;
 8005918:	bf00      	nop
 800591a:	e002      	b.n	8005922 <statemachine+0x1102>
				  break;
 800591c:	bf00      	nop
 800591e:	e000      	b.n	8005922 <statemachine+0x1102>
				  break;
 8005920:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005922:	4b70      	ldr	r3, [pc, #448]	@ (8005ae4 <statemachine+0x12c4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005b00 <statemachine+0x12e0>
 8005932:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005936:	ee16 0a90 	vmov	r0, s13
 800593a:	f7fa fddd 	bl	80004f8 <__aeabi_f2d>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	ec43 2b10 	vmov	d0, r2, r3
 8005946:	f018 fbe7 	bl	801e118 <floor>
 800594a:	ec53 2b10 	vmov	r2, r3, d0
 800594e:	4610      	mov	r0, r2
 8005950:	4619      	mov	r1, r3
 8005952:	f7fb f921 	bl	8000b98 <__aeabi_d2f>
 8005956:	4603      	mov	r3, r0
 8005958:	4a6a      	ldr	r2, [pc, #424]	@ (8005b04 <statemachine+0x12e4>)
 800595a:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 800595c:	4b61      	ldr	r3, [pc, #388]	@ (8005ae4 <statemachine+0x12c4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	ee07 3a90 	vmov	s15, r3
 8005964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005968:	4b66      	ldr	r3, [pc, #408]	@ (8005b04 <statemachine+0x12e4>)
 800596a:	edd3 7a00 	vldr	s15, [r3]
 800596e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8005b00 <statemachine+0x12e0>
 8005972:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005976:	ee37 7a67 	vsub.f32	s14, s14, s15
 800597a:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005b08 <statemachine+0x12e8>
 800597e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005982:	4b62      	ldr	r3, [pc, #392]	@ (8005b0c <statemachine+0x12ec>)
 8005984:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005988:	4b5e      	ldr	r3, [pc, #376]	@ (8005b04 <statemachine+0x12e4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f7fa fdb3 	bl	80004f8 <__aeabi_f2d>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9cd 2300 	strd	r2, r3, [sp]
 800599a:	4a5d      	ldr	r2, [pc, #372]	@ (8005b10 <statemachine+0x12f0>)
 800599c:	210f      	movs	r1, #15
 800599e:	485d      	ldr	r0, [pc, #372]	@ (8005b14 <statemachine+0x12f4>)
 80059a0:	f015 fcc8 	bl	801b334 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80059a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005b18 <statemachine+0x12f8>)
 80059a6:	2301      	movs	r3, #1
 80059a8:	ca06      	ldmia	r2, {r1, r2}
 80059aa:	485a      	ldr	r0, [pc, #360]	@ (8005b14 <statemachine+0x12f4>)
 80059ac:	f7fe fb9e 	bl	80040ec <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 44);
 80059b0:	212c      	movs	r1, #44	@ 0x2c
 80059b2:	2020      	movs	r0, #32
 80059b4:	f7fe fbc0 	bl	8004138 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 80059b8:	4b54      	ldr	r3, [pc, #336]	@ (8005b0c <statemachine+0x12ec>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fa fd9b 	bl	80004f8 <__aeabi_f2d>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	e9cd 2300 	strd	r2, r3, [sp]
 80059ca:	4a54      	ldr	r2, [pc, #336]	@ (8005b1c <statemachine+0x12fc>)
 80059cc:	210f      	movs	r1, #15
 80059ce:	4851      	ldr	r0, [pc, #324]	@ (8005b14 <statemachine+0x12f4>)
 80059d0:	f015 fcb0 	bl	801b334 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80059d4:	4a50      	ldr	r2, [pc, #320]	@ (8005b18 <statemachine+0x12f8>)
 80059d6:	2301      	movs	r3, #1
 80059d8:	ca06      	ldmia	r2, {r1, r2}
 80059da:	484e      	ldr	r0, [pc, #312]	@ (8005b14 <statemachine+0x12f4>)
 80059dc:	f7fe fb86 	bl	80040ec <ssd1306_WriteString>


			  if(BTN_A>=1){
 80059e0:	4b4f      	ldr	r3, [pc, #316]	@ (8005b20 <statemachine+0x1300>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dd0b      	ble.n	8005a00 <statemachine+0x11e0>
			 	state++;
 80059e8:	4b4e      	ldr	r3, [pc, #312]	@ (8005b24 <statemachine+0x1304>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005b24 <statemachine+0x1304>)
 80059f2:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 80059f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005b20 <statemachine+0x1300>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 80059fa:	4b3c      	ldr	r3, [pc, #240]	@ (8005aec <statemachine+0x12cc>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005a00:	4b49      	ldr	r3, [pc, #292]	@ (8005b28 <statemachine+0x1308>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f340 82fc 	ble.w	8006002 <statemachine+0x17e2>
			  				 									 									  			 	state--;
 8005a0a:	4b46      	ldr	r3, [pc, #280]	@ (8005b24 <statemachine+0x1304>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	4b44      	ldr	r3, [pc, #272]	@ (8005b24 <statemachine+0x1304>)
 8005a14:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005a16:	4b42      	ldr	r3, [pc, #264]	@ (8005b20 <statemachine+0x1300>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005a1c:	4b33      	ldr	r3, [pc, #204]	@ (8005aec <statemachine+0x12cc>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005a22:	4b41      	ldr	r3, [pc, #260]	@ (8005b28 <statemachine+0x1308>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005a28:	e2eb      	b.n	8006002 <statemachine+0x17e2>




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f7fe fa42 	bl	8003eb4 <ssd1306_Fill>
				  ssd1306_SetCursor(32,12);
 8005a30:	210c      	movs	r1, #12
 8005a32:	2020      	movs	r0, #32
 8005a34:	f7fe fb80 	bl	8004138 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005a38:	4a3c      	ldr	r2, [pc, #240]	@ (8005b2c <statemachine+0x130c>)
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	ca06      	ldmia	r2, {r1, r2}
 8005a3e:	483c      	ldr	r0, [pc, #240]	@ (8005b30 <statemachine+0x1310>)
 8005a40:	f7fe fb54 	bl	80040ec <ssd1306_WriteString>
				  switch(usbstate){
 8005a44:	4b3b      	ldr	r3, [pc, #236]	@ (8005b34 <statemachine+0x1314>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	f000 815a 	beq.w	8005d02 <statemachine+0x14e2>
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	f300 82d9 	bgt.w	8006006 <statemachine+0x17e6>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <statemachine+0x123e>
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d071      	beq.n	8005b40 <statemachine+0x1320>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005a5c:	e2d3      	b.n	8006006 <statemachine+0x17e6>
				 					  ssd1306_SetCursor(32,20);
 8005a5e:	2114      	movs	r1, #20
 8005a60:	2020      	movs	r0, #32
 8005a62:	f7fe fb69 	bl	8004138 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005a66:	4a31      	ldr	r2, [pc, #196]	@ (8005b2c <statemachine+0x130c>)
 8005a68:	2301      	movs	r3, #1
 8005a6a:	ca06      	ldmia	r2, {r1, r2}
 8005a6c:	4832      	ldr	r0, [pc, #200]	@ (8005b38 <statemachine+0x1318>)
 8005a6e:	f7fe fb3d 	bl	80040ec <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005a72:	4b32      	ldr	r3, [pc, #200]	@ (8005b3c <statemachine+0x131c>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8005a78:	4b1c      	ldr	r3, [pc, #112]	@ (8005aec <statemachine+0x12cc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dd0b      	ble.n	8005a98 <statemachine+0x1278>
				 						  usbstate++;
 8005a80:	4b2c      	ldr	r3, [pc, #176]	@ (8005b34 <statemachine+0x1314>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	4b2a      	ldr	r3, [pc, #168]	@ (8005b34 <statemachine+0x1314>)
 8005a8a:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005a8c:	4b17      	ldr	r3, [pc, #92]	@ (8005aec <statemachine+0x12cc>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005a92:	4b23      	ldr	r3, [pc, #140]	@ (8005b20 <statemachine+0x1300>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005a98:	4b21      	ldr	r3, [pc, #132]	@ (8005b20 <statemachine+0x1300>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dd0b      	ble.n	8005ab8 <statemachine+0x1298>
				 						 state++;
 8005aa0:	4b20      	ldr	r3, [pc, #128]	@ (8005b24 <statemachine+0x1304>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8005b24 <statemachine+0x1304>)
 8005aaa:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005aac:	4b1c      	ldr	r3, [pc, #112]	@ (8005b20 <statemachine+0x1300>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8005aec <statemachine+0x12cc>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b28 <statemachine+0x1308>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f340 8234 	ble.w	8005f2a <statemachine+0x170a>
				 									 									 									  			 	state--;
 8005ac2:	4b18      	ldr	r3, [pc, #96]	@ (8005b24 <statemachine+0x1304>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	4b16      	ldr	r3, [pc, #88]	@ (8005b24 <statemachine+0x1304>)
 8005acc:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005ace:	4b14      	ldr	r3, [pc, #80]	@ (8005b20 <statemachine+0x1300>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <statemachine+0x12cc>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8005ada:	4b13      	ldr	r3, [pc, #76]	@ (8005b28 <statemachine+0x1308>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
				 					  break;
 8005ae0:	e223      	b.n	8005f2a <statemachine+0x170a>
 8005ae2:	bf00      	nop
 8005ae4:	20000b44 	.word	0x20000b44
 8005ae8:	20000b48 	.word	0x20000b48
 8005aec:	20000864 	.word	0x20000864
 8005af0:	200005d7 	.word	0x200005d7
 8005af4:	200014d8 	.word	0x200014d8
 8005af8:	20000b40 	.word	0x20000b40
 8005afc:	20000b9c 	.word	0x20000b9c
 8005b00:	476a6000 	.word	0x476a6000
 8005b04:	20000b3c 	.word	0x20000b3c
 8005b08:	447a0000 	.word	0x447a0000
 8005b0c:	20000b38 	.word	0x20000b38
 8005b10:	0801fb84 	.word	0x0801fb84
 8005b14:	20000ac0 	.word	0x20000ac0
 8005b18:	2000001c 	.word	0x2000001c
 8005b1c:	0801fb90 	.word	0x0801fb90
 8005b20:	20000860 	.word	0x20000860
 8005b24:	200005d4 	.word	0x200005d4
 8005b28:	20000ba0 	.word	0x20000ba0
 8005b2c:	20000014 	.word	0x20000014
 8005b30:	0801fb98 	.word	0x0801fb98
 8005b34:	200005d8 	.word	0x200005d8
 8005b38:	0801fb9c 	.word	0x0801fb9c
 8005b3c:	20000b58 	.word	0x20000b58
				 					 ssd1306_SetCursor(32,20);
 8005b40:	2114      	movs	r1, #20
 8005b42:	2020      	movs	r0, #32
 8005b44:	f7fe faf8 	bl	8004138 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005b48:	4ab6      	ldr	r2, [pc, #728]	@ (8005e24 <statemachine+0x1604>)
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	ca06      	ldmia	r2, {r1, r2}
 8005b4e:	48b6      	ldr	r0, [pc, #728]	@ (8005e28 <statemachine+0x1608>)
 8005b50:	f7fe facc 	bl	80040ec <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,28);
 8005b54:	211c      	movs	r1, #28
 8005b56:	2020      	movs	r0, #32
 8005b58:	f7fe faee 	bl	8004138 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005b5c:	4ab1      	ldr	r2, [pc, #708]	@ (8005e24 <statemachine+0x1604>)
 8005b5e:	2301      	movs	r3, #1
 8005b60:	ca06      	ldmia	r2, {r1, r2}
 8005b62:	48b2      	ldr	r0, [pc, #712]	@ (8005e2c <statemachine+0x160c>)
 8005b64:	f7fe fac2 	bl	80040ec <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005b68:	4bb1      	ldr	r3, [pc, #708]	@ (8005e30 <statemachine+0x1610>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d137      	bne.n	8005be0 <statemachine+0x13c0>
					 					 ssd1306_Fill(Black);
 8005b70:	2000      	movs	r0, #0
 8005b72:	f7fe f99f 	bl	8003eb4 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,12);
 8005b76:	210c      	movs	r1, #12
 8005b78:	2020      	movs	r0, #32
 8005b7a:	f7fe fadd 	bl	8004138 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005b7e:	4aa9      	ldr	r2, [pc, #676]	@ (8005e24 <statemachine+0x1604>)
 8005b80:	2301      	movs	r3, #1
 8005b82:	ca06      	ldmia	r2, {r1, r2}
 8005b84:	48ab      	ldr	r0, [pc, #684]	@ (8005e34 <statemachine+0x1614>)
 8005b86:	f7fe fab1 	bl	80040ec <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,20);
 8005b8a:	2114      	movs	r1, #20
 8005b8c:	2020      	movs	r0, #32
 8005b8e:	f7fe fad3 	bl	8004138 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8005b92:	4aa9      	ldr	r2, [pc, #676]	@ (8005e38 <statemachine+0x1618>)
 8005b94:	2301      	movs	r3, #1
 8005b96:	ca06      	ldmia	r2, {r1, r2}
 8005b98:	48a8      	ldr	r0, [pc, #672]	@ (8005e3c <statemachine+0x161c>)
 8005b9a:	f7fe faa7 	bl	80040ec <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,30);
 8005b9e:	211e      	movs	r1, #30
 8005ba0:	2020      	movs	r0, #32
 8005ba2:	f7fe fac9 	bl	8004138 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8005ba6:	4ba6      	ldr	r3, [pc, #664]	@ (8005e40 <statemachine+0x1620>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb2:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8005e44 <statemachine+0x1624>
 8005bb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bba:	ee16 0a90 	vmov	r0, s13
 8005bbe:	f7fa fc9b 	bl	80004f8 <__aeabi_f2d>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	e9cd 2300 	strd	r2, r3, [sp]
 8005bca:	4a9f      	ldr	r2, [pc, #636]	@ (8005e48 <statemachine+0x1628>)
 8005bcc:	2132      	movs	r1, #50	@ 0x32
 8005bce:	489f      	ldr	r0, [pc, #636]	@ (8005e4c <statemachine+0x162c>)
 8005bd0:	f015 fbb0 	bl	801b334 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005bd4:	4a93      	ldr	r2, [pc, #588]	@ (8005e24 <statemachine+0x1604>)
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	ca06      	ldmia	r2, {r1, r2}
 8005bda:	489c      	ldr	r0, [pc, #624]	@ (8005e4c <statemachine+0x162c>)
 8005bdc:	f7fe fa86 	bl	80040ec <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8005be0:	4b9b      	ldr	r3, [pc, #620]	@ (8005e50 <statemachine+0x1630>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dd7a      	ble.n	8005cde <statemachine+0x14be>
				 						erasetime=HAL_GetTick();
 8005be8:	f001 fa1c 	bl	8007024 <HAL_GetTick>
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b93      	ldr	r3, [pc, #588]	@ (8005e40 <statemachine+0x1620>)
 8005bf2:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e03f      	b.n	8005c7a <statemachine+0x145a>
				 							ssd1306_Fill(Black);
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f7fe f95a 	bl	8003eb4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005c00:	2120      	movs	r1, #32
 8005c02:	2020      	movs	r0, #32
 8005c04:	f7fe fa98 	bl	8004138 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8005c08:	4a86      	ldr	r2, [pc, #536]	@ (8005e24 <statemachine+0x1604>)
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	ca06      	ldmia	r2, {r1, r2}
 8005c0e:	4889      	ldr	r0, [pc, #548]	@ (8005e34 <statemachine+0x1614>)
 8005c10:	f7fe fa6c 	bl	80040ec <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4619      	mov	r1, r3
 8005c18:	488e      	ldr	r0, [pc, #568]	@ (8005e54 <statemachine+0x1634>)
 8005c1a:	f011 fcd4 	bl	80175c6 <SPIF_EraseSector>
				 							if(i>=1){
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dd21      	ble.n	8005c68 <statemachine+0x1448>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2264      	movs	r2, #100	@ 0x64
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005c34:	4b88      	ldr	r3, [pc, #544]	@ (8005e58 <statemachine+0x1638>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	da00      	bge.n	8005c3e <statemachine+0x141e>
 8005c3c:	330f      	adds	r3, #15
 8005c3e:	111b      	asrs	r3, r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fa fc47 	bl	80004d4 <__aeabi_i2d>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f7fa ff5b 	bl	8000b08 <__aeabi_d2iz>
 8005c52:	ee07 0a90 	vmov	s15, r0
 8005c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c5a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005c5e:	eeb0 0a47 	vmov.f32	s0, s14
 8005c62:	f7fe fd7d 	bl	8004760 <percentage>
 8005c66:	e003      	b.n	8005c70 <statemachine+0x1450>
				 								percentage((float) 0);
 8005c68:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8005e5c <statemachine+0x163c>
 8005c6c:	f7fe fd78 	bl	8004760 <percentage>
				 							ssd1306_UpdateScreen();
 8005c70:	f7fe f938 	bl	8003ee4 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	4b77      	ldr	r3, [pc, #476]	@ (8005e58 <statemachine+0x1638>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	da00      	bge.n	8005c84 <statemachine+0x1464>
 8005c82:	330f      	adds	r3, #15
 8005c84:	111b      	asrs	r3, r3, #4
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fa fc24 	bl	80004d4 <__aeabi_i2d>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4610      	mov	r0, r2
 8005c92:	4619      	mov	r1, r3
 8005c94:	f7fa ff38 	bl	8000b08 <__aeabi_d2iz>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	ddac      	ble.n	8005bfa <statemachine+0x13da>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005ca0:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8005ca4:	486b      	ldr	r0, [pc, #428]	@ (8005e54 <statemachine+0x1634>)
 8005ca6:	f011 fc8e 	bl	80175c6 <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8005caa:	f001 f9bb 	bl	8007024 <HAL_GetTick>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4a63      	ldr	r2, [pc, #396]	@ (8005e40 <statemachine+0x1620>)
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	4b61      	ldr	r3, [pc, #388]	@ (8005e40 <statemachine+0x1620>)
 8005cba:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8005cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8005e30 <statemachine+0x1610>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8005cc2:	4b67      	ldr	r3, [pc, #412]	@ (8005e60 <statemachine+0x1640>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8005cc8:	4b63      	ldr	r3, [pc, #396]	@ (8005e58 <statemachine+0x1638>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8005cce:	f7fd ff15 	bl	8003afc <storeindex>
				 						BTN_A=0;
 8005cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005e50 <statemachine+0x1630>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8005cd8:	4b62      	ldr	r3, [pc, #392]	@ (8005e64 <statemachine+0x1644>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8005cde:	4b61      	ldr	r3, [pc, #388]	@ (8005e64 <statemachine+0x1644>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f340 8123 	ble.w	8005f2e <statemachine+0x170e>
					 						usbstate++;
 8005ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8005e68 <statemachine+0x1648>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	4b5d      	ldr	r3, [pc, #372]	@ (8005e68 <statemachine+0x1648>)
 8005cf2:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8005cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8005e64 <statemachine+0x1644>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8005cfa:	4b55      	ldr	r3, [pc, #340]	@ (8005e50 <statemachine+0x1630>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
				 			  break;
 8005d00:	e115      	b.n	8005f2e <statemachine+0x170e>
				 					ssd1306_Fill(Black);
 8005d02:	2000      	movs	r0, #0
 8005d04:	f7fe f8d6 	bl	8003eb4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,20);
 8005d08:	2114      	movs	r1, #20
 8005d0a:	2020      	movs	r0, #32
 8005d0c:	f7fe fa14 	bl	8004138 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005d10:	4a44      	ldr	r2, [pc, #272]	@ (8005e24 <statemachine+0x1604>)
 8005d12:	2301      	movs	r3, #1
 8005d14:	ca06      	ldmia	r2, {r1, r2}
 8005d16:	4855      	ldr	r0, [pc, #340]	@ (8005e6c <statemachine+0x164c>)
 8005d18:	f7fe f9e8 	bl	80040ec <ssd1306_WriteString>
				 					if(pagenumber>0){
 8005d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8005e58 <statemachine+0x1638>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f340 80b1 	ble.w	8005e88 <statemachine+0x1668>
				 					int i=0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 8005d2a:	4b51      	ldr	r3, [pc, #324]	@ (8005e70 <statemachine+0x1650>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d165      	bne.n	8005dfe <statemachine+0x15de>
				 						while(i<pagenumber){
 8005d32:	e036      	b.n	8005da2 <statemachine+0x1582>
				 							ssd1306_Fill(Black);
 8005d34:	2000      	movs	r0, #0
 8005d36:	f7fe f8bd 	bl	8003eb4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,12);
 8005d3a:	210c      	movs	r1, #12
 8005d3c:	2020      	movs	r0, #32
 8005d3e:	f7fe f9fb 	bl	8004138 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005d42:	4a38      	ldr	r2, [pc, #224]	@ (8005e24 <statemachine+0x1604>)
 8005d44:	2301      	movs	r3, #1
 8005d46:	ca06      	ldmia	r2, {r1, r2}
 8005d48:	4848      	ldr	r0, [pc, #288]	@ (8005e6c <statemachine+0x164c>)
 8005d4a:	f7fe f9cf 	bl	80040ec <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	2300      	movs	r3, #0
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d58:	4a46      	ldr	r2, [pc, #280]	@ (8005e74 <statemachine+0x1654>)
 8005d5a:	483e      	ldr	r0, [pc, #248]	@ (8005e54 <statemachine+0x1634>)
 8005d5c:	f011 fcd4 	bl	8017708 <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8005d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d64:	4843      	ldr	r0, [pc, #268]	@ (8005e74 <statemachine+0x1654>)
 8005d66:	f012 fd29 	bl	80187bc <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2264      	movs	r2, #100	@ 0x64
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d7a:	4b37      	ldr	r3, [pc, #220]	@ (8005e58 <statemachine+0x1638>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d8a:	eeb0 0a66 	vmov.f32	s0, s13
 8005d8e:	f7fe fce7 	bl	8004760 <percentage>
				 							ssd1306_UpdateScreen();
 8005d92:	f7fe f8a7 	bl	8003ee4 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8005d96:	207d      	movs	r0, #125	@ 0x7d
 8005d98:	f7fb fcc9 	bl	800172e <HAL_Delay>
				 							i++;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 8005da2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e58 <statemachine+0x1638>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	dbc3      	blt.n	8005d34 <statemachine+0x1514>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8005dac:	4b2a      	ldr	r3, [pc, #168]	@ (8005e58 <statemachine+0x1638>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4619      	mov	r1, r3
 8005db2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e60 <statemachine+0x1640>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8005e74 <statemachine+0x1654>)
 8005dc0:	4824      	ldr	r0, [pc, #144]	@ (8005e54 <statemachine+0x1634>)
 8005dc2:	f011 fca1 	bl	8017708 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8005dc6:	4b26      	ldr	r3, [pc, #152]	@ (8005e60 <statemachine+0x1640>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4829      	ldr	r0, [pc, #164]	@ (8005e74 <statemachine+0x1654>)
 8005dd0:	f012 fcf4 	bl	80187bc <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8005dd4:	207d      	movs	r0, #125	@ 0x7d
 8005dd6:	f7fb fcaa 	bl	800172e <HAL_Delay>
				 						int taillefin=0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8005dde:	4a26      	ldr	r2, [pc, #152]	@ (8005e78 <statemachine+0x1658>)
 8005de0:	2140      	movs	r1, #64	@ 0x40
 8005de2:	4826      	ldr	r0, [pc, #152]	@ (8005e7c <statemachine+0x165c>)
 8005de4:	f015 faa6 	bl	801b334 <sniprintf>
 8005de8:	6078      	str	r0, [r7, #4]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	4822      	ldr	r0, [pc, #136]	@ (8005e7c <statemachine+0x165c>)
 8005df2:	f012 fce3 	bl	80187bc <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8005df6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e70 <statemachine+0x1650>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	e003      	b.n	8005e06 <statemachine+0x15e6>
				 						usbpercent=1;
 8005dfe:	4b20      	ldr	r3, [pc, #128]	@ (8005e80 <statemachine+0x1660>)
 8005e00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005e04:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8005e06:	2000      	movs	r0, #0
 8005e08:	f7fe f854 	bl	8003eb4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,35);
 8005e0c:	2123      	movs	r1, #35	@ 0x23
 8005e0e:	2020      	movs	r0, #32
 8005e10:	f7fe f992 	bl	8004138 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8005e14:	4a08      	ldr	r2, [pc, #32]	@ (8005e38 <statemachine+0x1618>)
 8005e16:	2301      	movs	r3, #1
 8005e18:	ca06      	ldmia	r2, {r1, r2}
 8005e1a:	481a      	ldr	r0, [pc, #104]	@ (8005e84 <statemachine+0x1664>)
 8005e1c:	f7fe f966 	bl	80040ec <ssd1306_WriteString>
 8005e20:	e049      	b.n	8005eb6 <statemachine+0x1696>
 8005e22:	bf00      	nop
 8005e24:	20000014 	.word	0x20000014
 8005e28:	0801fba8 	.word	0x0801fba8
 8005e2c:	0801fbb0 	.word	0x0801fbb0
 8005e30:	20000b54 	.word	0x20000b54
 8005e34:	0801fb98 	.word	0x0801fb98
 8005e38:	2000001c 	.word	0x2000001c
 8005e3c:	0801fbbc 	.word	0x0801fbbc
 8005e40:	20000b50 	.word	0x20000b50
 8005e44:	447a0000 	.word	0x447a0000
 8005e48:	0801fbc0 	.word	0x0801fbc0
 8005e4c:	20000ac0 	.word	0x20000ac0
 8005e50:	20000860 	.word	0x20000860
 8005e54:	20000868 	.word	0x20000868
 8005e58:	20000aa0 	.word	0x20000aa0
 8005e5c:	00000000 	.word	0x00000000
 8005e60:	20000a9c 	.word	0x20000a9c
 8005e64:	20000864 	.word	0x20000864
 8005e68:	200005d8 	.word	0x200005d8
 8005e6c:	0801fbc8 	.word	0x0801fbc8
 8005e70:	20000b58 	.word	0x20000b58
 8005e74:	2000099c 	.word	0x2000099c
 8005e78:	0801fbd0 	.word	0x0801fbd0
 8005e7c:	20000af4 	.word	0x20000af4
 8005e80:	20000b5c 	.word	0x20000b5c
 8005e84:	0801fbe0 	.word	0x0801fbe0
				 							ssd1306_Fill(Black);
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f7fe f813 	bl	8003eb4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,20);
 8005e8e:	2114      	movs	r1, #20
 8005e90:	2020      	movs	r0, #32
 8005e92:	f7fe f951 	bl	8004138 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005e96:	4a61      	ldr	r2, [pc, #388]	@ (800601c <statemachine+0x17fc>)
 8005e98:	2301      	movs	r3, #1
 8005e9a:	ca06      	ldmia	r2, {r1, r2}
 8005e9c:	4860      	ldr	r0, [pc, #384]	@ (8006020 <statemachine+0x1800>)
 8005e9e:	f7fe f925 	bl	80040ec <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,28);
 8005ea2:	211c      	movs	r1, #28
 8005ea4:	2020      	movs	r0, #32
 8005ea6:	f7fe f947 	bl	8004138 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 8005eaa:	4a5c      	ldr	r2, [pc, #368]	@ (800601c <statemachine+0x17fc>)
 8005eac:	2301      	movs	r3, #1
 8005eae:	ca06      	ldmia	r2, {r1, r2}
 8005eb0:	485c      	ldr	r0, [pc, #368]	@ (8006024 <statemachine+0x1804>)
 8005eb2:	f7fe f91b 	bl	80040ec <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8005eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8006028 <statemachine+0x1808>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	dd11      	ble.n	8005ee2 <statemachine+0x16c2>
				 									 						usbstate--;
 8005ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800602c <statemachine+0x180c>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	4b59      	ldr	r3, [pc, #356]	@ (800602c <statemachine+0x180c>)
 8005ec8:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8005eca:	4b58      	ldr	r3, [pc, #352]	@ (800602c <statemachine+0x180c>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	4b56      	ldr	r3, [pc, #344]	@ (800602c <statemachine+0x180c>)
 8005ed4:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8005ed6:	4b54      	ldr	r3, [pc, #336]	@ (8006028 <statemachine+0x1808>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8005edc:	4b54      	ldr	r3, [pc, #336]	@ (8006030 <statemachine+0x1810>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005ee2:	4b53      	ldr	r3, [pc, #332]	@ (8006030 <statemachine+0x1810>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dd0b      	ble.n	8005f02 <statemachine+0x16e2>
				 									  			 	state++;
 8005eea:	4b52      	ldr	r3, [pc, #328]	@ (8006034 <statemachine+0x1814>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	4b50      	ldr	r3, [pc, #320]	@ (8006034 <statemachine+0x1814>)
 8005ef4:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8006030 <statemachine+0x1810>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005efc:	4b4a      	ldr	r3, [pc, #296]	@ (8006028 <statemachine+0x1808>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005f02:	4b4d      	ldr	r3, [pc, #308]	@ (8006038 <statemachine+0x1818>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dd13      	ble.n	8005f32 <statemachine+0x1712>
				 									 									  			 	state--;
 8005f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8006034 <statemachine+0x1814>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	4b48      	ldr	r3, [pc, #288]	@ (8006034 <statemachine+0x1814>)
 8005f14:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8005f16:	4b46      	ldr	r3, [pc, #280]	@ (8006030 <statemachine+0x1810>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 8005f1c:	4b42      	ldr	r3, [pc, #264]	@ (8006028 <statemachine+0x1808>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 8005f22:	4b45      	ldr	r3, [pc, #276]	@ (8006038 <statemachine+0x1818>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
				 					 break;
 8005f28:	e003      	b.n	8005f32 <statemachine+0x1712>
				 					  break;
 8005f2a:	bf00      	nop
 8005f2c:	e06b      	b.n	8006006 <statemachine+0x17e6>
				 			  break;
 8005f2e:	bf00      	nop
 8005f30:	e069      	b.n	8006006 <statemachine+0x17e6>
				 					 break;
 8005f32:	bf00      	nop
				  break;
 8005f34:	e067      	b.n	8006006 <statemachine+0x17e6>

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 8005f36:	2000      	movs	r0, #0
 8005f38:	f7fd ffbc 	bl	8003eb4 <ssd1306_Fill>
					  ssd1306_SetCursor(32,12);
 8005f3c:	210c      	movs	r1, #12
 8005f3e:	2020      	movs	r0, #32
 8005f40:	f7fe f8fa 	bl	8004138 <ssd1306_SetCursor>
					  ssd1306_WriteString("bluetooth",Font_6x8,White);
 8005f44:	4a35      	ldr	r2, [pc, #212]	@ (800601c <statemachine+0x17fc>)
 8005f46:	2301      	movs	r3, #1
 8005f48:	ca06      	ldmia	r2, {r1, r2}
 8005f4a:	483c      	ldr	r0, [pc, #240]	@ (800603c <statemachine+0x181c>)
 8005f4c:	f7fe f8ce 	bl	80040ec <ssd1306_WriteString>
					  ssd1306_SetCursor(32,20);
 8005f50:	2114      	movs	r1, #20
 8005f52:	2020      	movs	r0, #32
 8005f54:	f7fe f8f0 	bl	8004138 <ssd1306_SetCursor>

					  ssd1306_WriteString((char *) blereceivebuf, Font_7x10, White);
 8005f58:	4a39      	ldr	r2, [pc, #228]	@ (8006040 <statemachine+0x1820>)
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	ca06      	ldmia	r2, {r1, r2}
 8005f5e:	4839      	ldr	r0, [pc, #228]	@ (8006044 <statemachine+0x1824>)
 8005f60:	f7fe f8c4 	bl	80040ec <ssd1306_WriteString>



					  if(BTN_B>=1){
 8005f64:	4b30      	ldr	r3, [pc, #192]	@ (8006028 <statemachine+0x1808>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dd08      	ble.n	8005f7e <statemachine+0x175e>


						  bluetoothsend=1;
 8005f6c:	4b36      	ldr	r3, [pc, #216]	@ (8006048 <statemachine+0x1828>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
						  BTN_B=0;
 8005f72:	4b2d      	ldr	r3, [pc, #180]	@ (8006028 <statemachine+0x1808>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
						  BTN_B_LONG=0;
 8005f78:	4b34      	ldr	r3, [pc, #208]	@ (800604c <statemachine+0x182c>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
					  }


				  if(BTN_A>=1){
 8005f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8006030 <statemachine+0x1810>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	dd23      	ble.n	8005fce <statemachine+0x17ae>
						state--;
 8005f86:	4b2b      	ldr	r3, [pc, #172]	@ (8006034 <statemachine+0x1814>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4b29      	ldr	r3, [pc, #164]	@ (8006034 <statemachine+0x1814>)
 8005f90:	701a      	strb	r2, [r3, #0]
						state--;
 8005f92:	4b28      	ldr	r3, [pc, #160]	@ (8006034 <statemachine+0x1814>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	4b26      	ldr	r3, [pc, #152]	@ (8006034 <statemachine+0x1814>)
 8005f9c:	701a      	strb	r2, [r3, #0]
						state--;
 8005f9e:	4b25      	ldr	r3, [pc, #148]	@ (8006034 <statemachine+0x1814>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	4b23      	ldr	r3, [pc, #140]	@ (8006034 <statemachine+0x1814>)
 8005fa8:	701a      	strb	r2, [r3, #0]
						state--;
 8005faa:	4b22      	ldr	r3, [pc, #136]	@ (8006034 <statemachine+0x1814>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b20      	ldr	r3, [pc, #128]	@ (8006034 <statemachine+0x1814>)
 8005fb4:	701a      	strb	r2, [r3, #0]
						state--;
 8005fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8006034 <statemachine+0x1814>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006034 <statemachine+0x1814>)
 8005fc0:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 8005fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <statemachine+0x1810>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 8005fc8:	4b17      	ldr	r3, [pc, #92]	@ (8006028 <statemachine+0x1808>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 8005fce:	4b1a      	ldr	r3, [pc, #104]	@ (8006038 <statemachine+0x1818>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	dd19      	ble.n	800600a <statemachine+0x17ea>
							state--;
 8005fd6:	4b17      	ldr	r3, [pc, #92]	@ (8006034 <statemachine+0x1814>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	4b15      	ldr	r3, [pc, #84]	@ (8006034 <statemachine+0x1814>)
 8005fe0:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005fe2:	4b13      	ldr	r3, [pc, #76]	@ (8006030 <statemachine+0x1810>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8006028 <statemachine+0x1808>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 8005fee:	4b12      	ldr	r3, [pc, #72]	@ (8006038 <statemachine+0x1818>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
							}



					  break;
 8005ff4:	e009      	b.n	800600a <statemachine+0x17ea>
				  break;
 8005ff6:	bf00      	nop
 8005ff8:	e008      	b.n	800600c <statemachine+0x17ec>
					  break;
 8005ffa:	bf00      	nop
 8005ffc:	e006      	b.n	800600c <statemachine+0x17ec>
			  break;
 8005ffe:	bf00      	nop
 8006000:	e004      	b.n	800600c <statemachine+0x17ec>
			  break;
 8006002:	bf00      	nop
 8006004:	e002      	b.n	800600c <statemachine+0x17ec>
				  break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <statemachine+0x17ec>
					  break;
 800600a:	bf00      	nop




	}
return ;
 800600c:	bf00      	nop
 800600e:	bf00      	nop
}
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	ecbd 8b02 	vpop	{d8}
 8006018:	bdb0      	pop	{r4, r5, r7, pc}
 800601a:	bf00      	nop
 800601c:	20000014 	.word	0x20000014
 8006020:	0801fbc8 	.word	0x0801fbc8
 8006024:	0801fbe8 	.word	0x0801fbe8
 8006028:	20000864 	.word	0x20000864
 800602c:	200005d8 	.word	0x200005d8
 8006030:	20000860 	.word	0x20000860
 8006034:	200005d4 	.word	0x200005d4
 8006038:	20000ba0 	.word	0x20000ba0
 800603c:	0801fbf0 	.word	0x0801fbf0
 8006040:	2000001c 	.word	0x2000001c
 8006044:	20000ba8 	.word	0x20000ba8
 8006048:	20000ba4 	.word	0x20000ba4
 800604c:	20000b9c 	.word	0x20000b9c

08006050 <LL_AHB3_GRP1_EnableClock>:
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800605c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800605e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4313      	orrs	r3, r2
 8006066:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800606c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4013      	ands	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006074:	68fb      	ldr	r3, [r7, #12]
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006086:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800608a:	f7ff ffe1 	bl	8006050 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800608e:	2200      	movs	r2, #0
 8006090:	2100      	movs	r1, #0
 8006092:	202e      	movs	r0, #46	@ 0x2e
 8006094:	f002 f9a5 	bl	80083e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006098:	202e      	movs	r0, #46	@ 0x2e
 800609a:	f002 f9bc 	bl	8008416 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800609e:	bf00      	nop
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 80060a8:	2114      	movs	r1, #20
 80060aa:	2020      	movs	r0, #32
 80060ac:	f7fe f844 	bl	8004138 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 80060b0:	4a04      	ldr	r2, [pc, #16]	@ (80060c4 <NMI_Handler+0x20>)
 80060b2:	2301      	movs	r3, #1
 80060b4:	ca06      	ldmia	r2, {r1, r2}
 80060b6:	4804      	ldr	r0, [pc, #16]	@ (80060c8 <NMI_Handler+0x24>)
 80060b8:	f7fe f818 	bl	80040ec <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 80060bc:	f7fd ff12 	bl	8003ee4 <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 80060c0:	bf00      	nop
 80060c2:	e7f1      	b.n	80060a8 <NMI_Handler+0x4>
 80060c4:	2000001c 	.word	0x2000001c
 80060c8:	0801fbfc 	.word	0x0801fbfc

080060cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80060d0:	2114      	movs	r1, #20
 80060d2:	2020      	movs	r0, #32
 80060d4:	f7fe f830 	bl	8004138 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80060d8:	4a04      	ldr	r2, [pc, #16]	@ (80060ec <HardFault_Handler+0x20>)
 80060da:	2301      	movs	r3, #1
 80060dc:	ca06      	ldmia	r2, {r1, r2}
 80060de:	4804      	ldr	r0, [pc, #16]	@ (80060f0 <HardFault_Handler+0x24>)
 80060e0:	f7fe f804 	bl	80040ec <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80060e4:	f7fd fefe 	bl	8003ee4 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80060e8:	bf00      	nop
 80060ea:	e7f1      	b.n	80060d0 <HardFault_Handler+0x4>
 80060ec:	2000001c 	.word	0x2000001c
 80060f0:	0801fc00 	.word	0x0801fc00

080060f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80060f8:	2114      	movs	r1, #20
 80060fa:	2020      	movs	r0, #32
 80060fc:	f7fe f81c 	bl	8004138 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 8006100:	4a04      	ldr	r2, [pc, #16]	@ (8006114 <MemManage_Handler+0x20>)
 8006102:	2301      	movs	r3, #1
 8006104:	ca06      	ldmia	r2, {r1, r2}
 8006106:	4804      	ldr	r0, [pc, #16]	@ (8006118 <MemManage_Handler+0x24>)
 8006108:	f7fd fff0 	bl	80040ec <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 800610c:	f7fd feea 	bl	8003ee4 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006110:	bf00      	nop
 8006112:	e7f1      	b.n	80060f8 <MemManage_Handler+0x4>
 8006114:	2000001c 	.word	0x2000001c
 8006118:	0801fc0c 	.word	0x0801fc0c

0800611c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006120:	2114      	movs	r1, #20
 8006122:	2020      	movs	r0, #32
 8006124:	f7fe f808 	bl	8004138 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8006128:	4a04      	ldr	r2, [pc, #16]	@ (800613c <BusFault_Handler+0x20>)
 800612a:	2301      	movs	r3, #1
 800612c:	ca06      	ldmia	r2, {r1, r2}
 800612e:	4804      	ldr	r0, [pc, #16]	@ (8006140 <BusFault_Handler+0x24>)
 8006130:	f7fd ffdc 	bl	80040ec <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006134:	f7fd fed6 	bl	8003ee4 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006138:	bf00      	nop
 800613a:	e7f1      	b.n	8006120 <BusFault_Handler+0x4>
 800613c:	2000001c 	.word	0x2000001c
 8006140:	0801fc10 	.word	0x0801fc10

08006144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006148:	2114      	movs	r1, #20
 800614a:	2020      	movs	r0, #32
 800614c:	f7fd fff4 	bl	8004138 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 8006150:	4a04      	ldr	r2, [pc, #16]	@ (8006164 <UsageFault_Handler+0x20>)
 8006152:	2301      	movs	r3, #1
 8006154:	ca06      	ldmia	r2, {r1, r2}
 8006156:	4804      	ldr	r0, [pc, #16]	@ (8006168 <UsageFault_Handler+0x24>)
 8006158:	f7fd ffc8 	bl	80040ec <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 800615c:	f7fd fec2 	bl	8003ee4 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006160:	bf00      	nop
 8006162:	e7f1      	b.n	8006148 <UsageFault_Handler+0x4>
 8006164:	2000001c 	.word	0x2000001c
 8006168:	0801fc14 	.word	0x0801fc14

0800616c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006170:	bf00      	nop
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800617a:	b480      	push	{r7}
 800617c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800617e:	bf00      	nop
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800619a:	f000 ff2f 	bl	8006ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800619e:	bf00      	nop
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80061a6:	f7fb ff23 	bl	8001ff0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80061b4:	4802      	ldr	r0, [pc, #8]	@ (80061c0 <DMA1_Channel1_IRQHandler+0x10>)
 80061b6:	f002 fbea 	bl	800898e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80061ba:	bf00      	nop
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	200003f0 	.word	0x200003f0

080061c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80061c8:	4802      	ldr	r0, [pc, #8]	@ (80061d4 <DMA1_Channel2_IRQHandler+0x10>)
 80061ca:	f002 fbe0 	bl	800898e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80061ce:	bf00      	nop
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20001478 	.word	0x20001478

080061d8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80061dc:	4802      	ldr	r0, [pc, #8]	@ (80061e8 <DMA1_Channel3_IRQHandler+0x10>)
 80061de:	f002 fbd6 	bl	800898e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80061e2:	bf00      	nop
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000da0 	.word	0x20000da0

080061ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80061f0:	4802      	ldr	r0, [pc, #8]	@ (80061fc <DMA1_Channel4_IRQHandler+0x10>)
 80061f2:	f002 fbcc 	bl	800898e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80061f6:	bf00      	nop
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000e00 	.word	0x20000e00

08006200 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006204:	4802      	ldr	r0, [pc, #8]	@ (8006210 <USB_LP_IRQHandler+0x10>)
 8006206:	f003 fe5f 	bl	8009ec8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800620a:	bf00      	nop
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20002ccc 	.word	0x20002ccc

08006214 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006218:	4805      	ldr	r0, [pc, #20]	@ (8006230 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 800621a:	f008 fd76 	bl	800ed0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 800621e:	f000 fa79 	bl	8006714 <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8006222:	2101      	movs	r1, #1
 8006224:	4803      	ldr	r0, [pc, #12]	@ (8006234 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8006226:	f002 ff8d 	bl	8009144 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800622a:	bf00      	nop
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200012b8 	.word	0x200012b8
 8006234:	48000400 	.word	0x48000400

08006238 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800623c:	4808      	ldr	r0, [pc, #32]	@ (8006260 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 800623e:	f008 fd64 	bl	800ed0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8006242:	2102      	movs	r1, #2
 8006244:	4807      	ldr	r0, [pc, #28]	@ (8006264 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8006246:	f002 ff7d 	bl	8009144 <HAL_GPIO_TogglePin>
  cptdoubledonnee+=1;
 800624a:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3301      	adds	r3, #1
 8006250:	4a05      	ldr	r2, [pc, #20]	@ (8006268 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 8006252:	6013      	str	r3, [r2, #0]
  enablewrite=1;
 8006254:	4b05      	ldr	r3, [pc, #20]	@ (800626c <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800625a:	bf00      	nop
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20001304 	.word	0x20001304
 8006264:	48000400 	.word	0x48000400
 8006268:	20000b64 	.word	0x20000b64
 800626c:	20000b80 	.word	0x20000b80

08006270 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006274:	4802      	ldr	r0, [pc, #8]	@ (8006280 <SPI1_IRQHandler+0x10>)
 8006276:	f007 ffdb 	bl	800e230 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000d3c 	.word	0x20000d3c

08006284 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006288:	4802      	ldr	r0, [pc, #8]	@ (8006294 <LPUART1_IRQHandler+0x10>)
 800628a:	f009 fad5 	bl	800f838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800628e:	bf00      	nop
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20001350 	.word	0x20001350

08006298 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800629c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80062a0:	f002 ff6a 	bl	8009178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80062a4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80062a8:	f002 ff66 	bl	8009178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80062ac:	bf00      	nop
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80062b4:	f012 f870 	bl	8018398 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80062b8:	bf00      	nop
 80062ba:	bd80      	pop	{r7, pc}

080062bc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80062c0:	f012 f8a0 	bl	8018404 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80062c4:	bf00      	nop
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80062cc:	f002 ff6c 	bl	80091a8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80062d0:	bf00      	nop
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  return 1;
 80062d8:	2301      	movs	r3, #1
}
 80062da:	4618      	mov	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <_kill>:

int _kill(int pid, int sig)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80062ee:	f015 f99f 	bl	801b630 <__errno>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2216      	movs	r2, #22
 80062f6:	601a      	str	r2, [r3, #0]
  return -1;
 80062f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <_exit>:

void _exit (int status)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800630c:	f04f 31ff 	mov.w	r1, #4294967295
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ffe7 	bl	80062e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <_exit+0x12>

0800631a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b086      	sub	sp, #24
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e00a      	b.n	8006342 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800632c:	f3af 8000 	nop.w
 8006330:	4601      	mov	r1, r0
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	60ba      	str	r2, [r7, #8]
 8006338:	b2ca      	uxtb	r2, r1
 800633a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	3301      	adds	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	dbf0      	blt.n	800632c <_read+0x12>
  }

  return len;
 800634a:	687b      	ldr	r3, [r7, #4]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	e009      	b.n	800637a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	60ba      	str	r2, [r7, #8]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3301      	adds	r3, #1
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	429a      	cmp	r2, r3
 8006380:	dbf1      	blt.n	8006366 <_write+0x12>
  }
  return len;
 8006382:	687b      	ldr	r3, [r7, #4]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <_close>:

int _close(int file)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80063b4:	605a      	str	r2, [r3, #4]
  return 0;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <_isatty>:

int _isatty(int file)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80063cc:	2301      	movs	r3, #1
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063fc:	4a14      	ldr	r2, [pc, #80]	@ (8006450 <_sbrk+0x5c>)
 80063fe:	4b15      	ldr	r3, [pc, #84]	@ (8006454 <_sbrk+0x60>)
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006408:	4b13      	ldr	r3, [pc, #76]	@ (8006458 <_sbrk+0x64>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006410:	4b11      	ldr	r3, [pc, #68]	@ (8006458 <_sbrk+0x64>)
 8006412:	4a12      	ldr	r2, [pc, #72]	@ (800645c <_sbrk+0x68>)
 8006414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006416:	4b10      	ldr	r3, [pc, #64]	@ (8006458 <_sbrk+0x64>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4413      	add	r3, r2
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	429a      	cmp	r2, r3
 8006422:	d207      	bcs.n	8006434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006424:	f015 f904 	bl	801b630 <__errno>
 8006428:	4603      	mov	r3, r0
 800642a:	220c      	movs	r2, #12
 800642c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	e009      	b.n	8006448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006434:	4b08      	ldr	r3, [pc, #32]	@ (8006458 <_sbrk+0x64>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800643a:	4b07      	ldr	r3, [pc, #28]	@ (8006458 <_sbrk+0x64>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	4a05      	ldr	r2, [pc, #20]	@ (8006458 <_sbrk+0x64>)
 8006444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006446:	68fb      	ldr	r3, [r7, #12]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20030000 	.word	0x20030000
 8006454:	00000400 	.word	0x00000400
 8006458:	20001268 	.word	0x20001268
 800645c:	200033b8 	.word	0x200033b8

08006460 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8006464:	4b24      	ldr	r3, [pc, #144]	@ (80064f8 <SystemInit+0x98>)
 8006466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646a:	4a23      	ldr	r2, [pc, #140]	@ (80064f8 <SystemInit+0x98>)
 800646c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006470:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800647e:	f043 0301 	orr.w	r3, r3, #1
 8006482:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006488:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800648c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800648e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006498:	4b18      	ldr	r3, [pc, #96]	@ (80064fc <SystemInit+0x9c>)
 800649a:	4013      	ands	r3, r2
 800649c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800649e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064aa:	f023 0305 	bic.w	r3, r3, #5
 80064ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80064b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80064c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006500 <SystemInit+0xa0>)
 80064cc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80064ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006500 <SystemInit+0xa0>)
 80064d4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80064d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80064e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ea:	2200      	movs	r2, #0
 80064ec:	619a      	str	r2, [r3, #24]
}
 80064ee:	bf00      	nop
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	e000ed00 	.word	0xe000ed00
 80064fc:	faf6fefb 	.word	0xfaf6fefb
 8006500:	22041000 	.word	0x22041000

08006504 <LL_APB1_GRP1_EnableClock>:
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800650c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006510:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006512:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4313      	orrs	r3, r2
 800651a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800651c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006520:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4013      	ands	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006528:	68fb      	ldr	r3, [r7, #12]
}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <LL_APB2_GRP1_EnableClock>:
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800653e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006542:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006544:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4313      	orrs	r3, r2
 800654c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800654e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006552:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4013      	ands	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	bf00      	nop
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800656e:	f107 0310 	add.w	r3, r7, #16
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	605a      	str	r2, [r3, #4]
 8006578:	609a      	str	r2, [r3, #8]
 800657a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800657c:	1d3b      	adds	r3, r7, #4
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	605a      	str	r2, [r3, #4]
 8006584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006586:	4b1e      	ldr	r3, [pc, #120]	@ (8006600 <MX_TIM2_Init+0x98>)
 8006588:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800658c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 800658e:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <MX_TIM2_Init+0x98>)
 8006590:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8006594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006596:	4b1a      	ldr	r3, [pc, #104]	@ (8006600 <MX_TIM2_Init+0x98>)
 8006598:	2200      	movs	r2, #0
 800659a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800659c:	4b18      	ldr	r3, [pc, #96]	@ (8006600 <MX_TIM2_Init+0x98>)
 800659e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80065a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065a4:	4b16      	ldr	r3, [pc, #88]	@ (8006600 <MX_TIM2_Init+0x98>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065aa:	4b15      	ldr	r3, [pc, #84]	@ (8006600 <MX_TIM2_Init+0x98>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80065b0:	4813      	ldr	r0, [pc, #76]	@ (8006600 <MX_TIM2_Init+0x98>)
 80065b2:	f008 fa8f 	bl	800ead4 <HAL_TIM_Base_Init>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80065bc:	f7fc fb8e 	bl	8002cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80065c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80065c6:	f107 0310 	add.w	r3, r7, #16
 80065ca:	4619      	mov	r1, r3
 80065cc:	480c      	ldr	r0, [pc, #48]	@ (8006600 <MX_TIM2_Init+0x98>)
 80065ce:	f008 fca3 	bl	800ef18 <HAL_TIM_ConfigClockSource>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80065d8:	f7fc fb80 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80065dc:	2320      	movs	r3, #32
 80065de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80065e4:	1d3b      	adds	r3, r7, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4805      	ldr	r0, [pc, #20]	@ (8006600 <MX_TIM2_Init+0x98>)
 80065ea:	f008 fe9d 	bl	800f328 <HAL_TIMEx_MasterConfigSynchronization>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80065f4:	f7fc fb72 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80065f8:	bf00      	nop
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	2000126c 	.word	0x2000126c

08006604 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006608:	4b10      	ldr	r3, [pc, #64]	@ (800664c <MX_TIM16_Init+0x48>)
 800660a:	4a11      	ldr	r2, [pc, #68]	@ (8006650 <MX_TIM16_Init+0x4c>)
 800660c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 800660e:	4b0f      	ldr	r3, [pc, #60]	@ (800664c <MX_TIM16_Init+0x48>)
 8006610:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006614:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006616:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <MX_TIM16_Init+0x48>)
 8006618:	2200      	movs	r2, #0
 800661a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800661c:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <MX_TIM16_Init+0x48>)
 800661e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006622:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006624:	4b09      	ldr	r3, [pc, #36]	@ (800664c <MX_TIM16_Init+0x48>)
 8006626:	2200      	movs	r2, #0
 8006628:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800662a:	4b08      	ldr	r3, [pc, #32]	@ (800664c <MX_TIM16_Init+0x48>)
 800662c:	2200      	movs	r2, #0
 800662e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006630:	4b06      	ldr	r3, [pc, #24]	@ (800664c <MX_TIM16_Init+0x48>)
 8006632:	2200      	movs	r2, #0
 8006634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006636:	4805      	ldr	r0, [pc, #20]	@ (800664c <MX_TIM16_Init+0x48>)
 8006638:	f008 fa4c 	bl	800ead4 <HAL_TIM_Base_Init>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8006642:	f7fc fb4b 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200012b8 	.word	0x200012b8
 8006650:	40014400 	.word	0x40014400

08006654 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006658:	4b10      	ldr	r3, [pc, #64]	@ (800669c <MX_TIM17_Init+0x48>)
 800665a:	4a11      	ldr	r2, [pc, #68]	@ (80066a0 <MX_TIM17_Init+0x4c>)
 800665c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 800665e:	4b0f      	ldr	r3, [pc, #60]	@ (800669c <MX_TIM17_Init+0x48>)
 8006660:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006664:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006666:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <MX_TIM17_Init+0x48>)
 8006668:	2200      	movs	r2, #0
 800666a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800666c:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <MX_TIM17_Init+0x48>)
 800666e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006672:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006674:	4b09      	ldr	r3, [pc, #36]	@ (800669c <MX_TIM17_Init+0x48>)
 8006676:	2200      	movs	r2, #0
 8006678:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800667a:	4b08      	ldr	r3, [pc, #32]	@ (800669c <MX_TIM17_Init+0x48>)
 800667c:	2200      	movs	r2, #0
 800667e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006680:	4b06      	ldr	r3, [pc, #24]	@ (800669c <MX_TIM17_Init+0x48>)
 8006682:	2200      	movs	r2, #0
 8006684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006686:	4805      	ldr	r0, [pc, #20]	@ (800669c <MX_TIM17_Init+0x48>)
 8006688:	f008 fa24 	bl	800ead4 <HAL_TIM_Base_Init>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8006692:	f7fc fb23 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006696:	bf00      	nop
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20001304 	.word	0x20001304
 80066a0:	40014800 	.word	0x40014800

080066a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b4:	d103      	bne.n	80066be <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80066b6:	2001      	movs	r0, #1
 80066b8:	f7ff ff24 	bl	8006504 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80066bc:	e022      	b.n	8006704 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a12      	ldr	r2, [pc, #72]	@ (800670c <HAL_TIM_Base_MspInit+0x68>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d10c      	bne.n	80066e2 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80066c8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80066cc:	f7ff ff33 	bl	8006536 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80066d0:	2200      	movs	r2, #0
 80066d2:	2100      	movs	r1, #0
 80066d4:	2019      	movs	r0, #25
 80066d6:	f001 fe84 	bl	80083e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80066da:	2019      	movs	r0, #25
 80066dc:	f001 fe9b 	bl	8008416 <HAL_NVIC_EnableIRQ>
}
 80066e0:	e010      	b.n	8006704 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006710 <HAL_TIM_Base_MspInit+0x6c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d10b      	bne.n	8006704 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80066ec:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80066f0:	f7ff ff21 	bl	8006536 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80066f4:	2200      	movs	r2, #0
 80066f6:	2100      	movs	r1, #0
 80066f8:	201a      	movs	r0, #26
 80066fa:	f001 fe72 	bl	80083e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80066fe:	201a      	movs	r0, #26
 8006700:	f001 fe89 	bl	8008416 <HAL_NVIC_EnableIRQ>
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800

08006714 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0

	SEC+=1;
 8006718:	4b98      	ldr	r3, [pc, #608]	@ (800697c <updatedate+0x268>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	b2da      	uxtb	r2, r3
 8006720:	4b96      	ldr	r3, [pc, #600]	@ (800697c <updatedate+0x268>)
 8006722:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006724:	4b95      	ldr	r3, [pc, #596]	@ (800697c <updatedate+0x268>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b3b      	cmp	r3, #59	@ 0x3b
 800672a:	d908      	bls.n	800673e <updatedate+0x2a>
		SEC=0;
 800672c:	4b93      	ldr	r3, [pc, #588]	@ (800697c <updatedate+0x268>)
 800672e:	2200      	movs	r2, #0
 8006730:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006732:	4b93      	ldr	r3, [pc, #588]	@ (8006980 <updatedate+0x26c>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	b2da      	uxtb	r2, r3
 800673a:	4b91      	ldr	r3, [pc, #580]	@ (8006980 <updatedate+0x26c>)
 800673c:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 800673e:	4b90      	ldr	r3, [pc, #576]	@ (8006980 <updatedate+0x26c>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b3b      	cmp	r3, #59	@ 0x3b
 8006744:	d908      	bls.n	8006758 <updatedate+0x44>

		MINUTE=0;
 8006746:	4b8e      	ldr	r3, [pc, #568]	@ (8006980 <updatedate+0x26c>)
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
		HR+=1;
 800674c:	4b8d      	ldr	r3, [pc, #564]	@ (8006984 <updatedate+0x270>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	b2da      	uxtb	r2, r3
 8006754:	4b8b      	ldr	r3, [pc, #556]	@ (8006984 <updatedate+0x270>)
 8006756:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8006758:	4b8a      	ldr	r3, [pc, #552]	@ (8006984 <updatedate+0x270>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b17      	cmp	r3, #23
 800675e:	d908      	bls.n	8006772 <updatedate+0x5e>
		HR=0;
 8006760:	4b88      	ldr	r3, [pc, #544]	@ (8006984 <updatedate+0x270>)
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8006766:	4b88      	ldr	r3, [pc, #544]	@ (8006988 <updatedate+0x274>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	b2da      	uxtb	r2, r3
 800676e:	4b86      	ldr	r3, [pc, #536]	@ (8006988 <updatedate+0x274>)
 8006770:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8006772:	4b86      	ldr	r3, [pc, #536]	@ (800698c <updatedate+0x278>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b0b      	cmp	r3, #11
 8006778:	f200 8137 	bhi.w	80069ea <updatedate+0x2d6>
 800677c:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <updatedate+0x70>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	080067b5 	.word	0x080067b5
 8006788:	080067df 	.word	0x080067df
 800678c:	08006809 	.word	0x08006809
 8006790:	08006833 	.word	0x08006833
 8006794:	0800685d 	.word	0x0800685d
 8006798:	08006887 	.word	0x08006887
 800679c:	080068b1 	.word	0x080068b1
 80067a0:	080068db 	.word	0x080068db
 80067a4:	08006903 	.word	0x08006903
 80067a8:	0800692b 	.word	0x0800692b
 80067ac:	08006953 	.word	0x08006953
 80067b0:	08006995 	.word	0x08006995

	case JANVIER:
		if(JOURS>31){
 80067b4:	4b74      	ldr	r3, [pc, #464]	@ (8006988 <updatedate+0x274>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b1f      	cmp	r3, #31
 80067ba:	f240 80ff 	bls.w	80069bc <updatedate+0x2a8>
			JOURS=1;
 80067be:	4b72      	ldr	r3, [pc, #456]	@ (8006988 <updatedate+0x274>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
			mois++;
 80067c4:	4b71      	ldr	r3, [pc, #452]	@ (800698c <updatedate+0x278>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	4b6f      	ldr	r3, [pc, #444]	@ (800698c <updatedate+0x278>)
 80067ce:	701a      	strb	r2, [r3, #0]
			MOIS++;
 80067d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006990 <updatedate+0x27c>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	4b6d      	ldr	r3, [pc, #436]	@ (8006990 <updatedate+0x27c>)
 80067da:	701a      	strb	r2, [r3, #0]
		}

		break;
 80067dc:	e0ee      	b.n	80069bc <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 80067de:	4b6a      	ldr	r3, [pc, #424]	@ (8006988 <updatedate+0x274>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b1d      	cmp	r3, #29
 80067e4:	f240 80ec 	bls.w	80069c0 <updatedate+0x2ac>
					JOURS=1;
 80067e8:	4b67      	ldr	r3, [pc, #412]	@ (8006988 <updatedate+0x274>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]
					mois++;
 80067ee:	4b67      	ldr	r3, [pc, #412]	@ (800698c <updatedate+0x278>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	4b65      	ldr	r3, [pc, #404]	@ (800698c <updatedate+0x278>)
 80067f8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80067fa:	4b65      	ldr	r3, [pc, #404]	@ (8006990 <updatedate+0x27c>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	b2da      	uxtb	r2, r3
 8006802:	4b63      	ldr	r3, [pc, #396]	@ (8006990 <updatedate+0x27c>)
 8006804:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006806:	e0db      	b.n	80069c0 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8006808:	4b5f      	ldr	r3, [pc, #380]	@ (8006988 <updatedate+0x274>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b1f      	cmp	r3, #31
 800680e:	f240 80d9 	bls.w	80069c4 <updatedate+0x2b0>
					JOURS=1;
 8006812:	4b5d      	ldr	r3, [pc, #372]	@ (8006988 <updatedate+0x274>)
 8006814:	2201      	movs	r2, #1
 8006816:	701a      	strb	r2, [r3, #0]
					mois++;
 8006818:	4b5c      	ldr	r3, [pc, #368]	@ (800698c <updatedate+0x278>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	3301      	adds	r3, #1
 800681e:	b2da      	uxtb	r2, r3
 8006820:	4b5a      	ldr	r3, [pc, #360]	@ (800698c <updatedate+0x278>)
 8006822:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006824:	4b5a      	ldr	r3, [pc, #360]	@ (8006990 <updatedate+0x27c>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	b2da      	uxtb	r2, r3
 800682c:	4b58      	ldr	r3, [pc, #352]	@ (8006990 <updatedate+0x27c>)
 800682e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006830:	e0c8      	b.n	80069c4 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006832:	4b55      	ldr	r3, [pc, #340]	@ (8006988 <updatedate+0x274>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b1e      	cmp	r3, #30
 8006838:	f240 80c6 	bls.w	80069c8 <updatedate+0x2b4>
					JOURS=1;
 800683c:	4b52      	ldr	r3, [pc, #328]	@ (8006988 <updatedate+0x274>)
 800683e:	2201      	movs	r2, #1
 8006840:	701a      	strb	r2, [r3, #0]
					mois++;
 8006842:	4b52      	ldr	r3, [pc, #328]	@ (800698c <updatedate+0x278>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	3301      	adds	r3, #1
 8006848:	b2da      	uxtb	r2, r3
 800684a:	4b50      	ldr	r3, [pc, #320]	@ (800698c <updatedate+0x278>)
 800684c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800684e:	4b50      	ldr	r3, [pc, #320]	@ (8006990 <updatedate+0x27c>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	4b4e      	ldr	r3, [pc, #312]	@ (8006990 <updatedate+0x27c>)
 8006858:	701a      	strb	r2, [r3, #0]
				}
		break;
 800685a:	e0b5      	b.n	80069c8 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 800685c:	4b4a      	ldr	r3, [pc, #296]	@ (8006988 <updatedate+0x274>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b1f      	cmp	r3, #31
 8006862:	f240 80b3 	bls.w	80069cc <updatedate+0x2b8>
					JOURS=1;
 8006866:	4b48      	ldr	r3, [pc, #288]	@ (8006988 <updatedate+0x274>)
 8006868:	2201      	movs	r2, #1
 800686a:	701a      	strb	r2, [r3, #0]
					mois++;
 800686c:	4b47      	ldr	r3, [pc, #284]	@ (800698c <updatedate+0x278>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	b2da      	uxtb	r2, r3
 8006874:	4b45      	ldr	r3, [pc, #276]	@ (800698c <updatedate+0x278>)
 8006876:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006878:	4b45      	ldr	r3, [pc, #276]	@ (8006990 <updatedate+0x27c>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	3301      	adds	r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	4b43      	ldr	r3, [pc, #268]	@ (8006990 <updatedate+0x27c>)
 8006882:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006884:	e0a2      	b.n	80069cc <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8006886:	4b40      	ldr	r3, [pc, #256]	@ (8006988 <updatedate+0x274>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b1e      	cmp	r3, #30
 800688c:	f240 80a0 	bls.w	80069d0 <updatedate+0x2bc>
					JOURS=1;
 8006890:	4b3d      	ldr	r3, [pc, #244]	@ (8006988 <updatedate+0x274>)
 8006892:	2201      	movs	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]
					mois++;
 8006896:	4b3d      	ldr	r3, [pc, #244]	@ (800698c <updatedate+0x278>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	3301      	adds	r3, #1
 800689c:	b2da      	uxtb	r2, r3
 800689e:	4b3b      	ldr	r3, [pc, #236]	@ (800698c <updatedate+0x278>)
 80068a0:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80068a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006990 <updatedate+0x27c>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	3301      	adds	r3, #1
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	4b39      	ldr	r3, [pc, #228]	@ (8006990 <updatedate+0x27c>)
 80068ac:	701a      	strb	r2, [r3, #0]
				}
		break;
 80068ae:	e08f      	b.n	80069d0 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 80068b0:	4b35      	ldr	r3, [pc, #212]	@ (8006988 <updatedate+0x274>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b1f      	cmp	r3, #31
 80068b6:	f240 808d 	bls.w	80069d4 <updatedate+0x2c0>
					JOURS=1;
 80068ba:	4b33      	ldr	r3, [pc, #204]	@ (8006988 <updatedate+0x274>)
 80068bc:	2201      	movs	r2, #1
 80068be:	701a      	strb	r2, [r3, #0]
					mois++;
 80068c0:	4b32      	ldr	r3, [pc, #200]	@ (800698c <updatedate+0x278>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	4b30      	ldr	r3, [pc, #192]	@ (800698c <updatedate+0x278>)
 80068ca:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80068cc:	4b30      	ldr	r3, [pc, #192]	@ (8006990 <updatedate+0x27c>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	3301      	adds	r3, #1
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006990 <updatedate+0x27c>)
 80068d6:	701a      	strb	r2, [r3, #0]
				}
		break;
 80068d8:	e07c      	b.n	80069d4 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 80068da:	4b2b      	ldr	r3, [pc, #172]	@ (8006988 <updatedate+0x274>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b1f      	cmp	r3, #31
 80068e0:	d97a      	bls.n	80069d8 <updatedate+0x2c4>
					JOURS=1;
 80068e2:	4b29      	ldr	r3, [pc, #164]	@ (8006988 <updatedate+0x274>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	701a      	strb	r2, [r3, #0]
					mois++;
 80068e8:	4b28      	ldr	r3, [pc, #160]	@ (800698c <updatedate+0x278>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	4b26      	ldr	r3, [pc, #152]	@ (800698c <updatedate+0x278>)
 80068f2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80068f4:	4b26      	ldr	r3, [pc, #152]	@ (8006990 <updatedate+0x27c>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	4b24      	ldr	r3, [pc, #144]	@ (8006990 <updatedate+0x27c>)
 80068fe:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006900:	e06a      	b.n	80069d8 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006902:	4b21      	ldr	r3, [pc, #132]	@ (8006988 <updatedate+0x274>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b1e      	cmp	r3, #30
 8006908:	d968      	bls.n	80069dc <updatedate+0x2c8>
					JOURS=1;
 800690a:	4b1f      	ldr	r3, [pc, #124]	@ (8006988 <updatedate+0x274>)
 800690c:	2201      	movs	r2, #1
 800690e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006910:	4b1e      	ldr	r3, [pc, #120]	@ (800698c <updatedate+0x278>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	4b1c      	ldr	r3, [pc, #112]	@ (800698c <updatedate+0x278>)
 800691a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800691c:	4b1c      	ldr	r3, [pc, #112]	@ (8006990 <updatedate+0x27c>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	4b1a      	ldr	r3, [pc, #104]	@ (8006990 <updatedate+0x27c>)
 8006926:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006928:	e058      	b.n	80069dc <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 800692a:	4b17      	ldr	r3, [pc, #92]	@ (8006988 <updatedate+0x274>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b1f      	cmp	r3, #31
 8006930:	d956      	bls.n	80069e0 <updatedate+0x2cc>
					JOURS=1;
 8006932:	4b15      	ldr	r3, [pc, #84]	@ (8006988 <updatedate+0x274>)
 8006934:	2201      	movs	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
					mois++;
 8006938:	4b14      	ldr	r3, [pc, #80]	@ (800698c <updatedate+0x278>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	3301      	adds	r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	4b12      	ldr	r3, [pc, #72]	@ (800698c <updatedate+0x278>)
 8006942:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006944:	4b12      	ldr	r3, [pc, #72]	@ (8006990 <updatedate+0x27c>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	3301      	adds	r3, #1
 800694a:	b2da      	uxtb	r2, r3
 800694c:	4b10      	ldr	r3, [pc, #64]	@ (8006990 <updatedate+0x27c>)
 800694e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006950:	e046      	b.n	80069e0 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006952:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <updatedate+0x274>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b1e      	cmp	r3, #30
 8006958:	d944      	bls.n	80069e4 <updatedate+0x2d0>
					JOURS=1;
 800695a:	4b0b      	ldr	r3, [pc, #44]	@ (8006988 <updatedate+0x274>)
 800695c:	2201      	movs	r2, #1
 800695e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006960:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <updatedate+0x278>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	4b08      	ldr	r3, [pc, #32]	@ (800698c <updatedate+0x278>)
 800696a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800696c:	4b08      	ldr	r3, [pc, #32]	@ (8006990 <updatedate+0x27c>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	3301      	adds	r3, #1
 8006972:	b2da      	uxtb	r2, r3
 8006974:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <updatedate+0x27c>)
 8006976:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006978:	e034      	b.n	80069e4 <updatedate+0x2d0>
 800697a:	bf00      	nop
 800697c:	20000b84 	.word	0x20000b84
 8006980:	20000b86 	.word	0x20000b86
 8006984:	20000b85 	.word	0x20000b85
 8006988:	20000010 	.word	0x20000010
 800698c:	20000b87 	.word	0x20000b87
 8006990:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8006994:	4b1f      	ldr	r3, [pc, #124]	@ (8006a14 <updatedate+0x300>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b1f      	cmp	r3, #31
 800699a:	d925      	bls.n	80069e8 <updatedate+0x2d4>
					JOURS=1;
 800699c:	4b1d      	ldr	r3, [pc, #116]	@ (8006a14 <updatedate+0x300>)
 800699e:	2201      	movs	r2, #1
 80069a0:	701a      	strb	r2, [r3, #0]
					mois++;
 80069a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a18 <updatedate+0x304>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <updatedate+0x304>)
 80069ac:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80069ae:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <updatedate+0x308>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	4b19      	ldr	r3, [pc, #100]	@ (8006a1c <updatedate+0x308>)
 80069b8:	701a      	strb	r2, [r3, #0]
				}
		break;
 80069ba:	e015      	b.n	80069e8 <updatedate+0x2d4>
		break;
 80069bc:	bf00      	nop
 80069be:	e014      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069c0:	bf00      	nop
 80069c2:	e012      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069c4:	bf00      	nop
 80069c6:	e010      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069c8:	bf00      	nop
 80069ca:	e00e      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069cc:	bf00      	nop
 80069ce:	e00c      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069d0:	bf00      	nop
 80069d2:	e00a      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069d4:	bf00      	nop
 80069d6:	e008      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069d8:	bf00      	nop
 80069da:	e006      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069dc:	bf00      	nop
 80069de:	e004      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069e0:	bf00      	nop
 80069e2:	e002      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069e4:	bf00      	nop
 80069e6:	e000      	b.n	80069ea <updatedate+0x2d6>
		break;
 80069e8:	bf00      	nop

	}

	if(MOIS>12){
 80069ea:	4b0c      	ldr	r3, [pc, #48]	@ (8006a1c <updatedate+0x308>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b0c      	cmp	r3, #12
 80069f0:	d90b      	bls.n	8006a0a <updatedate+0x2f6>
		mois=JANVIER;
 80069f2:	4b09      	ldr	r3, [pc, #36]	@ (8006a18 <updatedate+0x304>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 80069f8:	4b08      	ldr	r3, [pc, #32]	@ (8006a1c <updatedate+0x308>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 80069fe:	4b08      	ldr	r3, [pc, #32]	@ (8006a20 <updatedate+0x30c>)
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <updatedate+0x30c>)
 8006a08:	801a      	strh	r2, [r3, #0]
	}
}
 8006a0a:	bf00      	nop
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	20000010 	.word	0x20000010
 8006a18:	20000b87 	.word	0x20000b87
 8006a1c:	20000011 	.word	0x20000011
 8006a20:	20000012 	.word	0x20000012

08006a24 <LL_AHB2_GRP1_EnableClock>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4013      	ands	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a48:	68fb      	ldr	r3, [r7, #12]
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <LL_APB1_GRP2_EnableClock>:
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4013      	ands	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
}
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <LL_APB1_GRP2_DisableClock>:
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8006a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <LL_APB2_GRP1_EnableClock>:
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006abc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
}
 8006ad4:	bf00      	nop
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8006ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	43db      	mvns	r3, r3
 8006af2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006af6:	4013      	ands	r3, r2
 8006af8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006b0c:	4b22      	ldr	r3, [pc, #136]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b0e:	4a23      	ldr	r2, [pc, #140]	@ (8006b9c <MX_LPUART1_UART_Init+0x94>)
 8006b10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8006b12:	4b21      	ldr	r3, [pc, #132]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006b18:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006b20:	4b1d      	ldr	r3, [pc, #116]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006b26:	4b1c      	ldr	r3, [pc, #112]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b2e:	220c      	movs	r2, #12
 8006b30:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b32:	4b19      	ldr	r3, [pc, #100]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b38:	4b17      	ldr	r3, [pc, #92]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b3e:	4b16      	ldr	r3, [pc, #88]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b44:	4b14      	ldr	r3, [pc, #80]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006b4a:	4b13      	ldr	r3, [pc, #76]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006b50:	4811      	ldr	r0, [pc, #68]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b52:	f008 fc87 	bl	800f464 <HAL_UART_Init>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006b5c:	f7fc f8be 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b60:	2100      	movs	r1, #0
 8006b62:	480d      	ldr	r0, [pc, #52]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b64:	f00a f88c 	bl	8010c80 <HAL_UARTEx_SetTxFifoThreshold>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006b6e:	f7fc f8b5 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b72:	2100      	movs	r1, #0
 8006b74:	4808      	ldr	r0, [pc, #32]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b76:	f00a f8c1 	bl	8010cfc <HAL_UARTEx_SetRxFifoThreshold>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006b80:	f7fc f8ac 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006b84:	4804      	ldr	r0, [pc, #16]	@ (8006b98 <MX_LPUART1_UART_Init+0x90>)
 8006b86:	f00a f842 	bl	8010c0e <HAL_UARTEx_DisableFifoMode>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006b90:	f7fc f8a4 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20001350 	.word	0x20001350
 8006b9c:	40008000 	.word	0x40008000

08006ba0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ba4:	4b22      	ldr	r3, [pc, #136]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006ba6:	4a23      	ldr	r2, [pc, #140]	@ (8006c34 <MX_USART1_UART_Init+0x94>)
 8006ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006baa:	4b21      	ldr	r3, [pc, #132]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bc6:	220c      	movs	r2, #12
 8006bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006bca:	4b19      	ldr	r3, [pc, #100]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006bd0:	4b17      	ldr	r3, [pc, #92]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006bd6:	4b16      	ldr	r3, [pc, #88]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006bdc:	4b14      	ldr	r3, [pc, #80]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006be2:	4b13      	ldr	r3, [pc, #76]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006be8:	4811      	ldr	r0, [pc, #68]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bea:	f008 fc3b 	bl	800f464 <HAL_UART_Init>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006bf4:	f7fc f872 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	480d      	ldr	r0, [pc, #52]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006bfc:	f00a f840 	bl	8010c80 <HAL_UARTEx_SetTxFifoThreshold>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006c06:	f7fc f869 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4808      	ldr	r0, [pc, #32]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006c0e:	f00a f875 	bl	8010cfc <HAL_UARTEx_SetRxFifoThreshold>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006c18:	f7fc f860 	bl	8002cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006c1c:	4804      	ldr	r0, [pc, #16]	@ (8006c30 <MX_USART1_UART_Init+0x90>)
 8006c1e:	f009 fff6 	bl	8010c0e <HAL_UARTEx_DisableFifoMode>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006c28:	f7fc f858 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006c2c:	bf00      	nop
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	200013e4 	.word	0x200013e4
 8006c34:	40013800 	.word	0x40013800

08006c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b09c      	sub	sp, #112	@ 0x70
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c40:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	609a      	str	r2, [r3, #8]
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c50:	f107 030c 	add.w	r3, r7, #12
 8006c54:	2250      	movs	r2, #80	@ 0x50
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f014 fc02 	bl	801b462 <memset>
  if(uartHandle->Instance==LPUART1)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a46      	ldr	r2, [pc, #280]	@ (8006d7c <HAL_UART_MspInit+0x144>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d158      	bne.n	8006d1a <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8006c6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	4618      	mov	r0, r3
 8006c78:	f006 f88d 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006c82:	f7fc f82b 	bl	8002cdc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006c86:	2001      	movs	r0, #1
 8006c88:	f7ff fee5 	bl	8006a56 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	f7ff fec9 	bl	8006a24 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006c92:	230c      	movs	r3, #12
 8006c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c96:	2302      	movs	r3, #2
 8006c98:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006caa:	4619      	mov	r1, r3
 8006cac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cb0:	f001 ffca 	bl	8008c48 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8006cb4:	4b32      	ldr	r3, [pc, #200]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006cb6:	4a33      	ldr	r2, [pc, #204]	@ (8006d84 <HAL_UART_MspInit+0x14c>)
 8006cb8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8006cba:	4b31      	ldr	r3, [pc, #196]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006cbc:	2210      	movs	r2, #16
 8006cbe:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006cce:	2280      	movs	r2, #128	@ 0x80
 8006cd0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cd8:	4b29      	ldr	r3, [pc, #164]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8006cde:	4b28      	ldr	r3, [pc, #160]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006ce4:	4b26      	ldr	r3, [pc, #152]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8006cea:	4825      	ldr	r0, [pc, #148]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006cec:	f001 fbd8 	bl	80084a0 <HAL_DMA_Init>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8006cf6:	f7fb fff1 	bl	8002cdc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a20      	ldr	r2, [pc, #128]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006cfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006d02:	4a1f      	ldr	r2, [pc, #124]	@ (8006d80 <HAL_UART_MspInit+0x148>)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	2025      	movs	r0, #37	@ 0x25
 8006d0e:	f001 fb68 	bl	80083e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006d12:	2025      	movs	r0, #37	@ 0x25
 8006d14:	f001 fb7f 	bl	8008416 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006d18:	e02b      	b.n	8006d72 <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART1)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d88 <HAL_UART_MspInit+0x150>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d126      	bne.n	8006d72 <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006d24:	2301      	movs	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d2c:	f107 030c 	add.w	r3, r7, #12
 8006d30:	4618      	mov	r0, r3
 8006d32:	f006 f830 	bl	800cd96 <HAL_RCCEx_PeriphCLKConfig>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8006d3c:	f7fb ffce 	bl	8002cdc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d40:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006d44:	f7ff feb3 	bl	8006aae <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d48:	2001      	movs	r0, #1
 8006d4a:	f7ff fe6b 	bl	8006a24 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006d4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d54:	2302      	movs	r3, #2
 8006d56:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006d60:	2307      	movs	r3, #7
 8006d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d6e:	f001 ff6b 	bl	8008c48 <HAL_GPIO_Init>
}
 8006d72:	bf00      	nop
 8006d74:	3770      	adds	r7, #112	@ 0x70
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40008000 	.word	0x40008000
 8006d80:	20001478 	.word	0x20001478
 8006d84:	4002001c 	.word	0x4002001c
 8006d88:	40013800 	.word	0x40013800

08006d8c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a13      	ldr	r2, [pc, #76]	@ (8006de8 <HAL_UART_MspDeInit+0x5c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d111      	bne.n	8006dc2 <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8006d9e:	2001      	movs	r0, #1
 8006da0:	f7ff fe72 	bl	8006a88 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006da4:	210c      	movs	r1, #12
 8006da6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006daa:	f002 f8bd 	bl	8008f28 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 fc1b 	bl	80085f0 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8006dba:	2025      	movs	r0, #37	@ 0x25
 8006dbc:	f001 fb39 	bl	8008432 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006dc0:	e00e      	b.n	8006de0 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART1)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a09      	ldr	r2, [pc, #36]	@ (8006dec <HAL_UART_MspDeInit+0x60>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d109      	bne.n	8006de0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART1_CLK_DISABLE();
 8006dcc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006dd0:	f7ff fe86 	bl	8006ae0 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006dd4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ddc:	f002 f8a4 	bl	8008f28 <HAL_GPIO_DeInit>
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40008000 	.word	0x40008000
 8006dec:	40013800 	.word	0x40013800

08006df0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8006df8:	4b30      	ldr	r3, [pc, #192]	@ (8006ebc <HAL_UART_RxCpltCallback+0xcc>)
 8006dfa:	881a      	ldrh	r2, [r3, #0]
 8006dfc:	4b30      	ldr	r3, [pc, #192]	@ (8006ec0 <HAL_UART_RxCpltCallback+0xd0>)
 8006dfe:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8006e00:	4b2f      	ldr	r3, [pc, #188]	@ (8006ec0 <HAL_UART_RxCpltCallback+0xd0>)
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8006e08:	d922      	bls.n	8006e50 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8006e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ec0 <HAL_UART_RxCpltCallback+0xd0>)
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006e12:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8006e14:	4b2a      	ldr	r3, [pc, #168]	@ (8006ec0 <HAL_UART_RxCpltCallback+0xd0>)
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ec4 <HAL_UART_RxCpltCallback+0xd4>)
 8006e1c:	4413      	add	r3, r2
 8006e1e:	89fa      	ldrh	r2, [r7, #14]
 8006e20:	4929      	ldr	r1, [pc, #164]	@ (8006ec8 <HAL_UART_RxCpltCallback+0xd8>)
 8006e22:	4618      	mov	r0, r3
 8006e24:	f014 fc39 	bl	801b69a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8006e28:	4b25      	ldr	r3, [pc, #148]	@ (8006ec0 <HAL_UART_RxCpltCallback+0xd0>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8006e2e:	89fb      	ldrh	r3, [r7, #14]
 8006e30:	4a25      	ldr	r2, [pc, #148]	@ (8006ec8 <HAL_UART_RxCpltCallback+0xd8>)
 8006e32:	1899      	adds	r1, r3, r2
 8006e34:	89fb      	ldrh	r3, [r7, #14]
 8006e36:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4821      	ldr	r0, [pc, #132]	@ (8006ec4 <HAL_UART_RxCpltCallback+0xd4>)
 8006e3e:	f014 fc2c 	bl	801b69a <memcpy>
				newPos = (64-datatocopy);  // update the position
 8006e42:	89fb      	ldrh	r3, [r7, #14]
 8006e44:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8006ebc <HAL_UART_RxCpltCallback+0xcc>)
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	e01e      	b.n	8006e8e <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8006e50:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec0 <HAL_UART_RxCpltCallback+0xd0>)
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec4 <HAL_UART_RxCpltCallback+0xd4>)
 8006e58:	441a      	add	r2, r3
 8006e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec8 <HAL_UART_RxCpltCallback+0xd8>)
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8006e62:	4602      	mov	r2, r0
 8006e64:	4619      	mov	r1, r3
 8006e66:	f8d1 c000 	ldr.w	ip, [r1]
 8006e6a:	684e      	ldr	r6, [r1, #4]
 8006e6c:	688d      	ldr	r5, [r1, #8]
 8006e6e:	68c9      	ldr	r1, [r1, #12]
 8006e70:	f8c2 c000 	str.w	ip, [r2]
 8006e74:	6056      	str	r6, [r2, #4]
 8006e76:	6095      	str	r5, [r2, #8]
 8006e78:	60d1      	str	r1, [r2, #12]
 8006e7a:	3310      	adds	r3, #16
 8006e7c:	3010      	adds	r0, #16
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	d1ef      	bne.n	8006e62 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8006e82:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec0 <HAL_UART_RxCpltCallback+0xd0>)
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	3340      	adds	r3, #64	@ 0x40
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006ebc <HAL_UART_RxCpltCallback+0xcc>)
 8006e8c:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8006e8e:	2240      	movs	r2, #64	@ 0x40
 8006e90:	490d      	ldr	r1, [pc, #52]	@ (8006ec8 <HAL_UART_RxCpltCallback+0xd8>)
 8006e92:	480e      	ldr	r0, [pc, #56]	@ (8006ecc <HAL_UART_RxCpltCallback+0xdc>)
 8006e94:	f008 fb76 	bl	800f584 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8006e98:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <HAL_UART_RxCpltCallback+0xe0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <HAL_UART_RxCpltCallback+0xe0>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0204 	bic.w	r2, r2, #4
 8006ea6:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8006ea8:	2240      	movs	r2, #64	@ 0x40
 8006eaa:	4907      	ldr	r1, [pc, #28]	@ (8006ec8 <HAL_UART_RxCpltCallback+0xd8>)
 8006eac:	4807      	ldr	r0, [pc, #28]	@ (8006ecc <HAL_UART_RxCpltCallback+0xdc>)
 8006eae:	f008 fb69 	bl	800f584 <HAL_UART_Receive_DMA>
}
 8006eb2:	bf00      	nop
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	200005dc 	.word	0x200005dc
 8006ec0:	200005da 	.word	0x200005da
 8006ec4:	20000620 	.word	0x20000620
 8006ec8:	200005e0 	.word	0x200005e0
 8006ecc:	20001350 	.word	0x20001350
 8006ed0:	20001478 	.word	0x20001478

08006ed4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006ed4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ed6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ed8:	3304      	adds	r3, #4

08006eda <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006eda:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006edc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8006ede:	d3f9      	bcc.n	8006ed4 <CopyDataInit>
  bx lr
 8006ee0:	4770      	bx	lr

08006ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8006ee2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006ee4:	3004      	adds	r0, #4

08006ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006ee6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006ee8:	d3fb      	bcc.n	8006ee2 <FillZerobss>
  bx lr
 8006eea:	4770      	bx	lr

08006eec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006eec:	480c      	ldr	r0, [pc, #48]	@ (8006f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006eee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006ef0:	f7ff fab6 	bl	8006460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006ef4:	480b      	ldr	r0, [pc, #44]	@ (8006f24 <LoopForever+0x6>)
 8006ef6:	490c      	ldr	r1, [pc, #48]	@ (8006f28 <LoopForever+0xa>)
 8006ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8006f2c <LoopForever+0xe>)
 8006efa:	2300      	movs	r3, #0
 8006efc:	f7ff ffed 	bl	8006eda <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8006f00:	480b      	ldr	r0, [pc, #44]	@ (8006f30 <LoopForever+0x12>)
 8006f02:	490c      	ldr	r1, [pc, #48]	@ (8006f34 <LoopForever+0x16>)
 8006f04:	4a0c      	ldr	r2, [pc, #48]	@ (8006f38 <LoopForever+0x1a>)
 8006f06:	2300      	movs	r3, #0
 8006f08:	f7ff ffe7 	bl	8006eda <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006f0c:	480b      	ldr	r0, [pc, #44]	@ (8006f3c <LoopForever+0x1e>)
 8006f0e:	490c      	ldr	r1, [pc, #48]	@ (8006f40 <LoopForever+0x22>)
 8006f10:	2300      	movs	r3, #0
 8006f12:	f7ff ffe8 	bl	8006ee6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006f16:	f014 fb91 	bl	801b63c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006f1a:	f7fb fd97 	bl	8002a4c <main>

08006f1e <LoopForever>:

LoopForever:
  b LoopForever
 8006f1e:	e7fe      	b.n	8006f1e <LoopForever>
  ldr   r0, =_estack
 8006f20:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006f24:	20000008 	.word	0x20000008
 8006f28:	20000320 	.word	0x20000320
 8006f2c:	080221a0 	.word	0x080221a0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8006f30:	200301e4 	.word	0x200301e4
 8006f34:	20030a67 	.word	0x20030a67
 8006f38:	080224fe 	.word	0x080224fe
  INIT_BSS _sbss, _ebss
 8006f3c:	20000370 	.word	0x20000370
 8006f40:	200033b4 	.word	0x200033b4

08006f44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f44:	e7fe      	b.n	8006f44 <ADC1_IRQHandler>
	...

08006f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f52:	4b0c      	ldr	r3, [pc, #48]	@ (8006f84 <HAL_Init+0x3c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a0b      	ldr	r2, [pc, #44]	@ (8006f84 <HAL_Init+0x3c>)
 8006f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f5e:	2003      	movs	r0, #3
 8006f60:	f001 fa34 	bl	80083cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006f64:	200f      	movs	r0, #15
 8006f66:	f000 f80f 	bl	8006f88 <HAL_InitTick>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	71fb      	strb	r3, [r7, #7]
 8006f74:	e001      	b.n	8006f7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006f76:	f7ff f884 	bl	8006082 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	58004000 	.word	0x58004000

08006f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8006f94:	4b17      	ldr	r3, [pc, #92]	@ (8006ff4 <HAL_InitTick+0x6c>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d024      	beq.n	8006fe6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006f9c:	f005 fc6a 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b14      	ldr	r3, [pc, #80]	@ (8006ff4 <HAL_InitTick+0x6c>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 fa4a 	bl	800844e <HAL_SYSTICK_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10f      	bne.n	8006fe0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b0f      	cmp	r3, #15
 8006fc4:	d809      	bhi.n	8006fda <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	f04f 30ff 	mov.w	r0, #4294967295
 8006fce:	f001 fa08 	bl	80083e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006fd2:	4a09      	ldr	r2, [pc, #36]	@ (8006ff8 <HAL_InitTick+0x70>)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	e007      	b.n	8006fea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	73fb      	strb	r3, [r7, #15]
 8006fde:	e004      	b.n	8006fea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	73fb      	strb	r3, [r7, #15]
 8006fe4:	e001      	b.n	8006fea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000034 	.word	0x20000034
 8006ff8:	20000030 	.word	0x20000030

08006ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007000:	4b06      	ldr	r3, [pc, #24]	@ (800701c <HAL_IncTick+0x20>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	4b06      	ldr	r3, [pc, #24]	@ (8007020 <HAL_IncTick+0x24>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4413      	add	r3, r2
 800700c:	4a04      	ldr	r2, [pc, #16]	@ (8007020 <HAL_IncTick+0x24>)
 800700e:	6013      	str	r3, [r2, #0]
}
 8007010:	bf00      	nop
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000034 	.word	0x20000034
 8007020:	200014d8 	.word	0x200014d8

08007024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  return uwTick;
 8007028:	4b03      	ldr	r3, [pc, #12]	@ (8007038 <HAL_GetTick+0x14>)
 800702a:	681b      	ldr	r3, [r3, #0]
}
 800702c:	4618      	mov	r0, r3
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	200014d8 	.word	0x200014d8

0800703c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007040:	4b03      	ldr	r3, [pc, #12]	@ (8007050 <HAL_GetTickPrio+0x14>)
 8007042:	681b      	ldr	r3, [r3, #0]
}
 8007044:	4618      	mov	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	20000030 	.word	0x20000030

08007054 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007058:	4b03      	ldr	r3, [pc, #12]	@ (8007068 <HAL_GetTickFreq+0x14>)
 800705a:	781b      	ldrb	r3, [r3, #0]
}
 800705c:	4618      	mov	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20000034 	.word	0x20000034

0800706c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	609a      	str	r2, [r3, #8]
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3360      	adds	r3, #96	@ 0x60
 80070e6:	461a      	mov	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	4b08      	ldr	r3, [pc, #32]	@ (8007118 <LL_ADC_SetOffset+0x44>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	4313      	orrs	r3, r2
 8007104:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800710c:	bf00      	nop
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	03fff000 	.word	0x03fff000

0800711c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3360      	adds	r3, #96	@ 0x60
 800712a:	461a      	mov	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3360      	adds	r3, #96	@ 0x60
 8007158:	461a      	mov	r2, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	431a      	orrs	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007196:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3330      	adds	r3, #48	@ 0x30
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	f003 030c 	and.w	r3, r3, #12
 80071c0:	4413      	add	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f003 031f 	and.w	r3, r3, #31
 80071ce:	211f      	movs	r1, #31
 80071d0:	fa01 f303 	lsl.w	r3, r1, r3
 80071d4:	43db      	mvns	r3, r3
 80071d6:	401a      	ands	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	0e9b      	lsrs	r3, r3, #26
 80071dc:	f003 011f 	and.w	r1, r3, #31
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ea:	431a      	orrs	r2, r3
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3314      	adds	r3, #20
 800720c:	461a      	mov	r2, r3
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	0e5b      	lsrs	r3, r3, #25
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	4413      	add	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	0d1b      	lsrs	r3, r3, #20
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2107      	movs	r1, #7
 800722a:	fa01 f303 	lsl.w	r3, r1, r3
 800722e:	43db      	mvns	r3, r3
 8007230:	401a      	ands	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	0d1b      	lsrs	r3, r3, #20
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	fa01 f303 	lsl.w	r3, r1, r3
 8007240:	431a      	orrs	r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
	...

08007254 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726c:	43db      	mvns	r3, r3
 800726e:	401a      	ands	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f003 0318 	and.w	r3, r3, #24
 8007276:	4908      	ldr	r1, [pc, #32]	@ (8007298 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007278:	40d9      	lsrs	r1, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	400b      	ands	r3, r1
 800727e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007282:	431a      	orrs	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	0007ffff 	.word	0x0007ffff

0800729c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80072ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6093      	str	r3, [r2, #8]
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d4:	d101      	bne.n	80072da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80072f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80072fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007324:	d101      	bne.n	800732a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007348:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800734c:	f043 0201 	orr.w	r2, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b01      	cmp	r3, #1
 8007372:	d101      	bne.n	8007378 <LL_ADC_IsEnabled+0x18>
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <LL_ADC_IsEnabled+0x1a>
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007396:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800739a:	f043 0204 	orr.w	r2, r3, #4
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d101      	bne.n	80073c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d101      	bne.n	80073ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
	...

080073fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8007408:	2300      	movs	r3, #0
 800740a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800740c:	2300      	movs	r3, #0
 800740e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e12e      	b.n	8007678 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7f9 fe53 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff ff3d 	bl	80072c0 <LL_ADC_IsDeepPowerDownEnabled>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff ff23 	bl	800729c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff ff58 	bl	8007310 <LL_ADC_IsInternalRegulatorEnabled>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d115      	bne.n	8007492 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff ff3c 	bl	80072e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007470:	4b83      	ldr	r3, [pc, #524]	@ (8007680 <HAL_ADC_Init+0x284>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	099b      	lsrs	r3, r3, #6
 8007476:	4a83      	ldr	r2, [pc, #524]	@ (8007684 <HAL_ADC_Init+0x288>)
 8007478:	fba2 2303 	umull	r2, r3, r2, r3
 800747c:	099b      	lsrs	r3, r3, #6
 800747e:	3301      	adds	r3, #1
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007484:	e002      	b.n	800748c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	3b01      	subs	r3, #1
 800748a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f9      	bne.n	8007486 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff ff3a 	bl	8007310 <LL_ADC_IsInternalRegulatorEnabled>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10d      	bne.n	80074be <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a6:	f043 0210 	orr.w	r2, r3, #16
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b2:	f043 0201 	orr.w	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff ff73 	bl	80073ae <LL_ADC_REG_IsConversionOngoing>
 80074c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 80c7 	bne.w	8007666 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f040 80c3 	bne.w	8007666 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80074e8:	f043 0202 	orr.w	r2, r3, #2
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff ff33 	bl	8007360 <LL_ADC_IsEnabled>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10b      	bne.n	8007518 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007500:	4861      	ldr	r0, [pc, #388]	@ (8007688 <HAL_ADC_Init+0x28c>)
 8007502:	f7ff ff2d 	bl	8007360 <LL_ADC_IsEnabled>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	4619      	mov	r1, r3
 8007512:	485e      	ldr	r0, [pc, #376]	@ (800768c <HAL_ADC_Init+0x290>)
 8007514:	f7ff fdaa 	bl	800706c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7e5b      	ldrb	r3, [r3, #25]
 800751c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007522:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007528:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800752e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007536:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8007538:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	4313      	orrs	r3, r2
 800753e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d106      	bne.n	8007558 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754e:	3b01      	subs	r3, #1
 8007550:	045b      	lsls	r3, r3, #17
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007564:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	4313      	orrs	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	4b45      	ldr	r3, [pc, #276]	@ (8007690 <HAL_ADC_Init+0x294>)
 800757c:	4013      	ands	r3, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	69b9      	ldr	r1, [r7, #24]
 8007584:	430b      	orrs	r3, r1
 8007586:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff ff0e 	bl	80073ae <LL_ADC_REG_IsConversionOngoing>
 8007592:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff ff1b 	bl	80073d4 <LL_ADC_INJ_IsConversionOngoing>
 800759e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d13d      	bne.n	8007622 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d13a      	bne.n	8007622 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80075b0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80075b8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80075ba:	4313      	orrs	r3, r2
 80075bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075c8:	f023 0302 	bic.w	r3, r3, #2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	69b9      	ldr	r1, [r7, #24]
 80075d2:	430b      	orrs	r3, r1
 80075d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d118      	bne.n	8007612 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80075ea:	f023 0304 	bic.w	r3, r3, #4
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80075f6:	4311      	orrs	r1, r2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80075fc:	4311      	orrs	r1, r2
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007602:	430a      	orrs	r2, r1
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	611a      	str	r2, [r3, #16]
 8007610:	e007      	b.n	8007622 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0201 	bic.w	r2, r2, #1
 8007620:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d10c      	bne.n	8007644 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007630:	f023 010f 	bic.w	r1, r3, #15
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	1e5a      	subs	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	631a      	str	r2, [r3, #48]	@ 0x30
 8007642:	e007      	b.n	8007654 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 020f 	bic.w	r2, r2, #15
 8007652:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007658:	f023 0303 	bic.w	r3, r3, #3
 800765c:	f043 0201 	orr.w	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	655a      	str	r2, [r3, #84]	@ 0x54
 8007664:	e007      	b.n	8007676 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766a:	f043 0210 	orr.w	r2, r3, #16
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007676:	7ffb      	ldrb	r3, [r7, #31]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	2000002c 	.word	0x2000002c
 8007684:	053e2d63 	.word	0x053e2d63
 8007688:	50040000 	.word	0x50040000
 800768c:	50040300 	.word	0x50040300
 8007690:	fff0c007 	.word	0xfff0c007

08007694 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7ff fe82 	bl	80073ae <LL_ADC_REG_IsConversionOngoing>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d167      	bne.n	8007780 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_ADC_Start_DMA+0x2a>
 80076ba:	2302      	movs	r3, #2
 80076bc:	e063      	b.n	8007786 <HAL_ADC_Start_DMA+0xf2>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fc42 	bl	8007f50 <ADC_Enable>
 80076cc:	4603      	mov	r3, r0
 80076ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d14f      	bne.n	8007776 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076fa:	f023 0206 	bic.w	r2, r3, #6
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	659a      	str	r2, [r3, #88]	@ 0x58
 8007702:	e002      	b.n	800770a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800770e:	4a20      	ldr	r2, [pc, #128]	@ (8007790 <HAL_ADC_Start_DMA+0xfc>)
 8007710:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007716:	4a1f      	ldr	r2, [pc, #124]	@ (8007794 <HAL_ADC_Start_DMA+0x100>)
 8007718:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771e:	4a1e      	ldr	r2, [pc, #120]	@ (8007798 <HAL_ADC_Start_DMA+0x104>)
 8007720:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	221c      	movs	r2, #28
 8007728:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0210 	orr.w	r2, r2, #16
 8007740:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0201 	orr.w	r2, r2, #1
 8007750:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3340      	adds	r3, #64	@ 0x40
 800775c:	4619      	mov	r1, r3
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f000 ffdb 	bl	800871c <HAL_DMA_Start_IT>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fe09 	bl	8007386 <LL_ADC_REG_StartConversion>
 8007774:	e006      	b.n	8007784 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800777e:	e001      	b.n	8007784 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007780:	2302      	movs	r3, #2
 8007782:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	08008045 	.word	0x08008045
 8007794:	0800811d 	.word	0x0800811d
 8007798:	08008139 	.word	0x08008139

0800779c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b0b6      	sub	sp, #216	@ 0xd8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <HAL_ADC_ConfigChannel+0x22>
 80077e2:	2302      	movs	r3, #2
 80077e4:	e39f      	b.n	8007f26 <HAL_ADC_ConfigChannel+0x762>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff fddb 	bl	80073ae <LL_ADC_REG_IsConversionOngoing>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f040 8384 	bne.w	8007f08 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	6859      	ldr	r1, [r3, #4]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	f7ff fcc9 	bl	80071a4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fdc9 	bl	80073ae <LL_ADC_REG_IsConversionOngoing>
 800781c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fdd5 	bl	80073d4 <LL_ADC_INJ_IsConversionOngoing>
 800782a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800782e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007832:	2b00      	cmp	r3, #0
 8007834:	f040 81a6 	bne.w	8007b84 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800783c:	2b00      	cmp	r3, #0
 800783e:	f040 81a1 	bne.w	8007b84 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6819      	ldr	r1, [r3, #0]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	461a      	mov	r2, r3
 8007850:	f7ff fcd4 	bl	80071fc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	08db      	lsrs	r3, r3, #3
 8007860:	f003 0303 	and.w	r3, r3, #3
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b04      	cmp	r3, #4
 8007874:	d00a      	beq.n	800788c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6919      	ldr	r1, [r3, #16]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007886:	f7ff fc25 	bl	80070d4 <LL_ADC_SetOffset>
 800788a:	e17b      	b.n	8007b84 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2100      	movs	r1, #0
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff fc42 	bl	800711c <LL_ADC_GetOffsetChannel>
 8007898:	4603      	mov	r3, r0
 800789a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <HAL_ADC_ConfigChannel+0xf4>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2100      	movs	r1, #0
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff fc37 	bl	800711c <LL_ADC_GetOffsetChannel>
 80078ae:	4603      	mov	r3, r0
 80078b0:	0e9b      	lsrs	r3, r3, #26
 80078b2:	f003 021f 	and.w	r2, r3, #31
 80078b6:	e01e      	b.n	80078f6 <HAL_ADC_ConfigChannel+0x132>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2100      	movs	r1, #0
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fc2c 	bl	800711c <LL_ADC_GetOffsetChannel>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078ce:	fa93 f3a3 	rbit	r3, r3
 80078d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80078d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80078de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 80078e6:	2320      	movs	r3, #32
 80078e8:	e004      	b.n	80078f4 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 80078ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078ee:	fab3 f383 	clz	r3, r3
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d105      	bne.n	800790e <HAL_ADC_ConfigChannel+0x14a>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	0e9b      	lsrs	r3, r3, #26
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	e018      	b.n	8007940 <HAL_ADC_ConfigChannel+0x17c>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007916:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800791a:	fa93 f3a3 	rbit	r3, r3
 800791e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007926:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800792a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007932:	2320      	movs	r3, #32
 8007934:	e004      	b.n	8007940 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800793a:	fab3 f383 	clz	r3, r3
 800793e:	b2db      	uxtb	r3, r3
 8007940:	429a      	cmp	r2, r3
 8007942:	d106      	bne.n	8007952 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2200      	movs	r2, #0
 800794a:	2100      	movs	r1, #0
 800794c:	4618      	mov	r0, r3
 800794e:	f7ff fbfb 	bl	8007148 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2101      	movs	r1, #1
 8007958:	4618      	mov	r0, r3
 800795a:	f7ff fbdf 	bl	800711c <LL_ADC_GetOffsetChannel>
 800795e:	4603      	mov	r3, r0
 8007960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10a      	bne.n	800797e <HAL_ADC_ConfigChannel+0x1ba>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2101      	movs	r1, #1
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff fbd4 	bl	800711c <LL_ADC_GetOffsetChannel>
 8007974:	4603      	mov	r3, r0
 8007976:	0e9b      	lsrs	r3, r3, #26
 8007978:	f003 021f 	and.w	r2, r3, #31
 800797c:	e01e      	b.n	80079bc <HAL_ADC_ConfigChannel+0x1f8>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2101      	movs	r1, #1
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fbc9 	bl	800711c <LL_ADC_GetOffsetChannel>
 800798a:	4603      	mov	r3, r0
 800798c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007994:	fa93 f3a3 	rbit	r3, r3
 8007998:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800799c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80079a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80079ac:	2320      	movs	r3, #32
 80079ae:	e004      	b.n	80079ba <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80079b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079b4:	fab3 f383 	clz	r3, r3
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <HAL_ADC_ConfigChannel+0x210>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	0e9b      	lsrs	r3, r3, #26
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	e018      	b.n	8007a06 <HAL_ADC_ConfigChannel+0x242>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079e0:	fa93 f3a3 	rbit	r3, r3
 80079e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80079e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80079f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80079f8:	2320      	movs	r3, #32
 80079fa:	e004      	b.n	8007a06 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80079fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a00:	fab3 f383 	clz	r3, r3
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d106      	bne.n	8007a18 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2101      	movs	r1, #1
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fb98 	bl	8007148 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2102      	movs	r1, #2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff fb7c 	bl	800711c <LL_ADC_GetOffsetChannel>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x280>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2102      	movs	r1, #2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fb71 	bl	800711c <LL_ADC_GetOffsetChannel>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	0e9b      	lsrs	r3, r3, #26
 8007a3e:	f003 021f 	and.w	r2, r3, #31
 8007a42:	e01e      	b.n	8007a82 <HAL_ADC_ConfigChannel+0x2be>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2102      	movs	r1, #2
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff fb66 	bl	800711c <LL_ADC_GetOffsetChannel>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a5a:	fa93 f3a3 	rbit	r3, r3
 8007a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007a6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007a72:	2320      	movs	r3, #32
 8007a74:	e004      	b.n	8007a80 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a7a:	fab3 f383 	clz	r3, r3
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d105      	bne.n	8007a9a <HAL_ADC_ConfigChannel+0x2d6>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	0e9b      	lsrs	r3, r3, #26
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	e016      	b.n	8007ac8 <HAL_ADC_ConfigChannel+0x304>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007aa6:	fa93 f3a3 	rbit	r3, r3
 8007aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007aac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007aba:	2320      	movs	r3, #32
 8007abc:	e004      	b.n	8007ac8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ac2:	fab3 f383 	clz	r3, r3
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d106      	bne.n	8007ada <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff fb37 	bl	8007148 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2103      	movs	r1, #3
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fb1b 	bl	800711c <LL_ADC_GetOffsetChannel>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <HAL_ADC_ConfigChannel+0x342>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2103      	movs	r1, #3
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff fb10 	bl	800711c <LL_ADC_GetOffsetChannel>
 8007afc:	4603      	mov	r3, r0
 8007afe:	0e9b      	lsrs	r3, r3, #26
 8007b00:	f003 021f 	and.w	r2, r3, #31
 8007b04:	e017      	b.n	8007b36 <HAL_ADC_ConfigChannel+0x372>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2103      	movs	r1, #3
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fb05 	bl	800711c <LL_ADC_GetOffsetChannel>
 8007b12:	4603      	mov	r3, r0
 8007b14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b18:	fa93 f3a3 	rbit	r3, r3
 8007b1c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007b1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b20:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007b28:	2320      	movs	r3, #32
 8007b2a:	e003      	b.n	8007b34 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b2e:	fab3 f383 	clz	r3, r3
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <HAL_ADC_ConfigChannel+0x38a>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	0e9b      	lsrs	r3, r3, #26
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	e011      	b.n	8007b72 <HAL_ADC_ConfigChannel+0x3ae>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b56:	fa93 f3a3 	rbit	r3, r3
 8007b5a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007b66:	2320      	movs	r3, #32
 8007b68:	e003      	b.n	8007b72 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b6c:	fab3 f383 	clz	r3, r3
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d106      	bne.n	8007b84 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2103      	movs	r1, #3
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff fae2 	bl	8007148 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fbe9 	bl	8007360 <LL_ADC_IsEnabled>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 81c2 	bne.w	8007f1a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	6819      	ldr	r1, [r3, #0]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f7ff fb56 	bl	8007254 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	4a8e      	ldr	r2, [pc, #568]	@ (8007de8 <HAL_ADC_ConfigChannel+0x624>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	f040 8130 	bne.w	8007e14 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10b      	bne.n	8007bdc <HAL_ADC_ConfigChannel+0x418>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	0e9b      	lsrs	r3, r3, #26
 8007bca:	3301      	adds	r3, #1
 8007bcc:	f003 031f 	and.w	r3, r3, #31
 8007bd0:	2b09      	cmp	r3, #9
 8007bd2:	bf94      	ite	ls
 8007bd4:	2301      	movls	r3, #1
 8007bd6:	2300      	movhi	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	e019      	b.n	8007c10 <HAL_ADC_ConfigChannel+0x44c>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007be2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007be4:	fa93 f3a3 	rbit	r3, r3
 8007be8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007bea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007bee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8007bf4:	2320      	movs	r3, #32
 8007bf6:	e003      	b.n	8007c00 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8007bf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bfa:	fab3 f383 	clz	r3, r3
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	3301      	adds	r3, #1
 8007c02:	f003 031f 	and.w	r3, r3, #31
 8007c06:	2b09      	cmp	r3, #9
 8007c08:	bf94      	ite	ls
 8007c0a:	2301      	movls	r3, #1
 8007c0c:	2300      	movhi	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d079      	beq.n	8007d08 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d107      	bne.n	8007c30 <HAL_ADC_ConfigChannel+0x46c>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	0e9b      	lsrs	r3, r3, #26
 8007c26:	3301      	adds	r3, #1
 8007c28:	069b      	lsls	r3, r3, #26
 8007c2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007c2e:	e015      	b.n	8007c5c <HAL_ADC_ConfigChannel+0x498>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c38:	fa93 f3a3 	rbit	r3, r3
 8007c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007c48:	2320      	movs	r3, #32
 8007c4a:	e003      	b.n	8007c54 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c4e:	fab3 f383 	clz	r3, r3
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	3301      	adds	r3, #1
 8007c56:	069b      	lsls	r3, r3, #26
 8007c58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <HAL_ADC_ConfigChannel+0x4b8>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	0e9b      	lsrs	r3, r3, #26
 8007c6e:	3301      	adds	r3, #1
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2101      	movs	r1, #1
 8007c76:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7a:	e017      	b.n	8007cac <HAL_ADC_ConfigChannel+0x4e8>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c84:	fa93 f3a3 	rbit	r3, r3
 8007c88:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8007c94:	2320      	movs	r3, #32
 8007c96:	e003      	b.n	8007ca0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8007c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c9a:	fab3 f383 	clz	r3, r3
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	f003 031f 	and.w	r3, r3, #31
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cac:	ea42 0103 	orr.w	r1, r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <HAL_ADC_ConfigChannel+0x50e>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	0e9b      	lsrs	r3, r3, #26
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	f003 021f 	and.w	r2, r3, #31
 8007cc8:	4613      	mov	r3, r2
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	4413      	add	r3, r2
 8007cce:	051b      	lsls	r3, r3, #20
 8007cd0:	e018      	b.n	8007d04 <HAL_ADC_ConfigChannel+0x540>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cda:	fa93 f3a3 	rbit	r3, r3
 8007cde:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007cea:	2320      	movs	r3, #32
 8007cec:	e003      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf0:	fab3 f383 	clz	r3, r3
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	f003 021f 	and.w	r2, r3, #31
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	4413      	add	r3, r2
 8007d02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d04:	430b      	orrs	r3, r1
 8007d06:	e080      	b.n	8007e0a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d107      	bne.n	8007d24 <HAL_ADC_ConfigChannel+0x560>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	0e9b      	lsrs	r3, r3, #26
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	069b      	lsls	r3, r3, #26
 8007d1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007d22:	e015      	b.n	8007d50 <HAL_ADC_ConfigChannel+0x58c>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2c:	fa93 f3a3 	rbit	r3, r3
 8007d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8007d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d34:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8007d3c:	2320      	movs	r3, #32
 8007d3e:	e003      	b.n	8007d48 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	fab3 f383 	clz	r3, r3
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	3301      	adds	r3, #1
 8007d4a:	069b      	lsls	r3, r3, #26
 8007d4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d109      	bne.n	8007d70 <HAL_ADC_ConfigChannel+0x5ac>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	0e9b      	lsrs	r3, r3, #26
 8007d62:	3301      	adds	r3, #1
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2101      	movs	r1, #1
 8007d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6e:	e017      	b.n	8007da0 <HAL_ADC_ConfigChannel+0x5dc>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	fa93 f3a3 	rbit	r3, r3
 8007d7c:	61fb      	str	r3, [r7, #28]
  return result;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8007d88:	2320      	movs	r3, #32
 8007d8a:	e003      	b.n	8007d94 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8e:	fab3 f383 	clz	r3, r3
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	3301      	adds	r3, #1
 8007d96:	f003 031f 	and.w	r3, r3, #31
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007da0:	ea42 0103 	orr.w	r1, r2, r3
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10d      	bne.n	8007dcc <HAL_ADC_ConfigChannel+0x608>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	0e9b      	lsrs	r3, r3, #26
 8007db6:	3301      	adds	r3, #1
 8007db8:	f003 021f 	and.w	r2, r3, #31
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	4413      	add	r3, r2
 8007dc2:	3b1e      	subs	r3, #30
 8007dc4:	051b      	lsls	r3, r3, #20
 8007dc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007dca:	e01d      	b.n	8007e08 <HAL_ADC_ConfigChannel+0x644>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	fa93 f3a3 	rbit	r3, r3
 8007dd8:	613b      	str	r3, [r7, #16]
  return result;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8007de4:	2320      	movs	r3, #32
 8007de6:	e005      	b.n	8007df4 <HAL_ADC_ConfigChannel+0x630>
 8007de8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	fab3 f383 	clz	r3, r3
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	3301      	adds	r3, #1
 8007df6:	f003 021f 	and.w	r2, r3, #31
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	4413      	add	r3, r2
 8007e00:	3b1e      	subs	r3, #30
 8007e02:	051b      	lsls	r3, r3, #20
 8007e04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e08:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e0e:	4619      	mov	r1, r3
 8007e10:	f7ff f9f4 	bl	80071fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	4b45      	ldr	r3, [pc, #276]	@ (8007f30 <HAL_ADC_ConfigChannel+0x76c>)
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d07c      	beq.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e20:	4844      	ldr	r0, [pc, #272]	@ (8007f34 <HAL_ADC_ConfigChannel+0x770>)
 8007e22:	f7ff f949 	bl	80070b8 <LL_ADC_GetCommonPathInternalCh>
 8007e26:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007e2a:	4843      	ldr	r0, [pc, #268]	@ (8007f38 <HAL_ADC_ConfigChannel+0x774>)
 8007e2c:	f7ff fa98 	bl	8007360 <LL_ADC_IsEnabled>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d15e      	bne.n	8007ef4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a40      	ldr	r2, [pc, #256]	@ (8007f3c <HAL_ADC_ConfigChannel+0x778>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d127      	bne.n	8007e90 <HAL_ADC_ConfigChannel+0x6cc>
 8007e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d121      	bne.n	8007e90 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a39      	ldr	r2, [pc, #228]	@ (8007f38 <HAL_ADC_ConfigChannel+0x774>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d161      	bne.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4834      	ldr	r0, [pc, #208]	@ (8007f34 <HAL_ADC_ConfigChannel+0x770>)
 8007e62:	f7ff f916 	bl	8007092 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e66:	4b36      	ldr	r3, [pc, #216]	@ (8007f40 <HAL_ADC_ConfigChannel+0x77c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	099b      	lsrs	r3, r3, #6
 8007e6c:	4a35      	ldr	r2, [pc, #212]	@ (8007f44 <HAL_ADC_ConfigChannel+0x780>)
 8007e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e72:	099b      	lsrs	r3, r3, #6
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	4613      	mov	r3, r2
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8007e80:	e002      	b.n	8007e88 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1f9      	bne.n	8007e82 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e8e:	e044      	b.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a2c      	ldr	r2, [pc, #176]	@ (8007f48 <HAL_ADC_ConfigChannel+0x784>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d113      	bne.n	8007ec2 <HAL_ADC_ConfigChannel+0x6fe>
 8007e9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10d      	bne.n	8007ec2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a23      	ldr	r2, [pc, #140]	@ (8007f38 <HAL_ADC_ConfigChannel+0x774>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d134      	bne.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007eb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007eb8:	4619      	mov	r1, r3
 8007eba:	481e      	ldr	r0, [pc, #120]	@ (8007f34 <HAL_ADC_ConfigChannel+0x770>)
 8007ebc:	f7ff f8e9 	bl	8007092 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007ec0:	e02b      	b.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a21      	ldr	r2, [pc, #132]	@ (8007f4c <HAL_ADC_ConfigChannel+0x788>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d126      	bne.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
 8007ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d120      	bne.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a16      	ldr	r2, [pc, #88]	@ (8007f38 <HAL_ADC_ConfigChannel+0x774>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d11b      	bne.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8007ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ee6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007eea:	4619      	mov	r1, r3
 8007eec:	4811      	ldr	r0, [pc, #68]	@ (8007f34 <HAL_ADC_ConfigChannel+0x770>)
 8007eee:	f7ff f8d0 	bl	8007092 <LL_ADC_SetCommonPathInternalCh>
 8007ef2:	e012      	b.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef8:	f043 0220 	orr.w	r2, r3, #32
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007f06:	e008      	b.n	8007f1a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f0c:	f043 0220 	orr.w	r2, r3, #32
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8007f22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	37d8      	adds	r7, #216	@ 0xd8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	80080000 	.word	0x80080000
 8007f34:	50040300 	.word	0x50040300
 8007f38:	50040000 	.word	0x50040000
 8007f3c:	c7520000 	.word	0xc7520000
 8007f40:	2000002c 	.word	0x2000002c
 8007f44:	053e2d63 	.word	0x053e2d63
 8007f48:	cb840000 	.word	0xcb840000
 8007f4c:	80000001 	.word	0x80000001

08007f50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7ff f9fd 	bl	8007360 <LL_ADC_IsEnabled>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d15e      	bne.n	800802a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	4b30      	ldr	r3, [pc, #192]	@ (8008034 <ADC_Enable+0xe4>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00d      	beq.n	8007f96 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7e:	f043 0210 	orr.w	r2, r3, #16
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f8a:	f043 0201 	orr.w	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e04a      	b.n	800802c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff f9cc 	bl	8007338 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007fa0:	4825      	ldr	r0, [pc, #148]	@ (8008038 <ADC_Enable+0xe8>)
 8007fa2:	f7ff f889 	bl	80070b8 <LL_ADC_GetCommonPathInternalCh>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00f      	beq.n	8007fd0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007fb0:	4b22      	ldr	r3, [pc, #136]	@ (800803c <ADC_Enable+0xec>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	099b      	lsrs	r3, r3, #6
 8007fb6:	4a22      	ldr	r2, [pc, #136]	@ (8008040 <ADC_Enable+0xf0>)
 8007fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbc:	099b      	lsrs	r3, r3, #6
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007fc2:	e002      	b.n	8007fca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1f9      	bne.n	8007fc4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007fd0:	f7ff f828 	bl	8007024 <HAL_GetTick>
 8007fd4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007fd6:	e021      	b.n	800801c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff f9bf 	bl	8007360 <LL_ADC_IsEnabled>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d104      	bne.n	8007ff2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff f9a3 	bl	8007338 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007ff2:	f7ff f817 	bl	8007024 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d90d      	bls.n	800801c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008004:	f043 0210 	orr.w	r2, r3, #16
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008010:	f043 0201 	orr.w	r2, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e007      	b.n	800802c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b01      	cmp	r3, #1
 8008028:	d1d6      	bne.n	8007fd8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	8000003f 	.word	0x8000003f
 8008038:	50040300 	.word	0x50040300
 800803c:	2000002c 	.word	0x2000002c
 8008040:	053e2d63 	.word	0x053e2d63

08008044 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008050:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008056:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800805a:	2b00      	cmp	r3, #0
 800805c:	d14b      	bne.n	80080f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008062:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d021      	beq.n	80080bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff f87e 	bl	800717e <LL_ADC_REG_IsTriggerSourceSWStart>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d032      	beq.n	80080ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d12b      	bne.n	80080ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d11f      	bne.n	80080ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b2:	f043 0201 	orr.w	r2, r3, #1
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80080ba:	e018      	b.n	80080ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d111      	bne.n	80080ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d105      	bne.n	80080ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e6:	f043 0201 	orr.w	r2, r3, #1
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7f9 f84a 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80080f4:	e00e      	b.n	8008114 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff fb54 	bl	80077b0 <HAL_ADC_ErrorCallback>
}
 8008108:	e004      	b.n	8008114 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800810e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008128:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7ff fb36 	bl	800779c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008144:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800814a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008156:	f043 0204 	orr.w	r2, r3, #4
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff fb26 	bl	80077b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008164:	bf00      	nop
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800817c:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <__NVIC_SetPriorityGrouping+0x44>)
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008188:	4013      	ands	r3, r2
 800818a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800819c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800819e:	4a04      	ldr	r2, [pc, #16]	@ (80081b0 <__NVIC_SetPriorityGrouping+0x44>)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	60d3      	str	r3, [r2, #12]
}
 80081a4:	bf00      	nop
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	e000ed00 	.word	0xe000ed00

080081b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081b8:	4b04      	ldr	r3, [pc, #16]	@ (80081cc <__NVIC_GetPriorityGrouping+0x18>)
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	0a1b      	lsrs	r3, r3, #8
 80081be:	f003 0307 	and.w	r3, r3, #7
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	e000ed00 	.word	0xe000ed00

080081d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	db0b      	blt.n	80081fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	f003 021f 	and.w	r2, r3, #31
 80081e8:	4907      	ldr	r1, [pc, #28]	@ (8008208 <__NVIC_EnableIRQ+0x38>)
 80081ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ee:	095b      	lsrs	r3, r3, #5
 80081f0:	2001      	movs	r0, #1
 80081f2:	fa00 f202 	lsl.w	r2, r0, r2
 80081f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	e000e100 	.word	0xe000e100

0800820c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800821a:	2b00      	cmp	r3, #0
 800821c:	db12      	blt.n	8008244 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	f003 021f 	and.w	r2, r3, #31
 8008224:	490a      	ldr	r1, [pc, #40]	@ (8008250 <__NVIC_DisableIRQ+0x44>)
 8008226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800822a:	095b      	lsrs	r3, r3, #5
 800822c:	2001      	movs	r0, #1
 800822e:	fa00 f202 	lsl.w	r2, r0, r2
 8008232:	3320      	adds	r3, #32
 8008234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008238:	f3bf 8f4f 	dsb	sy
}
 800823c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800823e:	f3bf 8f6f 	isb	sy
}
 8008242:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	e000e100 	.word	0xe000e100

08008254 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800825e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008262:	2b00      	cmp	r3, #0
 8008264:	db0c      	blt.n	8008280 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	f003 021f 	and.w	r2, r3, #31
 800826c:	4907      	ldr	r1, [pc, #28]	@ (800828c <__NVIC_SetPendingIRQ+0x38>)
 800826e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	2001      	movs	r0, #1
 8008276:	fa00 f202 	lsl.w	r2, r0, r2
 800827a:	3340      	adds	r3, #64	@ 0x40
 800827c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	e000e100 	.word	0xe000e100

08008290 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800829a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	db0c      	blt.n	80082bc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	f003 021f 	and.w	r2, r3, #31
 80082a8:	4907      	ldr	r1, [pc, #28]	@ (80082c8 <__NVIC_ClearPendingIRQ+0x38>)
 80082aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	2001      	movs	r0, #1
 80082b2:	fa00 f202 	lsl.w	r2, r0, r2
 80082b6:	3360      	adds	r3, #96	@ 0x60
 80082b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	e000e100 	.word	0xe000e100

080082cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	db0a      	blt.n	80082f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	490c      	ldr	r1, [pc, #48]	@ (8008318 <__NVIC_SetPriority+0x4c>)
 80082e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ea:	0112      	lsls	r2, r2, #4
 80082ec:	b2d2      	uxtb	r2, r2
 80082ee:	440b      	add	r3, r1
 80082f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082f4:	e00a      	b.n	800830c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	4908      	ldr	r1, [pc, #32]	@ (800831c <__NVIC_SetPriority+0x50>)
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	3b04      	subs	r3, #4
 8008304:	0112      	lsls	r2, r2, #4
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	440b      	add	r3, r1
 800830a:	761a      	strb	r2, [r3, #24]
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	e000e100 	.word	0xe000e100
 800831c:	e000ed00 	.word	0xe000ed00

08008320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008320:	b480      	push	{r7}
 8008322:	b089      	sub	sp, #36	@ 0x24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f1c3 0307 	rsb	r3, r3, #7
 800833a:	2b04      	cmp	r3, #4
 800833c:	bf28      	it	cs
 800833e:	2304      	movcs	r3, #4
 8008340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	3304      	adds	r3, #4
 8008346:	2b06      	cmp	r3, #6
 8008348:	d902      	bls.n	8008350 <NVIC_EncodePriority+0x30>
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	3b03      	subs	r3, #3
 800834e:	e000      	b.n	8008352 <NVIC_EncodePriority+0x32>
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	fa02 f303 	lsl.w	r3, r2, r3
 800835e:	43da      	mvns	r2, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	401a      	ands	r2, r3
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008368:	f04f 31ff 	mov.w	r1, #4294967295
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	fa01 f303 	lsl.w	r3, r1, r3
 8008372:	43d9      	mvns	r1, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008378:	4313      	orrs	r3, r2
         );
}
 800837a:	4618      	mov	r0, r3
 800837c:	3724      	adds	r7, #36	@ 0x24
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3b01      	subs	r3, #1
 8008394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008398:	d301      	bcc.n	800839e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800839a:	2301      	movs	r3, #1
 800839c:	e00f      	b.n	80083be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800839e:	4a0a      	ldr	r2, [pc, #40]	@ (80083c8 <SysTick_Config+0x40>)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083a6:	210f      	movs	r1, #15
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	f7ff ff8e 	bl	80082cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083b0:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <SysTick_Config+0x40>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083b6:	4b04      	ldr	r3, [pc, #16]	@ (80083c8 <SysTick_Config+0x40>)
 80083b8:	2207      	movs	r2, #7
 80083ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	e000e010 	.word	0xe000e010

080083cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff fec9 	bl	800816c <__NVIC_SetPriorityGrouping>
}
 80083da:	bf00      	nop
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b086      	sub	sp, #24
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	4603      	mov	r3, r0
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80083f0:	f7ff fee0 	bl	80081b4 <__NVIC_GetPriorityGrouping>
 80083f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	6978      	ldr	r0, [r7, #20]
 80083fc:	f7ff ff90 	bl	8008320 <NVIC_EncodePriority>
 8008400:	4602      	mov	r2, r0
 8008402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f7ff ff5f 	bl	80082cc <__NVIC_SetPriority>
}
 800840e:	bf00      	nop
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	4603      	mov	r3, r0
 800841e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff fed3 	bl	80081d0 <__NVIC_EnableIRQ>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	4603      	mov	r3, r0
 800843a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800843c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff fee3 	bl	800820c <__NVIC_DisableIRQ>
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff ff96 	bl	8008388 <SysTick_Config>
 800845c:	4603      	mov	r3, r0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	4603      	mov	r3, r0
 800846e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff feed 	bl	8008254 <__NVIC_SetPendingIRQ>
}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	4603      	mov	r3, r0
 800848a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800848c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fefd 	bl	8008290 <__NVIC_ClearPendingIRQ>
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e08e      	b.n	80085d0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	4b47      	ldr	r3, [pc, #284]	@ (80085d8 <HAL_DMA_Init+0x138>)
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d80f      	bhi.n	80084de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	4b45      	ldr	r3, [pc, #276]	@ (80085dc <HAL_DMA_Init+0x13c>)
 80084c6:	4413      	add	r3, r2
 80084c8:	4a45      	ldr	r2, [pc, #276]	@ (80085e0 <HAL_DMA_Init+0x140>)
 80084ca:	fba2 2303 	umull	r2, r3, r2, r3
 80084ce:	091b      	lsrs	r3, r3, #4
 80084d0:	009a      	lsls	r2, r3, #2
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a42      	ldr	r2, [pc, #264]	@ (80085e4 <HAL_DMA_Init+0x144>)
 80084da:	641a      	str	r2, [r3, #64]	@ 0x40
 80084dc:	e00e      	b.n	80084fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	4b40      	ldr	r3, [pc, #256]	@ (80085e8 <HAL_DMA_Init+0x148>)
 80084e6:	4413      	add	r3, r2
 80084e8:	4a3d      	ldr	r2, [pc, #244]	@ (80085e0 <HAL_DMA_Init+0x140>)
 80084ea:	fba2 2303 	umull	r2, r3, r2, r3
 80084ee:	091b      	lsrs	r3, r3, #4
 80084f0:	009a      	lsls	r2, r3, #2
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a3c      	ldr	r2, [pc, #240]	@ (80085ec <HAL_DMA_Init+0x14c>)
 80084fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2202      	movs	r2, #2
 8008500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008516:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800852c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fb16 	bl	8008b80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800855c:	d102      	bne.n	8008564 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800856c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008570:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800857a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d010      	beq.n	80085a6 <HAL_DMA_Init+0x106>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	2b04      	cmp	r3, #4
 800858a:	d80c      	bhi.n	80085a6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fb35 	bl	8008bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80085a2:	605a      	str	r2, [r3, #4]
 80085a4:	e008      	b.n	80085b8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	40020407 	.word	0x40020407
 80085dc:	bffdfff8 	.word	0xbffdfff8
 80085e0:	cccccccd 	.word	0xcccccccd
 80085e4:	40020000 	.word	0x40020000
 80085e8:	bffdfbf8 	.word	0xbffdfbf8
 80085ec:	40020400 	.word	0x40020400

080085f0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e07b      	b.n	80086fa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0201 	bic.w	r2, r2, #1
 8008610:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	4b3a      	ldr	r3, [pc, #232]	@ (8008704 <HAL_DMA_DeInit+0x114>)
 800861a:	429a      	cmp	r2, r3
 800861c:	d80f      	bhi.n	800863e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	4b38      	ldr	r3, [pc, #224]	@ (8008708 <HAL_DMA_DeInit+0x118>)
 8008626:	4413      	add	r3, r2
 8008628:	4a38      	ldr	r2, [pc, #224]	@ (800870c <HAL_DMA_DeInit+0x11c>)
 800862a:	fba2 2303 	umull	r2, r3, r2, r3
 800862e:	091b      	lsrs	r3, r3, #4
 8008630:	009a      	lsls	r2, r3, #2
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a35      	ldr	r2, [pc, #212]	@ (8008710 <HAL_DMA_DeInit+0x120>)
 800863a:	641a      	str	r2, [r3, #64]	@ 0x40
 800863c:	e00e      	b.n	800865c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	4b33      	ldr	r3, [pc, #204]	@ (8008714 <HAL_DMA_DeInit+0x124>)
 8008646:	4413      	add	r3, r2
 8008648:	4a30      	ldr	r2, [pc, #192]	@ (800870c <HAL_DMA_DeInit+0x11c>)
 800864a:	fba2 2303 	umull	r2, r3, r2, r3
 800864e:	091b      	lsrs	r3, r3, #4
 8008650:	009a      	lsls	r2, r3, #2
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a2f      	ldr	r2, [pc, #188]	@ (8008718 <HAL_DMA_DeInit+0x128>)
 800865a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008668:	f003 021c 	and.w	r2, r3, #28
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008670:	2101      	movs	r1, #1
 8008672:	fa01 f202 	lsl.w	r2, r1, r2
 8008676:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fa81 	bl	8008b80 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800868e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00f      	beq.n	80086b8 <HAL_DMA_DeInit+0xc8>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	2b04      	cmp	r3, #4
 800869e:	d80b      	bhi.n	80086b8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 faab 	bl	8008bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80086b6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	40020407 	.word	0x40020407
 8008708:	bffdfff8 	.word	0xbffdfff8
 800870c:	cccccccd 	.word	0xcccccccd
 8008710:	40020000 	.word	0x40020000
 8008714:	bffdfbf8 	.word	0xbffdfbf8
 8008718:	40020400 	.word	0x40020400

0800871c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_DMA_Start_IT+0x20>
 8008738:	2302      	movs	r3, #2
 800873a:	e066      	b.n	800880a <HAL_DMA_Start_IT+0xee>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b01      	cmp	r3, #1
 800874e:	d155      	bne.n	80087fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0201 	bic.w	r2, r2, #1
 800876c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f9c5 	bl	8008b04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800877e:	2b00      	cmp	r3, #0
 8008780:	d008      	beq.n	8008794 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f042 020e 	orr.w	r2, r2, #14
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	e00f      	b.n	80087b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0204 	bic.w	r2, r2, #4
 80087a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 020a 	orr.w	r2, r2, #10
 80087b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d007      	beq.n	80087d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f042 0201 	orr.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	e005      	b.n	8008808 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008804:	2302      	movs	r3, #2
 8008806:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008808:	7dfb      	ldrb	r3, [r7, #23]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e04f      	b.n	80088c4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d008      	beq.n	8008842 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2204      	movs	r2, #4
 8008834:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e040      	b.n	80088c4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 020e 	bic.w	r2, r2, #14
 8008850:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800885c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008860:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0201 	bic.w	r2, r2, #1
 8008870:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008876:	f003 021c 	and.w	r2, r3, #28
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887e:	2101      	movs	r1, #1
 8008880:	fa01 f202 	lsl.w	r2, r1, r2
 8008884:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800888e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00c      	beq.n	80088b2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80088a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80088b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d005      	beq.n	80088f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2204      	movs	r2, #4
 80088ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	73fb      	strb	r3, [r7, #15]
 80088f2:	e047      	b.n	8008984 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f022 020e 	bic.w	r2, r2, #14
 8008902:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800891e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008928:	f003 021c 	and.w	r2, r3, #28
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008930:	2101      	movs	r1, #1
 8008932:	fa01 f202 	lsl.w	r2, r1, r2
 8008936:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008940:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00c      	beq.n	8008964 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008958:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008962:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
    }
  }
  return status;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089aa:	f003 031c 	and.w	r3, r3, #28
 80089ae:	2204      	movs	r2, #4
 80089b0:	409a      	lsls	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4013      	ands	r3, r2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d026      	beq.n	8008a08 <HAL_DMA_IRQHandler+0x7a>
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d021      	beq.n	8008a08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0320 	and.w	r3, r3, #32
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d107      	bne.n	80089e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0204 	bic.w	r2, r2, #4
 80089e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e6:	f003 021c 	and.w	r2, r3, #28
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ee:	2104      	movs	r1, #4
 80089f0:	fa01 f202 	lsl.w	r2, r1, r2
 80089f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d071      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008a06:	e06c      	b.n	8008ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a0c:	f003 031c 	and.w	r3, r3, #28
 8008a10:	2202      	movs	r2, #2
 8008a12:	409a      	lsls	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4013      	ands	r3, r2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d02e      	beq.n	8008a7a <HAL_DMA_IRQHandler+0xec>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d029      	beq.n	8008a7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10b      	bne.n	8008a4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 020a 	bic.w	r2, r2, #10
 8008a42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a50:	f003 021c 	and.w	r2, r3, #28
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a58:	2102      	movs	r1, #2
 8008a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d038      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a78:	e033      	b.n	8008ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7e:	f003 031c 	and.w	r3, r3, #28
 8008a82:	2208      	movs	r2, #8
 8008a84:	409a      	lsls	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d02a      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x156>
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f003 0308 	and.w	r3, r3, #8
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d025      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 020e 	bic.w	r2, r2, #14
 8008aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aac:	f003 021c 	and.w	r2, r3, #28
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8008aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d004      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
}
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d004      	beq.n	8008b2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008b2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b32:	f003 021c 	and.w	r2, r3, #28
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8008b40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	2b10      	cmp	r3, #16
 8008b50:	d108      	bne.n	8008b64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008b62:	e007      	b.n	8008b74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	60da      	str	r2, [r3, #12]
}
 8008b74:	bf00      	nop
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4b17      	ldr	r3, [pc, #92]	@ (8008bec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d80a      	bhi.n	8008baa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b98:	089b      	lsrs	r3, r3, #2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ba0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6493      	str	r3, [r2, #72]	@ 0x48
 8008ba8:	e007      	b.n	8008bba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bae:	089b      	lsrs	r3, r3, #2
 8008bb0:	009a      	lsls	r2, r3, #2
 8008bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008bb4:	4413      	add	r3, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	3b08      	subs	r3, #8
 8008bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc8:	091b      	lsrs	r3, r3, #4
 8008bca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a0a      	ldr	r2, [pc, #40]	@ (8008bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008bd0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f003 031f 	and.w	r3, r3, #31
 8008bd8:	2201      	movs	r2, #1
 8008bda:	409a      	lsls	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008be0:	bf00      	nop
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	40020407 	.word	0x40020407
 8008bf0:	4002081c 	.word	0x4002081c
 8008bf4:	cccccccd 	.word	0xcccccccd
 8008bf8:	40020880 	.word	0x40020880

08008bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c0c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4b0b      	ldr	r3, [pc, #44]	@ (8008c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a09      	ldr	r2, [pc, #36]	@ (8008c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008c20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	409a      	lsls	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008c32:	bf00      	nop
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	1000823f 	.word	0x1000823f
 8008c44:	40020940 	.word	0x40020940

08008c48 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c52:	2300      	movs	r3, #0
 8008c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c56:	e14c      	b.n	8008ef2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	4013      	ands	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 813e 	beq.w	8008eec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d005      	beq.n	8008c88 <HAL_GPIO_Init+0x40>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d130      	bne.n	8008cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	2203      	movs	r2, #3
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	091b      	lsrs	r3, r3, #4
 8008cd4:	f003 0201 	and.w	r2, r3, #1
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d017      	beq.n	8008d26 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	2203      	movs	r2, #3
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	43db      	mvns	r3, r3
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d123      	bne.n	8008d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	08da      	lsrs	r2, r3, #3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3208      	adds	r2, #8
 8008d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	220f      	movs	r2, #15
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	43db      	mvns	r3, r3
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4013      	ands	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	691a      	ldr	r2, [r3, #16]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f003 0307 	and.w	r3, r3, #7
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	08da      	lsrs	r2, r3, #3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3208      	adds	r2, #8
 8008d74:	6939      	ldr	r1, [r7, #16]
 8008d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	2203      	movs	r2, #3
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f003 0203 	and.w	r2, r3, #3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 8098 	beq.w	8008eec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008dbc:	4a54      	ldr	r2, [pc, #336]	@ (8008f10 <HAL_GPIO_Init+0x2c8>)
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	089b      	lsrs	r3, r3, #2
 8008dc2:	3302      	adds	r3, #2
 8008dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f003 0303 	and.w	r3, r3, #3
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	220f      	movs	r2, #15
 8008dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd8:	43db      	mvns	r3, r3
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008de6:	d019      	beq.n	8008e1c <HAL_GPIO_Init+0x1d4>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a4a      	ldr	r2, [pc, #296]	@ (8008f14 <HAL_GPIO_Init+0x2cc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d013      	beq.n	8008e18 <HAL_GPIO_Init+0x1d0>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a49      	ldr	r2, [pc, #292]	@ (8008f18 <HAL_GPIO_Init+0x2d0>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d00d      	beq.n	8008e14 <HAL_GPIO_Init+0x1cc>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a48      	ldr	r2, [pc, #288]	@ (8008f1c <HAL_GPIO_Init+0x2d4>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d007      	beq.n	8008e10 <HAL_GPIO_Init+0x1c8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a47      	ldr	r2, [pc, #284]	@ (8008f20 <HAL_GPIO_Init+0x2d8>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d101      	bne.n	8008e0c <HAL_GPIO_Init+0x1c4>
 8008e08:	2304      	movs	r3, #4
 8008e0a:	e008      	b.n	8008e1e <HAL_GPIO_Init+0x1d6>
 8008e0c:	2307      	movs	r3, #7
 8008e0e:	e006      	b.n	8008e1e <HAL_GPIO_Init+0x1d6>
 8008e10:	2303      	movs	r3, #3
 8008e12:	e004      	b.n	8008e1e <HAL_GPIO_Init+0x1d6>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e002      	b.n	8008e1e <HAL_GPIO_Init+0x1d6>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e000      	b.n	8008e1e <HAL_GPIO_Init+0x1d6>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	f002 0203 	and.w	r2, r2, #3
 8008e24:	0092      	lsls	r2, r2, #2
 8008e26:	4093      	lsls	r3, r2
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008e2e:	4938      	ldr	r1, [pc, #224]	@ (8008f10 <HAL_GPIO_Init+0x2c8>)
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	089b      	lsrs	r3, r3, #2
 8008e34:	3302      	adds	r3, #2
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e3c:	4b39      	ldr	r3, [pc, #228]	@ (8008f24 <HAL_GPIO_Init+0x2dc>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	43db      	mvns	r3, r3
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e60:	4a30      	ldr	r2, [pc, #192]	@ (8008f24 <HAL_GPIO_Init+0x2dc>)
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e66:	4b2f      	ldr	r3, [pc, #188]	@ (8008f24 <HAL_GPIO_Init+0x2dc>)
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	43db      	mvns	r3, r3
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	4013      	ands	r3, r2
 8008e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008e8a:	4a26      	ldr	r2, [pc, #152]	@ (8008f24 <HAL_GPIO_Init+0x2dc>)
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008e90:	4b24      	ldr	r3, [pc, #144]	@ (8008f24 <HAL_GPIO_Init+0x2dc>)
 8008e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	43db      	mvns	r3, r3
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8008f24 <HAL_GPIO_Init+0x2dc>)
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8008ebe:	4b19      	ldr	r3, [pc, #100]	@ (8008f24 <HAL_GPIO_Init+0x2dc>)
 8008ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8008f24 <HAL_GPIO_Init+0x2dc>)
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f47f aeab 	bne.w	8008c58 <HAL_GPIO_Init+0x10>
  }
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	371c      	adds	r7, #28
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	40010000 	.word	0x40010000
 8008f14:	48000400 	.word	0x48000400
 8008f18:	48000800 	.word	0x48000800
 8008f1c:	48000c00 	.word	0x48000c00
 8008f20:	48001000 	.word	0x48001000
 8008f24:	58000800 	.word	0x58000800

08008f28 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f32:	2300      	movs	r3, #0
 8008f34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008f36:	e0bb      	b.n	80090b0 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008f38:	2201      	movs	r2, #1
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	4013      	ands	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 80ae 	beq.w	80090aa <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008f4e:	4a5f      	ldr	r2, [pc, #380]	@ (80090cc <HAL_GPIO_DeInit+0x1a4>)
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	089b      	lsrs	r3, r3, #2
 8008f54:	3302      	adds	r3, #2
 8008f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f5a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	220f      	movs	r2, #15
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008f76:	d019      	beq.n	8008fac <HAL_GPIO_DeInit+0x84>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a55      	ldr	r2, [pc, #340]	@ (80090d0 <HAL_GPIO_DeInit+0x1a8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d013      	beq.n	8008fa8 <HAL_GPIO_DeInit+0x80>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a54      	ldr	r2, [pc, #336]	@ (80090d4 <HAL_GPIO_DeInit+0x1ac>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00d      	beq.n	8008fa4 <HAL_GPIO_DeInit+0x7c>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a53      	ldr	r2, [pc, #332]	@ (80090d8 <HAL_GPIO_DeInit+0x1b0>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d007      	beq.n	8008fa0 <HAL_GPIO_DeInit+0x78>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a52      	ldr	r2, [pc, #328]	@ (80090dc <HAL_GPIO_DeInit+0x1b4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d101      	bne.n	8008f9c <HAL_GPIO_DeInit+0x74>
 8008f98:	2304      	movs	r3, #4
 8008f9a:	e008      	b.n	8008fae <HAL_GPIO_DeInit+0x86>
 8008f9c:	2307      	movs	r3, #7
 8008f9e:	e006      	b.n	8008fae <HAL_GPIO_DeInit+0x86>
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e004      	b.n	8008fae <HAL_GPIO_DeInit+0x86>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e002      	b.n	8008fae <HAL_GPIO_DeInit+0x86>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e000      	b.n	8008fae <HAL_GPIO_DeInit+0x86>
 8008fac:	2300      	movs	r3, #0
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	f002 0203 	and.w	r2, r2, #3
 8008fb4:	0092      	lsls	r2, r2, #2
 8008fb6:	4093      	lsls	r3, r2
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d136      	bne.n	800902c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008fbe:	4b48      	ldr	r3, [pc, #288]	@ (80090e0 <HAL_GPIO_DeInit+0x1b8>)
 8008fc0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	43db      	mvns	r3, r3
 8008fc8:	4945      	ldr	r1, [pc, #276]	@ (80090e0 <HAL_GPIO_DeInit+0x1b8>)
 8008fca:	4013      	ands	r3, r2
 8008fcc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8008fd0:	4b43      	ldr	r3, [pc, #268]	@ (80090e0 <HAL_GPIO_DeInit+0x1b8>)
 8008fd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	43db      	mvns	r3, r3
 8008fda:	4941      	ldr	r1, [pc, #260]	@ (80090e0 <HAL_GPIO_DeInit+0x1b8>)
 8008fdc:	4013      	ands	r3, r2
 8008fde:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8008fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80090e0 <HAL_GPIO_DeInit+0x1b8>)
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	493d      	ldr	r1, [pc, #244]	@ (80090e0 <HAL_GPIO_DeInit+0x1b8>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8008ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80090e0 <HAL_GPIO_DeInit+0x1b8>)
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	43db      	mvns	r3, r3
 8008ff8:	4939      	ldr	r1, [pc, #228]	@ (80090e0 <HAL_GPIO_DeInit+0x1b8>)
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f003 0303 	and.w	r3, r3, #3
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	220f      	movs	r2, #15
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800900e:	4a2f      	ldr	r2, [pc, #188]	@ (80090cc <HAL_GPIO_DeInit+0x1a4>)
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	089b      	lsrs	r3, r3, #2
 8009014:	3302      	adds	r3, #2
 8009016:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	43da      	mvns	r2, r3
 800901e:	482b      	ldr	r0, [pc, #172]	@ (80090cc <HAL_GPIO_DeInit+0x1a4>)
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	089b      	lsrs	r3, r3, #2
 8009024:	400a      	ands	r2, r1
 8009026:	3302      	adds	r3, #2
 8009028:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	2103      	movs	r1, #3
 8009036:	fa01 f303 	lsl.w	r3, r1, r3
 800903a:	431a      	orrs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	08da      	lsrs	r2, r3, #3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3208      	adds	r2, #8
 8009048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	220f      	movs	r2, #15
 8009056:	fa02 f303 	lsl.w	r3, r2, r3
 800905a:	43db      	mvns	r3, r3
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	08d2      	lsrs	r2, r2, #3
 8009060:	4019      	ands	r1, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3208      	adds	r2, #8
 8009066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	2103      	movs	r1, #3
 8009074:	fa01 f303 	lsl.w	r3, r1, r3
 8009078:	43db      	mvns	r3, r3
 800907a:	401a      	ands	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	2101      	movs	r1, #1
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	fa01 f303 	lsl.w	r3, r1, r3
 800908c:	43db      	mvns	r3, r3
 800908e:	401a      	ands	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	2103      	movs	r1, #3
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	43db      	mvns	r3, r3
 80090a4:	401a      	ands	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	3301      	adds	r3, #1
 80090ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	fa22 f303 	lsr.w	r3, r2, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f47f af3d 	bne.w	8008f38 <HAL_GPIO_DeInit+0x10>
  }
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	371c      	adds	r7, #28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	40010000 	.word	0x40010000
 80090d0:	48000400 	.word	0x48000400
 80090d4:	48000800 	.word	0x48000800
 80090d8:	48000c00 	.word	0x48000c00
 80090dc:	48001000 	.word	0x48001000
 80090e0:	58000800 	.word	0x58000800

080090e4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	887b      	ldrh	r3, [r7, #2]
 80090f6:	4013      	ands	r3, r2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80090fc:	2301      	movs	r3, #1
 80090fe:	73fb      	strb	r3, [r7, #15]
 8009100:	e001      	b.n	8009106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009106:	7bfb      	ldrb	r3, [r7, #15]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	807b      	strh	r3, [r7, #2]
 8009120:	4613      	mov	r3, r2
 8009122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009124:	787b      	ldrb	r3, [r7, #1]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800912a:	887a      	ldrh	r2, [r7, #2]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009130:	e002      	b.n	8009138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009132:	887a      	ldrh	r2, [r7, #2]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009156:	887a      	ldrh	r2, [r7, #2]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4013      	ands	r3, r2
 800915c:	041a      	lsls	r2, r3, #16
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	43d9      	mvns	r1, r3
 8009162:	887b      	ldrh	r3, [r7, #2]
 8009164:	400b      	ands	r3, r1
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	619a      	str	r2, [r3, #24]
}
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009182:	4b08      	ldr	r3, [pc, #32]	@ (80091a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	88fb      	ldrh	r3, [r7, #6]
 8009188:	4013      	ands	r3, r2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d006      	beq.n	800919c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800918e:	4a05      	ldr	r2, [pc, #20]	@ (80091a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009194:	88fb      	ldrh	r3, [r7, #6]
 8009196:	4618      	mov	r0, r3
 8009198:	f7f9 fbd4 	bl	8002944 <HAL_GPIO_EXTI_Callback>
  }
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	58000800 	.word	0x58000800

080091a8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80091ae:	4b0a      	ldr	r3, [pc, #40]	@ (80091d8 <HAL_HSEM_IRQHandler+0x30>)
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80091b4:	4b08      	ldr	r3, [pc, #32]	@ (80091d8 <HAL_HSEM_IRQHandler+0x30>)
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	43db      	mvns	r3, r3
 80091bc:	4906      	ldr	r1, [pc, #24]	@ (80091d8 <HAL_HSEM_IRQHandler+0x30>)
 80091be:	4013      	ands	r3, r2
 80091c0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80091c2:	4a05      	ldr	r2, [pc, #20]	@ (80091d8 <HAL_HSEM_IRQHandler+0x30>)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f807 	bl	80091dc <HAL_HSEM_FreeCallback>
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	58001500 	.word	0x58001500

080091dc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e08d      	b.n	800931e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d106      	bne.n	800921c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7f9 fa6c 	bl	80026f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2224      	movs	r2, #36	@ 0x24
 8009220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0201 	bic.w	r2, r2, #1
 8009232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009240:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009250:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d107      	bne.n	800926a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009266:	609a      	str	r2, [r3, #8]
 8009268:	e006      	b.n	8009278 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689a      	ldr	r2, [r3, #8]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009276:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d108      	bne.n	8009292 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800928e:	605a      	str	r2, [r3, #4]
 8009290:	e007      	b.n	80092a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	6812      	ldr	r2, [r2, #0]
 80092ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80092b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68da      	ldr	r2, [r3, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80092c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691a      	ldr	r2, [r3, #16]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	69d9      	ldr	r1, [r3, #28]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1a      	ldr	r2, [r3, #32]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f042 0201 	orr.w	r2, r2, #1
 80092fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d101      	bne.n	8009338 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e021      	b.n	800937c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2224      	movs	r2, #36	@ 0x24
 800933c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0201 	bic.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7f9 fa59 	bl	8002808 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	4608      	mov	r0, r1
 800938e:	4611      	mov	r1, r2
 8009390:	461a      	mov	r2, r3
 8009392:	4603      	mov	r3, r0
 8009394:	817b      	strh	r3, [r7, #10]
 8009396:	460b      	mov	r3, r1
 8009398:	813b      	strh	r3, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	f040 80f9 	bne.w	800959e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d002      	beq.n	80093b8 <HAL_I2C_Mem_Write+0x34>
 80093b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d105      	bne.n	80093c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e0ed      	b.n	80095a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d101      	bne.n	80093d2 <HAL_I2C_Mem_Write+0x4e>
 80093ce:	2302      	movs	r3, #2
 80093d0:	e0e6      	b.n	80095a0 <HAL_I2C_Mem_Write+0x21c>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093da:	f7fd fe23 	bl	8007024 <HAL_GetTick>
 80093de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	2319      	movs	r3, #25
 80093e6:	2201      	movs	r2, #1
 80093e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 f955 	bl	800969c <I2C_WaitOnFlagUntilTimeout>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e0d1      	b.n	80095a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2221      	movs	r2, #33	@ 0x21
 8009400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2240      	movs	r2, #64	@ 0x40
 8009408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6a3a      	ldr	r2, [r7, #32]
 8009416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800941c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009424:	88f8      	ldrh	r0, [r7, #6]
 8009426:	893a      	ldrh	r2, [r7, #8]
 8009428:	8979      	ldrh	r1, [r7, #10]
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	4603      	mov	r3, r0
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f8b9 	bl	80095ac <I2C_RequestMemoryWrite>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d005      	beq.n	800944c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e0a9      	b.n	80095a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009450:	b29b      	uxth	r3, r3
 8009452:	2bff      	cmp	r3, #255	@ 0xff
 8009454:	d90e      	bls.n	8009474 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	22ff      	movs	r2, #255	@ 0xff
 800945a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009460:	b2da      	uxtb	r2, r3
 8009462:	8979      	ldrh	r1, [r7, #10]
 8009464:	2300      	movs	r3, #0
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 fad9 	bl	8009a24 <I2C_TransferConfig>
 8009472:	e00f      	b.n	8009494 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009478:	b29a      	uxth	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009482:	b2da      	uxtb	r2, r3
 8009484:	8979      	ldrh	r1, [r7, #10]
 8009486:	2300      	movs	r3, #0
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fac8 	bl	8009a24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 f958 	bl	800974e <I2C_WaitOnTXISFlagUntilTimeout>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e07b      	b.n	80095a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	3b01      	subs	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d034      	beq.n	800954c <HAL_I2C_Mem_Write+0x1c8>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d130      	bne.n	800954c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f0:	2200      	movs	r2, #0
 80094f2:	2180      	movs	r1, #128	@ 0x80
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 f8d1 	bl	800969c <I2C_WaitOnFlagUntilTimeout>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e04d      	b.n	80095a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009508:	b29b      	uxth	r3, r3
 800950a:	2bff      	cmp	r3, #255	@ 0xff
 800950c:	d90e      	bls.n	800952c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	22ff      	movs	r2, #255	@ 0xff
 8009512:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009518:	b2da      	uxtb	r2, r3
 800951a:	8979      	ldrh	r1, [r7, #10]
 800951c:	2300      	movs	r3, #0
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 fa7d 	bl	8009a24 <I2C_TransferConfig>
 800952a:	e00f      	b.n	800954c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009530:	b29a      	uxth	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800953a:	b2da      	uxtb	r2, r3
 800953c:	8979      	ldrh	r1, [r7, #10]
 800953e:	2300      	movs	r3, #0
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 fa6c 	bl	8009a24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009550:	b29b      	uxth	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d19e      	bne.n	8009494 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 f93e 	bl	80097dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e01a      	b.n	80095a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2220      	movs	r2, #32
 8009570:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6859      	ldr	r1, [r3, #4]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	4b0a      	ldr	r3, [pc, #40]	@ (80095a8 <HAL_I2C_Mem_Write+0x224>)
 800957e:	400b      	ands	r3, r1
 8009580:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2220      	movs	r2, #32
 8009586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	e000      	b.n	80095a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800959e:	2302      	movs	r3, #2
  }
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	fe00e800 	.word	0xfe00e800

080095ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	4608      	mov	r0, r1
 80095b6:	4611      	mov	r1, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	817b      	strh	r3, [r7, #10]
 80095be:	460b      	mov	r3, r1
 80095c0:	813b      	strh	r3, [r7, #8]
 80095c2:	4613      	mov	r3, r2
 80095c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	8979      	ldrh	r1, [r7, #10]
 80095cc:	4b20      	ldr	r3, [pc, #128]	@ (8009650 <I2C_RequestMemoryWrite+0xa4>)
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 fa25 	bl	8009a24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095da:	69fa      	ldr	r2, [r7, #28]
 80095dc:	69b9      	ldr	r1, [r7, #24]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 f8b5 	bl	800974e <I2C_WaitOnTXISFlagUntilTimeout>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e02c      	b.n	8009648 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d105      	bne.n	8009600 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095f4:	893b      	ldrh	r3, [r7, #8]
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80095fe:	e015      	b.n	800962c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009600:	893b      	ldrh	r3, [r7, #8]
 8009602:	0a1b      	lsrs	r3, r3, #8
 8009604:	b29b      	uxth	r3, r3
 8009606:	b2da      	uxtb	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800960e:	69fa      	ldr	r2, [r7, #28]
 8009610:	69b9      	ldr	r1, [r7, #24]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 f89b 	bl	800974e <I2C_WaitOnTXISFlagUntilTimeout>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e012      	b.n	8009648 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009622:	893b      	ldrh	r3, [r7, #8]
 8009624:	b2da      	uxtb	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	2200      	movs	r2, #0
 8009634:	2180      	movs	r1, #128	@ 0x80
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 f830 	bl	800969c <I2C_WaitOnFlagUntilTimeout>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e000      	b.n	8009648 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	80002000 	.word	0x80002000

08009654 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	2b02      	cmp	r3, #2
 8009668:	d103      	bne.n	8009672 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2200      	movs	r2, #0
 8009670:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b01      	cmp	r3, #1
 800967e:	d007      	beq.n	8009690 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	699a      	ldr	r2, [r3, #24]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0201 	orr.w	r2, r2, #1
 800968e:	619a      	str	r2, [r3, #24]
  }
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	4613      	mov	r3, r2
 80096aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096ac:	e03b      	b.n	8009726 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 f8d6 	bl	8009864 <I2C_IsErrorOccurred>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e041      	b.n	8009746 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c8:	d02d      	beq.n	8009726 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ca:	f7fd fcab 	bl	8007024 <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d302      	bcc.n	80096e0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d122      	bne.n	8009726 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699a      	ldr	r2, [r3, #24]
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4013      	ands	r3, r2
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	bf0c      	ite	eq
 80096f0:	2301      	moveq	r3, #1
 80096f2:	2300      	movne	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	461a      	mov	r2, r3
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d113      	bne.n	8009726 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009702:	f043 0220 	orr.w	r2, r3, #32
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2220      	movs	r2, #32
 800970e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e00f      	b.n	8009746 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	699a      	ldr	r2, [r3, #24]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4013      	ands	r3, r2
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	429a      	cmp	r2, r3
 8009734:	bf0c      	ite	eq
 8009736:	2301      	moveq	r3, #1
 8009738:	2300      	movne	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	429a      	cmp	r2, r3
 8009742:	d0b4      	beq.n	80096ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	60f8      	str	r0, [r7, #12]
 8009756:	60b9      	str	r1, [r7, #8]
 8009758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800975a:	e033      	b.n	80097c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f87f 	bl	8009864 <I2C_IsErrorOccurred>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e031      	b.n	80097d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009776:	d025      	beq.n	80097c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009778:	f7fd fc54 	bl	8007024 <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	429a      	cmp	r2, r3
 8009786:	d302      	bcc.n	800978e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d11a      	bne.n	80097c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b02      	cmp	r3, #2
 800979a:	d013      	beq.n	80097c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a0:	f043 0220 	orr.w	r2, r3, #32
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e007      	b.n	80097d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d1c4      	bne.n	800975c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097e8:	e02f      	b.n	800984a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	68b9      	ldr	r1, [r7, #8]
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 f838 	bl	8009864 <I2C_IsErrorOccurred>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e02d      	b.n	800985a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097fe:	f7fd fc11 	bl	8007024 <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	429a      	cmp	r2, r3
 800980c:	d302      	bcc.n	8009814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d11a      	bne.n	800984a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b20      	cmp	r3, #32
 8009820:	d013      	beq.n	800984a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009826:	f043 0220 	orr.w	r2, r3, #32
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2220      	movs	r2, #32
 8009832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e007      	b.n	800985a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	f003 0320 	and.w	r3, r3, #32
 8009854:	2b20      	cmp	r3, #32
 8009856:	d1c8      	bne.n	80097ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08a      	sub	sp, #40	@ 0x28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	f003 0310 	and.w	r3, r3, #16
 800988c:	2b00      	cmp	r3, #0
 800988e:	d068      	beq.n	8009962 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2210      	movs	r2, #16
 8009896:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009898:	e049      	b.n	800992e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a0:	d045      	beq.n	800992e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80098a2:	f7fd fbbf 	bl	8007024 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d302      	bcc.n	80098b8 <I2C_IsErrorOccurred+0x54>
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d13a      	bne.n	800992e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098da:	d121      	bne.n	8009920 <I2C_IsErrorOccurred+0xbc>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098e2:	d01d      	beq.n	8009920 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80098e4:	7cfb      	ldrb	r3, [r7, #19]
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d01a      	beq.n	8009920 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80098fa:	f7fd fb93 	bl	8007024 <HAL_GetTick>
 80098fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009900:	e00e      	b.n	8009920 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009902:	f7fd fb8f 	bl	8007024 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	2b19      	cmp	r3, #25
 800990e:	d907      	bls.n	8009920 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	f043 0320 	orr.w	r3, r3, #32
 8009916:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800991e:	e006      	b.n	800992e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f003 0320 	and.w	r3, r3, #32
 800992a:	2b20      	cmp	r3, #32
 800992c:	d1e9      	bne.n	8009902 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	f003 0320 	and.w	r3, r3, #32
 8009938:	2b20      	cmp	r3, #32
 800993a:	d003      	beq.n	8009944 <I2C_IsErrorOccurred+0xe0>
 800993c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0aa      	beq.n	800989a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009948:	2b00      	cmp	r3, #0
 800994a:	d103      	bne.n	8009954 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2220      	movs	r2, #32
 8009952:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	f043 0304 	orr.w	r3, r3, #4
 800995a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009984:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00b      	beq.n	80099ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	f043 0308 	orr.w	r3, r3, #8
 800999c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80099a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	f043 0302 	orr.w	r3, r3, #2
 80099be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80099d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01c      	beq.n	8009a12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f7ff fe3b 	bl	8009654 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6859      	ldr	r1, [r3, #4]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009a20 <I2C_IsErrorOccurred+0x1bc>)
 80099ea:	400b      	ands	r3, r1
 80099ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	431a      	orrs	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2220      	movs	r2, #32
 80099fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009a12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3728      	adds	r7, #40	@ 0x28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	fe00e800 	.word	0xfe00e800

08009a24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	607b      	str	r3, [r7, #4]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	817b      	strh	r3, [r7, #10]
 8009a32:	4613      	mov	r3, r2
 8009a34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a36:	897b      	ldrh	r3, [r7, #10]
 8009a38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a3c:	7a7b      	ldrb	r3, [r7, #9]
 8009a3e:	041b      	lsls	r3, r3, #16
 8009a40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	0d5b      	lsrs	r3, r3, #21
 8009a5e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009a62:	4b08      	ldr	r3, [pc, #32]	@ (8009a84 <I2C_TransferConfig+0x60>)
 8009a64:	430b      	orrs	r3, r1
 8009a66:	43db      	mvns	r3, r3
 8009a68:	ea02 0103 	and.w	r1, r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a76:	bf00      	nop
 8009a78:	371c      	adds	r7, #28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	03ff63ff 	.word	0x03ff63ff

08009a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d138      	bne.n	8009b10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d101      	bne.n	8009aac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	e032      	b.n	8009b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2224      	movs	r2, #36	@ 0x24
 8009ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0201 	bic.w	r2, r2, #1
 8009aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ada:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6819      	ldr	r1, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	e000      	b.n	8009b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b10:	2302      	movs	r3, #2
  }
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d139      	bne.n	8009ba8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d101      	bne.n	8009b42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e033      	b.n	8009baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2224      	movs	r2, #36	@ 0x24
 8009b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 0201 	bic.w	r2, r2, #1
 8009b60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009b70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f042 0201 	orr.w	r2, r2, #1
 8009b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2220      	movs	r2, #32
 8009b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	e000      	b.n	8009baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ba8:	2302      	movs	r3, #2
  }
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
	...

08009bb8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009bc0:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	4904      	ldr	r1, [pc, #16]	@ (8009bd8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	604b      	str	r3, [r1, #4]
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	40010000 	.word	0x40010000

08009bdc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d01e      	beq.n	8009c2c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009bee:	4b13      	ldr	r3, [pc, #76]	@ (8009c3c <HAL_IPCC_Init+0x60>)
 8009bf0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d102      	bne.n	8009c04 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7f8 fe64 	bl	80028cc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009c04:	68b8      	ldr	r0, [r7, #8]
 8009c06:	f000 f85b 	bl	8009cc0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f82c 	bl	8009c74 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8009c2a:	e001      	b.n	8009c30 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	58000c00 	.word	0x58000c00

08009c40 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b085      	sub	sp, #20
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	4613      	mov	r3, r2
 8009c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009c68:	bf00      	nop
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	e00f      	b.n	8009ca2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8009cb8 <IPCC_SetDefaultCallbacks+0x44>)
 8009c8c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3306      	adds	r3, #6
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	4a08      	ldr	r2, [pc, #32]	@ (8009cbc <IPCC_SetDefaultCallbacks+0x48>)
 8009c9a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b05      	cmp	r3, #5
 8009ca6:	d9ec      	bls.n	8009c82 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	08009c41 	.word	0x08009c41
 8009cbc:	08009c5b 	.word	0x08009c5b

08009cc0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009cd4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	223f      	movs	r2, #63	@ 0x3f
 8009cda:	609a      	str	r2, [r3, #8]
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d101      	bne.n	8009cfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e0c0      	b.n	8009e7c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d106      	bne.n	8009d14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f00e fece 	bl	8018ab0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2203      	movs	r2, #3
 8009d18:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f007 f88e 	bl	8010e42 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
 8009d2a:	e03e      	b.n	8009daa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009d2c:	7bfa      	ldrb	r2, [r7, #15]
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	440b      	add	r3, r1
 8009d3a:	3311      	adds	r3, #17
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009d40:	7bfa      	ldrb	r2, [r7, #15]
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	440b      	add	r3, r1
 8009d4e:	3310      	adds	r3, #16
 8009d50:	7bfa      	ldrb	r2, [r7, #15]
 8009d52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009d54:	7bfa      	ldrb	r2, [r7, #15]
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	440b      	add	r3, r1
 8009d62:	3313      	adds	r3, #19
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009d68:	7bfa      	ldrb	r2, [r7, #15]
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	00db      	lsls	r3, r3, #3
 8009d74:	440b      	add	r3, r1
 8009d76:	3320      	adds	r3, #32
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009d7c:	7bfa      	ldrb	r2, [r7, #15]
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	4613      	mov	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	440b      	add	r3, r1
 8009d8a:	3324      	adds	r3, #36	@ 0x24
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	440b      	add	r3, r1
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
 8009da6:	3301      	adds	r3, #1
 8009da8:	73fb      	strb	r3, [r7, #15]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	791b      	ldrb	r3, [r3, #4]
 8009dae:	7bfa      	ldrb	r2, [r7, #15]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d3bb      	bcc.n	8009d2c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009db4:	2300      	movs	r3, #0
 8009db6:	73fb      	strb	r3, [r7, #15]
 8009db8:	e044      	b.n	8009e44 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009dba:	7bfa      	ldrb	r2, [r7, #15]
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	00db      	lsls	r3, r3, #3
 8009dc6:	440b      	add	r3, r1
 8009dc8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009dcc:	2200      	movs	r2, #0
 8009dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009dd0:	7bfa      	ldrb	r2, [r7, #15]
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	440b      	add	r3, r1
 8009dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009de2:	7bfa      	ldrb	r2, [r7, #15]
 8009de4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009de6:	7bfa      	ldrb	r2, [r7, #15]
 8009de8:	6879      	ldr	r1, [r7, #4]
 8009dea:	4613      	mov	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	440b      	add	r3, r1
 8009df4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009dfc:	7bfa      	ldrb	r2, [r7, #15]
 8009dfe:	6879      	ldr	r1, [r7, #4]
 8009e00:	4613      	mov	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	440b      	add	r3, r1
 8009e0a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009e0e:	2200      	movs	r2, #0
 8009e10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009e12:	7bfa      	ldrb	r2, [r7, #15]
 8009e14:	6879      	ldr	r1, [r7, #4]
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	440b      	add	r3, r1
 8009e20:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009e28:	7bfa      	ldrb	r2, [r7, #15]
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	440b      	add	r3, r1
 8009e36:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	3301      	adds	r3, #1
 8009e42:	73fb      	strb	r3, [r7, #15]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	791b      	ldrb	r3, [r3, #4]
 8009e48:	7bfa      	ldrb	r2, [r7, #15]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d3b5      	bcc.n	8009dba <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6818      	ldr	r0, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	3304      	adds	r3, #4
 8009e56:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009e5a:	f007 f80d 	bl	8010e78 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	7a9b      	ldrb	r3, [r3, #10]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d102      	bne.n	8009e7a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 fc0e 	bl	800b696 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d101      	bne.n	8009e9a <HAL_PCD_Start+0x16>
 8009e96:	2302      	movs	r3, #2
 8009e98:	e012      	b.n	8009ec0 <HAL_PCD_Start+0x3c>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f006 ffb4 	bl	8010e14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f008 fd91 	bl	80129d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f008 fd96 	bl	8012a06 <USB_ReadInterrupts>
 8009eda:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fb06 	bl	800a4f8 <PCD_EP_ISR_Handler>

    return;
 8009eec:	e110      	b.n	800a110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d013      	beq.n	8009f20 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f0a:	b292      	uxth	r2, r2
 8009f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f00e fe5a 	bl	8018bca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009f16:	2100      	movs	r1, #0
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f8fc 	bl	800a116 <HAL_PCD_SetAddress>

    return;
 8009f1e:	e0f7      	b.n	800a110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00c      	beq.n	8009f44 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009f3c:	b292      	uxth	r2, r2
 8009f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009f42:	e0e5      	b.n	800a110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00c      	beq.n	8009f68 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009f60:	b292      	uxth	r2, r2
 8009f62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009f66:	e0d3      	b.n	800a110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d034      	beq.n	8009fdc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0204 	bic.w	r2, r2, #4
 8009f84:	b292      	uxth	r2, r2
 8009f86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0208 	bic.w	r2, r2, #8
 8009f9c:	b292      	uxth	r2, r2
 8009f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d107      	bne.n	8009fbc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f00e fffc 	bl	8018fb4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f00e fe3d 	bl	8018c3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009fd4:	b292      	uxth	r2, r2
 8009fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009fda:	e099      	b.n	800a110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d027      	beq.n	800a036 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 0208 	orr.w	r2, r2, #8
 8009ff8:	b292      	uxth	r2, r2
 8009ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a006:	b29a      	uxth	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a010:	b292      	uxth	r2, r2
 800a012:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a01e:	b29a      	uxth	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f042 0204 	orr.w	r2, r2, #4
 800a028:	b292      	uxth	r2, r2
 800a02a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f00e fdea 	bl	8018c08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a034:	e06c      	b.n	800a110 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d040      	beq.n	800a0c2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a048:	b29a      	uxth	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a052:	b292      	uxth	r2, r2
 800a054:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d12b      	bne.n	800a0ba <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f042 0204 	orr.w	r2, r2, #4
 800a074:	b292      	uxth	r2, r2
 800a076:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f042 0208 	orr.w	r2, r2, #8
 800a08c:	b292      	uxth	r2, r2
 800a08e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	089b      	lsrs	r3, r3, #2
 800a0a6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f00e ff7e 	bl	8018fb4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a0b8:	e02a      	b.n	800a110 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f00e fda4 	bl	8018c08 <HAL_PCD_SuspendCallback>
    return;
 800a0c0:	e026      	b.n	800a110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00f      	beq.n	800a0ec <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a0de:	b292      	uxth	r2, r2
 800a0e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f00e fd62 	bl	8018bae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a0ea:	e011      	b.n	800a110 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00c      	beq.n	800a110 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a108:	b292      	uxth	r2, r2
 800a10a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a10e:	bf00      	nop
  }
}
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d101      	bne.n	800a130 <HAL_PCD_SetAddress+0x1a>
 800a12c:	2302      	movs	r3, #2
 800a12e:	e012      	b.n	800a156 <HAL_PCD_SetAddress+0x40>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	78fa      	ldrb	r2, [r7, #3]
 800a144:	4611      	mov	r1, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f008 fc32 	bl	80129b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	4608      	mov	r0, r1
 800a168:	4611      	mov	r1, r2
 800a16a:	461a      	mov	r2, r3
 800a16c:	4603      	mov	r3, r0
 800a16e:	70fb      	strb	r3, [r7, #3]
 800a170:	460b      	mov	r3, r1
 800a172:	803b      	strh	r3, [r7, #0]
 800a174:	4613      	mov	r3, r2
 800a176:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a17c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a180:	2b00      	cmp	r3, #0
 800a182:	da0e      	bge.n	800a1a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a184:	78fb      	ldrb	r3, [r7, #3]
 800a186:	f003 0207 	and.w	r2, r3, #7
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	3310      	adds	r3, #16
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	4413      	add	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2201      	movs	r2, #1
 800a19e:	705a      	strb	r2, [r3, #1]
 800a1a0:	e00e      	b.n	800a1c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1a2:	78fb      	ldrb	r3, [r7, #3]
 800a1a4:	f003 0207 	and.w	r2, r3, #7
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	f003 0307 	and.w	r3, r3, #7
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a1cc:	883b      	ldrh	r3, [r7, #0]
 800a1ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	78ba      	ldrb	r2, [r7, #2]
 800a1da:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a1dc:	78bb      	ldrb	r3, [r7, #2]
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d102      	bne.n	800a1e8 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d101      	bne.n	800a1f6 <HAL_PCD_EP_Open+0x98>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	e00e      	b.n	800a214 <HAL_PCD_EP_Open+0xb6>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68f9      	ldr	r1, [r7, #12]
 800a204:	4618      	mov	r0, r3
 800a206:	f006 fe55 	bl	8010eb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a212:	7afb      	ldrb	r3, [r7, #11]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	da0e      	bge.n	800a24e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	f003 0207 	and.w	r2, r3, #7
 800a236:	4613      	mov	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	3310      	adds	r3, #16
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	4413      	add	r3, r2
 800a244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	705a      	strb	r2, [r3, #1]
 800a24c:	e00e      	b.n	800a26c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	f003 0207 	and.w	r2, r3, #7
 800a254:	4613      	mov	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	4413      	add	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a26c:	78fb      	ldrb	r3, [r7, #3]
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	b2da      	uxtb	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d101      	bne.n	800a286 <HAL_PCD_EP_Close+0x6a>
 800a282:	2302      	movs	r3, #2
 800a284:	e00e      	b.n	800a2a4 <HAL_PCD_EP_Close+0x88>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68f9      	ldr	r1, [r7, #12]
 800a294:	4618      	mov	r0, r3
 800a296:	f007 faf5 	bl	8011884 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	607a      	str	r2, [r7, #4]
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	f003 0207 	and.w	r2, r3, #7
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2ec:	7afb      	ldrb	r3, [r7, #11]
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6979      	ldr	r1, [r7, #20]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f007 fcad 	bl	8011c5e <USB_EPStartXfer>

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a31a:	78fb      	ldrb	r3, [r7, #3]
 800a31c:	f003 0207 	and.w	r2, r3, #7
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	4613      	mov	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	440b      	add	r3, r1
 800a32c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a330:	681b      	ldr	r3, [r3, #0]
}
 800a332:	4618      	mov	r0, r3
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b086      	sub	sp, #24
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
 800a34a:	460b      	mov	r3, r1
 800a34c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a34e:	7afb      	ldrb	r3, [r7, #11]
 800a350:	f003 0207 	and.w	r2, r3, #7
 800a354:	4613      	mov	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	3310      	adds	r3, #16
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4413      	add	r3, r2
 800a362:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2200      	movs	r2, #0
 800a382:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2201      	movs	r2, #1
 800a388:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a38a:	7afb      	ldrb	r3, [r7, #11]
 800a38c:	f003 0307 	and.w	r3, r3, #7
 800a390:	b2da      	uxtb	r2, r3
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6979      	ldr	r1, [r7, #20]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f007 fc5e 	bl	8011c5e <USB_EPStartXfer>

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	f003 0307 	and.w	r3, r3, #7
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	7912      	ldrb	r2, [r2, #4]
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d901      	bls.n	800a3ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e03e      	b.n	800a448 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a3ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	da0e      	bge.n	800a3f0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3d2:	78fb      	ldrb	r3, [r7, #3]
 800a3d4:	f003 0207 	and.w	r2, r3, #7
 800a3d8:	4613      	mov	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	3310      	adds	r3, #16
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	705a      	strb	r2, [r3, #1]
 800a3ee:	e00c      	b.n	800a40a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a3f0:	78fa      	ldrb	r2, [r7, #3]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	4413      	add	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2201      	movs	r2, #1
 800a40e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	f003 0307 	and.w	r3, r3, #7
 800a416:	b2da      	uxtb	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a422:	2b01      	cmp	r3, #1
 800a424:	d101      	bne.n	800a42a <HAL_PCD_EP_SetStall+0x7e>
 800a426:	2302      	movs	r3, #2
 800a428:	e00e      	b.n	800a448 <HAL_PCD_EP_SetStall+0x9c>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68f9      	ldr	r1, [r7, #12]
 800a438:	4618      	mov	r0, r3
 800a43a:	f008 f9bf 	bl	80127bc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	f003 030f 	and.w	r3, r3, #15
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	7912      	ldrb	r2, [r2, #4]
 800a466:	4293      	cmp	r3, r2
 800a468:	d901      	bls.n	800a46e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e040      	b.n	800a4f0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a46e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a472:	2b00      	cmp	r3, #0
 800a474:	da0e      	bge.n	800a494 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a476:	78fb      	ldrb	r3, [r7, #3]
 800a478:	f003 0207 	and.w	r2, r3, #7
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	3310      	adds	r3, #16
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	4413      	add	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	705a      	strb	r2, [r3, #1]
 800a492:	e00e      	b.n	800a4b2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	f003 0207 	and.w	r2, r3, #7
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	f003 0307 	and.w	r3, r3, #7
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d101      	bne.n	800a4d2 <HAL_PCD_EP_ClrStall+0x82>
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	e00e      	b.n	800a4f0 <HAL_PCD_EP_ClrStall+0xa0>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68f9      	ldr	r1, [r7, #12]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f008 f9bc 	bl	801285e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b092      	sub	sp, #72	@ 0x48
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a500:	e333      	b.n	800ab6a <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a50a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a50c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	f003 030f 	and.w	r3, r3, #15
 800a514:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a518:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 8108 	bne.w	800a732 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a522:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a524:	f003 0310 	and.w	r3, r3, #16
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d14c      	bne.n	800a5c6 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a53c:	813b      	strh	r3, [r7, #8]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	893b      	ldrh	r3, [r7, #8]
 800a544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3310      	adds	r3, #16
 800a554:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a55e:	b29b      	uxth	r3, r3
 800a560:	461a      	mov	r2, r3
 800a562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	4413      	add	r3, r2
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	6812      	ldr	r2, [r2, #0]
 800a56e:	4413      	add	r3, r2
 800a570:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a574:	881b      	ldrh	r3, [r3, #0]
 800a576:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a57a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a57c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a57e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a580:	695a      	ldr	r2, [r3, #20]
 800a582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	441a      	add	r2, r3
 800a588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a58a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a58c:	2100      	movs	r1, #0
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f00e faf3 	bl	8018b7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	7b1b      	ldrb	r3, [r3, #12]
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f000 82e5 	beq.w	800ab6a <PCD_EP_ISR_Handler+0x672>
 800a5a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f040 82e0 	bne.w	800ab6a <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	7b1b      	ldrb	r3, [r3, #12]
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	731a      	strb	r2, [r3, #12]
 800a5c4:	e2d1      	b.n	800ab6a <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a5cc:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a5d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a5d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d032      	beq.n	800a646 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	4413      	add	r3, r2
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	6812      	ldr	r2, [r2, #0]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a606:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6818      	ldr	r0, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800a612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a614:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a618:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	f008 fa45 	bl	8012aaa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	b29a      	uxth	r2, r3
 800a628:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a62c:	4013      	ands	r3, r2
 800a62e:	817b      	strh	r3, [r7, #10]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	897a      	ldrh	r2, [r7, #10]
 800a636:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a63a:	b292      	uxth	r2, r2
 800a63c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f00e fa6e 	bl	8018b20 <HAL_PCD_SetupStageCallback>
 800a644:	e291      	b.n	800ab6a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a646:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f280 828d 	bge.w	800ab6a <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	b29a      	uxth	r2, r3
 800a658:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a65c:	4013      	ands	r3, r2
 800a65e:	81fb      	strh	r3, [r7, #14]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	89fa      	ldrh	r2, [r7, #14]
 800a666:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a66a:	b292      	uxth	r2, r2
 800a66c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a676:	b29b      	uxth	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	00db      	lsls	r3, r3, #3
 800a680:	4413      	add	r3, r2
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	6812      	ldr	r2, [r2, #0]
 800a686:	4413      	add	r3, r2
 800a688:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a694:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d019      	beq.n	800a6d2 <PCD_EP_ISR_Handler+0x1da>
 800a69e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d015      	beq.n	800a6d2 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ac:	6959      	ldr	r1, [r3, #20]
 800a6ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	f008 f9f7 	bl	8012aaa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a6bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6be:	695a      	ldr	r2, [r3, #20]
 800a6c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	441a      	add	r2, r3
 800a6c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f00e fa39 	bl	8018b44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a6da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a6dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f040 8242 	bne.w	800ab6a <PCD_EP_ISR_Handler+0x672>
 800a6e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a6e8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a6ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6f0:	f000 823b 	beq.w	800ab6a <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a704:	81bb      	strh	r3, [r7, #12]
 800a706:	89bb      	ldrh	r3, [r7, #12]
 800a708:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a70c:	81bb      	strh	r3, [r7, #12]
 800a70e:	89bb      	ldrh	r3, [r7, #12]
 800a710:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a714:	81bb      	strh	r3, [r7, #12]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	89bb      	ldrh	r3, [r7, #12]
 800a71c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	8013      	strh	r3, [r2, #0]
 800a730:	e21b      	b.n	800ab6a <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a744:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f280 80f1 	bge.w	800a930 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	b29a      	uxth	r2, r3
 800a760:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a764:	4013      	ands	r3, r2
 800a766:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a778:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a77c:	b292      	uxth	r2, r2
 800a77e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a780:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	00db      	lsls	r3, r3, #3
 800a78c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	4413      	add	r3, r2
 800a794:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a798:	7b1b      	ldrb	r3, [r3, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d123      	bne.n	800a7e6 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	4413      	add	r3, r2
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	6812      	ldr	r2, [r2, #0]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800a7c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 808b 	beq.w	800a8e6 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6818      	ldr	r0, [r3, #0]
 800a7d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7d6:	6959      	ldr	r1, [r3, #20]
 800a7d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7da:	88da      	ldrh	r2, [r3, #6]
 800a7dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a7e0:	f008 f963 	bl	8012aaa <USB_ReadPMA>
 800a7e4:	e07f      	b.n	800a8e6 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a7e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7e8:	78db      	ldrb	r3, [r3, #3]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d109      	bne.n	800a802 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a7ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f9c6 	bl	800ab86 <HAL_PCD_EP_DB_Receive>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a800:	e071      	b.n	800a8e6 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	461a      	mov	r2, r3
 800a808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	b29b      	uxth	r3, r3
 800a814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a81c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	441a      	add	r2, r3
 800a82c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a82e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a83a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a83e:	b29b      	uxth	r3, r3
 800a840:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	b29b      	uxth	r3, r3
 800a854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d022      	beq.n	800a8a2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a864:	b29b      	uxth	r3, r3
 800a866:	461a      	mov	r2, r3
 800a868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	4413      	add	r3, r2
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	6812      	ldr	r2, [r2, #0]
 800a874:	4413      	add	r3, r2
 800a876:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a880:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a884:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d02c      	beq.n	800a8e6 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a892:	6959      	ldr	r1, [r3, #20]
 800a894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a896:	891a      	ldrh	r2, [r3, #8]
 800a898:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a89c:	f008 f905 	bl	8012aaa <USB_ReadPMA>
 800a8a0:	e021      	b.n	800a8e6 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	6812      	ldr	r2, [r2, #0]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a8c0:	881b      	ldrh	r3, [r3, #0]
 800a8c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a8ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6818      	ldr	r0, [r3, #0]
 800a8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d8:	6959      	ldr	r1, [r3, #20]
 800a8da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8dc:	895a      	ldrh	r2, [r3, #10]
 800a8de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8e2:	f008 f8e2 	bl	8012aaa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a8e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8e8:	69da      	ldr	r2, [r3, #28]
 800a8ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8ee:	441a      	add	r2, r3
 800a8f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a8f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f6:	695a      	ldr	r2, [r3, #20]
 800a8f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8fc:	441a      	add	r2, r3
 800a8fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a900:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d005      	beq.n	800a916 <PCD_EP_ISR_Handler+0x41e>
 800a90a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a90e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	429a      	cmp	r2, r3
 800a914:	d206      	bcs.n	800a924 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f00e f911 	bl	8018b44 <HAL_PCD_DataOutStageCallback>
 800a922:	e005      	b.n	800a930 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a92a:	4618      	mov	r0, r3
 800a92c:	f007 f997 	bl	8011c5e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a930:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a936:	2b00      	cmp	r3, #0
 800a938:	f000 8117 	beq.w	800ab6a <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800a93c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a940:	4613      	mov	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4413      	add	r3, r2
 800a946:	00db      	lsls	r3, r3, #3
 800a948:	3310      	adds	r3, #16
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	4413      	add	r3, r2
 800a94e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	461a      	mov	r2, r3
 800a956:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	b29b      	uxth	r3, r3
 800a962:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a96a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	461a      	mov	r2, r3
 800a972:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	441a      	add	r2, r3
 800a97a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a97c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a984:	b29b      	uxth	r3, r3
 800a986:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a98a:	78db      	ldrb	r3, [r3, #3]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	f040 80a1 	bne.w	800aad4 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800a992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a994:	2200      	movs	r2, #0
 800a996:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a99a:	7b1b      	ldrb	r3, [r3, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f000 8092 	beq.w	800aac6 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a9a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a9a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d046      	beq.n	800aa3a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a9ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ae:	785b      	ldrb	r3, [r3, #1]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d126      	bne.n	800aa02 <PCD_EP_ISR_Handler+0x50a>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	617b      	str	r3, [r7, #20]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	617b      	str	r3, [r7, #20]
 800a9cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	00da      	lsls	r2, r3, #3
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	801a      	strh	r2, [r3, #0]
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	881b      	ldrh	r3, [r3, #0]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	801a      	strh	r2, [r3, #0]
 800aa00:	e061      	b.n	800aac6 <PCD_EP_ISR_Handler+0x5ce>
 800aa02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa04:	785b      	ldrb	r3, [r3, #1]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d15d      	bne.n	800aac6 <PCD_EP_ISR_Handler+0x5ce>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	61fb      	str	r3, [r7, #28]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	4413      	add	r3, r2
 800aa20:	61fb      	str	r3, [r7, #28]
 800aa22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	00da      	lsls	r2, r3, #3
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa30:	61bb      	str	r3, [r7, #24]
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2200      	movs	r2, #0
 800aa36:	801a      	strh	r2, [r3, #0]
 800aa38:	e045      	b.n	800aac6 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa42:	785b      	ldrb	r3, [r3, #1]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d126      	bne.n	800aa96 <PCD_EP_ISR_Handler+0x59e>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5c:	4413      	add	r3, r2
 800aa5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	00da      	lsls	r2, r3, #3
 800aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa68:	4413      	add	r3, r2
 800aa6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa6e:	623b      	str	r3, [r7, #32]
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	801a      	strh	r2, [r3, #0]
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	801a      	strh	r2, [r3, #0]
 800aa94:	e017      	b.n	800aac6 <PCD_EP_ISR_Handler+0x5ce>
 800aa96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa98:	785b      	ldrb	r3, [r3, #1]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d113      	bne.n	800aac6 <PCD_EP_ISR_Handler+0x5ce>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaac:	4413      	add	r3, r2
 800aaae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	00da      	lsls	r2, r3, #3
 800aab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab8:	4413      	add	r3, r2
 800aaba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aabe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac2:	2200      	movs	r2, #0
 800aac4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	4619      	mov	r1, r3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f00e f854 	bl	8018b7a <HAL_PCD_DataInStageCallback>
 800aad2:	e04a      	b.n	800ab6a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800aad4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d13f      	bne.n	800ab5e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	4413      	add	r3, r2
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	6812      	ldr	r2, [r2, #0]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab02:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800ab04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab06:	699a      	ldr	r2, [r3, #24]
 800ab08:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d906      	bls.n	800ab1c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800ab0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ab14:	1ad2      	subs	r2, r2, r3
 800ab16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab18:	619a      	str	r2, [r3, #24]
 800ab1a:	e002      	b.n	800ab22 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800ab1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab1e:	2200      	movs	r2, #0
 800ab20:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ab22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d106      	bne.n	800ab38 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f00e f822 	bl	8018b7a <HAL_PCD_DataInStageCallback>
 800ab36:	e018      	b.n	800ab6a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ab38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab3a:	695a      	ldr	r2, [r3, #20]
 800ab3c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ab3e:	441a      	add	r2, r3
 800ab40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab42:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800ab44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab46:	69da      	ldr	r2, [r3, #28]
 800ab48:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ab4a:	441a      	add	r2, r3
 800ab4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab4e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab56:	4618      	mov	r0, r3
 800ab58:	f007 f881 	bl	8011c5e <USB_EPStartXfer>
 800ab5c:	e005      	b.n	800ab6a <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ab5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab60:	461a      	mov	r2, r3
 800ab62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f917 	bl	800ad98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	b21b      	sxth	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f6ff acc3 	blt.w	800a502 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3748      	adds	r7, #72	@ 0x48
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b088      	sub	sp, #32
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	60f8      	str	r0, [r7, #12]
 800ab8e:	60b9      	str	r1, [r7, #8]
 800ab90:	4613      	mov	r3, r2
 800ab92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ab94:	88fb      	ldrh	r3, [r7, #6]
 800ab96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d07c      	beq.n	800ac98 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	00db      	lsls	r3, r3, #3
 800abb0:	4413      	add	r3, r2
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	6812      	ldr	r2, [r2, #0]
 800abb6:	4413      	add	r3, r2
 800abb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	8b7b      	ldrh	r3, [r7, #26]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d306      	bcc.n	800abdc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	699a      	ldr	r2, [r3, #24]
 800abd2:	8b7b      	ldrh	r3, [r7, #26]
 800abd4:	1ad2      	subs	r2, r2, r3
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	619a      	str	r2, [r3, #24]
 800abda:	e002      	b.n	800abe2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2200      	movs	r2, #0
 800abe0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d123      	bne.n	800ac32 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac04:	833b      	strh	r3, [r7, #24]
 800ac06:	8b3b      	ldrh	r3, [r7, #24]
 800ac08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac0c:	833b      	strh	r3, [r7, #24]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	441a      	add	r2, r3
 800ac1c:	8b3b      	ldrh	r3, [r7, #24]
 800ac1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d01f      	beq.n	800ac7c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	461a      	mov	r2, r3
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac56:	82fb      	strh	r3, [r7, #22]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	441a      	add	r2, r3
 800ac66:	8afb      	ldrh	r3, [r7, #22]
 800ac68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ac7c:	8b7b      	ldrh	r3, [r7, #26]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 8085 	beq.w	800ad8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6818      	ldr	r0, [r3, #0]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	6959      	ldr	r1, [r3, #20]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	891a      	ldrh	r2, [r3, #8]
 800ac90:	8b7b      	ldrh	r3, [r7, #26]
 800ac92:	f007 ff0a 	bl	8012aaa <USB_ReadPMA>
 800ac96:	e07a      	b.n	800ad8e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	461a      	mov	r2, r3
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	4413      	add	r3, r2
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	6812      	ldr	r2, [r2, #0]
 800acb0:	4413      	add	r3, r2
 800acb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acb6:	881b      	ldrh	r3, [r3, #0]
 800acb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acbc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	699a      	ldr	r2, [r3, #24]
 800acc2:	8b7b      	ldrh	r3, [r7, #26]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d306      	bcc.n	800acd6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	699a      	ldr	r2, [r3, #24]
 800accc:	8b7b      	ldrh	r3, [r7, #26]
 800acce:	1ad2      	subs	r2, r2, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	619a      	str	r2, [r3, #24]
 800acd4:	e002      	b.n	800acdc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2200      	movs	r2, #0
 800acda:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d123      	bne.n	800ad2c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	461a      	mov	r2, r3
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acfe:	83fb      	strh	r3, [r7, #30]
 800ad00:	8bfb      	ldrh	r3, [r7, #30]
 800ad02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad06:	83fb      	strh	r3, [r7, #30]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	441a      	add	r2, r3
 800ad16:	8bfb      	ldrh	r3, [r7, #30]
 800ad18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ad2c:	88fb      	ldrh	r3, [r7, #6]
 800ad2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d11f      	bne.n	800ad76 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad50:	83bb      	strh	r3, [r7, #28]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	441a      	add	r2, r3
 800ad60:	8bbb      	ldrh	r3, [r7, #28]
 800ad62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ad76:	8b7b      	ldrh	r3, [r7, #26]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d008      	beq.n	800ad8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6818      	ldr	r0, [r3, #0]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	6959      	ldr	r1, [r3, #20]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	895a      	ldrh	r2, [r3, #10]
 800ad88:	8b7b      	ldrh	r3, [r7, #26]
 800ad8a:	f007 fe8e 	bl	8012aaa <USB_ReadPMA>
    }
  }

  return count;
 800ad8e:	8b7b      	ldrh	r3, [r7, #26]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3720      	adds	r7, #32
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b0a6      	sub	sp, #152	@ 0x98
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	4613      	mov	r3, r2
 800ada4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ada6:	88fb      	ldrh	r3, [r7, #6]
 800ada8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 81f7 	beq.w	800b1a0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adba:	b29b      	uxth	r3, r3
 800adbc:	461a      	mov	r2, r3
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	4413      	add	r3, r2
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	6812      	ldr	r2, [r2, #0]
 800adca:	4413      	add	r3, r2
 800adcc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800add6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	699a      	ldr	r2, [r3, #24]
 800adde:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d907      	bls.n	800adf6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	699a      	ldr	r2, [r3, #24]
 800adea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800adee:	1ad2      	subs	r2, r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	619a      	str	r2, [r3, #24]
 800adf4:	e002      	b.n	800adfc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2200      	movs	r2, #0
 800adfa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f040 80e1 	bne.w	800afc8 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	785b      	ldrb	r3, [r3, #1]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d126      	bne.n	800ae5c <HAL_PCD_EP_DB_Transmit+0xc4>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	461a      	mov	r2, r3
 800ae20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae22:	4413      	add	r3, r2
 800ae24:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	00da      	lsls	r2, r3, #3
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2e:	4413      	add	r3, r2
 800ae30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae38:	881b      	ldrh	r3, [r3, #0]
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae44:	801a      	strh	r2, [r3, #0]
 800ae46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae58:	801a      	strh	r2, [r3, #0]
 800ae5a:	e01a      	b.n	800ae92 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	785b      	ldrb	r3, [r3, #1]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d116      	bne.n	800ae92 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	461a      	mov	r2, r3
 800ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae78:	4413      	add	r3, r2
 800ae7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	00da      	lsls	r2, r3, #3
 800ae82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae84:	4413      	add	r3, r2
 800ae86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae8e:	2200      	movs	r2, #0
 800ae90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	785b      	ldrb	r3, [r3, #1]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d126      	bne.n	800aeee <HAL_PCD_EP_DB_Transmit+0x156>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	623b      	str	r3, [r7, #32]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	623b      	str	r3, [r7, #32]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	00da      	lsls	r2, r3, #3
 800aebe:	6a3b      	ldr	r3, [r7, #32]
 800aec0:	4413      	add	r3, r2
 800aec2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aec6:	61fb      	str	r3, [r7, #28]
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	881b      	ldrh	r3, [r3, #0]
 800aecc:	b29b      	uxth	r3, r3
 800aece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	801a      	strh	r2, [r3, #0]
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	801a      	strh	r2, [r3, #0]
 800aeec:	e017      	b.n	800af1e <HAL_PCD_EP_DB_Transmit+0x186>
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	785b      	ldrb	r3, [r3, #1]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d113      	bne.n	800af1e <HAL_PCD_EP_DB_Transmit+0x186>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aefe:	b29b      	uxth	r3, r3
 800af00:	461a      	mov	r2, r3
 800af02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af04:	4413      	add	r3, r2
 800af06:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	00da      	lsls	r2, r3, #3
 800af0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af10:	4413      	add	r3, r2
 800af12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af16:	627b      	str	r3, [r7, #36]	@ 0x24
 800af18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1a:	2200      	movs	r2, #0
 800af1c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	78db      	ldrb	r3, [r3, #3]
 800af22:	2b02      	cmp	r3, #2
 800af24:	d123      	bne.n	800af6e <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	b29b      	uxth	r3, r3
 800af38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af40:	837b      	strh	r3, [r7, #26]
 800af42:	8b7b      	ldrh	r3, [r7, #26]
 800af44:	f083 0320 	eor.w	r3, r3, #32
 800af48:	837b      	strh	r3, [r7, #26]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	441a      	add	r2, r3
 800af58:	8b7b      	ldrh	r3, [r7, #26]
 800af5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	4619      	mov	r1, r3
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f00d fe00 	bl	8018b7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d01f      	beq.n	800afc4 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	461a      	mov	r2, r3
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	b29b      	uxth	r3, r3
 800af96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af9e:	833b      	strh	r3, [r7, #24]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	461a      	mov	r2, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	441a      	add	r2, r3
 800afae:	8b3b      	ldrh	r3, [r7, #24]
 800afb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e31f      	b.n	800b608 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800afc8:	88fb      	ldrh	r3, [r7, #6]
 800afca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d021      	beq.n	800b016 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	461a      	mov	r2, r3
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	441a      	add	r2, r3
 800affe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b00a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b00e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b012:	b29b      	uxth	r3, r3
 800b014:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	f040 82ca 	bne.w	800b5b6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	695a      	ldr	r2, [r3, #20]
 800b026:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b02a:	441a      	add	r2, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	69da      	ldr	r2, [r3, #28]
 800b034:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b038:	441a      	add	r2, r3
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	6a1a      	ldr	r2, [r3, #32]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	429a      	cmp	r2, r3
 800b048:	d309      	bcc.n	800b05e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	6a1a      	ldr	r2, [r3, #32]
 800b054:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	621a      	str	r2, [r3, #32]
 800b05c:	e015      	b.n	800b08a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d107      	bne.n	800b076 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b066:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b06a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b074:	e009      	b.n	800b08a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2200      	movs	r2, #0
 800b088:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	785b      	ldrb	r3, [r3, #1]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d15f      	bne.n	800b152 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	643b      	str	r3, [r7, #64]	@ 0x40
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0a6:	4413      	add	r3, r2
 800b0a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	00da      	lsls	r2, r3, #3
 800b0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0b2:	4413      	add	r3, r2
 800b0b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c8:	801a      	strh	r2, [r3, #0]
 800b0ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <HAL_PCD_EP_DB_Transmit+0x34e>
 800b0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e2:	801a      	strh	r2, [r3, #0]
 800b0e4:	e051      	b.n	800b18a <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b0e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0ea:	d816      	bhi.n	800b11a <HAL_PCD_EP_DB_Transmit+0x382>
 800b0ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0ee:	085b      	lsrs	r3, r3, #1
 800b0f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <HAL_PCD_EP_DB_Transmit+0x36a>
 800b0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0fe:	3301      	adds	r3, #1
 800b100:	653b      	str	r3, [r7, #80]	@ 0x50
 800b102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	b29a      	uxth	r2, r3
 800b108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	029b      	lsls	r3, r3, #10
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4313      	orrs	r3, r2
 800b112:	b29a      	uxth	r2, r3
 800b114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b116:	801a      	strh	r2, [r3, #0]
 800b118:	e037      	b.n	800b18a <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b11a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b11c:	095b      	lsrs	r3, r3, #5
 800b11e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b122:	f003 031f 	and.w	r3, r3, #31
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <HAL_PCD_EP_DB_Transmit+0x398>
 800b12a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b12c:	3b01      	subs	r3, #1
 800b12e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	b29a      	uxth	r2, r3
 800b136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b138:	b29b      	uxth	r3, r3
 800b13a:	029b      	lsls	r3, r3, #10
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	4313      	orrs	r3, r2
 800b140:	b29b      	uxth	r3, r3
 800b142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b14e:	801a      	strh	r2, [r3, #0]
 800b150:	e01b      	b.n	800b18a <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	785b      	ldrb	r3, [r3, #1]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d117      	bne.n	800b18a <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b168:	b29b      	uxth	r3, r3
 800b16a:	461a      	mov	r2, r3
 800b16c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b16e:	4413      	add	r3, r2
 800b170:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	00da      	lsls	r2, r3, #3
 800b178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b17a:	4413      	add	r3, r2
 800b17c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b180:	647b      	str	r3, [r7, #68]	@ 0x44
 800b182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b184:	b29a      	uxth	r2, r3
 800b186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b188:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	6959      	ldr	r1, [r3, #20]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	891a      	ldrh	r2, [r3, #8]
 800b196:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b198:	b29b      	uxth	r3, r3
 800b19a:	f007 fc44 	bl	8012a26 <USB_WritePMA>
 800b19e:	e20a      	b.n	800b5b6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	00db      	lsls	r3, r3, #3
 800b1b2:	4413      	add	r3, r2
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	6812      	ldr	r2, [r2, #0]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b1be:	881b      	ldrh	r3, [r3, #0]
 800b1c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1c4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	699a      	ldr	r2, [r3, #24]
 800b1cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d307      	bcc.n	800b1e4 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	699a      	ldr	r2, [r3, #24]
 800b1d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b1dc:	1ad2      	subs	r2, r2, r3
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	619a      	str	r2, [r3, #24]
 800b1e2:	e002      	b.n	800b1ea <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f040 80f6 	bne.w	800b3e0 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	785b      	ldrb	r3, [r3, #1]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d126      	bne.n	800b24a <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	677b      	str	r3, [r7, #116]	@ 0x74
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	461a      	mov	r2, r3
 800b20e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b210:	4413      	add	r3, r2
 800b212:	677b      	str	r3, [r7, #116]	@ 0x74
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	00da      	lsls	r2, r3, #3
 800b21a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b21c:	4413      	add	r3, r2
 800b21e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b222:	673b      	str	r3, [r7, #112]	@ 0x70
 800b224:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b226:	881b      	ldrh	r3, [r3, #0]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b22e:	b29a      	uxth	r2, r3
 800b230:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b232:	801a      	strh	r2, [r3, #0]
 800b234:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b23e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b242:	b29a      	uxth	r2, r3
 800b244:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b246:	801a      	strh	r2, [r3, #0]
 800b248:	e01a      	b.n	800b280 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	785b      	ldrb	r3, [r3, #1]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d116      	bne.n	800b280 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b260:	b29b      	uxth	r3, r3
 800b262:	461a      	mov	r2, r3
 800b264:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b266:	4413      	add	r3, r2
 800b268:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	00da      	lsls	r2, r3, #3
 800b270:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b272:	4413      	add	r3, r2
 800b274:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b278:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b27a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b27c:	2200      	movs	r2, #0
 800b27e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	785b      	ldrb	r3, [r3, #1]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d12f      	bne.n	800b2f0 <HAL_PCD_EP_DB_Transmit+0x558>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	00da      	lsls	r2, r3, #3
 800b2b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b2be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2c6:	881b      	ldrh	r3, [r3, #0]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2d4:	801a      	strh	r2, [r3, #0]
 800b2d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2ec:	801a      	strh	r2, [r3, #0]
 800b2ee:	e01c      	b.n	800b32a <HAL_PCD_EP_DB_Transmit+0x592>
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	785b      	ldrb	r3, [r3, #1]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d118      	bne.n	800b32a <HAL_PCD_EP_DB_Transmit+0x592>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b300:	b29b      	uxth	r3, r3
 800b302:	461a      	mov	r2, r3
 800b304:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b308:	4413      	add	r3, r2
 800b30a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	00da      	lsls	r2, r3, #3
 800b314:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b318:	4413      	add	r3, r2
 800b31a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b31e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b322:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b326:	2200      	movs	r2, #0
 800b328:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	78db      	ldrb	r3, [r3, #3]
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d127      	bne.n	800b382 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	b29b      	uxth	r3, r3
 800b344:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b348:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b34c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b350:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b354:	f083 0320 	eor.w	r3, r3, #32
 800b358:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	441a      	add	r2, r3
 800b36a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b36e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b37a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b37e:	b29b      	uxth	r3, r3
 800b380:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	4619      	mov	r1, r3
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f00d fbf6 	bl	8018b7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b38e:	88fb      	ldrh	r3, [r7, #6]
 800b390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d121      	bne.n	800b3dc <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	461a      	mov	r2, r3
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	881b      	ldrh	r3, [r3, #0]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3b2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	441a      	add	r2, r3
 800b3c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b3c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b3d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e113      	b.n	800b608 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b3e0:	88fb      	ldrh	r3, [r7, #6]
 800b3e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d121      	bne.n	800b42e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	881b      	ldrh	r3, [r3, #0]
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b404:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	461a      	mov	r2, r3
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	441a      	add	r2, r3
 800b416:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b41a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b41e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b422:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b434:	2b01      	cmp	r3, #1
 800b436:	f040 80be 	bne.w	800b5b6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	695a      	ldr	r2, [r3, #20]
 800b43e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b442:	441a      	add	r2, r3
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	69da      	ldr	r2, [r3, #28]
 800b44c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b450:	441a      	add	r2, r3
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6a1a      	ldr	r2, [r3, #32]
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d309      	bcc.n	800b476 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	6a1a      	ldr	r2, [r3, #32]
 800b46c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b46e:	1ad2      	subs	r2, r2, r3
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	621a      	str	r2, [r3, #32]
 800b474:	e015      	b.n	800b4a2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d107      	bne.n	800b48e <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b47e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b482:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b48c:	e009      	b.n	800b4a2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2200      	movs	r2, #0
 800b498:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	785b      	ldrb	r3, [r3, #1]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d15f      	bne.n	800b570 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4c4:	4413      	add	r3, r2
 800b4c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	00da      	lsls	r2, r3, #3
 800b4ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b4d6:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4e6:	801a      	strh	r2, [r3, #0]
 800b4e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <HAL_PCD_EP_DB_Transmit+0x76c>
 800b4ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b500:	801a      	strh	r2, [r3, #0]
 800b502:	e04e      	b.n	800b5a2 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b506:	2b3e      	cmp	r3, #62	@ 0x3e
 800b508:	d816      	bhi.n	800b538 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b50a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b50c:	085b      	lsrs	r3, r3, #1
 800b50e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <HAL_PCD_EP_DB_Transmit+0x788>
 800b51a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b51c:	3301      	adds	r3, #1
 800b51e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	b29a      	uxth	r2, r3
 800b526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b528:	b29b      	uxth	r3, r3
 800b52a:	029b      	lsls	r3, r3, #10
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	4313      	orrs	r3, r2
 800b530:	b29a      	uxth	r2, r3
 800b532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b534:	801a      	strh	r2, [r3, #0]
 800b536:	e034      	b.n	800b5a2 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b53a:	095b      	lsrs	r3, r3, #5
 800b53c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b53e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b540:	f003 031f 	and.w	r3, r3, #31
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b548:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b54a:	3b01      	subs	r3, #1
 800b54c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b54e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	b29a      	uxth	r2, r3
 800b554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b556:	b29b      	uxth	r3, r3
 800b558:	029b      	lsls	r3, r3, #10
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	4313      	orrs	r3, r2
 800b55e:	b29b      	uxth	r3, r3
 800b560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b568:	b29a      	uxth	r2, r3
 800b56a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b56c:	801a      	strh	r2, [r3, #0]
 800b56e:	e018      	b.n	800b5a2 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	785b      	ldrb	r3, [r3, #1]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d114      	bne.n	800b5a2 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b580:	b29b      	uxth	r3, r3
 800b582:	461a      	mov	r2, r3
 800b584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b586:	4413      	add	r3, r2
 800b588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	00da      	lsls	r2, r3, #3
 800b590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b592:	4413      	add	r3, r2
 800b594:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b598:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b59a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	6959      	ldr	r1, [r3, #20]
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	895a      	ldrh	r2, [r3, #10]
 800b5ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	f007 fa38 	bl	8012a26 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4413      	add	r3, r2
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5d0:	82fb      	strh	r3, [r7, #22]
 800b5d2:	8afb      	ldrh	r3, [r7, #22]
 800b5d4:	f083 0310 	eor.w	r3, r3, #16
 800b5d8:	82fb      	strh	r3, [r7, #22]
 800b5da:	8afb      	ldrh	r3, [r7, #22]
 800b5dc:	f083 0320 	eor.w	r3, r3, #32
 800b5e0:	82fb      	strh	r3, [r7, #22]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	441a      	add	r2, r3
 800b5f0:	8afb      	ldrh	r3, [r7, #22]
 800b5f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b602:	b29b      	uxth	r3, r3
 800b604:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3798      	adds	r7, #152	@ 0x98
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	607b      	str	r3, [r7, #4]
 800b61a:	460b      	mov	r3, r1
 800b61c:	817b      	strh	r3, [r7, #10]
 800b61e:	4613      	mov	r3, r2
 800b620:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b622:	897b      	ldrh	r3, [r7, #10]
 800b624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b628:	b29b      	uxth	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00b      	beq.n	800b646 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b62e:	897b      	ldrh	r3, [r7, #10]
 800b630:	f003 0207 	and.w	r2, r3, #7
 800b634:	4613      	mov	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	00db      	lsls	r3, r3, #3
 800b63c:	3310      	adds	r3, #16
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	4413      	add	r3, r2
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	e009      	b.n	800b65a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b646:	897a      	ldrh	r2, [r7, #10]
 800b648:	4613      	mov	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	00db      	lsls	r3, r3, #3
 800b650:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	4413      	add	r3, r2
 800b658:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b65a:	893b      	ldrh	r3, [r7, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d107      	bne.n	800b670 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2200      	movs	r2, #0
 800b664:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	b29a      	uxth	r2, r3
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	80da      	strh	r2, [r3, #6]
 800b66e:	e00b      	b.n	800b688 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2201      	movs	r2, #1
 800b674:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	b29a      	uxth	r2, r3
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	0c1b      	lsrs	r3, r3, #16
 800b682:	b29a      	uxth	r2, r3
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	371c      	adds	r7, #28
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b696:	b480      	push	{r7}
 800b698:	b085      	sub	sp, #20
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	f043 0301 	orr.w	r3, r3, #1
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	f043 0302 	orr.w	r3, r3, #2
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
	...

0800b6ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6f0:	4b05      	ldr	r3, [pc, #20]	@ (800b708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a04      	ldr	r2, [pc, #16]	@ (800b708 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b6f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6fa:	6013      	str	r3, [r2, #0]
}
 800b6fc:	bf00      	nop
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	58000400 	.word	0x58000400

0800b70c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800b710:	4b04      	ldr	r3, [pc, #16]	@ (800b724 <HAL_PWREx_GetVoltageRange+0x18>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800b718:	4618      	mov	r0, r3
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	58000400 	.word	0x58000400

0800b728 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b728:	b480      	push	{r7}
 800b72a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b72c:	4b05      	ldr	r3, [pc, #20]	@ (800b744 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	4a04      	ldr	r2, [pc, #16]	@ (800b744 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b732:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b736:	6053      	str	r3, [r2, #4]
}
 800b738:	bf00      	nop
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	58000400 	.word	0x58000400

0800b748 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b748:	b480      	push	{r7}
 800b74a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b74c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b75a:	d101      	bne.n	800b760 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <LL_RCC_HSE_Enable>:
{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b77a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b77e:	6013      	str	r3, [r2, #0]
}
 800b780:	bf00      	nop
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <LL_RCC_HSE_Disable>:
{
 800b78a:	b480      	push	{r7}
 800b78c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b78e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b79c:	6013      	str	r3, [r2, #0]
}
 800b79e:	bf00      	nop
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <LL_RCC_HSE_IsReady>:
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b7ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7ba:	d101      	bne.n	800b7c0 <LL_RCC_HSE_IsReady+0x18>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e000      	b.n	800b7c2 <LL_RCC_HSE_IsReady+0x1a>
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <LL_RCC_HSI_Enable>:
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b7d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7de:	6013      	str	r3, [r2, #0]
}
 800b7e0:	bf00      	nop
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <LL_RCC_HSI_Disable>:
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b7ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7fc:	6013      	str	r3, [r2, #0]
}
 800b7fe:	bf00      	nop
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <LL_RCC_HSI_IsReady>:
{
 800b808:	b480      	push	{r7}
 800b80a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b80c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b81a:	d101      	bne.n	800b820 <LL_RCC_HSI_IsReady+0x18>
 800b81c:	2301      	movs	r3, #1
 800b81e:	e000      	b.n	800b822 <LL_RCC_HSI_IsReady+0x1a>
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <LL_RCC_HSI_SetCalibTrimming>:
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	061b      	lsls	r3, r3, #24
 800b842:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b846:	4313      	orrs	r3, r2
 800b848:	604b      	str	r3, [r1, #4]
}
 800b84a:	bf00      	nop
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <LL_RCC_HSI48_Enable>:
{
 800b856:	b480      	push	{r7}
 800b858:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b85a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b85e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b862:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b866:	f043 0301 	orr.w	r3, r3, #1
 800b86a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b86e:	bf00      	nop
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <LL_RCC_HSI48_Disable>:
{
 800b878:	b480      	push	{r7}
 800b87a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b87c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b884:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b888:	f023 0301 	bic.w	r3, r3, #1
 800b88c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b890:	bf00      	nop
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <LL_RCC_HSI48_IsReady>:
{
 800b89a:	b480      	push	{r7}
 800b89c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b89e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8a6:	f003 0302 	and.w	r3, r3, #2
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d101      	bne.n	800b8b2 <LL_RCC_HSI48_IsReady+0x18>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e000      	b.n	800b8b4 <LL_RCC_HSI48_IsReady+0x1a>
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <LL_RCC_LSE_Enable>:
{
 800b8be:	b480      	push	{r7}
 800b8c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b8c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b8d6:	bf00      	nop
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <LL_RCC_LSE_Disable>:
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b8e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8f0:	f023 0301 	bic.w	r3, r3, #1
 800b8f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b8f8:	bf00      	nop
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <LL_RCC_LSE_EnableBypass>:
{
 800b902:	b480      	push	{r7}
 800b904:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b90a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b90e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b912:	f043 0304 	orr.w	r3, r3, #4
 800b916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b91a:	bf00      	nop
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <LL_RCC_LSE_DisableBypass>:
{
 800b924:	b480      	push	{r7}
 800b926:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b930:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b934:	f023 0304 	bic.w	r3, r3, #4
 800b938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b93c:	bf00      	nop
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <LL_RCC_LSE_IsReady>:
{
 800b946:	b480      	push	{r7}
 800b948:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b94a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b02      	cmp	r3, #2
 800b958:	d101      	bne.n	800b95e <LL_RCC_LSE_IsReady+0x18>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <LL_RCC_LSE_IsReady+0x1a>
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr

0800b96a <LL_RCC_LSI1_Enable>:
{
 800b96a:	b480      	push	{r7}
 800b96c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b96e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b976:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b97a:	f043 0301 	orr.w	r3, r3, #1
 800b97e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b982:	bf00      	nop
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <LL_RCC_LSI1_Disable>:
{
 800b98c:	b480      	push	{r7}
 800b98e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b998:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b99c:	f023 0301 	bic.w	r3, r3, #1
 800b9a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b9a4:	bf00      	nop
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <LL_RCC_LSI1_IsReady>:
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b9b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9ba:	f003 0302 	and.w	r3, r3, #2
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d101      	bne.n	800b9c6 <LL_RCC_LSI1_IsReady+0x18>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e000      	b.n	800b9c8 <LL_RCC_LSI1_IsReady+0x1a>
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <LL_RCC_LSI2_Enable>:
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b9d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9e2:	f043 0304 	orr.w	r3, r3, #4
 800b9e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b9ea:	bf00      	nop
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <LL_RCC_LSI2_Disable>:
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b9f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba04:	f023 0304 	bic.w	r3, r3, #4
 800ba08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ba0c:	bf00      	nop
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <LL_RCC_LSI2_IsReady>:
{
 800ba16:	b480      	push	{r7}
 800ba18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ba1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b08      	cmp	r3, #8
 800ba28:	d101      	bne.n	800ba2e <LL_RCC_LSI2_IsReady+0x18>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <LL_RCC_LSI2_IsReady+0x1a>
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <LL_RCC_LSI2_SetTrimming>:
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800ba42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	021b      	lsls	r3, r3, #8
 800ba52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba56:	4313      	orrs	r3, r2
 800ba58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <LL_RCC_MSI_Enable>:
{
 800ba68:	b480      	push	{r7}
 800ba6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800ba6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba76:	f043 0301 	orr.w	r3, r3, #1
 800ba7a:	6013      	str	r3, [r2, #0]
}
 800ba7c:	bf00      	nop
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <LL_RCC_MSI_Disable>:
{
 800ba86:	b480      	push	{r7}
 800ba88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800ba8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	6013      	str	r3, [r2, #0]
}
 800ba9a:	bf00      	nop
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <LL_RCC_MSI_IsReady>:
{
 800baa4:	b480      	push	{r7}
 800baa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800baa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0302 	and.w	r3, r3, #2
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d101      	bne.n	800baba <LL_RCC_MSI_IsReady+0x16>
 800bab6:	2301      	movs	r3, #1
 800bab8:	e000      	b.n	800babc <LL_RCC_MSI_IsReady+0x18>
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <LL_RCC_MSI_SetRange>:
{
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4313      	orrs	r3, r2
 800bae0:	600b      	str	r3, [r1, #0]
}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <LL_RCC_MSI_GetRange>:
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800baf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bafe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2bb0      	cmp	r3, #176	@ 0xb0
 800bb04:	d901      	bls.n	800bb0a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800bb06:	23b0      	movs	r3, #176	@ 0xb0
 800bb08:	607b      	str	r3, [r7, #4]
  return msiRange;
 800bb0a:	687b      	ldr	r3, [r7, #4]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <LL_RCC_MSI_SetCalibTrimming>:
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800bb20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	021b      	lsls	r3, r3, #8
 800bb2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb32:	4313      	orrs	r3, r2
 800bb34:	604b      	str	r3, [r1, #4]
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <LL_RCC_SetSysClkSource>:
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bb4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	f023 0203 	bic.w	r2, r3, #3
 800bb54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	608b      	str	r3, [r1, #8]
}
 800bb5e:	bf00      	nop
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <LL_RCC_GetSysClkSource>:
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bb6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f003 030c 	and.w	r3, r3, #12
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <LL_RCC_SetAHBPrescaler>:
{
 800bb82:	b480      	push	{r7}
 800bb84:	b083      	sub	sp, #12
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bb8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bb94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	608b      	str	r3, [r1, #8]
}
 800bb9e:	bf00      	nop
 800bba0:	370c      	adds	r7, #12
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr

0800bbaa <LL_C2_RCC_SetAHBPrescaler>:
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b083      	sub	sp, #12
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800bbb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bbba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bbbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bbca:	bf00      	nop
 800bbcc:	370c      	adds	r7, #12
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr

0800bbd6 <LL_RCC_SetAHB4Prescaler>:
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bbde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bbe6:	f023 020f 	bic.w	r2, r3, #15
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	091b      	lsrs	r3, r3, #4
 800bbee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <LL_RCC_SetAPB1Prescaler>:
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bc0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bc16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	608b      	str	r3, [r1, #8]
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <LL_RCC_SetAPB2Prescaler>:
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bc34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bc3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	608b      	str	r3, [r1, #8]
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <LL_RCC_GetAHBPrescaler>:
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bc58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <LL_RCC_GetAHB4Prescaler>:
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800bc70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc74:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bc78:	011b      	lsls	r3, r3, #4
 800bc7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <LL_RCC_GetAPB1Prescaler>:
{
 800bc88:	b480      	push	{r7}
 800bc8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800bc8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <LL_RCC_GetAPB2Prescaler>:
{
 800bca0:	b480      	push	{r7}
 800bca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800bca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800bcbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bcc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bcca:	6013      	str	r3, [r2, #0]
}
 800bccc:	bf00      	nop
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800bcda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bce4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bce8:	6013      	str	r3, [r2, #0]
}
 800bcea:	bf00      	nop
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800bcf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd06:	d101      	bne.n	800bd0c <LL_RCC_PLL_IsReady+0x18>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e000      	b.n	800bd0e <LL_RCC_PLL_IsReady+0x1a>
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bd1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800bd32:	b480      	push	{r7}
 800bd34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800bd36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bd4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800bd62:	b480      	push	{r7}
 800bd64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bd66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f003 0303 	and.w	r3, r3, #3
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800bd7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd8c:	d101      	bne.n	800bd92 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800bda2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bda6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bdaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdb2:	d101      	bne.n	800bdb8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e000      	b.n	800bdba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800bdc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bdd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bdd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdd8:	d101      	bne.n	800bdde <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800bdda:	2301      	movs	r3, #1
 800bddc:	e000      	b.n	800bde0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800bdea:	b480      	push	{r7}
 800bdec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800bdee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdfc:	d101      	bne.n	800be02 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800bdfe:	2301      	movs	r3, #1
 800be00:	e000      	b.n	800be04 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800be0e:	b480      	push	{r7}
 800be10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800be12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800be1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be20:	d101      	bne.n	800be26 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800be22:	2301      	movs	r3, #1
 800be24:	e000      	b.n	800be28 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
	...

0800be34 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be34:	b590      	push	{r4, r7, lr}
 800be36:	b08d      	sub	sp, #52	@ 0x34
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d101      	bne.n	800be46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e363      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 0320 	and.w	r3, r3, #32
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 808d 	beq.w	800bf6e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800be54:	f7ff fe89 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800be58:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800be5a:	f7ff ff82 	bl	800bd62 <LL_RCC_PLL_GetMainSource>
 800be5e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800be60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be62:	2b00      	cmp	r3, #0
 800be64:	d005      	beq.n	800be72 <HAL_RCC_OscConfig+0x3e>
 800be66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be68:	2b0c      	cmp	r3, #12
 800be6a:	d147      	bne.n	800befc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800be6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d144      	bne.n	800befc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	69db      	ldr	r3, [r3, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e347      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800be82:	f7ff fe34 	bl	800baee <LL_RCC_MSI_GetRange>
 800be86:	4603      	mov	r3, r0
 800be88:	429c      	cmp	r4, r3
 800be8a:	d914      	bls.n	800beb6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be90:	4618      	mov	r0, r3
 800be92:	f000 fd2f 	bl	800c8f4 <RCC_SetFlashLatencyFromMSIRange>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d001      	beq.n	800bea0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e336      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff fe0e 	bl	800bac6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fe32 	bl	800bb18 <LL_RCC_MSI_SetCalibTrimming>
 800beb4:	e013      	b.n	800bede <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beba:	4618      	mov	r0, r3
 800bebc:	f7ff fe03 	bl	800bac6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a1b      	ldr	r3, [r3, #32]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff fe27 	bl	800bb18 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fd10 	bl	800c8f4 <RCC_SetFlashLatencyFromMSIRange>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e317      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800bede:	f000 fcc9 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 800bee2:	4603      	mov	r3, r0
 800bee4:	4aa4      	ldr	r2, [pc, #656]	@ (800c178 <HAL_RCC_OscConfig+0x344>)
 800bee6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bee8:	4ba4      	ldr	r3, [pc, #656]	@ (800c17c <HAL_RCC_OscConfig+0x348>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4618      	mov	r0, r3
 800beee:	f7fb f84b 	bl	8006f88 <HAL_InitTick>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d039      	beq.n	800bf6c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e308      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	69db      	ldr	r3, [r3, #28]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d01e      	beq.n	800bf42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bf04:	f7ff fdb0 	bl	800ba68 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bf08:	f7fb f88c 	bl	8007024 <HAL_GetTick>
 800bf0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800bf0e:	e008      	b.n	800bf22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf10:	f7fb f888 	bl	8007024 <HAL_GetTick>
 800bf14:	4602      	mov	r2, r0
 800bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d901      	bls.n	800bf22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e2f5      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800bf22:	f7ff fdbf 	bl	800baa4 <LL_RCC_MSI_IsReady>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d0f1      	beq.n	800bf10 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff fdc8 	bl	800bac6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff fdec 	bl	800bb18 <LL_RCC_MSI_SetCalibTrimming>
 800bf40:	e015      	b.n	800bf6e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bf42:	f7ff fda0 	bl	800ba86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bf46:	f7fb f86d 	bl	8007024 <HAL_GetTick>
 800bf4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800bf4c:	e008      	b.n	800bf60 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf4e:	f7fb f869 	bl	8007024 <HAL_GetTick>
 800bf52:	4602      	mov	r2, r0
 800bf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d901      	bls.n	800bf60 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	e2d6      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800bf60:	f7ff fda0 	bl	800baa4 <LL_RCC_MSI_IsReady>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1f1      	bne.n	800bf4e <HAL_RCC_OscConfig+0x11a>
 800bf6a:	e000      	b.n	800bf6e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bf6c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d047      	beq.n	800c00a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf7a:	f7ff fdf6 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800bf7e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bf80:	f7ff feef 	bl	800bd62 <LL_RCC_PLL_GetMainSource>
 800bf84:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	2b08      	cmp	r3, #8
 800bf8a:	d005      	beq.n	800bf98 <HAL_RCC_OscConfig+0x164>
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	2b0c      	cmp	r3, #12
 800bf90:	d108      	bne.n	800bfa4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d105      	bne.n	800bfa4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d134      	bne.n	800c00a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e2b4      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfac:	d102      	bne.n	800bfb4 <HAL_RCC_OscConfig+0x180>
 800bfae:	f7ff fbdd 	bl	800b76c <LL_RCC_HSE_Enable>
 800bfb2:	e001      	b.n	800bfb8 <HAL_RCC_OscConfig+0x184>
 800bfb4:	f7ff fbe9 	bl	800b78a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d012      	beq.n	800bfe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfc0:	f7fb f830 	bl	8007024 <HAL_GetTick>
 800bfc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800bfc6:	e008      	b.n	800bfda <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfc8:	f7fb f82c 	bl	8007024 <HAL_GetTick>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	2b64      	cmp	r3, #100	@ 0x64
 800bfd4:	d901      	bls.n	800bfda <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	e299      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800bfda:	f7ff fbe5 	bl	800b7a8 <LL_RCC_HSE_IsReady>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0f1      	beq.n	800bfc8 <HAL_RCC_OscConfig+0x194>
 800bfe4:	e011      	b.n	800c00a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfe6:	f7fb f81d 	bl	8007024 <HAL_GetTick>
 800bfea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800bfec:	e008      	b.n	800c000 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfee:	f7fb f819 	bl	8007024 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	2b64      	cmp	r3, #100	@ 0x64
 800bffa:	d901      	bls.n	800c000 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bffc:	2303      	movs	r3, #3
 800bffe:	e286      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c000:	f7ff fbd2 	bl	800b7a8 <LL_RCC_HSE_IsReady>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1f1      	bne.n	800bfee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 0302 	and.w	r3, r3, #2
 800c012:	2b00      	cmp	r3, #0
 800c014:	d04c      	beq.n	800c0b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c016:	f7ff fda8 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800c01a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c01c:	f7ff fea1 	bl	800bd62 <LL_RCC_PLL_GetMainSource>
 800c020:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	2b04      	cmp	r3, #4
 800c026:	d005      	beq.n	800c034 <HAL_RCC_OscConfig+0x200>
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	2b0c      	cmp	r3, #12
 800c02c:	d10e      	bne.n	800c04c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2b02      	cmp	r3, #2
 800c032:	d10b      	bne.n	800c04c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e266      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fbf1 	bl	800b82c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c04a:	e031      	b.n	800c0b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d019      	beq.n	800c088 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c054:	f7ff fbba 	bl	800b7cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c058:	f7fa ffe4 	bl	8007024 <HAL_GetTick>
 800c05c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c05e:	e008      	b.n	800c072 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c060:	f7fa ffe0 	bl	8007024 <HAL_GetTick>
 800c064:	4602      	mov	r2, r0
 800c066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d901      	bls.n	800c072 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	e24d      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c072:	f7ff fbc9 	bl	800b808 <LL_RCC_HSI_IsReady>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d0f1      	beq.n	800c060 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff fbd3 	bl	800b82c <LL_RCC_HSI_SetCalibTrimming>
 800c086:	e013      	b.n	800c0b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c088:	f7ff fbaf 	bl	800b7ea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c08c:	f7fa ffca 	bl	8007024 <HAL_GetTick>
 800c090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c092:	e008      	b.n	800c0a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c094:	f7fa ffc6 	bl	8007024 <HAL_GetTick>
 800c098:	4602      	mov	r2, r0
 800c09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d901      	bls.n	800c0a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	e233      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c0a6:	f7ff fbaf 	bl	800b808 <LL_RCC_HSI_IsReady>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1f1      	bne.n	800c094 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0308 	and.w	r3, r3, #8
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 80a3 	beq.w	800c210 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d076      	beq.n	800c1c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 0310 	and.w	r3, r3, #16
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d046      	beq.n	800c16c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c0de:	f7ff fc66 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d113      	bne.n	800c110 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c0e8:	f7ff fc3f 	bl	800b96a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c0ec:	f7fa ff9a 	bl	8007024 <HAL_GetTick>
 800c0f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c0f2:	e008      	b.n	800c106 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c0f4:	f7fa ff96 	bl	8007024 <HAL_GetTick>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d901      	bls.n	800c106 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c102:	2303      	movs	r3, #3
 800c104:	e203      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c106:	f7ff fc52 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d0f1      	beq.n	800c0f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c110:	f7ff fc5f 	bl	800b9d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c114:	f7fa ff86 	bl	8007024 <HAL_GetTick>
 800c118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c11a:	e008      	b.n	800c12e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c11c:	f7fa ff82 	bl	8007024 <HAL_GetTick>
 800c120:	4602      	mov	r2, r0
 800c122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2b03      	cmp	r3, #3
 800c128:	d901      	bls.n	800c12e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e1ef      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c12e:	f7ff fc72 	bl	800ba16 <LL_RCC_LSI2_IsReady>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d0f1      	beq.n	800c11c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fc7c 	bl	800ba3a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c142:	f7ff fc23 	bl	800b98c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c146:	f7fa ff6d 	bl	8007024 <HAL_GetTick>
 800c14a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c14c:	e008      	b.n	800c160 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c14e:	f7fa ff69 	bl	8007024 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d901      	bls.n	800c160 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e1d6      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c160:	f7ff fc25 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1f1      	bne.n	800c14e <HAL_RCC_OscConfig+0x31a>
 800c16a:	e051      	b.n	800c210 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c16c:	f7ff fbfd 	bl	800b96a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c170:	f7fa ff58 	bl	8007024 <HAL_GetTick>
 800c174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c176:	e00c      	b.n	800c192 <HAL_RCC_OscConfig+0x35e>
 800c178:	2000002c 	.word	0x2000002c
 800c17c:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c180:	f7fa ff50 	bl	8007024 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d901      	bls.n	800c192 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e1bd      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c192:	f7ff fc0c 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d0f1      	beq.n	800c180 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c19c:	f7ff fc2a 	bl	800b9f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c1a0:	e008      	b.n	800c1b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c1a2:	f7fa ff3f 	bl	8007024 <HAL_GetTick>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	2b03      	cmp	r3, #3
 800c1ae:	d901      	bls.n	800c1b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	e1ac      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c1b4:	f7ff fc2f 	bl	800ba16 <LL_RCC_LSI2_IsReady>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1f1      	bne.n	800c1a2 <HAL_RCC_OscConfig+0x36e>
 800c1be:	e027      	b.n	800c210 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c1c0:	f7ff fc18 	bl	800b9f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1c4:	f7fa ff2e 	bl	8007024 <HAL_GetTick>
 800c1c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c1ca:	e008      	b.n	800c1de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c1cc:	f7fa ff2a 	bl	8007024 <HAL_GetTick>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d901      	bls.n	800c1de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	e197      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c1de:	f7ff fc1a 	bl	800ba16 <LL_RCC_LSI2_IsReady>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1f1      	bne.n	800c1cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c1e8:	f7ff fbd0 	bl	800b98c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1ec:	f7fa ff1a 	bl	8007024 <HAL_GetTick>
 800c1f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c1f2:	e008      	b.n	800c206 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c1f4:	f7fa ff16 	bl	8007024 <HAL_GetTick>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	d901      	bls.n	800c206 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c202:	2303      	movs	r3, #3
 800c204:	e183      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c206:	f7ff fbd2 	bl	800b9ae <LL_RCC_LSI1_IsReady>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1f1      	bne.n	800c1f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 0304 	and.w	r3, r3, #4
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d05b      	beq.n	800c2d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c21c:	4ba7      	ldr	r3, [pc, #668]	@ (800c4bc <HAL_RCC_OscConfig+0x688>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c224:	2b00      	cmp	r3, #0
 800c226:	d114      	bne.n	800c252 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c228:	f7ff fa60 	bl	800b6ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c22c:	f7fa fefa 	bl	8007024 <HAL_GetTick>
 800c230:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c232:	e008      	b.n	800c246 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c234:	f7fa fef6 	bl	8007024 <HAL_GetTick>
 800c238:	4602      	mov	r2, r0
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d901      	bls.n	800c246 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c242:	2303      	movs	r3, #3
 800c244:	e163      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c246:	4b9d      	ldr	r3, [pc, #628]	@ (800c4bc <HAL_RCC_OscConfig+0x688>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d0f0      	beq.n	800c234 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d102      	bne.n	800c260 <HAL_RCC_OscConfig+0x42c>
 800c25a:	f7ff fb30 	bl	800b8be <LL_RCC_LSE_Enable>
 800c25e:	e00c      	b.n	800c27a <HAL_RCC_OscConfig+0x446>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	2b05      	cmp	r3, #5
 800c266:	d104      	bne.n	800c272 <HAL_RCC_OscConfig+0x43e>
 800c268:	f7ff fb4b 	bl	800b902 <LL_RCC_LSE_EnableBypass>
 800c26c:	f7ff fb27 	bl	800b8be <LL_RCC_LSE_Enable>
 800c270:	e003      	b.n	800c27a <HAL_RCC_OscConfig+0x446>
 800c272:	f7ff fb35 	bl	800b8e0 <LL_RCC_LSE_Disable>
 800c276:	f7ff fb55 	bl	800b924 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d014      	beq.n	800c2ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c282:	f7fa fecf 	bl	8007024 <HAL_GetTick>
 800c286:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c288:	e00a      	b.n	800c2a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c28a:	f7fa fecb 	bl	8007024 <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c298:	4293      	cmp	r3, r2
 800c29a:	d901      	bls.n	800c2a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e136      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c2a0:	f7ff fb51 	bl	800b946 <LL_RCC_LSE_IsReady>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0ef      	beq.n	800c28a <HAL_RCC_OscConfig+0x456>
 800c2aa:	e013      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2ac:	f7fa feba 	bl	8007024 <HAL_GetTick>
 800c2b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c2b2:	e00a      	b.n	800c2ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2b4:	f7fa feb6 	bl	8007024 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d901      	bls.n	800c2ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e121      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c2ca:	f7ff fb3c 	bl	800b946 <LL_RCC_LSE_IsReady>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1ef      	bne.n	800c2b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d02c      	beq.n	800c33a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d014      	beq.n	800c312 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c2e8:	f7ff fab5 	bl	800b856 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2ec:	f7fa fe9a 	bl	8007024 <HAL_GetTick>
 800c2f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c2f2:	e008      	b.n	800c306 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2f4:	f7fa fe96 	bl	8007024 <HAL_GetTick>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d901      	bls.n	800c306 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e103      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c306:	f7ff fac8 	bl	800b89a <LL_RCC_HSI48_IsReady>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d0f1      	beq.n	800c2f4 <HAL_RCC_OscConfig+0x4c0>
 800c310:	e013      	b.n	800c33a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c312:	f7ff fab1 	bl	800b878 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c316:	f7fa fe85 	bl	8007024 <HAL_GetTick>
 800c31a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c31c:	e008      	b.n	800c330 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c31e:	f7fa fe81 	bl	8007024 <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d901      	bls.n	800c330 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e0ee      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c330:	f7ff fab3 	bl	800b89a <LL_RCC_HSI48_IsReady>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1f1      	bne.n	800c31e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 80e4 	beq.w	800c50c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c344:	f7ff fc11 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800c348:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c34a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c356:	2b02      	cmp	r3, #2
 800c358:	f040 80b4 	bne.w	800c4c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f003 0203 	and.w	r2, r3, #3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c366:	429a      	cmp	r2, r3
 800c368:	d123      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c374:	429a      	cmp	r2, r3
 800c376:	d11c      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	0a1b      	lsrs	r3, r3, #8
 800c37c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c384:	429a      	cmp	r2, r3
 800c386:	d114      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c392:	429a      	cmp	r2, r3
 800c394:	d10d      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d106      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d05d      	beq.n	800c46e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b0c      	cmp	r3, #12
 800c3b6:	d058      	beq.n	800c46a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c3b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e0a1      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c3ca:	f7ff fc84 	bl	800bcd6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c3ce:	f7fa fe29 	bl	8007024 <HAL_GetTick>
 800c3d2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c3d4:	e008      	b.n	800c3e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3d6:	f7fa fe25 	bl	8007024 <HAL_GetTick>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d901      	bls.n	800c3e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e092      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c3e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1ef      	bne.n	800c3d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c3f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3fa:	68da      	ldr	r2, [r3, #12]
 800c3fc:	4b30      	ldr	r3, [pc, #192]	@ (800c4c0 <HAL_RCC_OscConfig+0x68c>)
 800c3fe:	4013      	ands	r3, r2
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c408:	4311      	orrs	r1, r2
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c40e:	0212      	lsls	r2, r2, #8
 800c410:	4311      	orrs	r1, r2
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c416:	4311      	orrs	r1, r2
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c41c:	4311      	orrs	r1, r2
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c422:	430a      	orrs	r2, r1
 800c424:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c428:	4313      	orrs	r3, r2
 800c42a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c42c:	f7ff fc44 	bl	800bcb8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c43a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c43e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c440:	f7fa fdf0 	bl	8007024 <HAL_GetTick>
 800c444:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c446:	e008      	b.n	800c45a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c448:	f7fa fdec 	bl	8007024 <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	2b02      	cmp	r3, #2
 800c454:	d901      	bls.n	800c45a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e059      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c45a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0ef      	beq.n	800c448 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c468:	e050      	b.n	800c50c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	e04f      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c46e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d147      	bne.n	800c50c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c47c:	f7ff fc1c 	bl	800bcb8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c48a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c48e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c490:	f7fa fdc8 	bl	8007024 <HAL_GetTick>
 800c494:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c496:	e008      	b.n	800c4aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c498:	f7fa fdc4 	bl	8007024 <HAL_GetTick>
 800c49c:	4602      	mov	r2, r0
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d901      	bls.n	800c4aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	e031      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d0ef      	beq.n	800c498 <HAL_RCC_OscConfig+0x664>
 800c4b8:	e028      	b.n	800c50c <HAL_RCC_OscConfig+0x6d8>
 800c4ba:	bf00      	nop
 800c4bc:	58000400 	.word	0x58000400
 800c4c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	2b0c      	cmp	r3, #12
 800c4c8:	d01e      	beq.n	800c508 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c4ca:	f7ff fc04 	bl	800bcd6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4ce:	f7fa fda9 	bl	8007024 <HAL_GetTick>
 800c4d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c4d4:	e008      	b.n	800c4e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4d6:	f7fa fda5 	bl	8007024 <HAL_GetTick>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d901      	bls.n	800c4e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e012      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c4e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1ef      	bne.n	800c4d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c4f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4fa:	68da      	ldr	r2, [r3, #12]
 800c4fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c500:	4b05      	ldr	r3, [pc, #20]	@ (800c518 <HAL_RCC_OscConfig+0x6e4>)
 800c502:	4013      	ands	r3, r2
 800c504:	60cb      	str	r3, [r1, #12]
 800c506:	e001      	b.n	800c50c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e000      	b.n	800c50e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3734      	adds	r7, #52	@ 0x34
 800c512:	46bd      	mov	sp, r7
 800c514:	bd90      	pop	{r4, r7, pc}
 800c516:	bf00      	nop
 800c518:	eefefffc 	.word	0xeefefffc

0800c51c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e12d      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c530:	4b98      	ldr	r3, [pc, #608]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0307 	and.w	r3, r3, #7
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d91b      	bls.n	800c576 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c53e:	4b95      	ldr	r3, [pc, #596]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f023 0207 	bic.w	r2, r3, #7
 800c546:	4993      	ldr	r1, [pc, #588]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c54e:	f7fa fd69 	bl	8007024 <HAL_GetTick>
 800c552:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c554:	e008      	b.n	800c568 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c556:	f7fa fd65 	bl	8007024 <HAL_GetTick>
 800c55a:	4602      	mov	r2, r0
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	1ad3      	subs	r3, r2, r3
 800c560:	2b02      	cmp	r3, #2
 800c562:	d901      	bls.n	800c568 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c564:	2303      	movs	r3, #3
 800c566:	e111      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c568:	4b8a      	ldr	r3, [pc, #552]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0307 	and.w	r3, r3, #7
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d1ef      	bne.n	800c556 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0302 	and.w	r3, r3, #2
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d016      	beq.n	800c5b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff fafb 	bl	800bb82 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c58c:	f7fa fd4a 	bl	8007024 <HAL_GetTick>
 800c590:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c592:	e008      	b.n	800c5a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c594:	f7fa fd46 	bl	8007024 <HAL_GetTick>
 800c598:	4602      	mov	r2, r0
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d901      	bls.n	800c5a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	e0f2      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c5a6:	f7ff fbe8 	bl	800bd7a <LL_RCC_IsActiveFlag_HPRE>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d0f1      	beq.n	800c594 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 0320 	and.w	r3, r3, #32
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d016      	beq.n	800c5ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7ff faf2 	bl	800bbaa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c5c6:	f7fa fd2d 	bl	8007024 <HAL_GetTick>
 800c5ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c5cc:	e008      	b.n	800c5e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c5ce:	f7fa fd29 	bl	8007024 <HAL_GetTick>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	1ad3      	subs	r3, r2, r3
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d901      	bls.n	800c5e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c5dc:	2303      	movs	r3, #3
 800c5de:	e0d5      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c5e0:	f7ff fbdd 	bl	800bd9e <LL_RCC_IsActiveFlag_C2HPRE>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0f1      	beq.n	800c5ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d016      	beq.n	800c624 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff faeb 	bl	800bbd6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c600:	f7fa fd10 	bl	8007024 <HAL_GetTick>
 800c604:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c606:	e008      	b.n	800c61a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c608:	f7fa fd0c 	bl	8007024 <HAL_GetTick>
 800c60c:	4602      	mov	r2, r0
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	2b02      	cmp	r3, #2
 800c614:	d901      	bls.n	800c61a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e0b8      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c61a:	f7ff fbd3 	bl	800bdc4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d0f1      	beq.n	800c608 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d016      	beq.n	800c65e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff fae5 	bl	800bc04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c63a:	f7fa fcf3 	bl	8007024 <HAL_GetTick>
 800c63e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c640:	e008      	b.n	800c654 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c642:	f7fa fcef 	bl	8007024 <HAL_GetTick>
 800c646:	4602      	mov	r2, r0
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d901      	bls.n	800c654 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e09b      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c654:	f7ff fbc9 	bl	800bdea <LL_RCC_IsActiveFlag_PPRE1>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0f1      	beq.n	800c642 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 0308 	and.w	r3, r3, #8
 800c666:	2b00      	cmp	r3, #0
 800c668:	d017      	beq.n	800c69a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	00db      	lsls	r3, r3, #3
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff fadb 	bl	800bc2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c676:	f7fa fcd5 	bl	8007024 <HAL_GetTick>
 800c67a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c67c:	e008      	b.n	800c690 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c67e:	f7fa fcd1 	bl	8007024 <HAL_GetTick>
 800c682:	4602      	mov	r2, r0
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d901      	bls.n	800c690 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e07d      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c690:	f7ff fbbd 	bl	800be0e <LL_RCC_IsActiveFlag_PPRE2>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d0f1      	beq.n	800c67e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d043      	beq.n	800c72e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d106      	bne.n	800c6bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c6ae:	f7ff f87b 	bl	800b7a8 <LL_RCC_HSE_IsReady>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d11e      	bne.n	800c6f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e067      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d106      	bne.n	800c6d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c6c4:	f7ff fb16 	bl	800bcf4 <LL_RCC_PLL_IsReady>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d113      	bne.n	800c6f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e05c      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d106      	bne.n	800c6e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c6da:	f7ff f9e3 	bl	800baa4 <LL_RCC_MSI_IsReady>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d108      	bne.n	800c6f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e051      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c6e8:	f7ff f88e 	bl	800b808 <LL_RCC_HSI_IsReady>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d101      	bne.n	800c6f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e04a      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7ff fa21 	bl	800bb42 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c700:	f7fa fc90 	bl	8007024 <HAL_GetTick>
 800c704:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c706:	e00a      	b.n	800c71e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c708:	f7fa fc8c 	bl	8007024 <HAL_GetTick>
 800c70c:	4602      	mov	r2, r0
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c716:	4293      	cmp	r3, r2
 800c718:	d901      	bls.n	800c71e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c71a:	2303      	movs	r3, #3
 800c71c:	e036      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c71e:	f7ff fa24 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800c722:	4602      	mov	r2, r0
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d1ec      	bne.n	800c708 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c72e:	4b19      	ldr	r3, [pc, #100]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 0307 	and.w	r3, r3, #7
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d21b      	bcs.n	800c774 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c73c:	4b15      	ldr	r3, [pc, #84]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f023 0207 	bic.w	r2, r3, #7
 800c744:	4913      	ldr	r1, [pc, #76]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	4313      	orrs	r3, r2
 800c74a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c74c:	f7fa fc6a 	bl	8007024 <HAL_GetTick>
 800c750:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c752:	e008      	b.n	800c766 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c754:	f7fa fc66 	bl	8007024 <HAL_GetTick>
 800c758:	4602      	mov	r2, r0
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d901      	bls.n	800c766 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e012      	b.n	800c78c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c766:	4b0b      	ldr	r3, [pc, #44]	@ (800c794 <HAL_RCC_ClockConfig+0x278>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 0307 	and.w	r3, r3, #7
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	429a      	cmp	r2, r3
 800c772:	d1ef      	bne.n	800c754 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c774:	f000 f87e 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 800c778:	4603      	mov	r3, r0
 800c77a:	4a07      	ldr	r2, [pc, #28]	@ (800c798 <HAL_RCC_ClockConfig+0x27c>)
 800c77c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c77e:	f7fa fc5d 	bl	800703c <HAL_GetTickPrio>
 800c782:	4603      	mov	r3, r0
 800c784:	4618      	mov	r0, r3
 800c786:	f7fa fbff 	bl	8006f88 <HAL_InitTick>
 800c78a:	4603      	mov	r3, r0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	58004000 	.word	0x58004000
 800c798:	2000002c 	.word	0x2000002c

0800c79c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c79c:	b590      	push	{r4, r7, lr}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7a2:	f7ff f9e2 	bl	800bb6a <LL_RCC_GetSysClkSource>
 800c7a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10a      	bne.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c7ae:	f7ff f99e 	bl	800baee <LL_RCC_MSI_GetRange>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	091b      	lsrs	r3, r3, #4
 800c7b6:	f003 030f 	and.w	r3, r3, #15
 800c7ba:	4a2b      	ldr	r2, [pc, #172]	@ (800c868 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c0:	60fb      	str	r3, [r7, #12]
 800c7c2:	e04b      	b.n	800c85c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b04      	cmp	r3, #4
 800c7c8:	d102      	bne.n	800c7d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c7ca:	4b28      	ldr	r3, [pc, #160]	@ (800c86c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c7cc:	60fb      	str	r3, [r7, #12]
 800c7ce:	e045      	b.n	800c85c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b08      	cmp	r3, #8
 800c7d4:	d10a      	bne.n	800c7ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c7d6:	f7fe ffb7 	bl	800b748 <LL_RCC_HSE_IsEnabledDiv2>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d102      	bne.n	800c7e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c7e0:	4b22      	ldr	r3, [pc, #136]	@ (800c86c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	e03a      	b.n	800c85c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c7e6:	4b22      	ldr	r3, [pc, #136]	@ (800c870 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	e037      	b.n	800c85c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c7ec:	f7ff fab9 	bl	800bd62 <LL_RCC_PLL_GetMainSource>
 800c7f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d003      	beq.n	800c800 <HAL_RCC_GetSysClockFreq+0x64>
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d003      	beq.n	800c806 <HAL_RCC_GetSysClockFreq+0x6a>
 800c7fe:	e00d      	b.n	800c81c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c800:	4b1a      	ldr	r3, [pc, #104]	@ (800c86c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c802:	60bb      	str	r3, [r7, #8]
        break;
 800c804:	e015      	b.n	800c832 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c806:	f7fe ff9f 	bl	800b748 <LL_RCC_HSE_IsEnabledDiv2>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d102      	bne.n	800c816 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c810:	4b16      	ldr	r3, [pc, #88]	@ (800c86c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c812:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c814:	e00d      	b.n	800c832 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800c816:	4b16      	ldr	r3, [pc, #88]	@ (800c870 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c818:	60bb      	str	r3, [r7, #8]
        break;
 800c81a:	e00a      	b.n	800c832 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c81c:	f7ff f967 	bl	800baee <LL_RCC_MSI_GetRange>
 800c820:	4603      	mov	r3, r0
 800c822:	091b      	lsrs	r3, r3, #4
 800c824:	f003 030f 	and.w	r3, r3, #15
 800c828:	4a0f      	ldr	r2, [pc, #60]	@ (800c868 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c82a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c82e:	60bb      	str	r3, [r7, #8]
        break;
 800c830:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800c832:	f7ff fa71 	bl	800bd18 <LL_RCC_PLL_GetN>
 800c836:	4602      	mov	r2, r0
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	fb03 f402 	mul.w	r4, r3, r2
 800c83e:	f7ff fa84 	bl	800bd4a <LL_RCC_PLL_GetDivider>
 800c842:	4603      	mov	r3, r0
 800c844:	091b      	lsrs	r3, r3, #4
 800c846:	3301      	adds	r3, #1
 800c848:	fbb4 f4f3 	udiv	r4, r4, r3
 800c84c:	f7ff fa71 	bl	800bd32 <LL_RCC_PLL_GetR>
 800c850:	4603      	mov	r3, r0
 800c852:	0f5b      	lsrs	r3, r3, #29
 800c854:	3301      	adds	r3, #1
 800c856:	fbb4 f3f3 	udiv	r3, r4, r3
 800c85a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c85c:	68fb      	ldr	r3, [r7, #12]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	bd90      	pop	{r4, r7, pc}
 800c866:	bf00      	nop
 800c868:	08021a84 	.word	0x08021a84
 800c86c:	00f42400 	.word	0x00f42400
 800c870:	01e84800 	.word	0x01e84800

0800c874 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c874:	b598      	push	{r3, r4, r7, lr}
 800c876:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c878:	f7ff ff90 	bl	800c79c <HAL_RCC_GetSysClockFreq>
 800c87c:	4604      	mov	r4, r0
 800c87e:	f7ff f9e9 	bl	800bc54 <LL_RCC_GetAHBPrescaler>
 800c882:	4603      	mov	r3, r0
 800c884:	091b      	lsrs	r3, r3, #4
 800c886:	f003 030f 	and.w	r3, r3, #15
 800c88a:	4a03      	ldr	r2, [pc, #12]	@ (800c898 <HAL_RCC_GetHCLKFreq+0x24>)
 800c88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c890:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c894:	4618      	mov	r0, r3
 800c896:	bd98      	pop	{r3, r4, r7, pc}
 800c898:	08021a24 	.word	0x08021a24

0800c89c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c89c:	b598      	push	{r3, r4, r7, lr}
 800c89e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c8a0:	f7ff ffe8 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	f7ff f9ef 	bl	800bc88 <LL_RCC_GetAPB1Prescaler>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	0a1b      	lsrs	r3, r3, #8
 800c8ae:	f003 0307 	and.w	r3, r3, #7
 800c8b2:	4a04      	ldr	r2, [pc, #16]	@ (800c8c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8b8:	f003 031f 	and.w	r3, r3, #31
 800c8bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	bd98      	pop	{r3, r4, r7, pc}
 800c8c4:	08021a64 	.word	0x08021a64

0800c8c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c8c8:	b598      	push	{r3, r4, r7, lr}
 800c8ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c8cc:	f7ff ffd2 	bl	800c874 <HAL_RCC_GetHCLKFreq>
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	f7ff f9e5 	bl	800bca0 <LL_RCC_GetAPB2Prescaler>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	0adb      	lsrs	r3, r3, #11
 800c8da:	f003 0307 	and.w	r3, r3, #7
 800c8de:	4a04      	ldr	r2, [pc, #16]	@ (800c8f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8e4:	f003 031f 	and.w	r3, r3, #31
 800c8e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	bd98      	pop	{r3, r4, r7, pc}
 800c8f0:	08021a64 	.word	0x08021a64

0800c8f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c8f4:	b590      	push	{r4, r7, lr}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2bb0      	cmp	r3, #176	@ 0xb0
 800c900:	d903      	bls.n	800c90a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c902:	4b15      	ldr	r3, [pc, #84]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c906:	60fb      	str	r3, [r7, #12]
 800c908:	e007      	b.n	800c91a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	091b      	lsrs	r3, r3, #4
 800c90e:	f003 030f 	and.w	r3, r3, #15
 800c912:	4a11      	ldr	r2, [pc, #68]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c918:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c91a:	f7ff f9a7 	bl	800bc6c <LL_RCC_GetAHB4Prescaler>
 800c91e:	4603      	mov	r3, r0
 800c920:	091b      	lsrs	r3, r3, #4
 800c922:	f003 030f 	and.w	r3, r3, #15
 800c926:	4a0d      	ldr	r2, [pc, #52]	@ (800c95c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c932:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	4a0a      	ldr	r2, [pc, #40]	@ (800c960 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c938:	fba2 2303 	umull	r2, r3, r2, r3
 800c93c:	0c9c      	lsrs	r4, r3, #18
 800c93e:	f7fe fee5 	bl	800b70c <HAL_PWREx_GetVoltageRange>
 800c942:	4603      	mov	r3, r0
 800c944:	4619      	mov	r1, r3
 800c946:	4620      	mov	r0, r4
 800c948:	f000 f80c 	bl	800c964 <RCC_SetFlashLatency>
 800c94c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	bd90      	pop	{r4, r7, pc}
 800c956:	bf00      	nop
 800c958:	08021a84 	.word	0x08021a84
 800c95c:	08021a24 	.word	0x08021a24
 800c960:	431bde83 	.word	0x431bde83

0800c964 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c964:	b590      	push	{r4, r7, lr}
 800c966:	b093      	sub	sp, #76	@ 0x4c
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c96e:	4b37      	ldr	r3, [pc, #220]	@ (800ca4c <RCC_SetFlashLatency+0xe8>)
 800c970:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c97a:	4a35      	ldr	r2, [pc, #212]	@ (800ca50 <RCC_SetFlashLatency+0xec>)
 800c97c:	f107 031c 	add.w	r3, r7, #28
 800c980:	ca07      	ldmia	r2, {r0, r1, r2}
 800c982:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c986:	4b33      	ldr	r3, [pc, #204]	@ (800ca54 <RCC_SetFlashLatency+0xf0>)
 800c988:	f107 040c 	add.w	r4, r7, #12
 800c98c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c98e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c992:	2300      	movs	r3, #0
 800c994:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c99c:	d11a      	bne.n	800c9d4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c99e:	2300      	movs	r3, #0
 800c9a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9a2:	e013      	b.n	800c9cc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c9a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	3348      	adds	r3, #72	@ 0x48
 800c9aa:	443b      	add	r3, r7
 800c9ac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d807      	bhi.n	800c9c6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	3348      	adds	r3, #72	@ 0x48
 800c9bc:	443b      	add	r3, r7
 800c9be:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c9c2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c9c4:	e020      	b.n	800ca08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c9c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d9e8      	bls.n	800c9a4 <RCC_SetFlashLatency+0x40>
 800c9d2:	e019      	b.n	800ca08 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9d8:	e013      	b.n	800ca02 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	3348      	adds	r3, #72	@ 0x48
 800c9e0:	443b      	add	r3, r7
 800c9e2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d807      	bhi.n	800c9fc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	3348      	adds	r3, #72	@ 0x48
 800c9f2:	443b      	add	r3, r7
 800c9f4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c9f8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c9fa:	e005      	b.n	800ca08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9fe:	3301      	adds	r3, #1
 800ca00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d9e8      	bls.n	800c9da <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800ca08:	4b13      	ldr	r3, [pc, #76]	@ (800ca58 <RCC_SetFlashLatency+0xf4>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f023 0207 	bic.w	r2, r3, #7
 800ca10:	4911      	ldr	r1, [pc, #68]	@ (800ca58 <RCC_SetFlashLatency+0xf4>)
 800ca12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca14:	4313      	orrs	r3, r2
 800ca16:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ca18:	f7fa fb04 	bl	8007024 <HAL_GetTick>
 800ca1c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ca1e:	e008      	b.n	800ca32 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ca20:	f7fa fb00 	bl	8007024 <HAL_GetTick>
 800ca24:	4602      	mov	r2, r0
 800ca26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca28:	1ad3      	subs	r3, r2, r3
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d901      	bls.n	800ca32 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	e007      	b.n	800ca42 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ca32:	4b09      	ldr	r3, [pc, #36]	@ (800ca58 <RCC_SetFlashLatency+0xf4>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d1ef      	bne.n	800ca20 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	374c      	adds	r7, #76	@ 0x4c
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd90      	pop	{r4, r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	0801fc1c 	.word	0x0801fc1c
 800ca50:	0801fc2c 	.word	0x0801fc2c
 800ca54:	0801fc38 	.word	0x0801fc38
 800ca58:	58004000 	.word	0x58004000

0800ca5c <LL_RCC_LSE_IsEnabled>:
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ca60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d101      	bne.n	800ca74 <LL_RCC_LSE_IsEnabled+0x18>
 800ca70:	2301      	movs	r3, #1
 800ca72:	e000      	b.n	800ca76 <LL_RCC_LSE_IsEnabled+0x1a>
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <LL_RCC_LSE_IsReady>:
{
 800ca80:	b480      	push	{r7}
 800ca82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ca84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca8c:	f003 0302 	and.w	r3, r3, #2
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d101      	bne.n	800ca98 <LL_RCC_LSE_IsReady+0x18>
 800ca94:	2301      	movs	r3, #1
 800ca96:	e000      	b.n	800ca9a <LL_RCC_LSE_IsReady+0x1a>
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <LL_RCC_SetRFWKPClockSource>:
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800caac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cab4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cab8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <LL_RCC_SetSMPSClockSource>:
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800cad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cade:	f023 0203 	bic.w	r2, r3, #3
 800cae2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4313      	orrs	r3, r2
 800caea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <LL_RCC_SetSMPSPrescaler>:
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800cb00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800cb0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <LL_RCC_SetUSARTClockSource>:
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800cb28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb30:	f023 0203 	bic.w	r2, r3, #3
 800cb34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <LL_RCC_SetLPUARTClockSource>:
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cb54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cb60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <LL_RCC_SetI2CClockSource>:
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cb80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	091b      	lsrs	r3, r3, #4
 800cb8c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cb90:	43db      	mvns	r3, r3
 800cb92:	401a      	ands	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	011b      	lsls	r3, r3, #4
 800cb98:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cb9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cba0:	4313      	orrs	r3, r2
 800cba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cba6:	bf00      	nop
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <LL_RCC_SetLPTIMClockSource>:
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b083      	sub	sp, #12
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cbba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	0c1b      	lsrs	r3, r3, #16
 800cbc6:	041b      	lsls	r3, r3, #16
 800cbc8:	43db      	mvns	r3, r3
 800cbca:	401a      	ands	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	041b      	lsls	r3, r3, #16
 800cbd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cbda:	bf00      	nop
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <LL_RCC_SetSAIClockSource>:
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b083      	sub	sp, #12
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cbee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cbfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc06:	bf00      	nop
 800cc08:	370c      	adds	r7, #12
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr

0800cc12 <LL_RCC_SetRNGClockSource>:
{
 800cc12:	b480      	push	{r7}
 800cc14:	b083      	sub	sp, #12
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cc1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc22:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800cc26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc32:	bf00      	nop
 800cc34:	370c      	adds	r7, #12
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <LL_RCC_SetCLK48ClockSource>:
{
 800cc3e:	b480      	push	{r7}
 800cc40:	b083      	sub	sp, #12
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800cc46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cc52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc5e:	bf00      	nop
 800cc60:	370c      	adds	r7, #12
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr

0800cc6a <LL_RCC_SetUSBClockSource>:
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b082      	sub	sp, #8
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7ff ffe3 	bl	800cc3e <LL_RCC_SetCLK48ClockSource>
}
 800cc78:	bf00      	nop
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <LL_RCC_SetADCClockSource>:
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800cc88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc90:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800cc94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <LL_RCC_SetRTCClockSource>:
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800ccb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ccc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <LL_RCC_GetRTCClockSource>:
{
 800ccd8:	b480      	push	{r7}
 800ccda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800ccdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <LL_RCC_ForceBackupDomainReset>:
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ccf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cd0a:	bf00      	nop
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <LL_RCC_ReleaseBackupDomainReset>:
{
 800cd14:	b480      	push	{r7}
 800cd16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cd28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cd2c:	bf00      	nop
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <LL_RCC_PLLSAI1_Enable>:
{
 800cd36:	b480      	push	{r7}
 800cd38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cd3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cd48:	6013      	str	r3, [r2, #0]
}
 800cd4a:	bf00      	nop
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <LL_RCC_PLLSAI1_Disable>:
{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cd58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd66:	6013      	str	r3, [r2, #0]
}
 800cd68:	bf00      	nop
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <LL_RCC_PLLSAI1_IsReady>:
{
 800cd72:	b480      	push	{r7}
 800cd74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cd76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd84:	d101      	bne.n	800cd8a <LL_RCC_PLLSAI1_IsReady+0x18>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e000      	b.n	800cd8c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b088      	sub	sp, #32
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800cd9e:	2300      	movs	r3, #0
 800cda0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800cda2:	2300      	movs	r3, #0
 800cda4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d034      	beq.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cdba:	d021      	beq.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800cdbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cdc0:	d81b      	bhi.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cdc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cdc6:	d01d      	beq.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800cdc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cdcc:	d815      	bhi.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00b      	beq.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x54>
 800cdd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cdd6:	d110      	bne.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800cdd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cde2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cde6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800cde8:	e00d      	b.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	3304      	adds	r3, #4
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 f947 	bl	800d082 <RCCEx_PLLSAI1_ConfigNP>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800cdf8:	e005      	b.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	77fb      	strb	r3, [r7, #31]
        break;
 800cdfe:	e002      	b.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ce00:	bf00      	nop
 800ce02:	e000      	b.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ce04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce06:	7ffb      	ldrb	r3, [r7, #31]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d105      	bne.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff fee8 	bl	800cbe6 <LL_RCC_SetSAIClockSource>
 800ce16:	e001      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce18:	7ffb      	ldrb	r3, [r7, #31]
 800ce1a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d046      	beq.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800ce28:	f7ff ff56 	bl	800ccd8 <LL_RCC_GetRTCClockSource>
 800ce2c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce32:	69ba      	ldr	r2, [r7, #24]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d03c      	beq.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ce38:	f7fe fc58 	bl	800b6ec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d105      	bne.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7ff ff30 	bl	800ccac <LL_RCC_SetRTCClockSource>
 800ce4c:	e02e      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800ce4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce56:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800ce58:	f7ff ff4b 	bl	800ccf2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800ce5c:	f7ff ff5a 	bl	800cd14 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800ce6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800ce78:	f7ff fdf0 	bl	800ca5c <LL_RCC_LSE_IsEnabled>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d114      	bne.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ce82:	f7fa f8cf 	bl	8007024 <HAL_GetTick>
 800ce86:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800ce88:	e00b      	b.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce8a:	f7fa f8cb 	bl	8007024 <HAL_GetTick>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d902      	bls.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	77fb      	strb	r3, [r7, #31]
              break;
 800cea0:	e004      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800cea2:	f7ff fded 	bl	800ca80 <LL_RCC_LSE_IsReady>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d1ee      	bne.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800ceac:	7ffb      	ldrb	r3, [r7, #31]
 800ceae:	77bb      	strb	r3, [r7, #30]
 800ceb0:	e001      	b.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceb2:	7ffb      	ldrb	r3, [r7, #31]
 800ceb4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d004      	beq.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	699b      	ldr	r3, [r3, #24]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7ff fe2a 	bl	800cb20 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f003 0302 	and.w	r3, r3, #2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d004      	beq.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff fe35 	bl	800cb4c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0310 	and.w	r3, r3, #16
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d004      	beq.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff fe5d 	bl	800cbb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f003 0320 	and.w	r3, r3, #32
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d004      	beq.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff fe52 	bl	800cbb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f003 0304 	and.w	r3, r3, #4
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d004      	beq.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a1b      	ldr	r3, [r3, #32]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff fe2a 	bl	800cb78 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 0308 	and.w	r3, r3, #8
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d004      	beq.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7ff fe1f 	bl	800cb78 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d022      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff fe8d 	bl	800cc6a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf58:	d107      	bne.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cf5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf68:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf72:	d10b      	bne.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3304      	adds	r3, #4
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f000 f8dd 	bl	800d138 <RCCEx_PLLSAI1_ConfigNQ>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cf82:	7ffb      	ldrb	r3, [r7, #31]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800cf88:	7ffb      	ldrb	r3, [r7, #31]
 800cf8a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d02b      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfa0:	d008      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cfaa:	d003      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d105      	bne.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff fe2a 	bl	800cc12 <LL_RCC_SetRNGClockSource>
 800cfbe:	e00a      	b.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	2000      	movs	r0, #0
 800cfcc:	f7ff fe21 	bl	800cc12 <LL_RCC_SetRNGClockSource>
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f7ff fe34 	bl	800cc3e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfda:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800cfde:	d107      	bne.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800cfe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cfea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cfee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d022      	beq.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d000:	4618      	mov	r0, r3
 800d002:	f7ff fe3d 	bl	800cc80 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d00a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d00e:	d107      	bne.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d01a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d01e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d028:	d10b      	bne.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4618      	mov	r0, r3
 800d030:	f000 f8dd 	bl	800d1ee <RCCEx_PLLSAI1_ConfigNR>
 800d034:	4603      	mov	r3, r0
 800d036:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d038:	7ffb      	ldrb	r3, [r7, #31]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d03e:	7ffb      	ldrb	r3, [r7, #31]
 800d040:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d004      	beq.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff fd26 	bl	800caa4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d060:	2b00      	cmp	r3, #0
 800d062:	d009      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff fd45 	bl	800caf8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d072:	4618      	mov	r0, r3
 800d074:	f7ff fd2c 	bl	800cad0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d078:	7fbb      	ldrb	r3, [r7, #30]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3720      	adds	r7, #32
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d08e:	f7ff fe61 	bl	800cd54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d092:	f7f9 ffc7 	bl	8007024 <HAL_GetTick>
 800d096:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d098:	e009      	b.n	800d0ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d09a:	f7f9 ffc3 	bl	8007024 <HAL_GetTick>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d902      	bls.n	800d0ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d0ac:	e004      	b.n	800d0b8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d0ae:	f7ff fe60 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1f0      	bne.n	800d09a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d0b8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d137      	bne.n	800d12e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d0be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0c2:	691b      	ldr	r3, [r3, #16]
 800d0c4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	021b      	lsls	r3, r3, #8
 800d0ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d0d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d0ec:	f7ff fe23 	bl	800cd36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0f0:	f7f9 ff98 	bl	8007024 <HAL_GetTick>
 800d0f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d0f6:	e009      	b.n	800d10c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d0f8:	f7f9 ff94 	bl	8007024 <HAL_GetTick>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	2b02      	cmp	r3, #2
 800d104:	d902      	bls.n	800d10c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d106:	2303      	movs	r3, #3
 800d108:	73fb      	strb	r3, [r7, #15]
        break;
 800d10a:	e004      	b.n	800d116 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d10c:	f7ff fe31 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d110:	4603      	mov	r3, r0
 800d112:	2b01      	cmp	r3, #1
 800d114:	d1f0      	bne.n	800d0f8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d116:	7bfb      	ldrb	r3, [r7, #15]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d108      	bne.n	800d12e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d11c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d120:	691a      	ldr	r2, [r3, #16]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d12a:	4313      	orrs	r3, r2
 800d12c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d144:	f7ff fe06 	bl	800cd54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d148:	f7f9 ff6c 	bl	8007024 <HAL_GetTick>
 800d14c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d14e:	e009      	b.n	800d164 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d150:	f7f9 ff68 	bl	8007024 <HAL_GetTick>
 800d154:	4602      	mov	r2, r0
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d902      	bls.n	800d164 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d15e:	2303      	movs	r3, #3
 800d160:	73fb      	strb	r3, [r7, #15]
      break;
 800d162:	e004      	b.n	800d16e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d164:	f7ff fe05 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1f0      	bne.n	800d150 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d16e:	7bfb      	ldrb	r3, [r7, #15]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d137      	bne.n	800d1e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	021b      	lsls	r3, r3, #8
 800d184:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d188:	4313      	orrs	r3, r2
 800d18a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d18c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d1a2:	f7ff fdc8 	bl	800cd36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1a6:	f7f9 ff3d 	bl	8007024 <HAL_GetTick>
 800d1aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d1ac:	e009      	b.n	800d1c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d1ae:	f7f9 ff39 	bl	8007024 <HAL_GetTick>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	d902      	bls.n	800d1c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d1bc:	2303      	movs	r3, #3
 800d1be:	73fb      	strb	r3, [r7, #15]
        break;
 800d1c0:	e004      	b.n	800d1cc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d1c2:	f7ff fdd6 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d1f0      	bne.n	800d1ae <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d108      	bne.n	800d1e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d1d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1d6:	691a      	ldr	r2, [r3, #16]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b084      	sub	sp, #16
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d1fa:	f7ff fdab 	bl	800cd54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d1fe:	f7f9 ff11 	bl	8007024 <HAL_GetTick>
 800d202:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d204:	e009      	b.n	800d21a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d206:	f7f9 ff0d 	bl	8007024 <HAL_GetTick>
 800d20a:	4602      	mov	r2, r0
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	2b02      	cmp	r3, #2
 800d212:	d902      	bls.n	800d21a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d214:	2303      	movs	r3, #3
 800d216:	73fb      	strb	r3, [r7, #15]
      break;
 800d218:	e004      	b.n	800d224 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d21a:	f7ff fdaa 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1f0      	bne.n	800d206 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d224:	7bfb      	ldrb	r3, [r7, #15]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d137      	bne.n	800d29a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d22a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	021b      	lsls	r3, r3, #8
 800d23a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d23e:	4313      	orrs	r3, r2
 800d240:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d254:	4313      	orrs	r3, r2
 800d256:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d258:	f7ff fd6d 	bl	800cd36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d25c:	f7f9 fee2 	bl	8007024 <HAL_GetTick>
 800d260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d262:	e009      	b.n	800d278 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d264:	f7f9 fede 	bl	8007024 <HAL_GetTick>
 800d268:	4602      	mov	r2, r0
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d902      	bls.n	800d278 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d272:	2303      	movs	r3, #3
 800d274:	73fb      	strb	r3, [r7, #15]
        break;
 800d276:	e004      	b.n	800d282 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d278:	f7ff fd7b 	bl	800cd72 <LL_RCC_PLLSAI1_IsReady>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d1f0      	bne.n	800d264 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d282:	7bfb      	ldrb	r3, [r7, #15]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d108      	bne.n	800d29a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d28c:	691a      	ldr	r2, [r3, #16]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d296:	4313      	orrs	r3, r2
 800d298:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e09f      	b.n	800d3f6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d106      	bne.n	800d2d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f7f6 fa3c 	bl	8003748 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2202      	movs	r2, #2
 800d2d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d2d8:	4b49      	ldr	r3, [pc, #292]	@ (800d400 <HAL_RTC_Init+0x15c>)
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	f003 0310 	and.w	r3, r3, #16
 800d2e0:	2b10      	cmp	r3, #16
 800d2e2:	d07e      	beq.n	800d3e2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	22ca      	movs	r2, #202	@ 0xca
 800d2ea:	625a      	str	r2, [r3, #36]	@ 0x24
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2253      	movs	r2, #83	@ 0x53
 800d2f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 fa1d 	bl	800d734 <RTC_EnterInitMode>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00a      	beq.n	800d316 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	22ff      	movs	r2, #255	@ 0xff
 800d306:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2204      	movs	r2, #4
 800d30c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	73fb      	strb	r3, [r7, #15]
 800d314:	e067      	b.n	800d3e6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	6812      	ldr	r2, [r2, #0]
 800d320:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d328:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6899      	ldr	r1, [r3, #8]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	691b      	ldr	r3, [r3, #16]
 800d338:	431a      	orrs	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	699b      	ldr	r3, [r3, #24]
 800d33e:	431a      	orrs	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	430a      	orrs	r2, r1
 800d346:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	68d2      	ldr	r2, [r2, #12]
 800d350:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6919      	ldr	r1, [r3, #16]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	041a      	lsls	r2, r3, #16
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	430a      	orrs	r2, r1
 800d364:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	68da      	ldr	r2, [r3, #12]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d374:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f022 0203 	bic.w	r2, r2, #3
 800d384:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	69da      	ldr	r2, [r3, #28]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	695b      	ldr	r3, [r3, #20]
 800d394:	431a      	orrs	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	430a      	orrs	r2, r1
 800d39c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	f003 0320 	and.w	r3, r3, #32
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d113      	bne.n	800d3d4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 f99b 	bl	800d6e8 <HAL_RTC_WaitForSynchro>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00d      	beq.n	800d3d4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	22ff      	movs	r2, #255	@ 0xff
 800d3be:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2204      	movs	r2, #4
 800d3c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e010      	b.n	800d3f6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	22ff      	movs	r2, #255	@ 0xff
 800d3da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	73fb      	strb	r3, [r7, #15]
 800d3e0:	e001      	b.n	800d3e6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d3e6:	7bfb      	ldrb	r3, [r7, #15]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d103      	bne.n	800d3f4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	40002800 	.word	0x40002800

0800d404 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d404:	b590      	push	{r4, r7, lr}
 800d406:	b087      	sub	sp, #28
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d101      	bne.n	800d41e <HAL_RTC_SetTime+0x1a>
 800d41a:	2302      	movs	r3, #2
 800d41c:	e0b2      	b.n	800d584 <HAL_RTC_SetTime+0x180>
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2202      	movs	r2, #2
 800d42a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d126      	bne.n	800d482 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d102      	bne.n	800d448 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	2200      	movs	r2, #0
 800d446:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f000 f99b 	bl	800d788 <RTC_ByteToBcd2>
 800d452:	4603      	mov	r3, r0
 800d454:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	785b      	ldrb	r3, [r3, #1]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 f994 	bl	800d788 <RTC_ByteToBcd2>
 800d460:	4603      	mov	r3, r0
 800d462:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d464:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	789b      	ldrb	r3, [r3, #2]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f000 f98c 	bl	800d788 <RTC_ByteToBcd2>
 800d470:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d472:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	78db      	ldrb	r3, [r3, #3]
 800d47a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d47c:	4313      	orrs	r3, r2
 800d47e:	617b      	str	r3, [r7, #20]
 800d480:	e018      	b.n	800d4b4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	689b      	ldr	r3, [r3, #8]
 800d488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d102      	bne.n	800d496 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	2200      	movs	r2, #0
 800d494:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	785b      	ldrb	r3, [r3, #1]
 800d4a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d4a2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d4a4:	68ba      	ldr	r2, [r7, #8]
 800d4a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d4a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	78db      	ldrb	r3, [r3, #3]
 800d4ae:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	22ca      	movs	r2, #202	@ 0xca
 800d4ba:	625a      	str	r2, [r3, #36]	@ 0x24
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2253      	movs	r2, #83	@ 0x53
 800d4c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f000 f935 	bl	800d734 <RTC_EnterInitMode>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00d      	beq.n	800d4ec <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	22ff      	movs	r2, #255	@ 0xff
 800d4d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2204      	movs	r2, #4
 800d4dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e04b      	b.n	800d584 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d4f6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d4fa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	689a      	ldr	r2, [r3, #8]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d50a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6899      	ldr	r1, [r3, #8]
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	68da      	ldr	r2, [r3, #12]
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	431a      	orrs	r2, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	430a      	orrs	r2, r1
 800d522:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68da      	ldr	r2, [r3, #12]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d532:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	f003 0320 	and.w	r3, r3, #32
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d113      	bne.n	800d56a <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	f000 f8d0 	bl	800d6e8 <HAL_RTC_WaitForSynchro>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00d      	beq.n	800d56a <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	22ff      	movs	r2, #255	@ 0xff
 800d554:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2204      	movs	r2, #4
 800d55a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d566:	2301      	movs	r3, #1
 800d568:	e00c      	b.n	800d584 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	22ff      	movs	r2, #255	@ 0xff
 800d570:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2201      	movs	r2, #1
 800d576:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d582:	2300      	movs	r3, #0
  }
}
 800d584:	4618      	mov	r0, r3
 800d586:	371c      	adds	r7, #28
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd90      	pop	{r4, r7, pc}

0800d58c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d58c:	b590      	push	{r4, r7, lr}
 800d58e:	b087      	sub	sp, #28
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d101      	bne.n	800d5a6 <HAL_RTC_SetDate+0x1a>
 800d5a2:	2302      	movs	r3, #2
 800d5a4:	e09c      	b.n	800d6e0 <HAL_RTC_SetDate+0x154>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2202      	movs	r2, #2
 800d5b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10e      	bne.n	800d5da <HAL_RTC_SetDate+0x4e>
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	785b      	ldrb	r3, [r3, #1]
 800d5c0:	f003 0310 	and.w	r3, r3, #16
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d008      	beq.n	800d5da <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	785b      	ldrb	r3, [r3, #1]
 800d5cc:	f023 0310 	bic.w	r3, r3, #16
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	330a      	adds	r3, #10
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d11c      	bne.n	800d61a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	78db      	ldrb	r3, [r3, #3]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f000 f8cf 	bl	800d788 <RTC_ByteToBcd2>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	785b      	ldrb	r3, [r3, #1]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f000 f8c8 	bl	800d788 <RTC_ByteToBcd2>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d5fc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	789b      	ldrb	r3, [r3, #2]
 800d602:	4618      	mov	r0, r3
 800d604:	f000 f8c0 	bl	800d788 <RTC_ByteToBcd2>
 800d608:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d60a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d614:	4313      	orrs	r3, r2
 800d616:	617b      	str	r3, [r7, #20]
 800d618:	e00e      	b.n	800d638 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	78db      	ldrb	r3, [r3, #3]
 800d61e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	785b      	ldrb	r3, [r3, #1]
 800d624:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d626:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d628:	68ba      	ldr	r2, [r7, #8]
 800d62a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d62c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d634:	4313      	orrs	r3, r2
 800d636:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	22ca      	movs	r2, #202	@ 0xca
 800d63e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2253      	movs	r2, #83	@ 0x53
 800d646:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f000 f873 	bl	800d734 <RTC_EnterInitMode>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00d      	beq.n	800d670 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	22ff      	movs	r2, #255	@ 0xff
 800d65a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2204      	movs	r2, #4
 800d660:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2200      	movs	r2, #0
 800d668:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	e037      	b.n	800d6e0 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d67a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d67e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	68da      	ldr	r2, [r3, #12]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d68e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	f003 0320 	and.w	r3, r3, #32
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d113      	bne.n	800d6c6 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f000 f822 	bl	800d6e8 <HAL_RTC_WaitForSynchro>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00d      	beq.n	800d6c6 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	22ff      	movs	r2, #255	@ 0xff
 800d6b0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2204      	movs	r2, #4
 800d6b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e00c      	b.n	800d6e0 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	22ff      	movs	r2, #255	@ 0xff
 800d6cc:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d6de:	2300      	movs	r3, #0
  }
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	371c      	adds	r7, #28
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd90      	pop	{r4, r7, pc}

0800d6e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68da      	ldr	r2, [r3, #12]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800d6fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d700:	f7f9 fc90 	bl	8007024 <HAL_GetTick>
 800d704:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d706:	e009      	b.n	800d71c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d708:	f7f9 fc8c 	bl	8007024 <HAL_GetTick>
 800d70c:	4602      	mov	r2, r0
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	1ad3      	subs	r3, r2, r3
 800d712:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d716:	d901      	bls.n	800d71c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d718:	2303      	movs	r3, #3
 800d71a:	e007      	b.n	800d72c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	f003 0320 	and.w	r3, r3, #32
 800d726:	2b00      	cmp	r3, #0
 800d728:	d0ee      	beq.n	800d708 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d746:	2b00      	cmp	r3, #0
 800d748:	d119      	bne.n	800d77e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f04f 32ff 	mov.w	r2, #4294967295
 800d752:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d754:	f7f9 fc66 	bl	8007024 <HAL_GetTick>
 800d758:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d75a:	e009      	b.n	800d770 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d75c:	f7f9 fc62 	bl	8007024 <HAL_GetTick>
 800d760:	4602      	mov	r2, r0
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d76a:	d901      	bls.n	800d770 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800d76c:	2303      	movs	r3, #3
 800d76e:	e007      	b.n	800d780 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d0ee      	beq.n	800d75c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4603      	mov	r3, r0
 800d790:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d792:	2300      	movs	r3, #0
 800d794:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800d796:	79fb      	ldrb	r3, [r7, #7]
 800d798:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800d79a:	e005      	b.n	800d7a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800d7a2:	7afb      	ldrb	r3, [r7, #11]
 800d7a4:	3b0a      	subs	r3, #10
 800d7a6:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800d7a8:	7afb      	ldrb	r3, [r7, #11]
 800d7aa:	2b09      	cmp	r3, #9
 800d7ac:	d8f6      	bhi.n	800d79c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	011b      	lsls	r3, r3, #4
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	7afb      	ldrb	r3, [r7, #11]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	b2db      	uxtb	r3, r3
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3714      	adds	r7, #20
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d101      	bne.n	800d7e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800d7de:	2302      	movs	r3, #2
 800d7e0:	e0a8      	b.n	800d934 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	22ca      	movs	r2, #202	@ 0xca
 800d7f8:	625a      	str	r2, [r3, #36]	@ 0x24
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2253      	movs	r2, #83	@ 0x53
 800d800:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d020      	beq.n	800d852 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800d810:	f7f9 fc08 	bl	8007024 <HAL_GetTick>
 800d814:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d816:	e015      	b.n	800d844 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d818:	f7f9 fc04 	bl	8007024 <HAL_GetTick>
 800d81c:	4602      	mov	r2, r0
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d826:	d90d      	bls.n	800d844 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	22ff      	movs	r2, #255	@ 0xff
 800d82e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2203      	movs	r2, #3
 800d834:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d840:	2303      	movs	r3, #3
 800d842:	e077      	b.n	800d934 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	f003 0304 	and.w	r3, r3, #4
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1e2      	bne.n	800d818 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	689a      	ldr	r2, [r3, #8]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d860:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800d872:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d874:	f7f9 fbd6 	bl	8007024 <HAL_GetTick>
 800d878:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800d87a:	e015      	b.n	800d8a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d87c:	f7f9 fbd2 	bl	8007024 <HAL_GetTick>
 800d880:	4602      	mov	r2, r0
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d88a:	d90d      	bls.n	800d8a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	22ff      	movs	r2, #255	@ 0xff
 800d892:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2203      	movs	r2, #3
 800d898:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800d8a4:	2303      	movs	r3, #3
 800d8a6:	e045      	b.n	800d934 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	f003 0304 	and.w	r3, r3, #4
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d0e2      	beq.n	800d87c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	68ba      	ldr	r2, [r7, #8]
 800d8bc:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	689a      	ldr	r2, [r3, #8]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f022 0207 	bic.w	r2, r2, #7
 800d8cc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	6899      	ldr	r1, [r3, #8]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	430a      	orrs	r2, r1
 800d8dc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d8de:	4b17      	ldr	r3, [pc, #92]	@ (800d93c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8e4:	4a15      	ldr	r2, [pc, #84]	@ (800d93c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d8e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d8ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800d8ee:	4b13      	ldr	r3, [pc, #76]	@ (800d93c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a12      	ldr	r2, [pc, #72]	@ (800d93c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d8f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d8f8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	689a      	ldr	r2, [r3, #8]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d908:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	689a      	ldr	r2, [r3, #8]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d918:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	22ff      	movs	r2, #255	@ 0xff
 800d920:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2201      	movs	r2, #1
 800d926:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3718      	adds	r7, #24
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	58000800 	.word	0x58000800

0800d940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d101      	bne.n	800d952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d94e:	2301      	movs	r3, #1
 800d950:	e095      	b.n	800da7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d956:	2b00      	cmp	r3, #0
 800d958:	d108      	bne.n	800d96c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d962:	d009      	beq.n	800d978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	61da      	str	r2, [r3, #28]
 800d96a:	e005      	b.n	800d978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d984:	b2db      	uxtb	r3, r3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d106      	bne.n	800d998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2200      	movs	r2, #0
 800d98e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7f5 ff80 	bl	8003898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2202      	movs	r2, #2
 800d99c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d9ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d9b8:	d902      	bls.n	800d9c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	60fb      	str	r3, [r7, #12]
 800d9be:	e002      	b.n	800d9c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d9c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d9c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d9ce:	d007      	beq.n	800d9e0 <HAL_SPI_Init+0xa0>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d9d8:	d002      	beq.n	800d9e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d9f0:	431a      	orrs	r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	691b      	ldr	r3, [r3, #16]
 800d9f6:	f003 0302 	and.w	r3, r3, #2
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	695b      	ldr	r3, [r3, #20]
 800da00:	f003 0301 	and.w	r3, r3, #1
 800da04:	431a      	orrs	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da0e:	431a      	orrs	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	69db      	ldr	r3, [r3, #28]
 800da14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da18:	431a      	orrs	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da22:	ea42 0103 	orr.w	r1, r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	430a      	orrs	r2, r1
 800da34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	0c1b      	lsrs	r3, r3, #16
 800da3c:	f003 0204 	and.w	r2, r3, #4
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da44:	f003 0310 	and.w	r3, r3, #16
 800da48:	431a      	orrs	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da4e:	f003 0308 	and.w	r3, r3, #8
 800da52:	431a      	orrs	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800da5c:	ea42 0103 	orr.w	r1, r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	430a      	orrs	r2, r1
 800da6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
	...

0800da88 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	4613      	mov	r3, r2
 800da94:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d001      	beq.n	800daa6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800daa2:	2302      	movs	r3, #2
 800daa4:	e0d4      	b.n	800dc50 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d002      	beq.n	800dab2 <HAL_SPI_Transmit_DMA+0x2a>
 800daac:	88fb      	ldrh	r3, [r7, #6]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d101      	bne.n	800dab6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e0cc      	b.n	800dc50 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d101      	bne.n	800dac4 <HAL_SPI_Transmit_DMA+0x3c>
 800dac0:	2302      	movs	r3, #2
 800dac2:	e0c5      	b.n	800dc50 <HAL_SPI_Transmit_DMA+0x1c8>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2203      	movs	r2, #3
 800dad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	88fa      	ldrh	r2, [r7, #6]
 800dae4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	88fa      	ldrh	r2, [r7, #6]
 800daea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2200      	movs	r2, #0
 800daf6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2200      	movs	r2, #0
 800dafc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2200      	movs	r2, #0
 800db02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2200      	movs	r2, #0
 800db0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	689b      	ldr	r3, [r3, #8]
 800db12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db16:	d10f      	bne.n	800db38 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800db36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db3c:	4a46      	ldr	r2, [pc, #280]	@ (800dc58 <HAL_SPI_Transmit_DMA+0x1d0>)
 800db3e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db44:	4a45      	ldr	r2, [pc, #276]	@ (800dc5c <HAL_SPI_Transmit_DMA+0x1d4>)
 800db46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db4c:	4a44      	ldr	r2, [pc, #272]	@ (800dc60 <HAL_SPI_Transmit_DMA+0x1d8>)
 800db4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db54:	2200      	movs	r2, #0
 800db56:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	685a      	ldr	r2, [r3, #4]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800db66:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800db70:	d82d      	bhi.n	800dbce <HAL_SPI_Transmit_DMA+0x146>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db76:	699b      	ldr	r3, [r3, #24]
 800db78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db7c:	d127      	bne.n	800dbce <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db82:	b29b      	uxth	r3, r3
 800db84:	f003 0301 	and.w	r3, r3, #1
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10f      	bne.n	800dbac <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	685a      	ldr	r2, [r3, #4]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800db9a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	085b      	lsrs	r3, r3, #1
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dbaa:	e010      	b.n	800dbce <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dbba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	085b      	lsrs	r3, r3, #1
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	330c      	adds	r3, #12
 800dbde:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dbe4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dbe6:	f7fa fd99 	bl	800871c <HAL_DMA_Start_IT>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00b      	beq.n	800dc08 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dbf4:	f043 0210 	orr.w	r2, r3, #16
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800dc04:	2301      	movs	r3, #1
 800dc06:	e023      	b.n	800dc50 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc12:	2b40      	cmp	r3, #64	@ 0x40
 800dc14:	d007      	beq.n	800dc26 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc24:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	685a      	ldr	r2, [r3, #4]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f042 0220 	orr.w	r2, r2, #32
 800dc3c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f042 0202 	orr.w	r2, r2, #2
 800dc4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	0800e69f 	.word	0x0800e69f
 800dc5c:	0800e4c1 	.word	0x0800e4c1
 800dc60:	0800e6f3 	.word	0x0800e6f3

0800dc64 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d001      	beq.n	800dc82 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800dc7e:	2302      	movs	r3, #2
 800dc80:	e105      	b.n	800de8e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d002      	beq.n	800dc8e <HAL_SPI_Receive_DMA+0x2a>
 800dc88:	88fb      	ldrh	r3, [r7, #6]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e0fd      	b.n	800de8e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d110      	bne.n	800dcbc <HAL_SPI_Receive_DMA+0x58>
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dca2:	d10b      	bne.n	800dcbc <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2204      	movs	r2, #4
 800dca8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800dcac:	88fb      	ldrh	r3, [r7, #6]
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	68b9      	ldr	r1, [r7, #8]
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f000 f8f6 	bl	800dea4 <HAL_SPI_TransmitReceive_DMA>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	e0e8      	b.n	800de8e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d101      	bne.n	800dcca <HAL_SPI_Receive_DMA+0x66>
 800dcc6:	2302      	movs	r3, #2
 800dcc8:	e0e1      	b.n	800de8e <HAL_SPI_Receive_DMA+0x22a>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	88fa      	ldrh	r2, [r7, #6]
 800dcea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	88fa      	ldrh	r2, [r7, #6]
 800dcf2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2200      	movs	r2, #0
 800dd06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd16:	d10f      	bne.n	800dd38 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dd36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	685a      	ldr	r2, [r3, #4]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dd46:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dd50:	d908      	bls.n	800dd64 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	685a      	ldr	r2, [r3, #4]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dd60:	605a      	str	r2, [r3, #4]
 800dd62:	e042      	b.n	800ddea <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dd72:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd78:	699b      	ldr	r3, [r3, #24]
 800dd7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd7e:	d134      	bne.n	800ddea <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	685a      	ldr	r2, [r3, #4]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dd8e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	f003 0301 	and.w	r3, r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d111      	bne.n	800ddc4 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ddae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	085b      	lsrs	r3, r3, #1
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800ddc2:	e012      	b.n	800ddea <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	685a      	ldr	r2, [r3, #4]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ddd2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	085b      	lsrs	r3, r3, #1
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	3301      	adds	r3, #1
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddee:	4a2a      	ldr	r2, [pc, #168]	@ (800de98 <HAL_SPI_Receive_DMA+0x234>)
 800ddf0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddf6:	4a29      	ldr	r2, [pc, #164]	@ (800de9c <HAL_SPI_Receive_DMA+0x238>)
 800ddf8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddfe:	4a28      	ldr	r2, [pc, #160]	@ (800dea0 <HAL_SPI_Receive_DMA+0x23c>)
 800de00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de06:	2200      	movs	r2, #0
 800de08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	330c      	adds	r3, #12
 800de14:	4619      	mov	r1, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de1a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800de22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800de24:	f7fa fc7a 	bl	800871c <HAL_DMA_Start_IT>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00b      	beq.n	800de46 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de32:	f043 0210 	orr.w	r2, r3, #16
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2200      	movs	r2, #0
 800de3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	e023      	b.n	800de8e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de50:	2b40      	cmp	r3, #64	@ 0x40
 800de52:	d007      	beq.n	800de64 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800de62:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2200      	movs	r2, #0
 800de68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f042 0220 	orr.w	r2, r2, #32
 800de7a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	685a      	ldr	r2, [r3, #4]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f042 0201 	orr.w	r2, r2, #1
 800de8a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800de8c:	2300      	movs	r3, #0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3710      	adds	r7, #16
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	0800e6bb 	.word	0x0800e6bb
 800de9c:	0800e567 	.word	0x0800e567
 800dea0:	0800e6f3 	.word	0x0800e6f3

0800dea4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
 800deb0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800deb8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d00c      	beq.n	800dee0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800decc:	d106      	bne.n	800dedc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d102      	bne.n	800dedc <HAL_SPI_TransmitReceive_DMA+0x38>
 800ded6:	7dfb      	ldrb	r3, [r7, #23]
 800ded8:	2b04      	cmp	r3, #4
 800deda:	d001      	beq.n	800dee0 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800dedc:	2302      	movs	r3, #2
 800dede:	e158      	b.n	800e192 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d005      	beq.n	800def2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800deec:	887b      	ldrh	r3, [r7, #2]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d101      	bne.n	800def6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	e14d      	b.n	800e192 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800defc:	2b01      	cmp	r3, #1
 800defe:	d101      	bne.n	800df04 <HAL_SPI_TransmitReceive_DMA+0x60>
 800df00:	2302      	movs	r3, #2
 800df02:	e146      	b.n	800e192 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2201      	movs	r2, #1
 800df08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b04      	cmp	r3, #4
 800df16:	d003      	beq.n	800df20 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2205      	movs	r2, #5
 800df1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2200      	movs	r2, #0
 800df24:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	887a      	ldrh	r2, [r7, #2]
 800df30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	887a      	ldrh	r2, [r7, #2]
 800df36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	887a      	ldrh	r2, [r7, #2]
 800df42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	887a      	ldrh	r2, [r7, #2]
 800df4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2200      	movs	r2, #0
 800df58:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	685a      	ldr	r2, [r3, #4]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800df68:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800df72:	d908      	bls.n	800df86 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800df82:	605a      	str	r2, [r3, #4]
 800df84:	e06f      	b.n	800e066 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800df94:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df9a:	699b      	ldr	r3, [r3, #24]
 800df9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfa0:	d126      	bne.n	800dff0 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800dfa6:	f003 0301 	and.w	r3, r3, #1
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d10f      	bne.n	800dfce <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	685a      	ldr	r2, [r3, #4]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dfbc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	085b      	lsrs	r3, r3, #1
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dfcc:	e010      	b.n	800dff0 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dfdc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	085b      	lsrs	r3, r3, #1
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	3301      	adds	r3, #1
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dff4:	699b      	ldr	r3, [r3, #24]
 800dff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dffa:	d134      	bne.n	800e066 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	685a      	ldr	r2, [r3, #4]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e00a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e012:	b29b      	uxth	r3, r3
 800e014:	f003 0301 	and.w	r3, r3, #1
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d111      	bne.n	800e040 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	685a      	ldr	r2, [r3, #4]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e02a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e032:	b29b      	uxth	r3, r3
 800e034:	085b      	lsrs	r3, r3, #1
 800e036:	b29a      	uxth	r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e03e:	e012      	b.n	800e066 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e04e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e056:	b29b      	uxth	r3, r3
 800e058:	085b      	lsrs	r3, r3, #1
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	3301      	adds	r3, #1
 800e05e:	b29a      	uxth	r2, r3
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	2b04      	cmp	r3, #4
 800e070:	d108      	bne.n	800e084 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e076:	4a49      	ldr	r2, [pc, #292]	@ (800e19c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800e078:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e07e:	4a48      	ldr	r2, [pc, #288]	@ (800e1a0 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800e080:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e082:	e007      	b.n	800e094 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e088:	4a46      	ldr	r2, [pc, #280]	@ (800e1a4 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800e08a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e090:	4a45      	ldr	r2, [pc, #276]	@ (800e1a8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e092:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e098:	4a44      	ldr	r2, [pc, #272]	@ (800e1ac <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e09a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	330c      	adds	r3, #12
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0b4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e0bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e0be:	f7fa fb2d 	bl	800871c <HAL_DMA_Start_IT>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00b      	beq.n	800e0e0 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0cc:	f043 0210 	orr.w	r2, r3, #16
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e058      	b.n	800e192 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	685a      	ldr	r2, [r3, #4]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f042 0201 	orr.w	r2, r2, #1
 800e0ee:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e104:	2200      	movs	r2, #0
 800e106:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e10c:	2200      	movs	r2, #0
 800e10e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e118:	4619      	mov	r1, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	330c      	adds	r3, #12
 800e120:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e126:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e128:	f7fa faf8 	bl	800871c <HAL_DMA_Start_IT>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00b      	beq.n	800e14a <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e136:	f043 0210 	orr.w	r2, r3, #16
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e146:	2301      	movs	r3, #1
 800e148:	e023      	b.n	800e192 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e154:	2b40      	cmp	r3, #64	@ 0x40
 800e156:	d007      	beq.n	800e168 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e166:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f042 0220 	orr.w	r2, r2, #32
 800e17e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	685a      	ldr	r2, [r3, #4]
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f042 0202 	orr.w	r2, r2, #2
 800e18e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3718      	adds	r7, #24
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	0800e6bb 	.word	0x0800e6bb
 800e1a0:	0800e567 	.word	0x0800e567
 800e1a4:	0800e6d7 	.word	0x0800e6d7
 800e1a8:	0800e60f 	.word	0x0800e60f
 800e1ac:	0800e6f3 	.word	0x0800e6f3

0800e1b0 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00f      	beq.n	800e1e4 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7fa fb22 	bl	8008812 <HAL_DMA_Abort>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d007      	beq.n	800e1e4 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1d8:	f043 0210 	orr.w	r2, r3, #16
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00f      	beq.n	800e20c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fa fb0e 	bl	8008812 <HAL_DMA_Abort>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d007      	beq.n	800e20c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e200:	f043 0210 	orr.w	r2, r3, #16
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800e208:	2301      	movs	r3, #1
 800e20a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f022 0203 	bic.w	r2, r2, #3
 800e21a:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 800e224:	7bfb      	ldrb	r3, [r7, #15]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
	...

0800e230 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b088      	sub	sp, #32
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10e      	bne.n	800e270 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d009      	beq.n	800e270 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e262:	2b00      	cmp	r3, #0
 800e264:	d004      	beq.n	800e270 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	4798      	blx	r3
    return;
 800e26e:	e0ce      	b.n	800e40e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	f003 0302 	and.w	r3, r3, #2
 800e276:	2b00      	cmp	r3, #0
 800e278:	d009      	beq.n	800e28e <HAL_SPI_IRQHandler+0x5e>
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e280:	2b00      	cmp	r3, #0
 800e282:	d004      	beq.n	800e28e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	4798      	blx	r3
    return;
 800e28c:	e0bf      	b.n	800e40e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	f003 0320 	and.w	r3, r3, #32
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10a      	bne.n	800e2ae <HAL_SPI_IRQHandler+0x7e>
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d105      	bne.n	800e2ae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	f000 80b0 	beq.w	800e40e <HAL_SPI_IRQHandler+0x1de>
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	f003 0320 	and.w	r3, r3, #32
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f000 80aa 	beq.w	800e40e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d023      	beq.n	800e30c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	2b03      	cmp	r3, #3
 800e2ce:	d011      	beq.n	800e2f4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2d4:	f043 0204 	orr.w	r2, r3, #4
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e2dc:	2300      	movs	r3, #0
 800e2de:	617b      	str	r3, [r7, #20]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	617b      	str	r3, [r7, #20]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	617b      	str	r3, [r7, #20]
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	e00b      	b.n	800e30c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	613b      	str	r3, [r7, #16]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	613b      	str	r3, [r7, #16]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	613b      	str	r3, [r7, #16]
 800e308:	693b      	ldr	r3, [r7, #16]
        return;
 800e30a:	e080      	b.n	800e40e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	f003 0320 	and.w	r3, r3, #32
 800e312:	2b00      	cmp	r3, #0
 800e314:	d014      	beq.n	800e340 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e31a:	f043 0201 	orr.w	r2, r3, #1
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e322:	2300      	movs	r3, #0
 800e324:	60fb      	str	r3, [r7, #12]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e33c:	601a      	str	r2, [r3, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00c      	beq.n	800e364 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e34e:	f043 0208 	orr.w	r2, r3, #8
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e356:	2300      	movs	r3, #0
 800e358:	60bb      	str	r3, [r7, #8]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	60bb      	str	r3, [r7, #8]
 800e362:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d04f      	beq.n	800e40c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	685a      	ldr	r2, [r3, #4]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e37a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	f003 0302 	and.w	r3, r3, #2
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d104      	bne.n	800e398 <HAL_SPI_IRQHandler+0x168>
 800e38e:	69fb      	ldr	r3, [r7, #28]
 800e390:	f003 0301 	and.w	r3, r3, #1
 800e394:	2b00      	cmp	r3, #0
 800e396:	d034      	beq.n	800e402 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	685a      	ldr	r2, [r3, #4]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f022 0203 	bic.w	r2, r2, #3
 800e3a6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d011      	beq.n	800e3d4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3b4:	4a17      	ldr	r2, [pc, #92]	@ (800e414 <HAL_SPI_IRQHandler+0x1e4>)
 800e3b6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7fa fa87 	bl	80088d0 <HAL_DMA_Abort_IT>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d005      	beq.n	800e3d4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e3cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d016      	beq.n	800e40a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3e0:	4a0c      	ldr	r2, [pc, #48]	@ (800e414 <HAL_SPI_IRQHandler+0x1e4>)
 800e3e2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fa fa71 	bl	80088d0 <HAL_DMA_Abort_IT>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00a      	beq.n	800e40a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e3f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800e400:	e003      	b.n	800e40a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f844 	bl	800e490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e408:	e000      	b.n	800e40c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800e40a:	bf00      	nop
    return;
 800e40c:	bf00      	nop
  }
}
 800e40e:	3720      	adds	r7, #32
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	0800e733 	.word	0x0800e733

0800e418 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e434:	bf00      	nop
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e448:	bf00      	nop
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e45c:	bf00      	nop
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e484:	bf00      	nop
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e498:	bf00      	nop
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e4b2:	b2db      	uxtb	r3, r3
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4ce:	f7f8 fda9 	bl	8007024 <HAL_GetTick>
 800e4d2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f003 0320 	and.w	r3, r3, #32
 800e4de:	2b20      	cmp	r3, #32
 800e4e0:	d03b      	beq.n	800e55a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	685a      	ldr	r2, [r3, #4]
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f022 0220 	bic.w	r2, r2, #32
 800e4f0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	685a      	ldr	r2, [r3, #4]
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f022 0202 	bic.w	r2, r2, #2
 800e500:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e502:	693a      	ldr	r2, [r7, #16]
 800e504:	2164      	movs	r1, #100	@ 0x64
 800e506:	6978      	ldr	r0, [r7, #20]
 800e508:	f000 fa9e 	bl	800ea48 <SPI_EndRxTxTransaction>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d005      	beq.n	800e51e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e516:	f043 0220 	orr.w	r2, r3, #32
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10a      	bne.n	800e53c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e526:	2300      	movs	r3, #0
 800e528:	60fb      	str	r3, [r7, #12]
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	60fb      	str	r3, [r7, #12]
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	60fb      	str	r3, [r7, #12]
 800e53a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	2200      	movs	r2, #0
 800e540:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	2201      	movs	r2, #1
 800e546:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d003      	beq.n	800e55a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e552:	6978      	ldr	r0, [r7, #20]
 800e554:	f7ff ff9c 	bl	800e490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e558:	e002      	b.n	800e560 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e55a:	6978      	ldr	r0, [r7, #20]
 800e55c:	f7ff ff5c 	bl	800e418 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e560:	3718      	adds	r7, #24
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e566:	b580      	push	{r7, lr}
 800e568:	b084      	sub	sp, #16
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e572:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e574:	f7f8 fd56 	bl	8007024 <HAL_GetTick>
 800e578:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f003 0320 	and.w	r3, r3, #32
 800e584:	2b20      	cmp	r3, #32
 800e586:	d03c      	beq.n	800e602 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	685a      	ldr	r2, [r3, #4]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f022 0220 	bic.w	r2, r2, #32
 800e596:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d10d      	bne.n	800e5bc <SPI_DMAReceiveCplt+0x56>
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e5a8:	d108      	bne.n	800e5bc <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	685a      	ldr	r2, [r3, #4]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f022 0203 	bic.w	r2, r2, #3
 800e5b8:	605a      	str	r2, [r3, #4]
 800e5ba:	e007      	b.n	800e5cc <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f022 0201 	bic.w	r2, r2, #1
 800e5ca:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	2164      	movs	r1, #100	@ 0x64
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	f000 f9e1 	bl	800e998 <SPI_EndRxTransaction>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2220      	movs	r2, #32
 800e5e0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d003      	beq.n	800e602 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f7ff ff48 	bl	800e490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e600:	e002      	b.n	800e608 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e602:	68f8      	ldr	r0, [r7, #12]
 800e604:	f7ff ff12 	bl	800e42c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}

0800e60e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e60e:	b580      	push	{r7, lr}
 800e610:	b084      	sub	sp, #16
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e61a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e61c:	f7f8 fd02 	bl	8007024 <HAL_GetTick>
 800e620:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f003 0320 	and.w	r3, r3, #32
 800e62c:	2b20      	cmp	r3, #32
 800e62e:	d030      	beq.n	800e692 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	685a      	ldr	r2, [r3, #4]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f022 0220 	bic.w	r2, r2, #32
 800e63e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	2164      	movs	r1, #100	@ 0x64
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f000 f9ff 	bl	800ea48 <SPI_EndRxTxTransaction>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d005      	beq.n	800e65c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e654:	f043 0220 	orr.w	r2, r3, #32
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f022 0203 	bic.w	r2, r2, #3
 800e66a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2200      	movs	r2, #0
 800e670:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e686:	2b00      	cmp	r3, #0
 800e688:	d003      	beq.n	800e692 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f7ff ff00 	bl	800e490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e690:	e002      	b.n	800e698 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f7ff fed4 	bl	800e440 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b084      	sub	sp, #16
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6aa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e6ac:	68f8      	ldr	r0, [r7, #12]
 800e6ae:	f7ff fed1 	bl	800e454 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e6b2:	bf00      	nop
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b084      	sub	sp, #16
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6c6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7ff fecd 	bl	800e468 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e6ce:	bf00      	nop
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b084      	sub	sp, #16
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e2:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	f7ff fec9 	bl	800e47c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e6ea:	bf00      	nop
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b084      	sub	sp, #16
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6fe:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	685a      	ldr	r2, [r3, #4]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f022 0203 	bic.w	r2, r2, #3
 800e70e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e714:	f043 0210 	orr.w	r2, r3, #16
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f7ff feb3 	bl	800e490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e72a:	bf00      	nop
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e73e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2200      	movs	r2, #0
 800e744:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f7ff fe9e 	bl	800e490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e754:	bf00      	nop
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b088      	sub	sp, #32
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	4613      	mov	r3, r2
 800e76a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e76c:	f7f8 fc5a 	bl	8007024 <HAL_GetTick>
 800e770:	4602      	mov	r2, r0
 800e772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e774:	1a9b      	subs	r3, r3, r2
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	4413      	add	r3, r2
 800e77a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e77c:	f7f8 fc52 	bl	8007024 <HAL_GetTick>
 800e780:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e782:	4b39      	ldr	r3, [pc, #228]	@ (800e868 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	015b      	lsls	r3, r3, #5
 800e788:	0d1b      	lsrs	r3, r3, #20
 800e78a:	69fa      	ldr	r2, [r7, #28]
 800e78c:	fb02 f303 	mul.w	r3, r2, r3
 800e790:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e792:	e054      	b.n	800e83e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79a:	d050      	beq.n	800e83e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e79c:	f7f8 fc42 	bl	8007024 <HAL_GetTick>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	1ad3      	subs	r3, r2, r3
 800e7a6:	69fa      	ldr	r2, [r7, #28]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d902      	bls.n	800e7b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d13d      	bne.n	800e82e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e7c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e7ca:	d111      	bne.n	800e7f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e7d4:	d004      	beq.n	800e7e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7de:	d107      	bne.n	800e7f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e7ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e7f8:	d10f      	bne.n	800e81a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e808:	601a      	str	r2, [r3, #0]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2201      	movs	r2, #1
 800e81e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e82a:	2303      	movs	r3, #3
 800e82c:	e017      	b.n	800e85e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e834:	2300      	movs	r3, #0
 800e836:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	3b01      	subs	r3, #1
 800e83c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	689a      	ldr	r2, [r3, #8]
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	4013      	ands	r3, r2
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	bf0c      	ite	eq
 800e84e:	2301      	moveq	r3, #1
 800e850:	2300      	movne	r3, #0
 800e852:	b2db      	uxtb	r3, r3
 800e854:	461a      	mov	r2, r3
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d19b      	bne.n	800e794 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3720      	adds	r7, #32
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	2000002c 	.word	0x2000002c

0800e86c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08a      	sub	sp, #40	@ 0x28
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e87a:	2300      	movs	r3, #0
 800e87c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e87e:	f7f8 fbd1 	bl	8007024 <HAL_GetTick>
 800e882:	4602      	mov	r2, r0
 800e884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e886:	1a9b      	subs	r3, r3, r2
 800e888:	683a      	ldr	r2, [r7, #0]
 800e88a:	4413      	add	r3, r2
 800e88c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800e88e:	f7f8 fbc9 	bl	8007024 <HAL_GetTick>
 800e892:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	330c      	adds	r3, #12
 800e89a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e89c:	4b3d      	ldr	r3, [pc, #244]	@ (800e994 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	4413      	add	r3, r2
 800e8a6:	00da      	lsls	r2, r3, #3
 800e8a8:	1ad3      	subs	r3, r2, r3
 800e8aa:	0d1b      	lsrs	r3, r3, #20
 800e8ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8ae:	fb02 f303 	mul.w	r3, r2, r3
 800e8b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e8b4:	e060      	b.n	800e978 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e8bc:	d107      	bne.n	800e8ce <SPI_WaitFifoStateUntilTimeout+0x62>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d104      	bne.n	800e8ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d4:	d050      	beq.n	800e978 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e8d6:	f7f8 fba5 	bl	8007024 <HAL_GetTick>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d902      	bls.n	800e8ec <SPI_WaitFifoStateUntilTimeout+0x80>
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d13d      	bne.n	800e968 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	685a      	ldr	r2, [r3, #4]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e8fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e904:	d111      	bne.n	800e92a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e90e:	d004      	beq.n	800e91a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e918:	d107      	bne.n	800e92a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e928:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e92e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e932:	d10f      	bne.n	800e954 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e952:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2200      	movs	r2, #0
 800e960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e964:	2303      	movs	r3, #3
 800e966:	e010      	b.n	800e98a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d101      	bne.n	800e972 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e96e:	2300      	movs	r3, #0
 800e970:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	3b01      	subs	r3, #1
 800e976:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	689a      	ldr	r2, [r3, #8]
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	4013      	ands	r3, r2
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	429a      	cmp	r2, r3
 800e986:	d196      	bne.n	800e8b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3728      	adds	r7, #40	@ 0x28
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	2000002c 	.word	0x2000002c

0800e998 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af02      	add	r7, sp, #8
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e9ac:	d111      	bne.n	800e9d2 <SPI_EndRxTransaction+0x3a>
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9b6:	d004      	beq.n	800e9c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e9c0:	d107      	bne.n	800e9d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e9d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	9300      	str	r3, [sp, #0]
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2180      	movs	r1, #128	@ 0x80
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f7ff febd 	bl	800e75c <SPI_WaitFlagStateUntilTimeout>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d007      	beq.n	800e9f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9ec:	f043 0220 	orr.w	r2, r3, #32
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e9f4:	2303      	movs	r3, #3
 800e9f6:	e023      	b.n	800ea40 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ea00:	d11d      	bne.n	800ea3e <SPI_EndRxTransaction+0xa6>
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea0a:	d004      	beq.n	800ea16 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea14:	d113      	bne.n	800ea3e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	9300      	str	r3, [sp, #0]
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f7ff ff22 	bl	800e86c <SPI_WaitFifoStateUntilTimeout>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d007      	beq.n	800ea3e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea32:	f043 0220 	orr.w	r2, r3, #32
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ea3a:	2303      	movs	r3, #3
 800ea3c:	e000      	b.n	800ea40 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b086      	sub	sp, #24
 800ea4c:	af02      	add	r7, sp, #8
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f7ff ff03 	bl	800e86c <SPI_WaitFifoStateUntilTimeout>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d007      	beq.n	800ea7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea70:	f043 0220 	orr.w	r2, r3, #32
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ea78:	2303      	movs	r3, #3
 800ea7a:	e027      	b.n	800eacc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	9300      	str	r3, [sp, #0]
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	2200      	movs	r2, #0
 800ea84:	2180      	movs	r1, #128	@ 0x80
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	f7ff fe68 	bl	800e75c <SPI_WaitFlagStateUntilTimeout>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d007      	beq.n	800eaa2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea96:	f043 0220 	orr.w	r2, r3, #32
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ea9e:	2303      	movs	r3, #3
 800eaa0:	e014      	b.n	800eacc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800eaae:	68f8      	ldr	r0, [r7, #12]
 800eab0:	f7ff fedc 	bl	800e86c <SPI_WaitFifoStateUntilTimeout>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d007      	beq.n	800eaca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eabe:	f043 0220 	orr.w	r2, r3, #32
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800eac6:	2303      	movs	r3, #3
 800eac8:	e000      	b.n	800eacc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d101      	bne.n	800eae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eae2:	2301      	movs	r3, #1
 800eae4:	e049      	b.n	800eb7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d106      	bne.n	800eb00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7f7 fdd2 	bl	80066a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2202      	movs	r2, #2
 800eb04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	3304      	adds	r3, #4
 800eb10:	4619      	mov	r1, r3
 800eb12:	4610      	mov	r0, r2
 800eb14:	f000 fafc 	bl	800f110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eb78:	2300      	movs	r3, #0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
	...

0800eb84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d001      	beq.n	800eb9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e02e      	b.n	800ebfa <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2202      	movs	r2, #2
 800eba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a17      	ldr	r2, [pc, #92]	@ (800ec08 <HAL_TIM_Base_Start+0x84>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d004      	beq.n	800ebb8 <HAL_TIM_Base_Start+0x34>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebb6:	d115      	bne.n	800ebe4 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	689a      	ldr	r2, [r3, #8]
 800ebbe:	4b13      	ldr	r3, [pc, #76]	@ (800ec0c <HAL_TIM_Base_Start+0x88>)
 800ebc0:	4013      	ands	r3, r2
 800ebc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b06      	cmp	r3, #6
 800ebc8:	d015      	beq.n	800ebf6 <HAL_TIM_Base_Start+0x72>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebd0:	d011      	beq.n	800ebf6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	681a      	ldr	r2, [r3, #0]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f042 0201 	orr.w	r2, r2, #1
 800ebe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebe2:	e008      	b.n	800ebf6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f042 0201 	orr.w	r2, r2, #1
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	e000      	b.n	800ebf8 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ebf8:	2300      	movs	r3, #0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3714      	adds	r7, #20
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop
 800ec08:	40012c00 	.word	0x40012c00
 800ec0c:	00010007 	.word	0x00010007

0800ec10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d001      	beq.n	800ec28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	e036      	b.n	800ec96 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2202      	movs	r2, #2
 800ec2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	68da      	ldr	r2, [r3, #12]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f042 0201 	orr.w	r2, r2, #1
 800ec3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a17      	ldr	r2, [pc, #92]	@ (800eca4 <HAL_TIM_Base_Start_IT+0x94>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d004      	beq.n	800ec54 <HAL_TIM_Base_Start_IT+0x44>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec52:	d115      	bne.n	800ec80 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	689a      	ldr	r2, [r3, #8]
 800ec5a:	4b13      	ldr	r3, [pc, #76]	@ (800eca8 <HAL_TIM_Base_Start_IT+0x98>)
 800ec5c:	4013      	ands	r3, r2
 800ec5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2b06      	cmp	r3, #6
 800ec64:	d015      	beq.n	800ec92 <HAL_TIM_Base_Start_IT+0x82>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec6c:	d011      	beq.n	800ec92 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f042 0201 	orr.w	r2, r2, #1
 800ec7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec7e:	e008      	b.n	800ec92 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f042 0201 	orr.w	r2, r2, #1
 800ec8e:	601a      	str	r2, [r3, #0]
 800ec90:	e000      	b.n	800ec94 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec94:	2300      	movs	r3, #0
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3714      	adds	r7, #20
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	40012c00 	.word	0x40012c00
 800eca8:	00010007 	.word	0x00010007

0800ecac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68da      	ldr	r2, [r3, #12]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f022 0201 	bic.w	r2, r2, #1
 800ecc2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6a1a      	ldr	r2, [r3, #32]
 800ecca:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ecce:	4013      	ands	r3, r2
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10f      	bne.n	800ecf4 <HAL_TIM_Base_Stop_IT+0x48>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6a1a      	ldr	r2, [r3, #32]
 800ecda:	f240 4344 	movw	r3, #1092	@ 0x444
 800ecde:	4013      	ands	r3, r2
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d107      	bne.n	800ecf4 <HAL_TIM_Base_Stop_IT+0x48>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f022 0201 	bic.w	r2, r2, #1
 800ecf2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b084      	sub	sp, #16
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	691b      	ldr	r3, [r3, #16]
 800ed20:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	f003 0302 	and.w	r3, r3, #2
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d020      	beq.n	800ed6e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f003 0302 	and.w	r3, r3, #2
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d01b      	beq.n	800ed6e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f06f 0202 	mvn.w	r2, #2
 800ed3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2201      	movs	r2, #1
 800ed44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	699b      	ldr	r3, [r3, #24]
 800ed4c:	f003 0303 	and.w	r3, r3, #3
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d003      	beq.n	800ed5c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 f9bc 	bl	800f0d2 <HAL_TIM_IC_CaptureCallback>
 800ed5a:	e005      	b.n	800ed68 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 f9ae 	bl	800f0be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 f9bf 	bl	800f0e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	f003 0304 	and.w	r3, r3, #4
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d020      	beq.n	800edba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f003 0304 	and.w	r3, r3, #4
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d01b      	beq.n	800edba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f06f 0204 	mvn.w	r2, #4
 800ed8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2202      	movs	r2, #2
 800ed90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	699b      	ldr	r3, [r3, #24]
 800ed98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d003      	beq.n	800eda8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 f996 	bl	800f0d2 <HAL_TIM_IC_CaptureCallback>
 800eda6:	e005      	b.n	800edb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 f988 	bl	800f0be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f999 	bl	800f0e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	f003 0308 	and.w	r3, r3, #8
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d020      	beq.n	800ee06 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f003 0308 	and.w	r3, r3, #8
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d01b      	beq.n	800ee06 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f06f 0208 	mvn.w	r2, #8
 800edd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2204      	movs	r2, #4
 800eddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	69db      	ldr	r3, [r3, #28]
 800ede4:	f003 0303 	and.w	r3, r3, #3
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d003      	beq.n	800edf4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 f970 	bl	800f0d2 <HAL_TIM_IC_CaptureCallback>
 800edf2:	e005      	b.n	800ee00 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f962 	bl	800f0be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 f973 	bl	800f0e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	f003 0310 	and.w	r3, r3, #16
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d020      	beq.n	800ee52 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f003 0310 	and.w	r3, r3, #16
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d01b      	beq.n	800ee52 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f06f 0210 	mvn.w	r2, #16
 800ee22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2208      	movs	r2, #8
 800ee28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	69db      	ldr	r3, [r3, #28]
 800ee30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d003      	beq.n	800ee40 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 f94a 	bl	800f0d2 <HAL_TIM_IC_CaptureCallback>
 800ee3e:	e005      	b.n	800ee4c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 f93c 	bl	800f0be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 f94d 	bl	800f0e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	f003 0301 	and.w	r3, r3, #1
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00c      	beq.n	800ee76 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f003 0301 	and.w	r3, r3, #1
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d007      	beq.n	800ee76 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f06f 0201 	mvn.w	r2, #1
 800ee6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 f91a 	bl	800f0aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d104      	bne.n	800ee8a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00c      	beq.n	800eea4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d007      	beq.n	800eea4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ee9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 faac 	bl	800f3fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00c      	beq.n	800eec8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d007      	beq.n	800eec8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800eec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 faa4 	bl	800f410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00c      	beq.n	800eeec <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d007      	beq.n	800eeec <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800eee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f907 	bl	800f0fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	f003 0320 	and.w	r3, r3, #32
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00c      	beq.n	800ef10 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f003 0320 	and.w	r3, r3, #32
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d007      	beq.n	800ef10 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f06f 0220 	mvn.w	r2, #32
 800ef08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fa6c 	bl	800f3e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef10:	bf00      	nop
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef22:	2300      	movs	r3, #0
 800ef24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d101      	bne.n	800ef34 <HAL_TIM_ConfigClockSource+0x1c>
 800ef30:	2302      	movs	r3, #2
 800ef32:	e0b6      	b.n	800f0a2 <HAL_TIM_ConfigClockSource+0x18a>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2202      	movs	r2, #2
 800ef40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ef52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ef56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ef5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	68ba      	ldr	r2, [r7, #8]
 800ef66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ef70:	d03e      	beq.n	800eff0 <HAL_TIM_ConfigClockSource+0xd8>
 800ef72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ef76:	f200 8087 	bhi.w	800f088 <HAL_TIM_ConfigClockSource+0x170>
 800ef7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef7e:	f000 8086 	beq.w	800f08e <HAL_TIM_ConfigClockSource+0x176>
 800ef82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef86:	d87f      	bhi.n	800f088 <HAL_TIM_ConfigClockSource+0x170>
 800ef88:	2b70      	cmp	r3, #112	@ 0x70
 800ef8a:	d01a      	beq.n	800efc2 <HAL_TIM_ConfigClockSource+0xaa>
 800ef8c:	2b70      	cmp	r3, #112	@ 0x70
 800ef8e:	d87b      	bhi.n	800f088 <HAL_TIM_ConfigClockSource+0x170>
 800ef90:	2b60      	cmp	r3, #96	@ 0x60
 800ef92:	d050      	beq.n	800f036 <HAL_TIM_ConfigClockSource+0x11e>
 800ef94:	2b60      	cmp	r3, #96	@ 0x60
 800ef96:	d877      	bhi.n	800f088 <HAL_TIM_ConfigClockSource+0x170>
 800ef98:	2b50      	cmp	r3, #80	@ 0x50
 800ef9a:	d03c      	beq.n	800f016 <HAL_TIM_ConfigClockSource+0xfe>
 800ef9c:	2b50      	cmp	r3, #80	@ 0x50
 800ef9e:	d873      	bhi.n	800f088 <HAL_TIM_ConfigClockSource+0x170>
 800efa0:	2b40      	cmp	r3, #64	@ 0x40
 800efa2:	d058      	beq.n	800f056 <HAL_TIM_ConfigClockSource+0x13e>
 800efa4:	2b40      	cmp	r3, #64	@ 0x40
 800efa6:	d86f      	bhi.n	800f088 <HAL_TIM_ConfigClockSource+0x170>
 800efa8:	2b30      	cmp	r3, #48	@ 0x30
 800efaa:	d064      	beq.n	800f076 <HAL_TIM_ConfigClockSource+0x15e>
 800efac:	2b30      	cmp	r3, #48	@ 0x30
 800efae:	d86b      	bhi.n	800f088 <HAL_TIM_ConfigClockSource+0x170>
 800efb0:	2b20      	cmp	r3, #32
 800efb2:	d060      	beq.n	800f076 <HAL_TIM_ConfigClockSource+0x15e>
 800efb4:	2b20      	cmp	r3, #32
 800efb6:	d867      	bhi.n	800f088 <HAL_TIM_ConfigClockSource+0x170>
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d05c      	beq.n	800f076 <HAL_TIM_ConfigClockSource+0x15e>
 800efbc:	2b10      	cmp	r3, #16
 800efbe:	d05a      	beq.n	800f076 <HAL_TIM_ConfigClockSource+0x15e>
 800efc0:	e062      	b.n	800f088 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800efd2:	f000 f989 	bl	800f2e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800efe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	609a      	str	r2, [r3, #8]
      break;
 800efee:	e04f      	b.n	800f090 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f000:	f000 f972 	bl	800f2e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	689a      	ldr	r2, [r3, #8]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f012:	609a      	str	r2, [r3, #8]
      break;
 800f014:	e03c      	b.n	800f090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f022:	461a      	mov	r2, r3
 800f024:	f000 f8e4 	bl	800f1f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	2150      	movs	r1, #80	@ 0x50
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 f93d 	bl	800f2ae <TIM_ITRx_SetConfig>
      break;
 800f034:	e02c      	b.n	800f090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f042:	461a      	mov	r2, r3
 800f044:	f000 f903 	bl	800f24e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2160      	movs	r1, #96	@ 0x60
 800f04e:	4618      	mov	r0, r3
 800f050:	f000 f92d 	bl	800f2ae <TIM_ITRx_SetConfig>
      break;
 800f054:	e01c      	b.n	800f090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f062:	461a      	mov	r2, r3
 800f064:	f000 f8c4 	bl	800f1f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2140      	movs	r1, #64	@ 0x40
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 f91d 	bl	800f2ae <TIM_ITRx_SetConfig>
      break;
 800f074:	e00c      	b.n	800f090 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	4619      	mov	r1, r3
 800f080:	4610      	mov	r0, r2
 800f082:	f000 f914 	bl	800f2ae <TIM_ITRx_SetConfig>
      break;
 800f086:	e003      	b.n	800f090 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f088:	2301      	movs	r3, #1
 800f08a:	73fb      	strb	r3, [r7, #15]
      break;
 800f08c:	e000      	b.n	800f090 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f08e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2201      	movs	r2, #1
 800f094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f0aa:	b480      	push	{r7}
 800f0ac:	b083      	sub	sp, #12
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f0b2:	bf00      	nop
 800f0b4:	370c      	adds	r7, #12
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b083      	sub	sp, #12
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f0c6:	bf00      	nop
 800f0c8:	370c      	adds	r7, #12
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr

0800f0d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f0d2:	b480      	push	{r7}
 800f0d4:	b083      	sub	sp, #12
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f0da:	bf00      	nop
 800f0dc:	370c      	adds	r7, #12
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr

0800f0e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f0e6:	b480      	push	{r7}
 800f0e8:	b083      	sub	sp, #12
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f0ee:	bf00      	nop
 800f0f0:	370c      	adds	r7, #12
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr

0800f0fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f0fa:	b480      	push	{r7}
 800f0fc:	b083      	sub	sp, #12
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f102:	bf00      	nop
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
	...

0800f110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4a30      	ldr	r2, [pc, #192]	@ (800f1e4 <TIM_Base_SetConfig+0xd4>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d003      	beq.n	800f130 <TIM_Base_SetConfig+0x20>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f12e:	d108      	bne.n	800f142 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	68fa      	ldr	r2, [r7, #12]
 800f13e:	4313      	orrs	r3, r2
 800f140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a27      	ldr	r2, [pc, #156]	@ (800f1e4 <TIM_Base_SetConfig+0xd4>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d00b      	beq.n	800f162 <TIM_Base_SetConfig+0x52>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f150:	d007      	beq.n	800f162 <TIM_Base_SetConfig+0x52>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4a24      	ldr	r2, [pc, #144]	@ (800f1e8 <TIM_Base_SetConfig+0xd8>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d003      	beq.n	800f162 <TIM_Base_SetConfig+0x52>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4a23      	ldr	r2, [pc, #140]	@ (800f1ec <TIM_Base_SetConfig+0xdc>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d108      	bne.n	800f174 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	68db      	ldr	r3, [r3, #12]
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	4313      	orrs	r3, r2
 800f172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	695b      	ldr	r3, [r3, #20]
 800f17e:	4313      	orrs	r3, r2
 800f180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	689a      	ldr	r2, [r3, #8]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a12      	ldr	r2, [pc, #72]	@ (800f1e4 <TIM_Base_SetConfig+0xd4>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d007      	beq.n	800f1b0 <TIM_Base_SetConfig+0xa0>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a11      	ldr	r2, [pc, #68]	@ (800f1e8 <TIM_Base_SetConfig+0xd8>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d003      	beq.n	800f1b0 <TIM_Base_SetConfig+0xa0>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a10      	ldr	r2, [pc, #64]	@ (800f1ec <TIM_Base_SetConfig+0xdc>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d103      	bne.n	800f1b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	691a      	ldr	r2, [r3, #16]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	f003 0301 	and.w	r3, r3, #1
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d105      	bne.n	800f1d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	691b      	ldr	r3, [r3, #16]
 800f1ce:	f023 0201 	bic.w	r2, r3, #1
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	611a      	str	r2, [r3, #16]
  }
}
 800f1d6:	bf00      	nop
 800f1d8:	3714      	adds	r7, #20
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop
 800f1e4:	40012c00 	.word	0x40012c00
 800f1e8:	40014400 	.word	0x40014400
 800f1ec:	40014800 	.word	0x40014800

0800f1f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b087      	sub	sp, #28
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6a1b      	ldr	r3, [r3, #32]
 800f200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	f023 0201 	bic.w	r2, r3, #1
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	699b      	ldr	r3, [r3, #24]
 800f212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f21a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	011b      	lsls	r3, r3, #4
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	4313      	orrs	r3, r2
 800f224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	f023 030a 	bic.w	r3, r3, #10
 800f22c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	4313      	orrs	r3, r2
 800f234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	693a      	ldr	r2, [r7, #16]
 800f23a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	697a      	ldr	r2, [r7, #20]
 800f240:	621a      	str	r2, [r3, #32]
}
 800f242:	bf00      	nop
 800f244:	371c      	adds	r7, #28
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f24e:	b480      	push	{r7}
 800f250:	b087      	sub	sp, #28
 800f252:	af00      	add	r7, sp, #0
 800f254:	60f8      	str	r0, [r7, #12]
 800f256:	60b9      	str	r1, [r7, #8]
 800f258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6a1b      	ldr	r3, [r3, #32]
 800f264:	f023 0210 	bic.w	r2, r3, #16
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	699b      	ldr	r3, [r3, #24]
 800f270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	031b      	lsls	r3, r3, #12
 800f27e:	693a      	ldr	r2, [r7, #16]
 800f280:	4313      	orrs	r3, r2
 800f282:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f28a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	011b      	lsls	r3, r3, #4
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	4313      	orrs	r3, r2
 800f294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	693a      	ldr	r2, [r7, #16]
 800f29a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	697a      	ldr	r2, [r7, #20]
 800f2a0:	621a      	str	r2, [r3, #32]
}
 800f2a2:	bf00      	nop
 800f2a4:	371c      	adds	r7, #28
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f2ae:	b480      	push	{r7}
 800f2b0:	b085      	sub	sp, #20
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f2c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f2ca:	683a      	ldr	r2, [r7, #0]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	f043 0307 	orr.w	r3, r3, #7
 800f2d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	609a      	str	r2, [r3, #8]
}
 800f2dc:	bf00      	nop
 800f2de:	3714      	adds	r7, #20
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b087      	sub	sp, #28
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	607a      	str	r2, [r7, #4]
 800f2f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	021a      	lsls	r2, r3, #8
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	431a      	orrs	r2, r3
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	4313      	orrs	r3, r2
 800f310:	697a      	ldr	r2, [r7, #20]
 800f312:	4313      	orrs	r3, r2
 800f314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	697a      	ldr	r2, [r7, #20]
 800f31a:	609a      	str	r2, [r3, #8]
}
 800f31c:	bf00      	nop
 800f31e:	371c      	adds	r7, #28
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f328:	b480      	push	{r7}
 800f32a:	b085      	sub	sp, #20
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d101      	bne.n	800f340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f33c:	2302      	movs	r3, #2
 800f33e:	e04a      	b.n	800f3d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2201      	movs	r2, #1
 800f344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2202      	movs	r2, #2
 800f34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	689b      	ldr	r3, [r3, #8]
 800f35e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4a1f      	ldr	r2, [pc, #124]	@ (800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d108      	bne.n	800f37c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f370:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	68fa      	ldr	r2, [r7, #12]
 800f378:	4313      	orrs	r3, r2
 800f37a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4a12      	ldr	r2, [pc, #72]	@ (800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d004      	beq.n	800f3aa <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3a8:	d10c      	bne.n	800f3c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f3b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	68ba      	ldr	r2, [r7, #8]
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68ba      	ldr	r2, [r7, #8]
 800f3c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	40012c00 	.word	0x40012c00

0800f3e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f3f0:	bf00      	nop
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr

0800f3fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f404:	bf00      	nop
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f418:	bf00      	nop
 800f41a:	370c      	adds	r7, #12
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <LL_RCC_GetUSARTClockSource>:
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f42c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f430:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4013      	ands	r3, r2
}
 800f438:	4618      	mov	r0, r3
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <LL_RCC_GetLPUARTClockSource>:
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f44c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f450:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4013      	ands	r3, r2
}
 800f458:	4618      	mov	r0, r3
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d101      	bne.n	800f476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f472:	2301      	movs	r3, #1
 800f474:	e042      	b.n	800f4fc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d106      	bne.n	800f48e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f7f7 fbd5 	bl	8006c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2224      	movs	r2, #36	@ 0x24
 800f492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f022 0201 	bic.w	r2, r2, #1
 800f4a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d002      	beq.n	800f4b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 ff56 	bl	8010360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 fd2b 	bl	800ff10 <UART_SetConfig>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d101      	bne.n	800f4c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e01b      	b.n	800f4fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	685a      	ldr	r2, [r3, #4]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f4d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	689a      	ldr	r2, [r3, #8]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f4e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f042 0201 	orr.w	r2, r2, #1
 800f4f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 ffd5 	bl	80104a4 <UART_CheckIdleState>
 800f4fa:	4603      	mov	r3, r0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3708      	adds	r7, #8
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d101      	bne.n	800f516 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f512:	2301      	movs	r3, #1
 800f514:	e031      	b.n	800f57a <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2224      	movs	r2, #36	@ 0x24
 800f51a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f022 0201 	bic.w	r2, r2, #1
 800f52c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2200      	movs	r2, #0
 800f534:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2200      	movs	r2, #0
 800f53c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2200      	movs	r2, #0
 800f544:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f7f7 fc20 	bl	8006d8c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2200      	movs	r2, #0
 800f558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2200      	movs	r2, #0
 800f568:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2200      	movs	r2, #0
 800f56e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2200      	movs	r2, #0
 800f574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f578:	2300      	movs	r3, #0
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
	...

0800f584 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b08a      	sub	sp, #40	@ 0x28
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	4613      	mov	r3, r2
 800f590:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f598:	2b20      	cmp	r3, #32
 800f59a:	d137      	bne.n	800f60c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d002      	beq.n	800f5a8 <HAL_UART_Receive_DMA+0x24>
 800f5a2:	88fb      	ldrh	r3, [r7, #6]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d101      	bne.n	800f5ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e030      	b.n	800f60e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4a18      	ldr	r2, [pc, #96]	@ (800f618 <HAL_UART_Receive_DMA+0x94>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d01f      	beq.n	800f5fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d018      	beq.n	800f5fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	e853 3f00 	ldrex	r3, [r3]
 800f5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f5de:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5e8:	623b      	str	r3, [r7, #32]
 800f5ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	69f9      	ldr	r1, [r7, #28]
 800f5ee:	6a3a      	ldr	r2, [r7, #32]
 800f5f0:	e841 2300 	strex	r3, r2, [r1]
 800f5f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1e6      	bne.n	800f5ca <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f5fc:	88fb      	ldrh	r3, [r7, #6]
 800f5fe:	461a      	mov	r2, r3
 800f600:	68b9      	ldr	r1, [r7, #8]
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f001 f866 	bl	80106d4 <UART_Start_Receive_DMA>
 800f608:	4603      	mov	r3, r0
 800f60a:	e000      	b.n	800f60e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f60c:	2302      	movs	r3, #2
  }
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3728      	adds	r7, #40	@ 0x28
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	40008000 	.word	0x40008000

0800f61c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b0a0      	sub	sp, #128	@ 0x80
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f62c:	e853 3f00 	ldrex	r3, [r3]
 800f630:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f634:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f638:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	461a      	mov	r2, r3
 800f640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f642:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f644:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f646:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f648:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f64a:	e841 2300 	strex	r3, r2, [r1]
 800f64e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f652:	2b00      	cmp	r3, #0
 800f654:	d1e6      	bne.n	800f624 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	3308      	adds	r3, #8
 800f65c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f65e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f660:	e853 3f00 	ldrex	r3, [r3]
 800f664:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f668:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800f66c:	f023 0301 	bic.w	r3, r3, #1
 800f670:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	3308      	adds	r3, #8
 800f678:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f67a:	657a      	str	r2, [r7, #84]	@ 0x54
 800f67c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f67e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f680:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f682:	e841 2300 	strex	r3, r2, [r1]
 800f686:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1e3      	bne.n	800f656 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f692:	2b01      	cmp	r3, #1
 800f694:	d118      	bne.n	800f6c8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f69e:	e853 3f00 	ldrex	r3, [r3]
 800f6a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a6:	f023 0310 	bic.w	r3, r3, #16
 800f6aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f6b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f6ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f6bc:	e841 2300 	strex	r3, r2, [r1]
 800f6c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1e6      	bne.n	800f696 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6d2:	2b80      	cmp	r3, #128	@ 0x80
 800f6d4:	d137      	bne.n	800f746 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	3308      	adds	r3, #8
 800f6dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6de:	6a3b      	ldr	r3, [r7, #32]
 800f6e0:	e853 3f00 	ldrex	r3, [r3]
 800f6e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6e6:	69fb      	ldr	r3, [r7, #28]
 800f6e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6ec:	673b      	str	r3, [r7, #112]	@ 0x70
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	3308      	adds	r3, #8
 800f6f4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f6f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f6f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6fe:	e841 2300 	strex	r3, r2, [r1]
 800f702:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f706:	2b00      	cmp	r3, #0
 800f708:	d1e5      	bne.n	800f6d6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d019      	beq.n	800f746 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f716:	2200      	movs	r2, #0
 800f718:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f71e:	4618      	mov	r0, r3
 800f720:	f7f9 f877 	bl	8008812 <HAL_DMA_Abort>
 800f724:	4603      	mov	r3, r0
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00d      	beq.n	800f746 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f72e:	4618      	mov	r0, r3
 800f730:	f7f9 f9dc 	bl	8008aec <HAL_DMA_GetError>
 800f734:	4603      	mov	r3, r0
 800f736:	2b20      	cmp	r3, #32
 800f738:	d105      	bne.n	800f746 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2210      	movs	r2, #16
 800f73e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f742:	2303      	movs	r3, #3
 800f744:	e073      	b.n	800f82e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f750:	2b40      	cmp	r3, #64	@ 0x40
 800f752:	d13b      	bne.n	800f7cc <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	3308      	adds	r3, #8
 800f75a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	e853 3f00 	ldrex	r3, [r3]
 800f762:	60bb      	str	r3, [r7, #8]
   return(result);
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f76a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	3308      	adds	r3, #8
 800f772:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f774:	61ba      	str	r2, [r7, #24]
 800f776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f778:	6979      	ldr	r1, [r7, #20]
 800f77a:	69ba      	ldr	r2, [r7, #24]
 800f77c:	e841 2300 	strex	r3, r2, [r1]
 800f780:	613b      	str	r3, [r7, #16]
   return(result);
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1e5      	bne.n	800f754 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d01c      	beq.n	800f7cc <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f798:	2200      	movs	r2, #0
 800f79a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7f9 f835 	bl	8008812 <HAL_DMA_Abort>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00e      	beq.n	800f7cc <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7f9 f999 	bl	8008aec <HAL_DMA_GetError>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	2b20      	cmp	r3, #32
 800f7be:	d105      	bne.n	800f7cc <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2210      	movs	r2, #16
 800f7c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	e030      	b.n	800f82e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	220f      	movs	r2, #15
 800f7e2:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f7ec:	d107      	bne.n	800f7fe <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	699a      	ldr	r2, [r3, #24]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f042 0210 	orr.w	r2, r2, #16
 800f7fc:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	699a      	ldr	r2, [r3, #24]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f042 0208 	orr.w	r2, r2, #8
 800f80c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2220      	movs	r2, #32
 800f812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2220      	movs	r2, #32
 800f81a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2200      	movs	r2, #0
 800f822:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800f82c:	2300      	movs	r3, #0
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3780      	adds	r7, #128	@ 0x80
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
	...

0800f838 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b0ba      	sub	sp, #232	@ 0xe8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	69db      	ldr	r3, [r3, #28]
 800f846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	689b      	ldr	r3, [r3, #8]
 800f85a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f85e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f862:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f866:	4013      	ands	r3, r2
 800f868:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f86c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f870:	2b00      	cmp	r3, #0
 800f872:	d11b      	bne.n	800f8ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f878:	f003 0320 	and.w	r3, r3, #32
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d015      	beq.n	800f8ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f884:	f003 0320 	and.w	r3, r3, #32
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d105      	bne.n	800f898 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f88c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f894:	2b00      	cmp	r3, #0
 800f896:	d009      	beq.n	800f8ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f000 8300 	beq.w	800fea2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	4798      	blx	r3
      }
      return;
 800f8aa:	e2fa      	b.n	800fea2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f8ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 8123 	beq.w	800fafc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f8b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f8ba:	4b8d      	ldr	r3, [pc, #564]	@ (800faf0 <HAL_UART_IRQHandler+0x2b8>)
 800f8bc:	4013      	ands	r3, r2
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d106      	bne.n	800f8d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f8c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f8c6:	4b8b      	ldr	r3, [pc, #556]	@ (800faf4 <HAL_UART_IRQHandler+0x2bc>)
 800f8c8:	4013      	ands	r3, r2
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f000 8116 	beq.w	800fafc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f8d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8d4:	f003 0301 	and.w	r3, r3, #1
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d011      	beq.n	800f900 <HAL_UART_IRQHandler+0xc8>
 800f8dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d00b      	beq.n	800f900 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8f6:	f043 0201 	orr.w	r2, r3, #1
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f904:	f003 0302 	and.w	r3, r3, #2
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d011      	beq.n	800f930 <HAL_UART_IRQHandler+0xf8>
 800f90c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f910:	f003 0301 	and.w	r3, r3, #1
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00b      	beq.n	800f930 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2202      	movs	r2, #2
 800f91e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f926:	f043 0204 	orr.w	r2, r3, #4
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f934:	f003 0304 	and.w	r3, r3, #4
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d011      	beq.n	800f960 <HAL_UART_IRQHandler+0x128>
 800f93c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f940:	f003 0301 	and.w	r3, r3, #1
 800f944:	2b00      	cmp	r3, #0
 800f946:	d00b      	beq.n	800f960 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	2204      	movs	r2, #4
 800f94e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f956:	f043 0202 	orr.w	r2, r3, #2
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f964:	f003 0308 	and.w	r3, r3, #8
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d017      	beq.n	800f99c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f96c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f970:	f003 0320 	and.w	r3, r3, #32
 800f974:	2b00      	cmp	r3, #0
 800f976:	d105      	bne.n	800f984 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f978:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f97c:	4b5c      	ldr	r3, [pc, #368]	@ (800faf0 <HAL_UART_IRQHandler+0x2b8>)
 800f97e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00b      	beq.n	800f99c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2208      	movs	r2, #8
 800f98a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f992:	f043 0208 	orr.w	r2, r3, #8
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d012      	beq.n	800f9ce <HAL_UART_IRQHandler+0x196>
 800f9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d00c      	beq.n	800f9ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f9bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9c4:	f043 0220 	orr.w	r2, r3, #32
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f000 8266 	beq.w	800fea6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9de:	f003 0320 	and.w	r3, r3, #32
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d013      	beq.n	800fa0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f9e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9ea:	f003 0320 	and.w	r3, r3, #32
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d105      	bne.n	800f9fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f9f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f9f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d007      	beq.n	800fa0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d003      	beq.n	800fa0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	689b      	ldr	r3, [r3, #8]
 800fa1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa22:	2b40      	cmp	r3, #64	@ 0x40
 800fa24:	d005      	beq.n	800fa32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fa26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fa2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d054      	beq.n	800fadc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 ff35 	bl	80108a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	689b      	ldr	r3, [r3, #8]
 800fa3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa42:	2b40      	cmp	r3, #64	@ 0x40
 800fa44:	d146      	bne.n	800fad4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	3308      	adds	r3, #8
 800fa4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa54:	e853 3f00 	ldrex	r3, [r3]
 800fa58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fa5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3308      	adds	r3, #8
 800fa6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fa72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fa76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fa7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fa82:	e841 2300 	strex	r3, r2, [r1]
 800fa86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fa8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d1d9      	bne.n	800fa46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d017      	beq.n	800facc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faa2:	4a15      	ldr	r2, [pc, #84]	@ (800faf8 <HAL_UART_IRQHandler+0x2c0>)
 800faa4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faac:	4618      	mov	r0, r3
 800faae:	f7f8 ff0f 	bl	80088d0 <HAL_DMA_Abort_IT>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d019      	beq.n	800faec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fabe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fac6:	4610      	mov	r0, r2
 800fac8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faca:	e00f      	b.n	800faec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 fa09 	bl	800fee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fad2:	e00b      	b.n	800faec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 fa05 	bl	800fee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fada:	e007      	b.n	800faec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 fa01 	bl	800fee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800faea:	e1dc      	b.n	800fea6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faec:	bf00      	nop
    return;
 800faee:	e1da      	b.n	800fea6 <HAL_UART_IRQHandler+0x66e>
 800faf0:	10000001 	.word	0x10000001
 800faf4:	04000120 	.word	0x04000120
 800faf8:	08010b59 	.word	0x08010b59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	f040 8170 	bne.w	800fde6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fb06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb0a:	f003 0310 	and.w	r3, r3, #16
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f000 8169 	beq.w	800fde6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fb14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb18:	f003 0310 	and.w	r3, r3, #16
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	f000 8162 	beq.w	800fde6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	2210      	movs	r2, #16
 800fb28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb34:	2b40      	cmp	r3, #64	@ 0x40
 800fb36:	f040 80d8 	bne.w	800fcea <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fb48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f000 80af 	beq.w	800fcb0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fb58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	f080 80a7 	bcs.w	800fcb0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fb68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f003 0320 	and.w	r3, r3, #32
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f040 8087 	bne.w	800fc8e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fb94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	461a      	mov	r2, r3
 800fba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fbaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fbae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fbb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fbba:	e841 2300 	strex	r3, r2, [r1]
 800fbbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fbc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d1da      	bne.n	800fb80 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	3308      	adds	r3, #8
 800fbd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fbd4:	e853 3f00 	ldrex	r3, [r3]
 800fbd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fbda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fbdc:	f023 0301 	bic.w	r3, r3, #1
 800fbe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	3308      	adds	r3, #8
 800fbea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fbee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fbf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fbf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fbfa:	e841 2300 	strex	r3, r2, [r1]
 800fbfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fc00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d1e1      	bne.n	800fbca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	3308      	adds	r3, #8
 800fc0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc10:	e853 3f00 	ldrex	r3, [r3]
 800fc14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fc16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	3308      	adds	r3, #8
 800fc26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fc2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fc2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fc30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fc32:	e841 2300 	strex	r3, r2, [r1]
 800fc36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fc38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1e3      	bne.n	800fc06 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2220      	movs	r2, #32
 800fc42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc54:	e853 3f00 	ldrex	r3, [r3]
 800fc58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fc5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc5c:	f023 0310 	bic.w	r3, r3, #16
 800fc60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	461a      	mov	r2, r3
 800fc6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fc70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fc74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc76:	e841 2300 	strex	r3, r2, [r1]
 800fc7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fc7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1e4      	bne.n	800fc4c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7f8 fdc2 	bl	8008812 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2202      	movs	r2, #2
 800fc92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	4619      	mov	r1, r3
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 f925 	bl	800fef8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fcae:	e0fc      	b.n	800feaa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fcb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	f040 80f5 	bne.w	800feaa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f003 0320 	and.w	r3, r3, #32
 800fcce:	2b20      	cmp	r3, #32
 800fcd0:	f040 80eb 	bne.w	800feaa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2202      	movs	r2, #2
 800fcd8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fce0:	4619      	mov	r1, r3
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 f908 	bl	800fef8 <HAL_UARTEx_RxEventCallback>
      return;
 800fce8:	e0df      	b.n	800feaa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	1ad3      	subs	r3, r2, r3
 800fcfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f000 80d1 	beq.w	800feae <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800fd0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 80cc 	beq.w	800feae <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd1e:	e853 3f00 	ldrex	r3, [r3]
 800fd22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fd24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fd2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	461a      	mov	r2, r3
 800fd34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fd38:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fd3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd40:	e841 2300 	strex	r3, r2, [r1]
 800fd44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fd46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d1e4      	bne.n	800fd16 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	3308      	adds	r3, #8
 800fd52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd56:	e853 3f00 	ldrex	r3, [r3]
 800fd5a:	623b      	str	r3, [r7, #32]
   return(result);
 800fd5c:	6a3b      	ldr	r3, [r7, #32]
 800fd5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fd62:	f023 0301 	bic.w	r3, r3, #1
 800fd66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	3308      	adds	r3, #8
 800fd70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fd74:	633a      	str	r2, [r7, #48]	@ 0x30
 800fd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd7c:	e841 2300 	strex	r3, r2, [r1]
 800fd80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d1e1      	bne.n	800fd4c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2220      	movs	r2, #32
 800fd8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2200      	movs	r2, #0
 800fd94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	e853 3f00 	ldrex	r3, [r3]
 800fda8:	60fb      	str	r3, [r7, #12]
   return(result);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f023 0310 	bic.w	r3, r3, #16
 800fdb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fdbe:	61fb      	str	r3, [r7, #28]
 800fdc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc2:	69b9      	ldr	r1, [r7, #24]
 800fdc4:	69fa      	ldr	r2, [r7, #28]
 800fdc6:	e841 2300 	strex	r3, r2, [r1]
 800fdca:	617b      	str	r3, [r7, #20]
   return(result);
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1e4      	bne.n	800fd9c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2202      	movs	r2, #2
 800fdd6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fdd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fddc:	4619      	mov	r1, r3
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 f88a 	bl	800fef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fde4:	e063      	b.n	800feae <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fde6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00e      	beq.n	800fe10 <HAL_UART_IRQHandler+0x5d8>
 800fdf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fdf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d008      	beq.n	800fe10 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fe06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f000 fee2 	bl	8010bd2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe0e:	e051      	b.n	800feb4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fe10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d014      	beq.n	800fe46 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fe1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d105      	bne.n	800fe34 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fe28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d008      	beq.n	800fe46 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d03a      	beq.n	800feb2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	4798      	blx	r3
    }
    return;
 800fe44:	e035      	b.n	800feb2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fe46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d009      	beq.n	800fe66 <HAL_UART_IRQHandler+0x62e>
 800fe52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d003      	beq.n	800fe66 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f000 fe8c 	bl	8010b7c <UART_EndTransmit_IT>
    return;
 800fe64:	e026      	b.n	800feb4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fe66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d009      	beq.n	800fe86 <HAL_UART_IRQHandler+0x64e>
 800fe72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d003      	beq.n	800fe86 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 febb 	bl	8010bfa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe84:	e016      	b.n	800feb4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fe86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d010      	beq.n	800feb4 <HAL_UART_IRQHandler+0x67c>
 800fe92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	da0c      	bge.n	800feb4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fea3 	bl	8010be6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fea0:	e008      	b.n	800feb4 <HAL_UART_IRQHandler+0x67c>
      return;
 800fea2:	bf00      	nop
 800fea4:	e006      	b.n	800feb4 <HAL_UART_IRQHandler+0x67c>
    return;
 800fea6:	bf00      	nop
 800fea8:	e004      	b.n	800feb4 <HAL_UART_IRQHandler+0x67c>
      return;
 800feaa:	bf00      	nop
 800feac:	e002      	b.n	800feb4 <HAL_UART_IRQHandler+0x67c>
      return;
 800feae:	bf00      	nop
 800feb0:	e000      	b.n	800feb4 <HAL_UART_IRQHandler+0x67c>
    return;
 800feb2:	bf00      	nop
  }
}
 800feb4:	37e8      	adds	r7, #232	@ 0xe8
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop

0800febc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fed8:	bf00      	nop
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800feec:	bf00      	nop
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	460b      	mov	r3, r1
 800ff02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ff04:	bf00      	nop
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ff14:	b08c      	sub	sp, #48	@ 0x30
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	689a      	ldr	r2, [r3, #8]
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	431a      	orrs	r2, r3
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	695b      	ldr	r3, [r3, #20]
 800ff2e:	431a      	orrs	r2, r3
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	69db      	ldr	r3, [r3, #28]
 800ff34:	4313      	orrs	r3, r2
 800ff36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	4baf      	ldr	r3, [pc, #700]	@ (80101fc <UART_SetConfig+0x2ec>)
 800ff40:	4013      	ands	r3, r2
 800ff42:	697a      	ldr	r2, [r7, #20]
 800ff44:	6812      	ldr	r2, [r2, #0]
 800ff46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff48:	430b      	orrs	r3, r1
 800ff4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	68da      	ldr	r2, [r3, #12]
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	430a      	orrs	r2, r1
 800ff60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	699b      	ldr	r3, [r3, #24]
 800ff66:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4aa4      	ldr	r2, [pc, #656]	@ (8010200 <UART_SetConfig+0x2f0>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d004      	beq.n	800ff7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	6a1b      	ldr	r3, [r3, #32]
 800ff76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff78:	4313      	orrs	r3, r2
 800ff7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ff86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ff8a:	697a      	ldr	r2, [r7, #20]
 800ff8c:	6812      	ldr	r2, [r2, #0]
 800ff8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff90:	430b      	orrs	r3, r1
 800ff92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff9a:	f023 010f 	bic.w	r1, r3, #15
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	430a      	orrs	r2, r1
 800ffa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4a95      	ldr	r2, [pc, #596]	@ (8010204 <UART_SetConfig+0x2f4>)
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d125      	bne.n	8010000 <UART_SetConfig+0xf0>
 800ffb4:	2003      	movs	r0, #3
 800ffb6:	f7ff fa35 	bl	800f424 <LL_RCC_GetUSARTClockSource>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b03      	cmp	r3, #3
 800ffbe:	d81b      	bhi.n	800fff8 <UART_SetConfig+0xe8>
 800ffc0:	a201      	add	r2, pc, #4	@ (adr r2, 800ffc8 <UART_SetConfig+0xb8>)
 800ffc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc6:	bf00      	nop
 800ffc8:	0800ffd9 	.word	0x0800ffd9
 800ffcc:	0800ffe9 	.word	0x0800ffe9
 800ffd0:	0800ffe1 	.word	0x0800ffe1
 800ffd4:	0800fff1 	.word	0x0800fff1
 800ffd8:	2301      	movs	r3, #1
 800ffda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffde:	e042      	b.n	8010066 <UART_SetConfig+0x156>
 800ffe0:	2302      	movs	r3, #2
 800ffe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffe6:	e03e      	b.n	8010066 <UART_SetConfig+0x156>
 800ffe8:	2304      	movs	r3, #4
 800ffea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffee:	e03a      	b.n	8010066 <UART_SetConfig+0x156>
 800fff0:	2308      	movs	r3, #8
 800fff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fff6:	e036      	b.n	8010066 <UART_SetConfig+0x156>
 800fff8:	2310      	movs	r3, #16
 800fffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fffe:	e032      	b.n	8010066 <UART_SetConfig+0x156>
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a7e      	ldr	r2, [pc, #504]	@ (8010200 <UART_SetConfig+0x2f0>)
 8010006:	4293      	cmp	r3, r2
 8010008:	d12a      	bne.n	8010060 <UART_SetConfig+0x150>
 801000a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801000e:	f7ff fa19 	bl	800f444 <LL_RCC_GetLPUARTClockSource>
 8010012:	4603      	mov	r3, r0
 8010014:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010018:	d01a      	beq.n	8010050 <UART_SetConfig+0x140>
 801001a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801001e:	d81b      	bhi.n	8010058 <UART_SetConfig+0x148>
 8010020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010024:	d00c      	beq.n	8010040 <UART_SetConfig+0x130>
 8010026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801002a:	d815      	bhi.n	8010058 <UART_SetConfig+0x148>
 801002c:	2b00      	cmp	r3, #0
 801002e:	d003      	beq.n	8010038 <UART_SetConfig+0x128>
 8010030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010034:	d008      	beq.n	8010048 <UART_SetConfig+0x138>
 8010036:	e00f      	b.n	8010058 <UART_SetConfig+0x148>
 8010038:	2300      	movs	r3, #0
 801003a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801003e:	e012      	b.n	8010066 <UART_SetConfig+0x156>
 8010040:	2302      	movs	r3, #2
 8010042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010046:	e00e      	b.n	8010066 <UART_SetConfig+0x156>
 8010048:	2304      	movs	r3, #4
 801004a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801004e:	e00a      	b.n	8010066 <UART_SetConfig+0x156>
 8010050:	2308      	movs	r3, #8
 8010052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010056:	e006      	b.n	8010066 <UART_SetConfig+0x156>
 8010058:	2310      	movs	r3, #16
 801005a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801005e:	e002      	b.n	8010066 <UART_SetConfig+0x156>
 8010060:	2310      	movs	r3, #16
 8010062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4a65      	ldr	r2, [pc, #404]	@ (8010200 <UART_SetConfig+0x2f0>)
 801006c:	4293      	cmp	r3, r2
 801006e:	f040 8097 	bne.w	80101a0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010072:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010076:	2b08      	cmp	r3, #8
 8010078:	d823      	bhi.n	80100c2 <UART_SetConfig+0x1b2>
 801007a:	a201      	add	r2, pc, #4	@ (adr r2, 8010080 <UART_SetConfig+0x170>)
 801007c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010080:	080100a5 	.word	0x080100a5
 8010084:	080100c3 	.word	0x080100c3
 8010088:	080100ad 	.word	0x080100ad
 801008c:	080100c3 	.word	0x080100c3
 8010090:	080100b3 	.word	0x080100b3
 8010094:	080100c3 	.word	0x080100c3
 8010098:	080100c3 	.word	0x080100c3
 801009c:	080100c3 	.word	0x080100c3
 80100a0:	080100bb 	.word	0x080100bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100a4:	f7fc fbfa 	bl	800c89c <HAL_RCC_GetPCLK1Freq>
 80100a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80100aa:	e010      	b.n	80100ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80100ac:	4b56      	ldr	r3, [pc, #344]	@ (8010208 <UART_SetConfig+0x2f8>)
 80100ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80100b0:	e00d      	b.n	80100ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80100b2:	f7fc fb73 	bl	800c79c <HAL_RCC_GetSysClockFreq>
 80100b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80100b8:	e009      	b.n	80100ce <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80100c0:	e005      	b.n	80100ce <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80100c2:	2300      	movs	r3, #0
 80100c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80100c6:	2301      	movs	r3, #1
 80100c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80100cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80100ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	f000 812b 	beq.w	801032c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100da:	4a4c      	ldr	r2, [pc, #304]	@ (801020c <UART_SetConfig+0x2fc>)
 80100dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100e0:	461a      	mov	r2, r3
 80100e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80100e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	4613      	mov	r3, r2
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	4413      	add	r3, r2
 80100f4:	69ba      	ldr	r2, [r7, #24]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d305      	bcc.n	8010106 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010100:	69ba      	ldr	r2, [r7, #24]
 8010102:	429a      	cmp	r2, r3
 8010104:	d903      	bls.n	801010e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8010106:	2301      	movs	r3, #1
 8010108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801010c:	e10e      	b.n	801032c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801010e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010110:	2200      	movs	r2, #0
 8010112:	60bb      	str	r3, [r7, #8]
 8010114:	60fa      	str	r2, [r7, #12]
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801011a:	4a3c      	ldr	r2, [pc, #240]	@ (801020c <UART_SetConfig+0x2fc>)
 801011c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010120:	b29b      	uxth	r3, r3
 8010122:	2200      	movs	r2, #0
 8010124:	603b      	str	r3, [r7, #0]
 8010126:	607a      	str	r2, [r7, #4]
 8010128:	e9d7 2300 	ldrd	r2, r3, [r7]
 801012c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010130:	f7f0 fd82 	bl	8000c38 <__aeabi_uldivmod>
 8010134:	4602      	mov	r2, r0
 8010136:	460b      	mov	r3, r1
 8010138:	4610      	mov	r0, r2
 801013a:	4619      	mov	r1, r3
 801013c:	f04f 0200 	mov.w	r2, #0
 8010140:	f04f 0300 	mov.w	r3, #0
 8010144:	020b      	lsls	r3, r1, #8
 8010146:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801014a:	0202      	lsls	r2, r0, #8
 801014c:	6979      	ldr	r1, [r7, #20]
 801014e:	6849      	ldr	r1, [r1, #4]
 8010150:	0849      	lsrs	r1, r1, #1
 8010152:	2000      	movs	r0, #0
 8010154:	460c      	mov	r4, r1
 8010156:	4605      	mov	r5, r0
 8010158:	eb12 0804 	adds.w	r8, r2, r4
 801015c:	eb43 0905 	adc.w	r9, r3, r5
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	2200      	movs	r2, #0
 8010166:	469a      	mov	sl, r3
 8010168:	4693      	mov	fp, r2
 801016a:	4652      	mov	r2, sl
 801016c:	465b      	mov	r3, fp
 801016e:	4640      	mov	r0, r8
 8010170:	4649      	mov	r1, r9
 8010172:	f7f0 fd61 	bl	8000c38 <__aeabi_uldivmod>
 8010176:	4602      	mov	r2, r0
 8010178:	460b      	mov	r3, r1
 801017a:	4613      	mov	r3, r2
 801017c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801017e:	6a3b      	ldr	r3, [r7, #32]
 8010180:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010184:	d308      	bcc.n	8010198 <UART_SetConfig+0x288>
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801018c:	d204      	bcs.n	8010198 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	6a3a      	ldr	r2, [r7, #32]
 8010194:	60da      	str	r2, [r3, #12]
 8010196:	e0c9      	b.n	801032c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8010198:	2301      	movs	r3, #1
 801019a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801019e:	e0c5      	b.n	801032c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	69db      	ldr	r3, [r3, #28]
 80101a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80101a8:	d16d      	bne.n	8010286 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80101aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80101ae:	3b01      	subs	r3, #1
 80101b0:	2b07      	cmp	r3, #7
 80101b2:	d82d      	bhi.n	8010210 <UART_SetConfig+0x300>
 80101b4:	a201      	add	r2, pc, #4	@ (adr r2, 80101bc <UART_SetConfig+0x2ac>)
 80101b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ba:	bf00      	nop
 80101bc:	080101dd 	.word	0x080101dd
 80101c0:	080101e5 	.word	0x080101e5
 80101c4:	08010211 	.word	0x08010211
 80101c8:	080101eb 	.word	0x080101eb
 80101cc:	08010211 	.word	0x08010211
 80101d0:	08010211 	.word	0x08010211
 80101d4:	08010211 	.word	0x08010211
 80101d8:	080101f3 	.word	0x080101f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80101dc:	f7fc fb74 	bl	800c8c8 <HAL_RCC_GetPCLK2Freq>
 80101e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80101e2:	e01b      	b.n	801021c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80101e4:	4b08      	ldr	r3, [pc, #32]	@ (8010208 <UART_SetConfig+0x2f8>)
 80101e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80101e8:	e018      	b.n	801021c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80101ea:	f7fc fad7 	bl	800c79c <HAL_RCC_GetSysClockFreq>
 80101ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80101f0:	e014      	b.n	801021c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80101f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80101f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80101f8:	e010      	b.n	801021c <UART_SetConfig+0x30c>
 80101fa:	bf00      	nop
 80101fc:	cfff69f3 	.word	0xcfff69f3
 8010200:	40008000 	.word	0x40008000
 8010204:	40013800 	.word	0x40013800
 8010208:	00f42400 	.word	0x00f42400
 801020c:	08021ac4 	.word	0x08021ac4
      default:
        pclk = 0U;
 8010210:	2300      	movs	r3, #0
 8010212:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010214:	2301      	movs	r3, #1
 8010216:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801021a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801021c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021e:	2b00      	cmp	r3, #0
 8010220:	f000 8084 	beq.w	801032c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010228:	4a4b      	ldr	r2, [pc, #300]	@ (8010358 <UART_SetConfig+0x448>)
 801022a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801022e:	461a      	mov	r2, r3
 8010230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010232:	fbb3 f3f2 	udiv	r3, r3, r2
 8010236:	005a      	lsls	r2, r3, #1
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	085b      	lsrs	r3, r3, #1
 801023e:	441a      	add	r2, r3
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	fbb2 f3f3 	udiv	r3, r2, r3
 8010248:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801024a:	6a3b      	ldr	r3, [r7, #32]
 801024c:	2b0f      	cmp	r3, #15
 801024e:	d916      	bls.n	801027e <UART_SetConfig+0x36e>
 8010250:	6a3b      	ldr	r3, [r7, #32]
 8010252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010256:	d212      	bcs.n	801027e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010258:	6a3b      	ldr	r3, [r7, #32]
 801025a:	b29b      	uxth	r3, r3
 801025c:	f023 030f 	bic.w	r3, r3, #15
 8010260:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010262:	6a3b      	ldr	r3, [r7, #32]
 8010264:	085b      	lsrs	r3, r3, #1
 8010266:	b29b      	uxth	r3, r3
 8010268:	f003 0307 	and.w	r3, r3, #7
 801026c:	b29a      	uxth	r2, r3
 801026e:	8bfb      	ldrh	r3, [r7, #30]
 8010270:	4313      	orrs	r3, r2
 8010272:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	8bfa      	ldrh	r2, [r7, #30]
 801027a:	60da      	str	r2, [r3, #12]
 801027c:	e056      	b.n	801032c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801027e:	2301      	movs	r3, #1
 8010280:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010284:	e052      	b.n	801032c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010286:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801028a:	3b01      	subs	r3, #1
 801028c:	2b07      	cmp	r3, #7
 801028e:	d822      	bhi.n	80102d6 <UART_SetConfig+0x3c6>
 8010290:	a201      	add	r2, pc, #4	@ (adr r2, 8010298 <UART_SetConfig+0x388>)
 8010292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010296:	bf00      	nop
 8010298:	080102b9 	.word	0x080102b9
 801029c:	080102c1 	.word	0x080102c1
 80102a0:	080102d7 	.word	0x080102d7
 80102a4:	080102c7 	.word	0x080102c7
 80102a8:	080102d7 	.word	0x080102d7
 80102ac:	080102d7 	.word	0x080102d7
 80102b0:	080102d7 	.word	0x080102d7
 80102b4:	080102cf 	.word	0x080102cf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102b8:	f7fc fb06 	bl	800c8c8 <HAL_RCC_GetPCLK2Freq>
 80102bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80102be:	e010      	b.n	80102e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80102c0:	4b26      	ldr	r3, [pc, #152]	@ (801035c <UART_SetConfig+0x44c>)
 80102c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80102c4:	e00d      	b.n	80102e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80102c6:	f7fc fa69 	bl	800c79c <HAL_RCC_GetSysClockFreq>
 80102ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80102cc:	e009      	b.n	80102e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80102d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80102d4:	e005      	b.n	80102e2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80102d6:	2300      	movs	r3, #0
 80102d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80102da:	2301      	movs	r3, #1
 80102dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80102e0:	bf00      	nop
    }

    if (pclk != 0U)
 80102e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d021      	beq.n	801032c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102ec:	4a1a      	ldr	r2, [pc, #104]	@ (8010358 <UART_SetConfig+0x448>)
 80102ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102f2:	461a      	mov	r2, r3
 80102f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	085b      	lsrs	r3, r3, #1
 8010300:	441a      	add	r2, r3
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	fbb2 f3f3 	udiv	r3, r2, r3
 801030a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	2b0f      	cmp	r3, #15
 8010310:	d909      	bls.n	8010326 <UART_SetConfig+0x416>
 8010312:	6a3b      	ldr	r3, [r7, #32]
 8010314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010318:	d205      	bcs.n	8010326 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801031a:	6a3b      	ldr	r3, [r7, #32]
 801031c:	b29a      	uxth	r2, r3
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	60da      	str	r2, [r3, #12]
 8010324:	e002      	b.n	801032c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010326:	2301      	movs	r3, #1
 8010328:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	2201      	movs	r2, #1
 8010330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	2201      	movs	r2, #1
 8010338:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	2200      	movs	r2, #0
 8010340:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	2200      	movs	r2, #0
 8010346:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010348:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801034c:	4618      	mov	r0, r3
 801034e:	3730      	adds	r7, #48	@ 0x30
 8010350:	46bd      	mov	sp, r7
 8010352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010356:	bf00      	nop
 8010358:	08021ac4 	.word	0x08021ac4
 801035c:	00f42400 	.word	0x00f42400

08010360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801036c:	f003 0308 	and.w	r3, r3, #8
 8010370:	2b00      	cmp	r3, #0
 8010372:	d00a      	beq.n	801038a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	430a      	orrs	r2, r1
 8010388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801038e:	f003 0301 	and.w	r3, r3, #1
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00a      	beq.n	80103ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	430a      	orrs	r2, r1
 80103aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103b0:	f003 0302 	and.w	r3, r3, #2
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00a      	beq.n	80103ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	430a      	orrs	r2, r1
 80103cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103d2:	f003 0304 	and.w	r3, r3, #4
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00a      	beq.n	80103f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	430a      	orrs	r2, r1
 80103ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103f4:	f003 0310 	and.w	r3, r3, #16
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d00a      	beq.n	8010412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	430a      	orrs	r2, r1
 8010410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010416:	f003 0320 	and.w	r3, r3, #32
 801041a:	2b00      	cmp	r3, #0
 801041c:	d00a      	beq.n	8010434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	689b      	ldr	r3, [r3, #8]
 8010424:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	430a      	orrs	r2, r1
 8010432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801043c:	2b00      	cmp	r3, #0
 801043e:	d01a      	beq.n	8010476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	430a      	orrs	r2, r1
 8010454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801045a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801045e:	d10a      	bne.n	8010476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	430a      	orrs	r2, r1
 8010474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801047a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00a      	beq.n	8010498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	430a      	orrs	r2, r1
 8010496:	605a      	str	r2, [r3, #4]
  }
}
 8010498:	bf00      	nop
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b098      	sub	sp, #96	@ 0x60
 80104a8:	af02      	add	r7, sp, #8
 80104aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2200      	movs	r2, #0
 80104b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80104b4:	f7f6 fdb6 	bl	8007024 <HAL_GetTick>
 80104b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f003 0308 	and.w	r3, r3, #8
 80104c4:	2b08      	cmp	r3, #8
 80104c6:	d12f      	bne.n	8010528 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80104c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104d0:	2200      	movs	r2, #0
 80104d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 f88e 	bl	80105f8 <UART_WaitOnFlagUntilTimeout>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d022      	beq.n	8010528 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ea:	e853 3f00 	ldrex	r3, [r3]
 80104ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80104f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80104f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	461a      	mov	r2, r3
 80104fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010500:	647b      	str	r3, [r7, #68]	@ 0x44
 8010502:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010508:	e841 2300 	strex	r3, r2, [r1]
 801050c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801050e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010510:	2b00      	cmp	r3, #0
 8010512:	d1e6      	bne.n	80104e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2220      	movs	r2, #32
 8010518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010524:	2303      	movs	r3, #3
 8010526:	e063      	b.n	80105f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f003 0304 	and.w	r3, r3, #4
 8010532:	2b04      	cmp	r3, #4
 8010534:	d149      	bne.n	80105ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010536:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801053a:	9300      	str	r3, [sp, #0]
 801053c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801053e:	2200      	movs	r2, #0
 8010540:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f000 f857 	bl	80105f8 <UART_WaitOnFlagUntilTimeout>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d03c      	beq.n	80105ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010558:	e853 3f00 	ldrex	r3, [r3]
 801055c:	623b      	str	r3, [r7, #32]
   return(result);
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	461a      	mov	r2, r3
 801056c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801056e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010570:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010576:	e841 2300 	strex	r3, r2, [r1]
 801057a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801057c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1e6      	bne.n	8010550 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	3308      	adds	r3, #8
 8010588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	e853 3f00 	ldrex	r3, [r3]
 8010590:	60fb      	str	r3, [r7, #12]
   return(result);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	f023 0301 	bic.w	r3, r3, #1
 8010598:	64bb      	str	r3, [r7, #72]	@ 0x48
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	3308      	adds	r3, #8
 80105a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105a2:	61fa      	str	r2, [r7, #28]
 80105a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a6:	69b9      	ldr	r1, [r7, #24]
 80105a8:	69fa      	ldr	r2, [r7, #28]
 80105aa:	e841 2300 	strex	r3, r2, [r1]
 80105ae:	617b      	str	r3, [r7, #20]
   return(result);
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1e5      	bne.n	8010582 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2220      	movs	r2, #32
 80105ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2200      	movs	r2, #0
 80105c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80105c6:	2303      	movs	r3, #3
 80105c8:	e012      	b.n	80105f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2220      	movs	r2, #32
 80105ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2220      	movs	r2, #32
 80105d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2200      	movs	r2, #0
 80105de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2200      	movs	r2, #0
 80105e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2200      	movs	r2, #0
 80105ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80105ee:	2300      	movs	r3, #0
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3758      	adds	r7, #88	@ 0x58
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}

080105f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	603b      	str	r3, [r7, #0]
 8010604:	4613      	mov	r3, r2
 8010606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010608:	e04f      	b.n	80106aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010610:	d04b      	beq.n	80106aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010612:	f7f6 fd07 	bl	8007024 <HAL_GetTick>
 8010616:	4602      	mov	r2, r0
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	1ad3      	subs	r3, r2, r3
 801061c:	69ba      	ldr	r2, [r7, #24]
 801061e:	429a      	cmp	r2, r3
 8010620:	d302      	bcc.n	8010628 <UART_WaitOnFlagUntilTimeout+0x30>
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d101      	bne.n	801062c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010628:	2303      	movs	r3, #3
 801062a:	e04e      	b.n	80106ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	f003 0304 	and.w	r3, r3, #4
 8010636:	2b00      	cmp	r3, #0
 8010638:	d037      	beq.n	80106aa <UART_WaitOnFlagUntilTimeout+0xb2>
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	2b80      	cmp	r3, #128	@ 0x80
 801063e:	d034      	beq.n	80106aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	2b40      	cmp	r3, #64	@ 0x40
 8010644:	d031      	beq.n	80106aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	69db      	ldr	r3, [r3, #28]
 801064c:	f003 0308 	and.w	r3, r3, #8
 8010650:	2b08      	cmp	r3, #8
 8010652:	d110      	bne.n	8010676 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2208      	movs	r2, #8
 801065a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f000 f920 	bl	80108a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2208      	movs	r2, #8
 8010666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2200      	movs	r2, #0
 801066e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010672:	2301      	movs	r3, #1
 8010674:	e029      	b.n	80106ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	69db      	ldr	r3, [r3, #28]
 801067c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010684:	d111      	bne.n	80106aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801068e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010690:	68f8      	ldr	r0, [r7, #12]
 8010692:	f000 f906 	bl	80108a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2220      	movs	r2, #32
 801069a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80106a6:	2303      	movs	r3, #3
 80106a8:	e00f      	b.n	80106ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	69da      	ldr	r2, [r3, #28]
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	4013      	ands	r3, r2
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	bf0c      	ite	eq
 80106ba:	2301      	moveq	r3, #1
 80106bc:	2300      	movne	r3, #0
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	461a      	mov	r2, r3
 80106c2:	79fb      	ldrb	r3, [r7, #7]
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d0a0      	beq.n	801060a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80106c8:	2300      	movs	r3, #0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3710      	adds	r7, #16
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
	...

080106d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b096      	sub	sp, #88	@ 0x58
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	4613      	mov	r3, r2
 80106e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	68ba      	ldr	r2, [r7, #8]
 80106e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	88fa      	ldrh	r2, [r7, #6]
 80106ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2200      	movs	r2, #0
 80106f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2222      	movs	r2, #34	@ 0x22
 80106fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010706:	2b00      	cmp	r3, #0
 8010708:	d02d      	beq.n	8010766 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010710:	4a40      	ldr	r2, [pc, #256]	@ (8010814 <UART_Start_Receive_DMA+0x140>)
 8010712:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801071a:	4a3f      	ldr	r2, [pc, #252]	@ (8010818 <UART_Start_Receive_DMA+0x144>)
 801071c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010724:	4a3d      	ldr	r2, [pc, #244]	@ (801081c <UART_Start_Receive_DMA+0x148>)
 8010726:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801072e:	2200      	movs	r2, #0
 8010730:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	3324      	adds	r3, #36	@ 0x24
 801073e:	4619      	mov	r1, r3
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010744:	461a      	mov	r2, r3
 8010746:	88fb      	ldrh	r3, [r7, #6]
 8010748:	f7f7 ffe8 	bl	800871c <HAL_DMA_Start_IT>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d009      	beq.n	8010766 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	2210      	movs	r2, #16
 8010756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2220      	movs	r2, #32
 801075e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e051      	b.n	801080a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	691b      	ldr	r3, [r3, #16]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d018      	beq.n	80107a0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010776:	e853 3f00 	ldrex	r3, [r3]
 801077a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801077c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801077e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010782:	657b      	str	r3, [r7, #84]	@ 0x54
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	461a      	mov	r2, r3
 801078a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801078c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801078e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010790:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010792:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010794:	e841 2300 	strex	r3, r2, [r1]
 8010798:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801079a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801079c:	2b00      	cmp	r3, #0
 801079e:	d1e6      	bne.n	801076e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	3308      	adds	r3, #8
 80107a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107aa:	e853 3f00 	ldrex	r3, [r3]
 80107ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80107b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b2:	f043 0301 	orr.w	r3, r3, #1
 80107b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	3308      	adds	r3, #8
 80107be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80107c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80107c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80107c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107c8:	e841 2300 	strex	r3, r2, [r1]
 80107cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80107ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1e5      	bne.n	80107a0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	3308      	adds	r3, #8
 80107da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	e853 3f00 	ldrex	r3, [r3]
 80107e2:	613b      	str	r3, [r7, #16]
   return(result);
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	3308      	adds	r3, #8
 80107f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80107f4:	623a      	str	r2, [r7, #32]
 80107f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f8:	69f9      	ldr	r1, [r7, #28]
 80107fa:	6a3a      	ldr	r2, [r7, #32]
 80107fc:	e841 2300 	strex	r3, r2, [r1]
 8010800:	61bb      	str	r3, [r7, #24]
   return(result);
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d1e5      	bne.n	80107d4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010808:	2300      	movs	r3, #0
}
 801080a:	4618      	mov	r0, r3
 801080c:	3758      	adds	r7, #88	@ 0x58
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	0801096f 	.word	0x0801096f
 8010818:	08010a9b 	.word	0x08010a9b
 801081c:	08010ad9 	.word	0x08010ad9

08010820 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010820:	b480      	push	{r7}
 8010822:	b08f      	sub	sp, #60	@ 0x3c
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082e:	6a3b      	ldr	r3, [r7, #32]
 8010830:	e853 3f00 	ldrex	r3, [r3]
 8010834:	61fb      	str	r3, [r7, #28]
   return(result);
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801083c:	637b      	str	r3, [r7, #52]	@ 0x34
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010848:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801084c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801084e:	e841 2300 	strex	r3, r2, [r1]
 8010852:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1e6      	bne.n	8010828 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	3308      	adds	r3, #8
 8010860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	e853 3f00 	ldrex	r3, [r3]
 8010868:	60bb      	str	r3, [r7, #8]
   return(result);
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010870:	633b      	str	r3, [r7, #48]	@ 0x30
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	3308      	adds	r3, #8
 8010878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801087a:	61ba      	str	r2, [r7, #24]
 801087c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087e:	6979      	ldr	r1, [r7, #20]
 8010880:	69ba      	ldr	r2, [r7, #24]
 8010882:	e841 2300 	strex	r3, r2, [r1]
 8010886:	613b      	str	r3, [r7, #16]
   return(result);
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d1e5      	bne.n	801085a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2220      	movs	r2, #32
 8010892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010896:	bf00      	nop
 8010898:	373c      	adds	r7, #60	@ 0x3c
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr

080108a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80108a2:	b480      	push	{r7}
 80108a4:	b095      	sub	sp, #84	@ 0x54
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108b2:	e853 3f00 	ldrex	r3, [r3]
 80108b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80108b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80108be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	461a      	mov	r2, r3
 80108c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80108ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80108ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80108d0:	e841 2300 	strex	r3, r2, [r1]
 80108d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80108d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d1e6      	bne.n	80108aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	3308      	adds	r3, #8
 80108e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e4:	6a3b      	ldr	r3, [r7, #32]
 80108e6:	e853 3f00 	ldrex	r3, [r3]
 80108ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80108f2:	f023 0301 	bic.w	r3, r3, #1
 80108f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	3308      	adds	r3, #8
 80108fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010900:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010908:	e841 2300 	strex	r3, r2, [r1]
 801090c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010910:	2b00      	cmp	r3, #0
 8010912:	d1e3      	bne.n	80108dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010918:	2b01      	cmp	r3, #1
 801091a:	d118      	bne.n	801094e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	e853 3f00 	ldrex	r3, [r3]
 8010928:	60bb      	str	r3, [r7, #8]
   return(result);
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	f023 0310 	bic.w	r3, r3, #16
 8010930:	647b      	str	r3, [r7, #68]	@ 0x44
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	461a      	mov	r2, r3
 8010938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801093a:	61bb      	str	r3, [r7, #24]
 801093c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801093e:	6979      	ldr	r1, [r7, #20]
 8010940:	69ba      	ldr	r2, [r7, #24]
 8010942:	e841 2300 	strex	r3, r2, [r1]
 8010946:	613b      	str	r3, [r7, #16]
   return(result);
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1e6      	bne.n	801091c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2220      	movs	r2, #32
 8010952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2200      	movs	r2, #0
 8010960:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010962:	bf00      	nop
 8010964:	3754      	adds	r7, #84	@ 0x54
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr

0801096e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b09c      	sub	sp, #112	@ 0x70
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801097a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f003 0320 	and.w	r3, r3, #32
 8010986:	2b00      	cmp	r3, #0
 8010988:	d171      	bne.n	8010a6e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801098a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801098c:	2200      	movs	r2, #0
 801098e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801099a:	e853 3f00 	ldrex	r3, [r3]
 801099e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80109a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80109a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80109a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	461a      	mov	r2, r3
 80109ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80109b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80109b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80109b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80109b8:	e841 2300 	strex	r3, r2, [r1]
 80109bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80109be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d1e6      	bne.n	8010992 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	3308      	adds	r3, #8
 80109ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ce:	e853 3f00 	ldrex	r3, [r3]
 80109d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80109d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109d6:	f023 0301 	bic.w	r3, r3, #1
 80109da:	667b      	str	r3, [r7, #100]	@ 0x64
 80109dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	3308      	adds	r3, #8
 80109e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80109e4:	647a      	str	r2, [r7, #68]	@ 0x44
 80109e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80109ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80109ec:	e841 2300 	strex	r3, r2, [r1]
 80109f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80109f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1e5      	bne.n	80109c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	3308      	adds	r3, #8
 80109fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a02:	e853 3f00 	ldrex	r3, [r3]
 8010a06:	623b      	str	r3, [r7, #32]
   return(result);
 8010a08:	6a3b      	ldr	r3, [r7, #32]
 8010a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8010a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	3308      	adds	r3, #8
 8010a16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010a18:	633a      	str	r2, [r7, #48]	@ 0x30
 8010a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a20:	e841 2300 	strex	r3, r2, [r1]
 8010a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1e5      	bne.n	80109f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a2e:	2220      	movs	r2, #32
 8010a30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a38:	2b01      	cmp	r3, #1
 8010a3a:	d118      	bne.n	8010a6e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	e853 3f00 	ldrex	r3, [r3]
 8010a48:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f023 0310 	bic.w	r3, r3, #16
 8010a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	461a      	mov	r2, r3
 8010a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a5a:	61fb      	str	r3, [r7, #28]
 8010a5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a5e:	69b9      	ldr	r1, [r7, #24]
 8010a60:	69fa      	ldr	r2, [r7, #28]
 8010a62:	e841 2300 	strex	r3, r2, [r1]
 8010a66:	617b      	str	r3, [r7, #20]
   return(result);
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d1e6      	bne.n	8010a3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a70:	2200      	movs	r2, #0
 8010a72:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d107      	bne.n	8010a8c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010a82:	4619      	mov	r1, r3
 8010a84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010a86:	f7ff fa37 	bl	800fef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a8a:	e002      	b.n	8010a92 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010a8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010a8e:	f7f6 f9af 	bl	8006df0 <HAL_UART_RxCpltCallback>
}
 8010a92:	bf00      	nop
 8010a94:	3770      	adds	r7, #112	@ 0x70
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}

08010a9a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010a9a:	b580      	push	{r7, lr}
 8010a9c:	b084      	sub	sp, #16
 8010a9e:	af00      	add	r7, sp, #0
 8010aa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010aa6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2201      	movs	r2, #1
 8010aac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	d109      	bne.n	8010aca <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010abc:	085b      	lsrs	r3, r3, #1
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	68f8      	ldr	r0, [r7, #12]
 8010ac4:	f7ff fa18 	bl	800fef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010ac8:	e002      	b.n	8010ad0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010aca:	68f8      	ldr	r0, [r7, #12]
 8010acc:	f7ff fa00 	bl	800fed0 <HAL_UART_RxHalfCpltCallback>
}
 8010ad0:	bf00      	nop
 8010ad2:	3710      	adds	r7, #16
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b086      	sub	sp, #24
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ae4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010aec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010af4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	689b      	ldr	r3, [r3, #8]
 8010afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b00:	2b80      	cmp	r3, #128	@ 0x80
 8010b02:	d109      	bne.n	8010b18 <UART_DMAError+0x40>
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	2b21      	cmp	r3, #33	@ 0x21
 8010b08:	d106      	bne.n	8010b18 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010b12:	6978      	ldr	r0, [r7, #20]
 8010b14:	f7ff fe84 	bl	8010820 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b22:	2b40      	cmp	r3, #64	@ 0x40
 8010b24:	d109      	bne.n	8010b3a <UART_DMAError+0x62>
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	2b22      	cmp	r3, #34	@ 0x22
 8010b2a:	d106      	bne.n	8010b3a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010b34:	6978      	ldr	r0, [r7, #20]
 8010b36:	f7ff feb4 	bl	80108a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b40:	f043 0210 	orr.w	r2, r3, #16
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b4a:	6978      	ldr	r0, [r7, #20]
 8010b4c:	f7ff f9ca 	bl	800fee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b50:	bf00      	nop
 8010b52:	3718      	adds	r7, #24
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f7ff f9b8 	bl	800fee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b74:	bf00      	nop
 8010b76:	3710      	adds	r7, #16
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b088      	sub	sp, #32
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	e853 3f00 	ldrex	r3, [r3]
 8010b90:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b98:	61fb      	str	r3, [r7, #28]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	61bb      	str	r3, [r7, #24]
 8010ba4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba6:	6979      	ldr	r1, [r7, #20]
 8010ba8:	69ba      	ldr	r2, [r7, #24]
 8010baa:	e841 2300 	strex	r3, r2, [r1]
 8010bae:	613b      	str	r3, [r7, #16]
   return(result);
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d1e6      	bne.n	8010b84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2220      	movs	r2, #32
 8010bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff f979 	bl	800febc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bca:	bf00      	nop
 8010bcc:	3720      	adds	r7, #32
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}

08010bd2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010bd2:	b480      	push	{r7}
 8010bd4:	b083      	sub	sp, #12
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010bda:	bf00      	nop
 8010bdc:	370c      	adds	r7, #12
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr

08010be6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010be6:	b480      	push	{r7}
 8010be8:	b083      	sub	sp, #12
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010bee:	bf00      	nop
 8010bf0:	370c      	adds	r7, #12
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr

08010bfa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010bfa:	b480      	push	{r7}
 8010bfc:	b083      	sub	sp, #12
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010c02:	bf00      	nop
 8010c04:	370c      	adds	r7, #12
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr

08010c0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010c0e:	b480      	push	{r7}
 8010c10:	b085      	sub	sp, #20
 8010c12:	af00      	add	r7, sp, #0
 8010c14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d101      	bne.n	8010c24 <HAL_UARTEx_DisableFifoMode+0x16>
 8010c20:	2302      	movs	r3, #2
 8010c22:	e027      	b.n	8010c74 <HAL_UARTEx_DisableFifoMode+0x66>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2201      	movs	r2, #1
 8010c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2224      	movs	r2, #36	@ 0x24
 8010c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f022 0201 	bic.w	r2, r2, #1
 8010c4a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010c52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2200      	movs	r2, #0
 8010c58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	68fa      	ldr	r2, [r7, #12]
 8010c60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2220      	movs	r2, #32
 8010c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c72:	2300      	movs	r3, #0
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3714      	adds	r7, #20
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr

08010c80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d101      	bne.n	8010c98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010c94:	2302      	movs	r3, #2
 8010c96:	e02d      	b.n	8010cf4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2224      	movs	r2, #36	@ 0x24
 8010ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f022 0201 	bic.w	r2, r2, #1
 8010cbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	689b      	ldr	r3, [r3, #8]
 8010cc6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	683a      	ldr	r2, [r7, #0]
 8010cd0:	430a      	orrs	r2, r1
 8010cd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 f84f 	bl	8010d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2220      	movs	r2, #32
 8010ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2200      	movs	r2, #0
 8010cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010cf2:	2300      	movs	r3, #0
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3710      	adds	r7, #16
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d101      	bne.n	8010d14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010d10:	2302      	movs	r3, #2
 8010d12:	e02d      	b.n	8010d70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2201      	movs	r2, #1
 8010d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2224      	movs	r2, #36	@ 0x24
 8010d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	681a      	ldr	r2, [r3, #0]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f022 0201 	bic.w	r2, r2, #1
 8010d3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	689b      	ldr	r3, [r3, #8]
 8010d42:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	683a      	ldr	r2, [r7, #0]
 8010d4c:	430a      	orrs	r2, r1
 8010d4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 f811 	bl	8010d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	68fa      	ldr	r2, [r7, #12]
 8010d5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2220      	movs	r2, #32
 8010d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010d6e:	2300      	movs	r3, #0
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3710      	adds	r7, #16
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b085      	sub	sp, #20
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d108      	bne.n	8010d9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2201      	movs	r2, #1
 8010d94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d98:	e031      	b.n	8010dfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d9a:	2308      	movs	r3, #8
 8010d9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d9e:	2308      	movs	r3, #8
 8010da0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	0e5b      	lsrs	r3, r3, #25
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	f003 0307 	and.w	r3, r3, #7
 8010db0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	689b      	ldr	r3, [r3, #8]
 8010db8:	0f5b      	lsrs	r3, r3, #29
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	f003 0307 	and.w	r3, r3, #7
 8010dc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010dc2:	7bbb      	ldrb	r3, [r7, #14]
 8010dc4:	7b3a      	ldrb	r2, [r7, #12]
 8010dc6:	4911      	ldr	r1, [pc, #68]	@ (8010e0c <UARTEx_SetNbDataToProcess+0x94>)
 8010dc8:	5c8a      	ldrb	r2, [r1, r2]
 8010dca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010dce:	7b3a      	ldrb	r2, [r7, #12]
 8010dd0:	490f      	ldr	r1, [pc, #60]	@ (8010e10 <UARTEx_SetNbDataToProcess+0x98>)
 8010dd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010dd8:	b29a      	uxth	r2, r3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010de0:	7bfb      	ldrb	r3, [r7, #15]
 8010de2:	7b7a      	ldrb	r2, [r7, #13]
 8010de4:	4909      	ldr	r1, [pc, #36]	@ (8010e0c <UARTEx_SetNbDataToProcess+0x94>)
 8010de6:	5c8a      	ldrb	r2, [r1, r2]
 8010de8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010dec:	7b7a      	ldrb	r2, [r7, #13]
 8010dee:	4908      	ldr	r1, [pc, #32]	@ (8010e10 <UARTEx_SetNbDataToProcess+0x98>)
 8010df0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010df6:	b29a      	uxth	r2, r3
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010dfe:	bf00      	nop
 8010e00:	3714      	adds	r7, #20
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop
 8010e0c:	08021adc 	.word	0x08021adc
 8010e10:	08021ae4 	.word	0x08021ae4

08010e14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b085      	sub	sp, #20
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010e24:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010e28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3714      	adds	r7, #20
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr

08010e42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010e42:	b480      	push	{r7}
 8010e44:	b085      	sub	sp, #20
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010e4a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010e4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	43db      	mvns	r3, r3
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	4013      	ands	r3, r2
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010e6a:	2300      	movs	r3, #0
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3714      	adds	r7, #20
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	1d3b      	adds	r3, r7, #4
 8010e82:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2201      	movs	r2, #1
 8010e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2200      	movs	r2, #0
 8010e92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8010ea6:	2300      	movs	r3, #0
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b0a7      	sub	sp, #156	@ 0x9c
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	881b      	ldrh	r3, [r3, #0]
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8010ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010eda:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	78db      	ldrb	r3, [r3, #3]
 8010ee2:	2b03      	cmp	r3, #3
 8010ee4:	d81f      	bhi.n	8010f26 <USB_ActivateEndpoint+0x72>
 8010ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8010eec <USB_ActivateEndpoint+0x38>)
 8010ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eec:	08010efd 	.word	0x08010efd
 8010ef0:	08010f19 	.word	0x08010f19
 8010ef4:	08010f2f 	.word	0x08010f2f
 8010ef8:	08010f0b 	.word	0x08010f0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010efc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010f00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010f04:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010f08:	e012      	b.n	8010f30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010f0a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010f0e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8010f12:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010f16:	e00b      	b.n	8010f30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010f18:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010f1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010f20:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010f24:	e004      	b.n	8010f30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010f26:	2301      	movs	r3, #1
 8010f28:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8010f2c:	e000      	b.n	8010f30 <USB_ActivateEndpoint+0x7c>
      break;
 8010f2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	441a      	add	r2, r3
 8010f3a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010f52:	687a      	ldr	r2, [r7, #4]
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	009b      	lsls	r3, r3, #2
 8010f5a:	4413      	add	r3, r2
 8010f5c:	881b      	ldrh	r3, [r3, #0]
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	b21b      	sxth	r3, r3
 8010f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f6a:	b21a      	sxth	r2, r3
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	b21b      	sxth	r3, r3
 8010f72:	4313      	orrs	r3, r2
 8010f74:	b21b      	sxth	r3, r3
 8010f76:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	441a      	add	r2, r3
 8010f84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8010f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	7b1b      	ldrb	r3, [r3, #12]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f040 8180 	bne.w	80112a6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	785b      	ldrb	r3, [r3, #1]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f000 8084 	beq.w	80110b8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	61bb      	str	r3, [r7, #24]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	61bb      	str	r3, [r7, #24]
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	00da      	lsls	r2, r3, #3
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	4413      	add	r3, r2
 8010fce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010fd2:	617b      	str	r3, [r7, #20]
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	88db      	ldrh	r3, [r3, #6]
 8010fd8:	085b      	lsrs	r3, r3, #1
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	005b      	lsls	r3, r3, #1
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010fe4:	687a      	ldr	r2, [r7, #4]
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	009b      	lsls	r3, r3, #2
 8010fec:	4413      	add	r3, r2
 8010fee:	881b      	ldrh	r3, [r3, #0]
 8010ff0:	827b      	strh	r3, [r7, #18]
 8010ff2:	8a7b      	ldrh	r3, [r7, #18]
 8010ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d01b      	beq.n	8011034 <USB_ActivateEndpoint+0x180>
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	4413      	add	r3, r2
 8011006:	881b      	ldrh	r3, [r3, #0]
 8011008:	b29b      	uxth	r3, r3
 801100a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801100e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011012:	823b      	strh	r3, [r7, #16]
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	441a      	add	r2, r3
 801101e:	8a3b      	ldrh	r3, [r7, #16]
 8011020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801102c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011030:	b29b      	uxth	r3, r3
 8011032:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	78db      	ldrb	r3, [r3, #3]
 8011038:	2b01      	cmp	r3, #1
 801103a:	d020      	beq.n	801107e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	009b      	lsls	r3, r3, #2
 8011044:	4413      	add	r3, r2
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	b29b      	uxth	r3, r3
 801104a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801104e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011052:	81bb      	strh	r3, [r7, #12]
 8011054:	89bb      	ldrh	r3, [r7, #12]
 8011056:	f083 0320 	eor.w	r3, r3, #32
 801105a:	81bb      	strh	r3, [r7, #12]
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	009b      	lsls	r3, r3, #2
 8011064:	441a      	add	r2, r3
 8011066:	89bb      	ldrh	r3, [r7, #12]
 8011068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801106c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011078:	b29b      	uxth	r3, r3
 801107a:	8013      	strh	r3, [r2, #0]
 801107c:	e3f9      	b.n	8011872 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	009b      	lsls	r3, r3, #2
 8011086:	4413      	add	r3, r2
 8011088:	881b      	ldrh	r3, [r3, #0]
 801108a:	b29b      	uxth	r3, r3
 801108c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011094:	81fb      	strh	r3, [r7, #14]
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	009b      	lsls	r3, r3, #2
 801109e:	441a      	add	r2, r3
 80110a0:	89fb      	ldrh	r3, [r7, #14]
 80110a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	8013      	strh	r3, [r2, #0]
 80110b6:	e3dc      	b.n	8011872 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	461a      	mov	r2, r3
 80110c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110c8:	4413      	add	r3, r2
 80110ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	00da      	lsls	r2, r3, #3
 80110d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110d4:	4413      	add	r3, r2
 80110d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80110da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	88db      	ldrh	r3, [r3, #6]
 80110e0:	085b      	lsrs	r3, r3, #1
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	005b      	lsls	r3, r3, #1
 80110e6:	b29a      	uxth	r2, r3
 80110e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	461a      	mov	r2, r3
 80110fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110fc:	4413      	add	r3, r2
 80110fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	00da      	lsls	r2, r3, #3
 8011106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011108:	4413      	add	r3, r2
 801110a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801110e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011112:	881b      	ldrh	r3, [r3, #0]
 8011114:	b29b      	uxth	r3, r3
 8011116:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801111a:	b29a      	uxth	r2, r3
 801111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801111e:	801a      	strh	r2, [r3, #0]
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	691b      	ldr	r3, [r3, #16]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d10a      	bne.n	801113e <USB_ActivateEndpoint+0x28a>
 8011128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	b29b      	uxth	r3, r3
 801112e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011136:	b29a      	uxth	r2, r3
 8011138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801113a:	801a      	strh	r2, [r3, #0]
 801113c:	e041      	b.n	80111c2 <USB_ActivateEndpoint+0x30e>
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	691b      	ldr	r3, [r3, #16]
 8011142:	2b3e      	cmp	r3, #62	@ 0x3e
 8011144:	d81c      	bhi.n	8011180 <USB_ActivateEndpoint+0x2cc>
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	691b      	ldr	r3, [r3, #16]
 801114a:	085b      	lsrs	r3, r3, #1
 801114c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	691b      	ldr	r3, [r3, #16]
 8011154:	f003 0301 	and.w	r3, r3, #1
 8011158:	2b00      	cmp	r3, #0
 801115a:	d004      	beq.n	8011166 <USB_ActivateEndpoint+0x2b2>
 801115c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011160:	3301      	adds	r3, #1
 8011162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011168:	881b      	ldrh	r3, [r3, #0]
 801116a:	b29a      	uxth	r2, r3
 801116c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011170:	b29b      	uxth	r3, r3
 8011172:	029b      	lsls	r3, r3, #10
 8011174:	b29b      	uxth	r3, r3
 8011176:	4313      	orrs	r3, r2
 8011178:	b29a      	uxth	r2, r3
 801117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801117c:	801a      	strh	r2, [r3, #0]
 801117e:	e020      	b.n	80111c2 <USB_ActivateEndpoint+0x30e>
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	691b      	ldr	r3, [r3, #16]
 8011184:	095b      	lsrs	r3, r3, #5
 8011186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	691b      	ldr	r3, [r3, #16]
 801118e:	f003 031f 	and.w	r3, r3, #31
 8011192:	2b00      	cmp	r3, #0
 8011194:	d104      	bne.n	80111a0 <USB_ActivateEndpoint+0x2ec>
 8011196:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801119a:	3b01      	subs	r3, #1
 801119c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80111a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	029b      	lsls	r3, r3, #10
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	4313      	orrs	r3, r2
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111bc:	b29a      	uxth	r2, r3
 80111be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	4413      	add	r3, r2
 80111cc:	881b      	ldrh	r3, [r3, #0]
 80111ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80111d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80111d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d01b      	beq.n	8011212 <USB_ActivateEndpoint+0x35e>
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	4413      	add	r3, r2
 80111e4:	881b      	ldrh	r3, [r3, #0]
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80111ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111f0:	843b      	strh	r3, [r7, #32]
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	441a      	add	r2, r3
 80111fc:	8c3b      	ldrh	r3, [r7, #32]
 80111fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011206:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801120a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801120e:	b29b      	uxth	r3, r3
 8011210:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d124      	bne.n	8011264 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	4413      	add	r3, r2
 8011224:	881b      	ldrh	r3, [r3, #0]
 8011226:	b29b      	uxth	r3, r3
 8011228:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801122c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011230:	83bb      	strh	r3, [r7, #28]
 8011232:	8bbb      	ldrh	r3, [r7, #28]
 8011234:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011238:	83bb      	strh	r3, [r7, #28]
 801123a:	8bbb      	ldrh	r3, [r7, #28]
 801123c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011240:	83bb      	strh	r3, [r7, #28]
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	441a      	add	r2, r3
 801124c:	8bbb      	ldrh	r3, [r7, #28]
 801124e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011252:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801125a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801125e:	b29b      	uxth	r3, r3
 8011260:	8013      	strh	r3, [r2, #0]
 8011262:	e306      	b.n	8011872 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	009b      	lsls	r3, r3, #2
 801126c:	4413      	add	r3, r2
 801126e:	881b      	ldrh	r3, [r3, #0]
 8011270:	b29b      	uxth	r3, r3
 8011272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801127a:	83fb      	strh	r3, [r7, #30]
 801127c:	8bfb      	ldrh	r3, [r7, #30]
 801127e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011282:	83fb      	strh	r3, [r7, #30]
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	441a      	add	r2, r3
 801128e:	8bfb      	ldrh	r3, [r7, #30]
 8011290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801129c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	8013      	strh	r3, [r2, #0]
 80112a4:	e2e5      	b.n	8011872 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	78db      	ldrb	r3, [r3, #3]
 80112aa:	2b02      	cmp	r3, #2
 80112ac:	d11e      	bne.n	80112ec <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	009b      	lsls	r3, r3, #2
 80112b6:	4413      	add	r3, r2
 80112b8:	881b      	ldrh	r3, [r3, #0]
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80112c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112c4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	441a      	add	r2, r3
 80112d2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80112d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80112e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	8013      	strh	r3, [r2, #0]
 80112ea:	e01d      	b.n	8011328 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	4413      	add	r3, r2
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80112fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011302:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	441a      	add	r2, r3
 8011310:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8011314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801131c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011324:	b29b      	uxth	r3, r3
 8011326:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011332:	b29b      	uxth	r3, r3
 8011334:	461a      	mov	r2, r3
 8011336:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011338:	4413      	add	r3, r2
 801133a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	00da      	lsls	r2, r3, #3
 8011342:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011344:	4413      	add	r3, r2
 8011346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801134a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	891b      	ldrh	r3, [r3, #8]
 8011350:	085b      	lsrs	r3, r3, #1
 8011352:	b29b      	uxth	r3, r3
 8011354:	005b      	lsls	r3, r3, #1
 8011356:	b29a      	uxth	r2, r3
 8011358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801135a:	801a      	strh	r2, [r3, #0]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	677b      	str	r3, [r7, #116]	@ 0x74
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011366:	b29b      	uxth	r3, r3
 8011368:	461a      	mov	r2, r3
 801136a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801136c:	4413      	add	r3, r2
 801136e:	677b      	str	r3, [r7, #116]	@ 0x74
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	00da      	lsls	r2, r3, #3
 8011376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011378:	4413      	add	r3, r2
 801137a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801137e:	673b      	str	r3, [r7, #112]	@ 0x70
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	895b      	ldrh	r3, [r3, #10]
 8011384:	085b      	lsrs	r3, r3, #1
 8011386:	b29b      	uxth	r3, r3
 8011388:	005b      	lsls	r3, r3, #1
 801138a:	b29a      	uxth	r2, r3
 801138c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801138e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	785b      	ldrb	r3, [r3, #1]
 8011394:	2b00      	cmp	r3, #0
 8011396:	f040 81af 	bne.w	80116f8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	4413      	add	r3, r2
 80113a4:	881b      	ldrh	r3, [r3, #0]
 80113a6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80113aa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80113ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d01d      	beq.n	80113f2 <USB_ActivateEndpoint+0x53e>
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	4413      	add	r3, r2
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80113c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113cc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	441a      	add	r2, r3
 80113da:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80113de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80113ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	009b      	lsls	r3, r3, #2
 80113fa:	4413      	add	r3, r2
 80113fc:	881b      	ldrh	r3, [r3, #0]
 80113fe:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8011402:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8011406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801140a:	2b00      	cmp	r3, #0
 801140c:	d01d      	beq.n	801144a <USB_ActivateEndpoint+0x596>
 801140e:	687a      	ldr	r2, [r7, #4]
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	4413      	add	r3, r2
 8011418:	881b      	ldrh	r3, [r3, #0]
 801141a:	b29b      	uxth	r3, r3
 801141c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011424:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	009b      	lsls	r3, r3, #2
 8011430:	441a      	add	r2, r3
 8011432:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8011436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801143a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801143e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011442:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011446:	b29b      	uxth	r3, r3
 8011448:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	785b      	ldrb	r3, [r3, #1]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d16b      	bne.n	801152a <USB_ActivateEndpoint+0x676>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801145c:	b29b      	uxth	r3, r3
 801145e:	461a      	mov	r2, r3
 8011460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011462:	4413      	add	r3, r2
 8011464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	00da      	lsls	r2, r3, #3
 801146c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801146e:	4413      	add	r3, r2
 8011470:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011478:	881b      	ldrh	r3, [r3, #0]
 801147a:	b29b      	uxth	r3, r3
 801147c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011480:	b29a      	uxth	r2, r3
 8011482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011484:	801a      	strh	r2, [r3, #0]
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	691b      	ldr	r3, [r3, #16]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d10a      	bne.n	80114a4 <USB_ActivateEndpoint+0x5f0>
 801148e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011490:	881b      	ldrh	r3, [r3, #0]
 8011492:	b29b      	uxth	r3, r3
 8011494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801149c:	b29a      	uxth	r2, r3
 801149e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114a0:	801a      	strh	r2, [r3, #0]
 80114a2:	e05d      	b.n	8011560 <USB_ActivateEndpoint+0x6ac>
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	691b      	ldr	r3, [r3, #16]
 80114a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80114aa:	d81c      	bhi.n	80114e6 <USB_ActivateEndpoint+0x632>
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	691b      	ldr	r3, [r3, #16]
 80114b0:	085b      	lsrs	r3, r3, #1
 80114b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	691b      	ldr	r3, [r3, #16]
 80114ba:	f003 0301 	and.w	r3, r3, #1
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d004      	beq.n	80114cc <USB_ActivateEndpoint+0x618>
 80114c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80114c6:	3301      	adds	r3, #1
 80114c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80114cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114ce:	881b      	ldrh	r3, [r3, #0]
 80114d0:	b29a      	uxth	r2, r3
 80114d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	029b      	lsls	r3, r3, #10
 80114da:	b29b      	uxth	r3, r3
 80114dc:	4313      	orrs	r3, r2
 80114de:	b29a      	uxth	r2, r3
 80114e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114e2:	801a      	strh	r2, [r3, #0]
 80114e4:	e03c      	b.n	8011560 <USB_ActivateEndpoint+0x6ac>
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	691b      	ldr	r3, [r3, #16]
 80114ea:	095b      	lsrs	r3, r3, #5
 80114ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	691b      	ldr	r3, [r3, #16]
 80114f4:	f003 031f 	and.w	r3, r3, #31
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d104      	bne.n	8011506 <USB_ActivateEndpoint+0x652>
 80114fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011500:	3b01      	subs	r3, #1
 8011502:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011508:	881b      	ldrh	r3, [r3, #0]
 801150a:	b29a      	uxth	r2, r3
 801150c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011510:	b29b      	uxth	r3, r3
 8011512:	029b      	lsls	r3, r3, #10
 8011514:	b29b      	uxth	r3, r3
 8011516:	4313      	orrs	r3, r2
 8011518:	b29b      	uxth	r3, r3
 801151a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801151e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011522:	b29a      	uxth	r2, r3
 8011524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011526:	801a      	strh	r2, [r3, #0]
 8011528:	e01a      	b.n	8011560 <USB_ActivateEndpoint+0x6ac>
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	785b      	ldrb	r3, [r3, #1]
 801152e:	2b01      	cmp	r3, #1
 8011530:	d116      	bne.n	8011560 <USB_ActivateEndpoint+0x6ac>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	657b      	str	r3, [r7, #84]	@ 0x54
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801153c:	b29b      	uxth	r3, r3
 801153e:	461a      	mov	r2, r3
 8011540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011542:	4413      	add	r3, r2
 8011544:	657b      	str	r3, [r7, #84]	@ 0x54
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	00da      	lsls	r2, r3, #3
 801154c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801154e:	4413      	add	r3, r2
 8011550:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011554:	653b      	str	r3, [r7, #80]	@ 0x50
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	691b      	ldr	r3, [r3, #16]
 801155a:	b29a      	uxth	r2, r3
 801155c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801155e:	801a      	strh	r2, [r3, #0]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	647b      	str	r3, [r7, #68]	@ 0x44
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	785b      	ldrb	r3, [r3, #1]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d16b      	bne.n	8011644 <USB_ActivateEndpoint+0x790>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011576:	b29b      	uxth	r3, r3
 8011578:	461a      	mov	r2, r3
 801157a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801157c:	4413      	add	r3, r2
 801157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	00da      	lsls	r2, r3, #3
 8011586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011588:	4413      	add	r3, r2
 801158a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801158e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	b29b      	uxth	r3, r3
 8011596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801159a:	b29a      	uxth	r2, r3
 801159c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801159e:	801a      	strh	r2, [r3, #0]
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	691b      	ldr	r3, [r3, #16]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d10a      	bne.n	80115be <USB_ActivateEndpoint+0x70a>
 80115a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115aa:	881b      	ldrh	r3, [r3, #0]
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ba:	801a      	strh	r2, [r3, #0]
 80115bc:	e05b      	b.n	8011676 <USB_ActivateEndpoint+0x7c2>
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	691b      	ldr	r3, [r3, #16]
 80115c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80115c4:	d81c      	bhi.n	8011600 <USB_ActivateEndpoint+0x74c>
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	691b      	ldr	r3, [r3, #16]
 80115ca:	085b      	lsrs	r3, r3, #1
 80115cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	691b      	ldr	r3, [r3, #16]
 80115d4:	f003 0301 	and.w	r3, r3, #1
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d004      	beq.n	80115e6 <USB_ActivateEndpoint+0x732>
 80115dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80115e0:	3301      	adds	r3, #1
 80115e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80115e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115e8:	881b      	ldrh	r3, [r3, #0]
 80115ea:	b29a      	uxth	r2, r3
 80115ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	029b      	lsls	r3, r3, #10
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	4313      	orrs	r3, r2
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115fc:	801a      	strh	r2, [r3, #0]
 80115fe:	e03a      	b.n	8011676 <USB_ActivateEndpoint+0x7c2>
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	691b      	ldr	r3, [r3, #16]
 8011604:	095b      	lsrs	r3, r3, #5
 8011606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	691b      	ldr	r3, [r3, #16]
 801160e:	f003 031f 	and.w	r3, r3, #31
 8011612:	2b00      	cmp	r3, #0
 8011614:	d104      	bne.n	8011620 <USB_ActivateEndpoint+0x76c>
 8011616:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801161a:	3b01      	subs	r3, #1
 801161c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011622:	881b      	ldrh	r3, [r3, #0]
 8011624:	b29a      	uxth	r2, r3
 8011626:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801162a:	b29b      	uxth	r3, r3
 801162c:	029b      	lsls	r3, r3, #10
 801162e:	b29b      	uxth	r3, r3
 8011630:	4313      	orrs	r3, r2
 8011632:	b29b      	uxth	r3, r3
 8011634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801163c:	b29a      	uxth	r2, r3
 801163e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011640:	801a      	strh	r2, [r3, #0]
 8011642:	e018      	b.n	8011676 <USB_ActivateEndpoint+0x7c2>
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	785b      	ldrb	r3, [r3, #1]
 8011648:	2b01      	cmp	r3, #1
 801164a:	d114      	bne.n	8011676 <USB_ActivateEndpoint+0x7c2>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011652:	b29b      	uxth	r3, r3
 8011654:	461a      	mov	r2, r3
 8011656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011658:	4413      	add	r3, r2
 801165a:	647b      	str	r3, [r7, #68]	@ 0x44
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	00da      	lsls	r2, r3, #3
 8011662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011664:	4413      	add	r3, r2
 8011666:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801166a:	643b      	str	r3, [r7, #64]	@ 0x40
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	691b      	ldr	r3, [r3, #16]
 8011670:	b29a      	uxth	r2, r3
 8011672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011674:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011676:	687a      	ldr	r2, [r7, #4]
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	4413      	add	r3, r2
 8011680:	881b      	ldrh	r3, [r3, #0]
 8011682:	b29b      	uxth	r3, r3
 8011684:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801168c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801168e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011690:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011694:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011696:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011698:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801169c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	009b      	lsls	r3, r3, #2
 80116a6:	441a      	add	r2, r3
 80116a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80116aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	4413      	add	r3, r2
 80116c8:	881b      	ldrh	r3, [r3, #0]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80116d4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	441a      	add	r2, r3
 80116e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80116e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	8013      	strh	r3, [r2, #0]
 80116f6:	e0bc      	b.n	8011872 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	4413      	add	r3, r2
 8011702:	881b      	ldrh	r3, [r3, #0]
 8011704:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8011708:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801170c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011710:	2b00      	cmp	r3, #0
 8011712:	d01d      	beq.n	8011750 <USB_ActivateEndpoint+0x89c>
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	4413      	add	r3, r2
 801171e:	881b      	ldrh	r3, [r3, #0]
 8011720:	b29b      	uxth	r3, r3
 8011722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801172a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	009b      	lsls	r3, r3, #2
 8011736:	441a      	add	r2, r3
 8011738:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801173c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801174c:	b29b      	uxth	r3, r3
 801174e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011750:	687a      	ldr	r2, [r7, #4]
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	4413      	add	r3, r2
 801175a:	881b      	ldrh	r3, [r3, #0]
 801175c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011760:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011768:	2b00      	cmp	r3, #0
 801176a:	d01d      	beq.n	80117a8 <USB_ActivateEndpoint+0x8f4>
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	009b      	lsls	r3, r3, #2
 8011774:	4413      	add	r3, r2
 8011776:	881b      	ldrh	r3, [r3, #0]
 8011778:	b29b      	uxth	r3, r3
 801177a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801177e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011782:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	441a      	add	r2, r3
 8011790:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801179c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	78db      	ldrb	r3, [r3, #3]
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d024      	beq.n	80117fa <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4413      	add	r3, r2
 80117ba:	881b      	ldrh	r3, [r3, #0]
 80117bc:	b29b      	uxth	r3, r3
 80117be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80117c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117c6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80117ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80117ce:	f083 0320 	eor.w	r3, r3, #32
 80117d2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	441a      	add	r2, r3
 80117e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80117e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	8013      	strh	r3, [r2, #0]
 80117f8:	e01d      	b.n	8011836 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	4413      	add	r3, r2
 8011804:	881b      	ldrh	r3, [r3, #0]
 8011806:	b29b      	uxth	r3, r3
 8011808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801180c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011810:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	009b      	lsls	r3, r3, #2
 801181c:	441a      	add	r2, r3
 801181e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801182a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801182e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011832:	b29b      	uxth	r3, r3
 8011834:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	009b      	lsls	r3, r3, #2
 801183e:	4413      	add	r3, r2
 8011840:	881b      	ldrh	r3, [r3, #0]
 8011842:	b29b      	uxth	r3, r3
 8011844:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011848:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801184c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	009b      	lsls	r3, r3, #2
 8011858:	441a      	add	r2, r3
 801185a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801185e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801186a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801186e:	b29b      	uxth	r3, r3
 8011870:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011872:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011876:	4618      	mov	r0, r3
 8011878:	379c      	adds	r7, #156	@ 0x9c
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop

08011884 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011884:	b480      	push	{r7}
 8011886:	b08d      	sub	sp, #52	@ 0x34
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	7b1b      	ldrb	r3, [r3, #12]
 8011892:	2b00      	cmp	r3, #0
 8011894:	f040 808e 	bne.w	80119b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	785b      	ldrb	r3, [r3, #1]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d044      	beq.n	801192a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	4413      	add	r3, r2
 80118aa:	881b      	ldrh	r3, [r3, #0]
 80118ac:	81bb      	strh	r3, [r7, #12]
 80118ae:	89bb      	ldrh	r3, [r7, #12]
 80118b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d01b      	beq.n	80118f0 <USB_DeactivateEndpoint+0x6c>
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	009b      	lsls	r3, r3, #2
 80118c0:	4413      	add	r3, r2
 80118c2:	881b      	ldrh	r3, [r3, #0]
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80118ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118ce:	817b      	strh	r3, [r7, #10]
 80118d0:	687a      	ldr	r2, [r7, #4]
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	781b      	ldrb	r3, [r3, #0]
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	441a      	add	r2, r3
 80118da:	897b      	ldrh	r3, [r7, #10]
 80118dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80118f0:	687a      	ldr	r2, [r7, #4]
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	009b      	lsls	r3, r3, #2
 80118f8:	4413      	add	r3, r2
 80118fa:	881b      	ldrh	r3, [r3, #0]
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011906:	813b      	strh	r3, [r7, #8]
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	441a      	add	r2, r3
 8011912:	893b      	ldrh	r3, [r7, #8]
 8011914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801191c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011924:	b29b      	uxth	r3, r3
 8011926:	8013      	strh	r3, [r2, #0]
 8011928:	e192      	b.n	8011c50 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	4413      	add	r3, r2
 8011934:	881b      	ldrh	r3, [r3, #0]
 8011936:	827b      	strh	r3, [r7, #18]
 8011938:	8a7b      	ldrh	r3, [r7, #18]
 801193a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801193e:	2b00      	cmp	r3, #0
 8011940:	d01b      	beq.n	801197a <USB_DeactivateEndpoint+0xf6>
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	4413      	add	r3, r2
 801194c:	881b      	ldrh	r3, [r3, #0]
 801194e:	b29b      	uxth	r3, r3
 8011950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011958:	823b      	strh	r3, [r7, #16]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	009b      	lsls	r3, r3, #2
 8011962:	441a      	add	r2, r3
 8011964:	8a3b      	ldrh	r3, [r7, #16]
 8011966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801196a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801196e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011976:	b29b      	uxth	r3, r3
 8011978:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801197a:	687a      	ldr	r2, [r7, #4]
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	4413      	add	r3, r2
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	b29b      	uxth	r3, r3
 8011988:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801198c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011990:	81fb      	strh	r3, [r7, #14]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	441a      	add	r2, r3
 801199c:	89fb      	ldrh	r3, [r7, #14]
 801199e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	8013      	strh	r3, [r2, #0]
 80119b2:	e14d      	b.n	8011c50 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	785b      	ldrb	r3, [r3, #1]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	f040 80a5 	bne.w	8011b08 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	4413      	add	r3, r2
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	843b      	strh	r3, [r7, #32]
 80119cc:	8c3b      	ldrh	r3, [r7, #32]
 80119ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d01b      	beq.n	8011a0e <USB_DeactivateEndpoint+0x18a>
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	009b      	lsls	r3, r3, #2
 80119de:	4413      	add	r3, r2
 80119e0:	881b      	ldrh	r3, [r3, #0]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119ec:	83fb      	strh	r3, [r7, #30]
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	009b      	lsls	r3, r3, #2
 80119f6:	441a      	add	r2, r3
 80119f8:	8bfb      	ldrh	r3, [r7, #30]
 80119fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	009b      	lsls	r3, r3, #2
 8011a16:	4413      	add	r3, r2
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	83bb      	strh	r3, [r7, #28]
 8011a1c:	8bbb      	ldrh	r3, [r7, #28]
 8011a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d01b      	beq.n	8011a5e <USB_DeactivateEndpoint+0x1da>
 8011a26:	687a      	ldr	r2, [r7, #4]
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	009b      	lsls	r3, r3, #2
 8011a2e:	4413      	add	r3, r2
 8011a30:	881b      	ldrh	r3, [r3, #0]
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a3c:	837b      	strh	r3, [r7, #26]
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	441a      	add	r2, r3
 8011a48:	8b7b      	ldrh	r3, [r7, #26]
 8011a4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011a5e:	687a      	ldr	r2, [r7, #4]
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	4413      	add	r3, r2
 8011a68:	881b      	ldrh	r3, [r3, #0]
 8011a6a:	b29b      	uxth	r3, r3
 8011a6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a74:	833b      	strh	r3, [r7, #24]
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	009b      	lsls	r3, r3, #2
 8011a7e:	441a      	add	r2, r3
 8011a80:	8b3b      	ldrh	r3, [r7, #24]
 8011a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	009b      	lsls	r3, r3, #2
 8011a9e:	4413      	add	r3, r2
 8011aa0:	881b      	ldrh	r3, [r3, #0]
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011aac:	82fb      	strh	r3, [r7, #22]
 8011aae:	687a      	ldr	r2, [r7, #4]
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	441a      	add	r2, r3
 8011ab8:	8afb      	ldrh	r3, [r7, #22]
 8011aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011abe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ace:	687a      	ldr	r2, [r7, #4]
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	4413      	add	r3, r2
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ae4:	82bb      	strh	r3, [r7, #20]
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	441a      	add	r2, r3
 8011af0:	8abb      	ldrh	r3, [r7, #20]
 8011af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011af6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	8013      	strh	r3, [r2, #0]
 8011b06:	e0a3      	b.n	8011c50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	881b      	ldrh	r3, [r3, #0]
 8011b14:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011b16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d01b      	beq.n	8011b58 <USB_DeactivateEndpoint+0x2d4>
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	4413      	add	r3, r2
 8011b2a:	881b      	ldrh	r3, [r3, #0]
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b36:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	441a      	add	r2, r3
 8011b42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	4413      	add	r3, r2
 8011b62:	881b      	ldrh	r3, [r3, #0]
 8011b64:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011b66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d01b      	beq.n	8011ba8 <USB_DeactivateEndpoint+0x324>
 8011b70:	687a      	ldr	r2, [r7, #4]
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	4413      	add	r3, r2
 8011b7a:	881b      	ldrh	r3, [r3, #0]
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b86:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	441a      	add	r2, r3
 8011b92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011b94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ba0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011ba8:	687a      	ldr	r2, [r7, #4]
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	4413      	add	r3, r2
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bbe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	441a      	add	r2, r3
 8011bca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	009b      	lsls	r3, r3, #2
 8011be8:	4413      	add	r3, r2
 8011bea:	881b      	ldrh	r3, [r3, #0]
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011bf6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	009b      	lsls	r3, r3, #2
 8011c00:	441a      	add	r2, r3
 8011c02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011c18:	687a      	ldr	r2, [r7, #4]
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	4413      	add	r3, r2
 8011c22:	881b      	ldrh	r3, [r3, #0]
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	009b      	lsls	r3, r3, #2
 8011c38:	441a      	add	r2, r3
 8011c3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011c50:	2300      	movs	r3, #0
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3734      	adds	r7, #52	@ 0x34
 8011c56:	46bd      	mov	sp, r7
 8011c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5c:	4770      	bx	lr

08011c5e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011c5e:	b580      	push	{r7, lr}
 8011c60:	b0ac      	sub	sp, #176	@ 0xb0
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	785b      	ldrb	r3, [r3, #1]
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	f040 84ca 	bne.w	8012606 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	699a      	ldr	r2, [r3, #24]
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	691b      	ldr	r3, [r3, #16]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d904      	bls.n	8011c88 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	691b      	ldr	r3, [r3, #16]
 8011c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011c86:	e003      	b.n	8011c90 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	699b      	ldr	r3, [r3, #24]
 8011c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	7b1b      	ldrb	r3, [r3, #12]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d122      	bne.n	8011cde <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	6959      	ldr	r1, [r3, #20]
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	88da      	ldrh	r2, [r3, #6]
 8011ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f000 febd 	bl	8012a26 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	613b      	str	r3, [r7, #16]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	461a      	mov	r2, r3
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	4413      	add	r3, r2
 8011cbe:	613b      	str	r3, [r7, #16]
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	00da      	lsls	r2, r3, #3
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	4413      	add	r3, r2
 8011cca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011cce:	60fb      	str	r3, [r7, #12]
 8011cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	801a      	strh	r2, [r3, #0]
 8011cda:	f000 bc6f 	b.w	80125bc <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	78db      	ldrb	r3, [r3, #3]
 8011ce2:	2b02      	cmp	r3, #2
 8011ce4:	f040 831e 	bne.w	8012324 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	6a1a      	ldr	r2, [r3, #32]
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	691b      	ldr	r3, [r3, #16]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	f240 82cf 	bls.w	8012294 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	4413      	add	r3, r2
 8011d00:	881b      	ldrh	r3, [r3, #0]
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d0c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	441a      	add	r2, r3
 8011d1a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8011d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d26:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	6a1a      	ldr	r2, [r3, #32]
 8011d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d3a:	1ad2      	subs	r2, r2, r3
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	781b      	ldrb	r3, [r3, #0]
 8011d46:	009b      	lsls	r3, r3, #2
 8011d48:	4413      	add	r3, r2
 8011d4a:	881b      	ldrh	r3, [r3, #0]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f000 814f 	beq.w	8011ff6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	785b      	ldrb	r3, [r3, #1]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d16b      	bne.n	8011e3c <USB_EPStartXfer+0x1de>
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	461a      	mov	r2, r3
 8011d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d74:	4413      	add	r3, r2
 8011d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	00da      	lsls	r2, r3, #3
 8011d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d80:	4413      	add	r3, r2
 8011d82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d8a:	881b      	ldrh	r3, [r3, #0]
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d96:	801a      	strh	r2, [r3, #0]
 8011d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d10a      	bne.n	8011db6 <USB_EPStartXfer+0x158>
 8011da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011da2:	881b      	ldrh	r3, [r3, #0]
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011db2:	801a      	strh	r2, [r3, #0]
 8011db4:	e05b      	b.n	8011e6e <USB_EPStartXfer+0x210>
 8011db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011dba:	2b3e      	cmp	r3, #62	@ 0x3e
 8011dbc:	d81c      	bhi.n	8011df8 <USB_EPStartXfer+0x19a>
 8011dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011dc2:	085b      	lsrs	r3, r3, #1
 8011dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011dcc:	f003 0301 	and.w	r3, r3, #1
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d004      	beq.n	8011dde <USB_EPStartXfer+0x180>
 8011dd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011dd8:	3301      	adds	r3, #1
 8011dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de0:	881b      	ldrh	r3, [r3, #0]
 8011de2:	b29a      	uxth	r2, r3
 8011de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	029b      	lsls	r3, r3, #10
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	4313      	orrs	r3, r2
 8011df0:	b29a      	uxth	r2, r3
 8011df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df4:	801a      	strh	r2, [r3, #0]
 8011df6:	e03a      	b.n	8011e6e <USB_EPStartXfer+0x210>
 8011df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011dfc:	095b      	lsrs	r3, r3, #5
 8011dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e06:	f003 031f 	and.w	r3, r3, #31
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d104      	bne.n	8011e18 <USB_EPStartXfer+0x1ba>
 8011e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e12:	3b01      	subs	r3, #1
 8011e14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e1a:	881b      	ldrh	r3, [r3, #0]
 8011e1c:	b29a      	uxth	r2, r3
 8011e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	029b      	lsls	r3, r3, #10
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	4313      	orrs	r3, r2
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e38:	801a      	strh	r2, [r3, #0]
 8011e3a:	e018      	b.n	8011e6e <USB_EPStartXfer+0x210>
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	785b      	ldrb	r3, [r3, #1]
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d114      	bne.n	8011e6e <USB_EPStartXfer+0x210>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e50:	4413      	add	r3, r2
 8011e52:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	00da      	lsls	r2, r3, #3
 8011e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e5c:	4413      	add	r3, r2
 8011e5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e68:	b29a      	uxth	r2, r3
 8011e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	895b      	ldrh	r3, [r3, #10]
 8011e72:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	6959      	ldr	r1, [r3, #20]
 8011e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f000 fdce 	bl	8012a26 <USB_WritePMA>
            ep->xfer_buff += len;
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	695a      	ldr	r2, [r3, #20]
 8011e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e92:	441a      	add	r2, r3
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	6a1a      	ldr	r2, [r3, #32]
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	691b      	ldr	r3, [r3, #16]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d907      	bls.n	8011eb4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	6a1a      	ldr	r2, [r3, #32]
 8011ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011eac:	1ad2      	subs	r2, r2, r3
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	621a      	str	r2, [r3, #32]
 8011eb2:	e006      	b.n	8011ec2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	6a1b      	ldr	r3, [r3, #32]
 8011eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	785b      	ldrb	r3, [r3, #1]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d16b      	bne.n	8011fa2 <USB_EPStartXfer+0x344>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	61bb      	str	r3, [r7, #24]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	4413      	add	r3, r2
 8011edc:	61bb      	str	r3, [r7, #24]
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	00da      	lsls	r2, r3, #3
 8011ee4:	69bb      	ldr	r3, [r7, #24]
 8011ee6:	4413      	add	r3, r2
 8011ee8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011eec:	617b      	str	r3, [r7, #20]
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	881b      	ldrh	r3, [r3, #0]
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	801a      	strh	r2, [r3, #0]
 8011efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d10a      	bne.n	8011f1c <USB_EPStartXfer+0x2be>
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	881b      	ldrh	r3, [r3, #0]
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f14:	b29a      	uxth	r2, r3
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	801a      	strh	r2, [r3, #0]
 8011f1a:	e05d      	b.n	8011fd8 <USB_EPStartXfer+0x37a>
 8011f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f20:	2b3e      	cmp	r3, #62	@ 0x3e
 8011f22:	d81c      	bhi.n	8011f5e <USB_EPStartXfer+0x300>
 8011f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f28:	085b      	lsrs	r3, r3, #1
 8011f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f32:	f003 0301 	and.w	r3, r3, #1
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d004      	beq.n	8011f44 <USB_EPStartXfer+0x2e6>
 8011f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011f3e:	3301      	adds	r3, #1
 8011f40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	881b      	ldrh	r3, [r3, #0]
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	029b      	lsls	r3, r3, #10
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	4313      	orrs	r3, r2
 8011f56:	b29a      	uxth	r2, r3
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	801a      	strh	r2, [r3, #0]
 8011f5c:	e03c      	b.n	8011fd8 <USB_EPStartXfer+0x37a>
 8011f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f62:	095b      	lsrs	r3, r3, #5
 8011f64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f6c:	f003 031f 	and.w	r3, r3, #31
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d104      	bne.n	8011f7e <USB_EPStartXfer+0x320>
 8011f74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	029b      	lsls	r3, r3, #10
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	801a      	strh	r2, [r3, #0]
 8011fa0:	e01a      	b.n	8011fd8 <USB_EPStartXfer+0x37a>
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	785b      	ldrb	r3, [r3, #1]
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d116      	bne.n	8011fd8 <USB_EPStartXfer+0x37a>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	623b      	str	r3, [r7, #32]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	6a3b      	ldr	r3, [r7, #32]
 8011fba:	4413      	add	r3, r2
 8011fbc:	623b      	str	r3, [r7, #32]
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	00da      	lsls	r2, r3, #3
 8011fc4:	6a3b      	ldr	r3, [r7, #32]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011fcc:	61fb      	str	r3, [r7, #28]
 8011fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fd2:	b29a      	uxth	r2, r3
 8011fd4:	69fb      	ldr	r3, [r7, #28]
 8011fd6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	891b      	ldrh	r3, [r3, #8]
 8011fdc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	6959      	ldr	r1, [r3, #20]
 8011fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 fd19 	bl	8012a26 <USB_WritePMA>
 8011ff4:	e2e2      	b.n	80125bc <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	785b      	ldrb	r3, [r3, #1]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d16b      	bne.n	80120d6 <USB_EPStartXfer+0x478>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012008:	b29b      	uxth	r3, r3
 801200a:	461a      	mov	r2, r3
 801200c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801200e:	4413      	add	r3, r2
 8012010:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	00da      	lsls	r2, r3, #3
 8012018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801201a:	4413      	add	r3, r2
 801201c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012020:	647b      	str	r3, [r7, #68]	@ 0x44
 8012022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012024:	881b      	ldrh	r3, [r3, #0]
 8012026:	b29b      	uxth	r3, r3
 8012028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801202c:	b29a      	uxth	r2, r3
 801202e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012030:	801a      	strh	r2, [r3, #0]
 8012032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012036:	2b00      	cmp	r3, #0
 8012038:	d10a      	bne.n	8012050 <USB_EPStartXfer+0x3f2>
 801203a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801203c:	881b      	ldrh	r3, [r3, #0]
 801203e:	b29b      	uxth	r3, r3
 8012040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012048:	b29a      	uxth	r2, r3
 801204a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801204c:	801a      	strh	r2, [r3, #0]
 801204e:	e05d      	b.n	801210c <USB_EPStartXfer+0x4ae>
 8012050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012054:	2b3e      	cmp	r3, #62	@ 0x3e
 8012056:	d81c      	bhi.n	8012092 <USB_EPStartXfer+0x434>
 8012058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801205c:	085b      	lsrs	r3, r3, #1
 801205e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012066:	f003 0301 	and.w	r3, r3, #1
 801206a:	2b00      	cmp	r3, #0
 801206c:	d004      	beq.n	8012078 <USB_EPStartXfer+0x41a>
 801206e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012072:	3301      	adds	r3, #1
 8012074:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	b29a      	uxth	r2, r3
 801207e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012082:	b29b      	uxth	r3, r3
 8012084:	029b      	lsls	r3, r3, #10
 8012086:	b29b      	uxth	r3, r3
 8012088:	4313      	orrs	r3, r2
 801208a:	b29a      	uxth	r2, r3
 801208c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801208e:	801a      	strh	r2, [r3, #0]
 8012090:	e03c      	b.n	801210c <USB_EPStartXfer+0x4ae>
 8012092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012096:	095b      	lsrs	r3, r3, #5
 8012098:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801209c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120a0:	f003 031f 	and.w	r3, r3, #31
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d104      	bne.n	80120b2 <USB_EPStartXfer+0x454>
 80120a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80120ac:	3b01      	subs	r3, #1
 80120ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80120b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120b4:	881b      	ldrh	r3, [r3, #0]
 80120b6:	b29a      	uxth	r2, r3
 80120b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80120bc:	b29b      	uxth	r3, r3
 80120be:	029b      	lsls	r3, r3, #10
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	4313      	orrs	r3, r2
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120ce:	b29a      	uxth	r2, r3
 80120d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120d2:	801a      	strh	r2, [r3, #0]
 80120d4:	e01a      	b.n	801210c <USB_EPStartXfer+0x4ae>
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	785b      	ldrb	r3, [r3, #1]
 80120da:	2b01      	cmp	r3, #1
 80120dc:	d116      	bne.n	801210c <USB_EPStartXfer+0x4ae>
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	461a      	mov	r2, r3
 80120ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120ee:	4413      	add	r3, r2
 80120f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	781b      	ldrb	r3, [r3, #0]
 80120f6:	00da      	lsls	r2, r3, #3
 80120f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120fa:	4413      	add	r3, r2
 80120fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012106:	b29a      	uxth	r2, r3
 8012108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801210a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	891b      	ldrh	r3, [r3, #8]
 8012110:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	6959      	ldr	r1, [r3, #20]
 8012118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801211c:	b29b      	uxth	r3, r3
 801211e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 fc7f 	bl	8012a26 <USB_WritePMA>
            ep->xfer_buff += len;
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	695a      	ldr	r2, [r3, #20]
 801212c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012130:	441a      	add	r2, r3
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	6a1a      	ldr	r2, [r3, #32]
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	691b      	ldr	r3, [r3, #16]
 801213e:	429a      	cmp	r2, r3
 8012140:	d907      	bls.n	8012152 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	6a1a      	ldr	r2, [r3, #32]
 8012146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801214a:	1ad2      	subs	r2, r2, r3
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	621a      	str	r2, [r3, #32]
 8012150:	e006      	b.n	8012160 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	6a1b      	ldr	r3, [r3, #32]
 8012156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	2200      	movs	r2, #0
 801215e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	643b      	str	r3, [r7, #64]	@ 0x40
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	785b      	ldrb	r3, [r3, #1]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d16b      	bne.n	8012244 <USB_EPStartXfer+0x5e6>
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012176:	b29b      	uxth	r3, r3
 8012178:	461a      	mov	r2, r3
 801217a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801217c:	4413      	add	r3, r2
 801217e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	00da      	lsls	r2, r3, #3
 8012186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012188:	4413      	add	r3, r2
 801218a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801218e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012192:	881b      	ldrh	r3, [r3, #0]
 8012194:	b29b      	uxth	r3, r3
 8012196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801219a:	b29a      	uxth	r2, r3
 801219c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801219e:	801a      	strh	r2, [r3, #0]
 80121a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d10a      	bne.n	80121be <USB_EPStartXfer+0x560>
 80121a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121aa:	881b      	ldrh	r3, [r3, #0]
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121b6:	b29a      	uxth	r2, r3
 80121b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ba:	801a      	strh	r2, [r3, #0]
 80121bc:	e05b      	b.n	8012276 <USB_EPStartXfer+0x618>
 80121be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80121c4:	d81c      	bhi.n	8012200 <USB_EPStartXfer+0x5a2>
 80121c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121ca:	085b      	lsrs	r3, r3, #1
 80121cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80121d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121d4:	f003 0301 	and.w	r3, r3, #1
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d004      	beq.n	80121e6 <USB_EPStartXfer+0x588>
 80121dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80121e0:	3301      	adds	r3, #1
 80121e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80121e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121e8:	881b      	ldrh	r3, [r3, #0]
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	029b      	lsls	r3, r3, #10
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	4313      	orrs	r3, r2
 80121f8:	b29a      	uxth	r2, r3
 80121fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121fc:	801a      	strh	r2, [r3, #0]
 80121fe:	e03a      	b.n	8012276 <USB_EPStartXfer+0x618>
 8012200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012204:	095b      	lsrs	r3, r3, #5
 8012206:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801220a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801220e:	f003 031f 	and.w	r3, r3, #31
 8012212:	2b00      	cmp	r3, #0
 8012214:	d104      	bne.n	8012220 <USB_EPStartXfer+0x5c2>
 8012216:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801221a:	3b01      	subs	r3, #1
 801221c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012222:	881b      	ldrh	r3, [r3, #0]
 8012224:	b29a      	uxth	r2, r3
 8012226:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801222a:	b29b      	uxth	r3, r3
 801222c:	029b      	lsls	r3, r3, #10
 801222e:	b29b      	uxth	r3, r3
 8012230:	4313      	orrs	r3, r2
 8012232:	b29b      	uxth	r3, r3
 8012234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801223c:	b29a      	uxth	r2, r3
 801223e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012240:	801a      	strh	r2, [r3, #0]
 8012242:	e018      	b.n	8012276 <USB_EPStartXfer+0x618>
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	785b      	ldrb	r3, [r3, #1]
 8012248:	2b01      	cmp	r3, #1
 801224a:	d114      	bne.n	8012276 <USB_EPStartXfer+0x618>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012252:	b29b      	uxth	r3, r3
 8012254:	461a      	mov	r2, r3
 8012256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012258:	4413      	add	r3, r2
 801225a:	643b      	str	r3, [r7, #64]	@ 0x40
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	00da      	lsls	r2, r3, #3
 8012262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012264:	4413      	add	r3, r2
 8012266:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801226a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801226c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012270:	b29a      	uxth	r2, r3
 8012272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012274:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	895b      	ldrh	r3, [r3, #10]
 801227a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	6959      	ldr	r1, [r3, #20]
 8012282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012286:	b29b      	uxth	r3, r3
 8012288:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 fbca 	bl	8012a26 <USB_WritePMA>
 8012292:	e193      	b.n	80125bc <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	6a1b      	ldr	r3, [r3, #32]
 8012298:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	009b      	lsls	r3, r3, #2
 80122a4:	4413      	add	r3, r2
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80122ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80122b2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80122b6:	687a      	ldr	r2, [r7, #4]
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	009b      	lsls	r3, r3, #2
 80122be:	441a      	add	r2, r3
 80122c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80122c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80122c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80122cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80122d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	461a      	mov	r2, r3
 80122e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122e8:	4413      	add	r3, r2
 80122ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	00da      	lsls	r2, r3, #3
 80122f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122f4:	4413      	add	r3, r2
 80122f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80122fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80122fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012300:	b29a      	uxth	r2, r3
 8012302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012304:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	891b      	ldrh	r3, [r3, #8]
 801230a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	6959      	ldr	r1, [r3, #20]
 8012312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012316:	b29b      	uxth	r3, r3
 8012318:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 fb82 	bl	8012a26 <USB_WritePMA>
 8012322:	e14b      	b.n	80125bc <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	6a1a      	ldr	r2, [r3, #32]
 8012328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801232c:	1ad2      	subs	r2, r2, r3
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	009b      	lsls	r3, r3, #2
 801233a:	4413      	add	r3, r2
 801233c:	881b      	ldrh	r3, [r3, #0]
 801233e:	b29b      	uxth	r3, r3
 8012340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012344:	2b00      	cmp	r3, #0
 8012346:	f000 809a 	beq.w	801247e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	673b      	str	r3, [r7, #112]	@ 0x70
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	785b      	ldrb	r3, [r3, #1]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d16b      	bne.n	801242e <USB_EPStartXfer+0x7d0>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	66bb      	str	r3, [r7, #104]	@ 0x68
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012360:	b29b      	uxth	r3, r3
 8012362:	461a      	mov	r2, r3
 8012364:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012366:	4413      	add	r3, r2
 8012368:	66bb      	str	r3, [r7, #104]	@ 0x68
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	00da      	lsls	r2, r3, #3
 8012370:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012372:	4413      	add	r3, r2
 8012374:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012378:	667b      	str	r3, [r7, #100]	@ 0x64
 801237a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801237c:	881b      	ldrh	r3, [r3, #0]
 801237e:	b29b      	uxth	r3, r3
 8012380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012384:	b29a      	uxth	r2, r3
 8012386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012388:	801a      	strh	r2, [r3, #0]
 801238a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10a      	bne.n	80123a8 <USB_EPStartXfer+0x74a>
 8012392:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	b29b      	uxth	r3, r3
 8012398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801239c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80123a4:	801a      	strh	r2, [r3, #0]
 80123a6:	e05b      	b.n	8012460 <USB_EPStartXfer+0x802>
 80123a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80123ae:	d81c      	bhi.n	80123ea <USB_EPStartXfer+0x78c>
 80123b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123b4:	085b      	lsrs	r3, r3, #1
 80123b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80123ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123be:	f003 0301 	and.w	r3, r3, #1
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d004      	beq.n	80123d0 <USB_EPStartXfer+0x772>
 80123c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80123ca:	3301      	adds	r3, #1
 80123cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80123d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80123d2:	881b      	ldrh	r3, [r3, #0]
 80123d4:	b29a      	uxth	r2, r3
 80123d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80123da:	b29b      	uxth	r3, r3
 80123dc:	029b      	lsls	r3, r3, #10
 80123de:	b29b      	uxth	r3, r3
 80123e0:	4313      	orrs	r3, r2
 80123e2:	b29a      	uxth	r2, r3
 80123e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80123e6:	801a      	strh	r2, [r3, #0]
 80123e8:	e03a      	b.n	8012460 <USB_EPStartXfer+0x802>
 80123ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123ee:	095b      	lsrs	r3, r3, #5
 80123f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80123f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123f8:	f003 031f 	and.w	r3, r3, #31
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d104      	bne.n	801240a <USB_EPStartXfer+0x7ac>
 8012400:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012404:	3b01      	subs	r3, #1
 8012406:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801240a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801240c:	881b      	ldrh	r3, [r3, #0]
 801240e:	b29a      	uxth	r2, r3
 8012410:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012414:	b29b      	uxth	r3, r3
 8012416:	029b      	lsls	r3, r3, #10
 8012418:	b29b      	uxth	r3, r3
 801241a:	4313      	orrs	r3, r2
 801241c:	b29b      	uxth	r3, r3
 801241e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012426:	b29a      	uxth	r2, r3
 8012428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801242a:	801a      	strh	r2, [r3, #0]
 801242c:	e018      	b.n	8012460 <USB_EPStartXfer+0x802>
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	785b      	ldrb	r3, [r3, #1]
 8012432:	2b01      	cmp	r3, #1
 8012434:	d114      	bne.n	8012460 <USB_EPStartXfer+0x802>
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801243c:	b29b      	uxth	r3, r3
 801243e:	461a      	mov	r2, r3
 8012440:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012442:	4413      	add	r3, r2
 8012444:	673b      	str	r3, [r7, #112]	@ 0x70
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	00da      	lsls	r2, r3, #3
 801244c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801244e:	4413      	add	r3, r2
 8012450:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012454:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801245a:	b29a      	uxth	r2, r3
 801245c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801245e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	895b      	ldrh	r3, [r3, #10]
 8012464:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	6959      	ldr	r1, [r3, #20]
 801246c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012470:	b29b      	uxth	r3, r3
 8012472:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f000 fad5 	bl	8012a26 <USB_WritePMA>
 801247c:	e09e      	b.n	80125bc <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	785b      	ldrb	r3, [r3, #1]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d16b      	bne.n	801255e <USB_EPStartXfer+0x900>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012490:	b29b      	uxth	r3, r3
 8012492:	461a      	mov	r2, r3
 8012494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012496:	4413      	add	r3, r2
 8012498:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	781b      	ldrb	r3, [r3, #0]
 801249e:	00da      	lsls	r2, r3, #3
 80124a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80124a2:	4413      	add	r3, r2
 80124a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80124a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80124aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80124ac:	881b      	ldrh	r3, [r3, #0]
 80124ae:	b29b      	uxth	r3, r3
 80124b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80124b4:	b29a      	uxth	r2, r3
 80124b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80124b8:	801a      	strh	r2, [r3, #0]
 80124ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d10a      	bne.n	80124d8 <USB_EPStartXfer+0x87a>
 80124c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80124c4:	881b      	ldrh	r3, [r3, #0]
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80124d4:	801a      	strh	r2, [r3, #0]
 80124d6:	e063      	b.n	80125a0 <USB_EPStartXfer+0x942>
 80124d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80124de:	d81c      	bhi.n	801251a <USB_EPStartXfer+0x8bc>
 80124e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124e4:	085b      	lsrs	r3, r3, #1
 80124e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80124ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124ee:	f003 0301 	and.w	r3, r3, #1
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d004      	beq.n	8012500 <USB_EPStartXfer+0x8a2>
 80124f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80124fa:	3301      	adds	r3, #1
 80124fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012500:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	b29a      	uxth	r2, r3
 8012506:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801250a:	b29b      	uxth	r3, r3
 801250c:	029b      	lsls	r3, r3, #10
 801250e:	b29b      	uxth	r3, r3
 8012510:	4313      	orrs	r3, r2
 8012512:	b29a      	uxth	r2, r3
 8012514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012516:	801a      	strh	r2, [r3, #0]
 8012518:	e042      	b.n	80125a0 <USB_EPStartXfer+0x942>
 801251a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801251e:	095b      	lsrs	r3, r3, #5
 8012520:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012528:	f003 031f 	and.w	r3, r3, #31
 801252c:	2b00      	cmp	r3, #0
 801252e:	d104      	bne.n	801253a <USB_EPStartXfer+0x8dc>
 8012530:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012534:	3b01      	subs	r3, #1
 8012536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801253a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801253c:	881b      	ldrh	r3, [r3, #0]
 801253e:	b29a      	uxth	r2, r3
 8012540:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012544:	b29b      	uxth	r3, r3
 8012546:	029b      	lsls	r3, r3, #10
 8012548:	b29b      	uxth	r3, r3
 801254a:	4313      	orrs	r3, r2
 801254c:	b29b      	uxth	r3, r3
 801254e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012556:	b29a      	uxth	r2, r3
 8012558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801255a:	801a      	strh	r2, [r3, #0]
 801255c:	e020      	b.n	80125a0 <USB_EPStartXfer+0x942>
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	785b      	ldrb	r3, [r3, #1]
 8012562:	2b01      	cmp	r3, #1
 8012564:	d11c      	bne.n	80125a0 <USB_EPStartXfer+0x942>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012572:	b29b      	uxth	r3, r3
 8012574:	461a      	mov	r2, r3
 8012576:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801257a:	4413      	add	r3, r2
 801257c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	00da      	lsls	r2, r3, #3
 8012586:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801258a:	4413      	add	r3, r2
 801258c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012590:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012598:	b29a      	uxth	r2, r3
 801259a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801259e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	891b      	ldrh	r3, [r3, #8]
 80125a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	6959      	ldr	r1, [r3, #20]
 80125ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 fa35 	bl	8012a26 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80125bc:	687a      	ldr	r2, [r7, #4]
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	009b      	lsls	r3, r3, #2
 80125c4:	4413      	add	r3, r2
 80125c6:	881b      	ldrh	r3, [r3, #0]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80125ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80125d2:	817b      	strh	r3, [r7, #10]
 80125d4:	897b      	ldrh	r3, [r7, #10]
 80125d6:	f083 0310 	eor.w	r3, r3, #16
 80125da:	817b      	strh	r3, [r7, #10]
 80125dc:	897b      	ldrh	r3, [r7, #10]
 80125de:	f083 0320 	eor.w	r3, r3, #32
 80125e2:	817b      	strh	r3, [r7, #10]
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	009b      	lsls	r3, r3, #2
 80125ec:	441a      	add	r2, r3
 80125ee:	897b      	ldrh	r3, [r7, #10]
 80125f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80125f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80125f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80125fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012600:	b29b      	uxth	r3, r3
 8012602:	8013      	strh	r3, [r2, #0]
 8012604:	e0d5      	b.n	80127b2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	7b1b      	ldrb	r3, [r3, #12]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d156      	bne.n	80126bc <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	699b      	ldr	r3, [r3, #24]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d122      	bne.n	801265c <USB_EPStartXfer+0x9fe>
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	78db      	ldrb	r3, [r3, #3]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d11e      	bne.n	801265c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	009b      	lsls	r3, r3, #2
 8012626:	4413      	add	r3, r2
 8012628:	881b      	ldrh	r3, [r3, #0]
 801262a:	b29b      	uxth	r3, r3
 801262c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012634:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	009b      	lsls	r3, r3, #2
 8012640:	441a      	add	r2, r3
 8012642:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801264a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801264e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8012652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012656:	b29b      	uxth	r3, r3
 8012658:	8013      	strh	r3, [r2, #0]
 801265a:	e01d      	b.n	8012698 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	009b      	lsls	r3, r3, #2
 8012664:	4413      	add	r3, r2
 8012666:	881b      	ldrh	r3, [r3, #0]
 8012668:	b29b      	uxth	r3, r3
 801266a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801266e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012672:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	009b      	lsls	r3, r3, #2
 801267e:	441a      	add	r2, r3
 8012680:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8012684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801268c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012694:	b29b      	uxth	r3, r3
 8012696:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	699a      	ldr	r2, [r3, #24]
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	691b      	ldr	r3, [r3, #16]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d907      	bls.n	80126b4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	699a      	ldr	r2, [r3, #24]
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	691b      	ldr	r3, [r3, #16]
 80126ac:	1ad2      	subs	r2, r2, r3
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	619a      	str	r2, [r3, #24]
 80126b2:	e054      	b.n	801275e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	2200      	movs	r2, #0
 80126b8:	619a      	str	r2, [r3, #24]
 80126ba:	e050      	b.n	801275e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	78db      	ldrb	r3, [r3, #3]
 80126c0:	2b02      	cmp	r3, #2
 80126c2:	d142      	bne.n	801274a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	69db      	ldr	r3, [r3, #28]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d048      	beq.n	801275e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	4413      	add	r3, r2
 80126d6:	881b      	ldrh	r3, [r3, #0]
 80126d8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80126dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80126e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d005      	beq.n	80126f4 <USB_EPStartXfer+0xa96>
 80126e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80126ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d10b      	bne.n	801270c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80126f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80126f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d12e      	bne.n	801275e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012700:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012708:	2b00      	cmp	r3, #0
 801270a:	d128      	bne.n	801275e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801270c:	687a      	ldr	r2, [r7, #4]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	009b      	lsls	r3, r3, #2
 8012714:	4413      	add	r3, r2
 8012716:	881b      	ldrh	r3, [r3, #0]
 8012718:	b29b      	uxth	r3, r3
 801271a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801271e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012722:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	009b      	lsls	r3, r3, #2
 801272e:	441a      	add	r2, r3
 8012730:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801273c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012740:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012744:	b29b      	uxth	r3, r3
 8012746:	8013      	strh	r3, [r2, #0]
 8012748:	e009      	b.n	801275e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	78db      	ldrb	r3, [r3, #3]
 801274e:	2b01      	cmp	r3, #1
 8012750:	d103      	bne.n	801275a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	2200      	movs	r2, #0
 8012756:	619a      	str	r2, [r3, #24]
 8012758:	e001      	b.n	801275e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 801275a:	2301      	movs	r3, #1
 801275c:	e02a      	b.n	80127b4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	4413      	add	r3, r2
 8012768:	881b      	ldrh	r3, [r3, #0]
 801276a:	b29b      	uxth	r3, r3
 801276c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012774:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012778:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801277c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012780:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012784:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012788:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801278c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	009b      	lsls	r3, r3, #2
 8012798:	441a      	add	r2, r3
 801279a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801279e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80127a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80127a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80127aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80127b2:	2300      	movs	r3, #0
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	37b0      	adds	r7, #176	@ 0xb0
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80127bc:	b480      	push	{r7}
 80127be:	b085      	sub	sp, #20
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	785b      	ldrb	r3, [r3, #1]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d020      	beq.n	8012810 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	4413      	add	r3, r2
 80127d8:	881b      	ldrh	r3, [r3, #0]
 80127da:	b29b      	uxth	r3, r3
 80127dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80127e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80127e4:	81bb      	strh	r3, [r7, #12]
 80127e6:	89bb      	ldrh	r3, [r7, #12]
 80127e8:	f083 0310 	eor.w	r3, r3, #16
 80127ec:	81bb      	strh	r3, [r7, #12]
 80127ee:	687a      	ldr	r2, [r7, #4]
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	009b      	lsls	r3, r3, #2
 80127f6:	441a      	add	r2, r3
 80127f8:	89bb      	ldrh	r3, [r7, #12]
 80127fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80127fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801280a:	b29b      	uxth	r3, r3
 801280c:	8013      	strh	r3, [r2, #0]
 801280e:	e01f      	b.n	8012850 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	009b      	lsls	r3, r3, #2
 8012818:	4413      	add	r3, r2
 801281a:	881b      	ldrh	r3, [r3, #0]
 801281c:	b29b      	uxth	r3, r3
 801281e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012826:	81fb      	strh	r3, [r7, #14]
 8012828:	89fb      	ldrh	r3, [r7, #14]
 801282a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801282e:	81fb      	strh	r3, [r7, #14]
 8012830:	687a      	ldr	r2, [r7, #4]
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	009b      	lsls	r3, r3, #2
 8012838:	441a      	add	r2, r3
 801283a:	89fb      	ldrh	r3, [r7, #14]
 801283c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801284c:	b29b      	uxth	r3, r3
 801284e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012850:	2300      	movs	r3, #0
}
 8012852:	4618      	mov	r0, r3
 8012854:	3714      	adds	r7, #20
 8012856:	46bd      	mov	sp, r7
 8012858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285c:	4770      	bx	lr

0801285e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801285e:	b480      	push	{r7}
 8012860:	b087      	sub	sp, #28
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
 8012866:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	785b      	ldrb	r3, [r3, #1]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d04c      	beq.n	801290a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	4413      	add	r3, r2
 801287a:	881b      	ldrh	r3, [r3, #0]
 801287c:	823b      	strh	r3, [r7, #16]
 801287e:	8a3b      	ldrh	r3, [r7, #16]
 8012880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012884:	2b00      	cmp	r3, #0
 8012886:	d01b      	beq.n	80128c0 <USB_EPClearStall+0x62>
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	4413      	add	r3, r2
 8012892:	881b      	ldrh	r3, [r3, #0]
 8012894:	b29b      	uxth	r3, r3
 8012896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801289a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801289e:	81fb      	strh	r3, [r7, #14]
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	009b      	lsls	r3, r3, #2
 80128a8:	441a      	add	r2, r3
 80128aa:	89fb      	ldrh	r3, [r7, #14]
 80128ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80128b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80128b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80128b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80128bc:	b29b      	uxth	r3, r3
 80128be:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	78db      	ldrb	r3, [r3, #3]
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	d06c      	beq.n	80129a2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	4413      	add	r3, r2
 80128d2:	881b      	ldrh	r3, [r3, #0]
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80128da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80128de:	81bb      	strh	r3, [r7, #12]
 80128e0:	89bb      	ldrh	r3, [r7, #12]
 80128e2:	f083 0320 	eor.w	r3, r3, #32
 80128e6:	81bb      	strh	r3, [r7, #12]
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	441a      	add	r2, r3
 80128f2:	89bb      	ldrh	r3, [r7, #12]
 80128f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80128f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80128fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012904:	b29b      	uxth	r3, r3
 8012906:	8013      	strh	r3, [r2, #0]
 8012908:	e04b      	b.n	80129a2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801290a:	687a      	ldr	r2, [r7, #4]
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	009b      	lsls	r3, r3, #2
 8012912:	4413      	add	r3, r2
 8012914:	881b      	ldrh	r3, [r3, #0]
 8012916:	82fb      	strh	r3, [r7, #22]
 8012918:	8afb      	ldrh	r3, [r7, #22]
 801291a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801291e:	2b00      	cmp	r3, #0
 8012920:	d01b      	beq.n	801295a <USB_EPClearStall+0xfc>
 8012922:	687a      	ldr	r2, [r7, #4]
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	009b      	lsls	r3, r3, #2
 801292a:	4413      	add	r3, r2
 801292c:	881b      	ldrh	r3, [r3, #0]
 801292e:	b29b      	uxth	r3, r3
 8012930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012938:	82bb      	strh	r3, [r7, #20]
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	009b      	lsls	r3, r3, #2
 8012942:	441a      	add	r2, r3
 8012944:	8abb      	ldrh	r3, [r7, #20]
 8012946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801294a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801294e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012956:	b29b      	uxth	r3, r3
 8012958:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	4413      	add	r3, r2
 8012964:	881b      	ldrh	r3, [r3, #0]
 8012966:	b29b      	uxth	r3, r3
 8012968:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801296c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012970:	827b      	strh	r3, [r7, #18]
 8012972:	8a7b      	ldrh	r3, [r7, #18]
 8012974:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012978:	827b      	strh	r3, [r7, #18]
 801297a:	8a7b      	ldrh	r3, [r7, #18]
 801297c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012980:	827b      	strh	r3, [r7, #18]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	009b      	lsls	r3, r3, #2
 801298a:	441a      	add	r2, r3
 801298c:	8a7b      	ldrh	r3, [r7, #18]
 801298e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801299a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801299e:	b29b      	uxth	r3, r3
 80129a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80129a2:	2300      	movs	r3, #0
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	371c      	adds	r7, #28
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr

080129b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b083      	sub	sp, #12
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	460b      	mov	r3, r1
 80129ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80129bc:	78fb      	ldrb	r3, [r7, #3]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d103      	bne.n	80129ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2280      	movs	r2, #128	@ 0x80
 80129c6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80129ca:	2300      	movs	r3, #0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	370c      	adds	r7, #12
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80129d8:	b480      	push	{r7}
 80129da:	b083      	sub	sp, #12
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80129ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80129f0:	b29a      	uxth	r2, r3
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80129f8:	2300      	movs	r3, #0
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	370c      	adds	r7, #12
 80129fe:	46bd      	mov	sp, r7
 8012a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a04:	4770      	bx	lr

08012a06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012a06:	b480      	push	{r7}
 8012a08:	b085      	sub	sp, #20
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012a18:	68fb      	ldr	r3, [r7, #12]
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3714      	adds	r7, #20
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a24:	4770      	bx	lr

08012a26 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012a26:	b480      	push	{r7}
 8012a28:	b08b      	sub	sp, #44	@ 0x2c
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	60f8      	str	r0, [r7, #12]
 8012a2e:	60b9      	str	r1, [r7, #8]
 8012a30:	4611      	mov	r1, r2
 8012a32:	461a      	mov	r2, r3
 8012a34:	460b      	mov	r3, r1
 8012a36:	80fb      	strh	r3, [r7, #6]
 8012a38:	4613      	mov	r3, r2
 8012a3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012a3c:	88bb      	ldrh	r3, [r7, #4]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	085b      	lsrs	r3, r3, #1
 8012a42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012a4c:	88fa      	ldrh	r2, [r7, #6]
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	4413      	add	r3, r2
 8012a52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012a56:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012a58:	69bb      	ldr	r3, [r7, #24]
 8012a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a5c:	e01b      	b.n	8012a96 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012a5e:	69fb      	ldr	r3, [r7, #28]
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	3301      	adds	r3, #1
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	021b      	lsls	r3, r3, #8
 8012a6c:	b21a      	sxth	r2, r3
 8012a6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a72:	4313      	orrs	r3, r2
 8012a74:	b21b      	sxth	r3, r3
 8012a76:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012a78:	6a3b      	ldr	r3, [r7, #32]
 8012a7a:	8a7a      	ldrh	r2, [r7, #18]
 8012a7c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012a7e:	6a3b      	ldr	r3, [r7, #32]
 8012a80:	3302      	adds	r3, #2
 8012a82:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012a84:	69fb      	ldr	r3, [r7, #28]
 8012a86:	3301      	adds	r3, #1
 8012a88:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012a8a:	69fb      	ldr	r3, [r7, #28]
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a92:	3b01      	subs	r3, #1
 8012a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d1e0      	bne.n	8012a5e <USB_WritePMA+0x38>
  }
}
 8012a9c:	bf00      	nop
 8012a9e:	bf00      	nop
 8012aa0:	372c      	adds	r7, #44	@ 0x2c
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr

08012aaa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012aaa:	b480      	push	{r7}
 8012aac:	b08b      	sub	sp, #44	@ 0x2c
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	60f8      	str	r0, [r7, #12]
 8012ab2:	60b9      	str	r1, [r7, #8]
 8012ab4:	4611      	mov	r1, r2
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	460b      	mov	r3, r1
 8012aba:	80fb      	strh	r3, [r7, #6]
 8012abc:	4613      	mov	r3, r2
 8012abe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012ac0:	88bb      	ldrh	r3, [r7, #4]
 8012ac2:	085b      	lsrs	r3, r3, #1
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012ad0:	88fa      	ldrh	r2, [r7, #6]
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	4413      	add	r3, r2
 8012ad6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012ada:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012adc:	69bb      	ldr	r3, [r7, #24]
 8012ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ae0:	e018      	b.n	8012b14 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012ae2:	6a3b      	ldr	r3, [r7, #32]
 8012ae4:	881b      	ldrh	r3, [r3, #0]
 8012ae6:	b29b      	uxth	r3, r3
 8012ae8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012aea:	6a3b      	ldr	r3, [r7, #32]
 8012aec:	3302      	adds	r3, #2
 8012aee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	b2da      	uxtb	r2, r3
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012af8:	69fb      	ldr	r3, [r7, #28]
 8012afa:	3301      	adds	r3, #1
 8012afc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	0a1b      	lsrs	r3, r3, #8
 8012b02:	b2da      	uxtb	r2, r3
 8012b04:	69fb      	ldr	r3, [r7, #28]
 8012b06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012b08:	69fb      	ldr	r3, [r7, #28]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b10:	3b01      	subs	r3, #1
 8012b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d1e3      	bne.n	8012ae2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012b1a:	88bb      	ldrh	r3, [r7, #4]
 8012b1c:	f003 0301 	and.w	r3, r3, #1
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d007      	beq.n	8012b36 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012b26:	6a3b      	ldr	r3, [r7, #32]
 8012b28:	881b      	ldrh	r3, [r3, #0]
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	b2da      	uxtb	r2, r3
 8012b32:	69fb      	ldr	r3, [r7, #28]
 8012b34:	701a      	strb	r2, [r3, #0]
  }
}
 8012b36:	bf00      	nop
 8012b38:	372c      	adds	r7, #44	@ 0x2c
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b40:	4770      	bx	lr
	...

08012b44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	460b      	mov	r3, r1
 8012b4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012b50:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012b54:	f006 fa64 	bl	8019020 <USBD_static_malloc>
 8012b58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d109      	bne.n	8012b74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	32b0      	adds	r2, #176	@ 0xb0
 8012b6a:	2100      	movs	r1, #0
 8012b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012b70:	2302      	movs	r3, #2
 8012b72:	e0d4      	b.n	8012d1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012b74:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012b78:	2100      	movs	r1, #0
 8012b7a:	68f8      	ldr	r0, [r7, #12]
 8012b7c:	f008 fc71 	bl	801b462 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	32b0      	adds	r2, #176	@ 0xb0
 8012b8a:	68f9      	ldr	r1, [r7, #12]
 8012b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	32b0      	adds	r2, #176	@ 0xb0
 8012b9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	7c1b      	ldrb	r3, [r3, #16]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d138      	bne.n	8012c1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012bac:	4b5e      	ldr	r3, [pc, #376]	@ (8012d28 <USBD_CDC_Init+0x1e4>)
 8012bae:	7819      	ldrb	r1, [r3, #0]
 8012bb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012bb4:	2202      	movs	r2, #2
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	f006 f8d9 	bl	8018d6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8012d28 <USBD_CDC_Init+0x1e4>)
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	f003 020f 	and.w	r2, r3, #15
 8012bc4:	6879      	ldr	r1, [r7, #4]
 8012bc6:	4613      	mov	r3, r2
 8012bc8:	009b      	lsls	r3, r3, #2
 8012bca:	4413      	add	r3, r2
 8012bcc:	009b      	lsls	r3, r3, #2
 8012bce:	440b      	add	r3, r1
 8012bd0:	3324      	adds	r3, #36	@ 0x24
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012bd6:	4b55      	ldr	r3, [pc, #340]	@ (8012d2c <USBD_CDC_Init+0x1e8>)
 8012bd8:	7819      	ldrb	r1, [r3, #0]
 8012bda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012bde:	2202      	movs	r2, #2
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f006 f8c4 	bl	8018d6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012be6:	4b51      	ldr	r3, [pc, #324]	@ (8012d2c <USBD_CDC_Init+0x1e8>)
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	f003 020f 	and.w	r2, r3, #15
 8012bee:	6879      	ldr	r1, [r7, #4]
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	009b      	lsls	r3, r3, #2
 8012bf4:	4413      	add	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	440b      	add	r3, r1
 8012bfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012bfe:	2201      	movs	r2, #1
 8012c00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012c02:	4b4b      	ldr	r3, [pc, #300]	@ (8012d30 <USBD_CDC_Init+0x1ec>)
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	f003 020f 	and.w	r2, r3, #15
 8012c0a:	6879      	ldr	r1, [r7, #4]
 8012c0c:	4613      	mov	r3, r2
 8012c0e:	009b      	lsls	r3, r3, #2
 8012c10:	4413      	add	r3, r2
 8012c12:	009b      	lsls	r3, r3, #2
 8012c14:	440b      	add	r3, r1
 8012c16:	3326      	adds	r3, #38	@ 0x26
 8012c18:	2210      	movs	r2, #16
 8012c1a:	801a      	strh	r2, [r3, #0]
 8012c1c:	e035      	b.n	8012c8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012c1e:	4b42      	ldr	r3, [pc, #264]	@ (8012d28 <USBD_CDC_Init+0x1e4>)
 8012c20:	7819      	ldrb	r1, [r3, #0]
 8012c22:	2340      	movs	r3, #64	@ 0x40
 8012c24:	2202      	movs	r2, #2
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f006 f8a1 	bl	8018d6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8012d28 <USBD_CDC_Init+0x1e4>)
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	f003 020f 	and.w	r2, r3, #15
 8012c34:	6879      	ldr	r1, [r7, #4]
 8012c36:	4613      	mov	r3, r2
 8012c38:	009b      	lsls	r3, r3, #2
 8012c3a:	4413      	add	r3, r2
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	440b      	add	r3, r1
 8012c40:	3324      	adds	r3, #36	@ 0x24
 8012c42:	2201      	movs	r2, #1
 8012c44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012c46:	4b39      	ldr	r3, [pc, #228]	@ (8012d2c <USBD_CDC_Init+0x1e8>)
 8012c48:	7819      	ldrb	r1, [r3, #0]
 8012c4a:	2340      	movs	r3, #64	@ 0x40
 8012c4c:	2202      	movs	r2, #2
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f006 f88d 	bl	8018d6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012c54:	4b35      	ldr	r3, [pc, #212]	@ (8012d2c <USBD_CDC_Init+0x1e8>)
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	f003 020f 	and.w	r2, r3, #15
 8012c5c:	6879      	ldr	r1, [r7, #4]
 8012c5e:	4613      	mov	r3, r2
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	4413      	add	r3, r2
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	440b      	add	r3, r1
 8012c68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012c70:	4b2f      	ldr	r3, [pc, #188]	@ (8012d30 <USBD_CDC_Init+0x1ec>)
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	f003 020f 	and.w	r2, r3, #15
 8012c78:	6879      	ldr	r1, [r7, #4]
 8012c7a:	4613      	mov	r3, r2
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	4413      	add	r3, r2
 8012c80:	009b      	lsls	r3, r3, #2
 8012c82:	440b      	add	r3, r1
 8012c84:	3326      	adds	r3, #38	@ 0x26
 8012c86:	2210      	movs	r2, #16
 8012c88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012c8a:	4b29      	ldr	r3, [pc, #164]	@ (8012d30 <USBD_CDC_Init+0x1ec>)
 8012c8c:	7819      	ldrb	r1, [r3, #0]
 8012c8e:	2308      	movs	r3, #8
 8012c90:	2203      	movs	r2, #3
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f006 f86b 	bl	8018d6e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012c98:	4b25      	ldr	r3, [pc, #148]	@ (8012d30 <USBD_CDC_Init+0x1ec>)
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	f003 020f 	and.w	r2, r3, #15
 8012ca0:	6879      	ldr	r1, [r7, #4]
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	009b      	lsls	r3, r3, #2
 8012ca6:	4413      	add	r3, r2
 8012ca8:	009b      	lsls	r3, r3, #2
 8012caa:	440b      	add	r3, r1
 8012cac:	3324      	adds	r3, #36	@ 0x24
 8012cae:	2201      	movs	r2, #1
 8012cb0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012cc0:	687a      	ldr	r2, [r7, #4]
 8012cc2:	33b0      	adds	r3, #176	@ 0xb0
 8012cc4:	009b      	lsls	r3, r3, #2
 8012cc6:	4413      	add	r3, r2
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d101      	bne.n	8012cec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012ce8:	2302      	movs	r3, #2
 8012cea:	e018      	b.n	8012d1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	7c1b      	ldrb	r3, [r3, #16]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d10a      	bne.n	8012d0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8012d2c <USBD_CDC_Init+0x1e8>)
 8012cf6:	7819      	ldrb	r1, [r3, #0]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012cfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f006 f922 	bl	8018f4c <USBD_LL_PrepareReceive>
 8012d08:	e008      	b.n	8012d1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012d0a:	4b08      	ldr	r3, [pc, #32]	@ (8012d2c <USBD_CDC_Init+0x1e8>)
 8012d0c:	7819      	ldrb	r1, [r3, #0]
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012d14:	2340      	movs	r3, #64	@ 0x40
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f006 f918 	bl	8018f4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012d1c:	2300      	movs	r3, #0
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3710      	adds	r7, #16
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	200000bf 	.word	0x200000bf
 8012d2c:	200000c0 	.word	0x200000c0
 8012d30:	200000c1 	.word	0x200000c1

08012d34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	460b      	mov	r3, r1
 8012d3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012d40:	4b3a      	ldr	r3, [pc, #232]	@ (8012e2c <USBD_CDC_DeInit+0xf8>)
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	4619      	mov	r1, r3
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f006 f837 	bl	8018dba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012d4c:	4b37      	ldr	r3, [pc, #220]	@ (8012e2c <USBD_CDC_DeInit+0xf8>)
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	f003 020f 	and.w	r2, r3, #15
 8012d54:	6879      	ldr	r1, [r7, #4]
 8012d56:	4613      	mov	r3, r2
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	4413      	add	r3, r2
 8012d5c:	009b      	lsls	r3, r3, #2
 8012d5e:	440b      	add	r3, r1
 8012d60:	3324      	adds	r3, #36	@ 0x24
 8012d62:	2200      	movs	r2, #0
 8012d64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012d66:	4b32      	ldr	r3, [pc, #200]	@ (8012e30 <USBD_CDC_DeInit+0xfc>)
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f006 f824 	bl	8018dba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012d72:	4b2f      	ldr	r3, [pc, #188]	@ (8012e30 <USBD_CDC_DeInit+0xfc>)
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	f003 020f 	and.w	r2, r3, #15
 8012d7a:	6879      	ldr	r1, [r7, #4]
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	009b      	lsls	r3, r3, #2
 8012d80:	4413      	add	r3, r2
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	440b      	add	r3, r1
 8012d86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012d8e:	4b29      	ldr	r3, [pc, #164]	@ (8012e34 <USBD_CDC_DeInit+0x100>)
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	4619      	mov	r1, r3
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f006 f810 	bl	8018dba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012d9a:	4b26      	ldr	r3, [pc, #152]	@ (8012e34 <USBD_CDC_DeInit+0x100>)
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	f003 020f 	and.w	r2, r3, #15
 8012da2:	6879      	ldr	r1, [r7, #4]
 8012da4:	4613      	mov	r3, r2
 8012da6:	009b      	lsls	r3, r3, #2
 8012da8:	4413      	add	r3, r2
 8012daa:	009b      	lsls	r3, r3, #2
 8012dac:	440b      	add	r3, r1
 8012dae:	3324      	adds	r3, #36	@ 0x24
 8012db0:	2200      	movs	r2, #0
 8012db2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012db4:	4b1f      	ldr	r3, [pc, #124]	@ (8012e34 <USBD_CDC_DeInit+0x100>)
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	f003 020f 	and.w	r2, r3, #15
 8012dbc:	6879      	ldr	r1, [r7, #4]
 8012dbe:	4613      	mov	r3, r2
 8012dc0:	009b      	lsls	r3, r3, #2
 8012dc2:	4413      	add	r3, r2
 8012dc4:	009b      	lsls	r3, r3, #2
 8012dc6:	440b      	add	r3, r1
 8012dc8:	3326      	adds	r3, #38	@ 0x26
 8012dca:	2200      	movs	r2, #0
 8012dcc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	32b0      	adds	r2, #176	@ 0xb0
 8012dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d01f      	beq.n	8012e20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	33b0      	adds	r3, #176	@ 0xb0
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	4413      	add	r3, r2
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	32b0      	adds	r2, #176	@ 0xb0
 8012dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f006 f91a 	bl	801903c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	32b0      	adds	r2, #176	@ 0xb0
 8012e12:	2100      	movs	r1, #0
 8012e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012e20:	2300      	movs	r3, #0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3708      	adds	r7, #8
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	200000bf 	.word	0x200000bf
 8012e30:	200000c0 	.word	0x200000c0
 8012e34:	200000c1 	.word	0x200000c1

08012e38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b086      	sub	sp, #24
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	32b0      	adds	r2, #176	@ 0xb0
 8012e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012e52:	2300      	movs	r3, #0
 8012e54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012e56:	2300      	movs	r3, #0
 8012e58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d101      	bne.n	8012e68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012e64:	2303      	movs	r3, #3
 8012e66:	e0bf      	b.n	8012fe8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d050      	beq.n	8012f16 <USBD_CDC_Setup+0xde>
 8012e74:	2b20      	cmp	r3, #32
 8012e76:	f040 80af 	bne.w	8012fd8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	88db      	ldrh	r3, [r3, #6]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d03a      	beq.n	8012ef8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	781b      	ldrb	r3, [r3, #0]
 8012e86:	b25b      	sxtb	r3, r3
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	da1b      	bge.n	8012ec4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	33b0      	adds	r3, #176	@ 0xb0
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	4413      	add	r3, r2
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	689b      	ldr	r3, [r3, #8]
 8012e9e:	683a      	ldr	r2, [r7, #0]
 8012ea0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012ea2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012ea4:	683a      	ldr	r2, [r7, #0]
 8012ea6:	88d2      	ldrh	r2, [r2, #6]
 8012ea8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	88db      	ldrh	r3, [r3, #6]
 8012eae:	2b07      	cmp	r3, #7
 8012eb0:	bf28      	it	cs
 8012eb2:	2307      	movcs	r3, #7
 8012eb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	89fa      	ldrh	r2, [r7, #14]
 8012eba:	4619      	mov	r1, r3
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f001 fd2b 	bl	8014918 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012ec2:	e090      	b.n	8012fe6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	785a      	ldrb	r2, [r3, #1]
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	88db      	ldrh	r3, [r3, #6]
 8012ed2:	2b3f      	cmp	r3, #63	@ 0x3f
 8012ed4:	d803      	bhi.n	8012ede <USBD_CDC_Setup+0xa6>
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	88db      	ldrh	r3, [r3, #6]
 8012eda:	b2da      	uxtb	r2, r3
 8012edc:	e000      	b.n	8012ee0 <USBD_CDC_Setup+0xa8>
 8012ede:	2240      	movs	r2, #64	@ 0x40
 8012ee0:	693b      	ldr	r3, [r7, #16]
 8012ee2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012ee6:	6939      	ldr	r1, [r7, #16]
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012eee:	461a      	mov	r2, r3
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f001 fd3d 	bl	8014970 <USBD_CtlPrepareRx>
      break;
 8012ef6:	e076      	b.n	8012fe6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	33b0      	adds	r3, #176	@ 0xb0
 8012f02:	009b      	lsls	r3, r3, #2
 8012f04:	4413      	add	r3, r2
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	689b      	ldr	r3, [r3, #8]
 8012f0a:	683a      	ldr	r2, [r7, #0]
 8012f0c:	7850      	ldrb	r0, [r2, #1]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	6839      	ldr	r1, [r7, #0]
 8012f12:	4798      	blx	r3
      break;
 8012f14:	e067      	b.n	8012fe6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	785b      	ldrb	r3, [r3, #1]
 8012f1a:	2b0b      	cmp	r3, #11
 8012f1c:	d851      	bhi.n	8012fc2 <USBD_CDC_Setup+0x18a>
 8012f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8012f24 <USBD_CDC_Setup+0xec>)
 8012f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f24:	08012f55 	.word	0x08012f55
 8012f28:	08012fd1 	.word	0x08012fd1
 8012f2c:	08012fc3 	.word	0x08012fc3
 8012f30:	08012fc3 	.word	0x08012fc3
 8012f34:	08012fc3 	.word	0x08012fc3
 8012f38:	08012fc3 	.word	0x08012fc3
 8012f3c:	08012fc3 	.word	0x08012fc3
 8012f40:	08012fc3 	.word	0x08012fc3
 8012f44:	08012fc3 	.word	0x08012fc3
 8012f48:	08012fc3 	.word	0x08012fc3
 8012f4c:	08012f7f 	.word	0x08012f7f
 8012f50:	08012fa9 	.word	0x08012fa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f5a:	b2db      	uxtb	r3, r3
 8012f5c:	2b03      	cmp	r3, #3
 8012f5e:	d107      	bne.n	8012f70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012f60:	f107 030a 	add.w	r3, r7, #10
 8012f64:	2202      	movs	r2, #2
 8012f66:	4619      	mov	r1, r3
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f001 fcd5 	bl	8014918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f6e:	e032      	b.n	8012fd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012f70:	6839      	ldr	r1, [r7, #0]
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f001 fc53 	bl	801481e <USBD_CtlError>
            ret = USBD_FAIL;
 8012f78:	2303      	movs	r3, #3
 8012f7a:	75fb      	strb	r3, [r7, #23]
          break;
 8012f7c:	e02b      	b.n	8012fd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f84:	b2db      	uxtb	r3, r3
 8012f86:	2b03      	cmp	r3, #3
 8012f88:	d107      	bne.n	8012f9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012f8a:	f107 030d 	add.w	r3, r7, #13
 8012f8e:	2201      	movs	r2, #1
 8012f90:	4619      	mov	r1, r3
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f001 fcc0 	bl	8014918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f98:	e01d      	b.n	8012fd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012f9a:	6839      	ldr	r1, [r7, #0]
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f001 fc3e 	bl	801481e <USBD_CtlError>
            ret = USBD_FAIL;
 8012fa2:	2303      	movs	r3, #3
 8012fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8012fa6:	e016      	b.n	8012fd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	2b03      	cmp	r3, #3
 8012fb2:	d00f      	beq.n	8012fd4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012fb4:	6839      	ldr	r1, [r7, #0]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f001 fc31 	bl	801481e <USBD_CtlError>
            ret = USBD_FAIL;
 8012fbc:	2303      	movs	r3, #3
 8012fbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012fc0:	e008      	b.n	8012fd4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012fc2:	6839      	ldr	r1, [r7, #0]
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f001 fc2a 	bl	801481e <USBD_CtlError>
          ret = USBD_FAIL;
 8012fca:	2303      	movs	r3, #3
 8012fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8012fce:	e002      	b.n	8012fd6 <USBD_CDC_Setup+0x19e>
          break;
 8012fd0:	bf00      	nop
 8012fd2:	e008      	b.n	8012fe6 <USBD_CDC_Setup+0x1ae>
          break;
 8012fd4:	bf00      	nop
      }
      break;
 8012fd6:	e006      	b.n	8012fe6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012fd8:	6839      	ldr	r1, [r7, #0]
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f001 fc1f 	bl	801481e <USBD_CtlError>
      ret = USBD_FAIL;
 8012fe0:	2303      	movs	r3, #3
 8012fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8012fe4:	bf00      	nop
  }

  return (uint8_t)ret;
 8012fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3718      	adds	r7, #24
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b084      	sub	sp, #16
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	460b      	mov	r3, r1
 8012ffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013002:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	32b0      	adds	r2, #176	@ 0xb0
 801300e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d101      	bne.n	801301a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013016:	2303      	movs	r3, #3
 8013018:	e065      	b.n	80130e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	32b0      	adds	r2, #176	@ 0xb0
 8013024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013028:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801302a:	78fb      	ldrb	r3, [r7, #3]
 801302c:	f003 020f 	and.w	r2, r3, #15
 8013030:	6879      	ldr	r1, [r7, #4]
 8013032:	4613      	mov	r3, r2
 8013034:	009b      	lsls	r3, r3, #2
 8013036:	4413      	add	r3, r2
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	440b      	add	r3, r1
 801303c:	3318      	adds	r3, #24
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d02f      	beq.n	80130a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013044:	78fb      	ldrb	r3, [r7, #3]
 8013046:	f003 020f 	and.w	r2, r3, #15
 801304a:	6879      	ldr	r1, [r7, #4]
 801304c:	4613      	mov	r3, r2
 801304e:	009b      	lsls	r3, r3, #2
 8013050:	4413      	add	r3, r2
 8013052:	009b      	lsls	r3, r3, #2
 8013054:	440b      	add	r3, r1
 8013056:	3318      	adds	r3, #24
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	78fb      	ldrb	r3, [r7, #3]
 801305c:	f003 010f 	and.w	r1, r3, #15
 8013060:	68f8      	ldr	r0, [r7, #12]
 8013062:	460b      	mov	r3, r1
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	440b      	add	r3, r1
 8013068:	00db      	lsls	r3, r3, #3
 801306a:	4403      	add	r3, r0
 801306c:	3320      	adds	r3, #32
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	fbb2 f1f3 	udiv	r1, r2, r3
 8013074:	fb01 f303 	mul.w	r3, r1, r3
 8013078:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801307a:	2b00      	cmp	r3, #0
 801307c:	d112      	bne.n	80130a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801307e:	78fb      	ldrb	r3, [r7, #3]
 8013080:	f003 020f 	and.w	r2, r3, #15
 8013084:	6879      	ldr	r1, [r7, #4]
 8013086:	4613      	mov	r3, r2
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	4413      	add	r3, r2
 801308c:	009b      	lsls	r3, r3, #2
 801308e:	440b      	add	r3, r1
 8013090:	3318      	adds	r3, #24
 8013092:	2200      	movs	r2, #0
 8013094:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013096:	78f9      	ldrb	r1, [r7, #3]
 8013098:	2300      	movs	r3, #0
 801309a:	2200      	movs	r2, #0
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f005 ff34 	bl	8018f0a <USBD_LL_Transmit>
 80130a2:	e01f      	b.n	80130e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	2200      	movs	r2, #0
 80130a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	33b0      	adds	r3, #176	@ 0xb0
 80130b6:	009b      	lsls	r3, r3, #2
 80130b8:	4413      	add	r3, r2
 80130ba:	685b      	ldr	r3, [r3, #4]
 80130bc:	691b      	ldr	r3, [r3, #16]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d010      	beq.n	80130e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	33b0      	adds	r3, #176	@ 0xb0
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	4413      	add	r3, r2
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	68ba      	ldr	r2, [r7, #8]
 80130d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80130da:	68ba      	ldr	r2, [r7, #8]
 80130dc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80130e0:	78fa      	ldrb	r2, [r7, #3]
 80130e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80130e4:	2300      	movs	r3, #0
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3710      	adds	r7, #16
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}

080130ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80130ee:	b580      	push	{r7, lr}
 80130f0:	b084      	sub	sp, #16
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	6078      	str	r0, [r7, #4]
 80130f6:	460b      	mov	r3, r1
 80130f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	32b0      	adds	r2, #176	@ 0xb0
 8013104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013108:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	32b0      	adds	r2, #176	@ 0xb0
 8013114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d101      	bne.n	8013120 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801311c:	2303      	movs	r3, #3
 801311e:	e01a      	b.n	8013156 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013120:	78fb      	ldrb	r3, [r7, #3]
 8013122:	4619      	mov	r1, r3
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f005 ff32 	bl	8018f8e <USBD_LL_GetRxDataSize>
 801312a:	4602      	mov	r2, r0
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	33b0      	adds	r3, #176	@ 0xb0
 801313c:	009b      	lsls	r3, r3, #2
 801313e:	4413      	add	r3, r2
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	68db      	ldr	r3, [r3, #12]
 8013144:	68fa      	ldr	r2, [r7, #12]
 8013146:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801314a:	68fa      	ldr	r2, [r7, #12]
 801314c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013150:	4611      	mov	r1, r2
 8013152:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013154:	2300      	movs	r3, #0
}
 8013156:	4618      	mov	r0, r3
 8013158:	3710      	adds	r7, #16
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801315e:	b580      	push	{r7, lr}
 8013160:	b084      	sub	sp, #16
 8013162:	af00      	add	r7, sp, #0
 8013164:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	32b0      	adds	r2, #176	@ 0xb0
 8013170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013174:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d101      	bne.n	8013180 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801317c:	2303      	movs	r3, #3
 801317e:	e024      	b.n	80131ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013186:	687a      	ldr	r2, [r7, #4]
 8013188:	33b0      	adds	r3, #176	@ 0xb0
 801318a:	009b      	lsls	r3, r3, #2
 801318c:	4413      	add	r3, r2
 801318e:	685b      	ldr	r3, [r3, #4]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d019      	beq.n	80131c8 <USBD_CDC_EP0_RxReady+0x6a>
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801319a:	2bff      	cmp	r3, #255	@ 0xff
 801319c:	d014      	beq.n	80131c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80131a4:	687a      	ldr	r2, [r7, #4]
 80131a6:	33b0      	adds	r3, #176	@ 0xb0
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	4413      	add	r3, r2
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	689b      	ldr	r3, [r3, #8]
 80131b0:	68fa      	ldr	r2, [r7, #12]
 80131b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80131b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80131be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	22ff      	movs	r2, #255	@ 0xff
 80131c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80131c8:	2300      	movs	r3, #0
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3710      	adds	r7, #16
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
	...

080131d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b086      	sub	sp, #24
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80131dc:	2182      	movs	r1, #130	@ 0x82
 80131de:	4818      	ldr	r0, [pc, #96]	@ (8013240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80131e0:	f000 fcbd 	bl	8013b5e <USBD_GetEpDesc>
 80131e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80131e6:	2101      	movs	r1, #1
 80131e8:	4815      	ldr	r0, [pc, #84]	@ (8013240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80131ea:	f000 fcb8 	bl	8013b5e <USBD_GetEpDesc>
 80131ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80131f0:	2181      	movs	r1, #129	@ 0x81
 80131f2:	4813      	ldr	r0, [pc, #76]	@ (8013240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80131f4:	f000 fcb3 	bl	8013b5e <USBD_GetEpDesc>
 80131f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d002      	beq.n	8013206 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	2210      	movs	r2, #16
 8013204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d006      	beq.n	801321a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	2200      	movs	r2, #0
 8013210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013214:	711a      	strb	r2, [r3, #4]
 8013216:	2200      	movs	r2, #0
 8013218:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d006      	beq.n	801322e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	2200      	movs	r2, #0
 8013224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013228:	711a      	strb	r2, [r3, #4]
 801322a:	2200      	movs	r2, #0
 801322c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2243      	movs	r2, #67	@ 0x43
 8013232:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013234:	4b02      	ldr	r3, [pc, #8]	@ (8013240 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013236:	4618      	mov	r0, r3
 8013238:	3718      	adds	r7, #24
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	2000007c 	.word	0x2000007c

08013244 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b086      	sub	sp, #24
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801324c:	2182      	movs	r1, #130	@ 0x82
 801324e:	4818      	ldr	r0, [pc, #96]	@ (80132b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013250:	f000 fc85 	bl	8013b5e <USBD_GetEpDesc>
 8013254:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013256:	2101      	movs	r1, #1
 8013258:	4815      	ldr	r0, [pc, #84]	@ (80132b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801325a:	f000 fc80 	bl	8013b5e <USBD_GetEpDesc>
 801325e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013260:	2181      	movs	r1, #129	@ 0x81
 8013262:	4813      	ldr	r0, [pc, #76]	@ (80132b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013264:	f000 fc7b 	bl	8013b5e <USBD_GetEpDesc>
 8013268:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d002      	beq.n	8013276 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	2210      	movs	r2, #16
 8013274:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d006      	beq.n	801328a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	2200      	movs	r2, #0
 8013280:	711a      	strb	r2, [r3, #4]
 8013282:	2200      	movs	r2, #0
 8013284:	f042 0202 	orr.w	r2, r2, #2
 8013288:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d006      	beq.n	801329e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	2200      	movs	r2, #0
 8013294:	711a      	strb	r2, [r3, #4]
 8013296:	2200      	movs	r2, #0
 8013298:	f042 0202 	orr.w	r2, r2, #2
 801329c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2243      	movs	r2, #67	@ 0x43
 80132a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80132a4:	4b02      	ldr	r3, [pc, #8]	@ (80132b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3718      	adds	r7, #24
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
 80132ae:	bf00      	nop
 80132b0:	2000007c 	.word	0x2000007c

080132b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b086      	sub	sp, #24
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80132bc:	2182      	movs	r1, #130	@ 0x82
 80132be:	4818      	ldr	r0, [pc, #96]	@ (8013320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80132c0:	f000 fc4d 	bl	8013b5e <USBD_GetEpDesc>
 80132c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80132c6:	2101      	movs	r1, #1
 80132c8:	4815      	ldr	r0, [pc, #84]	@ (8013320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80132ca:	f000 fc48 	bl	8013b5e <USBD_GetEpDesc>
 80132ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80132d0:	2181      	movs	r1, #129	@ 0x81
 80132d2:	4813      	ldr	r0, [pc, #76]	@ (8013320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80132d4:	f000 fc43 	bl	8013b5e <USBD_GetEpDesc>
 80132d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d002      	beq.n	80132e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	2210      	movs	r2, #16
 80132e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d006      	beq.n	80132fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	2200      	movs	r2, #0
 80132f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80132f4:	711a      	strb	r2, [r3, #4]
 80132f6:	2200      	movs	r2, #0
 80132f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d006      	beq.n	801330e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2200      	movs	r2, #0
 8013304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013308:	711a      	strb	r2, [r3, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2243      	movs	r2, #67	@ 0x43
 8013312:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013314:	4b02      	ldr	r3, [pc, #8]	@ (8013320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013316:	4618      	mov	r0, r3
 8013318:	3718      	adds	r7, #24
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	2000007c 	.word	0x2000007c

08013324 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013324:	b480      	push	{r7}
 8013326:	b083      	sub	sp, #12
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	220a      	movs	r2, #10
 8013330:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013332:	4b03      	ldr	r3, [pc, #12]	@ (8013340 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013334:	4618      	mov	r0, r3
 8013336:	370c      	adds	r7, #12
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr
 8013340:	20000038 	.word	0x20000038

08013344 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013344:	b480      	push	{r7}
 8013346:	b083      	sub	sp, #12
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d101      	bne.n	8013358 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013354:	2303      	movs	r3, #3
 8013356:	e009      	b.n	801336c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	33b0      	adds	r3, #176	@ 0xb0
 8013362:	009b      	lsls	r3, r3, #2
 8013364:	4413      	add	r3, r2
 8013366:	683a      	ldr	r2, [r7, #0]
 8013368:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801336a:	2300      	movs	r3, #0
}
 801336c:	4618      	mov	r0, r3
 801336e:	370c      	adds	r7, #12
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr

08013378 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013378:	b480      	push	{r7}
 801337a:	b087      	sub	sp, #28
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	32b0      	adds	r2, #176	@ 0xb0
 801338e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013392:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d101      	bne.n	801339e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801339a:	2303      	movs	r3, #3
 801339c:	e008      	b.n	80133b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	68ba      	ldr	r2, [r7, #8]
 80133a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	687a      	ldr	r2, [r7, #4]
 80133aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80133ae:	2300      	movs	r3, #0
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	371c      	adds	r7, #28
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr

080133bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80133bc:	b480      	push	{r7}
 80133be:	b085      	sub	sp, #20
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	32b0      	adds	r2, #176	@ 0xb0
 80133d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d101      	bne.n	80133e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80133dc:	2303      	movs	r3, #3
 80133de:	e004      	b.n	80133ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	683a      	ldr	r2, [r7, #0]
 80133e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80133e8:	2300      	movs	r3, #0
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3714      	adds	r7, #20
 80133ee:	46bd      	mov	sp, r7
 80133f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f4:	4770      	bx	lr
	...

080133f8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	32b0      	adds	r2, #176	@ 0xb0
 801340a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801340e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013410:	2301      	movs	r3, #1
 8013412:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d101      	bne.n	801341e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801341a:	2303      	movs	r3, #3
 801341c:	e025      	b.n	801346a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013424:	2b00      	cmp	r3, #0
 8013426:	d11f      	bne.n	8013468 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	2201      	movs	r2, #1
 801342c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013430:	4b10      	ldr	r3, [pc, #64]	@ (8013474 <USBD_CDC_TransmitPacket+0x7c>)
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	f003 020f 	and.w	r2, r3, #15
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	4613      	mov	r3, r2
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	4413      	add	r3, r2
 8013446:	009b      	lsls	r3, r3, #2
 8013448:	4403      	add	r3, r0
 801344a:	3318      	adds	r3, #24
 801344c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801344e:	4b09      	ldr	r3, [pc, #36]	@ (8013474 <USBD_CDC_TransmitPacket+0x7c>)
 8013450:	7819      	ldrb	r1, [r3, #0]
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f005 fd53 	bl	8018f0a <USBD_LL_Transmit>

    ret = USBD_OK;
 8013464:	2300      	movs	r3, #0
 8013466:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013468:	7bfb      	ldrb	r3, [r7, #15]
}
 801346a:	4618      	mov	r0, r3
 801346c:	3710      	adds	r7, #16
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}
 8013472:	bf00      	nop
 8013474:	200000bf 	.word	0x200000bf

08013478 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	32b0      	adds	r2, #176	@ 0xb0
 801348a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801348e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	32b0      	adds	r2, #176	@ 0xb0
 801349a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d101      	bne.n	80134a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80134a2:	2303      	movs	r3, #3
 80134a4:	e018      	b.n	80134d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	7c1b      	ldrb	r3, [r3, #16]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d10a      	bne.n	80134c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80134ae:	4b0c      	ldr	r3, [pc, #48]	@ (80134e0 <USBD_CDC_ReceivePacket+0x68>)
 80134b0:	7819      	ldrb	r1, [r3, #0]
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80134b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f005 fd45 	bl	8018f4c <USBD_LL_PrepareReceive>
 80134c2:	e008      	b.n	80134d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80134c4:	4b06      	ldr	r3, [pc, #24]	@ (80134e0 <USBD_CDC_ReceivePacket+0x68>)
 80134c6:	7819      	ldrb	r1, [r3, #0]
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80134ce:	2340      	movs	r3, #64	@ 0x40
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f005 fd3b 	bl	8018f4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80134d6:	2300      	movs	r3, #0
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3710      	adds	r7, #16
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	200000c0 	.word	0x200000c0

080134e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b086      	sub	sp, #24
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	4613      	mov	r3, r2
 80134f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d101      	bne.n	80134fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80134f8:	2303      	movs	r3, #3
 80134fa:	e01f      	b.n	801353c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	2200      	movs	r2, #0
 8013500:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2200      	movs	r2, #0
 8013508:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2200      	movs	r2, #0
 8013510:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d003      	beq.n	8013522 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	68ba      	ldr	r2, [r7, #8]
 801351e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2201      	movs	r2, #1
 8013526:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	79fa      	ldrb	r2, [r7, #7]
 801352e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013530:	68f8      	ldr	r0, [r7, #12]
 8013532:	f005 fb9f 	bl	8018c74 <USBD_LL_Init>
 8013536:	4603      	mov	r3, r0
 8013538:	75fb      	strb	r3, [r7, #23]

  return ret;
 801353a:	7dfb      	ldrb	r3, [r7, #23]
}
 801353c:	4618      	mov	r0, r3
 801353e:	3718      	adds	r7, #24
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801354e:	2300      	movs	r3, #0
 8013550:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d101      	bne.n	801355c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013558:	2303      	movs	r3, #3
 801355a:	e025      	b.n	80135a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	683a      	ldr	r2, [r7, #0]
 8013560:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	32ae      	adds	r2, #174	@ 0xae
 801356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013574:	2b00      	cmp	r3, #0
 8013576:	d00f      	beq.n	8013598 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	32ae      	adds	r2, #174	@ 0xae
 8013582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013588:	f107 020e 	add.w	r2, r7, #14
 801358c:	4610      	mov	r0, r2
 801358e:	4798      	blx	r3
 8013590:	4602      	mov	r2, r0
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801359e:	1c5a      	adds	r2, r3, #1
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80135a6:	2300      	movs	r3, #0
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3710      	adds	r7, #16
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f005 fbbd 	bl	8018d38 <USBD_LL_Start>
 80135be:	4603      	mov	r3, r0
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3708      	adds	r7, #8
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80135c8:	b480      	push	{r7}
 80135ca:	b083      	sub	sp, #12
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80135d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	370c      	adds	r7, #12
 80135d6:	46bd      	mov	sp, r7
 80135d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135dc:	4770      	bx	lr

080135de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135de:	b580      	push	{r7, lr}
 80135e0:	b084      	sub	sp, #16
 80135e2:	af00      	add	r7, sp, #0
 80135e4:	6078      	str	r0, [r7, #4]
 80135e6:	460b      	mov	r3, r1
 80135e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80135ea:	2300      	movs	r3, #0
 80135ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d009      	beq.n	801360c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	78fa      	ldrb	r2, [r7, #3]
 8013602:	4611      	mov	r1, r2
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	4798      	blx	r3
 8013608:	4603      	mov	r3, r0
 801360a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801360c:	7bfb      	ldrb	r3, [r7, #15]
}
 801360e:	4618      	mov	r0, r3
 8013610:	3710      	adds	r7, #16
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}

08013616 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013616:	b580      	push	{r7, lr}
 8013618:	b084      	sub	sp, #16
 801361a:	af00      	add	r7, sp, #0
 801361c:	6078      	str	r0, [r7, #4]
 801361e:	460b      	mov	r3, r1
 8013620:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013622:	2300      	movs	r3, #0
 8013624:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801362c:	685b      	ldr	r3, [r3, #4]
 801362e:	78fa      	ldrb	r2, [r7, #3]
 8013630:	4611      	mov	r1, r2
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	4798      	blx	r3
 8013636:	4603      	mov	r3, r0
 8013638:	2b00      	cmp	r3, #0
 801363a:	d001      	beq.n	8013640 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801363c:	2303      	movs	r3, #3
 801363e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013640:	7bfb      	ldrb	r3, [r7, #15]
}
 8013642:	4618      	mov	r0, r3
 8013644:	3710      	adds	r7, #16
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}

0801364a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801364a:	b580      	push	{r7, lr}
 801364c:	b084      	sub	sp, #16
 801364e:	af00      	add	r7, sp, #0
 8013650:	6078      	str	r0, [r7, #4]
 8013652:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801365a:	6839      	ldr	r1, [r7, #0]
 801365c:	4618      	mov	r0, r3
 801365e:	f001 f8a4 	bl	80147aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2201      	movs	r2, #1
 8013666:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013670:	461a      	mov	r2, r3
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801367e:	f003 031f 	and.w	r3, r3, #31
 8013682:	2b02      	cmp	r3, #2
 8013684:	d01a      	beq.n	80136bc <USBD_LL_SetupStage+0x72>
 8013686:	2b02      	cmp	r3, #2
 8013688:	d822      	bhi.n	80136d0 <USBD_LL_SetupStage+0x86>
 801368a:	2b00      	cmp	r3, #0
 801368c:	d002      	beq.n	8013694 <USBD_LL_SetupStage+0x4a>
 801368e:	2b01      	cmp	r3, #1
 8013690:	d00a      	beq.n	80136a8 <USBD_LL_SetupStage+0x5e>
 8013692:	e01d      	b.n	80136d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801369a:	4619      	mov	r1, r3
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 fad1 	bl	8013c44 <USBD_StdDevReq>
 80136a2:	4603      	mov	r3, r0
 80136a4:	73fb      	strb	r3, [r7, #15]
      break;
 80136a6:	e020      	b.n	80136ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80136ae:	4619      	mov	r1, r3
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f000 fb39 	bl	8013d28 <USBD_StdItfReq>
 80136b6:	4603      	mov	r3, r0
 80136b8:	73fb      	strb	r3, [r7, #15]
      break;
 80136ba:	e016      	b.n	80136ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80136c2:	4619      	mov	r1, r3
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f000 fb9b 	bl	8013e00 <USBD_StdEPReq>
 80136ca:	4603      	mov	r3, r0
 80136cc:	73fb      	strb	r3, [r7, #15]
      break;
 80136ce:	e00c      	b.n	80136ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80136d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	4619      	mov	r1, r3
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f005 fb8a 	bl	8018df8 <USBD_LL_StallEP>
 80136e4:	4603      	mov	r3, r0
 80136e6:	73fb      	strb	r3, [r7, #15]
      break;
 80136e8:	bf00      	nop
  }

  return ret;
 80136ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3710      	adds	r7, #16
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b086      	sub	sp, #24
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	460b      	mov	r3, r1
 80136fe:	607a      	str	r2, [r7, #4]
 8013700:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013702:	2300      	movs	r3, #0
 8013704:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013706:	7afb      	ldrb	r3, [r7, #11]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d16e      	bne.n	80137ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013712:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801371a:	2b03      	cmp	r3, #3
 801371c:	f040 8098 	bne.w	8013850 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	689a      	ldr	r2, [r3, #8]
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	68db      	ldr	r3, [r3, #12]
 8013728:	429a      	cmp	r2, r3
 801372a:	d913      	bls.n	8013754 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	689a      	ldr	r2, [r3, #8]
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	68db      	ldr	r3, [r3, #12]
 8013734:	1ad2      	subs	r2, r2, r3
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	68da      	ldr	r2, [r3, #12]
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	689b      	ldr	r3, [r3, #8]
 8013742:	4293      	cmp	r3, r2
 8013744:	bf28      	it	cs
 8013746:	4613      	movcs	r3, r2
 8013748:	461a      	mov	r2, r3
 801374a:	6879      	ldr	r1, [r7, #4]
 801374c:	68f8      	ldr	r0, [r7, #12]
 801374e:	f001 f92c 	bl	80149aa <USBD_CtlContinueRx>
 8013752:	e07d      	b.n	8013850 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801375a:	f003 031f 	and.w	r3, r3, #31
 801375e:	2b02      	cmp	r3, #2
 8013760:	d014      	beq.n	801378c <USBD_LL_DataOutStage+0x98>
 8013762:	2b02      	cmp	r3, #2
 8013764:	d81d      	bhi.n	80137a2 <USBD_LL_DataOutStage+0xae>
 8013766:	2b00      	cmp	r3, #0
 8013768:	d002      	beq.n	8013770 <USBD_LL_DataOutStage+0x7c>
 801376a:	2b01      	cmp	r3, #1
 801376c:	d003      	beq.n	8013776 <USBD_LL_DataOutStage+0x82>
 801376e:	e018      	b.n	80137a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013770:	2300      	movs	r3, #0
 8013772:	75bb      	strb	r3, [r7, #22]
            break;
 8013774:	e018      	b.n	80137a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801377c:	b2db      	uxtb	r3, r3
 801377e:	4619      	mov	r1, r3
 8013780:	68f8      	ldr	r0, [r7, #12]
 8013782:	f000 f9d2 	bl	8013b2a <USBD_CoreFindIF>
 8013786:	4603      	mov	r3, r0
 8013788:	75bb      	strb	r3, [r7, #22]
            break;
 801378a:	e00d      	b.n	80137a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013792:	b2db      	uxtb	r3, r3
 8013794:	4619      	mov	r1, r3
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	f000 f9d4 	bl	8013b44 <USBD_CoreFindEP>
 801379c:	4603      	mov	r3, r0
 801379e:	75bb      	strb	r3, [r7, #22]
            break;
 80137a0:	e002      	b.n	80137a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80137a2:	2300      	movs	r3, #0
 80137a4:	75bb      	strb	r3, [r7, #22]
            break;
 80137a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80137a8:	7dbb      	ldrb	r3, [r7, #22]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d119      	bne.n	80137e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	2b03      	cmp	r3, #3
 80137b8:	d113      	bne.n	80137e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80137ba:	7dba      	ldrb	r2, [r7, #22]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	32ae      	adds	r2, #174	@ 0xae
 80137c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137c4:	691b      	ldr	r3, [r3, #16]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d00b      	beq.n	80137e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80137ca:	7dba      	ldrb	r2, [r7, #22]
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80137d2:	7dba      	ldrb	r2, [r7, #22]
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	32ae      	adds	r2, #174	@ 0xae
 80137d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137dc:	691b      	ldr	r3, [r3, #16]
 80137de:	68f8      	ldr	r0, [r7, #12]
 80137e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80137e2:	68f8      	ldr	r0, [r7, #12]
 80137e4:	f001 f8f2 	bl	80149cc <USBD_CtlSendStatus>
 80137e8:	e032      	b.n	8013850 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80137ea:	7afb      	ldrb	r3, [r7, #11]
 80137ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80137f0:	b2db      	uxtb	r3, r3
 80137f2:	4619      	mov	r1, r3
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f000 f9a5 	bl	8013b44 <USBD_CoreFindEP>
 80137fa:	4603      	mov	r3, r0
 80137fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80137fe:	7dbb      	ldrb	r3, [r7, #22]
 8013800:	2bff      	cmp	r3, #255	@ 0xff
 8013802:	d025      	beq.n	8013850 <USBD_LL_DataOutStage+0x15c>
 8013804:	7dbb      	ldrb	r3, [r7, #22]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d122      	bne.n	8013850 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013810:	b2db      	uxtb	r3, r3
 8013812:	2b03      	cmp	r3, #3
 8013814:	d117      	bne.n	8013846 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013816:	7dba      	ldrb	r2, [r7, #22]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	32ae      	adds	r2, #174	@ 0xae
 801381c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013820:	699b      	ldr	r3, [r3, #24]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00f      	beq.n	8013846 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013826:	7dba      	ldrb	r2, [r7, #22]
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801382e:	7dba      	ldrb	r2, [r7, #22]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	32ae      	adds	r2, #174	@ 0xae
 8013834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013838:	699b      	ldr	r3, [r3, #24]
 801383a:	7afa      	ldrb	r2, [r7, #11]
 801383c:	4611      	mov	r1, r2
 801383e:	68f8      	ldr	r0, [r7, #12]
 8013840:	4798      	blx	r3
 8013842:	4603      	mov	r3, r0
 8013844:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013846:	7dfb      	ldrb	r3, [r7, #23]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d001      	beq.n	8013850 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801384c:	7dfb      	ldrb	r3, [r7, #23]
 801384e:	e000      	b.n	8013852 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013850:	2300      	movs	r3, #0
}
 8013852:	4618      	mov	r0, r3
 8013854:	3718      	adds	r7, #24
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}

0801385a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801385a:	b580      	push	{r7, lr}
 801385c:	b086      	sub	sp, #24
 801385e:	af00      	add	r7, sp, #0
 8013860:	60f8      	str	r0, [r7, #12]
 8013862:	460b      	mov	r3, r1
 8013864:	607a      	str	r2, [r7, #4]
 8013866:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013868:	7afb      	ldrb	r3, [r7, #11]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d16f      	bne.n	801394e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	3314      	adds	r3, #20
 8013872:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801387a:	2b02      	cmp	r3, #2
 801387c:	d15a      	bne.n	8013934 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	689a      	ldr	r2, [r3, #8]
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	429a      	cmp	r2, r3
 8013888:	d914      	bls.n	80138b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801388a:	693b      	ldr	r3, [r7, #16]
 801388c:	689a      	ldr	r2, [r3, #8]
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	68db      	ldr	r3, [r3, #12]
 8013892:	1ad2      	subs	r2, r2, r3
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	689b      	ldr	r3, [r3, #8]
 801389c:	461a      	mov	r2, r3
 801389e:	6879      	ldr	r1, [r7, #4]
 80138a0:	68f8      	ldr	r0, [r7, #12]
 80138a2:	f001 f854 	bl	801494e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80138a6:	2300      	movs	r3, #0
 80138a8:	2200      	movs	r2, #0
 80138aa:	2100      	movs	r1, #0
 80138ac:	68f8      	ldr	r0, [r7, #12]
 80138ae:	f005 fb4d 	bl	8018f4c <USBD_LL_PrepareReceive>
 80138b2:	e03f      	b.n	8013934 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	68da      	ldr	r2, [r3, #12]
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	429a      	cmp	r2, r3
 80138be:	d11c      	bne.n	80138fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	685a      	ldr	r2, [r3, #4]
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d316      	bcc.n	80138fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	685a      	ldr	r2, [r3, #4]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d20f      	bcs.n	80138fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80138da:	2200      	movs	r2, #0
 80138dc:	2100      	movs	r1, #0
 80138de:	68f8      	ldr	r0, [r7, #12]
 80138e0:	f001 f835 	bl	801494e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2200      	movs	r2, #0
 80138e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80138ec:	2300      	movs	r3, #0
 80138ee:	2200      	movs	r2, #0
 80138f0:	2100      	movs	r1, #0
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f005 fb2a 	bl	8018f4c <USBD_LL_PrepareReceive>
 80138f8:	e01c      	b.n	8013934 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013900:	b2db      	uxtb	r3, r3
 8013902:	2b03      	cmp	r3, #3
 8013904:	d10f      	bne.n	8013926 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801390c:	68db      	ldr	r3, [r3, #12]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d009      	beq.n	8013926 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2200      	movs	r2, #0
 8013916:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	68f8      	ldr	r0, [r7, #12]
 8013924:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013926:	2180      	movs	r1, #128	@ 0x80
 8013928:	68f8      	ldr	r0, [r7, #12]
 801392a:	f005 fa65 	bl	8018df8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801392e:	68f8      	ldr	r0, [r7, #12]
 8013930:	f001 f85f 	bl	80149f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d03a      	beq.n	80139b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801393e:	68f8      	ldr	r0, [r7, #12]
 8013940:	f7ff fe42 	bl	80135c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	2200      	movs	r2, #0
 8013948:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801394c:	e032      	b.n	80139b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801394e:	7afb      	ldrb	r3, [r7, #11]
 8013950:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013954:	b2db      	uxtb	r3, r3
 8013956:	4619      	mov	r1, r3
 8013958:	68f8      	ldr	r0, [r7, #12]
 801395a:	f000 f8f3 	bl	8013b44 <USBD_CoreFindEP>
 801395e:	4603      	mov	r3, r0
 8013960:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013962:	7dfb      	ldrb	r3, [r7, #23]
 8013964:	2bff      	cmp	r3, #255	@ 0xff
 8013966:	d025      	beq.n	80139b4 <USBD_LL_DataInStage+0x15a>
 8013968:	7dfb      	ldrb	r3, [r7, #23]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d122      	bne.n	80139b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013974:	b2db      	uxtb	r3, r3
 8013976:	2b03      	cmp	r3, #3
 8013978:	d11c      	bne.n	80139b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801397a:	7dfa      	ldrb	r2, [r7, #23]
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	32ae      	adds	r2, #174	@ 0xae
 8013980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013984:	695b      	ldr	r3, [r3, #20]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d014      	beq.n	80139b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801398a:	7dfa      	ldrb	r2, [r7, #23]
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013992:	7dfa      	ldrb	r2, [r7, #23]
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	32ae      	adds	r2, #174	@ 0xae
 8013998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801399c:	695b      	ldr	r3, [r3, #20]
 801399e:	7afa      	ldrb	r2, [r7, #11]
 80139a0:	4611      	mov	r1, r2
 80139a2:	68f8      	ldr	r0, [r7, #12]
 80139a4:	4798      	blx	r3
 80139a6:	4603      	mov	r3, r0
 80139a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80139aa:	7dbb      	ldrb	r3, [r7, #22]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d001      	beq.n	80139b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80139b0:	7dbb      	ldrb	r3, [r7, #22]
 80139b2:	e000      	b.n	80139b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80139b4:	2300      	movs	r3, #0
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3718      	adds	r7, #24
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}

080139be <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80139be:	b580      	push	{r7, lr}
 80139c0:	b084      	sub	sp, #16
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80139c6:	2300      	movs	r3, #0
 80139c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2201      	movs	r2, #1
 80139ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2200      	movs	r2, #0
 80139d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2200      	movs	r2, #0
 80139de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2200      	movs	r2, #0
 80139e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2200      	movs	r2, #0
 80139ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d014      	beq.n	8013a24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d00e      	beq.n	8013a24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	687a      	ldr	r2, [r7, #4]
 8013a10:	6852      	ldr	r2, [r2, #4]
 8013a12:	b2d2      	uxtb	r2, r2
 8013a14:	4611      	mov	r1, r2
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	4798      	blx	r3
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d001      	beq.n	8013a24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013a20:	2303      	movs	r3, #3
 8013a22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a24:	2340      	movs	r3, #64	@ 0x40
 8013a26:	2200      	movs	r2, #0
 8013a28:	2100      	movs	r1, #0
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f005 f99f 	bl	8018d6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2201      	movs	r2, #1
 8013a34:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2240      	movs	r2, #64	@ 0x40
 8013a3c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a40:	2340      	movs	r3, #64	@ 0x40
 8013a42:	2200      	movs	r2, #0
 8013a44:	2180      	movs	r1, #128	@ 0x80
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f005 f991 	bl	8018d6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2201      	movs	r2, #1
 8013a50:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2240      	movs	r2, #64	@ 0x40
 8013a56:	621a      	str	r2, [r3, #32]

  return ret;
 8013a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3710      	adds	r7, #16
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}

08013a62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013a62:	b480      	push	{r7}
 8013a64:	b083      	sub	sp, #12
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6078      	str	r0, [r7, #4]
 8013a6a:	460b      	mov	r3, r1
 8013a6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	78fa      	ldrb	r2, [r7, #3]
 8013a72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013a74:	2300      	movs	r3, #0
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	370c      	adds	r7, #12
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013a82:	b480      	push	{r7}
 8013a84:	b083      	sub	sp, #12
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a90:	b2db      	uxtb	r3, r3
 8013a92:	2b04      	cmp	r3, #4
 8013a94:	d006      	beq.n	8013aa4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a9c:	b2da      	uxtb	r2, r3
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2204      	movs	r2, #4
 8013aa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013aac:	2300      	movs	r3, #0
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	370c      	adds	r7, #12
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab8:	4770      	bx	lr

08013aba <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013aba:	b480      	push	{r7}
 8013abc:	b083      	sub	sp, #12
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ac8:	b2db      	uxtb	r3, r3
 8013aca:	2b04      	cmp	r3, #4
 8013acc:	d106      	bne.n	8013adc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013ad4:	b2da      	uxtb	r2, r3
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013adc:	2300      	movs	r3, #0
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	370c      	adds	r7, #12
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae8:	4770      	bx	lr

08013aea <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b082      	sub	sp, #8
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	2b03      	cmp	r3, #3
 8013afc:	d110      	bne.n	8013b20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d00b      	beq.n	8013b20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b0e:	69db      	ldr	r3, [r3, #28]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d005      	beq.n	8013b20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b1a:	69db      	ldr	r3, [r3, #28]
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013b20:	2300      	movs	r3, #0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3708      	adds	r7, #8
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}

08013b2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013b2a:	b480      	push	{r7}
 8013b2c:	b083      	sub	sp, #12
 8013b2e:	af00      	add	r7, sp, #0
 8013b30:	6078      	str	r0, [r7, #4]
 8013b32:	460b      	mov	r3, r1
 8013b34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013b36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	370c      	adds	r7, #12
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b42:	4770      	bx	lr

08013b44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013b44:	b480      	push	{r7}
 8013b46:	b083      	sub	sp, #12
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
 8013b4c:	460b      	mov	r3, r1
 8013b4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013b50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	370c      	adds	r7, #12
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr

08013b5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013b5e:	b580      	push	{r7, lr}
 8013b60:	b086      	sub	sp, #24
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
 8013b66:	460b      	mov	r3, r1
 8013b68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013b72:	2300      	movs	r3, #0
 8013b74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	885b      	ldrh	r3, [r3, #2]
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	68fa      	ldr	r2, [r7, #12]
 8013b7e:	7812      	ldrb	r2, [r2, #0]
 8013b80:	4293      	cmp	r3, r2
 8013b82:	d91f      	bls.n	8013bc4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013b8a:	e013      	b.n	8013bb4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013b8c:	f107 030a 	add.w	r3, r7, #10
 8013b90:	4619      	mov	r1, r3
 8013b92:	6978      	ldr	r0, [r7, #20]
 8013b94:	f000 f81b 	bl	8013bce <USBD_GetNextDesc>
 8013b98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	785b      	ldrb	r3, [r3, #1]
 8013b9e:	2b05      	cmp	r3, #5
 8013ba0:	d108      	bne.n	8013bb4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	789b      	ldrb	r3, [r3, #2]
 8013baa:	78fa      	ldrb	r2, [r7, #3]
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d008      	beq.n	8013bc2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	885b      	ldrh	r3, [r3, #2]
 8013bb8:	b29a      	uxth	r2, r3
 8013bba:	897b      	ldrh	r3, [r7, #10]
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d8e5      	bhi.n	8013b8c <USBD_GetEpDesc+0x2e>
 8013bc0:	e000      	b.n	8013bc4 <USBD_GetEpDesc+0x66>
          break;
 8013bc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013bc4:	693b      	ldr	r3, [r7, #16]
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3718      	adds	r7, #24
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}

08013bce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013bce:	b480      	push	{r7}
 8013bd0:	b085      	sub	sp, #20
 8013bd2:	af00      	add	r7, sp, #0
 8013bd4:	6078      	str	r0, [r7, #4]
 8013bd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	881b      	ldrh	r3, [r3, #0]
 8013be0:	68fa      	ldr	r2, [r7, #12]
 8013be2:	7812      	ldrb	r2, [r2, #0]
 8013be4:	4413      	add	r3, r2
 8013be6:	b29a      	uxth	r2, r3
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	781b      	ldrb	r3, [r3, #0]
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4413      	add	r3, r2
 8013bf6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3714      	adds	r7, #20
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr

08013c06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013c06:	b480      	push	{r7}
 8013c08:	b087      	sub	sp, #28
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013c24:	8a3b      	ldrh	r3, [r7, #16]
 8013c26:	021b      	lsls	r3, r3, #8
 8013c28:	b21a      	sxth	r2, r3
 8013c2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	b21b      	sxth	r3, r3
 8013c32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013c34:	89fb      	ldrh	r3, [r7, #14]
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	371c      	adds	r7, #28
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c40:	4770      	bx	lr
	...

08013c44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	781b      	ldrb	r3, [r3, #0]
 8013c56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013c5a:	2b40      	cmp	r3, #64	@ 0x40
 8013c5c:	d005      	beq.n	8013c6a <USBD_StdDevReq+0x26>
 8013c5e:	2b40      	cmp	r3, #64	@ 0x40
 8013c60:	d857      	bhi.n	8013d12 <USBD_StdDevReq+0xce>
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d00f      	beq.n	8013c86 <USBD_StdDevReq+0x42>
 8013c66:	2b20      	cmp	r3, #32
 8013c68:	d153      	bne.n	8013d12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	32ae      	adds	r2, #174	@ 0xae
 8013c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c78:	689b      	ldr	r3, [r3, #8]
 8013c7a:	6839      	ldr	r1, [r7, #0]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	4798      	blx	r3
 8013c80:	4603      	mov	r3, r0
 8013c82:	73fb      	strb	r3, [r7, #15]
      break;
 8013c84:	e04a      	b.n	8013d1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	785b      	ldrb	r3, [r3, #1]
 8013c8a:	2b09      	cmp	r3, #9
 8013c8c:	d83b      	bhi.n	8013d06 <USBD_StdDevReq+0xc2>
 8013c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8013c94 <USBD_StdDevReq+0x50>)
 8013c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c94:	08013ce9 	.word	0x08013ce9
 8013c98:	08013cfd 	.word	0x08013cfd
 8013c9c:	08013d07 	.word	0x08013d07
 8013ca0:	08013cf3 	.word	0x08013cf3
 8013ca4:	08013d07 	.word	0x08013d07
 8013ca8:	08013cc7 	.word	0x08013cc7
 8013cac:	08013cbd 	.word	0x08013cbd
 8013cb0:	08013d07 	.word	0x08013d07
 8013cb4:	08013cdf 	.word	0x08013cdf
 8013cb8:	08013cd1 	.word	0x08013cd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013cbc:	6839      	ldr	r1, [r7, #0]
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f000 fa3c 	bl	801413c <USBD_GetDescriptor>
          break;
 8013cc4:	e024      	b.n	8013d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013cc6:	6839      	ldr	r1, [r7, #0]
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f000 fbcb 	bl	8014464 <USBD_SetAddress>
          break;
 8013cce:	e01f      	b.n	8013d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013cd0:	6839      	ldr	r1, [r7, #0]
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f000 fc0a 	bl	80144ec <USBD_SetConfig>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	73fb      	strb	r3, [r7, #15]
          break;
 8013cdc:	e018      	b.n	8013d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013cde:	6839      	ldr	r1, [r7, #0]
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f000 fcad 	bl	8014640 <USBD_GetConfig>
          break;
 8013ce6:	e013      	b.n	8013d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013ce8:	6839      	ldr	r1, [r7, #0]
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	f000 fcde 	bl	80146ac <USBD_GetStatus>
          break;
 8013cf0:	e00e      	b.n	8013d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013cf2:	6839      	ldr	r1, [r7, #0]
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f000 fd0d 	bl	8014714 <USBD_SetFeature>
          break;
 8013cfa:	e009      	b.n	8013d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013cfc:	6839      	ldr	r1, [r7, #0]
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f000 fd31 	bl	8014766 <USBD_ClrFeature>
          break;
 8013d04:	e004      	b.n	8013d10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013d06:	6839      	ldr	r1, [r7, #0]
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f000 fd88 	bl	801481e <USBD_CtlError>
          break;
 8013d0e:	bf00      	nop
      }
      break;
 8013d10:	e004      	b.n	8013d1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013d12:	6839      	ldr	r1, [r7, #0]
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f000 fd82 	bl	801481e <USBD_CtlError>
      break;
 8013d1a:	bf00      	nop
  }

  return ret;
 8013d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3710      	adds	r7, #16
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
 8013d26:	bf00      	nop

08013d28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d32:	2300      	movs	r3, #0
 8013d34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013d3e:	2b40      	cmp	r3, #64	@ 0x40
 8013d40:	d005      	beq.n	8013d4e <USBD_StdItfReq+0x26>
 8013d42:	2b40      	cmp	r3, #64	@ 0x40
 8013d44:	d852      	bhi.n	8013dec <USBD_StdItfReq+0xc4>
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d001      	beq.n	8013d4e <USBD_StdItfReq+0x26>
 8013d4a:	2b20      	cmp	r3, #32
 8013d4c:	d14e      	bne.n	8013dec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d54:	b2db      	uxtb	r3, r3
 8013d56:	3b01      	subs	r3, #1
 8013d58:	2b02      	cmp	r3, #2
 8013d5a:	d840      	bhi.n	8013dde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	889b      	ldrh	r3, [r3, #4]
 8013d60:	b2db      	uxtb	r3, r3
 8013d62:	2b01      	cmp	r3, #1
 8013d64:	d836      	bhi.n	8013dd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	889b      	ldrh	r3, [r3, #4]
 8013d6a:	b2db      	uxtb	r3, r3
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f7ff fedb 	bl	8013b2a <USBD_CoreFindIF>
 8013d74:	4603      	mov	r3, r0
 8013d76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d78:	7bbb      	ldrb	r3, [r7, #14]
 8013d7a:	2bff      	cmp	r3, #255	@ 0xff
 8013d7c:	d01d      	beq.n	8013dba <USBD_StdItfReq+0x92>
 8013d7e:	7bbb      	ldrb	r3, [r7, #14]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d11a      	bne.n	8013dba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013d84:	7bba      	ldrb	r2, [r7, #14]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	32ae      	adds	r2, #174	@ 0xae
 8013d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d8e:	689b      	ldr	r3, [r3, #8]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d00f      	beq.n	8013db4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013d94:	7bba      	ldrb	r2, [r7, #14]
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013d9c:	7bba      	ldrb	r2, [r7, #14]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	32ae      	adds	r2, #174	@ 0xae
 8013da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	6839      	ldr	r1, [r7, #0]
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	4798      	blx	r3
 8013dae:	4603      	mov	r3, r0
 8013db0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013db2:	e004      	b.n	8013dbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013db4:	2303      	movs	r3, #3
 8013db6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013db8:	e001      	b.n	8013dbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013dba:	2303      	movs	r3, #3
 8013dbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	88db      	ldrh	r3, [r3, #6]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d110      	bne.n	8013de8 <USBD_StdItfReq+0xc0>
 8013dc6:	7bfb      	ldrb	r3, [r7, #15]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d10d      	bne.n	8013de8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f000 fdfd 	bl	80149cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013dd2:	e009      	b.n	8013de8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013dd4:	6839      	ldr	r1, [r7, #0]
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f000 fd21 	bl	801481e <USBD_CtlError>
          break;
 8013ddc:	e004      	b.n	8013de8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013dde:	6839      	ldr	r1, [r7, #0]
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f000 fd1c 	bl	801481e <USBD_CtlError>
          break;
 8013de6:	e000      	b.n	8013dea <USBD_StdItfReq+0xc2>
          break;
 8013de8:	bf00      	nop
      }
      break;
 8013dea:	e004      	b.n	8013df6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013dec:	6839      	ldr	r1, [r7, #0]
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 fd15 	bl	801481e <USBD_CtlError>
      break;
 8013df4:	bf00      	nop
  }

  return ret;
 8013df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3710      	adds	r7, #16
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b084      	sub	sp, #16
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
 8013e08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	889b      	ldrh	r3, [r3, #4]
 8013e12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013e1c:	2b40      	cmp	r3, #64	@ 0x40
 8013e1e:	d007      	beq.n	8013e30 <USBD_StdEPReq+0x30>
 8013e20:	2b40      	cmp	r3, #64	@ 0x40
 8013e22:	f200 817f 	bhi.w	8014124 <USBD_StdEPReq+0x324>
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d02a      	beq.n	8013e80 <USBD_StdEPReq+0x80>
 8013e2a:	2b20      	cmp	r3, #32
 8013e2c:	f040 817a 	bne.w	8014124 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013e30:	7bbb      	ldrb	r3, [r7, #14]
 8013e32:	4619      	mov	r1, r3
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f7ff fe85 	bl	8013b44 <USBD_CoreFindEP>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013e3e:	7b7b      	ldrb	r3, [r7, #13]
 8013e40:	2bff      	cmp	r3, #255	@ 0xff
 8013e42:	f000 8174 	beq.w	801412e <USBD_StdEPReq+0x32e>
 8013e46:	7b7b      	ldrb	r3, [r7, #13]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	f040 8170 	bne.w	801412e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013e4e:	7b7a      	ldrb	r2, [r7, #13]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013e56:	7b7a      	ldrb	r2, [r7, #13]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	32ae      	adds	r2, #174	@ 0xae
 8013e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e60:	689b      	ldr	r3, [r3, #8]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	f000 8163 	beq.w	801412e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013e68:	7b7a      	ldrb	r2, [r7, #13]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	32ae      	adds	r2, #174	@ 0xae
 8013e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	6839      	ldr	r1, [r7, #0]
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	4798      	blx	r3
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013e7e:	e156      	b.n	801412e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	785b      	ldrb	r3, [r3, #1]
 8013e84:	2b03      	cmp	r3, #3
 8013e86:	d008      	beq.n	8013e9a <USBD_StdEPReq+0x9a>
 8013e88:	2b03      	cmp	r3, #3
 8013e8a:	f300 8145 	bgt.w	8014118 <USBD_StdEPReq+0x318>
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	f000 809b 	beq.w	8013fca <USBD_StdEPReq+0x1ca>
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d03c      	beq.n	8013f12 <USBD_StdEPReq+0x112>
 8013e98:	e13e      	b.n	8014118 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	2b02      	cmp	r3, #2
 8013ea4:	d002      	beq.n	8013eac <USBD_StdEPReq+0xac>
 8013ea6:	2b03      	cmp	r3, #3
 8013ea8:	d016      	beq.n	8013ed8 <USBD_StdEPReq+0xd8>
 8013eaa:	e02c      	b.n	8013f06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013eac:	7bbb      	ldrb	r3, [r7, #14]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d00d      	beq.n	8013ece <USBD_StdEPReq+0xce>
 8013eb2:	7bbb      	ldrb	r3, [r7, #14]
 8013eb4:	2b80      	cmp	r3, #128	@ 0x80
 8013eb6:	d00a      	beq.n	8013ece <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013eb8:	7bbb      	ldrb	r3, [r7, #14]
 8013eba:	4619      	mov	r1, r3
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f004 ff9b 	bl	8018df8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013ec2:	2180      	movs	r1, #128	@ 0x80
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f004 ff97 	bl	8018df8 <USBD_LL_StallEP>
 8013eca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ecc:	e020      	b.n	8013f10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013ece:	6839      	ldr	r1, [r7, #0]
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f000 fca4 	bl	801481e <USBD_CtlError>
              break;
 8013ed6:	e01b      	b.n	8013f10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	885b      	ldrh	r3, [r3, #2]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d10e      	bne.n	8013efe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013ee0:	7bbb      	ldrb	r3, [r7, #14]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d00b      	beq.n	8013efe <USBD_StdEPReq+0xfe>
 8013ee6:	7bbb      	ldrb	r3, [r7, #14]
 8013ee8:	2b80      	cmp	r3, #128	@ 0x80
 8013eea:	d008      	beq.n	8013efe <USBD_StdEPReq+0xfe>
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	88db      	ldrh	r3, [r3, #6]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d104      	bne.n	8013efe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ef4:	7bbb      	ldrb	r3, [r7, #14]
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f004 ff7d 	bl	8018df8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f000 fd64 	bl	80149cc <USBD_CtlSendStatus>

              break;
 8013f04:	e004      	b.n	8013f10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013f06:	6839      	ldr	r1, [r7, #0]
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f000 fc88 	bl	801481e <USBD_CtlError>
              break;
 8013f0e:	bf00      	nop
          }
          break;
 8013f10:	e107      	b.n	8014122 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f18:	b2db      	uxtb	r3, r3
 8013f1a:	2b02      	cmp	r3, #2
 8013f1c:	d002      	beq.n	8013f24 <USBD_StdEPReq+0x124>
 8013f1e:	2b03      	cmp	r3, #3
 8013f20:	d016      	beq.n	8013f50 <USBD_StdEPReq+0x150>
 8013f22:	e04b      	b.n	8013fbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013f24:	7bbb      	ldrb	r3, [r7, #14]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d00d      	beq.n	8013f46 <USBD_StdEPReq+0x146>
 8013f2a:	7bbb      	ldrb	r3, [r7, #14]
 8013f2c:	2b80      	cmp	r3, #128	@ 0x80
 8013f2e:	d00a      	beq.n	8013f46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013f30:	7bbb      	ldrb	r3, [r7, #14]
 8013f32:	4619      	mov	r1, r3
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f004 ff5f 	bl	8018df8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013f3a:	2180      	movs	r1, #128	@ 0x80
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f004 ff5b 	bl	8018df8 <USBD_LL_StallEP>
 8013f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013f44:	e040      	b.n	8013fc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013f46:	6839      	ldr	r1, [r7, #0]
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f000 fc68 	bl	801481e <USBD_CtlError>
              break;
 8013f4e:	e03b      	b.n	8013fc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	885b      	ldrh	r3, [r3, #2]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d136      	bne.n	8013fc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013f58:	7bbb      	ldrb	r3, [r7, #14]
 8013f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d004      	beq.n	8013f6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013f62:	7bbb      	ldrb	r3, [r7, #14]
 8013f64:	4619      	mov	r1, r3
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f004 ff65 	bl	8018e36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f000 fd2d 	bl	80149cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013f72:	7bbb      	ldrb	r3, [r7, #14]
 8013f74:	4619      	mov	r1, r3
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f7ff fde4 	bl	8013b44 <USBD_CoreFindEP>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f80:	7b7b      	ldrb	r3, [r7, #13]
 8013f82:	2bff      	cmp	r3, #255	@ 0xff
 8013f84:	d01f      	beq.n	8013fc6 <USBD_StdEPReq+0x1c6>
 8013f86:	7b7b      	ldrb	r3, [r7, #13]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d11c      	bne.n	8013fc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013f8c:	7b7a      	ldrb	r2, [r7, #13]
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013f94:	7b7a      	ldrb	r2, [r7, #13]
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	32ae      	adds	r2, #174	@ 0xae
 8013f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f9e:	689b      	ldr	r3, [r3, #8]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d010      	beq.n	8013fc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013fa4:	7b7a      	ldrb	r2, [r7, #13]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	32ae      	adds	r2, #174	@ 0xae
 8013faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fae:	689b      	ldr	r3, [r3, #8]
 8013fb0:	6839      	ldr	r1, [r7, #0]
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	4798      	blx	r3
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013fba:	e004      	b.n	8013fc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013fbc:	6839      	ldr	r1, [r7, #0]
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f000 fc2d 	bl	801481e <USBD_CtlError>
              break;
 8013fc4:	e000      	b.n	8013fc8 <USBD_StdEPReq+0x1c8>
              break;
 8013fc6:	bf00      	nop
          }
          break;
 8013fc8:	e0ab      	b.n	8014122 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fd0:	b2db      	uxtb	r3, r3
 8013fd2:	2b02      	cmp	r3, #2
 8013fd4:	d002      	beq.n	8013fdc <USBD_StdEPReq+0x1dc>
 8013fd6:	2b03      	cmp	r3, #3
 8013fd8:	d032      	beq.n	8014040 <USBD_StdEPReq+0x240>
 8013fda:	e097      	b.n	801410c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fdc:	7bbb      	ldrb	r3, [r7, #14]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d007      	beq.n	8013ff2 <USBD_StdEPReq+0x1f2>
 8013fe2:	7bbb      	ldrb	r3, [r7, #14]
 8013fe4:	2b80      	cmp	r3, #128	@ 0x80
 8013fe6:	d004      	beq.n	8013ff2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013fe8:	6839      	ldr	r1, [r7, #0]
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f000 fc17 	bl	801481e <USBD_CtlError>
                break;
 8013ff0:	e091      	b.n	8014116 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	da0b      	bge.n	8014012 <USBD_StdEPReq+0x212>
 8013ffa:	7bbb      	ldrb	r3, [r7, #14]
 8013ffc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014000:	4613      	mov	r3, r2
 8014002:	009b      	lsls	r3, r3, #2
 8014004:	4413      	add	r3, r2
 8014006:	009b      	lsls	r3, r3, #2
 8014008:	3310      	adds	r3, #16
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	4413      	add	r3, r2
 801400e:	3304      	adds	r3, #4
 8014010:	e00b      	b.n	801402a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014012:	7bbb      	ldrb	r3, [r7, #14]
 8014014:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014018:	4613      	mov	r3, r2
 801401a:	009b      	lsls	r3, r3, #2
 801401c:	4413      	add	r3, r2
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	4413      	add	r3, r2
 8014028:	3304      	adds	r3, #4
 801402a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	2200      	movs	r2, #0
 8014030:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	2202      	movs	r2, #2
 8014036:	4619      	mov	r1, r3
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f000 fc6d 	bl	8014918 <USBD_CtlSendData>
              break;
 801403e:	e06a      	b.n	8014116 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014044:	2b00      	cmp	r3, #0
 8014046:	da11      	bge.n	801406c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014048:	7bbb      	ldrb	r3, [r7, #14]
 801404a:	f003 020f 	and.w	r2, r3, #15
 801404e:	6879      	ldr	r1, [r7, #4]
 8014050:	4613      	mov	r3, r2
 8014052:	009b      	lsls	r3, r3, #2
 8014054:	4413      	add	r3, r2
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	440b      	add	r3, r1
 801405a:	3324      	adds	r3, #36	@ 0x24
 801405c:	881b      	ldrh	r3, [r3, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d117      	bne.n	8014092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014062:	6839      	ldr	r1, [r7, #0]
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f000 fbda 	bl	801481e <USBD_CtlError>
                  break;
 801406a:	e054      	b.n	8014116 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801406c:	7bbb      	ldrb	r3, [r7, #14]
 801406e:	f003 020f 	and.w	r2, r3, #15
 8014072:	6879      	ldr	r1, [r7, #4]
 8014074:	4613      	mov	r3, r2
 8014076:	009b      	lsls	r3, r3, #2
 8014078:	4413      	add	r3, r2
 801407a:	009b      	lsls	r3, r3, #2
 801407c:	440b      	add	r3, r1
 801407e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014082:	881b      	ldrh	r3, [r3, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d104      	bne.n	8014092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014088:	6839      	ldr	r1, [r7, #0]
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f000 fbc7 	bl	801481e <USBD_CtlError>
                  break;
 8014090:	e041      	b.n	8014116 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014096:	2b00      	cmp	r3, #0
 8014098:	da0b      	bge.n	80140b2 <USBD_StdEPReq+0x2b2>
 801409a:	7bbb      	ldrb	r3, [r7, #14]
 801409c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80140a0:	4613      	mov	r3, r2
 80140a2:	009b      	lsls	r3, r3, #2
 80140a4:	4413      	add	r3, r2
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	3310      	adds	r3, #16
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	4413      	add	r3, r2
 80140ae:	3304      	adds	r3, #4
 80140b0:	e00b      	b.n	80140ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80140b2:	7bbb      	ldrb	r3, [r7, #14]
 80140b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140b8:	4613      	mov	r3, r2
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	4413      	add	r3, r2
 80140be:	009b      	lsls	r3, r3, #2
 80140c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	4413      	add	r3, r2
 80140c8:	3304      	adds	r3, #4
 80140ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80140cc:	7bbb      	ldrb	r3, [r7, #14]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d002      	beq.n	80140d8 <USBD_StdEPReq+0x2d8>
 80140d2:	7bbb      	ldrb	r3, [r7, #14]
 80140d4:	2b80      	cmp	r3, #128	@ 0x80
 80140d6:	d103      	bne.n	80140e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	2200      	movs	r2, #0
 80140dc:	601a      	str	r2, [r3, #0]
 80140de:	e00e      	b.n	80140fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80140e0:	7bbb      	ldrb	r3, [r7, #14]
 80140e2:	4619      	mov	r1, r3
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f004 fec5 	bl	8018e74 <USBD_LL_IsStallEP>
 80140ea:	4603      	mov	r3, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d003      	beq.n	80140f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	2201      	movs	r2, #1
 80140f4:	601a      	str	r2, [r3, #0]
 80140f6:	e002      	b.n	80140fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	2200      	movs	r2, #0
 80140fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	2202      	movs	r2, #2
 8014102:	4619      	mov	r1, r3
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f000 fc07 	bl	8014918 <USBD_CtlSendData>
              break;
 801410a:	e004      	b.n	8014116 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801410c:	6839      	ldr	r1, [r7, #0]
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f000 fb85 	bl	801481e <USBD_CtlError>
              break;
 8014114:	bf00      	nop
          }
          break;
 8014116:	e004      	b.n	8014122 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014118:	6839      	ldr	r1, [r7, #0]
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fb7f 	bl	801481e <USBD_CtlError>
          break;
 8014120:	bf00      	nop
      }
      break;
 8014122:	e005      	b.n	8014130 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 fb79 	bl	801481e <USBD_CtlError>
      break;
 801412c:	e000      	b.n	8014130 <USBD_StdEPReq+0x330>
      break;
 801412e:	bf00      	nop
  }

  return ret;
 8014130:	7bfb      	ldrb	r3, [r7, #15]
}
 8014132:	4618      	mov	r0, r3
 8014134:	3710      	adds	r7, #16
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
	...

0801413c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b084      	sub	sp, #16
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014146:	2300      	movs	r3, #0
 8014148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801414a:	2300      	movs	r3, #0
 801414c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801414e:	2300      	movs	r3, #0
 8014150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	885b      	ldrh	r3, [r3, #2]
 8014156:	0a1b      	lsrs	r3, r3, #8
 8014158:	b29b      	uxth	r3, r3
 801415a:	3b01      	subs	r3, #1
 801415c:	2b0e      	cmp	r3, #14
 801415e:	f200 8152 	bhi.w	8014406 <USBD_GetDescriptor+0x2ca>
 8014162:	a201      	add	r2, pc, #4	@ (adr r2, 8014168 <USBD_GetDescriptor+0x2c>)
 8014164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014168:	080141d9 	.word	0x080141d9
 801416c:	080141f1 	.word	0x080141f1
 8014170:	08014231 	.word	0x08014231
 8014174:	08014407 	.word	0x08014407
 8014178:	08014407 	.word	0x08014407
 801417c:	080143a7 	.word	0x080143a7
 8014180:	080143d3 	.word	0x080143d3
 8014184:	08014407 	.word	0x08014407
 8014188:	08014407 	.word	0x08014407
 801418c:	08014407 	.word	0x08014407
 8014190:	08014407 	.word	0x08014407
 8014194:	08014407 	.word	0x08014407
 8014198:	08014407 	.word	0x08014407
 801419c:	08014407 	.word	0x08014407
 80141a0:	080141a5 	.word	0x080141a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80141aa:	69db      	ldr	r3, [r3, #28]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d00b      	beq.n	80141c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80141b6:	69db      	ldr	r3, [r3, #28]
 80141b8:	687a      	ldr	r2, [r7, #4]
 80141ba:	7c12      	ldrb	r2, [r2, #16]
 80141bc:	f107 0108 	add.w	r1, r7, #8
 80141c0:	4610      	mov	r0, r2
 80141c2:	4798      	blx	r3
 80141c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80141c6:	e126      	b.n	8014416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80141c8:	6839      	ldr	r1, [r7, #0]
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	f000 fb27 	bl	801481e <USBD_CtlError>
        err++;
 80141d0:	7afb      	ldrb	r3, [r7, #11]
 80141d2:	3301      	adds	r3, #1
 80141d4:	72fb      	strb	r3, [r7, #11]
      break;
 80141d6:	e11e      	b.n	8014416 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	7c12      	ldrb	r2, [r2, #16]
 80141e4:	f107 0108 	add.w	r1, r7, #8
 80141e8:	4610      	mov	r0, r2
 80141ea:	4798      	blx	r3
 80141ec:	60f8      	str	r0, [r7, #12]
      break;
 80141ee:	e112      	b.n	8014416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	7c1b      	ldrb	r3, [r3, #16]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d10d      	bne.n	8014214 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014200:	f107 0208 	add.w	r2, r7, #8
 8014204:	4610      	mov	r0, r2
 8014206:	4798      	blx	r3
 8014208:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	3301      	adds	r3, #1
 801420e:	2202      	movs	r2, #2
 8014210:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014212:	e100      	b.n	8014416 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801421c:	f107 0208 	add.w	r2, r7, #8
 8014220:	4610      	mov	r0, r2
 8014222:	4798      	blx	r3
 8014224:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	3301      	adds	r3, #1
 801422a:	2202      	movs	r2, #2
 801422c:	701a      	strb	r2, [r3, #0]
      break;
 801422e:	e0f2      	b.n	8014416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	885b      	ldrh	r3, [r3, #2]
 8014234:	b2db      	uxtb	r3, r3
 8014236:	2b05      	cmp	r3, #5
 8014238:	f200 80ac 	bhi.w	8014394 <USBD_GetDescriptor+0x258>
 801423c:	a201      	add	r2, pc, #4	@ (adr r2, 8014244 <USBD_GetDescriptor+0x108>)
 801423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014242:	bf00      	nop
 8014244:	0801425d 	.word	0x0801425d
 8014248:	08014291 	.word	0x08014291
 801424c:	080142c5 	.word	0x080142c5
 8014250:	080142f9 	.word	0x080142f9
 8014254:	0801432d 	.word	0x0801432d
 8014258:	08014361 	.word	0x08014361
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d00b      	beq.n	8014280 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	687a      	ldr	r2, [r7, #4]
 8014272:	7c12      	ldrb	r2, [r2, #16]
 8014274:	f107 0108 	add.w	r1, r7, #8
 8014278:	4610      	mov	r0, r2
 801427a:	4798      	blx	r3
 801427c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801427e:	e091      	b.n	80143a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014280:	6839      	ldr	r1, [r7, #0]
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 facb 	bl	801481e <USBD_CtlError>
            err++;
 8014288:	7afb      	ldrb	r3, [r7, #11]
 801428a:	3301      	adds	r3, #1
 801428c:	72fb      	strb	r3, [r7, #11]
          break;
 801428e:	e089      	b.n	80143a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014296:	689b      	ldr	r3, [r3, #8]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d00b      	beq.n	80142b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142a2:	689b      	ldr	r3, [r3, #8]
 80142a4:	687a      	ldr	r2, [r7, #4]
 80142a6:	7c12      	ldrb	r2, [r2, #16]
 80142a8:	f107 0108 	add.w	r1, r7, #8
 80142ac:	4610      	mov	r0, r2
 80142ae:	4798      	blx	r3
 80142b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80142b2:	e077      	b.n	80143a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80142b4:	6839      	ldr	r1, [r7, #0]
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f000 fab1 	bl	801481e <USBD_CtlError>
            err++;
 80142bc:	7afb      	ldrb	r3, [r7, #11]
 80142be:	3301      	adds	r3, #1
 80142c0:	72fb      	strb	r3, [r7, #11]
          break;
 80142c2:	e06f      	b.n	80143a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d00b      	beq.n	80142e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	687a      	ldr	r2, [r7, #4]
 80142da:	7c12      	ldrb	r2, [r2, #16]
 80142dc:	f107 0108 	add.w	r1, r7, #8
 80142e0:	4610      	mov	r0, r2
 80142e2:	4798      	blx	r3
 80142e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80142e6:	e05d      	b.n	80143a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80142e8:	6839      	ldr	r1, [r7, #0]
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f000 fa97 	bl	801481e <USBD_CtlError>
            err++;
 80142f0:	7afb      	ldrb	r3, [r7, #11]
 80142f2:	3301      	adds	r3, #1
 80142f4:	72fb      	strb	r3, [r7, #11]
          break;
 80142f6:	e055      	b.n	80143a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142fe:	691b      	ldr	r3, [r3, #16]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d00b      	beq.n	801431c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801430a:	691b      	ldr	r3, [r3, #16]
 801430c:	687a      	ldr	r2, [r7, #4]
 801430e:	7c12      	ldrb	r2, [r2, #16]
 8014310:	f107 0108 	add.w	r1, r7, #8
 8014314:	4610      	mov	r0, r2
 8014316:	4798      	blx	r3
 8014318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801431a:	e043      	b.n	80143a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801431c:	6839      	ldr	r1, [r7, #0]
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f000 fa7d 	bl	801481e <USBD_CtlError>
            err++;
 8014324:	7afb      	ldrb	r3, [r7, #11]
 8014326:	3301      	adds	r3, #1
 8014328:	72fb      	strb	r3, [r7, #11]
          break;
 801432a:	e03b      	b.n	80143a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014332:	695b      	ldr	r3, [r3, #20]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d00b      	beq.n	8014350 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801433e:	695b      	ldr	r3, [r3, #20]
 8014340:	687a      	ldr	r2, [r7, #4]
 8014342:	7c12      	ldrb	r2, [r2, #16]
 8014344:	f107 0108 	add.w	r1, r7, #8
 8014348:	4610      	mov	r0, r2
 801434a:	4798      	blx	r3
 801434c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801434e:	e029      	b.n	80143a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014350:	6839      	ldr	r1, [r7, #0]
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f000 fa63 	bl	801481e <USBD_CtlError>
            err++;
 8014358:	7afb      	ldrb	r3, [r7, #11]
 801435a:	3301      	adds	r3, #1
 801435c:	72fb      	strb	r3, [r7, #11]
          break;
 801435e:	e021      	b.n	80143a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014366:	699b      	ldr	r3, [r3, #24]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d00b      	beq.n	8014384 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014372:	699b      	ldr	r3, [r3, #24]
 8014374:	687a      	ldr	r2, [r7, #4]
 8014376:	7c12      	ldrb	r2, [r2, #16]
 8014378:	f107 0108 	add.w	r1, r7, #8
 801437c:	4610      	mov	r0, r2
 801437e:	4798      	blx	r3
 8014380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014382:	e00f      	b.n	80143a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014384:	6839      	ldr	r1, [r7, #0]
 8014386:	6878      	ldr	r0, [r7, #4]
 8014388:	f000 fa49 	bl	801481e <USBD_CtlError>
            err++;
 801438c:	7afb      	ldrb	r3, [r7, #11]
 801438e:	3301      	adds	r3, #1
 8014390:	72fb      	strb	r3, [r7, #11]
          break;
 8014392:	e007      	b.n	80143a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014394:	6839      	ldr	r1, [r7, #0]
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f000 fa41 	bl	801481e <USBD_CtlError>
          err++;
 801439c:	7afb      	ldrb	r3, [r7, #11]
 801439e:	3301      	adds	r3, #1
 80143a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80143a2:	bf00      	nop
      }
      break;
 80143a4:	e037      	b.n	8014416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	7c1b      	ldrb	r3, [r3, #16]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d109      	bne.n	80143c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80143b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80143b6:	f107 0208 	add.w	r2, r7, #8
 80143ba:	4610      	mov	r0, r2
 80143bc:	4798      	blx	r3
 80143be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80143c0:	e029      	b.n	8014416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80143c2:	6839      	ldr	r1, [r7, #0]
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f000 fa2a 	bl	801481e <USBD_CtlError>
        err++;
 80143ca:	7afb      	ldrb	r3, [r7, #11]
 80143cc:	3301      	adds	r3, #1
 80143ce:	72fb      	strb	r3, [r7, #11]
      break;
 80143d0:	e021      	b.n	8014416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	7c1b      	ldrb	r3, [r3, #16]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d10d      	bne.n	80143f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80143e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143e2:	f107 0208 	add.w	r2, r7, #8
 80143e6:	4610      	mov	r0, r2
 80143e8:	4798      	blx	r3
 80143ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	3301      	adds	r3, #1
 80143f0:	2207      	movs	r2, #7
 80143f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80143f4:	e00f      	b.n	8014416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80143f6:	6839      	ldr	r1, [r7, #0]
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f000 fa10 	bl	801481e <USBD_CtlError>
        err++;
 80143fe:	7afb      	ldrb	r3, [r7, #11]
 8014400:	3301      	adds	r3, #1
 8014402:	72fb      	strb	r3, [r7, #11]
      break;
 8014404:	e007      	b.n	8014416 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014406:	6839      	ldr	r1, [r7, #0]
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f000 fa08 	bl	801481e <USBD_CtlError>
      err++;
 801440e:	7afb      	ldrb	r3, [r7, #11]
 8014410:	3301      	adds	r3, #1
 8014412:	72fb      	strb	r3, [r7, #11]
      break;
 8014414:	bf00      	nop
  }

  if (err != 0U)
 8014416:	7afb      	ldrb	r3, [r7, #11]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d11e      	bne.n	801445a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	88db      	ldrh	r3, [r3, #6]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d016      	beq.n	8014452 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014424:	893b      	ldrh	r3, [r7, #8]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d00e      	beq.n	8014448 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	88da      	ldrh	r2, [r3, #6]
 801442e:	893b      	ldrh	r3, [r7, #8]
 8014430:	4293      	cmp	r3, r2
 8014432:	bf28      	it	cs
 8014434:	4613      	movcs	r3, r2
 8014436:	b29b      	uxth	r3, r3
 8014438:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801443a:	893b      	ldrh	r3, [r7, #8]
 801443c:	461a      	mov	r2, r3
 801443e:	68f9      	ldr	r1, [r7, #12]
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f000 fa69 	bl	8014918 <USBD_CtlSendData>
 8014446:	e009      	b.n	801445c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014448:	6839      	ldr	r1, [r7, #0]
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f000 f9e7 	bl	801481e <USBD_CtlError>
 8014450:	e004      	b.n	801445c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f000 faba 	bl	80149cc <USBD_CtlSendStatus>
 8014458:	e000      	b.n	801445c <USBD_GetDescriptor+0x320>
    return;
 801445a:	bf00      	nop
  }
}
 801445c:	3710      	adds	r7, #16
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop

08014464 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b084      	sub	sp, #16
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	889b      	ldrh	r3, [r3, #4]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d131      	bne.n	80144da <USBD_SetAddress+0x76>
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	88db      	ldrh	r3, [r3, #6]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d12d      	bne.n	80144da <USBD_SetAddress+0x76>
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	885b      	ldrh	r3, [r3, #2]
 8014482:	2b7f      	cmp	r3, #127	@ 0x7f
 8014484:	d829      	bhi.n	80144da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	885b      	ldrh	r3, [r3, #2]
 801448a:	b2db      	uxtb	r3, r3
 801448c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014490:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014498:	b2db      	uxtb	r3, r3
 801449a:	2b03      	cmp	r3, #3
 801449c:	d104      	bne.n	80144a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801449e:	6839      	ldr	r1, [r7, #0]
 80144a0:	6878      	ldr	r0, [r7, #4]
 80144a2:	f000 f9bc 	bl	801481e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144a6:	e01d      	b.n	80144e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	7bfa      	ldrb	r2, [r7, #15]
 80144ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80144b0:	7bfb      	ldrb	r3, [r7, #15]
 80144b2:	4619      	mov	r1, r3
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f004 fd09 	bl	8018ecc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f000 fa86 	bl	80149cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80144c0:	7bfb      	ldrb	r3, [r7, #15]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d004      	beq.n	80144d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	2202      	movs	r2, #2
 80144ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144ce:	e009      	b.n	80144e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2201      	movs	r2, #1
 80144d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144d8:	e004      	b.n	80144e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80144da:	6839      	ldr	r1, [r7, #0]
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f000 f99e 	bl	801481e <USBD_CtlError>
  }
}
 80144e2:	bf00      	nop
 80144e4:	bf00      	nop
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80144f6:	2300      	movs	r3, #0
 80144f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	885b      	ldrh	r3, [r3, #2]
 80144fe:	b2da      	uxtb	r2, r3
 8014500:	4b4e      	ldr	r3, [pc, #312]	@ (801463c <USBD_SetConfig+0x150>)
 8014502:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014504:	4b4d      	ldr	r3, [pc, #308]	@ (801463c <USBD_SetConfig+0x150>)
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	2b01      	cmp	r3, #1
 801450a:	d905      	bls.n	8014518 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801450c:	6839      	ldr	r1, [r7, #0]
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f000 f985 	bl	801481e <USBD_CtlError>
    return USBD_FAIL;
 8014514:	2303      	movs	r3, #3
 8014516:	e08c      	b.n	8014632 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801451e:	b2db      	uxtb	r3, r3
 8014520:	2b02      	cmp	r3, #2
 8014522:	d002      	beq.n	801452a <USBD_SetConfig+0x3e>
 8014524:	2b03      	cmp	r3, #3
 8014526:	d029      	beq.n	801457c <USBD_SetConfig+0x90>
 8014528:	e075      	b.n	8014616 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801452a:	4b44      	ldr	r3, [pc, #272]	@ (801463c <USBD_SetConfig+0x150>)
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d020      	beq.n	8014574 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014532:	4b42      	ldr	r3, [pc, #264]	@ (801463c <USBD_SetConfig+0x150>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	461a      	mov	r2, r3
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801453c:	4b3f      	ldr	r3, [pc, #252]	@ (801463c <USBD_SetConfig+0x150>)
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	4619      	mov	r1, r3
 8014542:	6878      	ldr	r0, [r7, #4]
 8014544:	f7ff f84b 	bl	80135de <USBD_SetClassConfig>
 8014548:	4603      	mov	r3, r0
 801454a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801454c:	7bfb      	ldrb	r3, [r7, #15]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d008      	beq.n	8014564 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014552:	6839      	ldr	r1, [r7, #0]
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f000 f962 	bl	801481e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2202      	movs	r2, #2
 801455e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014562:	e065      	b.n	8014630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f000 fa31 	bl	80149cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	2203      	movs	r2, #3
 801456e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014572:	e05d      	b.n	8014630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 fa29 	bl	80149cc <USBD_CtlSendStatus>
      break;
 801457a:	e059      	b.n	8014630 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801457c:	4b2f      	ldr	r3, [pc, #188]	@ (801463c <USBD_SetConfig+0x150>)
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d112      	bne.n	80145aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2202      	movs	r2, #2
 8014588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801458c:	4b2b      	ldr	r3, [pc, #172]	@ (801463c <USBD_SetConfig+0x150>)
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	461a      	mov	r2, r3
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014596:	4b29      	ldr	r3, [pc, #164]	@ (801463c <USBD_SetConfig+0x150>)
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	4619      	mov	r1, r3
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f7ff f83a 	bl	8013616 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f000 fa12 	bl	80149cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80145a8:	e042      	b.n	8014630 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80145aa:	4b24      	ldr	r3, [pc, #144]	@ (801463c <USBD_SetConfig+0x150>)
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	461a      	mov	r2, r3
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d02a      	beq.n	801460e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	4619      	mov	r1, r3
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f7ff f828 	bl	8013616 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80145c6:	4b1d      	ldr	r3, [pc, #116]	@ (801463c <USBD_SetConfig+0x150>)
 80145c8:	781b      	ldrb	r3, [r3, #0]
 80145ca:	461a      	mov	r2, r3
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80145d0:	4b1a      	ldr	r3, [pc, #104]	@ (801463c <USBD_SetConfig+0x150>)
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	4619      	mov	r1, r3
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	f7ff f801 	bl	80135de <USBD_SetClassConfig>
 80145dc:	4603      	mov	r3, r0
 80145de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80145e0:	7bfb      	ldrb	r3, [r7, #15]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d00f      	beq.n	8014606 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80145e6:	6839      	ldr	r1, [r7, #0]
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f000 f918 	bl	801481e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	685b      	ldr	r3, [r3, #4]
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	4619      	mov	r1, r3
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f7ff f80d 	bl	8013616 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2202      	movs	r2, #2
 8014600:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014604:	e014      	b.n	8014630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f000 f9e0 	bl	80149cc <USBD_CtlSendStatus>
      break;
 801460c:	e010      	b.n	8014630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f000 f9dc 	bl	80149cc <USBD_CtlSendStatus>
      break;
 8014614:	e00c      	b.n	8014630 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014616:	6839      	ldr	r1, [r7, #0]
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f000 f900 	bl	801481e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801461e:	4b07      	ldr	r3, [pc, #28]	@ (801463c <USBD_SetConfig+0x150>)
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	4619      	mov	r1, r3
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f7fe fff6 	bl	8013616 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801462a:	2303      	movs	r3, #3
 801462c:	73fb      	strb	r3, [r7, #15]
      break;
 801462e:	bf00      	nop
  }

  return ret;
 8014630:	7bfb      	ldrb	r3, [r7, #15]
}
 8014632:	4618      	mov	r0, r3
 8014634:	3710      	adds	r7, #16
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	200014dc 	.word	0x200014dc

08014640 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b082      	sub	sp, #8
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
 8014648:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	88db      	ldrh	r3, [r3, #6]
 801464e:	2b01      	cmp	r3, #1
 8014650:	d004      	beq.n	801465c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014652:	6839      	ldr	r1, [r7, #0]
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f000 f8e2 	bl	801481e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801465a:	e023      	b.n	80146a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014662:	b2db      	uxtb	r3, r3
 8014664:	2b02      	cmp	r3, #2
 8014666:	dc02      	bgt.n	801466e <USBD_GetConfig+0x2e>
 8014668:	2b00      	cmp	r3, #0
 801466a:	dc03      	bgt.n	8014674 <USBD_GetConfig+0x34>
 801466c:	e015      	b.n	801469a <USBD_GetConfig+0x5a>
 801466e:	2b03      	cmp	r3, #3
 8014670:	d00b      	beq.n	801468a <USBD_GetConfig+0x4a>
 8014672:	e012      	b.n	801469a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2200      	movs	r2, #0
 8014678:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	3308      	adds	r3, #8
 801467e:	2201      	movs	r2, #1
 8014680:	4619      	mov	r1, r3
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f000 f948 	bl	8014918 <USBD_CtlSendData>
        break;
 8014688:	e00c      	b.n	80146a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	3304      	adds	r3, #4
 801468e:	2201      	movs	r2, #1
 8014690:	4619      	mov	r1, r3
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f000 f940 	bl	8014918 <USBD_CtlSendData>
        break;
 8014698:	e004      	b.n	80146a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801469a:	6839      	ldr	r1, [r7, #0]
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 f8be 	bl	801481e <USBD_CtlError>
        break;
 80146a2:	bf00      	nop
}
 80146a4:	bf00      	nop
 80146a6:	3708      	adds	r7, #8
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}

080146ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b082      	sub	sp, #8
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80146bc:	b2db      	uxtb	r3, r3
 80146be:	3b01      	subs	r3, #1
 80146c0:	2b02      	cmp	r3, #2
 80146c2:	d81e      	bhi.n	8014702 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	88db      	ldrh	r3, [r3, #6]
 80146c8:	2b02      	cmp	r3, #2
 80146ca:	d004      	beq.n	80146d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80146cc:	6839      	ldr	r1, [r7, #0]
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 f8a5 	bl	801481e <USBD_CtlError>
        break;
 80146d4:	e01a      	b.n	801470c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	2201      	movs	r2, #1
 80146da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d005      	beq.n	80146f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	68db      	ldr	r3, [r3, #12]
 80146ea:	f043 0202 	orr.w	r2, r3, #2
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	330c      	adds	r3, #12
 80146f6:	2202      	movs	r2, #2
 80146f8:	4619      	mov	r1, r3
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 f90c 	bl	8014918 <USBD_CtlSendData>
      break;
 8014700:	e004      	b.n	801470c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014702:	6839      	ldr	r1, [r7, #0]
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f000 f88a 	bl	801481e <USBD_CtlError>
      break;
 801470a:	bf00      	nop
  }
}
 801470c:	bf00      	nop
 801470e:	3708      	adds	r7, #8
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}

08014714 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	885b      	ldrh	r3, [r3, #2]
 8014722:	2b01      	cmp	r3, #1
 8014724:	d107      	bne.n	8014736 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2201      	movs	r2, #1
 801472a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f000 f94c 	bl	80149cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014734:	e013      	b.n	801475e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	885b      	ldrh	r3, [r3, #2]
 801473a:	2b02      	cmp	r3, #2
 801473c:	d10b      	bne.n	8014756 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	889b      	ldrh	r3, [r3, #4]
 8014742:	0a1b      	lsrs	r3, r3, #8
 8014744:	b29b      	uxth	r3, r3
 8014746:	b2da      	uxtb	r2, r3
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f000 f93c 	bl	80149cc <USBD_CtlSendStatus>
}
 8014754:	e003      	b.n	801475e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014756:	6839      	ldr	r1, [r7, #0]
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	f000 f860 	bl	801481e <USBD_CtlError>
}
 801475e:	bf00      	nop
 8014760:	3708      	adds	r7, #8
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}

08014766 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b082      	sub	sp, #8
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
 801476e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014776:	b2db      	uxtb	r3, r3
 8014778:	3b01      	subs	r3, #1
 801477a:	2b02      	cmp	r3, #2
 801477c:	d80b      	bhi.n	8014796 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	885b      	ldrh	r3, [r3, #2]
 8014782:	2b01      	cmp	r3, #1
 8014784:	d10c      	bne.n	80147a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	2200      	movs	r2, #0
 801478a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f000 f91c 	bl	80149cc <USBD_CtlSendStatus>
      }
      break;
 8014794:	e004      	b.n	80147a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014796:	6839      	ldr	r1, [r7, #0]
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f000 f840 	bl	801481e <USBD_CtlError>
      break;
 801479e:	e000      	b.n	80147a2 <USBD_ClrFeature+0x3c>
      break;
 80147a0:	bf00      	nop
  }
}
 80147a2:	bf00      	nop
 80147a4:	3708      	adds	r7, #8
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}

080147aa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80147aa:	b580      	push	{r7, lr}
 80147ac:	b084      	sub	sp, #16
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	6078      	str	r0, [r7, #4]
 80147b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	781a      	ldrb	r2, [r3, #0]
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	3301      	adds	r3, #1
 80147c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	781a      	ldrb	r2, [r3, #0]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	3301      	adds	r3, #1
 80147d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80147d4:	68f8      	ldr	r0, [r7, #12]
 80147d6:	f7ff fa16 	bl	8013c06 <SWAPBYTE>
 80147da:	4603      	mov	r3, r0
 80147dc:	461a      	mov	r2, r3
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	3301      	adds	r3, #1
 80147e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	3301      	adds	r3, #1
 80147ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80147ee:	68f8      	ldr	r0, [r7, #12]
 80147f0:	f7ff fa09 	bl	8013c06 <SWAPBYTE>
 80147f4:	4603      	mov	r3, r0
 80147f6:	461a      	mov	r2, r3
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	3301      	adds	r3, #1
 8014800:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	3301      	adds	r3, #1
 8014806:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014808:	68f8      	ldr	r0, [r7, #12]
 801480a:	f7ff f9fc 	bl	8013c06 <SWAPBYTE>
 801480e:	4603      	mov	r3, r0
 8014810:	461a      	mov	r2, r3
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	80da      	strh	r2, [r3, #6]
}
 8014816:	bf00      	nop
 8014818:	3710      	adds	r7, #16
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801481e:	b580      	push	{r7, lr}
 8014820:	b082      	sub	sp, #8
 8014822:	af00      	add	r7, sp, #0
 8014824:	6078      	str	r0, [r7, #4]
 8014826:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014828:	2180      	movs	r1, #128	@ 0x80
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f004 fae4 	bl	8018df8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014830:	2100      	movs	r1, #0
 8014832:	6878      	ldr	r0, [r7, #4]
 8014834:	f004 fae0 	bl	8018df8 <USBD_LL_StallEP>
}
 8014838:	bf00      	nop
 801483a:	3708      	adds	r7, #8
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801484c:	2300      	movs	r3, #0
 801484e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d042      	beq.n	80148dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801485a:	6938      	ldr	r0, [r7, #16]
 801485c:	f000 f842 	bl	80148e4 <USBD_GetLen>
 8014860:	4603      	mov	r3, r0
 8014862:	3301      	adds	r3, #1
 8014864:	005b      	lsls	r3, r3, #1
 8014866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801486a:	d808      	bhi.n	801487e <USBD_GetString+0x3e>
 801486c:	6938      	ldr	r0, [r7, #16]
 801486e:	f000 f839 	bl	80148e4 <USBD_GetLen>
 8014872:	4603      	mov	r3, r0
 8014874:	3301      	adds	r3, #1
 8014876:	b29b      	uxth	r3, r3
 8014878:	005b      	lsls	r3, r3, #1
 801487a:	b29a      	uxth	r2, r3
 801487c:	e001      	b.n	8014882 <USBD_GetString+0x42>
 801487e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014886:	7dfb      	ldrb	r3, [r7, #23]
 8014888:	68ba      	ldr	r2, [r7, #8]
 801488a:	4413      	add	r3, r2
 801488c:	687a      	ldr	r2, [r7, #4]
 801488e:	7812      	ldrb	r2, [r2, #0]
 8014890:	701a      	strb	r2, [r3, #0]
  idx++;
 8014892:	7dfb      	ldrb	r3, [r7, #23]
 8014894:	3301      	adds	r3, #1
 8014896:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014898:	7dfb      	ldrb	r3, [r7, #23]
 801489a:	68ba      	ldr	r2, [r7, #8]
 801489c:	4413      	add	r3, r2
 801489e:	2203      	movs	r2, #3
 80148a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80148a2:	7dfb      	ldrb	r3, [r7, #23]
 80148a4:	3301      	adds	r3, #1
 80148a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80148a8:	e013      	b.n	80148d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80148aa:	7dfb      	ldrb	r3, [r7, #23]
 80148ac:	68ba      	ldr	r2, [r7, #8]
 80148ae:	4413      	add	r3, r2
 80148b0:	693a      	ldr	r2, [r7, #16]
 80148b2:	7812      	ldrb	r2, [r2, #0]
 80148b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	3301      	adds	r3, #1
 80148ba:	613b      	str	r3, [r7, #16]
    idx++;
 80148bc:	7dfb      	ldrb	r3, [r7, #23]
 80148be:	3301      	adds	r3, #1
 80148c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80148c2:	7dfb      	ldrb	r3, [r7, #23]
 80148c4:	68ba      	ldr	r2, [r7, #8]
 80148c6:	4413      	add	r3, r2
 80148c8:	2200      	movs	r2, #0
 80148ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80148cc:	7dfb      	ldrb	r3, [r7, #23]
 80148ce:	3301      	adds	r3, #1
 80148d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	781b      	ldrb	r3, [r3, #0]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d1e7      	bne.n	80148aa <USBD_GetString+0x6a>
 80148da:	e000      	b.n	80148de <USBD_GetString+0x9e>
    return;
 80148dc:	bf00      	nop
  }
}
 80148de:	3718      	adds	r7, #24
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}

080148e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b085      	sub	sp, #20
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80148ec:	2300      	movs	r3, #0
 80148ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80148f4:	e005      	b.n	8014902 <USBD_GetLen+0x1e>
  {
    len++;
 80148f6:	7bfb      	ldrb	r3, [r7, #15]
 80148f8:	3301      	adds	r3, #1
 80148fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	3301      	adds	r3, #1
 8014900:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d1f5      	bne.n	80148f6 <USBD_GetLen+0x12>
  }

  return len;
 801490a:	7bfb      	ldrb	r3, [r7, #15]
}
 801490c:	4618      	mov	r0, r3
 801490e:	3714      	adds	r7, #20
 8014910:	46bd      	mov	sp, r7
 8014912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014916:	4770      	bx	lr

08014918 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b084      	sub	sp, #16
 801491c:	af00      	add	r7, sp, #0
 801491e:	60f8      	str	r0, [r7, #12]
 8014920:	60b9      	str	r1, [r7, #8]
 8014922:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	2202      	movs	r2, #2
 8014928:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	687a      	ldr	r2, [r7, #4]
 8014936:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	68ba      	ldr	r2, [r7, #8]
 801493c:	2100      	movs	r1, #0
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	f004 fae3 	bl	8018f0a <USBD_LL_Transmit>

  return USBD_OK;
 8014944:	2300      	movs	r3, #0
}
 8014946:	4618      	mov	r0, r3
 8014948:	3710      	adds	r7, #16
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}

0801494e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801494e:	b580      	push	{r7, lr}
 8014950:	b084      	sub	sp, #16
 8014952:	af00      	add	r7, sp, #0
 8014954:	60f8      	str	r0, [r7, #12]
 8014956:	60b9      	str	r1, [r7, #8]
 8014958:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	68ba      	ldr	r2, [r7, #8]
 801495e:	2100      	movs	r1, #0
 8014960:	68f8      	ldr	r0, [r7, #12]
 8014962:	f004 fad2 	bl	8018f0a <USBD_LL_Transmit>

  return USBD_OK;
 8014966:	2300      	movs	r3, #0
}
 8014968:	4618      	mov	r0, r3
 801496a:	3710      	adds	r7, #16
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b084      	sub	sp, #16
 8014974:	af00      	add	r7, sp, #0
 8014976:	60f8      	str	r0, [r7, #12]
 8014978:	60b9      	str	r1, [r7, #8]
 801497a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2203      	movs	r2, #3
 8014980:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	687a      	ldr	r2, [r7, #4]
 8014988:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	687a      	ldr	r2, [r7, #4]
 8014990:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	68ba      	ldr	r2, [r7, #8]
 8014998:	2100      	movs	r1, #0
 801499a:	68f8      	ldr	r0, [r7, #12]
 801499c:	f004 fad6 	bl	8018f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80149a0:	2300      	movs	r3, #0
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3710      	adds	r7, #16
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}

080149aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80149aa:	b580      	push	{r7, lr}
 80149ac:	b084      	sub	sp, #16
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	60f8      	str	r0, [r7, #12]
 80149b2:	60b9      	str	r1, [r7, #8]
 80149b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	68ba      	ldr	r2, [r7, #8]
 80149ba:	2100      	movs	r1, #0
 80149bc:	68f8      	ldr	r0, [r7, #12]
 80149be:	f004 fac5 	bl	8018f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80149c2:	2300      	movs	r3, #0
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3710      	adds	r7, #16
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b082      	sub	sp, #8
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2204      	movs	r2, #4
 80149d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80149dc:	2300      	movs	r3, #0
 80149de:	2200      	movs	r2, #0
 80149e0:	2100      	movs	r1, #0
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f004 fa91 	bl	8018f0a <USBD_LL_Transmit>

  return USBD_OK;
 80149e8:	2300      	movs	r3, #0
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3708      	adds	r7, #8
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}

080149f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80149f2:	b580      	push	{r7, lr}
 80149f4:	b082      	sub	sp, #8
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2205      	movs	r2, #5
 80149fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014a02:	2300      	movs	r3, #0
 8014a04:	2200      	movs	r2, #0
 8014a06:	2100      	movs	r1, #0
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f004 fa9f 	bl	8018f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a0e:	2300      	movs	r3, #0
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3708      	adds	r7, #8
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b088      	sub	sp, #32
 8014a1c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014a22:	f107 0308 	add.w	r3, r7, #8
 8014a26:	2218      	movs	r2, #24
 8014a28:	2100      	movs	r1, #0
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f001 f92d 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8014a30:	233f      	movs	r3, #63	@ 0x3f
 8014a32:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014a34:	2381      	movs	r3, #129	@ 0x81
 8014a36:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014a38:	1dfb      	adds	r3, r7, #7
 8014a3a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014a40:	f107 0308 	add.w	r3, r7, #8
 8014a44:	2100      	movs	r1, #0
 8014a46:	4618      	mov	r0, r3
 8014a48:	f001 fba8 	bl	801619c <hci_send_req>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	da01      	bge.n	8014a56 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014a52:	23ff      	movs	r3, #255	@ 0xff
 8014a54:	e000      	b.n	8014a58 <aci_gap_set_non_discoverable+0x40>
  return status;
 8014a56:	79fb      	ldrb	r3, [r7, #7]
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3720      	adds	r7, #32
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}

08014a60 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014a60:	b5b0      	push	{r4, r5, r7, lr}
 8014a62:	b0ce      	sub	sp, #312	@ 0x138
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	4605      	mov	r5, r0
 8014a68:	460c      	mov	r4, r1
 8014a6a:	4610      	mov	r0, r2
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a72:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014a76:	462a      	mov	r2, r5
 8014a78:	701a      	strb	r2, [r3, #0]
 8014a7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a7e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a82:	4622      	mov	r2, r4
 8014a84:	801a      	strh	r2, [r3, #0]
 8014a86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a8a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8014a8e:	4602      	mov	r2, r0
 8014a90:	801a      	strh	r2, [r3, #0]
 8014a92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a96:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014a9a:	460a      	mov	r2, r1
 8014a9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014a9e:	f107 0310 	add.w	r3, r7, #16
 8014aa2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014aa6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014aaa:	3308      	adds	r3, #8
 8014aac:	f107 0210 	add.w	r2, r7, #16
 8014ab0:	4413      	add	r3, r2
 8014ab2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014ab6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014aba:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014abe:	4413      	add	r3, r2
 8014ac0:	3309      	adds	r3, #9
 8014ac2:	f107 0210 	add.w	r2, r7, #16
 8014ac6:	4413      	add	r3, r2
 8014ac8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014acc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ad0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014ade:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ae2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014ae6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014aea:	7812      	ldrb	r2, [r2, #0]
 8014aec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014aee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014af2:	3301      	adds	r3, #1
 8014af4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014af8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014afc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014b00:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8014b04:	8812      	ldrh	r2, [r2, #0]
 8014b06:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b0e:	3302      	adds	r3, #2
 8014b10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014b14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b18:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014b1c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8014b20:	8812      	ldrh	r2, [r2, #0]
 8014b22:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014b26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b2a:	3302      	adds	r3, #2
 8014b2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014b30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b34:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014b38:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014b3c:	7812      	ldrb	r2, [r2, #0]
 8014b3e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b44:	3301      	adds	r3, #1
 8014b46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014b4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b4e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014b52:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b58:	3301      	adds	r3, #1
 8014b5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014b5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b62:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014b66:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b6c:	3301      	adds	r3, #1
 8014b6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014b72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b76:	3308      	adds	r3, #8
 8014b78:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014b7c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8014b80:	4618      	mov	r0, r3
 8014b82:	f001 f872 	bl	8015c6a <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014b86:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014b8a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014b8e:	4413      	add	r3, r2
 8014b90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8014b94:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014b98:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014b9c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8014ba8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014bac:	3301      	adds	r3, #1
 8014bae:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014bb2:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f001 f857 	bl	8015c6a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8014bbc:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014bc0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014bc4:	4413      	add	r3, r2
 8014bc6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8014bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014bce:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8014bd2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014bd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bd8:	3302      	adds	r3, #2
 8014bda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8014bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014be2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8014be6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014be8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bec:	3302      	adds	r3, #2
 8014bee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014bf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014bf6:	2218      	movs	r2, #24
 8014bf8:	2100      	movs	r1, #0
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f001 f845 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8014c00:	233f      	movs	r3, #63	@ 0x3f
 8014c02:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8014c06:	2383      	movs	r3, #131	@ 0x83
 8014c08:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014c0c:	f107 0310 	add.w	r3, r7, #16
 8014c10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014c14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014c1c:	f107 030f 	add.w	r3, r7, #15
 8014c20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014c24:	2301      	movs	r3, #1
 8014c26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014c2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014c2e:	2100      	movs	r1, #0
 8014c30:	4618      	mov	r0, r3
 8014c32:	f001 fab3 	bl	801619c <hci_send_req>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	da01      	bge.n	8014c40 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8014c3c:	23ff      	movs	r3, #255	@ 0xff
 8014c3e:	e004      	b.n	8014c4a <aci_gap_set_discoverable+0x1ea>
  return status;
 8014c40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014c48:	781b      	ldrb	r3, [r3, #0]
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bdb0      	pop	{r4, r5, r7, pc}

08014c54 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b0cc      	sub	sp, #304	@ 0x130
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	4602      	mov	r2, r0
 8014c5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c60:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014c64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8014c66:	f107 0310 	add.w	r3, r7, #16
 8014c6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014c6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014c76:	2200      	movs	r2, #0
 8014c78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8014c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014c84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014c88:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014c8c:	7812      	ldrb	r2, [r2, #0]
 8014c8e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c94:	3301      	adds	r3, #1
 8014c96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014c9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014c9e:	2218      	movs	r2, #24
 8014ca0:	2100      	movs	r1, #0
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f000 fff1 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8014ca8:	233f      	movs	r3, #63	@ 0x3f
 8014caa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8014cae:	2385      	movs	r3, #133	@ 0x85
 8014cb0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014cb4:	f107 0310 	add.w	r3, r7, #16
 8014cb8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014cc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014cc4:	f107 030f 	add.w	r3, r7, #15
 8014cc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014ccc:	2301      	movs	r3, #1
 8014cce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014cd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014cd6:	2100      	movs	r1, #0
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f001 fa5f 	bl	801619c <hci_send_req>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	da01      	bge.n	8014ce8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8014ce4:	23ff      	movs	r3, #255	@ 0xff
 8014ce6:	e004      	b.n	8014cf2 <aci_gap_set_io_capability+0x9e>
  return status;
 8014ce8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014cf0:	781b      	ldrb	r3, [r3, #0]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8014cfc:	b5b0      	push	{r4, r5, r7, lr}
 8014cfe:	b0cc      	sub	sp, #304	@ 0x130
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	4605      	mov	r5, r0
 8014d04:	460c      	mov	r4, r1
 8014d06:	4610      	mov	r0, r2
 8014d08:	4619      	mov	r1, r3
 8014d0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d0e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014d12:	462a      	mov	r2, r5
 8014d14:	701a      	strb	r2, [r3, #0]
 8014d16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d1a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014d1e:	4622      	mov	r2, r4
 8014d20:	701a      	strb	r2, [r3, #0]
 8014d22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d26:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014d2a:	4602      	mov	r2, r0
 8014d2c:	701a      	strb	r2, [r3, #0]
 8014d2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d36:	460a      	mov	r2, r1
 8014d38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8014d3a:	f107 0310 	add.w	r3, r7, #16
 8014d3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014d42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8014d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d5c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014d60:	7812      	ldrb	r2, [r2, #0]
 8014d62:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d68:	3301      	adds	r3, #1
 8014d6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8014d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d72:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d76:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014d7a:	7812      	ldrb	r2, [r2, #0]
 8014d7c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d82:	3301      	adds	r3, #1
 8014d84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8014d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d90:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014d94:	7812      	ldrb	r2, [r2, #0]
 8014d96:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8014da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014da6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014daa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8014dae:	7812      	ldrb	r2, [r2, #0]
 8014db0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8014db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014db6:	3301      	adds	r3, #1
 8014db8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8014dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014dc0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8014dc4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dca:	3301      	adds	r3, #1
 8014dcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8014dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014dd4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8014dd8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dde:	3301      	adds	r3, #1
 8014de0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8014de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014de8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014dec:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014df2:	3301      	adds	r3, #1
 8014df4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8014df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014dfc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014e00:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8014e04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e08:	3304      	adds	r3, #4
 8014e0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8014e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e12:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8014e16:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8014e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e1c:	3301      	adds	r3, #1
 8014e1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e26:	2218      	movs	r2, #24
 8014e28:	2100      	movs	r1, #0
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f000 ff2d 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8014e30:	233f      	movs	r3, #63	@ 0x3f
 8014e32:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8014e36:	2386      	movs	r3, #134	@ 0x86
 8014e38:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014e3c:	f107 0310 	add.w	r3, r7, #16
 8014e40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014e4c:	f107 030f 	add.w	r3, r7, #15
 8014e50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014e54:	2301      	movs	r3, #1
 8014e56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014e5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e5e:	2100      	movs	r1, #0
 8014e60:	4618      	mov	r0, r3
 8014e62:	f001 f99b 	bl	801619c <hci_send_req>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	da01      	bge.n	8014e70 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8014e6c:	23ff      	movs	r3, #255	@ 0xff
 8014e6e:	e004      	b.n	8014e7a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8014e70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e74:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014e78:	781b      	ldrb	r3, [r3, #0]
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bdb0      	pop	{r4, r5, r7, pc}

08014e84 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b0cc      	sub	sp, #304	@ 0x130
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	4602      	mov	r2, r0
 8014e8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e90:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014e94:	6019      	str	r1, [r3, #0]
 8014e96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e9a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014e9e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8014ea0:	f107 0310 	add.w	r3, r7, #16
 8014ea4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014ea8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014eac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8014eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014ebe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014ec2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014ec6:	8812      	ldrh	r2, [r2, #0]
 8014ec8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ece:	3302      	adds	r3, #2
 8014ed0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8014ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014ed8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014edc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014ee0:	6812      	ldr	r2, [r2, #0]
 8014ee2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8014ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014eea:	3304      	adds	r3, #4
 8014eec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014ef0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ef4:	2218      	movs	r2, #24
 8014ef6:	2100      	movs	r1, #0
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f000 fec6 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8014efe:	233f      	movs	r3, #63	@ 0x3f
 8014f00:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8014f04:	2388      	movs	r3, #136	@ 0x88
 8014f06:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014f0a:	f107 0310 	add.w	r3, r7, #16
 8014f0e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014f1a:	f107 030f 	add.w	r3, r7, #15
 8014f1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014f22:	2301      	movs	r3, #1
 8014f24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f001 f934 	bl	801619c <hci_send_req>
 8014f34:	4603      	mov	r3, r0
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	da01      	bge.n	8014f3e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8014f3a:	23ff      	movs	r3, #255	@ 0xff
 8014f3c:	e004      	b.n	8014f48 <aci_gap_pass_key_resp+0xc4>
  return status;
 8014f3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f42:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014f46:	781b      	ldrb	r3, [r3, #0]
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8014f52:	b590      	push	{r4, r7, lr}
 8014f54:	b0cd      	sub	sp, #308	@ 0x134
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	4604      	mov	r4, r0
 8014f5a:	4608      	mov	r0, r1
 8014f5c:	4611      	mov	r1, r2
 8014f5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f62:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014f66:	6013      	str	r3, [r2, #0]
 8014f68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f6c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014f70:	4622      	mov	r2, r4
 8014f72:	701a      	strb	r2, [r3, #0]
 8014f74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f78:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	701a      	strb	r2, [r3, #0]
 8014f80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f84:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014f88:	460a      	mov	r2, r1
 8014f8a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8014f8c:	f107 0310 	add.w	r3, r7, #16
 8014f90:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014f94:	f107 0308 	add.w	r3, r7, #8
 8014f98:	2207      	movs	r2, #7
 8014f9a:	2100      	movs	r1, #0
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f000 fe74 	bl	8015c8a <Osal_MemSet>
  int index_input = 0;
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8014fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014fac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014fb0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014fb4:	7812      	ldrb	r2, [r2, #0]
 8014fb6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8014fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014fc6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014fca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014fce:	7812      	ldrb	r2, [r2, #0]
 8014fd0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fd6:	3301      	adds	r3, #1
 8014fd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8014fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014fe0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014fe4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014fe8:	7812      	ldrb	r2, [r2, #0]
 8014fea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ff0:	3301      	adds	r3, #1
 8014ff2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014ff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ffa:	2218      	movs	r2, #24
 8014ffc:	2100      	movs	r1, #0
 8014ffe:	4618      	mov	r0, r3
 8015000:	f000 fe43 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8015004:	233f      	movs	r3, #63	@ 0x3f
 8015006:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 801500a:	238a      	movs	r3, #138	@ 0x8a
 801500c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015010:	f107 0310 	add.w	r3, r7, #16
 8015014:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015018:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801501c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015020:	f107 0308 	add.w	r3, r7, #8
 8015024:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8015028:	2307      	movs	r3, #7
 801502a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801502e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015032:	2100      	movs	r1, #0
 8015034:	4618      	mov	r0, r3
 8015036:	f001 f8b1 	bl	801619c <hci_send_req>
 801503a:	4603      	mov	r3, r0
 801503c:	2b00      	cmp	r3, #0
 801503e:	da01      	bge.n	8015044 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8015040:	23ff      	movs	r3, #255	@ 0xff
 8015042:	e02e      	b.n	80150a2 <aci_gap_init+0x150>
  if ( resp.Status )
 8015044:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015048:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801504c:	781b      	ldrb	r3, [r3, #0]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d005      	beq.n	801505e <aci_gap_init+0x10c>
    return resp.Status;
 8015052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015056:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801505a:	781b      	ldrb	r3, [r3, #0]
 801505c:	e021      	b.n	80150a2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 801505e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015062:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015066:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801506a:	b29a      	uxth	r2, r3
 801506c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015070:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8015078:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801507c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015080:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8015084:	b29a      	uxth	r2, r3
 8015086:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801508a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 801508c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015090:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015094:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8015098:	b29a      	uxth	r2, r3
 801509a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801509e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80150a0:	2300      	movs	r3, #0
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd90      	pop	{r4, r7, pc}

080150ac <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b0cc      	sub	sp, #304	@ 0x130
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	4602      	mov	r2, r0
 80150b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150bc:	6019      	str	r1, [r3, #0]
 80150be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150c2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80150c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80150c8:	f107 0310 	add.w	r3, r7, #16
 80150cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80150d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80150d8:	2200      	movs	r2, #0
 80150da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80150dc:	2300      	movs	r3, #0
 80150de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80150e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80150ea:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80150ee:	7812      	ldrb	r2, [r2, #0]
 80150f0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80150f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150f6:	3301      	adds	r3, #1
 80150f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80150fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015100:	1c58      	adds	r0, r3, #1
 8015102:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015106:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801510a:	781a      	ldrb	r2, [r3, #0]
 801510c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015110:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015114:	6819      	ldr	r1, [r3, #0]
 8015116:	f000 fda8 	bl	8015c6a <Osal_MemCpy>
  index_input += AdvDataLen;
 801511a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801511e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015122:	781b      	ldrb	r3, [r3, #0]
 8015124:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015128:	4413      	add	r3, r2
 801512a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801512e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015132:	2218      	movs	r2, #24
 8015134:	2100      	movs	r1, #0
 8015136:	4618      	mov	r0, r3
 8015138:	f000 fda7 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 801513c:	233f      	movs	r3, #63	@ 0x3f
 801513e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8015142:	238e      	movs	r3, #142	@ 0x8e
 8015144:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015148:	f107 0310 	add.w	r3, r7, #16
 801514c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015150:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015154:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015158:	f107 030f 	add.w	r3, r7, #15
 801515c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015160:	2301      	movs	r3, #1
 8015162:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015166:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801516a:	2100      	movs	r1, #0
 801516c:	4618      	mov	r0, r3
 801516e:	f001 f815 	bl	801619c <hci_send_req>
 8015172:	4603      	mov	r3, r0
 8015174:	2b00      	cmp	r3, #0
 8015176:	da01      	bge.n	801517c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8015178:	23ff      	movs	r3, #255	@ 0xff
 801517a:	e004      	b.n	8015186 <aci_gap_update_adv_data+0xda>
  return status;
 801517c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015180:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015184:	781b      	ldrb	r3, [r3, #0]
}
 8015186:	4618      	mov	r0, r3
 8015188:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}

08015190 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b088      	sub	sp, #32
 8015194:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015196:	2300      	movs	r3, #0
 8015198:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801519a:	f107 0308 	add.w	r3, r7, #8
 801519e:	2218      	movs	r2, #24
 80151a0:	2100      	movs	r1, #0
 80151a2:	4618      	mov	r0, r3
 80151a4:	f000 fd71 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 80151a8:	233f      	movs	r3, #63	@ 0x3f
 80151aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80151ac:	2392      	movs	r3, #146	@ 0x92
 80151ae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80151b0:	1dfb      	adds	r3, r7, #7
 80151b2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80151b4:	2301      	movs	r3, #1
 80151b6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80151b8:	f107 0308 	add.w	r3, r7, #8
 80151bc:	2100      	movs	r1, #0
 80151be:	4618      	mov	r0, r3
 80151c0:	f000 ffec 	bl	801619c <hci_send_req>
 80151c4:	4603      	mov	r3, r0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	da01      	bge.n	80151ce <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80151ca:	23ff      	movs	r3, #255	@ 0xff
 80151cc:	e000      	b.n	80151d0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80151ce:	79fb      	ldrb	r3, [r7, #7]
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	3720      	adds	r7, #32
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b0cc      	sub	sp, #304	@ 0x130
 80151dc:	af00      	add	r7, sp, #0
 80151de:	4602      	mov	r2, r0
 80151e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80151e8:	801a      	strh	r2, [r3, #0]
 80151ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151ee:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80151f2:	460a      	mov	r2, r1
 80151f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80151f6:	f107 0310 	add.w	r3, r7, #16
 80151fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80151fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015202:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015206:	2200      	movs	r2, #0
 8015208:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801520a:	2300      	movs	r3, #0
 801520c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015210:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015214:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015218:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801521c:	8812      	ldrh	r2, [r2, #0]
 801521e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015220:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015224:	3302      	adds	r3, #2
 8015226:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801522a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801522e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015232:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015236:	7812      	ldrb	r2, [r2, #0]
 8015238:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801523a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801523e:	3301      	adds	r3, #1
 8015240:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015244:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015248:	2218      	movs	r2, #24
 801524a:	2100      	movs	r1, #0
 801524c:	4618      	mov	r0, r3
 801524e:	f000 fd1c 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8015252:	233f      	movs	r3, #63	@ 0x3f
 8015254:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8015258:	23a5      	movs	r3, #165	@ 0xa5
 801525a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801525e:	f107 0310 	add.w	r3, r7, #16
 8015262:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015266:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801526a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801526e:	f107 030f 	add.w	r3, r7, #15
 8015272:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015276:	2301      	movs	r3, #1
 8015278:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801527c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015280:	2100      	movs	r1, #0
 8015282:	4618      	mov	r0, r3
 8015284:	f000 ff8a 	bl	801619c <hci_send_req>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	da01      	bge.n	8015292 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 801528e:	23ff      	movs	r3, #255	@ 0xff
 8015290:	e004      	b.n	801529c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8015292:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015296:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801529a:	781b      	ldrb	r3, [r3, #0]
}
 801529c:	4618      	mov	r0, r3
 801529e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}

080152a6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80152a6:	b580      	push	{r7, lr}
 80152a8:	b088      	sub	sp, #32
 80152aa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80152ac:	2300      	movs	r3, #0
 80152ae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80152b0:	f107 0308 	add.w	r3, r7, #8
 80152b4:	2218      	movs	r2, #24
 80152b6:	2100      	movs	r1, #0
 80152b8:	4618      	mov	r0, r3
 80152ba:	f000 fce6 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 80152be:	233f      	movs	r3, #63	@ 0x3f
 80152c0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80152c2:	f240 1301 	movw	r3, #257	@ 0x101
 80152c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80152c8:	1dfb      	adds	r3, r7, #7
 80152ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80152cc:	2301      	movs	r3, #1
 80152ce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80152d0:	f107 0308 	add.w	r3, r7, #8
 80152d4:	2100      	movs	r1, #0
 80152d6:	4618      	mov	r0, r3
 80152d8:	f000 ff60 	bl	801619c <hci_send_req>
 80152dc:	4603      	mov	r3, r0
 80152de:	2b00      	cmp	r3, #0
 80152e0:	da01      	bge.n	80152e6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80152e2:	23ff      	movs	r3, #255	@ 0xff
 80152e4:	e000      	b.n	80152e8 <aci_gatt_init+0x42>
  return status;
 80152e6:	79fb      	ldrb	r3, [r7, #7]
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3720      	adds	r7, #32
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}

080152f0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80152f0:	b590      	push	{r4, r7, lr}
 80152f2:	b0cf      	sub	sp, #316	@ 0x13c
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	4604      	mov	r4, r0
 80152f8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80152fc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8015300:	6001      	str	r1, [r0, #0]
 8015302:	4610      	mov	r0, r2
 8015304:	4619      	mov	r1, r3
 8015306:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801530a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801530e:	4622      	mov	r2, r4
 8015310:	701a      	strb	r2, [r3, #0]
 8015312:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015316:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801531a:	4602      	mov	r2, r0
 801531c:	701a      	strb	r2, [r3, #0]
 801531e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015322:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015326:	460a      	mov	r2, r1
 8015328:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801532a:	f107 0310 	add.w	r3, r7, #16
 801532e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8015332:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015336:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801533a:	781b      	ldrb	r3, [r3, #0]
 801533c:	2b01      	cmp	r3, #1
 801533e:	d00a      	beq.n	8015356 <aci_gatt_add_service+0x66>
 8015340:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015344:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	2b02      	cmp	r3, #2
 801534c:	d101      	bne.n	8015352 <aci_gatt_add_service+0x62>
 801534e:	2311      	movs	r3, #17
 8015350:	e002      	b.n	8015358 <aci_gatt_add_service+0x68>
 8015352:	2301      	movs	r3, #1
 8015354:	e000      	b.n	8015358 <aci_gatt_add_service+0x68>
 8015356:	2303      	movs	r3, #3
 8015358:	f107 0210 	add.w	r2, r7, #16
 801535c:	4413      	add	r3, r2
 801535e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015362:	f107 030c 	add.w	r3, r7, #12
 8015366:	2203      	movs	r2, #3
 8015368:	2100      	movs	r1, #0
 801536a:	4618      	mov	r0, r3
 801536c:	f000 fc8d 	bl	8015c8a <Osal_MemSet>
  int index_input = 0;
 8015370:	2300      	movs	r3, #0
 8015372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8015376:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801537a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801537e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8015382:	7812      	ldrb	r2, [r2, #0]
 8015384:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015386:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801538a:	3301      	adds	r3, #1
 801538c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8015390:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015394:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015398:	781b      	ldrb	r3, [r3, #0]
 801539a:	2b01      	cmp	r3, #1
 801539c:	d002      	beq.n	80153a4 <aci_gatt_add_service+0xb4>
 801539e:	2b02      	cmp	r3, #2
 80153a0:	d004      	beq.n	80153ac <aci_gatt_add_service+0xbc>
 80153a2:	e007      	b.n	80153b4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80153a4:	2302      	movs	r3, #2
 80153a6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80153aa:	e005      	b.n	80153b8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80153ac:	2310      	movs	r3, #16
 80153ae:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80153b2:	e001      	b.n	80153b8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80153b4:	2397      	movs	r3, #151	@ 0x97
 80153b6:	e06c      	b.n	8015492 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80153b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80153bc:	1c58      	adds	r0, r3, #1
 80153be:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80153c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80153ca:	6819      	ldr	r1, [r3, #0]
 80153cc:	f000 fc4d 	bl	8015c6a <Osal_MemCpy>
    index_input += size;
 80153d0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80153d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80153d8:	4413      	add	r3, r2
 80153da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80153de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80153e2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80153e6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80153ea:	7812      	ldrb	r2, [r2, #0]
 80153ec:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80153ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153f2:	3301      	adds	r3, #1
 80153f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80153f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80153fc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015400:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8015404:	7812      	ldrb	r2, [r2, #0]
 8015406:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8015408:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801540c:	3301      	adds	r3, #1
 801540e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015416:	2218      	movs	r2, #24
 8015418:	2100      	movs	r1, #0
 801541a:	4618      	mov	r0, r3
 801541c:	f000 fc35 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8015420:	233f      	movs	r3, #63	@ 0x3f
 8015422:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8015426:	f44f 7381 	mov.w	r3, #258	@ 0x102
 801542a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801542e:	f107 0310 	add.w	r3, r7, #16
 8015432:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015436:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801543a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801543e:	f107 030c 	add.w	r3, r7, #12
 8015442:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8015446:	2303      	movs	r3, #3
 8015448:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801544c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015450:	2100      	movs	r1, #0
 8015452:	4618      	mov	r0, r3
 8015454:	f000 fea2 	bl	801619c <hci_send_req>
 8015458:	4603      	mov	r3, r0
 801545a:	2b00      	cmp	r3, #0
 801545c:	da01      	bge.n	8015462 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 801545e:	23ff      	movs	r3, #255	@ 0xff
 8015460:	e017      	b.n	8015492 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8015462:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015466:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d005      	beq.n	801547c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8015470:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015474:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015478:	781b      	ldrb	r3, [r3, #0]
 801547a:	e00a      	b.n	8015492 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 801547c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015480:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015484:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015488:	b29a      	uxth	r2, r3
 801548a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801548e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015490:	2300      	movs	r3, #0
}
 8015492:	4618      	mov	r0, r3
 8015494:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8015498:	46bd      	mov	sp, r7
 801549a:	bd90      	pop	{r4, r7, pc}

0801549c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 801549c:	b590      	push	{r4, r7, lr}
 801549e:	b0d1      	sub	sp, #324	@ 0x144
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	4604      	mov	r4, r0
 80154a4:	4608      	mov	r0, r1
 80154a6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80154aa:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80154ae:	600a      	str	r2, [r1, #0]
 80154b0:	4619      	mov	r1, r3
 80154b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80154b6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80154ba:	4622      	mov	r2, r4
 80154bc:	801a      	strh	r2, [r3, #0]
 80154be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80154c2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80154c6:	4602      	mov	r2, r0
 80154c8:	701a      	strb	r2, [r3, #0]
 80154ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80154ce:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80154d2:	460a      	mov	r2, r1
 80154d4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80154d6:	f107 0318 	add.w	r3, r7, #24
 80154da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80154de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80154e2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	2b01      	cmp	r3, #1
 80154ea:	d00a      	beq.n	8015502 <aci_gatt_add_char+0x66>
 80154ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80154f0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	2b02      	cmp	r3, #2
 80154f8:	d101      	bne.n	80154fe <aci_gatt_add_char+0x62>
 80154fa:	2313      	movs	r3, #19
 80154fc:	e002      	b.n	8015504 <aci_gatt_add_char+0x68>
 80154fe:	2303      	movs	r3, #3
 8015500:	e000      	b.n	8015504 <aci_gatt_add_char+0x68>
 8015502:	2305      	movs	r3, #5
 8015504:	f107 0218 	add.w	r2, r7, #24
 8015508:	4413      	add	r3, r2
 801550a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801550e:	f107 0314 	add.w	r3, r7, #20
 8015512:	2203      	movs	r2, #3
 8015514:	2100      	movs	r1, #0
 8015516:	4618      	mov	r0, r3
 8015518:	f000 fbb7 	bl	8015c8a <Osal_MemSet>
  int index_input = 0;
 801551c:	2300      	movs	r3, #0
 801551e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8015522:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015526:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801552a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801552e:	8812      	ldrh	r2, [r2, #0]
 8015530:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015532:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015536:	3302      	adds	r3, #2
 8015538:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 801553c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015540:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015544:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8015548:	7812      	ldrb	r2, [r2, #0]
 801554a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801554c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015550:	3301      	adds	r3, #1
 8015552:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8015556:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801555a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	2b01      	cmp	r3, #1
 8015562:	d002      	beq.n	801556a <aci_gatt_add_char+0xce>
 8015564:	2b02      	cmp	r3, #2
 8015566:	d004      	beq.n	8015572 <aci_gatt_add_char+0xd6>
 8015568:	e007      	b.n	801557a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 801556a:	2302      	movs	r3, #2
 801556c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8015570:	e005      	b.n	801557e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8015572:	2310      	movs	r3, #16
 8015574:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8015578:	e001      	b.n	801557e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 801557a:	2397      	movs	r3, #151	@ 0x97
 801557c:	e091      	b.n	80156a2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 801557e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015582:	1cd8      	adds	r0, r3, #3
 8015584:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8015588:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801558c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015590:	6819      	ldr	r1, [r3, #0]
 8015592:	f000 fb6a 	bl	8015c6a <Osal_MemCpy>
    index_input += size;
 8015596:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801559a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801559e:	4413      	add	r3, r2
 80155a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80155a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80155a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80155ac:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80155b0:	8812      	ldrh	r2, [r2, #0]
 80155b2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80155b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155b8:	3302      	adds	r3, #2
 80155ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80155be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80155c2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80155c6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80155c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155cc:	3301      	adds	r3, #1
 80155ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80155d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80155d6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80155da:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80155dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155e0:	3301      	adds	r3, #1
 80155e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80155e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80155ea:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80155ee:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80155f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155f4:	3301      	adds	r3, #1
 80155f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80155fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80155fe:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8015602:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8015604:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015608:	3301      	adds	r3, #1
 801560a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 801560e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015612:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8015616:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8015618:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801561c:	3301      	adds	r3, #1
 801561e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015622:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015626:	2218      	movs	r2, #24
 8015628:	2100      	movs	r1, #0
 801562a:	4618      	mov	r0, r3
 801562c:	f000 fb2d 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8015630:	233f      	movs	r3, #63	@ 0x3f
 8015632:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8015636:	f44f 7382 	mov.w	r3, #260	@ 0x104
 801563a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 801563e:	f107 0318 	add.w	r3, r7, #24
 8015642:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8015646:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801564a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 801564e:	f107 0314 	add.w	r3, r7, #20
 8015652:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8015656:	2303      	movs	r3, #3
 8015658:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 801565c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015660:	2100      	movs	r1, #0
 8015662:	4618      	mov	r0, r3
 8015664:	f000 fd9a 	bl	801619c <hci_send_req>
 8015668:	4603      	mov	r3, r0
 801566a:	2b00      	cmp	r3, #0
 801566c:	da01      	bge.n	8015672 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 801566e:	23ff      	movs	r3, #255	@ 0xff
 8015670:	e017      	b.n	80156a2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8015672:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015676:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801567a:	781b      	ldrb	r3, [r3, #0]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d005      	beq.n	801568c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8015680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015684:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	e00a      	b.n	80156a2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 801568c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015690:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015694:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015698:	b29a      	uxth	r2, r3
 801569a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801569e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd90      	pop	{r4, r7, pc}

080156ac <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80156ac:	b5b0      	push	{r4, r5, r7, lr}
 80156ae:	b0cc      	sub	sp, #304	@ 0x130
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	4605      	mov	r5, r0
 80156b4:	460c      	mov	r4, r1
 80156b6:	4610      	mov	r0, r2
 80156b8:	4619      	mov	r1, r3
 80156ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80156be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80156c2:	462a      	mov	r2, r5
 80156c4:	801a      	strh	r2, [r3, #0]
 80156c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80156ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80156ce:	4622      	mov	r2, r4
 80156d0:	801a      	strh	r2, [r3, #0]
 80156d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80156d6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80156da:	4602      	mov	r2, r0
 80156dc:	701a      	strb	r2, [r3, #0]
 80156de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80156e2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80156e6:	460a      	mov	r2, r1
 80156e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80156ea:	f107 0310 	add.w	r3, r7, #16
 80156ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80156f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80156f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80156fa:	2200      	movs	r2, #0
 80156fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80156fe:	2300      	movs	r3, #0
 8015700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8015704:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015708:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801570c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015710:	8812      	ldrh	r2, [r2, #0]
 8015712:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015714:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015718:	3302      	adds	r3, #2
 801571a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 801571e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015722:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015726:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801572a:	8812      	ldrh	r2, [r2, #0]
 801572c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801572e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015732:	3302      	adds	r3, #2
 8015734:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8015738:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801573c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015740:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8015744:	7812      	ldrb	r2, [r2, #0]
 8015746:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8015748:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801574c:	3301      	adds	r3, #1
 801574e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8015752:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015756:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801575a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 801575e:	7812      	ldrb	r2, [r2, #0]
 8015760:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8015762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015766:	3301      	adds	r3, #1
 8015768:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 801576c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015770:	1d98      	adds	r0, r3, #6
 8015772:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015776:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	461a      	mov	r2, r3
 801577e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8015782:	f000 fa72 	bl	8015c6a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8015786:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801578a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015794:	4413      	add	r3, r2
 8015796:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801579a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801579e:	2218      	movs	r2, #24
 80157a0:	2100      	movs	r1, #0
 80157a2:	4618      	mov	r0, r3
 80157a4:	f000 fa71 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 80157a8:	233f      	movs	r3, #63	@ 0x3f
 80157aa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80157ae:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80157b2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80157b6:	f107 0310 	add.w	r3, r7, #16
 80157ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80157be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80157c6:	f107 030f 	add.w	r3, r7, #15
 80157ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80157ce:	2301      	movs	r3, #1
 80157d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80157d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80157d8:	2100      	movs	r1, #0
 80157da:	4618      	mov	r0, r3
 80157dc:	f000 fcde 	bl	801619c <hci_send_req>
 80157e0:	4603      	mov	r3, r0
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	da01      	bge.n	80157ea <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80157e6:	23ff      	movs	r3, #255	@ 0xff
 80157e8:	e004      	b.n	80157f4 <aci_gatt_update_char_value+0x148>
  return status;
 80157ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80157f2:	781b      	ldrb	r3, [r3, #0]
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bdb0      	pop	{r4, r5, r7, pc}

080157fe <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80157fe:	b580      	push	{r7, lr}
 8015800:	b0cc      	sub	sp, #304	@ 0x130
 8015802:	af00      	add	r7, sp, #0
 8015804:	4602      	mov	r2, r0
 8015806:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801580a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801580e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8015810:	f107 0310 	add.w	r3, r7, #16
 8015814:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015818:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801581c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015820:	2200      	movs	r2, #0
 8015822:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015824:	2300      	movs	r3, #0
 8015826:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801582a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801582e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015832:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015836:	8812      	ldrh	r2, [r2, #0]
 8015838:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801583a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801583e:	3302      	adds	r3, #2
 8015840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015848:	2218      	movs	r2, #24
 801584a:	2100      	movs	r1, #0
 801584c:	4618      	mov	r0, r3
 801584e:	f000 fa1c 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8015852:	233f      	movs	r3, #63	@ 0x3f
 8015854:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8015858:	f240 1325 	movw	r3, #293	@ 0x125
 801585c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015860:	f107 0310 	add.w	r3, r7, #16
 8015864:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015868:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801586c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015870:	f107 030f 	add.w	r3, r7, #15
 8015874:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015878:	2301      	movs	r3, #1
 801587a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801587e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015882:	2100      	movs	r1, #0
 8015884:	4618      	mov	r0, r3
 8015886:	f000 fc89 	bl	801619c <hci_send_req>
 801588a:	4603      	mov	r3, r0
 801588c:	2b00      	cmp	r3, #0
 801588e:	da01      	bge.n	8015894 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8015890:	23ff      	movs	r3, #255	@ 0xff
 8015892:	e004      	b.n	801589e <aci_gatt_confirm_indication+0xa0>
  return status;
 8015894:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015898:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801589c:	781b      	ldrb	r3, [r3, #0]
}
 801589e:	4618      	mov	r0, r3
 80158a0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b0cc      	sub	sp, #304	@ 0x130
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80158b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80158b6:	601a      	str	r2, [r3, #0]
 80158b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80158bc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80158c0:	4602      	mov	r2, r0
 80158c2:	701a      	strb	r2, [r3, #0]
 80158c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80158c8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80158cc:	460a      	mov	r2, r1
 80158ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80158d0:	f107 0310 	add.w	r3, r7, #16
 80158d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80158d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80158dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80158e0:	2200      	movs	r2, #0
 80158e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80158e4:	2300      	movs	r3, #0
 80158e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80158ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80158ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80158f2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80158f6:	7812      	ldrb	r2, [r2, #0]
 80158f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80158fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158fe:	3301      	adds	r3, #1
 8015900:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8015904:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015908:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801590c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015910:	7812      	ldrb	r2, [r2, #0]
 8015912:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015914:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015918:	3301      	adds	r3, #1
 801591a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 801591e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015922:	1c98      	adds	r0, r3, #2
 8015924:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015928:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801592c:	781a      	ldrb	r2, [r3, #0]
 801592e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015932:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015936:	6819      	ldr	r1, [r3, #0]
 8015938:	f000 f997 	bl	8015c6a <Osal_MemCpy>
  index_input += Length;
 801593c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015940:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801594a:	4413      	add	r3, r2
 801594c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015954:	2218      	movs	r2, #24
 8015956:	2100      	movs	r1, #0
 8015958:	4618      	mov	r0, r3
 801595a:	f000 f996 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 801595e:	233f      	movs	r3, #63	@ 0x3f
 8015960:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8015964:	230c      	movs	r3, #12
 8015966:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801596a:	f107 0310 	add.w	r3, r7, #16
 801596e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015972:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015976:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801597a:	f107 030f 	add.w	r3, r7, #15
 801597e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015982:	2301      	movs	r3, #1
 8015984:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015988:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801598c:	2100      	movs	r1, #0
 801598e:	4618      	mov	r0, r3
 8015990:	f000 fc04 	bl	801619c <hci_send_req>
 8015994:	4603      	mov	r3, r0
 8015996:	2b00      	cmp	r3, #0
 8015998:	da01      	bge.n	801599e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 801599a:	23ff      	movs	r3, #255	@ 0xff
 801599c:	e004      	b.n	80159a8 <aci_hal_write_config_data+0x100>
  return status;
 801599e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80159a6:	781b      	ldrb	r3, [r3, #0]
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}

080159b2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80159b2:	b580      	push	{r7, lr}
 80159b4:	b0cc      	sub	sp, #304	@ 0x130
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	4602      	mov	r2, r0
 80159ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159be:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80159c2:	701a      	strb	r2, [r3, #0]
 80159c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159c8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80159cc:	460a      	mov	r2, r1
 80159ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80159d0:	f107 0310 	add.w	r3, r7, #16
 80159d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80159d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80159e0:	2200      	movs	r2, #0
 80159e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80159e4:	2300      	movs	r3, #0
 80159e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80159ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80159ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80159f2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80159f6:	7812      	ldrb	r2, [r2, #0]
 80159f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80159fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159fe:	3301      	adds	r3, #1
 8015a00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8015a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a0c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015a10:	7812      	ldrb	r2, [r2, #0]
 8015a12:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015a14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a18:	3301      	adds	r3, #1
 8015a1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015a1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015a22:	2218      	movs	r2, #24
 8015a24:	2100      	movs	r1, #0
 8015a26:	4618      	mov	r0, r3
 8015a28:	f000 f92f 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8015a2c:	233f      	movs	r3, #63	@ 0x3f
 8015a2e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8015a32:	230f      	movs	r3, #15
 8015a34:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015a38:	f107 0310 	add.w	r3, r7, #16
 8015a3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015a48:	f107 030f 	add.w	r3, r7, #15
 8015a4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015a50:	2301      	movs	r3, #1
 8015a52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015a56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015a5a:	2100      	movs	r1, #0
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f000 fb9d 	bl	801619c <hci_send_req>
 8015a62:	4603      	mov	r3, r0
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	da01      	bge.n	8015a6c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015a68:	23ff      	movs	r3, #255	@ 0xff
 8015a6a:	e004      	b.n	8015a76 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015a6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a74:	781b      	ldrb	r3, [r3, #0]
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b0cc      	sub	sp, #304	@ 0x130
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	4602      	mov	r2, r0
 8015a88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015a90:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015a92:	f107 0310 	add.w	r3, r7, #16
 8015a96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015a9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ab0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015ab4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015ab8:	8812      	ldrh	r2, [r2, #0]
 8015aba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ac0:	3302      	adds	r3, #2
 8015ac2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015ac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015aca:	2218      	movs	r2, #24
 8015acc:	2100      	movs	r1, #0
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f000 f8db 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x3f;
 8015ad4:	233f      	movs	r3, #63	@ 0x3f
 8015ad6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8015ada:	2318      	movs	r3, #24
 8015adc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015ae0:	f107 0310 	add.w	r3, r7, #16
 8015ae4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015aec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015af0:	f107 030f 	add.w	r3, r7, #15
 8015af4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015af8:	2301      	movs	r3, #1
 8015afa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015afe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b02:	2100      	movs	r1, #0
 8015b04:	4618      	mov	r0, r3
 8015b06:	f000 fb49 	bl	801619c <hci_send_req>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	da01      	bge.n	8015b14 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015b10:	23ff      	movs	r3, #255	@ 0xff
 8015b12:	e004      	b.n	8015b1e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015b14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b1c:	781b      	ldrb	r3, [r3, #0]
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b088      	sub	sp, #32
 8015b2c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015b32:	f107 0308 	add.w	r3, r7, #8
 8015b36:	2218      	movs	r2, #24
 8015b38:	2100      	movs	r1, #0
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f000 f8a5 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x03;
 8015b40:	2303      	movs	r3, #3
 8015b42:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015b44:	2303      	movs	r3, #3
 8015b46:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015b48:	1dfb      	adds	r3, r7, #7
 8015b4a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015b50:	f107 0308 	add.w	r3, r7, #8
 8015b54:	2100      	movs	r1, #0
 8015b56:	4618      	mov	r0, r3
 8015b58:	f000 fb20 	bl	801619c <hci_send_req>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	da01      	bge.n	8015b66 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015b62:	23ff      	movs	r3, #255	@ 0xff
 8015b64:	e000      	b.n	8015b68 <hci_reset+0x40>
  return status;
 8015b66:	79fb      	ldrb	r3, [r7, #7]
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3720      	adds	r7, #32
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}

08015b70 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015b70:	b590      	push	{r4, r7, lr}
 8015b72:	b0cd      	sub	sp, #308	@ 0x134
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	4604      	mov	r4, r0
 8015b78:	4608      	mov	r0, r1
 8015b7a:	4611      	mov	r1, r2
 8015b7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015b84:	4622      	mov	r2, r4
 8015b86:	701a      	strb	r2, [r3, #0]
 8015b88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b90:	4602      	mov	r2, r0
 8015b92:	701a      	strb	r2, [r3, #0]
 8015b94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b98:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015b9c:	460a      	mov	r2, r1
 8015b9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8015ba0:	f107 0310 	add.w	r3, r7, #16
 8015ba4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015ba8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015bac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8015bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015bbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015bc2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015bc6:	7812      	ldrb	r2, [r2, #0]
 8015bc8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bce:	3301      	adds	r3, #1
 8015bd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015bd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015bdc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015be0:	7812      	ldrb	r2, [r2, #0]
 8015be2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015be4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015be8:	3301      	adds	r3, #1
 8015bea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8015bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015bf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015bf6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015bfa:	7812      	ldrb	r2, [r2, #0]
 8015bfc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c02:	3301      	adds	r3, #1
 8015c04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015c08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c0c:	2218      	movs	r2, #24
 8015c0e:	2100      	movs	r1, #0
 8015c10:	4618      	mov	r0, r3
 8015c12:	f000 f83a 	bl	8015c8a <Osal_MemSet>
  rq.ogf = 0x08;
 8015c16:	2308      	movs	r3, #8
 8015c18:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8015c1c:	2331      	movs	r3, #49	@ 0x31
 8015c1e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015c22:	f107 0310 	add.w	r3, r7, #16
 8015c26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015c32:	f107 030f 	add.w	r3, r7, #15
 8015c36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015c40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c44:	2100      	movs	r1, #0
 8015c46:	4618      	mov	r0, r3
 8015c48:	f000 faa8 	bl	801619c <hci_send_req>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	da01      	bge.n	8015c56 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8015c52:	23ff      	movs	r3, #255	@ 0xff
 8015c54:	e004      	b.n	8015c60 <hci_le_set_default_phy+0xf0>
  return status;
 8015c56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c5a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c5e:	781b      	ldrb	r3, [r3, #0]
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd90      	pop	{r4, r7, pc}

08015c6a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b084      	sub	sp, #16
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	60f8      	str	r0, [r7, #12]
 8015c72:	60b9      	str	r1, [r7, #8]
 8015c74:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8015c76:	687a      	ldr	r2, [r7, #4]
 8015c78:	68b9      	ldr	r1, [r7, #8]
 8015c7a:	68f8      	ldr	r0, [r7, #12]
 8015c7c:	f005 fd0d 	bl	801b69a <memcpy>
 8015c80:	4603      	mov	r3, r0
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3710      	adds	r7, #16
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}

08015c8a <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8015c8a:	b580      	push	{r7, lr}
 8015c8c:	b084      	sub	sp, #16
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	60f8      	str	r0, [r7, #12]
 8015c92:	60b9      	str	r1, [r7, #8]
 8015c94:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8015c96:	687a      	ldr	r2, [r7, #4]
 8015c98:	68b9      	ldr	r1, [r7, #8]
 8015c9a:	68f8      	ldr	r0, [r7, #12]
 8015c9c:	f005 fbe1 	bl	801b462 <memset>
 8015ca0:	4603      	mov	r3, r0
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3710      	adds	r7, #16
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}

08015caa <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8015caa:	b480      	push	{r7}
 8015cac:	af00      	add	r7, sp, #0
  return;
 8015cae:	bf00      	nop
}
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb6:	4770      	bx	lr

08015cb8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8015cb8:	b480      	push	{r7}
 8015cba:	af00      	add	r7, sp, #0
  return;
 8015cbc:	bf00      	nop
}
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc4:	4770      	bx	lr

08015cc6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8015cc6:	b480      	push	{r7}
 8015cc8:	af00      	add	r7, sp, #0
  return;
 8015cca:	bf00      	nop
}
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd2:	4770      	bx	lr

08015cd4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8015cd4:	b480      	push	{r7}
 8015cd6:	af00      	add	r7, sp, #0
  return;
 8015cd8:	bf00      	nop
}
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce0:	4770      	bx	lr

08015ce2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8015ce2:	b480      	push	{r7}
 8015ce4:	af00      	add	r7, sp, #0
  return;
 8015ce6:	bf00      	nop
}
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cee:	4770      	bx	lr

08015cf0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8015cf0:	b480      	push	{r7}
 8015cf2:	af00      	add	r7, sp, #0
  return;
 8015cf4:	bf00      	nop
}
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfc:	4770      	bx	lr

08015cfe <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8015cfe:	b480      	push	{r7}
 8015d00:	af00      	add	r7, sp, #0
  return;
 8015d02:	bf00      	nop
}
 8015d04:	46bd      	mov	sp, r7
 8015d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0a:	4770      	bx	lr

08015d0c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8015d0c:	b480      	push	{r7}
 8015d0e:	af00      	add	r7, sp, #0
  return;
 8015d10:	bf00      	nop
}
 8015d12:	46bd      	mov	sp, r7
 8015d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d18:	4770      	bx	lr

08015d1a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8015d1a:	b480      	push	{r7}
 8015d1c:	af00      	add	r7, sp, #0
  return;
 8015d1e:	bf00      	nop
}
 8015d20:	46bd      	mov	sp, r7
 8015d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d26:	4770      	bx	lr

08015d28 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8015d28:	b480      	push	{r7}
 8015d2a:	af00      	add	r7, sp, #0
  return;
 8015d2c:	bf00      	nop
}
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d34:	4770      	bx	lr

08015d36 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8015d36:	b480      	push	{r7}
 8015d38:	af00      	add	r7, sp, #0
  return;
 8015d3a:	bf00      	nop
}
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d42:	4770      	bx	lr

08015d44 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8015d44:	b480      	push	{r7}
 8015d46:	af00      	add	r7, sp, #0
  return;
 8015d48:	bf00      	nop
}
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d50:	4770      	bx	lr

08015d52 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8015d52:	b480      	push	{r7}
 8015d54:	af00      	add	r7, sp, #0
  return;
 8015d56:	bf00      	nop
}
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5e:	4770      	bx	lr

08015d60 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8015d60:	b480      	push	{r7}
 8015d62:	af00      	add	r7, sp, #0
  return;
 8015d64:	bf00      	nop
}
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr

08015d6e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8015d6e:	b480      	push	{r7}
 8015d70:	af00      	add	r7, sp, #0
  return;
 8015d72:	bf00      	nop
}
 8015d74:	46bd      	mov	sp, r7
 8015d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7a:	4770      	bx	lr

08015d7c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8015d7c:	b480      	push	{r7}
 8015d7e:	af00      	add	r7, sp, #0
  return;
 8015d80:	bf00      	nop
}
 8015d82:	46bd      	mov	sp, r7
 8015d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d88:	4770      	bx	lr

08015d8a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8015d8a:	b480      	push	{r7}
 8015d8c:	af00      	add	r7, sp, #0
  return;
 8015d8e:	bf00      	nop
}
 8015d90:	46bd      	mov	sp, r7
 8015d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d96:	4770      	bx	lr

08015d98 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8015d9c:	4b04      	ldr	r3, [pc, #16]	@ (8015db0 <SVCCTL_Init+0x18>)
 8015d9e:	2200      	movs	r2, #0
 8015da0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8015da2:	4b04      	ldr	r3, [pc, #16]	@ (8015db4 <SVCCTL_Init+0x1c>)
 8015da4:	2200      	movs	r2, #0
 8015da6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8015da8:	f000 f806 	bl	8015db8 <SVCCTL_SvcInit>

  return;
 8015dac:	bf00      	nop
}
 8015dae:	bd80      	pop	{r7, pc}
 8015db0:	20000320 	.word	0x20000320
 8015db4:	20000340 	.word	0x20000340

08015db8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	af00      	add	r7, sp, #0
  BAS_Init();
 8015dbc:	f7ff ff75 	bl	8015caa <BAS_Init>

  BLS_Init();
 8015dc0:	f7ff ff7a 	bl	8015cb8 <BLS_Init>

  CRS_STM_Init();
 8015dc4:	f7ff ff7f 	bl	8015cc6 <CRS_STM_Init>

  DIS_Init();
 8015dc8:	f7ff ff84 	bl	8015cd4 <DIS_Init>

  EDS_STM_Init();
 8015dcc:	f7ff ff89 	bl	8015ce2 <EDS_STM_Init>

  HIDS_Init();
 8015dd0:	f7ff ff8e 	bl	8015cf0 <HIDS_Init>

  HRS_Init();
 8015dd4:	f7ff ff93 	bl	8015cfe <HRS_Init>

  HTS_Init();
 8015dd8:	f7ff ff98 	bl	8015d0c <HTS_Init>

  IAS_Init();
 8015ddc:	f7ff ff9d 	bl	8015d1a <IAS_Init>

  LLS_Init();
 8015de0:	f7ff ffa2 	bl	8015d28 <LLS_Init>

  TPS_Init();
 8015de4:	f7ff ffa7 	bl	8015d36 <TPS_Init>

  MOTENV_STM_Init();
 8015de8:	f7ff ffac 	bl	8015d44 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8015dec:	f7ff ffb1 	bl	8015d52 <P2PS_STM_Init>

  ZDD_STM_Init();
 8015df0:	f7ff ffb6 	bl	8015d60 <ZDD_STM_Init>

  OTAS_STM_Init();
 8015df4:	f7ff ffbb 	bl	8015d6e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8015df8:	f7ff ffc7 	bl	8015d8a <BVOPUS_STM_Init>

  MESH_Init();
 8015dfc:	f7ff ffbe 	bl	8015d7c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8015e00:	f002 f8d6 	bl	8017fb0 <SVCCTL_InitCustomSvc>
  
  return;
 8015e04:	bf00      	nop
}
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8015e08:	b480      	push	{r7}
 8015e0a:	b083      	sub	sp, #12
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8015e10:	4b09      	ldr	r3, [pc, #36]	@ (8015e38 <SVCCTL_RegisterSvcHandler+0x30>)
 8015e12:	7f1b      	ldrb	r3, [r3, #28]
 8015e14:	4619      	mov	r1, r3
 8015e16:	4a08      	ldr	r2, [pc, #32]	@ (8015e38 <SVCCTL_RegisterSvcHandler+0x30>)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8015e1e:	4b06      	ldr	r3, [pc, #24]	@ (8015e38 <SVCCTL_RegisterSvcHandler+0x30>)
 8015e20:	7f1b      	ldrb	r3, [r3, #28]
 8015e22:	3301      	adds	r3, #1
 8015e24:	b2da      	uxtb	r2, r3
 8015e26:	4b04      	ldr	r3, [pc, #16]	@ (8015e38 <SVCCTL_RegisterSvcHandler+0x30>)
 8015e28:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8015e2a:	bf00      	nop
}
 8015e2c:	370c      	adds	r7, #12
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e34:	4770      	bx	lr
 8015e36:	bf00      	nop
 8015e38:	20000320 	.word	0x20000320

08015e3c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b086      	sub	sp, #24
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	3301      	adds	r3, #1
 8015e48:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8015e4e:	693b      	ldr	r3, [r7, #16]
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	2bff      	cmp	r3, #255	@ 0xff
 8015e54:	d125      	bne.n	8015ea2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8015e56:	693b      	ldr	r3, [r7, #16]
 8015e58:	3302      	adds	r3, #2
 8015e5a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	881b      	ldrh	r3, [r3, #0]
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015e66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015e6a:	d118      	bne.n	8015e9e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	757b      	strb	r3, [r7, #21]
 8015e70:	e00d      	b.n	8015e8e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8015e72:	7d7b      	ldrb	r3, [r7, #21]
 8015e74:	4a1a      	ldr	r2, [pc, #104]	@ (8015ee0 <SVCCTL_UserEvtRx+0xa4>)
 8015e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	4798      	blx	r3
 8015e7e:	4603      	mov	r3, r0
 8015e80:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8015e82:	7dfb      	ldrb	r3, [r7, #23]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d108      	bne.n	8015e9a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8015e88:	7d7b      	ldrb	r3, [r7, #21]
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	757b      	strb	r3, [r7, #21]
 8015e8e:	4b14      	ldr	r3, [pc, #80]	@ (8015ee0 <SVCCTL_UserEvtRx+0xa4>)
 8015e90:	7f1b      	ldrb	r3, [r3, #28]
 8015e92:	7d7a      	ldrb	r2, [r7, #21]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	d3ec      	bcc.n	8015e72 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8015e98:	e002      	b.n	8015ea0 <SVCCTL_UserEvtRx+0x64>
              break;
 8015e9a:	bf00      	nop
          break;
 8015e9c:	e000      	b.n	8015ea0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8015e9e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8015ea0:	e000      	b.n	8015ea4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8015ea2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8015ea4:	7dfb      	ldrb	r3, [r7, #23]
 8015ea6:	2b02      	cmp	r3, #2
 8015ea8:	d00f      	beq.n	8015eca <SVCCTL_UserEvtRx+0x8e>
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	dc10      	bgt.n	8015ed0 <SVCCTL_UserEvtRx+0x94>
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d002      	beq.n	8015eb8 <SVCCTL_UserEvtRx+0x7c>
 8015eb2:	2b01      	cmp	r3, #1
 8015eb4:	d006      	beq.n	8015ec4 <SVCCTL_UserEvtRx+0x88>
 8015eb6:	e00b      	b.n	8015ed0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f001 fcd9 	bl	8017870 <SVCCTL_App_Notification>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	75bb      	strb	r3, [r7, #22]
      break;
 8015ec2:	e008      	b.n	8015ed6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8015ec4:	2301      	movs	r3, #1
 8015ec6:	75bb      	strb	r3, [r7, #22]
      break;
 8015ec8:	e005      	b.n	8015ed6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	75bb      	strb	r3, [r7, #22]
      break;
 8015ece:	e002      	b.n	8015ed6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	75bb      	strb	r3, [r7, #22]
      break;
 8015ed4:	bf00      	nop
  }

  return (return_status);
 8015ed6:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	3718      	adds	r7, #24
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}
 8015ee0:	20000320 	.word	0x20000320

08015ee4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b088      	sub	sp, #32
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015eec:	f107 030c 	add.w	r3, r7, #12
 8015ef0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8015ef8:	69fb      	ldr	r3, [r7, #28]
 8015efa:	212e      	movs	r1, #46	@ 0x2e
 8015efc:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8015f00:	f000 fae8 	bl	80164d4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015f04:	69fb      	ldr	r3, [r7, #28]
 8015f06:	330b      	adds	r3, #11
 8015f08:	78db      	ldrb	r3, [r3, #3]
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	3720      	adds	r7, #32
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}

08015f12 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8015f12:	b580      	push	{r7, lr}
 8015f14:	b088      	sub	sp, #32
 8015f16:	af00      	add	r7, sp, #0
 8015f18:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015f1a:	f107 030c 	add.w	r3, r7, #12
 8015f1e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8015f26:	69fb      	ldr	r3, [r7, #28]
 8015f28:	210f      	movs	r1, #15
 8015f2a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8015f2e:	f000 fad1 	bl	80164d4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015f32:	69fb      	ldr	r3, [r7, #28]
 8015f34:	330b      	adds	r3, #11
 8015f36:	78db      	ldrb	r3, [r3, #3]
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	3720      	adds	r7, #32
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}

08015f40 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b088      	sub	sp, #32
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015f48:	f107 030c 	add.w	r3, r7, #12
 8015f4c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8015f4e:	69fb      	ldr	r3, [r7, #28]
 8015f50:	687a      	ldr	r2, [r7, #4]
 8015f52:	2110      	movs	r1, #16
 8015f54:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8015f58:	f000 fabc 	bl	80164d4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015f5c:	69fb      	ldr	r3, [r7, #28]
 8015f5e:	330b      	adds	r3, #11
 8015f60:	78db      	ldrb	r3, [r3, #3]
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	3720      	adds	r7, #32
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
	...

08015f6c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015f6c:	b480      	push	{r7}
 8015f6e:	b08b      	sub	sp, #44	@ 0x2c
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015f74:	2300      	movs	r3, #0
 8015f76:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8015f80:	2300      	movs	r3, #0
 8015f82:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8015f84:	2300      	movs	r3, #0
 8015f86:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8015f90:	2300      	movs	r3, #0
 8015f92:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8015f94:	4b4a      	ldr	r3, [pc, #296]	@ (80160c0 <SHCI_GetWirelessFwInfo+0x154>)
 8015f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015f9c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8015f9e:	693b      	ldr	r3, [r7, #16]
 8015fa0:	009b      	lsls	r3, r3, #2
 8015fa2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8015fa6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	4a44      	ldr	r2, [pc, #272]	@ (80160c4 <SHCI_GetWirelessFwInfo+0x158>)
 8015fb4:	4293      	cmp	r3, r2
 8015fb6:	d10f      	bne.n	8015fd8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	695b      	ldr	r3, [r3, #20]
 8015fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8015fbe:	68bb      	ldr	r3, [r7, #8]
 8015fc0:	699b      	ldr	r3, [r3, #24]
 8015fc2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	69db      	ldr	r3, [r3, #28]
 8015fc8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	68db      	ldr	r3, [r3, #12]
 8015fce:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	691b      	ldr	r3, [r3, #16]
 8015fd4:	617b      	str	r3, [r7, #20]
 8015fd6:	e01a      	b.n	801600e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8015fd8:	693b      	ldr	r3, [r7, #16]
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8015fe0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8015fe4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	691b      	ldr	r3, [r3, #16]
 8015fec:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	695b      	ldr	r3, [r3, #20]
 8015ff4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	699b      	ldr	r3, [r3, #24]
 8015ffc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	685b      	ldr	r3, [r3, #4]
 8016004:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	689b      	ldr	r3, [r3, #8]
 801600c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016010:	0e1b      	lsrs	r3, r3, #24
 8016012:	b2da      	uxtb	r2, r3
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8016018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801601a:	0c1b      	lsrs	r3, r3, #16
 801601c:	b2da      	uxtb	r2, r3
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016024:	0a1b      	lsrs	r3, r3, #8
 8016026:	b2da      	uxtb	r2, r3
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 801602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801602e:	091b      	lsrs	r3, r3, #4
 8016030:	b2db      	uxtb	r3, r3
 8016032:	f003 030f 	and.w	r3, r3, #15
 8016036:	b2da      	uxtb	r2, r3
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 801603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801603e:	b2db      	uxtb	r3, r3
 8016040:	f003 030f 	and.w	r3, r3, #15
 8016044:	b2da      	uxtb	r2, r3
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801604a:	6a3b      	ldr	r3, [r7, #32]
 801604c:	0e1b      	lsrs	r3, r3, #24
 801604e:	b2da      	uxtb	r2, r3
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8016054:	6a3b      	ldr	r3, [r7, #32]
 8016056:	0c1b      	lsrs	r3, r3, #16
 8016058:	b2da      	uxtb	r2, r3
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801605e:	6a3b      	ldr	r3, [r7, #32]
 8016060:	0a1b      	lsrs	r3, r3, #8
 8016062:	b2da      	uxtb	r2, r3
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8016068:	6a3b      	ldr	r3, [r7, #32]
 801606a:	b2da      	uxtb	r2, r3
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8016070:	69fb      	ldr	r3, [r7, #28]
 8016072:	b2da      	uxtb	r2, r3
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8016078:	69bb      	ldr	r3, [r7, #24]
 801607a:	0e1b      	lsrs	r3, r3, #24
 801607c:	b2da      	uxtb	r2, r3
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8016082:	69bb      	ldr	r3, [r7, #24]
 8016084:	0c1b      	lsrs	r3, r3, #16
 8016086:	b2da      	uxtb	r2, r3
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801608c:	69bb      	ldr	r3, [r7, #24]
 801608e:	0a1b      	lsrs	r3, r3, #8
 8016090:	b2da      	uxtb	r2, r3
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8016096:	697b      	ldr	r3, [r7, #20]
 8016098:	0e1b      	lsrs	r3, r3, #24
 801609a:	b2da      	uxtb	r2, r3
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80160a0:	697b      	ldr	r3, [r7, #20]
 80160a2:	0c1b      	lsrs	r3, r3, #16
 80160a4:	b2da      	uxtb	r2, r3
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	b2da      	uxtb	r2, r3
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80160b2:	2300      	movs	r3, #0
}
 80160b4:	4618      	mov	r0, r3
 80160b6:	372c      	adds	r7, #44	@ 0x2c
 80160b8:	46bd      	mov	sp, r7
 80160ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160be:	4770      	bx	lr
 80160c0:	58004000 	.word	0x58004000
 80160c4:	a94656b9 	.word	0xa94656b9

080160c8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b082      	sub	sp, #8
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	4a08      	ldr	r2, [pc, #32]	@ (80160f8 <hci_init+0x30>)
 80160d8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80160da:	4a08      	ldr	r2, [pc, #32]	@ (80160fc <hci_init+0x34>)
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80160e0:	4806      	ldr	r0, [pc, #24]	@ (80160fc <hci_init+0x34>)
 80160e2:	f000 f979 	bl	80163d8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	4618      	mov	r0, r3
 80160ec:	f000 f8da 	bl	80162a4 <TlInit>

  return;
 80160f0:	bf00      	nop
}
 80160f2:	3708      	adds	r7, #8
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}
 80160f8:	20001508 	.word	0x20001508
 80160fc:	200014e0 	.word	0x200014e0

08016100 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b084      	sub	sp, #16
 8016104:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8016106:	4822      	ldr	r0, [pc, #136]	@ (8016190 <hci_user_evt_proc+0x90>)
 8016108:	f000 fd32 	bl	8016b70 <LST_is_empty>
 801610c:	4603      	mov	r3, r0
 801610e:	2b00      	cmp	r3, #0
 8016110:	d12b      	bne.n	801616a <hci_user_evt_proc+0x6a>
 8016112:	4b20      	ldr	r3, [pc, #128]	@ (8016194 <hci_user_evt_proc+0x94>)
 8016114:	781b      	ldrb	r3, [r3, #0]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d027      	beq.n	801616a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801611a:	f107 030c 	add.w	r3, r7, #12
 801611e:	4619      	mov	r1, r3
 8016120:	481b      	ldr	r0, [pc, #108]	@ (8016190 <hci_user_evt_proc+0x90>)
 8016122:	f000 fdb4 	bl	8016c8e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8016126:	4b1c      	ldr	r3, [pc, #112]	@ (8016198 <hci_user_evt_proc+0x98>)
 8016128:	69db      	ldr	r3, [r3, #28]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d00c      	beq.n	8016148 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8016132:	2301      	movs	r3, #1
 8016134:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8016136:	4b18      	ldr	r3, [pc, #96]	@ (8016198 <hci_user_evt_proc+0x98>)
 8016138:	69db      	ldr	r3, [r3, #28]
 801613a:	1d3a      	adds	r2, r7, #4
 801613c:	4610      	mov	r0, r2
 801613e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8016140:	793a      	ldrb	r2, [r7, #4]
 8016142:	4b14      	ldr	r3, [pc, #80]	@ (8016194 <hci_user_evt_proc+0x94>)
 8016144:	701a      	strb	r2, [r3, #0]
 8016146:	e002      	b.n	801614e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8016148:	4b12      	ldr	r3, [pc, #72]	@ (8016194 <hci_user_evt_proc+0x94>)
 801614a:	2201      	movs	r2, #1
 801614c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 801614e:	4b11      	ldr	r3, [pc, #68]	@ (8016194 <hci_user_evt_proc+0x94>)
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d004      	beq.n	8016160 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	4618      	mov	r0, r3
 801615a:	f000 fc0d 	bl	8016978 <TL_MM_EvtDone>
 801615e:	e004      	b.n	801616a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	4619      	mov	r1, r3
 8016164:	480a      	ldr	r0, [pc, #40]	@ (8016190 <hci_user_evt_proc+0x90>)
 8016166:	f000 fd25 	bl	8016bb4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801616a:	4809      	ldr	r0, [pc, #36]	@ (8016190 <hci_user_evt_proc+0x90>)
 801616c:	f000 fd00 	bl	8016b70 <LST_is_empty>
 8016170:	4603      	mov	r3, r0
 8016172:	2b00      	cmp	r3, #0
 8016174:	d107      	bne.n	8016186 <hci_user_evt_proc+0x86>
 8016176:	4b07      	ldr	r3, [pc, #28]	@ (8016194 <hci_user_evt_proc+0x94>)
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d003      	beq.n	8016186 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 801617e:	4804      	ldr	r0, [pc, #16]	@ (8016190 <hci_user_evt_proc+0x90>)
 8016180:	f001 fdaa 	bl	8017cd8 <hci_notify_asynch_evt>
  }


  return;
 8016184:	bf00      	nop
 8016186:	bf00      	nop
}
 8016188:	3710      	adds	r7, #16
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}
 801618e:	bf00      	nop
 8016190:	20000348 	.word	0x20000348
 8016194:	20000354 	.word	0x20000354
 8016198:	200014e0 	.word	0x200014e0

0801619c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b088      	sub	sp, #32
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	460b      	mov	r3, r1
 80161a6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80161a8:	2000      	movs	r0, #0
 80161aa:	f000 f8d1 	bl	8016350 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80161ae:	2300      	movs	r3, #0
 80161b0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	885b      	ldrh	r3, [r3, #2]
 80161b6:	b21b      	sxth	r3, r3
 80161b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80161bc:	b21a      	sxth	r2, r3
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	881b      	ldrh	r3, [r3, #0]
 80161c2:	029b      	lsls	r3, r3, #10
 80161c4:	b21b      	sxth	r3, r3
 80161c6:	4313      	orrs	r3, r2
 80161c8:	b21b      	sxth	r3, r3
 80161ca:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80161cc:	4b33      	ldr	r3, [pc, #204]	@ (801629c <hci_send_req+0x100>)
 80161ce:	2201      	movs	r2, #1
 80161d0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	68db      	ldr	r3, [r3, #12]
 80161d6:	b2d9      	uxtb	r1, r3
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	689a      	ldr	r2, [r3, #8]
 80161dc:	8bbb      	ldrh	r3, [r7, #28]
 80161de:	4618      	mov	r0, r3
 80161e0:	f000 f890 	bl	8016304 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80161e4:	e04e      	b.n	8016284 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80161e6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80161ea:	f001 fd8c 	bl	8017d06 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80161ee:	e043      	b.n	8016278 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80161f0:	f107 030c 	add.w	r3, r7, #12
 80161f4:	4619      	mov	r1, r3
 80161f6:	482a      	ldr	r0, [pc, #168]	@ (80162a0 <hci_send_req+0x104>)
 80161f8:	f000 fd49 	bl	8016c8e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	7a5b      	ldrb	r3, [r3, #9]
 8016200:	2b0f      	cmp	r3, #15
 8016202:	d114      	bne.n	801622e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	330b      	adds	r3, #11
 8016208:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801620a:	693b      	ldr	r3, [r7, #16]
 801620c:	885b      	ldrh	r3, [r3, #2]
 801620e:	b29b      	uxth	r3, r3
 8016210:	8bba      	ldrh	r2, [r7, #28]
 8016212:	429a      	cmp	r2, r3
 8016214:	d104      	bne.n	8016220 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	691b      	ldr	r3, [r3, #16]
 801621a:	693a      	ldr	r2, [r7, #16]
 801621c:	7812      	ldrb	r2, [r2, #0]
 801621e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8016220:	693b      	ldr	r3, [r7, #16]
 8016222:	785b      	ldrb	r3, [r3, #1]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d027      	beq.n	8016278 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8016228:	2301      	movs	r3, #1
 801622a:	77fb      	strb	r3, [r7, #31]
 801622c:	e024      	b.n	8016278 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	330b      	adds	r3, #11
 8016232:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8016234:	69bb      	ldr	r3, [r7, #24]
 8016236:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801623a:	b29b      	uxth	r3, r3
 801623c:	8bba      	ldrh	r2, [r7, #28]
 801623e:	429a      	cmp	r2, r3
 8016240:	d114      	bne.n	801626c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	7a9b      	ldrb	r3, [r3, #10]
 8016246:	3b03      	subs	r3, #3
 8016248:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	695a      	ldr	r2, [r3, #20]
 801624e:	7dfb      	ldrb	r3, [r7, #23]
 8016250:	429a      	cmp	r2, r3
 8016252:	bfa8      	it	ge
 8016254:	461a      	movge	r2, r3
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	6918      	ldr	r0, [r3, #16]
 801625e:	69bb      	ldr	r3, [r7, #24]
 8016260:	1cd9      	adds	r1, r3, #3
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	695b      	ldr	r3, [r3, #20]
 8016266:	461a      	mov	r2, r3
 8016268:	f005 fa17 	bl	801b69a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 801626c:	69bb      	ldr	r3, [r7, #24]
 801626e:	781b      	ldrb	r3, [r3, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d001      	beq.n	8016278 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8016274:	2301      	movs	r3, #1
 8016276:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8016278:	4809      	ldr	r0, [pc, #36]	@ (80162a0 <hci_send_req+0x104>)
 801627a:	f000 fc79 	bl	8016b70 <LST_is_empty>
 801627e:	4603      	mov	r3, r0
 8016280:	2b00      	cmp	r3, #0
 8016282:	d0b5      	beq.n	80161f0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8016284:	7ffb      	ldrb	r3, [r7, #31]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d0ad      	beq.n	80161e6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 801628a:	2001      	movs	r0, #1
 801628c:	f000 f860 	bl	8016350 <NotifyCmdStatus>

  return 0;
 8016290:	2300      	movs	r3, #0
}
 8016292:	4618      	mov	r0, r3
 8016294:	3720      	adds	r7, #32
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}
 801629a:	bf00      	nop
 801629c:	2000150c 	.word	0x2000150c
 80162a0:	20001500 	.word	0x20001500

080162a4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b086      	sub	sp, #24
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80162ac:	480f      	ldr	r0, [pc, #60]	@ (80162ec <TlInit+0x48>)
 80162ae:	f000 fc4f 	bl	8016b50 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80162b2:	4a0f      	ldr	r2, [pc, #60]	@ (80162f0 <TlInit+0x4c>)
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80162b8:	480e      	ldr	r0, [pc, #56]	@ (80162f4 <TlInit+0x50>)
 80162ba:	f000 fc49 	bl	8016b50 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80162be:	4b0e      	ldr	r3, [pc, #56]	@ (80162f8 <TlInit+0x54>)
 80162c0:	2201      	movs	r2, #1
 80162c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80162c4:	4b0d      	ldr	r3, [pc, #52]	@ (80162fc <TlInit+0x58>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d00a      	beq.n	80162e2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80162d0:	4b0b      	ldr	r3, [pc, #44]	@ (8016300 <TlInit+0x5c>)
 80162d2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80162d4:	4b09      	ldr	r3, [pc, #36]	@ (80162fc <TlInit+0x58>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	f107 0208 	add.w	r2, r7, #8
 80162dc:	4610      	mov	r0, r2
 80162de:	4798      	blx	r3
  }

  return;
 80162e0:	bf00      	nop
 80162e2:	bf00      	nop
}
 80162e4:	3718      	adds	r7, #24
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	20001500 	.word	0x20001500
 80162f0:	20000350 	.word	0x20000350
 80162f4:	20000348 	.word	0x20000348
 80162f8:	20000354 	.word	0x20000354
 80162fc:	200014e0 	.word	0x200014e0
 8016300:	08016391 	.word	0x08016391

08016304 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
 801630a:	4603      	mov	r3, r0
 801630c:	603a      	str	r2, [r7, #0]
 801630e:	80fb      	strh	r3, [r7, #6]
 8016310:	460b      	mov	r3, r1
 8016312:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8016314:	4b0c      	ldr	r3, [pc, #48]	@ (8016348 <SendCmd+0x44>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	88fa      	ldrh	r2, [r7, #6]
 801631a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801631e:	4b0a      	ldr	r3, [pc, #40]	@ (8016348 <SendCmd+0x44>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	797a      	ldrb	r2, [r7, #5]
 8016324:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8016326:	4b08      	ldr	r3, [pc, #32]	@ (8016348 <SendCmd+0x44>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	330c      	adds	r3, #12
 801632c:	797a      	ldrb	r2, [r7, #5]
 801632e:	6839      	ldr	r1, [r7, #0]
 8016330:	4618      	mov	r0, r3
 8016332:	f005 f9b2 	bl	801b69a <memcpy>

  hciContext.io.Send(0,0);
 8016336:	4b05      	ldr	r3, [pc, #20]	@ (801634c <SendCmd+0x48>)
 8016338:	691b      	ldr	r3, [r3, #16]
 801633a:	2100      	movs	r1, #0
 801633c:	2000      	movs	r0, #0
 801633e:	4798      	blx	r3

  return;
 8016340:	bf00      	nop
}
 8016342:	3708      	adds	r7, #8
 8016344:	46bd      	mov	sp, r7
 8016346:	bd80      	pop	{r7, pc}
 8016348:	20000350 	.word	0x20000350
 801634c:	200014e0 	.word	0x200014e0

08016350 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b082      	sub	sp, #8
 8016354:	af00      	add	r7, sp, #0
 8016356:	4603      	mov	r3, r0
 8016358:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 801635a:	79fb      	ldrb	r3, [r7, #7]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d108      	bne.n	8016372 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8016360:	4b0a      	ldr	r3, [pc, #40]	@ (801638c <NotifyCmdStatus+0x3c>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d00d      	beq.n	8016384 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8016368:	4b08      	ldr	r3, [pc, #32]	@ (801638c <NotifyCmdStatus+0x3c>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	2000      	movs	r0, #0
 801636e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8016370:	e008      	b.n	8016384 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8016372:	4b06      	ldr	r3, [pc, #24]	@ (801638c <NotifyCmdStatus+0x3c>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d004      	beq.n	8016384 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 801637a:	4b04      	ldr	r3, [pc, #16]	@ (801638c <NotifyCmdStatus+0x3c>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	2001      	movs	r0, #1
 8016380:	4798      	blx	r3
  return;
 8016382:	bf00      	nop
 8016384:	bf00      	nop
}
 8016386:	3708      	adds	r7, #8
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	20001508 	.word	0x20001508

08016390 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	7a5b      	ldrb	r3, [r3, #9]
 801639c:	2b0f      	cmp	r3, #15
 801639e:	d003      	beq.n	80163a8 <TlEvtReceived+0x18>
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	7a5b      	ldrb	r3, [r3, #9]
 80163a4:	2b0e      	cmp	r3, #14
 80163a6:	d107      	bne.n	80163b8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80163a8:	6879      	ldr	r1, [r7, #4]
 80163aa:	4809      	ldr	r0, [pc, #36]	@ (80163d0 <TlEvtReceived+0x40>)
 80163ac:	f000 fc28 	bl	8016c00 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80163b0:	2000      	movs	r0, #0
 80163b2:	f001 fc9d 	bl	8017cf0 <hci_cmd_resp_release>
 80163b6:	e006      	b.n	80163c6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80163b8:	6879      	ldr	r1, [r7, #4]
 80163ba:	4806      	ldr	r0, [pc, #24]	@ (80163d4 <TlEvtReceived+0x44>)
 80163bc:	f000 fc20 	bl	8016c00 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80163c0:	4804      	ldr	r0, [pc, #16]	@ (80163d4 <TlEvtReceived+0x44>)
 80163c2:	f001 fc89 	bl	8017cd8 <hci_notify_asynch_evt>
  }

  return;
 80163c6:	bf00      	nop
}
 80163c8:	3708      	adds	r7, #8
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}
 80163ce:	bf00      	nop
 80163d0:	20001500 	.word	0x20001500
 80163d4:	20000348 	.word	0x20000348

080163d8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80163d8:	b480      	push	{r7}
 80163da:	b083      	sub	sp, #12
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	4a05      	ldr	r2, [pc, #20]	@ (80163f8 <hci_register_io_bus+0x20>)
 80163e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	4a04      	ldr	r2, [pc, #16]	@ (80163fc <hci_register_io_bus+0x24>)
 80163ea:	611a      	str	r2, [r3, #16]

  return;
 80163ec:	bf00      	nop
}
 80163ee:	370c      	adds	r7, #12
 80163f0:	46bd      	mov	sp, r7
 80163f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f6:	4770      	bx	lr
 80163f8:	080166f1 	.word	0x080166f1
 80163fc:	08016759 	.word	0x08016759

08016400 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
 8016408:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	685b      	ldr	r3, [r3, #4]
 801640e:	4a08      	ldr	r2, [pc, #32]	@ (8016430 <shci_init+0x30>)
 8016410:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8016412:	4a08      	ldr	r2, [pc, #32]	@ (8016434 <shci_init+0x34>)
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8016418:	4806      	ldr	r0, [pc, #24]	@ (8016434 <shci_init+0x34>)
 801641a:	f000 f915 	bl	8016648 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	4618      	mov	r0, r3
 8016424:	f000 f898 	bl	8016558 <TlInit>

  return;
 8016428:	bf00      	nop
}
 801642a:	3708      	adds	r7, #8
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	20001530 	.word	0x20001530
 8016434:	20001510 	.word	0x20001510

08016438 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801643e:	4822      	ldr	r0, [pc, #136]	@ (80164c8 <shci_user_evt_proc+0x90>)
 8016440:	f000 fb96 	bl	8016b70 <LST_is_empty>
 8016444:	4603      	mov	r3, r0
 8016446:	2b00      	cmp	r3, #0
 8016448:	d12b      	bne.n	80164a2 <shci_user_evt_proc+0x6a>
 801644a:	4b20      	ldr	r3, [pc, #128]	@ (80164cc <shci_user_evt_proc+0x94>)
 801644c:	781b      	ldrb	r3, [r3, #0]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d027      	beq.n	80164a2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8016452:	f107 030c 	add.w	r3, r7, #12
 8016456:	4619      	mov	r1, r3
 8016458:	481b      	ldr	r0, [pc, #108]	@ (80164c8 <shci_user_evt_proc+0x90>)
 801645a:	f000 fc18 	bl	8016c8e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801645e:	4b1c      	ldr	r3, [pc, #112]	@ (80164d0 <shci_user_evt_proc+0x98>)
 8016460:	69db      	ldr	r3, [r3, #28]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d00c      	beq.n	8016480 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801646a:	2301      	movs	r3, #1
 801646c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801646e:	4b18      	ldr	r3, [pc, #96]	@ (80164d0 <shci_user_evt_proc+0x98>)
 8016470:	69db      	ldr	r3, [r3, #28]
 8016472:	1d3a      	adds	r2, r7, #4
 8016474:	4610      	mov	r0, r2
 8016476:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8016478:	793a      	ldrb	r2, [r7, #4]
 801647a:	4b14      	ldr	r3, [pc, #80]	@ (80164cc <shci_user_evt_proc+0x94>)
 801647c:	701a      	strb	r2, [r3, #0]
 801647e:	e002      	b.n	8016486 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8016480:	4b12      	ldr	r3, [pc, #72]	@ (80164cc <shci_user_evt_proc+0x94>)
 8016482:	2201      	movs	r2, #1
 8016484:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8016486:	4b11      	ldr	r3, [pc, #68]	@ (80164cc <shci_user_evt_proc+0x94>)
 8016488:	781b      	ldrb	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d004      	beq.n	8016498 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	4618      	mov	r0, r3
 8016492:	f000 fa71 	bl	8016978 <TL_MM_EvtDone>
 8016496:	e004      	b.n	80164a2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	4619      	mov	r1, r3
 801649c:	480a      	ldr	r0, [pc, #40]	@ (80164c8 <shci_user_evt_proc+0x90>)
 801649e:	f000 fb89 	bl	8016bb4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80164a2:	4809      	ldr	r0, [pc, #36]	@ (80164c8 <shci_user_evt_proc+0x90>)
 80164a4:	f000 fb64 	bl	8016b70 <LST_is_empty>
 80164a8:	4603      	mov	r3, r0
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d107      	bne.n	80164be <shci_user_evt_proc+0x86>
 80164ae:	4b07      	ldr	r3, [pc, #28]	@ (80164cc <shci_user_evt_proc+0x94>)
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d003      	beq.n	80164be <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80164b6:	4804      	ldr	r0, [pc, #16]	@ (80164c8 <shci_user_evt_proc+0x90>)
 80164b8:	f7eb f97a 	bl	80017b0 <shci_notify_asynch_evt>
  }


  return;
 80164bc:	bf00      	nop
 80164be:	bf00      	nop
}
 80164c0:	3710      	adds	r7, #16
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	20000358 	.word	0x20000358
 80164cc:	20000368 	.word	0x20000368
 80164d0:	20001510 	.word	0x20001510

080164d4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b084      	sub	sp, #16
 80164d8:	af00      	add	r7, sp, #0
 80164da:	60ba      	str	r2, [r7, #8]
 80164dc:	607b      	str	r3, [r7, #4]
 80164de:	4603      	mov	r3, r0
 80164e0:	81fb      	strh	r3, [r7, #14]
 80164e2:	460b      	mov	r3, r1
 80164e4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80164e6:	2000      	movs	r0, #0
 80164e8:	f000 f868 	bl	80165bc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80164ec:	4b17      	ldr	r3, [pc, #92]	@ (801654c <shci_send+0x78>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	89fa      	ldrh	r2, [r7, #14]
 80164f2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80164f6:	4b15      	ldr	r3, [pc, #84]	@ (801654c <shci_send+0x78>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	7b7a      	ldrb	r2, [r7, #13]
 80164fc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80164fe:	4b13      	ldr	r3, [pc, #76]	@ (801654c <shci_send+0x78>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	330c      	adds	r3, #12
 8016504:	7b7a      	ldrb	r2, [r7, #13]
 8016506:	68b9      	ldr	r1, [r7, #8]
 8016508:	4618      	mov	r0, r3
 801650a:	f005 f8c6 	bl	801b69a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801650e:	4b10      	ldr	r3, [pc, #64]	@ (8016550 <shci_send+0x7c>)
 8016510:	2201      	movs	r2, #1
 8016512:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8016514:	4b0f      	ldr	r3, [pc, #60]	@ (8016554 <shci_send+0x80>)
 8016516:	691b      	ldr	r3, [r3, #16]
 8016518:	2100      	movs	r1, #0
 801651a:	2000      	movs	r0, #0
 801651c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801651e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8016522:	f7eb f95c 	bl	80017de <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f103 0008 	add.w	r0, r3, #8
 801652c:	4b07      	ldr	r3, [pc, #28]	@ (801654c <shci_send+0x78>)
 801652e:	6819      	ldr	r1, [r3, #0]
 8016530:	4b06      	ldr	r3, [pc, #24]	@ (801654c <shci_send+0x78>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	789b      	ldrb	r3, [r3, #2]
 8016536:	3303      	adds	r3, #3
 8016538:	461a      	mov	r2, r3
 801653a:	f005 f8ae 	bl	801b69a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801653e:	2001      	movs	r0, #1
 8016540:	f000 f83c 	bl	80165bc <Cmd_SetStatus>

  return;
 8016544:	bf00      	nop
}
 8016546:	3710      	adds	r7, #16
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}
 801654c:	20000364 	.word	0x20000364
 8016550:	20001534 	.word	0x20001534
 8016554:	20001510 	.word	0x20001510

08016558 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b086      	sub	sp, #24
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8016560:	4a10      	ldr	r2, [pc, #64]	@ (80165a4 <TlInit+0x4c>)
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8016566:	4810      	ldr	r0, [pc, #64]	@ (80165a8 <TlInit+0x50>)
 8016568:	f000 faf2 	bl	8016b50 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801656c:	2001      	movs	r0, #1
 801656e:	f000 f825 	bl	80165bc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8016572:	4b0e      	ldr	r3, [pc, #56]	@ (80165ac <TlInit+0x54>)
 8016574:	2201      	movs	r2, #1
 8016576:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8016578:	4b0d      	ldr	r3, [pc, #52]	@ (80165b0 <TlInit+0x58>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d00c      	beq.n	801659a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8016584:	4b0b      	ldr	r3, [pc, #44]	@ (80165b4 <TlInit+0x5c>)
 8016586:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8016588:	4b0b      	ldr	r3, [pc, #44]	@ (80165b8 <TlInit+0x60>)
 801658a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 801658c:	4b08      	ldr	r3, [pc, #32]	@ (80165b0 <TlInit+0x58>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	f107 020c 	add.w	r2, r7, #12
 8016594:	4610      	mov	r0, r2
 8016596:	4798      	blx	r3
  }

  return;
 8016598:	bf00      	nop
 801659a:	bf00      	nop
}
 801659c:	3718      	adds	r7, #24
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	20000364 	.word	0x20000364
 80165a8:	20000358 	.word	0x20000358
 80165ac:	20000368 	.word	0x20000368
 80165b0:	20001510 	.word	0x20001510
 80165b4:	0801660d 	.word	0x0801660d
 80165b8:	08016625 	.word	0x08016625

080165bc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b082      	sub	sp, #8
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	4603      	mov	r3, r0
 80165c4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80165c6:	79fb      	ldrb	r3, [r7, #7]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d10b      	bne.n	80165e4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80165cc:	4b0d      	ldr	r3, [pc, #52]	@ (8016604 <Cmd_SetStatus+0x48>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d003      	beq.n	80165dc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80165d4:	4b0b      	ldr	r3, [pc, #44]	@ (8016604 <Cmd_SetStatus+0x48>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	2000      	movs	r0, #0
 80165da:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80165dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016608 <Cmd_SetStatus+0x4c>)
 80165de:	2200      	movs	r2, #0
 80165e0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80165e2:	e00b      	b.n	80165fc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80165e4:	4b08      	ldr	r3, [pc, #32]	@ (8016608 <Cmd_SetStatus+0x4c>)
 80165e6:	2201      	movs	r2, #1
 80165e8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80165ea:	4b06      	ldr	r3, [pc, #24]	@ (8016604 <Cmd_SetStatus+0x48>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d004      	beq.n	80165fc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80165f2:	4b04      	ldr	r3, [pc, #16]	@ (8016604 <Cmd_SetStatus+0x48>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	2001      	movs	r0, #1
 80165f8:	4798      	blx	r3
  return;
 80165fa:	bf00      	nop
 80165fc:	bf00      	nop
}
 80165fe:	3708      	adds	r7, #8
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	20001530 	.word	0x20001530
 8016608:	20000360 	.word	0x20000360

0801660c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8016614:	2000      	movs	r0, #0
 8016616:	f7eb f8d7 	bl	80017c8 <shci_cmd_resp_release>

  return;
 801661a:	bf00      	nop
}
 801661c:	3708      	adds	r7, #8
 801661e:	46bd      	mov	sp, r7
 8016620:	bd80      	pop	{r7, pc}
	...

08016624 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 801662c:	6879      	ldr	r1, [r7, #4]
 801662e:	4805      	ldr	r0, [pc, #20]	@ (8016644 <TlUserEvtReceived+0x20>)
 8016630:	f000 fae6 	bl	8016c00 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016634:	4803      	ldr	r0, [pc, #12]	@ (8016644 <TlUserEvtReceived+0x20>)
 8016636:	f7eb f8bb 	bl	80017b0 <shci_notify_asynch_evt>

  return;
 801663a:	bf00      	nop
}
 801663c:	3708      	adds	r7, #8
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}
 8016642:	bf00      	nop
 8016644:	20000358 	.word	0x20000358

08016648 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8016648:	b480      	push	{r7}
 801664a:	b083      	sub	sp, #12
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	4a05      	ldr	r2, [pc, #20]	@ (8016668 <shci_register_io_bus+0x20>)
 8016654:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	4a04      	ldr	r2, [pc, #16]	@ (801666c <shci_register_io_bus+0x24>)
 801665a:	611a      	str	r2, [r3, #16]

  return;
 801665c:	bf00      	nop
}
 801665e:	370c      	adds	r7, #12
 8016660:	46bd      	mov	sp, r7
 8016662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016666:	4770      	bx	lr
 8016668:	08016805 	.word	0x08016805
 801666c:	08016859 	.word	0x08016859

08016670 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8016670:	b580      	push	{r7, lr}
 8016672:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8016674:	f001 fefc 	bl	8018470 <HW_IPCC_Enable>

  return;
 8016678:	bf00      	nop
}
 801667a:	bd80      	pop	{r7, pc}

0801667c <TL_Init>:


void TL_Init( void )
{
 801667c:	b580      	push	{r7, lr}
 801667e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8016680:	4b10      	ldr	r3, [pc, #64]	@ (80166c4 <TL_Init+0x48>)
 8016682:	4a11      	ldr	r2, [pc, #68]	@ (80166c8 <TL_Init+0x4c>)
 8016684:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8016686:	4b0f      	ldr	r3, [pc, #60]	@ (80166c4 <TL_Init+0x48>)
 8016688:	4a10      	ldr	r2, [pc, #64]	@ (80166cc <TL_Init+0x50>)
 801668a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 801668c:	4b0d      	ldr	r3, [pc, #52]	@ (80166c4 <TL_Init+0x48>)
 801668e:	4a10      	ldr	r2, [pc, #64]	@ (80166d0 <TL_Init+0x54>)
 8016690:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8016692:	4b0c      	ldr	r3, [pc, #48]	@ (80166c4 <TL_Init+0x48>)
 8016694:	4a0f      	ldr	r2, [pc, #60]	@ (80166d4 <TL_Init+0x58>)
 8016696:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8016698:	4b0a      	ldr	r3, [pc, #40]	@ (80166c4 <TL_Init+0x48>)
 801669a:	4a0f      	ldr	r2, [pc, #60]	@ (80166d8 <TL_Init+0x5c>)
 801669c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 801669e:	4b09      	ldr	r3, [pc, #36]	@ (80166c4 <TL_Init+0x48>)
 80166a0:	4a0e      	ldr	r2, [pc, #56]	@ (80166dc <TL_Init+0x60>)
 80166a2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80166a4:	4b07      	ldr	r3, [pc, #28]	@ (80166c4 <TL_Init+0x48>)
 80166a6:	4a0e      	ldr	r2, [pc, #56]	@ (80166e0 <TL_Init+0x64>)
 80166a8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80166aa:	4b06      	ldr	r3, [pc, #24]	@ (80166c4 <TL_Init+0x48>)
 80166ac:	4a0d      	ldr	r2, [pc, #52]	@ (80166e4 <TL_Init+0x68>)
 80166ae:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80166b0:	4b04      	ldr	r3, [pc, #16]	@ (80166c4 <TL_Init+0x48>)
 80166b2:	4a0d      	ldr	r2, [pc, #52]	@ (80166e8 <TL_Init+0x6c>)
 80166b4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80166b6:	4b03      	ldr	r3, [pc, #12]	@ (80166c4 <TL_Init+0x48>)
 80166b8:	4a0c      	ldr	r2, [pc, #48]	@ (80166ec <TL_Init+0x70>)
 80166ba:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80166bc:	f001 feec 	bl	8018498 <HW_IPCC_Init>

  return;
 80166c0:	bf00      	nop
}
 80166c2:	bd80      	pop	{r7, pc}
 80166c4:	20030000 	.word	0x20030000
 80166c8:	20030028 	.word	0x20030028
 80166cc:	20030048 	.word	0x20030048
 80166d0:	20030058 	.word	0x20030058
 80166d4:	20030068 	.word	0x20030068
 80166d8:	20030070 	.word	0x20030070
 80166dc:	20030078 	.word	0x20030078
 80166e0:	20030080 	.word	0x20030080
 80166e4:	2003009c 	.word	0x2003009c
 80166e8:	200300a0 	.word	0x200300a0
 80166ec:	200300ac 	.word	0x200300ac

080166f0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b084      	sub	sp, #16
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80166fc:	4811      	ldr	r0, [pc, #68]	@ (8016744 <TL_BLE_Init+0x54>)
 80166fe:	f000 fa27 	bl	8016b50 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8016702:	4b11      	ldr	r3, [pc, #68]	@ (8016748 <TL_BLE_Init+0x58>)
 8016704:	685b      	ldr	r3, [r3, #4]
 8016706:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	689a      	ldr	r2, [r3, #8]
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	68da      	ldr	r2, [r3, #12]
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	4a0c      	ldr	r2, [pc, #48]	@ (801674c <TL_BLE_Init+0x5c>)
 801671c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	4a08      	ldr	r2, [pc, #32]	@ (8016744 <TL_BLE_Init+0x54>)
 8016722:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016724:	f001 fece 	bl	80184c4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	4a08      	ldr	r2, [pc, #32]	@ (8016750 <TL_BLE_Init+0x60>)
 801672e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	685b      	ldr	r3, [r3, #4]
 8016734:	4a07      	ldr	r2, [pc, #28]	@ (8016754 <TL_BLE_Init+0x64>)
 8016736:	6013      	str	r3, [r2, #0]

  return 0;
 8016738:	2300      	movs	r3, #0
}
 801673a:	4618      	mov	r0, r3
 801673c:	3710      	adds	r7, #16
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}
 8016742:	bf00      	nop
 8016744:	200300c8 	.word	0x200300c8
 8016748:	20030000 	.word	0x20030000
 801674c:	20030a58 	.word	0x20030a58
 8016750:	20001540 	.word	0x20001540
 8016754:	20001544 	.word	0x20001544

08016758 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b082      	sub	sp, #8
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	460b      	mov	r3, r1
 8016762:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8016764:	4b09      	ldr	r3, [pc, #36]	@ (801678c <TL_BLE_SendCmd+0x34>)
 8016766:	685b      	ldr	r3, [r3, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2201      	movs	r2, #1
 801676c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801676e:	4b07      	ldr	r3, [pc, #28]	@ (801678c <TL_BLE_SendCmd+0x34>)
 8016770:	685b      	ldr	r3, [r3, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	4619      	mov	r1, r3
 8016776:	2001      	movs	r0, #1
 8016778:	f000 f96c 	bl	8016a54 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 801677c:	f001 feac 	bl	80184d8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8016780:	2300      	movs	r3, #0
}
 8016782:	4618      	mov	r0, r3
 8016784:	3708      	adds	r7, #8
 8016786:	46bd      	mov	sp, r7
 8016788:	bd80      	pop	{r7, pc}
 801678a:	bf00      	nop
 801678c:	20030000 	.word	0x20030000

08016790 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8016796:	e01c      	b.n	80167d2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8016798:	1d3b      	adds	r3, r7, #4
 801679a:	4619      	mov	r1, r3
 801679c:	4812      	ldr	r0, [pc, #72]	@ (80167e8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801679e:	f000 fa76 	bl	8016c8e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	7a5b      	ldrb	r3, [r3, #9]
 80167a6:	2b0f      	cmp	r3, #15
 80167a8:	d003      	beq.n	80167b2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	7a5b      	ldrb	r3, [r3, #9]
 80167ae:	2b0e      	cmp	r3, #14
 80167b0:	d105      	bne.n	80167be <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	4619      	mov	r1, r3
 80167b6:	2002      	movs	r0, #2
 80167b8:	f000 f94c 	bl	8016a54 <OutputDbgTrace>
 80167bc:	e004      	b.n	80167c8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	4619      	mov	r1, r3
 80167c2:	2003      	movs	r0, #3
 80167c4:	f000 f946 	bl	8016a54 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80167c8:	4b08      	ldr	r3, [pc, #32]	@ (80167ec <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	687a      	ldr	r2, [r7, #4]
 80167ce:	4610      	mov	r0, r2
 80167d0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80167d2:	4805      	ldr	r0, [pc, #20]	@ (80167e8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80167d4:	f000 f9cc 	bl	8016b70 <LST_is_empty>
 80167d8:	4603      	mov	r3, r0
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d0dc      	beq.n	8016798 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80167de:	bf00      	nop
}
 80167e0:	3708      	adds	r7, #8
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}
 80167e6:	bf00      	nop
 80167e8:	200300c8 	.word	0x200300c8
 80167ec:	20001540 	.word	0x20001540

080167f0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80167f4:	4b02      	ldr	r3, [pc, #8]	@ (8016800 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	4798      	blx	r3

  return;
 80167fa:	bf00      	nop
}
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	20001544 	.word	0x20001544

08016804 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016810:	480d      	ldr	r0, [pc, #52]	@ (8016848 <TL_SYS_Init+0x44>)
 8016812:	f000 f99d 	bl	8016b50 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016816:	4b0d      	ldr	r3, [pc, #52]	@ (801684c <TL_SYS_Init+0x48>)
 8016818:	68db      	ldr	r3, [r3, #12]
 801681a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	689a      	ldr	r2, [r3, #8]
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	4a08      	ldr	r2, [pc, #32]	@ (8016848 <TL_SYS_Init+0x44>)
 8016828:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801682a:	f001 fe77 	bl	801851c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	4a07      	ldr	r2, [pc, #28]	@ (8016850 <TL_SYS_Init+0x4c>)
 8016834:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	4a06      	ldr	r2, [pc, #24]	@ (8016854 <TL_SYS_Init+0x50>)
 801683c:	6013      	str	r3, [r2, #0]

  return 0;
 801683e:	2300      	movs	r3, #0
}
 8016840:	4618      	mov	r0, r3
 8016842:	3710      	adds	r7, #16
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}
 8016848:	200300d0 	.word	0x200300d0
 801684c:	20030000 	.word	0x20030000
 8016850:	20001548 	.word	0x20001548
 8016854:	2000154c 	.word	0x2000154c

08016858 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b082      	sub	sp, #8
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	460b      	mov	r3, r1
 8016862:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016864:	4b09      	ldr	r3, [pc, #36]	@ (801688c <TL_SYS_SendCmd+0x34>)
 8016866:	68db      	ldr	r3, [r3, #12]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	2210      	movs	r2, #16
 801686c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801686e:	4b07      	ldr	r3, [pc, #28]	@ (801688c <TL_SYS_SendCmd+0x34>)
 8016870:	68db      	ldr	r3, [r3, #12]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	4619      	mov	r1, r3
 8016876:	2004      	movs	r0, #4
 8016878:	f000 f8ec 	bl	8016a54 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 801687c:	f001 fe58 	bl	8018530 <HW_IPCC_SYS_SendCmd>

  return 0;
 8016880:	2300      	movs	r3, #0
}
 8016882:	4618      	mov	r0, r3
 8016884:	3708      	adds	r7, #8
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	20030000 	.word	0x20030000

08016890 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016894:	4b07      	ldr	r3, [pc, #28]	@ (80168b4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016896:	68db      	ldr	r3, [r3, #12]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	4619      	mov	r1, r3
 801689c:	2005      	movs	r0, #5
 801689e:	f000 f8d9 	bl	8016a54 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80168a2:	4b05      	ldr	r3, [pc, #20]	@ (80168b8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	4a03      	ldr	r2, [pc, #12]	@ (80168b4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80168a8:	68d2      	ldr	r2, [r2, #12]
 80168aa:	6812      	ldr	r2, [r2, #0]
 80168ac:	4610      	mov	r0, r2
 80168ae:	4798      	blx	r3

  return;
 80168b0:	bf00      	nop
}
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	20030000 	.word	0x20030000
 80168b8:	20001548 	.word	0x20001548

080168bc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b082      	sub	sp, #8
 80168c0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80168c2:	e00e      	b.n	80168e2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80168c4:	1d3b      	adds	r3, r7, #4
 80168c6:	4619      	mov	r1, r3
 80168c8:	480b      	ldr	r0, [pc, #44]	@ (80168f8 <HW_IPCC_SYS_EvtNot+0x3c>)
 80168ca:	f000 f9e0 	bl	8016c8e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	4619      	mov	r1, r3
 80168d2:	2006      	movs	r0, #6
 80168d4:	f000 f8be 	bl	8016a54 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80168d8:	4b08      	ldr	r3, [pc, #32]	@ (80168fc <HW_IPCC_SYS_EvtNot+0x40>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	687a      	ldr	r2, [r7, #4]
 80168de:	4610      	mov	r0, r2
 80168e0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80168e2:	4805      	ldr	r0, [pc, #20]	@ (80168f8 <HW_IPCC_SYS_EvtNot+0x3c>)
 80168e4:	f000 f944 	bl	8016b70 <LST_is_empty>
 80168e8:	4603      	mov	r3, r0
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d0ea      	beq.n	80168c4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80168ee:	bf00      	nop
}
 80168f0:	3708      	adds	r7, #8
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}
 80168f6:	bf00      	nop
 80168f8:	200300d0 	.word	0x200300d0
 80168fc:	2000154c 	.word	0x2000154c

08016900 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016908:	4817      	ldr	r0, [pc, #92]	@ (8016968 <TL_MM_Init+0x68>)
 801690a:	f000 f921 	bl	8016b50 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801690e:	4817      	ldr	r0, [pc, #92]	@ (801696c <TL_MM_Init+0x6c>)
 8016910:	f000 f91e 	bl	8016b50 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016914:	4b16      	ldr	r3, [pc, #88]	@ (8016970 <TL_MM_Init+0x70>)
 8016916:	691b      	ldr	r3, [r3, #16]
 8016918:	4a16      	ldr	r2, [pc, #88]	@ (8016974 <TL_MM_Init+0x74>)
 801691a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 801691c:	4b15      	ldr	r3, [pc, #84]	@ (8016974 <TL_MM_Init+0x74>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	687a      	ldr	r2, [r7, #4]
 8016922:	6892      	ldr	r2, [r2, #8]
 8016924:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016926:	4b13      	ldr	r3, [pc, #76]	@ (8016974 <TL_MM_Init+0x74>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	687a      	ldr	r2, [r7, #4]
 801692c:	68d2      	ldr	r2, [r2, #12]
 801692e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016930:	4b10      	ldr	r3, [pc, #64]	@ (8016974 <TL_MM_Init+0x74>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	4a0c      	ldr	r2, [pc, #48]	@ (8016968 <TL_MM_Init+0x68>)
 8016936:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016938:	4b0e      	ldr	r3, [pc, #56]	@ (8016974 <TL_MM_Init+0x74>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	687a      	ldr	r2, [r7, #4]
 801693e:	6812      	ldr	r2, [r2, #0]
 8016940:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8016942:	4b0c      	ldr	r3, [pc, #48]	@ (8016974 <TL_MM_Init+0x74>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	687a      	ldr	r2, [r7, #4]
 8016948:	6852      	ldr	r2, [r2, #4]
 801694a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 801694c:	4b09      	ldr	r3, [pc, #36]	@ (8016974 <TL_MM_Init+0x74>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	687a      	ldr	r2, [r7, #4]
 8016952:	6912      	ldr	r2, [r2, #16]
 8016954:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016956:	4b07      	ldr	r3, [pc, #28]	@ (8016974 <TL_MM_Init+0x74>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	687a      	ldr	r2, [r7, #4]
 801695c:	6952      	ldr	r2, [r2, #20]
 801695e:	619a      	str	r2, [r3, #24]

  return;
 8016960:	bf00      	nop
}
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}
 8016968:	200300b8 	.word	0x200300b8
 801696c:	20001538 	.word	0x20001538
 8016970:	20030000 	.word	0x20030000
 8016974:	20001550 	.word	0x20001550

08016978 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b082      	sub	sp, #8
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016980:	6879      	ldr	r1, [r7, #4]
 8016982:	4807      	ldr	r0, [pc, #28]	@ (80169a0 <TL_MM_EvtDone+0x28>)
 8016984:	f000 f93c 	bl	8016c00 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8016988:	6879      	ldr	r1, [r7, #4]
 801698a:	2000      	movs	r0, #0
 801698c:	f000 f862 	bl	8016a54 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016990:	4804      	ldr	r0, [pc, #16]	@ (80169a4 <TL_MM_EvtDone+0x2c>)
 8016992:	f001 fdf3 	bl	801857c <HW_IPCC_MM_SendFreeBuf>

  return;
 8016996:	bf00      	nop
}
 8016998:	3708      	adds	r7, #8
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	20001538 	.word	0x20001538
 80169a4:	080169a9 	.word	0x080169a9

080169a8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80169ae:	e00c      	b.n	80169ca <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80169b0:	1d3b      	adds	r3, r7, #4
 80169b2:	4619      	mov	r1, r3
 80169b4:	480a      	ldr	r0, [pc, #40]	@ (80169e0 <SendFreeBuf+0x38>)
 80169b6:	f000 f96a 	bl	8016c8e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80169ba:	4b0a      	ldr	r3, [pc, #40]	@ (80169e4 <SendFreeBuf+0x3c>)
 80169bc:	691b      	ldr	r3, [r3, #16]
 80169be:	691b      	ldr	r3, [r3, #16]
 80169c0:	687a      	ldr	r2, [r7, #4]
 80169c2:	4611      	mov	r1, r2
 80169c4:	4618      	mov	r0, r3
 80169c6:	f000 f91b 	bl	8016c00 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80169ca:	4805      	ldr	r0, [pc, #20]	@ (80169e0 <SendFreeBuf+0x38>)
 80169cc:	f000 f8d0 	bl	8016b70 <LST_is_empty>
 80169d0:	4603      	mov	r3, r0
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d0ec      	beq.n	80169b0 <SendFreeBuf+0x8>
  }

  return;
 80169d6:	bf00      	nop
}
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop
 80169e0:	20001538 	.word	0x20001538
 80169e4:	20030000 	.word	0x20030000

080169e8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80169ec:	4805      	ldr	r0, [pc, #20]	@ (8016a04 <TL_TRACES_Init+0x1c>)
 80169ee:	f000 f8af 	bl	8016b50 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80169f2:	4b05      	ldr	r3, [pc, #20]	@ (8016a08 <TL_TRACES_Init+0x20>)
 80169f4:	695b      	ldr	r3, [r3, #20]
 80169f6:	4a03      	ldr	r2, [pc, #12]	@ (8016a04 <TL_TRACES_Init+0x1c>)
 80169f8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80169fa:	f001 fdf5 	bl	80185e8 <HW_IPCC_TRACES_Init>

  return;
 80169fe:	bf00      	nop
}
 8016a00:	bd80      	pop	{r7, pc}
 8016a02:	bf00      	nop
 8016a04:	200300c0 	.word	0x200300c0
 8016a08:	20030000 	.word	0x20030000

08016a0c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016a12:	e008      	b.n	8016a26 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016a14:	1d3b      	adds	r3, r7, #4
 8016a16:	4619      	mov	r1, r3
 8016a18:	4808      	ldr	r0, [pc, #32]	@ (8016a3c <HW_IPCC_TRACES_EvtNot+0x30>)
 8016a1a:	f000 f938 	bl	8016c8e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f000 f80d 	bl	8016a40 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016a26:	4805      	ldr	r0, [pc, #20]	@ (8016a3c <HW_IPCC_TRACES_EvtNot+0x30>)
 8016a28:	f000 f8a2 	bl	8016b70 <LST_is_empty>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d0f0      	beq.n	8016a14 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016a32:	bf00      	nop
}
 8016a34:	3708      	adds	r7, #8
 8016a36:	46bd      	mov	sp, r7
 8016a38:	bd80      	pop	{r7, pc}
 8016a3a:	bf00      	nop
 8016a3c:	200300c0 	.word	0x200300c0

08016a40 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8016a48:	bf00      	nop
 8016a4a:	370c      	adds	r7, #12
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a52:	4770      	bx	lr

08016a54 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8016a54:	b480      	push	{r7}
 8016a56:	b087      	sub	sp, #28
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	6039      	str	r1, [r7, #0]
 8016a5e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8016a60:	79fb      	ldrb	r3, [r7, #7]
 8016a62:	2b06      	cmp	r3, #6
 8016a64:	d845      	bhi.n	8016af2 <OutputDbgTrace+0x9e>
 8016a66:	a201      	add	r2, pc, #4	@ (adr r2, 8016a6c <OutputDbgTrace+0x18>)
 8016a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a6c:	08016a89 	.word	0x08016a89
 8016a70:	08016aad 	.word	0x08016aad
 8016a74:	08016ab3 	.word	0x08016ab3
 8016a78:	08016ac7 	.word	0x08016ac7
 8016a7c:	08016ad3 	.word	0x08016ad3
 8016a80:	08016ad9 	.word	0x08016ad9
 8016a84:	08016ae7 	.word	0x08016ae7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	7a5b      	ldrb	r3, [r3, #9]
 8016a90:	2bff      	cmp	r3, #255	@ 0xff
 8016a92:	d005      	beq.n	8016aa0 <OutputDbgTrace+0x4c>
 8016a94:	2bff      	cmp	r3, #255	@ 0xff
 8016a96:	dc05      	bgt.n	8016aa4 <OutputDbgTrace+0x50>
 8016a98:	2b0e      	cmp	r3, #14
 8016a9a:	d005      	beq.n	8016aa8 <OutputDbgTrace+0x54>
 8016a9c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016a9e:	e001      	b.n	8016aa4 <OutputDbgTrace+0x50>
          break;
 8016aa0:	bf00      	nop
 8016aa2:	e027      	b.n	8016af4 <OutputDbgTrace+0xa0>
          break;
 8016aa4:	bf00      	nop
 8016aa6:	e025      	b.n	8016af4 <OutputDbgTrace+0xa0>
          break;
 8016aa8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016aaa:	e023      	b.n	8016af4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016ab0:	e020      	b.n	8016af4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	7a5b      	ldrb	r3, [r3, #9]
 8016aba:	2b0e      	cmp	r3, #14
 8016abc:	d001      	beq.n	8016ac2 <OutputDbgTrace+0x6e>
 8016abe:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016ac0:	e000      	b.n	8016ac4 <OutputDbgTrace+0x70>
          break;
 8016ac2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016ac4:	e016      	b.n	8016af4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016ac6:	683b      	ldr	r3, [r7, #0]
 8016ac8:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	7a5b      	ldrb	r3, [r3, #9]
 8016ace:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016ad0:	e010      	b.n	8016af4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016ad2:	683b      	ldr	r3, [r7, #0]
 8016ad4:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016ad6:	e00d      	b.n	8016af4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	785b      	ldrb	r3, [r3, #1]
 8016ae0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8016ae2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016ae4:	e006      	b.n	8016af4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016aea:	697b      	ldr	r3, [r7, #20]
 8016aec:	7a5b      	ldrb	r3, [r3, #9]
 8016aee:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016af0:	e000      	b.n	8016af4 <OutputDbgTrace+0xa0>

    default:
      break;
 8016af2:	bf00      	nop
  }

  return;
 8016af4:	bf00      	nop
}
 8016af6:	371c      	adds	r7, #28
 8016af8:	46bd      	mov	sp, r7
 8016afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afe:	4770      	bx	lr

08016b00 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016b00:	b480      	push	{r7}
 8016b02:	b085      	sub	sp, #20
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	4603      	mov	r3, r0
 8016b08:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8016b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8016b48 <OTP_Read+0x48>)
 8016b0c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016b0e:	e002      	b.n	8016b16 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	3b08      	subs	r3, #8
 8016b14:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	3307      	adds	r3, #7
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	79fa      	ldrb	r2, [r7, #7]
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	d003      	beq.n	8016b2a <OTP_Read+0x2a>
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	4a09      	ldr	r2, [pc, #36]	@ (8016b4c <OTP_Read+0x4c>)
 8016b26:	4293      	cmp	r3, r2
 8016b28:	d1f2      	bne.n	8016b10 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	3307      	adds	r3, #7
 8016b2e:	781b      	ldrb	r3, [r3, #0]
 8016b30:	79fa      	ldrb	r2, [r7, #7]
 8016b32:	429a      	cmp	r2, r3
 8016b34:	d001      	beq.n	8016b3a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016b36:	2300      	movs	r3, #0
 8016b38:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	3714      	adds	r7, #20
 8016b40:	46bd      	mov	sp, r7
 8016b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b46:	4770      	bx	lr
 8016b48:	1fff73f8 	.word	0x1fff73f8
 8016b4c:	1fff7000 	.word	0x1fff7000

08016b50 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016b50:	b480      	push	{r7}
 8016b52:	b083      	sub	sp, #12
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	687a      	ldr	r2, [r7, #4]
 8016b5c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	687a      	ldr	r2, [r7, #4]
 8016b62:	605a      	str	r2, [r3, #4]
}
 8016b64:	bf00      	nop
 8016b66:	370c      	adds	r7, #12
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6e:	4770      	bx	lr

08016b70 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016b70:	b480      	push	{r7}
 8016b72:	b087      	sub	sp, #28
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b78:	f3ef 8310 	mrs	r3, PRIMASK
 8016b7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b7e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016b82:	b672      	cpsid	i
}
 8016b84:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	687a      	ldr	r2, [r7, #4]
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d102      	bne.n	8016b96 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016b90:	2301      	movs	r3, #1
 8016b92:	75fb      	strb	r3, [r7, #23]
 8016b94:	e001      	b.n	8016b9a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016b96:	2300      	movs	r3, #0
 8016b98:	75fb      	strb	r3, [r7, #23]
 8016b9a:	693b      	ldr	r3, [r7, #16]
 8016b9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	f383 8810 	msr	PRIMASK, r3
}
 8016ba4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	371c      	adds	r7, #28
 8016bac:	46bd      	mov	sp, r7
 8016bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb2:	4770      	bx	lr

08016bb4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016bb4:	b480      	push	{r7}
 8016bb6:	b087      	sub	sp, #28
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
 8016bbc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8016bc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8016bc4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016bc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016bc8:	b672      	cpsid	i
}
 8016bca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681a      	ldr	r2, [r3, #0]
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	687a      	ldr	r2, [r7, #4]
 8016bd8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	683a      	ldr	r2, [r7, #0]
 8016bde:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	683a      	ldr	r2, [r7, #0]
 8016be6:	605a      	str	r2, [r3, #4]
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bec:	693b      	ldr	r3, [r7, #16]
 8016bee:	f383 8810 	msr	PRIMASK, r3
}
 8016bf2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016bf4:	bf00      	nop
 8016bf6:	371c      	adds	r7, #28
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfe:	4770      	bx	lr

08016c00 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016c00:	b480      	push	{r7}
 8016c02:	b087      	sub	sp, #28
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8016c0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c10:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016c12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c14:	b672      	cpsid	i
}
 8016c16:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	687a      	ldr	r2, [r7, #4]
 8016c1c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	685a      	ldr	r2, [r3, #4]
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	683a      	ldr	r2, [r7, #0]
 8016c2a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016c2c:	683b      	ldr	r3, [r7, #0]
 8016c2e:	685b      	ldr	r3, [r3, #4]
 8016c30:	683a      	ldr	r2, [r7, #0]
 8016c32:	601a      	str	r2, [r3, #0]
 8016c34:	697b      	ldr	r3, [r7, #20]
 8016c36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	f383 8810 	msr	PRIMASK, r3
}
 8016c3e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016c40:	bf00      	nop
 8016c42:	371c      	adds	r7, #28
 8016c44:	46bd      	mov	sp, r7
 8016c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4a:	4770      	bx	lr

08016c4c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016c4c:	b480      	push	{r7}
 8016c4e:	b087      	sub	sp, #28
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c54:	f3ef 8310 	mrs	r3, PRIMASK
 8016c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016c5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c5e:	b672      	cpsid	i
}
 8016c60:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	685b      	ldr	r3, [r3, #4]
 8016c66:	687a      	ldr	r2, [r7, #4]
 8016c68:	6812      	ldr	r2, [r2, #0]
 8016c6a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	687a      	ldr	r2, [r7, #4]
 8016c72:	6852      	ldr	r2, [r2, #4]
 8016c74:	605a      	str	r2, [r3, #4]
 8016c76:	697b      	ldr	r3, [r7, #20]
 8016c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c7a:	693b      	ldr	r3, [r7, #16]
 8016c7c:	f383 8810 	msr	PRIMASK, r3
}
 8016c80:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016c82:	bf00      	nop
 8016c84:	371c      	adds	r7, #28
 8016c86:	46bd      	mov	sp, r7
 8016c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8c:	4770      	bx	lr

08016c8e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8016c8e:	b580      	push	{r7, lr}
 8016c90:	b086      	sub	sp, #24
 8016c92:	af00      	add	r7, sp, #0
 8016c94:	6078      	str	r0, [r7, #4]
 8016c96:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c98:	f3ef 8310 	mrs	r3, PRIMASK
 8016c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c9e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ca2:	b672      	cpsid	i
}
 8016ca4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681a      	ldr	r2, [r3, #0]
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f7ff ffca 	bl	8016c4c <LST_remove_node>
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	f383 8810 	msr	PRIMASK, r3
}
 8016cc2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016cc4:	bf00      	nop
 8016cc6:	3718      	adds	r7, #24
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}

08016ccc <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b082      	sub	sp, #8
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f7ea fd2a 	bl	800172e <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8016cda:	bf00      	nop
 8016cdc:	3708      	adds	r7, #8
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd80      	pop	{r7, pc}

08016ce2 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8016ce2:	b580      	push	{r7, lr}
 8016ce4:	b082      	sub	sp, #8
 8016ce6:	af00      	add	r7, sp, #0
 8016ce8:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8016cea:	e002      	b.n	8016cf2 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8016cec:	2001      	movs	r0, #1
 8016cee:	f7ff ffed 	bl	8016ccc <SPIF_Delay>
  while (Handle->Lock)
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	7b1b      	ldrb	r3, [r3, #12]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d1f8      	bne.n	8016cec <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	2201      	movs	r2, #1
 8016cfe:	731a      	strb	r2, [r3, #12]
}
 8016d00:	bf00      	nop
 8016d02:	3708      	adds	r7, #8
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}

08016d08 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8016d08:	b480      	push	{r7}
 8016d0a:	b083      	sub	sp, #12
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	2200      	movs	r2, #0
 8016d14:	731a      	strb	r2, [r3, #12]
}
 8016d16:	bf00      	nop
 8016d18:	370c      	adds	r7, #12
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d20:	4770      	bx	lr

08016d22 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8016d22:	b580      	push	{r7, lr}
 8016d24:	b084      	sub	sp, #16
 8016d26:	af00      	add	r7, sp, #0
 8016d28:	6078      	str	r0, [r7, #4]
 8016d2a:	460b      	mov	r3, r1
 8016d2c:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	6858      	ldr	r0, [r3, #4]
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	691b      	ldr	r3, [r3, #16]
 8016d36:	b29b      	uxth	r3, r3
 8016d38:	78fa      	ldrb	r2, [r7, #3]
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	f7f2 f9ea 	bl	8009114 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8016d40:	2300      	movs	r3, #0
 8016d42:	60fb      	str	r3, [r7, #12]
 8016d44:	e002      	b.n	8016d4c <SPIF_CsPin+0x2a>
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	3301      	adds	r3, #1
 8016d4a:	60fb      	str	r3, [r7, #12]
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	2b09      	cmp	r3, #9
 8016d50:	ddf9      	ble.n	8016d46 <SPIF_CsPin+0x24>
}
 8016d52:	bf00      	nop
 8016d54:	bf00      	nop
 8016d56:	3710      	adds	r7, #16
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd80      	pop	{r7, pc}

08016d5c <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b086      	sub	sp, #24
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	60f8      	str	r0, [r7, #12]
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	607a      	str	r2, [r7, #4]
 8016d68:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8016d6e:	f7f0 f959 	bl	8007024 <HAL_GetTick>
 8016d72:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	6818      	ldr	r0, [r3, #0]
 8016d78:	683b      	ldr	r3, [r7, #0]
 8016d7a:	b29b      	uxth	r3, r3
 8016d7c:	687a      	ldr	r2, [r7, #4]
 8016d7e:	68b9      	ldr	r1, [r7, #8]
 8016d80:	f7f7 f890 	bl	800dea4 <HAL_SPI_TransmitReceive_DMA>
 8016d84:	4603      	mov	r3, r0
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d11a      	bne.n	8016dc0 <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8016d8a:	2001      	movs	r0, #1
 8016d8c:	f7ff ff9e 	bl	8016ccc <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8016d90:	f7f0 f948 	bl	8007024 <HAL_GetTick>
 8016d94:	4602      	mov	r2, r0
 8016d96:	693b      	ldr	r3, [r7, #16]
 8016d98:	1ad3      	subs	r3, r2, r3
 8016d9a:	6a3a      	ldr	r2, [r7, #32]
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d805      	bhi.n	8016dac <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7f7 fa03 	bl	800e1b0 <HAL_SPI_DMAStop>
        break;
 8016daa:	e009      	b.n	8016dc0 <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7f7 fb77 	bl	800e4a4 <HAL_SPI_GetState>
 8016db6:	4603      	mov	r3, r0
 8016db8:	2b01      	cmp	r3, #1
 8016dba:	d1e6      	bne.n	8016d8a <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 8016dbc:	2301      	movs	r3, #1
 8016dbe:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3718      	adds	r7, #24
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b086      	sub	sp, #24
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	60f8      	str	r0, [r7, #12]
 8016dd2:	60b9      	str	r1, [r7, #8]
 8016dd4:	607a      	str	r2, [r7, #4]
 8016dd6:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8016ddc:	f7f0 f922 	bl	8007024 <HAL_GetTick>
 8016de0:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	b292      	uxth	r2, r2
 8016dea:	68b9      	ldr	r1, [r7, #8]
 8016dec:	4618      	mov	r0, r3
 8016dee:	f7f6 fe4b 	bl	800da88 <HAL_SPI_Transmit_DMA>
 8016df2:	4603      	mov	r3, r0
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d11a      	bne.n	8016e2e <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8016df8:	2001      	movs	r0, #1
 8016dfa:	f7ff ff67 	bl	8016ccc <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8016dfe:	f7f0 f911 	bl	8007024 <HAL_GetTick>
 8016e02:	4602      	mov	r2, r0
 8016e04:	693b      	ldr	r3, [r7, #16]
 8016e06:	1ad3      	subs	r3, r2, r3
 8016e08:	683a      	ldr	r2, [r7, #0]
 8016e0a:	429a      	cmp	r2, r3
 8016e0c:	d805      	bhi.n	8016e1a <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	4618      	mov	r0, r3
 8016e14:	f7f7 f9cc 	bl	800e1b0 <HAL_SPI_DMAStop>
        break;
 8016e18:	e009      	b.n	8016e2e <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7f7 fb40 	bl	800e4a4 <HAL_SPI_GetState>
 8016e24:	4603      	mov	r3, r0
 8016e26:	2b01      	cmp	r3, #1
 8016e28:	d1e6      	bne.n	8016df8 <SPIF_Transmit+0x2e>
      {
        retVal = true;
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3718      	adds	r7, #24
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}

08016e38 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b086      	sub	sp, #24
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	60b9      	str	r1, [r7, #8]
 8016e42:	607a      	str	r2, [r7, #4]
 8016e44:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016e46:	2300      	movs	r3, #0
 8016e48:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8016e4a:	f7f0 f8eb 	bl	8007024 <HAL_GetTick>
 8016e4e:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	687a      	ldr	r2, [r7, #4]
 8016e56:	b292      	uxth	r2, r2
 8016e58:	68b9      	ldr	r1, [r7, #8]
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f7f6 ff02 	bl	800dc64 <HAL_SPI_Receive_DMA>
 8016e60:	4603      	mov	r3, r0
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d11a      	bne.n	8016e9c <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8016e66:	2001      	movs	r0, #1
 8016e68:	f7ff ff30 	bl	8016ccc <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8016e6c:	f7f0 f8da 	bl	8007024 <HAL_GetTick>
 8016e70:	4602      	mov	r2, r0
 8016e72:	693b      	ldr	r3, [r7, #16]
 8016e74:	1ad3      	subs	r3, r2, r3
 8016e76:	683a      	ldr	r2, [r7, #0]
 8016e78:	429a      	cmp	r2, r3
 8016e7a:	d805      	bhi.n	8016e88 <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7f7 f995 	bl	800e1b0 <HAL_SPI_DMAStop>
        break;
 8016e86:	e009      	b.n	8016e9c <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7f7 fb09 	bl	800e4a4 <HAL_SPI_GetState>
 8016e92:	4603      	mov	r3, r0
 8016e94:	2b01      	cmp	r3, #1
 8016e96:	d1e6      	bne.n	8016e66 <SPIF_Receive+0x2e>
      {
        retVal = true;
 8016e98:	2301      	movs	r3, #1
 8016e9a:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	3718      	adds	r7, #24
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd80      	pop	{r7, pc}

08016ea6 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8016ea6:	b580      	push	{r7, lr}
 8016ea8:	b084      	sub	sp, #16
 8016eaa:	af00      	add	r7, sp, #0
 8016eac:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8016eb2:	2306      	movs	r3, #6
 8016eb4:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8016eb6:	2100      	movs	r1, #0
 8016eb8:	6878      	ldr	r0, [r7, #4]
 8016eba:	f7ff ff32 	bl	8016d22 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8016ebe:	f107 010c 	add.w	r1, r7, #12
 8016ec2:	2364      	movs	r3, #100	@ 0x64
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	6878      	ldr	r0, [r7, #4]
 8016ec8:	f7ff ff7f 	bl	8016dca <SPIF_Transmit>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	f083 0301 	eor.w	r3, r3, #1
 8016ed2:	b2db      	uxtb	r3, r3
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d001      	beq.n	8016edc <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8016edc:	2101      	movs	r1, #1
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f7ff ff1f 	bl	8016d22 <SPIF_CsPin>
  return retVal;
 8016ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3710      	adds	r7, #16
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}

08016eee <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8016eee:	b580      	push	{r7, lr}
 8016ef0:	b084      	sub	sp, #16
 8016ef2:	af00      	add	r7, sp, #0
 8016ef4:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8016efa:	2304      	movs	r3, #4
 8016efc:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8016efe:	2100      	movs	r1, #0
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	f7ff ff0e 	bl	8016d22 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8016f06:	f107 010c 	add.w	r1, r7, #12
 8016f0a:	2364      	movs	r3, #100	@ 0x64
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f7ff ff5b 	bl	8016dca <SPIF_Transmit>
 8016f14:	4603      	mov	r3, r0
 8016f16:	f083 0301 	eor.w	r3, r3, #1
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d001      	beq.n	8016f24 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8016f20:	2300      	movs	r3, #0
 8016f22:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8016f24:	2101      	movs	r1, #1
 8016f26:	6878      	ldr	r0, [r7, #4]
 8016f28:	f7ff fefb 	bl	8016d22 <SPIF_CsPin>
  return retVal;
 8016f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3710      	adds	r7, #16
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}

08016f36 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8016f36:	b580      	push	{r7, lr}
 8016f38:	b086      	sub	sp, #24
 8016f3a:	af02      	add	r7, sp, #8
 8016f3c:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8016f42:	f24a 5305 	movw	r3, #42245	@ 0xa505
 8016f46:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8016f48:	2100      	movs	r1, #0
 8016f4a:	6878      	ldr	r0, [r7, #4]
 8016f4c:	f7ff fee9 	bl	8016d22 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8016f50:	f107 0208 	add.w	r2, r7, #8
 8016f54:	f107 010c 	add.w	r1, r7, #12
 8016f58:	2364      	movs	r3, #100	@ 0x64
 8016f5a:	9300      	str	r3, [sp, #0]
 8016f5c:	2302      	movs	r3, #2
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f7ff fefc 	bl	8016d5c <SPIF_TransmitReceive>
 8016f64:	4603      	mov	r3, r0
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d001      	beq.n	8016f6e <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8016f6a:	7a7b      	ldrb	r3, [r7, #9]
 8016f6c:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8016f6e:	2101      	movs	r1, #1
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f7ff fed6 	bl	8016d22 <SPIF_CsPin>
  return retVal;
 8016f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3710      	adds	r7, #16
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}

08016f80 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b084      	sub	sp, #16
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
 8016f88:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8016f8e:	f7f0 f849 	bl	8007024 <HAL_GetTick>
 8016f92:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8016f94:	2001      	movs	r0, #1
 8016f96:	f7ff fe99 	bl	8016ccc <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8016f9a:	f7f0 f843 	bl	8007024 <HAL_GetTick>
 8016f9e:	4602      	mov	r2, r0
 8016fa0:	68bb      	ldr	r3, [r7, #8]
 8016fa2:	1ad3      	subs	r3, r2, r3
 8016fa4:	683a      	ldr	r2, [r7, #0]
 8016fa6:	429a      	cmp	r2, r3
 8016fa8:	d90a      	bls.n	8016fc0 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8016faa:	6878      	ldr	r0, [r7, #4]
 8016fac:	f7ff ffc3 	bl	8016f36 <SPIF_ReadReg1>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	f003 0301 	and.w	r3, r3, #1
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d1ec      	bne.n	8016f94 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8016fba:	2301      	movs	r3, #1
 8016fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8016fbe:	e000      	b.n	8016fc2 <SPIF_WaitForWriting+0x42>
      break;
 8016fc0:	bf00      	nop
    }
  }
  return retVal;
 8016fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	3710      	adds	r7, #16
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	bd80      	pop	{r7, pc}

08016fcc <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b088      	sub	sp, #32
 8016fd0:	af02      	add	r7, sp, #8
 8016fd2:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8016fd4:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 8016fd8:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8016fda:	2300      	movs	r3, #0
 8016fdc:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8016fde:	2100      	movs	r1, #0
 8016fe0:	6878      	ldr	r0, [r7, #4]
 8016fe2:	f7ff fe9e 	bl	8016d22 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8016fe6:	f107 020c 	add.w	r2, r7, #12
 8016fea:	f107 0110 	add.w	r1, r7, #16
 8016fee:	2364      	movs	r3, #100	@ 0x64
 8016ff0:	9300      	str	r3, [sp, #0]
 8016ff2:	2304      	movs	r3, #4
 8016ff4:	6878      	ldr	r0, [r7, #4]
 8016ff6:	f7ff feb1 	bl	8016d5c <SPIF_TransmitReceive>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	f083 0301 	eor.w	r3, r3, #1
 8017000:	b2db      	uxtb	r3, r3
 8017002:	2b00      	cmp	r3, #0
 8017004:	d004      	beq.n	8017010 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8017006:	2101      	movs	r1, #1
 8017008:	6878      	ldr	r0, [r7, #4]
 801700a:	f7ff fe8a 	bl	8016d22 <SPIF_CsPin>
      break;
 801700e:	e16f      	b.n	80172f0 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8017010:	2101      	movs	r1, #1
 8017012:	6878      	ldr	r0, [r7, #4]
 8017014:	f7ff fe85 	bl	8016d22 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8017018:	7b7a      	ldrb	r2, [r7, #13]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 801701e:	7bba      	ldrb	r2, [r7, #14]
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8017024:	7bfa      	ldrb	r2, [r7, #15]
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	7a1b      	ldrb	r3, [r3, #8]
 801702e:	2bef      	cmp	r3, #239	@ 0xef
 8017030:	f000 80f0 	beq.w	8017214 <SPIF_FindChip+0x248>
 8017034:	2bef      	cmp	r3, #239	@ 0xef
 8017036:	f300 80e9 	bgt.w	801720c <SPIF_FindChip+0x240>
 801703a:	2bc8      	cmp	r3, #200	@ 0xc8
 801703c:	f300 80e6 	bgt.w	801720c <SPIF_FindChip+0x240>
 8017040:	2b85      	cmp	r3, #133	@ 0x85
 8017042:	da0c      	bge.n	801705e <SPIF_FindChip+0x92>
 8017044:	2b62      	cmp	r3, #98	@ 0x62
 8017046:	f000 80e7 	beq.w	8017218 <SPIF_FindChip+0x24c>
 801704a:	2b62      	cmp	r3, #98	@ 0x62
 801704c:	f300 80de 	bgt.w	801720c <SPIF_FindChip+0x240>
 8017050:	2b20      	cmp	r3, #32
 8017052:	f300 80d9 	bgt.w	8017208 <SPIF_FindChip+0x23c>
 8017056:	2b00      	cmp	r3, #0
 8017058:	f300 8090 	bgt.w	801717c <SPIF_FindChip+0x1b0>
 801705c:	e0d6      	b.n	801720c <SPIF_FindChip+0x240>
 801705e:	3b85      	subs	r3, #133	@ 0x85
 8017060:	2b43      	cmp	r3, #67	@ 0x43
 8017062:	f200 80d3 	bhi.w	801720c <SPIF_FindChip+0x240>
 8017066:	a201      	add	r2, pc, #4	@ (adr r2, 801706c <SPIF_FindChip+0xa0>)
 8017068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801706c:	0801721d 	.word	0x0801721d
 8017070:	0801720d 	.word	0x0801720d
 8017074:	0801720d 	.word	0x0801720d
 8017078:	0801720d 	.word	0x0801720d
 801707c:	0801721d 	.word	0x0801721d
 8017080:	0801720d 	.word	0x0801720d
 8017084:	0801720d 	.word	0x0801720d
 8017088:	0801721d 	.word	0x0801721d
 801708c:	0801720d 	.word	0x0801720d
 8017090:	0801720d 	.word	0x0801720d
 8017094:	0801720d 	.word	0x0801720d
 8017098:	0801720d 	.word	0x0801720d
 801709c:	0801720d 	.word	0x0801720d
 80170a0:	0801720d 	.word	0x0801720d
 80170a4:	0801720d 	.word	0x0801720d
 80170a8:	0801720d 	.word	0x0801720d
 80170ac:	0801720d 	.word	0x0801720d
 80170b0:	0801720d 	.word	0x0801720d
 80170b4:	0801720d 	.word	0x0801720d
 80170b8:	0801720d 	.word	0x0801720d
 80170bc:	0801720d 	.word	0x0801720d
 80170c0:	0801720d 	.word	0x0801720d
 80170c4:	0801720d 	.word	0x0801720d
 80170c8:	0801720d 	.word	0x0801720d
 80170cc:	0801721d 	.word	0x0801721d
 80170d0:	0801720d 	.word	0x0801720d
 80170d4:	0801720d 	.word	0x0801720d
 80170d8:	0801720d 	.word	0x0801720d
 80170dc:	0801721d 	.word	0x0801721d
 80170e0:	0801720d 	.word	0x0801720d
 80170e4:	0801720d 	.word	0x0801720d
 80170e8:	0801720d 	.word	0x0801720d
 80170ec:	0801720d 	.word	0x0801720d
 80170f0:	0801720d 	.word	0x0801720d
 80170f4:	0801720d 	.word	0x0801720d
 80170f8:	0801720d 	.word	0x0801720d
 80170fc:	0801720d 	.word	0x0801720d
 8017100:	0801720d 	.word	0x0801720d
 8017104:	0801720d 	.word	0x0801720d
 8017108:	0801720d 	.word	0x0801720d
 801710c:	0801721d 	.word	0x0801721d
 8017110:	0801720d 	.word	0x0801720d
 8017114:	0801720d 	.word	0x0801720d
 8017118:	0801720d 	.word	0x0801720d
 801711c:	0801720d 	.word	0x0801720d
 8017120:	0801720d 	.word	0x0801720d
 8017124:	0801720d 	.word	0x0801720d
 8017128:	0801720d 	.word	0x0801720d
 801712c:	0801720d 	.word	0x0801720d
 8017130:	0801720d 	.word	0x0801720d
 8017134:	0801720d 	.word	0x0801720d
 8017138:	0801720d 	.word	0x0801720d
 801713c:	0801720d 	.word	0x0801720d
 8017140:	0801720d 	.word	0x0801720d
 8017144:	0801720d 	.word	0x0801720d
 8017148:	0801720d 	.word	0x0801720d
 801714c:	0801720d 	.word	0x0801720d
 8017150:	0801720d 	.word	0x0801720d
 8017154:	0801721d 	.word	0x0801721d
 8017158:	0801720d 	.word	0x0801720d
 801715c:	0801720d 	.word	0x0801720d
 8017160:	0801721d 	.word	0x0801721d
 8017164:	0801720d 	.word	0x0801720d
 8017168:	0801720d 	.word	0x0801720d
 801716c:	0801720d 	.word	0x0801720d
 8017170:	0801720d 	.word	0x0801720d
 8017174:	0801720d 	.word	0x0801720d
 8017178:	0801721d 	.word	0x0801721d
 801717c:	3b01      	subs	r3, #1
 801717e:	2b1f      	cmp	r3, #31
 8017180:	d844      	bhi.n	801720c <SPIF_FindChip+0x240>
 8017182:	a201      	add	r2, pc, #4	@ (adr r2, 8017188 <SPIF_FindChip+0x1bc>)
 8017184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017188:	08017221 	.word	0x08017221
 801718c:	0801720d 	.word	0x0801720d
 8017190:	0801720d 	.word	0x0801720d
 8017194:	08017221 	.word	0x08017221
 8017198:	0801720d 	.word	0x0801720d
 801719c:	0801720d 	.word	0x0801720d
 80171a0:	0801720d 	.word	0x0801720d
 80171a4:	0801720d 	.word	0x0801720d
 80171a8:	0801720d 	.word	0x0801720d
 80171ac:	0801720d 	.word	0x0801720d
 80171b0:	0801720d 	.word	0x0801720d
 80171b4:	0801720d 	.word	0x0801720d
 80171b8:	0801720d 	.word	0x0801720d
 80171bc:	0801720d 	.word	0x0801720d
 80171c0:	0801720d 	.word	0x0801720d
 80171c4:	0801720d 	.word	0x0801720d
 80171c8:	0801720d 	.word	0x0801720d
 80171cc:	0801720d 	.word	0x0801720d
 80171d0:	0801720d 	.word	0x0801720d
 80171d4:	0801720d 	.word	0x0801720d
 80171d8:	0801720d 	.word	0x0801720d
 80171dc:	0801720d 	.word	0x0801720d
 80171e0:	0801720d 	.word	0x0801720d
 80171e4:	0801720d 	.word	0x0801720d
 80171e8:	0801720d 	.word	0x0801720d
 80171ec:	0801720d 	.word	0x0801720d
 80171f0:	0801720d 	.word	0x0801720d
 80171f4:	08017221 	.word	0x08017221
 80171f8:	0801720d 	.word	0x0801720d
 80171fc:	0801720d 	.word	0x0801720d
 8017200:	0801720d 	.word	0x0801720d
 8017204:	08017221 	.word	0x08017221
 8017208:	2b37      	cmp	r3, #55	@ 0x37
 801720a:	d00b      	beq.n	8017224 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2200      	movs	r2, #0
 8017210:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8017212:	e008      	b.n	8017226 <SPIF_FindChip+0x25a>
      break;
 8017214:	bf00      	nop
 8017216:	e006      	b.n	8017226 <SPIF_FindChip+0x25a>
      break;
 8017218:	bf00      	nop
 801721a:	e004      	b.n	8017226 <SPIF_FindChip+0x25a>
      break;
 801721c:	bf00      	nop
 801721e:	e002      	b.n	8017226 <SPIF_FindChip+0x25a>
      break;
 8017220:	bf00      	nop
 8017222:	e000      	b.n	8017226 <SPIF_FindChip+0x25a>
      break;
 8017224:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	7a5b      	ldrb	r3, [r3, #9]
 801722a:	3b11      	subs	r3, #17
 801722c:	2b0f      	cmp	r3, #15
 801722e:	d84e      	bhi.n	80172ce <SPIF_FindChip+0x302>
 8017230:	a201      	add	r2, pc, #4	@ (adr r2, 8017238 <SPIF_FindChip+0x26c>)
 8017232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017236:	bf00      	nop
 8017238:	08017279 	.word	0x08017279
 801723c:	08017281 	.word	0x08017281
 8017240:	08017289 	.word	0x08017289
 8017244:	08017291 	.word	0x08017291
 8017248:	08017299 	.word	0x08017299
 801724c:	080172a1 	.word	0x080172a1
 8017250:	080172a9 	.word	0x080172a9
 8017254:	080172b1 	.word	0x080172b1
 8017258:	080172bb 	.word	0x080172bb
 801725c:	080172cf 	.word	0x080172cf
 8017260:	080172cf 	.word	0x080172cf
 8017264:	080172cf 	.word	0x080172cf
 8017268:	080172cf 	.word	0x080172cf
 801726c:	080172cf 	.word	0x080172cf
 8017270:	080172cf 	.word	0x080172cf
 8017274:	080172c5 	.word	0x080172c5
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2202      	movs	r2, #2
 801727c:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 801727e:	e02a      	b.n	80172d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2204      	movs	r2, #4
 8017284:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 8017286:	e026      	b.n	80172d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2208      	movs	r2, #8
 801728c:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 801728e:	e022      	b.n	80172d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2210      	movs	r2, #16
 8017294:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 8017296:	e01e      	b.n	80172d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2220      	movs	r2, #32
 801729c:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 801729e:	e01a      	b.n	80172d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	2240      	movs	r2, #64	@ 0x40
 80172a4:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80172a6:	e016      	b.n	80172d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2280      	movs	r2, #128	@ 0x80
 80172ac:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80172ae:	e012      	b.n	80172d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80172b6:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80172b8:	e00d      	b.n	80172d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80172c0:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 80172c2:	e008      	b.n	80172d6 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80172ca:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80172cc:	e003      	b.n	80172d6 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2200      	movs	r2, #0
 80172d2:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80172d4:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	69db      	ldr	r3, [r3, #28]
 80172da:	011a      	lsls	r2, r3, #4
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	699b      	ldr	r3, [r3, #24]
 80172e4:	031b      	lsls	r3, r3, #12
 80172e6:	0a1a      	lsrs	r2, r3, #8
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 80172ec:	2301      	movs	r3, #1
 80172ee:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80172f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	3718      	adds	r7, #24
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}
 80172fa:	bf00      	nop

080172fc <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b08a      	sub	sp, #40	@ 0x28
 8017300:	af00      	add	r7, sp, #0
 8017302:	60f8      	str	r0, [r7, #12]
 8017304:	60b9      	str	r1, [r7, #8]
 8017306:	607a      	str	r2, [r7, #4]
 8017308:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801730a:	2300      	movs	r3, #0
 801730c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8017310:	2300      	movs	r3, #0
 8017312:	623b      	str	r3, [r7, #32]
 8017314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017316:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801731a:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	695b      	ldr	r3, [r3, #20]
 8017320:	68ba      	ldr	r2, [r7, #8]
 8017322:	429a      	cmp	r2, r3
 8017324:	f080 8084 	bcs.w	8017430 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8017328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801732a:	2bff      	cmp	r3, #255	@ 0xff
 801732c:	f200 8082 	bhi.w	8017434 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8017330:	683a      	ldr	r2, [r7, #0]
 8017332:	69fb      	ldr	r3, [r7, #28]
 8017334:	429a      	cmp	r2, r3
 8017336:	d901      	bls.n	801733c <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8017338:	69fb      	ldr	r3, [r7, #28]
 801733a:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 801733c:	68bb      	ldr	r3, [r7, #8]
 801733e:	021b      	lsls	r3, r3, #8
 8017340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017342:	4413      	add	r3, r2
 8017344:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8017346:	68f8      	ldr	r0, [r7, #12]
 8017348:	f7ff fdad 	bl	8016ea6 <SPIF_WriteEnable>
 801734c:	4603      	mov	r3, r0
 801734e:	f083 0301 	eor.w	r3, r3, #1
 8017352:	b2db      	uxtb	r3, r3
 8017354:	2b00      	cmp	r3, #0
 8017356:	d16f      	bne.n	8017438 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8017358:	2100      	movs	r1, #0
 801735a:	68f8      	ldr	r0, [r7, #12]
 801735c:	f7ff fce1 	bl	8016d22 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	69db      	ldr	r3, [r3, #28]
 8017364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017368:	d322      	bcc.n	80173b0 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 801736a:	2312      	movs	r3, #18
 801736c:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 801736e:	6a3b      	ldr	r3, [r7, #32]
 8017370:	0e1b      	lsrs	r3, r3, #24
 8017372:	b2db      	uxtb	r3, r3
 8017374:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 8017376:	6a3b      	ldr	r3, [r7, #32]
 8017378:	0c1b      	lsrs	r3, r3, #16
 801737a:	b2db      	uxtb	r3, r3
 801737c:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 801737e:	6a3b      	ldr	r3, [r7, #32]
 8017380:	0a1b      	lsrs	r3, r3, #8
 8017382:	b2db      	uxtb	r3, r3
 8017384:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 8017386:	6a3b      	ldr	r3, [r7, #32]
 8017388:	b2db      	uxtb	r3, r3
 801738a:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 801738c:	f107 0114 	add.w	r1, r7, #20
 8017390:	2364      	movs	r3, #100	@ 0x64
 8017392:	2205      	movs	r2, #5
 8017394:	68f8      	ldr	r0, [r7, #12]
 8017396:	f7ff fd18 	bl	8016dca <SPIF_Transmit>
 801739a:	4603      	mov	r3, r0
 801739c:	f083 0301 	eor.w	r3, r3, #1
 80173a0:	b2db      	uxtb	r3, r3
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d023      	beq.n	80173ee <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80173a6:	2101      	movs	r1, #1
 80173a8:	68f8      	ldr	r0, [r7, #12]
 80173aa:	f7ff fcba 	bl	8016d22 <SPIF_CsPin>
        break;
 80173ae:	e044      	b.n	801743a <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80173b0:	2302      	movs	r3, #2
 80173b2:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 80173b4:	6a3b      	ldr	r3, [r7, #32]
 80173b6:	0c1b      	lsrs	r3, r3, #16
 80173b8:	b2db      	uxtb	r3, r3
 80173ba:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 80173bc:	6a3b      	ldr	r3, [r7, #32]
 80173be:	0a1b      	lsrs	r3, r3, #8
 80173c0:	b2db      	uxtb	r3, r3
 80173c2:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 80173c4:	6a3b      	ldr	r3, [r7, #32]
 80173c6:	b2db      	uxtb	r3, r3
 80173c8:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80173ca:	f107 0114 	add.w	r1, r7, #20
 80173ce:	2364      	movs	r3, #100	@ 0x64
 80173d0:	2204      	movs	r2, #4
 80173d2:	68f8      	ldr	r0, [r7, #12]
 80173d4:	f7ff fcf9 	bl	8016dca <SPIF_Transmit>
 80173d8:	4603      	mov	r3, r0
 80173da:	f083 0301 	eor.w	r3, r3, #1
 80173de:	b2db      	uxtb	r3, r3
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d004      	beq.n	80173ee <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80173e4:	2101      	movs	r1, #1
 80173e6:	68f8      	ldr	r0, [r7, #12]
 80173e8:	f7ff fc9b 	bl	8016d22 <SPIF_CsPin>
        break;
 80173ec:	e025      	b.n	801743a <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 80173ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80173f2:	683a      	ldr	r2, [r7, #0]
 80173f4:	6879      	ldr	r1, [r7, #4]
 80173f6:	68f8      	ldr	r0, [r7, #12]
 80173f8:	f7ff fce7 	bl	8016dca <SPIF_Transmit>
 80173fc:	4603      	mov	r3, r0
 80173fe:	f083 0301 	eor.w	r3, r3, #1
 8017402:	b2db      	uxtb	r3, r3
 8017404:	2b00      	cmp	r3, #0
 8017406:	d004      	beq.n	8017412 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8017408:	2101      	movs	r1, #1
 801740a:	68f8      	ldr	r0, [r7, #12]
 801740c:	f7ff fc89 	bl	8016d22 <SPIF_CsPin>
      break;
 8017410:	e013      	b.n	801743a <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8017412:	2101      	movs	r1, #1
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	f7ff fc84 	bl	8016d22 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 801741a:	2164      	movs	r1, #100	@ 0x64
 801741c:	68f8      	ldr	r0, [r7, #12]
 801741e:	f7ff fdaf 	bl	8016f80 <SPIF_WaitForWriting>
 8017422:	4603      	mov	r3, r0
 8017424:	2b00      	cmp	r3, #0
 8017426:	d008      	beq.n	801743a <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8017428:	2301      	movs	r3, #1
 801742a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801742e:	e004      	b.n	801743a <SPIF_WriteFn+0x13e>
      break;
 8017430:	bf00      	nop
 8017432:	e002      	b.n	801743a <SPIF_WriteFn+0x13e>
      break;
 8017434:	bf00      	nop
 8017436:	e000      	b.n	801743a <SPIF_WriteFn+0x13e>
      break;
 8017438:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801743a:	68f8      	ldr	r0, [r7, #12]
 801743c:	f7ff fd57 	bl	8016eee <SPIF_WriteDisable>
  return retVal;
 8017440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8017444:	4618      	mov	r0, r3
 8017446:	3728      	adds	r7, #40	@ 0x28
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}

0801744c <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b086      	sub	sp, #24
 8017450:	af00      	add	r7, sp, #0
 8017452:	60f8      	str	r0, [r7, #12]
 8017454:	60b9      	str	r1, [r7, #8]
 8017456:	607a      	str	r2, [r7, #4]
 8017458:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801745a:	2300      	movs	r3, #0
 801745c:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 801745e:	2100      	movs	r1, #0
 8017460:	68f8      	ldr	r0, [r7, #12]
 8017462:	f7ff fc5e 	bl	8016d22 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	69db      	ldr	r3, [r3, #28]
 801746a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801746e:	d322      	bcc.n	80174b6 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8017470:	2313      	movs	r3, #19
 8017472:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	0e1b      	lsrs	r3, r3, #24
 8017478:	b2db      	uxtb	r3, r3
 801747a:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 801747c:	68bb      	ldr	r3, [r7, #8]
 801747e:	0c1b      	lsrs	r3, r3, #16
 8017480:	b2db      	uxtb	r3, r3
 8017482:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	0a1b      	lsrs	r3, r3, #8
 8017488:	b2db      	uxtb	r3, r3
 801748a:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	b2db      	uxtb	r3, r3
 8017490:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017492:	f107 0110 	add.w	r1, r7, #16
 8017496:	2364      	movs	r3, #100	@ 0x64
 8017498:	2205      	movs	r2, #5
 801749a:	68f8      	ldr	r0, [r7, #12]
 801749c:	f7ff fc95 	bl	8016dca <SPIF_Transmit>
 80174a0:	4603      	mov	r3, r0
 80174a2:	f083 0301 	eor.w	r3, r3, #1
 80174a6:	b2db      	uxtb	r3, r3
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d023      	beq.n	80174f4 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80174ac:	2101      	movs	r1, #1
 80174ae:	68f8      	ldr	r0, [r7, #12]
 80174b0:	f7ff fc37 	bl	8016d22 <SPIF_CsPin>
        break;
 80174b4:	e036      	b.n	8017524 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 80174b6:	2303      	movs	r3, #3
 80174b8:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 80174ba:	68bb      	ldr	r3, [r7, #8]
 80174bc:	0c1b      	lsrs	r3, r3, #16
 80174be:	b2db      	uxtb	r3, r3
 80174c0:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	0a1b      	lsrs	r3, r3, #8
 80174c6:	b2db      	uxtb	r3, r3
 80174c8:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	b2db      	uxtb	r3, r3
 80174ce:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80174d0:	f107 0110 	add.w	r1, r7, #16
 80174d4:	2364      	movs	r3, #100	@ 0x64
 80174d6:	2204      	movs	r2, #4
 80174d8:	68f8      	ldr	r0, [r7, #12]
 80174da:	f7ff fc76 	bl	8016dca <SPIF_Transmit>
 80174de:	4603      	mov	r3, r0
 80174e0:	f083 0301 	eor.w	r3, r3, #1
 80174e4:	b2db      	uxtb	r3, r3
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d004      	beq.n	80174f4 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80174ea:	2101      	movs	r1, #1
 80174ec:	68f8      	ldr	r0, [r7, #12]
 80174ee:	f7ff fc18 	bl	8016d22 <SPIF_CsPin>
        break;
 80174f2:	e017      	b.n	8017524 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 80174f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80174f8:	683a      	ldr	r2, [r7, #0]
 80174fa:	6879      	ldr	r1, [r7, #4]
 80174fc:	68f8      	ldr	r0, [r7, #12]
 80174fe:	f7ff fc9b 	bl	8016e38 <SPIF_Receive>
 8017502:	4603      	mov	r3, r0
 8017504:	f083 0301 	eor.w	r3, r3, #1
 8017508:	b2db      	uxtb	r3, r3
 801750a:	2b00      	cmp	r3, #0
 801750c:	d004      	beq.n	8017518 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 801750e:	2101      	movs	r1, #1
 8017510:	68f8      	ldr	r0, [r7, #12]
 8017512:	f7ff fc06 	bl	8016d22 <SPIF_CsPin>
      break;
 8017516:	e005      	b.n	8017524 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8017518:	2101      	movs	r1, #1
 801751a:	68f8      	ldr	r0, [r7, #12]
 801751c:	f7ff fc01 	bl	8016d22 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8017520:	2301      	movs	r3, #1
 8017522:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017524:	7dfb      	ldrb	r3, [r7, #23]
}
 8017526:	4618      	mov	r0, r3
 8017528:	3718      	adds	r7, #24
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}

0801752e <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 801752e:	b580      	push	{r7, lr}
 8017530:	b086      	sub	sp, #24
 8017532:	af00      	add	r7, sp, #0
 8017534:	60f8      	str	r0, [r7, #12]
 8017536:	60b9      	str	r1, [r7, #8]
 8017538:	607a      	str	r2, [r7, #4]
 801753a:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 801753c:	2300      	movs	r3, #0
 801753e:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d03a      	beq.n	80175bc <SPIF_Init+0x8e>
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d037      	beq.n	80175bc <SPIF_Init+0x8e>
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d034      	beq.n	80175bc <SPIF_Init+0x8e>
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	7a9b      	ldrb	r3, [r3, #10]
 8017556:	2b01      	cmp	r3, #1
 8017558:	d030      	beq.n	80175bc <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 801755a:	2220      	movs	r2, #32
 801755c:	2100      	movs	r1, #0
 801755e:	68f8      	ldr	r0, [r7, #12]
 8017560:	f003 ff7f 	bl	801b462 <memset>
    Handle->HSpi = HSpi;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	68ba      	ldr	r2, [r7, #8]
 8017568:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	687a      	ldr	r2, [r7, #4]
 801756e:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8017570:	887a      	ldrh	r2, [r7, #2]
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8017576:	2101      	movs	r1, #1
 8017578:	68f8      	ldr	r0, [r7, #12]
 801757a:	f7ff fbd2 	bl	8016d22 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 801757e:	e002      	b.n	8017586 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8017580:	2001      	movs	r0, #1
 8017582:	f7ff fba3 	bl	8016ccc <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8017586:	f7ef fd4d 	bl	8007024 <HAL_GetTick>
 801758a:	4603      	mov	r3, r0
 801758c:	2b13      	cmp	r3, #19
 801758e:	d9f7      	bls.n	8017580 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8017590:	68f8      	ldr	r0, [r7, #12]
 8017592:	f7ff fcac 	bl	8016eee <SPIF_WriteDisable>
 8017596:	4603      	mov	r3, r0
 8017598:	f083 0301 	eor.w	r3, r3, #1
 801759c:	b2db      	uxtb	r3, r3
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d10b      	bne.n	80175ba <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 80175a2:	68f8      	ldr	r0, [r7, #12]
 80175a4:	f7ff fd12 	bl	8016fcc <SPIF_FindChip>
 80175a8:	4603      	mov	r3, r0
 80175aa:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 80175ac:	7dfb      	ldrb	r3, [r7, #23]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d004      	beq.n	80175bc <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	2201      	movs	r2, #1
 80175b6:	729a      	strb	r2, [r3, #10]
 80175b8:	e000      	b.n	80175bc <SPIF_Init+0x8e>
      break;
 80175ba:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 80175bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3718      	adds	r7, #24
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}

080175c6 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 80175c6:	b580      	push	{r7, lr}
 80175c8:	b086      	sub	sp, #24
 80175ca:	af00      	add	r7, sp, #0
 80175cc:	6078      	str	r0, [r7, #4]
 80175ce:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 80175d0:	6878      	ldr	r0, [r7, #4]
 80175d2:	f7ff fb86 	bl	8016ce2 <SPIF_Lock>
  bool retVal = false;
 80175d6:	2300      	movs	r3, #0
 80175d8:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	031b      	lsls	r3, r3, #12
 80175de:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	699b      	ldr	r3, [r3, #24]
 80175e4:	683a      	ldr	r2, [r7, #0]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	d262      	bcs.n	80176b0 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 80175ea:	6878      	ldr	r0, [r7, #4]
 80175ec:	f7ff fc5b 	bl	8016ea6 <SPIF_WriteEnable>
 80175f0:	4603      	mov	r3, r0
 80175f2:	f083 0301 	eor.w	r3, r3, #1
 80175f6:	b2db      	uxtb	r3, r3
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d15b      	bne.n	80176b4 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80175fc:	2100      	movs	r1, #0
 80175fe:	6878      	ldr	r0, [r7, #4]
 8017600:	f7ff fb8f 	bl	8016d22 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	69db      	ldr	r3, [r3, #28]
 8017608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801760c:	d322      	bcc.n	8017654 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 801760e:	2321      	movs	r3, #33	@ 0x21
 8017610:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8017612:	693b      	ldr	r3, [r7, #16]
 8017614:	0e1b      	lsrs	r3, r3, #24
 8017616:	b2db      	uxtb	r3, r3
 8017618:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 801761a:	693b      	ldr	r3, [r7, #16]
 801761c:	0c1b      	lsrs	r3, r3, #16
 801761e:	b2db      	uxtb	r3, r3
 8017620:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8017622:	693b      	ldr	r3, [r7, #16]
 8017624:	0a1b      	lsrs	r3, r3, #8
 8017626:	b2db      	uxtb	r3, r3
 8017628:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 801762a:	693b      	ldr	r3, [r7, #16]
 801762c:	b2db      	uxtb	r3, r3
 801762e:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017630:	f107 0108 	add.w	r1, r7, #8
 8017634:	2364      	movs	r3, #100	@ 0x64
 8017636:	2205      	movs	r2, #5
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f7ff fbc6 	bl	8016dca <SPIF_Transmit>
 801763e:	4603      	mov	r3, r0
 8017640:	f083 0301 	eor.w	r3, r3, #1
 8017644:	b2db      	uxtb	r3, r3
 8017646:	2b00      	cmp	r3, #0
 8017648:	d023      	beq.n	8017692 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 801764a:	2101      	movs	r1, #1
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f7ff fb68 	bl	8016d22 <SPIF_CsPin>
        break;
 8017652:	e030      	b.n	80176b6 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8017654:	2320      	movs	r3, #32
 8017656:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017658:	693b      	ldr	r3, [r7, #16]
 801765a:	0c1b      	lsrs	r3, r3, #16
 801765c:	b2db      	uxtb	r3, r3
 801765e:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	0a1b      	lsrs	r3, r3, #8
 8017664:	b2db      	uxtb	r3, r3
 8017666:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8017668:	693b      	ldr	r3, [r7, #16]
 801766a:	b2db      	uxtb	r3, r3
 801766c:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801766e:	f107 0108 	add.w	r1, r7, #8
 8017672:	2364      	movs	r3, #100	@ 0x64
 8017674:	2204      	movs	r2, #4
 8017676:	6878      	ldr	r0, [r7, #4]
 8017678:	f7ff fba7 	bl	8016dca <SPIF_Transmit>
 801767c:	4603      	mov	r3, r0
 801767e:	f083 0301 	eor.w	r3, r3, #1
 8017682:	b2db      	uxtb	r3, r3
 8017684:	2b00      	cmp	r3, #0
 8017686:	d004      	beq.n	8017692 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8017688:	2101      	movs	r1, #1
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f7ff fb49 	bl	8016d22 <SPIF_CsPin>
        break;
 8017690:	e011      	b.n	80176b6 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8017692:	2101      	movs	r1, #1
 8017694:	6878      	ldr	r0, [r7, #4]
 8017696:	f7ff fb44 	bl	8016d22 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 801769a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801769e:	6878      	ldr	r0, [r7, #4]
 80176a0:	f7ff fc6e 	bl	8016f80 <SPIF_WaitForWriting>
 80176a4:	4603      	mov	r3, r0
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d005      	beq.n	80176b6 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 80176aa:	2301      	movs	r3, #1
 80176ac:	75fb      	strb	r3, [r7, #23]
 80176ae:	e002      	b.n	80176b6 <SPIF_EraseSector+0xf0>
      break;
 80176b0:	bf00      	nop
 80176b2:	e000      	b.n	80176b6 <SPIF_EraseSector+0xf0>
      break;
 80176b4:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	f7ff fc19 	bl	8016eee <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 80176bc:	6878      	ldr	r0, [r7, #4]
 80176be:	f7ff fb23 	bl	8016d08 <SPIF_UnLock>
  return retVal;
 80176c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3718      	adds	r7, #24
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}

080176cc <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b088      	sub	sp, #32
 80176d0:	af02      	add	r7, sp, #8
 80176d2:	60f8      	str	r0, [r7, #12]
 80176d4:	60b9      	str	r1, [r7, #8]
 80176d6:	607a      	str	r2, [r7, #4]
 80176d8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80176da:	68f8      	ldr	r0, [r7, #12]
 80176dc:	f7ff fb01 	bl	8016ce2 <SPIF_Lock>
  bool retVal = false;
 80176e0:	2300      	movs	r3, #0
 80176e2:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 80176e4:	6a3b      	ldr	r3, [r7, #32]
 80176e6:	9300      	str	r3, [sp, #0]
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	687a      	ldr	r2, [r7, #4]
 80176ec:	68b9      	ldr	r1, [r7, #8]
 80176ee:	68f8      	ldr	r0, [r7, #12]
 80176f0:	f7ff fe04 	bl	80172fc <SPIF_WriteFn>
 80176f4:	4603      	mov	r3, r0
 80176f6:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 80176f8:	68f8      	ldr	r0, [r7, #12]
 80176fa:	f7ff fb05 	bl	8016d08 <SPIF_UnLock>
  return retVal;
 80176fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8017700:	4618      	mov	r0, r3
 8017702:	3718      	adds	r7, #24
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}

08017708 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b088      	sub	sp, #32
 801770c:	af00      	add	r7, sp, #0
 801770e:	60f8      	str	r0, [r7, #12]
 8017710:	60b9      	str	r1, [r7, #8]
 8017712:	607a      	str	r2, [r7, #4]
 8017714:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017716:	68f8      	ldr	r0, [r7, #12]
 8017718:	f7ff fae3 	bl	8016ce2 <SPIF_Lock>
  bool retVal = false;
 801771c:	2300      	movs	r3, #0
 801771e:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	021b      	lsls	r3, r3, #8
 8017724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017726:	4413      	add	r3, r2
 8017728:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 801772a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801772c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017730:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8017732:	683a      	ldr	r2, [r7, #0]
 8017734:	697b      	ldr	r3, [r7, #20]
 8017736:	429a      	cmp	r2, r3
 8017738:	d901      	bls.n	801773e <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	687a      	ldr	r2, [r7, #4]
 8017742:	69b9      	ldr	r1, [r7, #24]
 8017744:	68f8      	ldr	r0, [r7, #12]
 8017746:	f7ff fe81 	bl	801744c <SPIF_ReadFn>
 801774a:	4603      	mov	r3, r0
 801774c:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 801774e:	68f8      	ldr	r0, [r7, #12]
 8017750:	f7ff fada 	bl	8016d08 <SPIF_UnLock>
  return retVal;
 8017754:	7ffb      	ldrb	r3, [r7, #31]
}
 8017756:	4618      	mov	r0, r3
 8017758:	3720      	adds	r7, #32
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
	...

08017760 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8017760:	b480      	push	{r7}
 8017762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8017764:	4b03      	ldr	r3, [pc, #12]	@ (8017774 <LL_FLASH_GetUDN+0x14>)
 8017766:	681b      	ldr	r3, [r3, #0]
}
 8017768:	4618      	mov	r0, r3
 801776a:	46bd      	mov	sp, r7
 801776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017770:	4770      	bx	lr
 8017772:	bf00      	nop
 8017774:	1fff7580 	.word	0x1fff7580

08017778 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8017778:	b480      	push	{r7}
 801777a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 801777c:	4b03      	ldr	r3, [pc, #12]	@ (801778c <LL_FLASH_GetDeviceID+0x14>)
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	b2db      	uxtb	r3, r3
}
 8017782:	4618      	mov	r0, r3
 8017784:	46bd      	mov	sp, r7
 8017786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778a:	4770      	bx	lr
 801778c:	1fff7584 	.word	0x1fff7584

08017790 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8017790:	b480      	push	{r7}
 8017792:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8017794:	4b03      	ldr	r3, [pc, #12]	@ (80177a4 <LL_FLASH_GetSTCompanyID+0x14>)
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	0a1b      	lsrs	r3, r3, #8
}
 801779a:	4618      	mov	r0, r3
 801779c:	46bd      	mov	sp, r7
 801779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a2:	4770      	bx	lr
 80177a4:	1fff7584 	.word	0x1fff7584

080177a8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80177a8:	b5b0      	push	{r4, r5, r7, lr}
 80177aa:	b090      	sub	sp, #64	@ 0x40
 80177ac:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80177ae:	2392      	movs	r3, #146	@ 0x92
 80177b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask(1<<CFG_TASK_MY_TASK,UTIL_SEQ_RFU,myTask);
 80177b4:	4a29      	ldr	r2, [pc, #164]	@ (801785c <APP_BLE_Init+0xb4>)
 80177b6:	2100      	movs	r1, #0
 80177b8:	2004      	movs	r0, #4
 80177ba:	f001 fdb9 	bl	8019330 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK,CFG_SCH_PRIO_0);
 80177be:	2100      	movs	r1, #0
 80177c0:	2004      	movs	r0, #4
 80177c2:	f001 fdd7 	bl	8019374 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80177c6:	4b26      	ldr	r3, [pc, #152]	@ (8017860 <APP_BLE_Init+0xb8>)
 80177c8:	1d3c      	adds	r4, r7, #4
 80177ca:	461d      	mov	r5, r3
 80177cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80177ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80177d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80177d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80177d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80177d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80177d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80177dc:	c403      	stmia	r4!, {r0, r1}
 80177de:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80177e0:	f000 f922 	bl	8017a28 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80177e4:	2101      	movs	r1, #1
 80177e6:	2002      	movs	r0, #2
 80177e8:	f001 fc76 	bl	80190d8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80177ec:	4a1d      	ldr	r2, [pc, #116]	@ (8017864 <APP_BLE_Init+0xbc>)
 80177ee:	2100      	movs	r1, #0
 80177f0:	2002      	movs	r0, #2
 80177f2:	f001 fd9d 	bl	8019330 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80177f6:	1d3b      	adds	r3, r7, #4
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fe fb73 	bl	8015ee4 <SHCI_C2_BLE_Init>
 80177fe:	4603      	mov	r3, r0
 8017800:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8017804:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8017808:	2b00      	cmp	r3, #0
 801780a:	d001      	beq.n	8017810 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801780c:	f7eb fa66 	bl	8002cdc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8017810:	f000 f920 	bl	8017a54 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8017814:	f7fe fac0 	bl	8015d98 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017818:	4b13      	ldr	r3, [pc, #76]	@ (8017868 <APP_BLE_Init+0xc0>)
 801781a:	2200      	movs	r2, #0
 801781c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8017820:	4b11      	ldr	r3, [pc, #68]	@ (8017868 <APP_BLE_Init+0xc0>)
 8017822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017826:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8017828:	4a10      	ldr	r2, [pc, #64]	@ (801786c <APP_BLE_Init+0xc4>)
 801782a:	2100      	movs	r1, #0
 801782c:	2001      	movs	r0, #1
 801782e:	f001 fd7f 	bl	8019330 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8017832:	2006      	movs	r0, #6
 8017834:	f7fe f924 	bl	8015a80 <aci_hal_set_radio_activity_mask>
 8017838:	4603      	mov	r3, r0
 801783a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 801783e:	f000 faed 	bl	8017e1c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8017842:	4b09      	ldr	r3, [pc, #36]	@ (8017868 <APP_BLE_Init+0xc0>)
 8017844:	2200      	movs	r2, #0
 8017846:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8017848:	4b07      	ldr	r3, [pc, #28]	@ (8017868 <APP_BLE_Init+0xc0>)
 801784a:	2200      	movs	r2, #0
 801784c:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 801784e:	2001      	movs	r0, #1
 8017850:	f000 f9b4 	bl	8017bbc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8017854:	bf00      	nop
}
 8017856:	3740      	adds	r7, #64	@ 0x40
 8017858:	46bd      	mov	sp, r7
 801785a:	bdb0      	pop	{r4, r5, r7, pc}
 801785c:	08017d8d 	.word	0x08017d8d
 8017860:	0801fc48 	.word	0x0801fc48
 8017864:	08016101 	.word	0x08016101
 8017868:	2000155c 	.word	0x2000155c
 801786c:	08017ca5 	.word	0x08017ca5

08017870 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b08c      	sub	sp, #48	@ 0x30
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017878:	2392      	movs	r3, #146	@ 0x92
 801787a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	3301      	adds	r3, #1
 8017882:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8017884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	2bff      	cmp	r3, #255	@ 0xff
 801788a:	d05c      	beq.n	8017946 <SVCCTL_App_Notification+0xd6>
 801788c:	2bff      	cmp	r3, #255	@ 0xff
 801788e:	f300 80bd 	bgt.w	8017a0c <SVCCTL_App_Notification+0x19c>
 8017892:	2b3e      	cmp	r3, #62	@ 0x3e
 8017894:	d02b      	beq.n	80178ee <SVCCTL_App_Notification+0x7e>
 8017896:	2b3e      	cmp	r3, #62	@ 0x3e
 8017898:	f300 80b8 	bgt.w	8017a0c <SVCCTL_App_Notification+0x19c>
 801789c:	2b05      	cmp	r3, #5
 801789e:	d002      	beq.n	80178a6 <SVCCTL_App_Notification+0x36>
 80178a0:	2b10      	cmp	r3, #16
 80178a2:	d020      	beq.n	80178e6 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80178a4:	e0b2      	b.n	8017a0c <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80178a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178a8:	3302      	adds	r3, #2
 80178aa:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80178b2:	b29a      	uxth	r2, r3
 80178b4:	4b59      	ldr	r3, [pc, #356]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 80178b6:	8adb      	ldrh	r3, [r3, #22]
 80178b8:	429a      	cmp	r2, r3
 80178ba:	d106      	bne.n	80178ca <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80178bc:	4b57      	ldr	r3, [pc, #348]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 80178be:	2200      	movs	r2, #0
 80178c0:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80178c2:	4b56      	ldr	r3, [pc, #344]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 80178c4:	2200      	movs	r2, #0
 80178c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80178ca:	2001      	movs	r0, #1
 80178cc:	f000 f976 	bl	8017bbc <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80178d0:	4b53      	ldr	r3, [pc, #332]	@ (8017a20 <SVCCTL_App_Notification+0x1b0>)
 80178d2:	2201      	movs	r2, #1
 80178d4:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80178d6:	4b51      	ldr	r3, [pc, #324]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 80178d8:	8ada      	ldrh	r2, [r3, #22]
 80178da:	4b51      	ldr	r3, [pc, #324]	@ (8017a20 <SVCCTL_App_Notification+0x1b0>)
 80178dc:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80178de:	4850      	ldr	r0, [pc, #320]	@ (8017a20 <SVCCTL_App_Notification+0x1b0>)
 80178e0:	f000 fa88 	bl	8017df4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80178e4:	e095      	b.n	8017a12 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 80178e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178e8:	3302      	adds	r3, #2
 80178ea:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 80178ec:	e091      	b.n	8017a12 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80178ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178f0:	3302      	adds	r3, #2
 80178f2:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 80178f4:	69bb      	ldr	r3, [r7, #24]
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	2b01      	cmp	r3, #1
 80178fa:	d001      	beq.n	8017900 <SVCCTL_App_Notification+0x90>
 80178fc:	2b03      	cmp	r3, #3
          break;
 80178fe:	e021      	b.n	8017944 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8017900:	69bb      	ldr	r3, [r7, #24]
 8017902:	3301      	adds	r3, #1
 8017904:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8017906:	4b45      	ldr	r3, [pc, #276]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 8017908:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801790c:	2b04      	cmp	r3, #4
 801790e:	d104      	bne.n	801791a <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8017910:	4b42      	ldr	r3, [pc, #264]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 8017912:	2206      	movs	r2, #6
 8017914:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8017918:	e003      	b.n	8017922 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 801791a:	4b40      	ldr	r3, [pc, #256]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 801791c:	2205      	movs	r2, #5
 801791e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017928:	b29a      	uxth	r2, r3
 801792a:	4b3c      	ldr	r3, [pc, #240]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 801792c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 801792e:	4b3c      	ldr	r3, [pc, #240]	@ (8017a20 <SVCCTL_App_Notification+0x1b0>)
 8017930:	2200      	movs	r2, #0
 8017932:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017934:	4b39      	ldr	r3, [pc, #228]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 8017936:	8ada      	ldrh	r2, [r3, #22]
 8017938:	4b39      	ldr	r3, [pc, #228]	@ (8017a20 <SVCCTL_App_Notification+0x1b0>)
 801793a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 801793c:	4838      	ldr	r0, [pc, #224]	@ (8017a20 <SVCCTL_App_Notification+0x1b0>)
 801793e:	f000 fa59 	bl	8017df4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8017942:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8017944:	e065      	b.n	8017a12 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8017946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017948:	3302      	adds	r3, #2
 801794a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 801794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801794e:	881b      	ldrh	r3, [r3, #0]
 8017950:	b29b      	uxth	r3, r3
 8017952:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017956:	4293      	cmp	r3, r2
 8017958:	d048      	beq.n	80179ec <SVCCTL_App_Notification+0x17c>
 801795a:	f640 420e 	movw	r2, #3086	@ 0xc0e
 801795e:	4293      	cmp	r3, r2
 8017960:	dc56      	bgt.n	8017a10 <SVCCTL_App_Notification+0x1a0>
 8017962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017966:	d04b      	beq.n	8017a00 <SVCCTL_App_Notification+0x190>
 8017968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801796c:	dc50      	bgt.n	8017a10 <SVCCTL_App_Notification+0x1a0>
 801796e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8017972:	4293      	cmp	r3, r2
 8017974:	dc4c      	bgt.n	8017a10 <SVCCTL_App_Notification+0x1a0>
 8017976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801797a:	dc04      	bgt.n	8017986 <SVCCTL_App_Notification+0x116>
 801797c:	2b04      	cmp	r3, #4
 801797e:	d041      	beq.n	8017a04 <SVCCTL_App_Notification+0x194>
 8017980:	2b06      	cmp	r3, #6
 8017982:	d039      	beq.n	80179f8 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017984:	e044      	b.n	8017a10 <SVCCTL_App_Notification+0x1a0>
 8017986:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 801798a:	2b09      	cmp	r3, #9
 801798c:	d840      	bhi.n	8017a10 <SVCCTL_App_Notification+0x1a0>
 801798e:	a201      	add	r2, pc, #4	@ (adr r2, 8017994 <SVCCTL_App_Notification+0x124>)
 8017990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017994:	080179e5 	.word	0x080179e5
 8017998:	080179bd 	.word	0x080179bd
 801799c:	08017a11 	.word	0x08017a11
 80179a0:	08017a11 	.word	0x08017a11
 80179a4:	08017a11 	.word	0x08017a11
 80179a8:	08017a11 	.word	0x08017a11
 80179ac:	08017a09 	.word	0x08017a09
 80179b0:	08017a11 	.word	0x08017a11
 80179b4:	080179d1 	.word	0x080179d1
 80179b8:	08017a09 	.word	0x08017a09
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80179bc:	4b17      	ldr	r3, [pc, #92]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 80179be:	8adb      	ldrh	r3, [r3, #22]
 80179c0:	4918      	ldr	r1, [pc, #96]	@ (8017a24 <SVCCTL_App_Notification+0x1b4>)
 80179c2:	4618      	mov	r0, r3
 80179c4:	f7fd fa5e 	bl	8014e84 <aci_gap_pass_key_resp>
 80179c8:	4603      	mov	r3, r0
 80179ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 80179ce:	e01c      	b.n	8017a0a <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80179d0:	4b12      	ldr	r3, [pc, #72]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 80179d2:	8adb      	ldrh	r3, [r3, #22]
 80179d4:	2101      	movs	r1, #1
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7fd fbfe 	bl	80151d8 <aci_gap_numeric_comparison_value_confirm_yesno>
 80179dc:	4603      	mov	r3, r0
 80179de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 80179e2:	e012      	b.n	8017a0a <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80179e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179e6:	3302      	adds	r3, #2
 80179e8:	623b      	str	r3, [r7, #32]
          break;
 80179ea:	e00e      	b.n	8017a0a <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80179ec:	4b0b      	ldr	r3, [pc, #44]	@ (8017a1c <SVCCTL_App_Notification+0x1ac>)
 80179ee:	8adb      	ldrh	r3, [r3, #22]
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7fd ff04 	bl	80157fe <aci_gatt_confirm_indication>
        break;
 80179f6:	e008      	b.n	8017a0a <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 80179f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179fa:	3302      	adds	r3, #2
 80179fc:	61fb      	str	r3, [r7, #28]
          break;
 80179fe:	e004      	b.n	8017a0a <SVCCTL_App_Notification+0x19a>
          break;
 8017a00:	bf00      	nop
 8017a02:	e005      	b.n	8017a10 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8017a04:	bf00      	nop
 8017a06:	e003      	b.n	8017a10 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8017a08:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017a0a:	e001      	b.n	8017a10 <SVCCTL_App_Notification+0x1a0>
      break;
 8017a0c:	bf00      	nop
 8017a0e:	e000      	b.n	8017a12 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017a10:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8017a12:	2301      	movs	r3, #1
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3730      	adds	r7, #48	@ 0x30
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}
 8017a1c:	2000155c 	.word	0x2000155c
 8017a20:	200015e0 	.word	0x200015e0
 8017a24:	0001b207 	.word	0x0001b207

08017a28 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b082      	sub	sp, #8
 8017a2c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8017a2e:	4b06      	ldr	r3, [pc, #24]	@ (8017a48 <Ble_Tl_Init+0x20>)
 8017a30:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8017a32:	4b06      	ldr	r3, [pc, #24]	@ (8017a4c <Ble_Tl_Init+0x24>)
 8017a34:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8017a36:	463b      	mov	r3, r7
 8017a38:	4619      	mov	r1, r3
 8017a3a:	4805      	ldr	r0, [pc, #20]	@ (8017a50 <Ble_Tl_Init+0x28>)
 8017a3c:	f7fe fb44 	bl	80160c8 <hci_init>

  return;
 8017a40:	bf00      	nop
}
 8017a42:	3708      	adds	r7, #8
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}
 8017a48:	200300d8 	.word	0x200300d8
 8017a4c:	08017d55 	.word	0x08017d55
 8017a50:	08017d1d 	.word	0x08017d1d

08017a54 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8017a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a56:	b08d      	sub	sp, #52	@ 0x34
 8017a58:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017a5e:	2392      	movs	r3, #146	@ 0x92
 8017a60:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8017a62:	f7fe f861 	bl	8015b28 <hci_reset>
 8017a66:	4603      	mov	r3, r0
 8017a68:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8017a6a:	f000 f8d7 	bl	8017c1c <BleGetBdAddress>
 8017a6e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8017a70:	693a      	ldr	r2, [r7, #16]
 8017a72:	2106      	movs	r1, #6
 8017a74:	2000      	movs	r0, #0
 8017a76:	f7fd ff17 	bl	80158a8 <aci_hal_write_config_data>
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8017a7e:	4a4a      	ldr	r2, [pc, #296]	@ (8017ba8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8017a80:	2110      	movs	r1, #16
 8017a82:	2018      	movs	r0, #24
 8017a84:	f7fd ff10 	bl	80158a8 <aci_hal_write_config_data>
 8017a88:	4603      	mov	r3, r0
 8017a8a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8017a8c:	4a47      	ldr	r2, [pc, #284]	@ (8017bac <Ble_Hci_Gap_Gatt_Init+0x158>)
 8017a8e:	2110      	movs	r1, #16
 8017a90:	2008      	movs	r0, #8
 8017a92:	f7fd ff09 	bl	80158a8 <aci_hal_write_config_data>
 8017a96:	4603      	mov	r3, r0
 8017a98:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8017a9a:	211d      	movs	r1, #29
 8017a9c:	2001      	movs	r0, #1
 8017a9e:	f7fd ff88 	bl	80159b2 <aci_hal_set_tx_power_level>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8017aa6:	f7fd fbfe 	bl	80152a6 <aci_gatt_init>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8017ab2:	7bfb      	ldrb	r3, [r7, #15]
 8017ab4:	f043 0301 	orr.w	r3, r3, #1
 8017ab8:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8017aba:	7bfb      	ldrb	r3, [r7, #15]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d01f      	beq.n	8017b00 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8017ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8017bb0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8017ac2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8017ac4:	1dba      	adds	r2, r7, #6
 8017ac6:	7bf8      	ldrb	r0, [r7, #15]
 8017ac8:	1cbb      	adds	r3, r7, #2
 8017aca:	9301      	str	r3, [sp, #4]
 8017acc:	1d3b      	adds	r3, r7, #4
 8017ace:	9300      	str	r3, [sp, #0]
 8017ad0:	4613      	mov	r3, r2
 8017ad2:	2206      	movs	r2, #6
 8017ad4:	2100      	movs	r1, #0
 8017ad6:	f7fd fa3c 	bl	8014f52 <aci_gap_init>
 8017ada:	4603      	mov	r3, r0
 8017adc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8017ade:	88fc      	ldrh	r4, [r7, #6]
 8017ae0:	88bd      	ldrh	r5, [r7, #4]
 8017ae2:	68b8      	ldr	r0, [r7, #8]
 8017ae4:	f7e8 fb9c 	bl	8000220 <strlen>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	b2da      	uxtb	r2, r3
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	9300      	str	r3, [sp, #0]
 8017af0:	4613      	mov	r3, r2
 8017af2:	2200      	movs	r2, #0
 8017af4:	4629      	mov	r1, r5
 8017af6:	4620      	mov	r0, r4
 8017af8:	f7fd fdd8 	bl	80156ac <aci_gatt_update_char_value>
 8017afc:	4603      	mov	r3, r0
 8017afe:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8017b00:	88f8      	ldrh	r0, [r7, #6]
 8017b02:	8879      	ldrh	r1, [r7, #2]
 8017b04:	463b      	mov	r3, r7
 8017b06:	9300      	str	r3, [sp, #0]
 8017b08:	2302      	movs	r3, #2
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	f7fd fdce 	bl	80156ac <aci_gatt_update_char_value>
 8017b10:	4603      	mov	r3, r0
 8017b12:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8017b14:	2202      	movs	r2, #2
 8017b16:	2102      	movs	r1, #2
 8017b18:	2000      	movs	r0, #0
 8017b1a:	f7fe f829 	bl	8015b70 <hci_le_set_default_phy>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8017b22:	4b24      	ldr	r3, [pc, #144]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b24:	2201      	movs	r2, #1
 8017b26:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8017b28:	4b22      	ldr	r3, [pc, #136]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b2a:	781b      	ldrb	r3, [r3, #0]
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7fd f891 	bl	8014c54 <aci_gap_set_io_capability>
 8017b32:	4603      	mov	r3, r0
 8017b34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8017b36:	4b1f      	ldr	r3, [pc, #124]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b38:	2201      	movs	r2, #1
 8017b3a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8017b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b3e:	2208      	movs	r2, #8
 8017b40:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8017b42:	4b1c      	ldr	r3, [pc, #112]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b44:	2210      	movs	r2, #16
 8017b46:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8017b48:	4b1a      	ldr	r3, [pc, #104]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8017b4e:	4b19      	ldr	r3, [pc, #100]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b50:	4a19      	ldr	r2, [pc, #100]	@ (8017bb8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8017b52:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8017b54:	4b17      	ldr	r3, [pc, #92]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b56:	2200      	movs	r2, #0
 8017b58:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8017b5a:	4b16      	ldr	r3, [pc, #88]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b5c:	789c      	ldrb	r4, [r3, #2]
 8017b5e:	4b15      	ldr	r3, [pc, #84]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b60:	785d      	ldrb	r5, [r3, #1]
 8017b62:	4b14      	ldr	r3, [pc, #80]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b64:	791b      	ldrb	r3, [r3, #4]
 8017b66:	4a13      	ldr	r2, [pc, #76]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b68:	7952      	ldrb	r2, [r2, #5]
 8017b6a:	4912      	ldr	r1, [pc, #72]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b6c:	78c9      	ldrb	r1, [r1, #3]
 8017b6e:	4811      	ldr	r0, [pc, #68]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b70:	6880      	ldr	r0, [r0, #8]
 8017b72:	2600      	movs	r6, #0
 8017b74:	9604      	str	r6, [sp, #16]
 8017b76:	9003      	str	r0, [sp, #12]
 8017b78:	9102      	str	r1, [sp, #8]
 8017b7a:	9201      	str	r2, [sp, #4]
 8017b7c:	9300      	str	r3, [sp, #0]
 8017b7e:	2300      	movs	r3, #0
 8017b80:	2201      	movs	r2, #1
 8017b82:	4629      	mov	r1, r5
 8017b84:	4620      	mov	r0, r4
 8017b86:	f7fd f8b9 	bl	8014cfc <aci_gap_set_authentication_requirement>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8017b8e:	4b09      	ldr	r3, [pc, #36]	@ (8017bb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017b90:	789b      	ldrb	r3, [r3, #2]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d003      	beq.n	8017b9e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8017b96:	f7fd fafb 	bl	8015190 <aci_gap_configure_filter_accept_list>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8017b9e:	bf00      	nop
 8017ba0:	371c      	adds	r7, #28
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ba6:	bf00      	nop
 8017ba8:	08021af4 	.word	0x08021af4
 8017bac:	08021b04 	.word	0x08021b04
 8017bb0:	0801fc84 	.word	0x0801fc84
 8017bb4:	2000155c 	.word	0x2000155c
 8017bb8:	0001b207 	.word	0x0001b207

08017bbc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b08c      	sub	sp, #48	@ 0x30
 8017bc0:	af08      	add	r7, sp, #32
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017bc6:	2392      	movs	r3, #146	@ 0x92
 8017bc8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8017bca:	4a12      	ldr	r2, [pc, #72]	@ (8017c14 <Adv_Request+0x58>)
 8017bcc:	79fb      	ldrb	r3, [r7, #7]
 8017bce:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	9306      	str	r3, [sp, #24]
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	9305      	str	r3, [sp, #20]
 8017bda:	2300      	movs	r3, #0
 8017bdc:	9304      	str	r3, [sp, #16]
 8017bde:	2300      	movs	r3, #0
 8017be0:	9303      	str	r3, [sp, #12]
 8017be2:	2300      	movs	r3, #0
 8017be4:	9302      	str	r3, [sp, #8]
 8017be6:	2300      	movs	r3, #0
 8017be8:	9301      	str	r3, [sp, #4]
 8017bea:	2300      	movs	r3, #0
 8017bec:	9300      	str	r3, [sp, #0]
 8017bee:	2300      	movs	r3, #0
 8017bf0:	22a0      	movs	r2, #160	@ 0xa0
 8017bf2:	2180      	movs	r1, #128	@ 0x80
 8017bf4:	2000      	movs	r0, #0
 8017bf6:	f7fc ff33 	bl	8014a60 <aci_gap_set_discoverable>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8017bfe:	4906      	ldr	r1, [pc, #24]	@ (8017c18 <Adv_Request+0x5c>)
 8017c00:	200e      	movs	r0, #14
 8017c02:	f7fd fa53 	bl	80150ac <aci_gap_update_adv_data>
 8017c06:	4603      	mov	r3, r0
 8017c08:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8017c0a:	bf00      	nop
}
 8017c0c:	3710      	adds	r7, #16
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd80      	pop	{r7, pc}
 8017c12:	bf00      	nop
 8017c14:	2000155c 	.word	0x2000155c
 8017c18:	200000c4 	.word	0x200000c4

08017c1c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b086      	sub	sp, #24
 8017c20:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8017c22:	f7ff fd9d 	bl	8017760 <LL_FLASH_GetUDN>
 8017c26:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8017c28:	693b      	ldr	r3, [r7, #16]
 8017c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c2e:	d023      	beq.n	8017c78 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8017c30:	f7ff fdae 	bl	8017790 <LL_FLASH_GetSTCompanyID>
 8017c34:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8017c36:	f7ff fd9f 	bl	8017778 <LL_FLASH_GetDeviceID>
 8017c3a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8017c3c:	693b      	ldr	r3, [r7, #16]
 8017c3e:	b2da      	uxtb	r2, r3
 8017c40:	4b16      	ldr	r3, [pc, #88]	@ (8017c9c <BleGetBdAddress+0x80>)
 8017c42:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8017c44:	693b      	ldr	r3, [r7, #16]
 8017c46:	0a1b      	lsrs	r3, r3, #8
 8017c48:	b2da      	uxtb	r2, r3
 8017c4a:	4b14      	ldr	r3, [pc, #80]	@ (8017c9c <BleGetBdAddress+0x80>)
 8017c4c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	b2da      	uxtb	r2, r3
 8017c52:	4b12      	ldr	r3, [pc, #72]	@ (8017c9c <BleGetBdAddress+0x80>)
 8017c54:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	b2da      	uxtb	r2, r3
 8017c5a:	4b10      	ldr	r3, [pc, #64]	@ (8017c9c <BleGetBdAddress+0x80>)
 8017c5c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	0a1b      	lsrs	r3, r3, #8
 8017c62:	b2da      	uxtb	r2, r3
 8017c64:	4b0d      	ldr	r3, [pc, #52]	@ (8017c9c <BleGetBdAddress+0x80>)
 8017c66:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8017c68:	68bb      	ldr	r3, [r7, #8]
 8017c6a:	0c1b      	lsrs	r3, r3, #16
 8017c6c:	b2da      	uxtb	r2, r3
 8017c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8017c9c <BleGetBdAddress+0x80>)
 8017c70:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8017c72:	4b0a      	ldr	r3, [pc, #40]	@ (8017c9c <BleGetBdAddress+0x80>)
 8017c74:	617b      	str	r3, [r7, #20]
 8017c76:	e00b      	b.n	8017c90 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8017c78:	2000      	movs	r0, #0
 8017c7a:	f7fe ff41 	bl	8016b00 <OTP_Read>
 8017c7e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d002      	beq.n	8017c8c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	617b      	str	r3, [r7, #20]
 8017c8a:	e001      	b.n	8017c90 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8017c8c:	4b04      	ldr	r3, [pc, #16]	@ (8017ca0 <BleGetBdAddress+0x84>)
 8017c8e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8017c90:	697b      	ldr	r3, [r7, #20]
}
 8017c92:	4618      	mov	r0, r3
 8017c94:	3718      	adds	r7, #24
 8017c96:	46bd      	mov	sp, r7
 8017c98:	bd80      	pop	{r7, pc}
 8017c9a:	bf00      	nop
 8017c9c:	20001554 	.word	0x20001554
 8017ca0:	08021aec 	.word	0x08021aec

08017ca4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8017caa:	4b0a      	ldr	r3, [pc, #40]	@ (8017cd4 <Adv_Cancel+0x30>)
 8017cac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017cb0:	2b05      	cmp	r3, #5
 8017cb2:	d00a      	beq.n	8017cca <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017cb4:	2392      	movs	r3, #146	@ 0x92
 8017cb6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8017cb8:	f7fc feae 	bl	8014a18 <aci_gap_set_non_discoverable>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017cc0:	4b04      	ldr	r3, [pc, #16]	@ (8017cd4 <Adv_Cancel+0x30>)
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8017cc8:	bf00      	nop
 8017cca:	bf00      	nop
}
 8017ccc:	3708      	adds	r7, #8
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	bd80      	pop	{r7, pc}
 8017cd2:	bf00      	nop
 8017cd4:	2000155c 	.word	0x2000155c

08017cd8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8017ce0:	2100      	movs	r1, #0
 8017ce2:	2002      	movs	r0, #2
 8017ce4:	f001 fb46 	bl	8019374 <UTIL_SEQ_SetTask>

  return;
 8017ce8:	bf00      	nop
}
 8017cea:	3708      	adds	r7, #8
 8017cec:	46bd      	mov	sp, r7
 8017cee:	bd80      	pop	{r7, pc}

08017cf0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b082      	sub	sp, #8
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017cf8:	2001      	movs	r0, #1
 8017cfa:	f001 fba7 	bl	801944c <UTIL_SEQ_SetEvt>

  return;
 8017cfe:	bf00      	nop
}
 8017d00:	3708      	adds	r7, #8
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}

08017d06 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8017d06:	b580      	push	{r7, lr}
 8017d08:	b082      	sub	sp, #8
 8017d0a:	af00      	add	r7, sp, #0
 8017d0c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017d0e:	2001      	movs	r0, #1
 8017d10:	f001 fbbc 	bl	801948c <UTIL_SEQ_WaitEvt>

  return;
 8017d14:	bf00      	nop
}
 8017d16:	3708      	adds	r7, #8
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b084      	sub	sp, #16
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	685b      	ldr	r3, [r3, #4]
 8017d2c:	3308      	adds	r3, #8
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f7fe f884 	bl	8015e3c <SVCCTL_UserEvtRx>
 8017d34:	4603      	mov	r3, r0
 8017d36:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8017d38:	7afb      	ldrb	r3, [r7, #11]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d003      	beq.n	8017d46 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	2201      	movs	r2, #1
 8017d42:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8017d44:	e003      	b.n	8017d4e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	2200      	movs	r2, #0
 8017d4a:	701a      	strb	r2, [r3, #0]
  return;
 8017d4c:	bf00      	nop
}
 8017d4e:	3710      	adds	r7, #16
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b084      	sub	sp, #16
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8017d5e:	79fb      	ldrb	r3, [r7, #7]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d002      	beq.n	8017d6a <BLE_StatusNot+0x16>
 8017d64:	2b01      	cmp	r3, #1
 8017d66:	d006      	beq.n	8017d76 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8017d68:	e00b      	b.n	8017d82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017d6a:	2307      	movs	r3, #7
 8017d6c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8017d6e:	68f8      	ldr	r0, [r7, #12]
 8017d70:	f001 fb2c 	bl	80193cc <UTIL_SEQ_PauseTask>
      break;
 8017d74:	e005      	b.n	8017d82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017d76:	2307      	movs	r3, #7
 8017d78:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8017d7a:	68f8      	ldr	r0, [r7, #12]
 8017d7c:	f001 fb46 	bl	801940c <UTIL_SEQ_ResumeTask>
      break;
 8017d80:	bf00      	nop
  }

  return;
 8017d82:	bf00      	nop
}
 8017d84:	3710      	adds	r7, #16
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
	...

08017d8c <myTask>:
static void Custom_Sendnum_Update_Char(void);
static void Custom_Sendnum_Send_Notification(void);

/* USER CODE BEGIN PFP */

void myTask(void){
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	af00      	add	r7, sp, #0

	if(bluetoothsend>=1){
 8017d90:	4b08      	ldr	r3, [pc, #32]	@ (8017db4 <myTask+0x28>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	dd0b      	ble.n	8017db0 <myTask+0x24>
		UpdateCharData[0]=123;
 8017d98:	4b07      	ldr	r3, [pc, #28]	@ (8017db8 <myTask+0x2c>)
 8017d9a:	227b      	movs	r2, #123	@ 0x7b
 8017d9c:	701a      	strb	r2, [r3, #0]
			 Custom_Sendnum_Update_Char();
 8017d9e:	f000 f845 	bl	8017e2c <Custom_Sendnum_Update_Char>
		bluetoothsend=0;
 8017da2:	4b04      	ldr	r3, [pc, #16]	@ (8017db4 <myTask+0x28>)
 8017da4:	2200      	movs	r2, #0
 8017da6:	601a      	str	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK,CFG_SCH_PRIO_0);
 8017da8:	2100      	movs	r1, #0
 8017daa:	2004      	movs	r0, #4
 8017dac:	f001 fae2 	bl	8019374 <UTIL_SEQ_SetTask>





}
 8017db0:	bf00      	nop
 8017db2:	bd80      	pop	{r7, pc}
 8017db4:	20000ba4 	.word	0x20000ba4
 8017db8:	200015e4 	.word	0x200015e4

08017dbc <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8017dbc:	b480      	push	{r7}
 8017dbe:	b083      	sub	sp, #12
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	2b03      	cmp	r3, #3
 8017dca:	d80b      	bhi.n	8017de4 <Custom_STM_App_Notification+0x28>
 8017dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8017dd4 <Custom_STM_App_Notification+0x18>)
 8017dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dd2:	bf00      	nop
 8017dd4:	08017de5 	.word	0x08017de5
 8017dd8:	08017de5 	.word	0x08017de5
 8017ddc:	08017de5 	.word	0x08017de5
 8017de0:	08017de5 	.word	0x08017de5

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8017de4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8017de6:	bf00      	nop
}
 8017de8:	370c      	adds	r7, #12
 8017dea:	46bd      	mov	sp, r7
 8017dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df0:	4770      	bx	lr
 8017df2:	bf00      	nop

08017df4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8017df4:	b480      	push	{r7}
 8017df6:	b083      	sub	sp, #12
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	781b      	ldrb	r3, [r3, #0]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d002      	beq.n	8017e0a <Custom_APP_Notification+0x16>
 8017e04:	2b01      	cmp	r3, #1
 8017e06:	d002      	beq.n	8017e0e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8017e08:	e002      	b.n	8017e10 <Custom_APP_Notification+0x1c>
      break;
 8017e0a:	bf00      	nop
 8017e0c:	e000      	b.n	8017e10 <Custom_APP_Notification+0x1c>
      break;
 8017e0e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8017e10:	bf00      	nop
}
 8017e12:	370c      	adds	r7, #12
 8017e14:	46bd      	mov	sp, r7
 8017e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1a:	4770      	bx	lr

08017e1c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8017e1c:	b480      	push	{r7}
 8017e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8017e20:	bf00      	nop
}
 8017e22:	46bd      	mov	sp, r7
 8017e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e28:	4770      	bx	lr
	...

08017e2c <Custom_Sendnum_Update_Char>:
 *
 *************************************************************/

/* bpservice */
__USED void Custom_Sendnum_Update_Char(void) /* Property Read */
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8017e32:	2300      	movs	r3, #0
 8017e34:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Sendnum_UC_1*/

  /* USER CODE END Sendnum_UC_1*/

  if (updateflag != 0)
 8017e36:	79fb      	ldrb	r3, [r7, #7]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d004      	beq.n	8017e46 <Custom_Sendnum_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SENDNUM, (uint8_t *)UpdateCharData);
 8017e3c:	4904      	ldr	r1, [pc, #16]	@ (8017e50 <Custom_Sendnum_Update_Char+0x24>)
 8017e3e:	2001      	movs	r0, #1
 8017e40:	f000 f966 	bl	8018110 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Sendnum_UC_Last*/

  /* USER CODE END Sendnum_UC_Last*/
  return;
 8017e44:	bf00      	nop
 8017e46:	bf00      	nop
}
 8017e48:	3708      	adds	r7, #8
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}
 8017e4e:	bf00      	nop
 8017e50:	200015e4 	.word	0x200015e4

08017e54 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b08c      	sub	sp, #48	@ 0x30
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	3301      	adds	r3, #1
 8017e66:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8017e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e6a:	781b      	ldrb	r3, [r3, #0]
 8017e6c:	2bff      	cmp	r3, #255	@ 0xff
 8017e6e:	f040 8093 	bne.w	8017f98 <Custom_STM_Event_Handler+0x144>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8017e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e74:	3302      	adds	r3, #2
 8017e76:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8017e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e7a:	881b      	ldrh	r3, [r3, #0]
 8017e7c:	b29b      	uxth	r3, r3
 8017e7e:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8017e82:	2b1a      	cmp	r3, #26
 8017e84:	f200 8084 	bhi.w	8017f90 <Custom_STM_Event_Handler+0x13c>
 8017e88:	a201      	add	r2, pc, #4	@ (adr r2, 8017e90 <Custom_STM_Event_Handler+0x3c>)
 8017e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e8e:	bf00      	nop
 8017e90:	08017efd 	.word	0x08017efd
 8017e94:	08017f91 	.word	0x08017f91
 8017e98:	08017f91 	.word	0x08017f91
 8017e9c:	08017f91 	.word	0x08017f91
 8017ea0:	08017f91 	.word	0x08017f91
 8017ea4:	08017f91 	.word	0x08017f91
 8017ea8:	08017f91 	.word	0x08017f91
 8017eac:	08017f91 	.word	0x08017f91
 8017eb0:	08017f91 	.word	0x08017f91
 8017eb4:	08017f91 	.word	0x08017f91
 8017eb8:	08017f91 	.word	0x08017f91
 8017ebc:	08017f91 	.word	0x08017f91
 8017ec0:	08017f91 	.word	0x08017f91
 8017ec4:	08017f91 	.word	0x08017f91
 8017ec8:	08017f91 	.word	0x08017f91
 8017ecc:	08017f91 	.word	0x08017f91
 8017ed0:	08017f91 	.word	0x08017f91
 8017ed4:	08017f91 	.word	0x08017f91
 8017ed8:	08017f91 	.word	0x08017f91
 8017edc:	08017f91 	.word	0x08017f91
 8017ee0:	08017f91 	.word	0x08017f91
 8017ee4:	08017f91 	.word	0x08017f91
 8017ee8:	08017f91 	.word	0x08017f91
 8017eec:	08017f91 	.word	0x08017f91
 8017ef0:	08017f91 	.word	0x08017f91
 8017ef4:	08017f91 	.word	0x08017f91
 8017ef8:	08017f73 	.word	0x08017f73
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8017efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017efe:	3302      	adds	r3, #2
 8017f00:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8017f02:	69fb      	ldr	r3, [r7, #28]
 8017f04:	885b      	ldrh	r3, [r3, #2]
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	461a      	mov	r2, r3
 8017f0a:	4b27      	ldr	r3, [pc, #156]	@ (8017fa8 <Custom_STM_Event_Handler+0x154>)
 8017f0c:	889b      	ldrh	r3, [r3, #4]
 8017f0e:	3302      	adds	r3, #2
 8017f10:	429a      	cmp	r2, r3
 8017f12:	d119      	bne.n	8017f48 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8017f14:	2301      	movs	r3, #1
 8017f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8017f1a:	69fb      	ldr	r3, [r7, #28]
 8017f1c:	7a1b      	ldrb	r3, [r3, #8]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d002      	beq.n	8017f28 <Custom_STM_Event_Handler+0xd4>
 8017f22:	2b01      	cmp	r3, #1
 8017f24:	d008      	beq.n	8017f38 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8017f26:	e023      	b.n	8017f70 <Custom_STM_Event_Handler+0x11c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SENDNUM_NOTIFY_DISABLED_EVT;
 8017f28:	2302      	movs	r3, #2
 8017f2a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8017f2c:	f107 0308 	add.w	r3, r7, #8
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7ff ff43 	bl	8017dbc <Custom_STM_App_Notification>
                break;
 8017f36:	e01b      	b.n	8017f70 <Custom_STM_Event_Handler+0x11c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SENDNUM_NOTIFY_ENABLED_EVT;
 8017f38:	2301      	movs	r3, #1
 8017f3a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8017f3c:	f107 0308 	add.w	r3, r7, #8
 8017f40:	4618      	mov	r0, r3
 8017f42:	f7ff ff3b 	bl	8017dbc <Custom_STM_App_Notification>
                break;
 8017f46:	e013      	b.n	8017f70 <Custom_STM_Event_Handler+0x11c>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	885b      	ldrh	r3, [r3, #2]
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	461a      	mov	r2, r3
 8017f50:	4b15      	ldr	r3, [pc, #84]	@ (8017fa8 <Custom_STM_Event_Handler+0x154>)
 8017f52:	885b      	ldrh	r3, [r3, #2]
 8017f54:	3301      	adds	r3, #1
 8017f56:	429a      	cmp	r2, r3
 8017f58:	d11c      	bne.n	8017f94 <Custom_STM_Event_Handler+0x140>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8017f5a:	2301      	movs	r3, #1
 8017f5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

            memcpy((char *) blereceivebuf,(char *) attribute_modified->Attr_Data,64);
 8017f60:	69fb      	ldr	r3, [r7, #28]
 8017f62:	3308      	adds	r3, #8
 8017f64:	2240      	movs	r2, #64	@ 0x40
 8017f66:	4619      	mov	r1, r3
 8017f68:	4810      	ldr	r0, [pc, #64]	@ (8017fac <Custom_STM_Event_Handler+0x158>)
 8017f6a:	f003 fb96 	bl	801b69a <memcpy>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8017f6e:	e011      	b.n	8017f94 <Custom_STM_Event_Handler+0x140>
 8017f70:	e010      	b.n	8017f94 <Custom_STM_Event_Handler+0x140>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8017f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f74:	3302      	adds	r3, #2
 8017f76:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8017f78:	2303      	movs	r3, #3
 8017f7a:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8017f7c:	6a3b      	ldr	r3, [r7, #32]
 8017f7e:	881b      	ldrh	r3, [r3, #0]
 8017f80:	b29b      	uxth	r3, r3
 8017f82:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8017f84:	f107 0308 	add.w	r3, r7, #8
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7ff ff17 	bl	8017dbc <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8017f8e:	e002      	b.n	8017f96 <Custom_STM_Event_Handler+0x142>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8017f90:	bf00      	nop
 8017f92:	e002      	b.n	8017f9a <Custom_STM_Event_Handler+0x146>
          break;
 8017f94:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017f96:	e000      	b.n	8017f9a <Custom_STM_Event_Handler+0x146>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8017f98:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8017f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	3730      	adds	r7, #48	@ 0x30
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bd80      	pop	{r7, pc}
 8017fa6:	bf00      	nop
 8017fa8:	200017e4 	.word	0x200017e4
 8017fac:	20000ba8 	.word	0x20000ba8

08017fb0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b08c      	sub	sp, #48	@ 0x30
 8017fb4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017fb6:	2392      	movs	r3, #146	@ 0x92
 8017fb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8017fba:	484f      	ldr	r0, [pc, #316]	@ (80180f8 <SVCCTL_InitCustomSvc+0x148>)
 8017fbc:	f7fd ff24 	bl	8015e08 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8017fc0:	2306      	movs	r3, #6
 8017fc2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 8017fc4:	238f      	movs	r3, #143	@ 0x8f
 8017fc6:	713b      	strb	r3, [r7, #4]
 8017fc8:	23e5      	movs	r3, #229	@ 0xe5
 8017fca:	717b      	strb	r3, [r7, #5]
 8017fcc:	23b3      	movs	r3, #179	@ 0xb3
 8017fce:	71bb      	strb	r3, [r7, #6]
 8017fd0:	23d5      	movs	r3, #213	@ 0xd5
 8017fd2:	71fb      	strb	r3, [r7, #7]
 8017fd4:	232e      	movs	r3, #46	@ 0x2e
 8017fd6:	723b      	strb	r3, [r7, #8]
 8017fd8:	237f      	movs	r3, #127	@ 0x7f
 8017fda:	727b      	strb	r3, [r7, #9]
 8017fdc:	234a      	movs	r3, #74	@ 0x4a
 8017fde:	72bb      	strb	r3, [r7, #10]
 8017fe0:	2398      	movs	r3, #152	@ 0x98
 8017fe2:	72fb      	strb	r3, [r7, #11]
 8017fe4:	232a      	movs	r3, #42	@ 0x2a
 8017fe6:	733b      	strb	r3, [r7, #12]
 8017fe8:	2348      	movs	r3, #72	@ 0x48
 8017fea:	737b      	strb	r3, [r7, #13]
 8017fec:	237a      	movs	r3, #122	@ 0x7a
 8017fee:	73bb      	strb	r3, [r7, #14]
 8017ff0:	23cc      	movs	r3, #204	@ 0xcc
 8017ff2:	73fb      	strb	r3, [r7, #15]
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	743b      	strb	r3, [r7, #16]
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	747b      	strb	r3, [r7, #17]
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	74bb      	strb	r3, [r7, #18]
 8018000:	2300      	movs	r3, #0
 8018002:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8018004:	7dbb      	ldrb	r3, [r7, #22]
 8018006:	1d39      	adds	r1, r7, #4
 8018008:	4a3c      	ldr	r2, [pc, #240]	@ (80180fc <SVCCTL_InitCustomSvc+0x14c>)
 801800a:	9200      	str	r2, [sp, #0]
 801800c:	2201      	movs	r2, #1
 801800e:	2002      	movs	r0, #2
 8018010:	f7fd f96e 	bl	80152f0 <aci_gatt_add_service>
 8018014:	4603      	mov	r3, r0
 8018016:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 8018018:	2319      	movs	r3, #25
 801801a:	713b      	strb	r3, [r7, #4]
 801801c:	23ed      	movs	r3, #237	@ 0xed
 801801e:	717b      	strb	r3, [r7, #5]
 8018020:	2382      	movs	r3, #130	@ 0x82
 8018022:	71bb      	strb	r3, [r7, #6]
 8018024:	23ae      	movs	r3, #174	@ 0xae
 8018026:	71fb      	strb	r3, [r7, #7]
 8018028:	23ed      	movs	r3, #237	@ 0xed
 801802a:	723b      	strb	r3, [r7, #8]
 801802c:	2321      	movs	r3, #33	@ 0x21
 801802e:	727b      	strb	r3, [r7, #9]
 8018030:	234c      	movs	r3, #76	@ 0x4c
 8018032:	72bb      	strb	r3, [r7, #10]
 8018034:	239d      	movs	r3, #157	@ 0x9d
 8018036:	72fb      	strb	r3, [r7, #11]
 8018038:	2341      	movs	r3, #65	@ 0x41
 801803a:	733b      	strb	r3, [r7, #12]
 801803c:	2345      	movs	r3, #69	@ 0x45
 801803e:	737b      	strb	r3, [r7, #13]
 8018040:	2322      	movs	r3, #34	@ 0x22
 8018042:	73bb      	strb	r3, [r7, #14]
 8018044:	238e      	movs	r3, #142	@ 0x8e
 8018046:	73fb      	strb	r3, [r7, #15]
 8018048:	2300      	movs	r3, #0
 801804a:	743b      	strb	r3, [r7, #16]
 801804c:	2300      	movs	r3, #0
 801804e:	747b      	strb	r3, [r7, #17]
 8018050:	2300      	movs	r3, #0
 8018052:	74bb      	strb	r3, [r7, #18]
 8018054:	2300      	movs	r3, #0
 8018056:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 8018058:	4b28      	ldr	r3, [pc, #160]	@ (80180fc <SVCCTL_InitCustomSvc+0x14c>)
 801805a:	8818      	ldrh	r0, [r3, #0]
 801805c:	4b28      	ldr	r3, [pc, #160]	@ (8018100 <SVCCTL_InitCustomSvc+0x150>)
 801805e:	881b      	ldrh	r3, [r3, #0]
 8018060:	1d3a      	adds	r2, r7, #4
 8018062:	4928      	ldr	r1, [pc, #160]	@ (8018104 <SVCCTL_InitCustomSvc+0x154>)
 8018064:	9105      	str	r1, [sp, #20]
 8018066:	2100      	movs	r1, #0
 8018068:	9104      	str	r1, [sp, #16]
 801806a:	2110      	movs	r1, #16
 801806c:	9103      	str	r1, [sp, #12]
 801806e:	2101      	movs	r1, #1
 8018070:	9102      	str	r1, [sp, #8]
 8018072:	2100      	movs	r1, #0
 8018074:	9101      	str	r1, [sp, #4]
 8018076:	2108      	movs	r1, #8
 8018078:	9100      	str	r1, [sp, #0]
 801807a:	2102      	movs	r1, #2
 801807c:	f7fd fa0e 	bl	801549c <aci_gatt_add_char>
 8018080:	4603      	mov	r3, r0
 8018082:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  sendnum
   */
  COPY_SENDNUM_UUID(uuid.Char_UUID_128);
 8018084:	2319      	movs	r3, #25
 8018086:	713b      	strb	r3, [r7, #4]
 8018088:	23ed      	movs	r3, #237	@ 0xed
 801808a:	717b      	strb	r3, [r7, #5]
 801808c:	2382      	movs	r3, #130	@ 0x82
 801808e:	71bb      	strb	r3, [r7, #6]
 8018090:	23ae      	movs	r3, #174	@ 0xae
 8018092:	71fb      	strb	r3, [r7, #7]
 8018094:	23ed      	movs	r3, #237	@ 0xed
 8018096:	723b      	strb	r3, [r7, #8]
 8018098:	2321      	movs	r3, #33	@ 0x21
 801809a:	727b      	strb	r3, [r7, #9]
 801809c:	234c      	movs	r3, #76	@ 0x4c
 801809e:	72bb      	strb	r3, [r7, #10]
 80180a0:	239d      	movs	r3, #157	@ 0x9d
 80180a2:	72fb      	strb	r3, [r7, #11]
 80180a4:	2341      	movs	r3, #65	@ 0x41
 80180a6:	733b      	strb	r3, [r7, #12]
 80180a8:	2345      	movs	r3, #69	@ 0x45
 80180aa:	737b      	strb	r3, [r7, #13]
 80180ac:	2322      	movs	r3, #34	@ 0x22
 80180ae:	73bb      	strb	r3, [r7, #14]
 80180b0:	238e      	movs	r3, #142	@ 0x8e
 80180b2:	73fb      	strb	r3, [r7, #15]
 80180b4:	2301      	movs	r3, #1
 80180b6:	743b      	strb	r3, [r7, #16]
 80180b8:	2300      	movs	r3, #0
 80180ba:	747b      	strb	r3, [r7, #17]
 80180bc:	2300      	movs	r3, #0
 80180be:	74bb      	strb	r3, [r7, #18]
 80180c0:	2300      	movs	r3, #0
 80180c2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 80180c4:	4b0d      	ldr	r3, [pc, #52]	@ (80180fc <SVCCTL_InitCustomSvc+0x14c>)
 80180c6:	8818      	ldrh	r0, [r3, #0]
 80180c8:	4b0f      	ldr	r3, [pc, #60]	@ (8018108 <SVCCTL_InitCustomSvc+0x158>)
 80180ca:	881b      	ldrh	r3, [r3, #0]
 80180cc:	1d3a      	adds	r2, r7, #4
 80180ce:	490f      	ldr	r1, [pc, #60]	@ (801810c <SVCCTL_InitCustomSvc+0x15c>)
 80180d0:	9105      	str	r1, [sp, #20]
 80180d2:	2100      	movs	r1, #0
 80180d4:	9104      	str	r1, [sp, #16]
 80180d6:	2110      	movs	r1, #16
 80180d8:	9103      	str	r1, [sp, #12]
 80180da:	2107      	movs	r1, #7
 80180dc:	9102      	str	r1, [sp, #8]
 80180de:	2100      	movs	r1, #0
 80180e0:	9101      	str	r1, [sp, #4]
 80180e2:	2110      	movs	r1, #16
 80180e4:	9100      	str	r1, [sp, #0]
 80180e6:	2102      	movs	r1, #2
 80180e8:	f7fd f9d8 	bl	801549c <aci_gatt_add_char>
 80180ec:	4603      	mov	r3, r0
 80180ee:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80180f0:	bf00      	nop
}
 80180f2:	3718      	adds	r7, #24
 80180f4:	46bd      	mov	sp, r7
 80180f6:	bd80      	pop	{r7, pc}
 80180f8:	08017e55 	.word	0x08017e55
 80180fc:	200017e4 	.word	0x200017e4
 8018100:	200000d2 	.word	0x200000d2
 8018104:	200017e6 	.word	0x200017e6
 8018108:	200000d4 	.word	0x200000d4
 801810c:	200017e8 	.word	0x200017e8

08018110 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b086      	sub	sp, #24
 8018114:	af02      	add	r7, sp, #8
 8018116:	4603      	mov	r3, r0
 8018118:	6039      	str	r1, [r7, #0]
 801811a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801811c:	2392      	movs	r3, #146	@ 0x92
 801811e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8018120:	79fb      	ldrb	r3, [r7, #7]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d002      	beq.n	801812c <Custom_STM_App_Update_Char+0x1c>
 8018126:	2b01      	cmp	r3, #1
 8018128:	d010      	beq.n	801814c <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 801812a:	e01f      	b.n	801816c <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomBpserviceHdle,
 801812c:	4b12      	ldr	r3, [pc, #72]	@ (8018178 <Custom_STM_App_Update_Char+0x68>)
 801812e:	8818      	ldrh	r0, [r3, #0]
 8018130:	4b11      	ldr	r3, [pc, #68]	@ (8018178 <Custom_STM_App_Update_Char+0x68>)
 8018132:	8859      	ldrh	r1, [r3, #2]
 8018134:	4b11      	ldr	r3, [pc, #68]	@ (801817c <Custom_STM_App_Update_Char+0x6c>)
 8018136:	881b      	ldrh	r3, [r3, #0]
 8018138:	b2da      	uxtb	r2, r3
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	9300      	str	r3, [sp, #0]
 801813e:	4613      	mov	r3, r2
 8018140:	2200      	movs	r2, #0
 8018142:	f7fd fab3 	bl	80156ac <aci_gatt_update_char_value>
 8018146:	4603      	mov	r3, r0
 8018148:	73fb      	strb	r3, [r7, #15]
      break;
 801814a:	e00f      	b.n	801816c <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomBpserviceHdle,
 801814c:	4b0a      	ldr	r3, [pc, #40]	@ (8018178 <Custom_STM_App_Update_Char+0x68>)
 801814e:	8818      	ldrh	r0, [r3, #0]
 8018150:	4b09      	ldr	r3, [pc, #36]	@ (8018178 <Custom_STM_App_Update_Char+0x68>)
 8018152:	8899      	ldrh	r1, [r3, #4]
 8018154:	4b0a      	ldr	r3, [pc, #40]	@ (8018180 <Custom_STM_App_Update_Char+0x70>)
 8018156:	881b      	ldrh	r3, [r3, #0]
 8018158:	b2da      	uxtb	r2, r3
 801815a:	683b      	ldr	r3, [r7, #0]
 801815c:	9300      	str	r3, [sp, #0]
 801815e:	4613      	mov	r3, r2
 8018160:	2200      	movs	r2, #0
 8018162:	f7fd faa3 	bl	80156ac <aci_gatt_update_char_value>
 8018166:	4603      	mov	r3, r0
 8018168:	73fb      	strb	r3, [r7, #15]
      break;
 801816a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 801816c:	7bfb      	ldrb	r3, [r7, #15]
}
 801816e:	4618      	mov	r0, r3
 8018170:	3710      	adds	r7, #16
 8018172:	46bd      	mov	sp, r7
 8018174:	bd80      	pop	{r7, pc}
 8018176:	bf00      	nop
 8018178:	200017e4 	.word	0x200017e4
 801817c:	200000d2 	.word	0x200000d2
 8018180:	200000d4 	.word	0x200000d4

08018184 <LL_PWR_EnableBootC2>:
{
 8018184:	b480      	push	{r7}
 8018186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018188:	4b05      	ldr	r3, [pc, #20]	@ (80181a0 <LL_PWR_EnableBootC2+0x1c>)
 801818a:	68db      	ldr	r3, [r3, #12]
 801818c:	4a04      	ldr	r2, [pc, #16]	@ (80181a0 <LL_PWR_EnableBootC2+0x1c>)
 801818e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8018192:	60d3      	str	r3, [r2, #12]
}
 8018194:	bf00      	nop
 8018196:	46bd      	mov	sp, r7
 8018198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819c:	4770      	bx	lr
 801819e:	bf00      	nop
 80181a0:	58000400 	.word	0x58000400

080181a4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80181a4:	b480      	push	{r7}
 80181a6:	b083      	sub	sp, #12
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80181ac:	4b06      	ldr	r3, [pc, #24]	@ (80181c8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80181ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80181b2:	4905      	ldr	r1, [pc, #20]	@ (80181c8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	4313      	orrs	r3, r2
 80181b8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80181bc:	bf00      	nop
 80181be:	370c      	adds	r7, #12
 80181c0:	46bd      	mov	sp, r7
 80181c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c6:	4770      	bx	lr
 80181c8:	58000800 	.word	0x58000800

080181cc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80181cc:	b480      	push	{r7}
 80181ce:	b083      	sub	sp, #12
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80181d4:	4b05      	ldr	r3, [pc, #20]	@ (80181ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80181d6:	6a1a      	ldr	r2, [r3, #32]
 80181d8:	4904      	ldr	r1, [pc, #16]	@ (80181ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	4313      	orrs	r3, r2
 80181de:	620b      	str	r3, [r1, #32]
}
 80181e0:	bf00      	nop
 80181e2:	370c      	adds	r7, #12
 80181e4:	46bd      	mov	sp, r7
 80181e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ea:	4770      	bx	lr
 80181ec:	58000800 	.word	0x58000800

080181f0 <LL_AHB3_GRP1_EnableClock>:
{
 80181f0:	b480      	push	{r7}
 80181f2:	b085      	sub	sp, #20
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80181f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80181fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80181fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	4313      	orrs	r3, r2
 8018206:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8018208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801820c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	4013      	ands	r3, r2
 8018212:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018214:	68fb      	ldr	r3, [r7, #12]
}
 8018216:	bf00      	nop
 8018218:	3714      	adds	r7, #20
 801821a:	46bd      	mov	sp, r7
 801821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018220:	4770      	bx	lr

08018222 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8018222:	b480      	push	{r7}
 8018224:	b085      	sub	sp, #20
 8018226:	af00      	add	r7, sp, #0
 8018228:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801822a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801822e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8018232:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	4313      	orrs	r3, r2
 801823a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801823e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018242:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	4013      	ands	r3, r2
 801824a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801824c:	68fb      	ldr	r3, [r7, #12]
}
 801824e:	bf00      	nop
 8018250:	3714      	adds	r7, #20
 8018252:	46bd      	mov	sp, r7
 8018254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018258:	4770      	bx	lr

0801825a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801825a:	b480      	push	{r7}
 801825c:	b083      	sub	sp, #12
 801825e:	af00      	add	r7, sp, #0
 8018260:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	601a      	str	r2, [r3, #0]
}
 801826e:	bf00      	nop
 8018270:	370c      	adds	r7, #12
 8018272:	46bd      	mov	sp, r7
 8018274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018278:	4770      	bx	lr

0801827a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801827a:	b480      	push	{r7}
 801827c:	b083      	sub	sp, #12
 801827e:	af00      	add	r7, sp, #0
 8018280:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	f043 0201 	orr.w	r2, r3, #1
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	601a      	str	r2, [r3, #0]
}
 801828e:	bf00      	nop
 8018290:	370c      	adds	r7, #12
 8018292:	46bd      	mov	sp, r7
 8018294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018298:	4770      	bx	lr

0801829a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801829a:	b480      	push	{r7}
 801829c:	b083      	sub	sp, #12
 801829e:	af00      	add	r7, sp, #0
 80182a0:	6078      	str	r0, [r7, #4]
 80182a2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	685a      	ldr	r2, [r3, #4]
 80182a8:	683b      	ldr	r3, [r7, #0]
 80182aa:	041b      	lsls	r3, r3, #16
 80182ac:	43db      	mvns	r3, r3
 80182ae:	401a      	ands	r2, r3
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	605a      	str	r2, [r3, #4]
}
 80182b4:	bf00      	nop
 80182b6:	370c      	adds	r7, #12
 80182b8:	46bd      	mov	sp, r7
 80182ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182be:	4770      	bx	lr

080182c0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80182c0:	b480      	push	{r7}
 80182c2:	b083      	sub	sp, #12
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
 80182c8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	685a      	ldr	r2, [r3, #4]
 80182ce:	683b      	ldr	r3, [r7, #0]
 80182d0:	041b      	lsls	r3, r3, #16
 80182d2:	431a      	orrs	r2, r3
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	605a      	str	r2, [r3, #4]
}
 80182d8:	bf00      	nop
 80182da:	370c      	adds	r7, #12
 80182dc:	46bd      	mov	sp, r7
 80182de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e2:	4770      	bx	lr

080182e4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80182e4:	b480      	push	{r7}
 80182e6:	b083      	sub	sp, #12
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
 80182ec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	685a      	ldr	r2, [r3, #4]
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	43db      	mvns	r3, r3
 80182f6:	401a      	ands	r2, r3
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	605a      	str	r2, [r3, #4]
}
 80182fc:	bf00      	nop
 80182fe:	370c      	adds	r7, #12
 8018300:	46bd      	mov	sp, r7
 8018302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018306:	4770      	bx	lr

08018308 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018308:	b480      	push	{r7}
 801830a:	b083      	sub	sp, #12
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
 8018310:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	683a      	ldr	r2, [r7, #0]
 8018316:	609a      	str	r2, [r3, #8]
}
 8018318:	bf00      	nop
 801831a:	370c      	adds	r7, #12
 801831c:	46bd      	mov	sp, r7
 801831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018322:	4770      	bx	lr

08018324 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018324:	b480      	push	{r7}
 8018326:	b083      	sub	sp, #12
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
 801832c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801832e:	683b      	ldr	r3, [r7, #0]
 8018330:	041a      	lsls	r2, r3, #16
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	609a      	str	r2, [r3, #8]
}
 8018336:	bf00      	nop
 8018338:	370c      	adds	r7, #12
 801833a:	46bd      	mov	sp, r7
 801833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018340:	4770      	bx	lr

08018342 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018342:	b480      	push	{r7}
 8018344:	b083      	sub	sp, #12
 8018346:	af00      	add	r7, sp, #0
 8018348:	6078      	str	r0, [r7, #4]
 801834a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	68da      	ldr	r2, [r3, #12]
 8018350:	683b      	ldr	r3, [r7, #0]
 8018352:	4013      	ands	r3, r2
 8018354:	683a      	ldr	r2, [r7, #0]
 8018356:	429a      	cmp	r2, r3
 8018358:	d101      	bne.n	801835e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801835a:	2301      	movs	r3, #1
 801835c:	e000      	b.n	8018360 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801835e:	2300      	movs	r3, #0
}
 8018360:	4618      	mov	r0, r3
 8018362:	370c      	adds	r7, #12
 8018364:	46bd      	mov	sp, r7
 8018366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801836a:	4770      	bx	lr

0801836c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801836c:	b480      	push	{r7}
 801836e:	b083      	sub	sp, #12
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	69da      	ldr	r2, [r3, #28]
 801837a:	683b      	ldr	r3, [r7, #0]
 801837c:	4013      	ands	r3, r2
 801837e:	683a      	ldr	r2, [r7, #0]
 8018380:	429a      	cmp	r2, r3
 8018382:	d101      	bne.n	8018388 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8018384:	2301      	movs	r3, #1
 8018386:	e000      	b.n	801838a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8018388:	2300      	movs	r3, #0
}
 801838a:	4618      	mov	r0, r3
 801838c:	370c      	adds	r7, #12
 801838e:	46bd      	mov	sp, r7
 8018390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018394:	4770      	bx	lr
	...

08018398 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8018398:	b580      	push	{r7, lr}
 801839a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 801839c:	2102      	movs	r1, #2
 801839e:	4818      	ldr	r0, [pc, #96]	@ (8018400 <HW_IPCC_Rx_Handler+0x68>)
 80183a0:	f7ff ffe4 	bl	801836c <LL_C2_IPCC_IsActiveFlag_CHx>
 80183a4:	4603      	mov	r3, r0
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d008      	beq.n	80183bc <HW_IPCC_Rx_Handler+0x24>
 80183aa:	4b15      	ldr	r3, [pc, #84]	@ (8018400 <HW_IPCC_Rx_Handler+0x68>)
 80183ac:	685b      	ldr	r3, [r3, #4]
 80183ae:	f003 0302 	and.w	r3, r3, #2
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d102      	bne.n	80183bc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80183b6:	f000 f8d5 	bl	8018564 <HW_IPCC_SYS_EvtHandler>
 80183ba:	e01e      	b.n	80183fa <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80183bc:	2101      	movs	r1, #1
 80183be:	4810      	ldr	r0, [pc, #64]	@ (8018400 <HW_IPCC_Rx_Handler+0x68>)
 80183c0:	f7ff ffd4 	bl	801836c <LL_C2_IPCC_IsActiveFlag_CHx>
 80183c4:	4603      	mov	r3, r0
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d008      	beq.n	80183dc <HW_IPCC_Rx_Handler+0x44>
 80183ca:	4b0d      	ldr	r3, [pc, #52]	@ (8018400 <HW_IPCC_Rx_Handler+0x68>)
 80183cc:	685b      	ldr	r3, [r3, #4]
 80183ce:	f003 0301 	and.w	r3, r3, #1
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d102      	bne.n	80183dc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80183d6:	f000 f889 	bl	80184ec <HW_IPCC_BLE_EvtHandler>
 80183da:	e00e      	b.n	80183fa <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80183dc:	2108      	movs	r1, #8
 80183de:	4808      	ldr	r0, [pc, #32]	@ (8018400 <HW_IPCC_Rx_Handler+0x68>)
 80183e0:	f7ff ffc4 	bl	801836c <LL_C2_IPCC_IsActiveFlag_CHx>
 80183e4:	4603      	mov	r3, r0
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d008      	beq.n	80183fc <HW_IPCC_Rx_Handler+0x64>
 80183ea:	4b05      	ldr	r3, [pc, #20]	@ (8018400 <HW_IPCC_Rx_Handler+0x68>)
 80183ec:	685b      	ldr	r3, [r3, #4]
 80183ee:	f003 0308 	and.w	r3, r3, #8
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d102      	bne.n	80183fc <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80183f6:	f000 f901 	bl	80185fc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80183fa:	bf00      	nop
 80183fc:	bf00      	nop
}
 80183fe:	bd80      	pop	{r7, pc}
 8018400:	58000c00 	.word	0x58000c00

08018404 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8018404:	b580      	push	{r7, lr}
 8018406:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8018408:	2102      	movs	r1, #2
 801840a:	4818      	ldr	r0, [pc, #96]	@ (801846c <HW_IPCC_Tx_Handler+0x68>)
 801840c:	f7ff ff99 	bl	8018342 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018410:	4603      	mov	r3, r0
 8018412:	2b00      	cmp	r3, #0
 8018414:	d108      	bne.n	8018428 <HW_IPCC_Tx_Handler+0x24>
 8018416:	4b15      	ldr	r3, [pc, #84]	@ (801846c <HW_IPCC_Tx_Handler+0x68>)
 8018418:	685b      	ldr	r3, [r3, #4]
 801841a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801841e:	2b00      	cmp	r3, #0
 8018420:	d102      	bne.n	8018428 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8018422:	f000 f893 	bl	801854c <HW_IPCC_SYS_CmdEvtHandler>
 8018426:	e01e      	b.n	8018466 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8018428:	2108      	movs	r1, #8
 801842a:	4810      	ldr	r0, [pc, #64]	@ (801846c <HW_IPCC_Tx_Handler+0x68>)
 801842c:	f7ff ff89 	bl	8018342 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018430:	4603      	mov	r3, r0
 8018432:	2b00      	cmp	r3, #0
 8018434:	d108      	bne.n	8018448 <HW_IPCC_Tx_Handler+0x44>
 8018436:	4b0d      	ldr	r3, [pc, #52]	@ (801846c <HW_IPCC_Tx_Handler+0x68>)
 8018438:	685b      	ldr	r3, [r3, #4]
 801843a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801843e:	2b00      	cmp	r3, #0
 8018440:	d102      	bne.n	8018448 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8018442:	f000 f8bd 	bl	80185c0 <HW_IPCC_MM_FreeBufHandler>
 8018446:	e00e      	b.n	8018466 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8018448:	2120      	movs	r1, #32
 801844a:	4808      	ldr	r0, [pc, #32]	@ (801846c <HW_IPCC_Tx_Handler+0x68>)
 801844c:	f7ff ff79 	bl	8018342 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018450:	4603      	mov	r3, r0
 8018452:	2b00      	cmp	r3, #0
 8018454:	d108      	bne.n	8018468 <HW_IPCC_Tx_Handler+0x64>
 8018456:	4b05      	ldr	r3, [pc, #20]	@ (801846c <HW_IPCC_Tx_Handler+0x68>)
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801845e:	2b00      	cmp	r3, #0
 8018460:	d102      	bne.n	8018468 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8018462:	f000 f84f 	bl	8018504 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8018466:	bf00      	nop
 8018468:	bf00      	nop
}
 801846a:	bd80      	pop	{r7, pc}
 801846c:	58000c00 	.word	0x58000c00

08018470 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8018470:	b580      	push	{r7, lr}
 8018472:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8018474:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018478:	f7ff fed3 	bl	8018222 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 801847c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018480:	f7ff fea4 	bl	80181cc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8018484:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018488:	f7ff fe8c 	bl	80181a4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801848c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801848e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8018490:	f7ff fe78 	bl	8018184 <LL_PWR_EnableBootC2>

  return;
 8018494:	bf00      	nop
}
 8018496:	bd80      	pop	{r7, pc}

08018498 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8018498:	b580      	push	{r7, lr}
 801849a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801849c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80184a0:	f7ff fea6 	bl	80181f0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80184a4:	4806      	ldr	r0, [pc, #24]	@ (80184c0 <HW_IPCC_Init+0x28>)
 80184a6:	f7ff fee8 	bl	801827a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80184aa:	4805      	ldr	r0, [pc, #20]	@ (80184c0 <HW_IPCC_Init+0x28>)
 80184ac:	f7ff fed5 	bl	801825a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80184b0:	202c      	movs	r0, #44	@ 0x2c
 80184b2:	f7ef ffb0 	bl	8008416 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80184b6:	202d      	movs	r0, #45	@ 0x2d
 80184b8:	f7ef ffad 	bl	8008416 <HAL_NVIC_EnableIRQ>

  return;
 80184bc:	bf00      	nop
}
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	58000c00 	.word	0x58000c00

080184c4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80184c8:	2101      	movs	r1, #1
 80184ca:	4802      	ldr	r0, [pc, #8]	@ (80184d4 <HW_IPCC_BLE_Init+0x10>)
 80184cc:	f7ff ff0a 	bl	80182e4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80184d0:	bf00      	nop
}
 80184d2:	bd80      	pop	{r7, pc}
 80184d4:	58000c00 	.word	0x58000c00

080184d8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80184dc:	2101      	movs	r1, #1
 80184de:	4802      	ldr	r0, [pc, #8]	@ (80184e8 <HW_IPCC_BLE_SendCmd+0x10>)
 80184e0:	f7ff ff20 	bl	8018324 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80184e4:	bf00      	nop
}
 80184e6:	bd80      	pop	{r7, pc}
 80184e8:	58000c00 	.word	0x58000c00

080184ec <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80184f0:	f7fe f94e 	bl	8016790 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80184f4:	2101      	movs	r1, #1
 80184f6:	4802      	ldr	r0, [pc, #8]	@ (8018500 <HW_IPCC_BLE_EvtHandler+0x14>)
 80184f8:	f7ff ff06 	bl	8018308 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80184fc:	bf00      	nop
}
 80184fe:	bd80      	pop	{r7, pc}
 8018500:	58000c00 	.word	0x58000c00

08018504 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8018504:	b580      	push	{r7, lr}
 8018506:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8018508:	2120      	movs	r1, #32
 801850a:	4803      	ldr	r0, [pc, #12]	@ (8018518 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801850c:	f7ff fed8 	bl	80182c0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8018510:	f7fe f96e 	bl	80167f0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8018514:	bf00      	nop
}
 8018516:	bd80      	pop	{r7, pc}
 8018518:	58000c00 	.word	0x58000c00

0801851c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801851c:	b580      	push	{r7, lr}
 801851e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018520:	2102      	movs	r1, #2
 8018522:	4802      	ldr	r0, [pc, #8]	@ (801852c <HW_IPCC_SYS_Init+0x10>)
 8018524:	f7ff fede 	bl	80182e4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018528:	bf00      	nop
}
 801852a:	bd80      	pop	{r7, pc}
 801852c:	58000c00 	.word	0x58000c00

08018530 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8018530:	b580      	push	{r7, lr}
 8018532:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018534:	2102      	movs	r1, #2
 8018536:	4804      	ldr	r0, [pc, #16]	@ (8018548 <HW_IPCC_SYS_SendCmd+0x18>)
 8018538:	f7ff fef4 	bl	8018324 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801853c:	2102      	movs	r1, #2
 801853e:	4802      	ldr	r0, [pc, #8]	@ (8018548 <HW_IPCC_SYS_SendCmd+0x18>)
 8018540:	f7ff feab 	bl	801829a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8018544:	bf00      	nop
}
 8018546:	bd80      	pop	{r7, pc}
 8018548:	58000c00 	.word	0x58000c00

0801854c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801854c:	b580      	push	{r7, lr}
 801854e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018550:	2102      	movs	r1, #2
 8018552:	4803      	ldr	r0, [pc, #12]	@ (8018560 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8018554:	f7ff feb4 	bl	80182c0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8018558:	f7fe f99a 	bl	8016890 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801855c:	bf00      	nop
}
 801855e:	bd80      	pop	{r7, pc}
 8018560:	58000c00 	.word	0x58000c00

08018564 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8018564:	b580      	push	{r7, lr}
 8018566:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8018568:	f7fe f9a8 	bl	80168bc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801856c:	2102      	movs	r1, #2
 801856e:	4802      	ldr	r0, [pc, #8]	@ (8018578 <HW_IPCC_SYS_EvtHandler+0x14>)
 8018570:	f7ff feca 	bl	8018308 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018574:	bf00      	nop
}
 8018576:	bd80      	pop	{r7, pc}
 8018578:	58000c00 	.word	0x58000c00

0801857c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b082      	sub	sp, #8
 8018580:	af00      	add	r7, sp, #0
 8018582:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8018584:	2108      	movs	r1, #8
 8018586:	480c      	ldr	r0, [pc, #48]	@ (80185b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018588:	f7ff fedb 	bl	8018342 <LL_C1_IPCC_IsActiveFlag_CHx>
 801858c:	4603      	mov	r3, r0
 801858e:	2b00      	cmp	r3, #0
 8018590:	d007      	beq.n	80185a2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8018592:	4a0a      	ldr	r2, [pc, #40]	@ (80185bc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018598:	2108      	movs	r1, #8
 801859a:	4807      	ldr	r0, [pc, #28]	@ (80185b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801859c:	f7ff fe7d 	bl	801829a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80185a0:	e006      	b.n	80185b0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80185a6:	2108      	movs	r1, #8
 80185a8:	4803      	ldr	r0, [pc, #12]	@ (80185b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80185aa:	f7ff febb 	bl	8018324 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80185ae:	bf00      	nop
}
 80185b0:	3708      	adds	r7, #8
 80185b2:	46bd      	mov	sp, r7
 80185b4:	bd80      	pop	{r7, pc}
 80185b6:	bf00      	nop
 80185b8:	58000c00 	.word	0x58000c00
 80185bc:	200017ec 	.word	0x200017ec

080185c0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80185c4:	2108      	movs	r1, #8
 80185c6:	4806      	ldr	r0, [pc, #24]	@ (80185e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80185c8:	f7ff fe7a 	bl	80182c0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80185cc:	4b05      	ldr	r3, [pc, #20]	@ (80185e4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80185d2:	2108      	movs	r1, #8
 80185d4:	4802      	ldr	r0, [pc, #8]	@ (80185e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80185d6:	f7ff fea5 	bl	8018324 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80185da:	bf00      	nop
}
 80185dc:	bd80      	pop	{r7, pc}
 80185de:	bf00      	nop
 80185e0:	58000c00 	.word	0x58000c00
 80185e4:	200017ec 	.word	0x200017ec

080185e8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80185ec:	2108      	movs	r1, #8
 80185ee:	4802      	ldr	r0, [pc, #8]	@ (80185f8 <HW_IPCC_TRACES_Init+0x10>)
 80185f0:	f7ff fe78 	bl	80182e4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80185f4:	bf00      	nop
}
 80185f6:	bd80      	pop	{r7, pc}
 80185f8:	58000c00 	.word	0x58000c00

080185fc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8018600:	f7fe fa04 	bl	8016a0c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8018604:	2108      	movs	r1, #8
 8018606:	4802      	ldr	r0, [pc, #8]	@ (8018610 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8018608:	f7ff fe7e 	bl	8018308 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801860c:	bf00      	nop
}
 801860e:	bd80      	pop	{r7, pc}
 8018610:	58000c00 	.word	0x58000c00

08018614 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8018614:	b580      	push	{r7, lr}
 8018616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8018618:	2200      	movs	r2, #0
 801861a:	4912      	ldr	r1, [pc, #72]	@ (8018664 <MX_USB_Device_Init+0x50>)
 801861c:	4812      	ldr	r0, [pc, #72]	@ (8018668 <MX_USB_Device_Init+0x54>)
 801861e:	f7fa ff61 	bl	80134e4 <USBD_Init>
 8018622:	4603      	mov	r3, r0
 8018624:	2b00      	cmp	r3, #0
 8018626:	d001      	beq.n	801862c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8018628:	f7ea fb58 	bl	8002cdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801862c:	490f      	ldr	r1, [pc, #60]	@ (801866c <MX_USB_Device_Init+0x58>)
 801862e:	480e      	ldr	r0, [pc, #56]	@ (8018668 <MX_USB_Device_Init+0x54>)
 8018630:	f7fa ff88 	bl	8013544 <USBD_RegisterClass>
 8018634:	4603      	mov	r3, r0
 8018636:	2b00      	cmp	r3, #0
 8018638:	d001      	beq.n	801863e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801863a:	f7ea fb4f 	bl	8002cdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801863e:	490c      	ldr	r1, [pc, #48]	@ (8018670 <MX_USB_Device_Init+0x5c>)
 8018640:	4809      	ldr	r0, [pc, #36]	@ (8018668 <MX_USB_Device_Init+0x54>)
 8018642:	f7fa fe7f 	bl	8013344 <USBD_CDC_RegisterInterface>
 8018646:	4603      	mov	r3, r0
 8018648:	2b00      	cmp	r3, #0
 801864a:	d001      	beq.n	8018650 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801864c:	f7ea fb46 	bl	8002cdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8018650:	4805      	ldr	r0, [pc, #20]	@ (8018668 <MX_USB_Device_Init+0x54>)
 8018652:	f7fa ffad 	bl	80135b0 <USBD_Start>
 8018656:	4603      	mov	r3, r0
 8018658:	2b00      	cmp	r3, #0
 801865a:	d001      	beq.n	8018660 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801865c:	f7ea fb3e 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8018660:	bf00      	nop
 8018662:	bd80      	pop	{r7, pc}
 8018664:	200000ec 	.word	0x200000ec
 8018668:	200017f0 	.word	0x200017f0
 801866c:	20000044 	.word	0x20000044
 8018670:	200000d8 	.word	0x200000d8

08018674 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018678:	2200      	movs	r2, #0
 801867a:	4905      	ldr	r1, [pc, #20]	@ (8018690 <CDC_Init_FS+0x1c>)
 801867c:	4805      	ldr	r0, [pc, #20]	@ (8018694 <CDC_Init_FS+0x20>)
 801867e:	f7fa fe7b 	bl	8013378 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018682:	4905      	ldr	r1, [pc, #20]	@ (8018698 <CDC_Init_FS+0x24>)
 8018684:	4803      	ldr	r0, [pc, #12]	@ (8018694 <CDC_Init_FS+0x20>)
 8018686:	f7fa fe99 	bl	80133bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801868a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801868c:	4618      	mov	r0, r3
 801868e:	bd80      	pop	{r7, pc}
 8018690:	200022cc 	.word	0x200022cc
 8018694:	200017f0 	.word	0x200017f0
 8018698:	20001acc 	.word	0x20001acc

0801869c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801869c:	b480      	push	{r7}
 801869e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80186a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80186a2:	4618      	mov	r0, r3
 80186a4:	46bd      	mov	sp, r7
 80186a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186aa:	4770      	bx	lr

080186ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80186ac:	b480      	push	{r7}
 80186ae:	b083      	sub	sp, #12
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	4603      	mov	r3, r0
 80186b4:	6039      	str	r1, [r7, #0]
 80186b6:	71fb      	strb	r3, [r7, #7]
 80186b8:	4613      	mov	r3, r2
 80186ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80186bc:	79fb      	ldrb	r3, [r7, #7]
 80186be:	2b23      	cmp	r3, #35	@ 0x23
 80186c0:	d84a      	bhi.n	8018758 <CDC_Control_FS+0xac>
 80186c2:	a201      	add	r2, pc, #4	@ (adr r2, 80186c8 <CDC_Control_FS+0x1c>)
 80186c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186c8:	08018759 	.word	0x08018759
 80186cc:	08018759 	.word	0x08018759
 80186d0:	08018759 	.word	0x08018759
 80186d4:	08018759 	.word	0x08018759
 80186d8:	08018759 	.word	0x08018759
 80186dc:	08018759 	.word	0x08018759
 80186e0:	08018759 	.word	0x08018759
 80186e4:	08018759 	.word	0x08018759
 80186e8:	08018759 	.word	0x08018759
 80186ec:	08018759 	.word	0x08018759
 80186f0:	08018759 	.word	0x08018759
 80186f4:	08018759 	.word	0x08018759
 80186f8:	08018759 	.word	0x08018759
 80186fc:	08018759 	.word	0x08018759
 8018700:	08018759 	.word	0x08018759
 8018704:	08018759 	.word	0x08018759
 8018708:	08018759 	.word	0x08018759
 801870c:	08018759 	.word	0x08018759
 8018710:	08018759 	.word	0x08018759
 8018714:	08018759 	.word	0x08018759
 8018718:	08018759 	.word	0x08018759
 801871c:	08018759 	.word	0x08018759
 8018720:	08018759 	.word	0x08018759
 8018724:	08018759 	.word	0x08018759
 8018728:	08018759 	.word	0x08018759
 801872c:	08018759 	.word	0x08018759
 8018730:	08018759 	.word	0x08018759
 8018734:	08018759 	.word	0x08018759
 8018738:	08018759 	.word	0x08018759
 801873c:	08018759 	.word	0x08018759
 8018740:	08018759 	.word	0x08018759
 8018744:	08018759 	.word	0x08018759
 8018748:	08018759 	.word	0x08018759
 801874c:	08018759 	.word	0x08018759
 8018750:	08018759 	.word	0x08018759
 8018754:	08018759 	.word	0x08018759
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018758:	bf00      	nop
  }

  return (USBD_OK);
 801875a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801875c:	4618      	mov	r0, r3
 801875e:	370c      	adds	r7, #12
 8018760:	46bd      	mov	sp, r7
 8018762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018766:	4770      	bx	lr

08018768 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b084      	sub	sp, #16
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
 8018770:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018772:	6879      	ldr	r1, [r7, #4]
 8018774:	480f      	ldr	r0, [pc, #60]	@ (80187b4 <CDC_Receive_FS+0x4c>)
 8018776:	f7fa fe21 	bl	80133bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801877a:	480e      	ldr	r0, [pc, #56]	@ (80187b4 <CDC_Receive_FS+0x4c>)
 801877c:	f7fa fe7c 	bl	8013478 <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8018780:	2240      	movs	r2, #64	@ 0x40
 8018782:	2100      	movs	r1, #0
 8018784:	480c      	ldr	r0, [pc, #48]	@ (80187b8 <CDC_Receive_FS+0x50>)
 8018786:	f002 fe6c 	bl	801b462 <memset>
  uint8_t len = (uint8_t)*Len;
 801878a:	683b      	ldr	r3, [r7, #0]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8018790:	7bfb      	ldrb	r3, [r7, #15]
 8018792:	461a      	mov	r2, r3
 8018794:	6879      	ldr	r1, [r7, #4]
 8018796:	4808      	ldr	r0, [pc, #32]	@ (80187b8 <CDC_Receive_FS+0x50>)
 8018798:	f002 ff7f 	bl	801b69a <memcpy>
  memset(Buf, '\0', len);
 801879c:	7bfb      	ldrb	r3, [r7, #15]
 801879e:	461a      	mov	r2, r3
 80187a0:	2100      	movs	r1, #0
 80187a2:	6878      	ldr	r0, [r7, #4]
 80187a4:	f002 fe5d 	bl	801b462 <memset>
  return (USBD_OK);
 80187a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80187aa:	4618      	mov	r0, r3
 80187ac:	3710      	adds	r7, #16
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}
 80187b2:	bf00      	nop
 80187b4:	200017f0 	.word	0x200017f0
 80187b8:	20000af4 	.word	0x20000af4

080187bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b084      	sub	sp, #16
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	6078      	str	r0, [r7, #4]
 80187c4:	460b      	mov	r3, r1
 80187c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80187c8:	2300      	movs	r3, #0
 80187ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80187cc:	4b0d      	ldr	r3, [pc, #52]	@ (8018804 <CDC_Transmit_FS+0x48>)
 80187ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80187d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80187d4:	68bb      	ldr	r3, [r7, #8]
 80187d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d001      	beq.n	80187e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80187de:	2301      	movs	r3, #1
 80187e0:	e00b      	b.n	80187fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80187e2:	887b      	ldrh	r3, [r7, #2]
 80187e4:	461a      	mov	r2, r3
 80187e6:	6879      	ldr	r1, [r7, #4]
 80187e8:	4806      	ldr	r0, [pc, #24]	@ (8018804 <CDC_Transmit_FS+0x48>)
 80187ea:	f7fa fdc5 	bl	8013378 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80187ee:	4805      	ldr	r0, [pc, #20]	@ (8018804 <CDC_Transmit_FS+0x48>)
 80187f0:	f7fa fe02 	bl	80133f8 <USBD_CDC_TransmitPacket>
 80187f4:	4603      	mov	r3, r0
 80187f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80187f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3710      	adds	r7, #16
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
 8018802:	bf00      	nop
 8018804:	200017f0 	.word	0x200017f0

08018808 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018808:	b480      	push	{r7}
 801880a:	b087      	sub	sp, #28
 801880c:	af00      	add	r7, sp, #0
 801880e:	60f8      	str	r0, [r7, #12]
 8018810:	60b9      	str	r1, [r7, #8]
 8018812:	4613      	mov	r3, r2
 8018814:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018816:	2300      	movs	r3, #0
 8018818:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801881a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801881e:	4618      	mov	r0, r3
 8018820:	371c      	adds	r7, #28
 8018822:	46bd      	mov	sp, r7
 8018824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018828:	4770      	bx	lr
	...

0801882c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801882c:	b480      	push	{r7}
 801882e:	b083      	sub	sp, #12
 8018830:	af00      	add	r7, sp, #0
 8018832:	4603      	mov	r3, r0
 8018834:	6039      	str	r1, [r7, #0]
 8018836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	2212      	movs	r2, #18
 801883c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801883e:	4b03      	ldr	r3, [pc, #12]	@ (801884c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8018840:	4618      	mov	r0, r3
 8018842:	370c      	adds	r7, #12
 8018844:	46bd      	mov	sp, r7
 8018846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884a:	4770      	bx	lr
 801884c:	2000010c 	.word	0x2000010c

08018850 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018850:	b480      	push	{r7}
 8018852:	b083      	sub	sp, #12
 8018854:	af00      	add	r7, sp, #0
 8018856:	4603      	mov	r3, r0
 8018858:	6039      	str	r1, [r7, #0]
 801885a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801885c:	683b      	ldr	r3, [r7, #0]
 801885e:	2204      	movs	r2, #4
 8018860:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018862:	4b03      	ldr	r3, [pc, #12]	@ (8018870 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018864:	4618      	mov	r0, r3
 8018866:	370c      	adds	r7, #12
 8018868:	46bd      	mov	sp, r7
 801886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886e:	4770      	bx	lr
 8018870:	20000120 	.word	0x20000120

08018874 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b082      	sub	sp, #8
 8018878:	af00      	add	r7, sp, #0
 801887a:	4603      	mov	r3, r0
 801887c:	6039      	str	r1, [r7, #0]
 801887e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018880:	79fb      	ldrb	r3, [r7, #7]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d105      	bne.n	8018892 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018886:	683a      	ldr	r2, [r7, #0]
 8018888:	4907      	ldr	r1, [pc, #28]	@ (80188a8 <USBD_CDC_ProductStrDescriptor+0x34>)
 801888a:	4808      	ldr	r0, [pc, #32]	@ (80188ac <USBD_CDC_ProductStrDescriptor+0x38>)
 801888c:	f7fb ffd8 	bl	8014840 <USBD_GetString>
 8018890:	e004      	b.n	801889c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018892:	683a      	ldr	r2, [r7, #0]
 8018894:	4904      	ldr	r1, [pc, #16]	@ (80188a8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018896:	4805      	ldr	r0, [pc, #20]	@ (80188ac <USBD_CDC_ProductStrDescriptor+0x38>)
 8018898:	f7fb ffd2 	bl	8014840 <USBD_GetString>
  }
  return USBD_StrDesc;
 801889c:	4b02      	ldr	r3, [pc, #8]	@ (80188a8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3708      	adds	r7, #8
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	20002acc 	.word	0x20002acc
 80188ac:	0801fc8c 	.word	0x0801fc8c

080188b0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b082      	sub	sp, #8
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	4603      	mov	r3, r0
 80188b8:	6039      	str	r1, [r7, #0]
 80188ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80188bc:	683a      	ldr	r2, [r7, #0]
 80188be:	4904      	ldr	r1, [pc, #16]	@ (80188d0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80188c0:	4804      	ldr	r0, [pc, #16]	@ (80188d4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80188c2:	f7fb ffbd 	bl	8014840 <USBD_GetString>
  return USBD_StrDesc;
 80188c6:	4b02      	ldr	r3, [pc, #8]	@ (80188d0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80188c8:	4618      	mov	r0, r3
 80188ca:	3708      	adds	r7, #8
 80188cc:	46bd      	mov	sp, r7
 80188ce:	bd80      	pop	{r7, pc}
 80188d0:	20002acc 	.word	0x20002acc
 80188d4:	0801fca4 	.word	0x0801fca4

080188d8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b082      	sub	sp, #8
 80188dc:	af00      	add	r7, sp, #0
 80188de:	4603      	mov	r3, r0
 80188e0:	6039      	str	r1, [r7, #0]
 80188e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80188e4:	683b      	ldr	r3, [r7, #0]
 80188e6:	221a      	movs	r2, #26
 80188e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80188ea:	f000 f843 	bl	8018974 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80188ee:	4b02      	ldr	r3, [pc, #8]	@ (80188f8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	3708      	adds	r7, #8
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}
 80188f8:	20000124 	.word	0x20000124

080188fc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b082      	sub	sp, #8
 8018900:	af00      	add	r7, sp, #0
 8018902:	4603      	mov	r3, r0
 8018904:	6039      	str	r1, [r7, #0]
 8018906:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018908:	79fb      	ldrb	r3, [r7, #7]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d105      	bne.n	801891a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801890e:	683a      	ldr	r2, [r7, #0]
 8018910:	4907      	ldr	r1, [pc, #28]	@ (8018930 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018912:	4808      	ldr	r0, [pc, #32]	@ (8018934 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018914:	f7fb ff94 	bl	8014840 <USBD_GetString>
 8018918:	e004      	b.n	8018924 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801891a:	683a      	ldr	r2, [r7, #0]
 801891c:	4904      	ldr	r1, [pc, #16]	@ (8018930 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801891e:	4805      	ldr	r0, [pc, #20]	@ (8018934 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018920:	f7fb ff8e 	bl	8014840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018924:	4b02      	ldr	r3, [pc, #8]	@ (8018930 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8018926:	4618      	mov	r0, r3
 8018928:	3708      	adds	r7, #8
 801892a:	46bd      	mov	sp, r7
 801892c:	bd80      	pop	{r7, pc}
 801892e:	bf00      	nop
 8018930:	20002acc 	.word	0x20002acc
 8018934:	0801fcb8 	.word	0x0801fcb8

08018938 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b082      	sub	sp, #8
 801893c:	af00      	add	r7, sp, #0
 801893e:	4603      	mov	r3, r0
 8018940:	6039      	str	r1, [r7, #0]
 8018942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018944:	79fb      	ldrb	r3, [r7, #7]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d105      	bne.n	8018956 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801894a:	683a      	ldr	r2, [r7, #0]
 801894c:	4907      	ldr	r1, [pc, #28]	@ (801896c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801894e:	4808      	ldr	r0, [pc, #32]	@ (8018970 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018950:	f7fb ff76 	bl	8014840 <USBD_GetString>
 8018954:	e004      	b.n	8018960 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018956:	683a      	ldr	r2, [r7, #0]
 8018958:	4904      	ldr	r1, [pc, #16]	@ (801896c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801895a:	4805      	ldr	r0, [pc, #20]	@ (8018970 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801895c:	f7fb ff70 	bl	8014840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018960:	4b02      	ldr	r3, [pc, #8]	@ (801896c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8018962:	4618      	mov	r0, r3
 8018964:	3708      	adds	r7, #8
 8018966:	46bd      	mov	sp, r7
 8018968:	bd80      	pop	{r7, pc}
 801896a:	bf00      	nop
 801896c:	20002acc 	.word	0x20002acc
 8018970:	0801fcc4 	.word	0x0801fcc4

08018974 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b084      	sub	sp, #16
 8018978:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801897a:	4b0f      	ldr	r3, [pc, #60]	@ (80189b8 <Get_SerialNum+0x44>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018980:	4b0e      	ldr	r3, [pc, #56]	@ (80189bc <Get_SerialNum+0x48>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018986:	4b0e      	ldr	r3, [pc, #56]	@ (80189c0 <Get_SerialNum+0x4c>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801898c:	68fa      	ldr	r2, [r7, #12]
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	4413      	add	r3, r2
 8018992:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d009      	beq.n	80189ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801899a:	2208      	movs	r2, #8
 801899c:	4909      	ldr	r1, [pc, #36]	@ (80189c4 <Get_SerialNum+0x50>)
 801899e:	68f8      	ldr	r0, [r7, #12]
 80189a0:	f000 f814 	bl	80189cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80189a4:	2204      	movs	r2, #4
 80189a6:	4908      	ldr	r1, [pc, #32]	@ (80189c8 <Get_SerialNum+0x54>)
 80189a8:	68b8      	ldr	r0, [r7, #8]
 80189aa:	f000 f80f 	bl	80189cc <IntToUnicode>
  }
}
 80189ae:	bf00      	nop
 80189b0:	3710      	adds	r7, #16
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}
 80189b6:	bf00      	nop
 80189b8:	1fff7590 	.word	0x1fff7590
 80189bc:	1fff7594 	.word	0x1fff7594
 80189c0:	1fff7598 	.word	0x1fff7598
 80189c4:	20000126 	.word	0x20000126
 80189c8:	20000136 	.word	0x20000136

080189cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80189cc:	b480      	push	{r7}
 80189ce:	b087      	sub	sp, #28
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	60f8      	str	r0, [r7, #12]
 80189d4:	60b9      	str	r1, [r7, #8]
 80189d6:	4613      	mov	r3, r2
 80189d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80189da:	2300      	movs	r3, #0
 80189dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80189de:	2300      	movs	r3, #0
 80189e0:	75fb      	strb	r3, [r7, #23]
 80189e2:	e027      	b.n	8018a34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	0f1b      	lsrs	r3, r3, #28
 80189e8:	2b09      	cmp	r3, #9
 80189ea:	d80b      	bhi.n	8018a04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	0f1b      	lsrs	r3, r3, #28
 80189f0:	b2da      	uxtb	r2, r3
 80189f2:	7dfb      	ldrb	r3, [r7, #23]
 80189f4:	005b      	lsls	r3, r3, #1
 80189f6:	4619      	mov	r1, r3
 80189f8:	68bb      	ldr	r3, [r7, #8]
 80189fa:	440b      	add	r3, r1
 80189fc:	3230      	adds	r2, #48	@ 0x30
 80189fe:	b2d2      	uxtb	r2, r2
 8018a00:	701a      	strb	r2, [r3, #0]
 8018a02:	e00a      	b.n	8018a1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	0f1b      	lsrs	r3, r3, #28
 8018a08:	b2da      	uxtb	r2, r3
 8018a0a:	7dfb      	ldrb	r3, [r7, #23]
 8018a0c:	005b      	lsls	r3, r3, #1
 8018a0e:	4619      	mov	r1, r3
 8018a10:	68bb      	ldr	r3, [r7, #8]
 8018a12:	440b      	add	r3, r1
 8018a14:	3237      	adds	r2, #55	@ 0x37
 8018a16:	b2d2      	uxtb	r2, r2
 8018a18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	011b      	lsls	r3, r3, #4
 8018a1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018a20:	7dfb      	ldrb	r3, [r7, #23]
 8018a22:	005b      	lsls	r3, r3, #1
 8018a24:	3301      	adds	r3, #1
 8018a26:	68ba      	ldr	r2, [r7, #8]
 8018a28:	4413      	add	r3, r2
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018a2e:	7dfb      	ldrb	r3, [r7, #23]
 8018a30:	3301      	adds	r3, #1
 8018a32:	75fb      	strb	r3, [r7, #23]
 8018a34:	7dfa      	ldrb	r2, [r7, #23]
 8018a36:	79fb      	ldrb	r3, [r7, #7]
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	d3d3      	bcc.n	80189e4 <IntToUnicode+0x18>
  }
}
 8018a3c:	bf00      	nop
 8018a3e:	bf00      	nop
 8018a40:	371c      	adds	r7, #28
 8018a42:	46bd      	mov	sp, r7
 8018a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a48:	4770      	bx	lr

08018a4a <LL_AHB2_GRP1_EnableClock>:
{
 8018a4a:	b480      	push	{r7}
 8018a4c:	b085      	sub	sp, #20
 8018a4e:	af00      	add	r7, sp, #0
 8018a50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8018a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018a56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018a58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	4313      	orrs	r3, r2
 8018a60:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8018a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018a66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	4013      	ands	r3, r2
 8018a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018a6e:	68fb      	ldr	r3, [r7, #12]
}
 8018a70:	bf00      	nop
 8018a72:	3714      	adds	r7, #20
 8018a74:	46bd      	mov	sp, r7
 8018a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7a:	4770      	bx	lr

08018a7c <LL_APB1_GRP1_EnableClock>:
{
 8018a7c:	b480      	push	{r7}
 8018a7e:	b085      	sub	sp, #20
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018a88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018a8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	4313      	orrs	r3, r2
 8018a92:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018a98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	4013      	ands	r3, r2
 8018a9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018aa0:	68fb      	ldr	r3, [r7, #12]
}
 8018aa2:	bf00      	nop
 8018aa4:	3714      	adds	r7, #20
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aac:	4770      	bx	lr
	...

08018ab0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b088      	sub	sp, #32
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018ab8:	f107 030c 	add.w	r3, r7, #12
 8018abc:	2200      	movs	r2, #0
 8018abe:	601a      	str	r2, [r3, #0]
 8018ac0:	605a      	str	r2, [r3, #4]
 8018ac2:	609a      	str	r2, [r3, #8]
 8018ac4:	60da      	str	r2, [r3, #12]
 8018ac6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	4a13      	ldr	r2, [pc, #76]	@ (8018b1c <HAL_PCD_MspInit+0x6c>)
 8018ace:	4293      	cmp	r3, r2
 8018ad0:	d120      	bne.n	8018b14 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018ad2:	2001      	movs	r0, #1
 8018ad4:	f7ff ffb9 	bl	8018a4a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018ad8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018adc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ade:	2302      	movs	r3, #2
 8018ae0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018aea:	230a      	movs	r3, #10
 8018aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018aee:	f107 030c 	add.w	r3, r7, #12
 8018af2:	4619      	mov	r1, r3
 8018af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8018af8:	f7f0 f8a6 	bl	8008c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018afc:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8018b00:	f7ff ffbc 	bl	8018a7c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8018b04:	2200      	movs	r2, #0
 8018b06:	2100      	movs	r1, #0
 8018b08:	2014      	movs	r0, #20
 8018b0a:	f7ef fc6a 	bl	80083e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018b0e:	2014      	movs	r0, #20
 8018b10:	f7ef fc81 	bl	8008416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018b14:	bf00      	nop
 8018b16:	3720      	adds	r7, #32
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	bd80      	pop	{r7, pc}
 8018b1c:	40006800 	.word	0x40006800

08018b20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b082      	sub	sp, #8
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018b34:	4619      	mov	r1, r3
 8018b36:	4610      	mov	r0, r2
 8018b38:	f7fa fd87 	bl	801364a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018b3c:	bf00      	nop
 8018b3e:	3708      	adds	r7, #8
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}

08018b44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b082      	sub	sp, #8
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	6078      	str	r0, [r7, #4]
 8018b4c:	460b      	mov	r3, r1
 8018b4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018b56:	78fa      	ldrb	r2, [r7, #3]
 8018b58:	6879      	ldr	r1, [r7, #4]
 8018b5a:	4613      	mov	r3, r2
 8018b5c:	009b      	lsls	r3, r3, #2
 8018b5e:	4413      	add	r3, r2
 8018b60:	00db      	lsls	r3, r3, #3
 8018b62:	440b      	add	r3, r1
 8018b64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018b68:	681a      	ldr	r2, [r3, #0]
 8018b6a:	78fb      	ldrb	r3, [r7, #3]
 8018b6c:	4619      	mov	r1, r3
 8018b6e:	f7fa fdc1 	bl	80136f4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018b72:	bf00      	nop
 8018b74:	3708      	adds	r7, #8
 8018b76:	46bd      	mov	sp, r7
 8018b78:	bd80      	pop	{r7, pc}

08018b7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b7a:	b580      	push	{r7, lr}
 8018b7c:	b082      	sub	sp, #8
 8018b7e:	af00      	add	r7, sp, #0
 8018b80:	6078      	str	r0, [r7, #4]
 8018b82:	460b      	mov	r3, r1
 8018b84:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018b8c:	78fa      	ldrb	r2, [r7, #3]
 8018b8e:	6879      	ldr	r1, [r7, #4]
 8018b90:	4613      	mov	r3, r2
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	4413      	add	r3, r2
 8018b96:	00db      	lsls	r3, r3, #3
 8018b98:	440b      	add	r3, r1
 8018b9a:	3324      	adds	r3, #36	@ 0x24
 8018b9c:	681a      	ldr	r2, [r3, #0]
 8018b9e:	78fb      	ldrb	r3, [r7, #3]
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	f7fa fe5a 	bl	801385a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018ba6:	bf00      	nop
 8018ba8:	3708      	adds	r7, #8
 8018baa:	46bd      	mov	sp, r7
 8018bac:	bd80      	pop	{r7, pc}

08018bae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018bae:	b580      	push	{r7, lr}
 8018bb0:	b082      	sub	sp, #8
 8018bb2:	af00      	add	r7, sp, #0
 8018bb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	f7fa ff94 	bl	8013aea <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018bc2:	bf00      	nop
 8018bc4:	3708      	adds	r7, #8
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}

08018bca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018bca:	b580      	push	{r7, lr}
 8018bcc:	b084      	sub	sp, #16
 8018bce:	af00      	add	r7, sp, #0
 8018bd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	795b      	ldrb	r3, [r3, #5]
 8018bda:	2b02      	cmp	r3, #2
 8018bdc:	d001      	beq.n	8018be2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018bde:	f7ea f87d 	bl	8002cdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018be8:	7bfa      	ldrb	r2, [r7, #15]
 8018bea:	4611      	mov	r1, r2
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7fa ff38 	bl	8013a62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	f7fa fee0 	bl	80139be <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018bfe:	bf00      	nop
 8018c00:	3710      	adds	r7, #16
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
	...

08018c08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b082      	sub	sp, #8
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c16:	4618      	mov	r0, r3
 8018c18:	f7fa ff33 	bl	8013a82 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	7a5b      	ldrb	r3, [r3, #9]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d005      	beq.n	8018c30 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018c24:	4b04      	ldr	r3, [pc, #16]	@ (8018c38 <HAL_PCD_SuspendCallback+0x30>)
 8018c26:	691b      	ldr	r3, [r3, #16]
 8018c28:	4a03      	ldr	r2, [pc, #12]	@ (8018c38 <HAL_PCD_SuspendCallback+0x30>)
 8018c2a:	f043 0306 	orr.w	r3, r3, #6
 8018c2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018c30:	bf00      	nop
 8018c32:	3708      	adds	r7, #8
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bd80      	pop	{r7, pc}
 8018c38:	e000ed00 	.word	0xe000ed00

08018c3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b082      	sub	sp, #8
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	7a5b      	ldrb	r3, [r3, #9]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d007      	beq.n	8018c5c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018c4c:	4b08      	ldr	r3, [pc, #32]	@ (8018c70 <HAL_PCD_ResumeCallback+0x34>)
 8018c4e:	691b      	ldr	r3, [r3, #16]
 8018c50:	4a07      	ldr	r2, [pc, #28]	@ (8018c70 <HAL_PCD_ResumeCallback+0x34>)
 8018c52:	f023 0306 	bic.w	r3, r3, #6
 8018c56:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018c58:	f000 f9fa 	bl	8019050 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c62:	4618      	mov	r0, r3
 8018c64:	f7fa ff29 	bl	8013aba <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018c68:	bf00      	nop
 8018c6a:	3708      	adds	r7, #8
 8018c6c:	46bd      	mov	sp, r7
 8018c6e:	bd80      	pop	{r7, pc}
 8018c70:	e000ed00 	.word	0xe000ed00

08018c74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b082      	sub	sp, #8
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	4a2a      	ldr	r2, [pc, #168]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018c88:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8018c8c:	f7f2 fd4c 	bl	800b728 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018c90:	4b27      	ldr	r3, [pc, #156]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018c92:	4a28      	ldr	r2, [pc, #160]	@ (8018d34 <USBD_LL_Init+0xc0>)
 8018c94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018c96:	4b26      	ldr	r3, [pc, #152]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018c98:	2208      	movs	r2, #8
 8018c9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018c9c:	4b24      	ldr	r3, [pc, #144]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018c9e:	2202      	movs	r2, #2
 8018ca0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018ca2:	4b23      	ldr	r3, [pc, #140]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018ca4:	2202      	movs	r2, #2
 8018ca6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018ca8:	4b21      	ldr	r3, [pc, #132]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018caa:	2200      	movs	r2, #0
 8018cac:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018cae:	4b20      	ldr	r3, [pc, #128]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018cb0:	2200      	movs	r2, #0
 8018cb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018cb6:	2200      	movs	r2, #0
 8018cb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018cba:	4b1d      	ldr	r3, [pc, #116]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018cbc:	2200      	movs	r2, #0
 8018cbe:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018cc0:	481b      	ldr	r0, [pc, #108]	@ (8018d30 <USBD_LL_Init+0xbc>)
 8018cc2:	f7f1 f811 	bl	8009ce8 <HAL_PCD_Init>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d001      	beq.n	8018cd0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018ccc:	f7ea f806 	bl	8002cdc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018cd6:	2318      	movs	r3, #24
 8018cd8:	2200      	movs	r2, #0
 8018cda:	2100      	movs	r1, #0
 8018cdc:	f7f2 fc98 	bl	800b610 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018ce6:	2358      	movs	r3, #88	@ 0x58
 8018ce8:	2200      	movs	r2, #0
 8018cea:	2180      	movs	r1, #128	@ 0x80
 8018cec:	f7f2 fc90 	bl	800b610 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018cf6:	23c0      	movs	r3, #192	@ 0xc0
 8018cf8:	2200      	movs	r2, #0
 8018cfa:	2181      	movs	r1, #129	@ 0x81
 8018cfc:	f7f2 fc88 	bl	800b610 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018d06:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	2101      	movs	r1, #1
 8018d0e:	f7f2 fc7f 	bl	800b610 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	2182      	movs	r1, #130	@ 0x82
 8018d20:	f7f2 fc76 	bl	800b610 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018d24:	2300      	movs	r3, #0
}
 8018d26:	4618      	mov	r0, r3
 8018d28:	3708      	adds	r7, #8
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	bd80      	pop	{r7, pc}
 8018d2e:	bf00      	nop
 8018d30:	20002ccc 	.word	0x20002ccc
 8018d34:	40006800 	.word	0x40006800

08018d38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	b084      	sub	sp, #16
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d40:	2300      	movs	r3, #0
 8018d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d44:	2300      	movs	r3, #0
 8018d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018d4e:	4618      	mov	r0, r3
 8018d50:	f7f1 f898 	bl	8009e84 <HAL_PCD_Start>
 8018d54:	4603      	mov	r3, r0
 8018d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d58:	7bfb      	ldrb	r3, [r7, #15]
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f000 f97e 	bl	801905c <USBD_Get_USB_Status>
 8018d60:	4603      	mov	r3, r0
 8018d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d66:	4618      	mov	r0, r3
 8018d68:	3710      	adds	r7, #16
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	bd80      	pop	{r7, pc}

08018d6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018d6e:	b580      	push	{r7, lr}
 8018d70:	b084      	sub	sp, #16
 8018d72:	af00      	add	r7, sp, #0
 8018d74:	6078      	str	r0, [r7, #4]
 8018d76:	4608      	mov	r0, r1
 8018d78:	4611      	mov	r1, r2
 8018d7a:	461a      	mov	r2, r3
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	70fb      	strb	r3, [r7, #3]
 8018d80:	460b      	mov	r3, r1
 8018d82:	70bb      	strb	r3, [r7, #2]
 8018d84:	4613      	mov	r3, r2
 8018d86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018d96:	78bb      	ldrb	r3, [r7, #2]
 8018d98:	883a      	ldrh	r2, [r7, #0]
 8018d9a:	78f9      	ldrb	r1, [r7, #3]
 8018d9c:	f7f1 f9df 	bl	800a15e <HAL_PCD_EP_Open>
 8018da0:	4603      	mov	r3, r0
 8018da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018da4:	7bfb      	ldrb	r3, [r7, #15]
 8018da6:	4618      	mov	r0, r3
 8018da8:	f000 f958 	bl	801905c <USBD_Get_USB_Status>
 8018dac:	4603      	mov	r3, r0
 8018dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	3710      	adds	r7, #16
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}

08018dba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018dba:	b580      	push	{r7, lr}
 8018dbc:	b084      	sub	sp, #16
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	6078      	str	r0, [r7, #4]
 8018dc2:	460b      	mov	r3, r1
 8018dc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018dc6:	2300      	movs	r3, #0
 8018dc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018dca:	2300      	movs	r3, #0
 8018dcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018dd4:	78fa      	ldrb	r2, [r7, #3]
 8018dd6:	4611      	mov	r1, r2
 8018dd8:	4618      	mov	r0, r3
 8018dda:	f7f1 fa1f 	bl	800a21c <HAL_PCD_EP_Close>
 8018dde:	4603      	mov	r3, r0
 8018de0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018de2:	7bfb      	ldrb	r3, [r7, #15]
 8018de4:	4618      	mov	r0, r3
 8018de6:	f000 f939 	bl	801905c <USBD_Get_USB_Status>
 8018dea:	4603      	mov	r3, r0
 8018dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8018df0:	4618      	mov	r0, r3
 8018df2:	3710      	adds	r7, #16
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}

08018df8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b084      	sub	sp, #16
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	6078      	str	r0, [r7, #4]
 8018e00:	460b      	mov	r3, r1
 8018e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e04:	2300      	movs	r3, #0
 8018e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e08:	2300      	movs	r3, #0
 8018e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e12:	78fa      	ldrb	r2, [r7, #3]
 8018e14:	4611      	mov	r1, r2
 8018e16:	4618      	mov	r0, r3
 8018e18:	f7f1 fac8 	bl	800a3ac <HAL_PCD_EP_SetStall>
 8018e1c:	4603      	mov	r3, r0
 8018e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e20:	7bfb      	ldrb	r3, [r7, #15]
 8018e22:	4618      	mov	r0, r3
 8018e24:	f000 f91a 	bl	801905c <USBD_Get_USB_Status>
 8018e28:	4603      	mov	r3, r0
 8018e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e2e:	4618      	mov	r0, r3
 8018e30:	3710      	adds	r7, #16
 8018e32:	46bd      	mov	sp, r7
 8018e34:	bd80      	pop	{r7, pc}

08018e36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e36:	b580      	push	{r7, lr}
 8018e38:	b084      	sub	sp, #16
 8018e3a:	af00      	add	r7, sp, #0
 8018e3c:	6078      	str	r0, [r7, #4]
 8018e3e:	460b      	mov	r3, r1
 8018e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e42:	2300      	movs	r3, #0
 8018e44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e46:	2300      	movs	r3, #0
 8018e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e50:	78fa      	ldrb	r2, [r7, #3]
 8018e52:	4611      	mov	r1, r2
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7f1 fafb 	bl	800a450 <HAL_PCD_EP_ClrStall>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e5e:	7bfb      	ldrb	r3, [r7, #15]
 8018e60:	4618      	mov	r0, r3
 8018e62:	f000 f8fb 	bl	801905c <USBD_Get_USB_Status>
 8018e66:	4603      	mov	r3, r0
 8018e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	3710      	adds	r7, #16
 8018e70:	46bd      	mov	sp, r7
 8018e72:	bd80      	pop	{r7, pc}

08018e74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e74:	b480      	push	{r7}
 8018e76:	b085      	sub	sp, #20
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
 8018e7c:	460b      	mov	r3, r1
 8018e7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	da0b      	bge.n	8018ea8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018e90:	78fb      	ldrb	r3, [r7, #3]
 8018e92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018e96:	68f9      	ldr	r1, [r7, #12]
 8018e98:	4613      	mov	r3, r2
 8018e9a:	009b      	lsls	r3, r3, #2
 8018e9c:	4413      	add	r3, r2
 8018e9e:	00db      	lsls	r3, r3, #3
 8018ea0:	440b      	add	r3, r1
 8018ea2:	3312      	adds	r3, #18
 8018ea4:	781b      	ldrb	r3, [r3, #0]
 8018ea6:	e00b      	b.n	8018ec0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018ea8:	78fb      	ldrb	r3, [r7, #3]
 8018eaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018eae:	68f9      	ldr	r1, [r7, #12]
 8018eb0:	4613      	mov	r3, r2
 8018eb2:	009b      	lsls	r3, r3, #2
 8018eb4:	4413      	add	r3, r2
 8018eb6:	00db      	lsls	r3, r3, #3
 8018eb8:	440b      	add	r3, r1
 8018eba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8018ebe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3714      	adds	r7, #20
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eca:	4770      	bx	lr

08018ecc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b084      	sub	sp, #16
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
 8018ed4:	460b      	mov	r3, r1
 8018ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018edc:	2300      	movs	r3, #0
 8018ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018ee6:	78fa      	ldrb	r2, [r7, #3]
 8018ee8:	4611      	mov	r1, r2
 8018eea:	4618      	mov	r0, r3
 8018eec:	f7f1 f913 	bl	800a116 <HAL_PCD_SetAddress>
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ef4:	7bfb      	ldrb	r3, [r7, #15]
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	f000 f8b0 	bl	801905c <USBD_Get_USB_Status>
 8018efc:	4603      	mov	r3, r0
 8018efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f02:	4618      	mov	r0, r3
 8018f04:	3710      	adds	r7, #16
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd80      	pop	{r7, pc}

08018f0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018f0a:	b580      	push	{r7, lr}
 8018f0c:	b086      	sub	sp, #24
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	60f8      	str	r0, [r7, #12]
 8018f12:	607a      	str	r2, [r7, #4]
 8018f14:	603b      	str	r3, [r7, #0]
 8018f16:	460b      	mov	r3, r1
 8018f18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f1e:	2300      	movs	r3, #0
 8018f20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018f28:	7af9      	ldrb	r1, [r7, #11]
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	687a      	ldr	r2, [r7, #4]
 8018f2e:	f7f1 fa06 	bl	800a33e <HAL_PCD_EP_Transmit>
 8018f32:	4603      	mov	r3, r0
 8018f34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f36:	7dfb      	ldrb	r3, [r7, #23]
 8018f38:	4618      	mov	r0, r3
 8018f3a:	f000 f88f 	bl	801905c <USBD_Get_USB_Status>
 8018f3e:	4603      	mov	r3, r0
 8018f40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018f42:	7dbb      	ldrb	r3, [r7, #22]
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	3718      	adds	r7, #24
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}

08018f4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b086      	sub	sp, #24
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	607a      	str	r2, [r7, #4]
 8018f56:	603b      	str	r3, [r7, #0]
 8018f58:	460b      	mov	r3, r1
 8018f5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f60:	2300      	movs	r3, #0
 8018f62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018f6a:	7af9      	ldrb	r1, [r7, #11]
 8018f6c:	683b      	ldr	r3, [r7, #0]
 8018f6e:	687a      	ldr	r2, [r7, #4]
 8018f70:	f7f1 f99c 	bl	800a2ac <HAL_PCD_EP_Receive>
 8018f74:	4603      	mov	r3, r0
 8018f76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f78:	7dfb      	ldrb	r3, [r7, #23]
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f000 f86e 	bl	801905c <USBD_Get_USB_Status>
 8018f80:	4603      	mov	r3, r0
 8018f82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018f84:	7dbb      	ldrb	r3, [r7, #22]
}
 8018f86:	4618      	mov	r0, r3
 8018f88:	3718      	adds	r7, #24
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}

08018f8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f8e:	b580      	push	{r7, lr}
 8018f90:	b082      	sub	sp, #8
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	6078      	str	r0, [r7, #4]
 8018f96:	460b      	mov	r3, r1
 8018f98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018fa0:	78fa      	ldrb	r2, [r7, #3]
 8018fa2:	4611      	mov	r1, r2
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f7f1 f9b2 	bl	800a30e <HAL_PCD_EP_GetRxCount>
 8018faa:	4603      	mov	r3, r0
}
 8018fac:	4618      	mov	r0, r3
 8018fae:	3708      	adds	r7, #8
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}

08018fb4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	460b      	mov	r3, r1
 8018fbe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8018fc0:	78fb      	ldrb	r3, [r7, #3]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d002      	beq.n	8018fcc <HAL_PCDEx_LPM_Callback+0x18>
 8018fc6:	2b01      	cmp	r3, #1
 8018fc8:	d013      	beq.n	8018ff2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8018fca:	e023      	b.n	8019014 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	7a5b      	ldrb	r3, [r3, #9]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d007      	beq.n	8018fe4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018fd4:	f000 f83c 	bl	8019050 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018fd8:	4b10      	ldr	r3, [pc, #64]	@ (801901c <HAL_PCDEx_LPM_Callback+0x68>)
 8018fda:	691b      	ldr	r3, [r3, #16]
 8018fdc:	4a0f      	ldr	r2, [pc, #60]	@ (801901c <HAL_PCDEx_LPM_Callback+0x68>)
 8018fde:	f023 0306 	bic.w	r3, r3, #6
 8018fe2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018fea:	4618      	mov	r0, r3
 8018fec:	f7fa fd65 	bl	8013aba <USBD_LL_Resume>
    break;
 8018ff0:	e010      	b.n	8019014 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7fa fd42 	bl	8013a82 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	7a5b      	ldrb	r3, [r3, #9]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d005      	beq.n	8019012 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019006:	4b05      	ldr	r3, [pc, #20]	@ (801901c <HAL_PCDEx_LPM_Callback+0x68>)
 8019008:	691b      	ldr	r3, [r3, #16]
 801900a:	4a04      	ldr	r2, [pc, #16]	@ (801901c <HAL_PCDEx_LPM_Callback+0x68>)
 801900c:	f043 0306 	orr.w	r3, r3, #6
 8019010:	6113      	str	r3, [r2, #16]
    break;
 8019012:	bf00      	nop
}
 8019014:	bf00      	nop
 8019016:	3708      	adds	r7, #8
 8019018:	46bd      	mov	sp, r7
 801901a:	bd80      	pop	{r7, pc}
 801901c:	e000ed00 	.word	0xe000ed00

08019020 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019020:	b480      	push	{r7}
 8019022:	b083      	sub	sp, #12
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019028:	4b03      	ldr	r3, [pc, #12]	@ (8019038 <USBD_static_malloc+0x18>)
}
 801902a:	4618      	mov	r0, r3
 801902c:	370c      	adds	r7, #12
 801902e:	46bd      	mov	sp, r7
 8019030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019034:	4770      	bx	lr
 8019036:	bf00      	nop
 8019038:	20002fa8 	.word	0x20002fa8

0801903c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801903c:	b480      	push	{r7}
 801903e:	b083      	sub	sp, #12
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8019044:	bf00      	nop
 8019046:	370c      	adds	r7, #12
 8019048:	46bd      	mov	sp, r7
 801904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904e:	4770      	bx	lr

08019050 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019054:	f7e9 fda4 	bl	8002ba0 <SystemClock_Config>
}
 8019058:	bf00      	nop
 801905a:	bd80      	pop	{r7, pc}

0801905c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801905c:	b480      	push	{r7}
 801905e:	b085      	sub	sp, #20
 8019060:	af00      	add	r7, sp, #0
 8019062:	4603      	mov	r3, r0
 8019064:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019066:	2300      	movs	r3, #0
 8019068:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801906a:	79fb      	ldrb	r3, [r7, #7]
 801906c:	2b03      	cmp	r3, #3
 801906e:	d817      	bhi.n	80190a0 <USBD_Get_USB_Status+0x44>
 8019070:	a201      	add	r2, pc, #4	@ (adr r2, 8019078 <USBD_Get_USB_Status+0x1c>)
 8019072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019076:	bf00      	nop
 8019078:	08019089 	.word	0x08019089
 801907c:	0801908f 	.word	0x0801908f
 8019080:	08019095 	.word	0x08019095
 8019084:	0801909b 	.word	0x0801909b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019088:	2300      	movs	r3, #0
 801908a:	73fb      	strb	r3, [r7, #15]
    break;
 801908c:	e00b      	b.n	80190a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801908e:	2303      	movs	r3, #3
 8019090:	73fb      	strb	r3, [r7, #15]
    break;
 8019092:	e008      	b.n	80190a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019094:	2301      	movs	r3, #1
 8019096:	73fb      	strb	r3, [r7, #15]
    break;
 8019098:	e005      	b.n	80190a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801909a:	2303      	movs	r3, #3
 801909c:	73fb      	strb	r3, [r7, #15]
    break;
 801909e:	e002      	b.n	80190a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80190a0:	2303      	movs	r3, #3
 80190a2:	73fb      	strb	r3, [r7, #15]
    break;
 80190a4:	bf00      	nop
  }
  return usb_status;
 80190a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80190a8:	4618      	mov	r0, r3
 80190aa:	3714      	adds	r7, #20
 80190ac:	46bd      	mov	sp, r7
 80190ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b2:	4770      	bx	lr

080190b4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80190b4:	b480      	push	{r7}
 80190b6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80190b8:	4b05      	ldr	r3, [pc, #20]	@ (80190d0 <UTIL_LPM_Init+0x1c>)
 80190ba:	2200      	movs	r2, #0
 80190bc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80190be:	4b05      	ldr	r3, [pc, #20]	@ (80190d4 <UTIL_LPM_Init+0x20>)
 80190c0:	2200      	movs	r2, #0
 80190c2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80190c4:	bf00      	nop
 80190c6:	46bd      	mov	sp, r7
 80190c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190cc:	4770      	bx	lr
 80190ce:	bf00      	nop
 80190d0:	200031c8 	.word	0x200031c8
 80190d4:	200031cc 	.word	0x200031cc

080190d8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80190d8:	b480      	push	{r7}
 80190da:	b087      	sub	sp, #28
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
 80190e0:	460b      	mov	r3, r1
 80190e2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190e4:	f3ef 8310 	mrs	r3, PRIMASK
 80190e8:	613b      	str	r3, [r7, #16]
  return(result);
 80190ea:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80190ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80190ee:	b672      	cpsid	i
}
 80190f0:	bf00      	nop
  
  switch(state)
 80190f2:	78fb      	ldrb	r3, [r7, #3]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d008      	beq.n	801910a <UTIL_LPM_SetOffMode+0x32>
 80190f8:	2b01      	cmp	r3, #1
 80190fa:	d10e      	bne.n	801911a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80190fc:	4b0d      	ldr	r3, [pc, #52]	@ (8019134 <UTIL_LPM_SetOffMode+0x5c>)
 80190fe:	681a      	ldr	r2, [r3, #0]
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	4313      	orrs	r3, r2
 8019104:	4a0b      	ldr	r2, [pc, #44]	@ (8019134 <UTIL_LPM_SetOffMode+0x5c>)
 8019106:	6013      	str	r3, [r2, #0]
      break;
 8019108:	e008      	b.n	801911c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	43da      	mvns	r2, r3
 801910e:	4b09      	ldr	r3, [pc, #36]	@ (8019134 <UTIL_LPM_SetOffMode+0x5c>)
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	4013      	ands	r3, r2
 8019114:	4a07      	ldr	r2, [pc, #28]	@ (8019134 <UTIL_LPM_SetOffMode+0x5c>)
 8019116:	6013      	str	r3, [r2, #0]
      break;
 8019118:	e000      	b.n	801911c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801911a:	bf00      	nop
 801911c:	697b      	ldr	r3, [r7, #20]
 801911e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	f383 8810 	msr	PRIMASK, r3
}
 8019126:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019128:	bf00      	nop
 801912a:	371c      	adds	r7, #28
 801912c:	46bd      	mov	sp, r7
 801912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019132:	4770      	bx	lr
 8019134:	200031cc 	.word	0x200031cc

08019138 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019138:	b580      	push	{r7, lr}
 801913a:	b090      	sub	sp, #64	@ 0x40
 801913c:	af00      	add	r7, sp, #0
 801913e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8019140:	4b73      	ldr	r3, [pc, #460]	@ (8019310 <UTIL_SEQ_Run+0x1d8>)
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8019146:	4b72      	ldr	r3, [pc, #456]	@ (8019310 <UTIL_SEQ_Run+0x1d8>)
 8019148:	681a      	ldr	r2, [r3, #0]
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	4013      	ands	r3, r2
 801914e:	4a70      	ldr	r2, [pc, #448]	@ (8019310 <UTIL_SEQ_Run+0x1d8>)
 8019150:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8019152:	4b70      	ldr	r3, [pc, #448]	@ (8019314 <UTIL_SEQ_Run+0x1dc>)
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019158:	4b6f      	ldr	r3, [pc, #444]	@ (8019318 <UTIL_SEQ_Run+0x1e0>)
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801915e:	4b6f      	ldr	r3, [pc, #444]	@ (801931c <UTIL_SEQ_Run+0x1e4>)
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8019164:	4b6e      	ldr	r3, [pc, #440]	@ (8019320 <UTIL_SEQ_Run+0x1e8>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801916a:	e08d      	b.n	8019288 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801916c:	2300      	movs	r3, #0
 801916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019170:	e002      	b.n	8019178 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8019172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019174:	3301      	adds	r3, #1
 8019176:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019178:	4a6a      	ldr	r2, [pc, #424]	@ (8019324 <UTIL_SEQ_Run+0x1ec>)
 801917a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801917c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019182:	401a      	ands	r2, r3
 8019184:	4b62      	ldr	r3, [pc, #392]	@ (8019310 <UTIL_SEQ_Run+0x1d8>)
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	4013      	ands	r3, r2
 801918a:	2b00      	cmp	r3, #0
 801918c:	d0f1      	beq.n	8019172 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801918e:	4a65      	ldr	r2, [pc, #404]	@ (8019324 <UTIL_SEQ_Run+0x1ec>)
 8019190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019192:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019198:	401a      	ands	r2, r3
 801919a:	4b5d      	ldr	r3, [pc, #372]	@ (8019310 <UTIL_SEQ_Run+0x1d8>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	4013      	ands	r3, r2
 80191a0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80191a2:	4a60      	ldr	r2, [pc, #384]	@ (8019324 <UTIL_SEQ_Run+0x1ec>)
 80191a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191a6:	00db      	lsls	r3, r3, #3
 80191a8:	4413      	add	r3, r2
 80191aa:	685a      	ldr	r2, [r3, #4]
 80191ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191ae:	4013      	ands	r3, r2
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d106      	bne.n	80191c2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80191b4:	4a5b      	ldr	r2, [pc, #364]	@ (8019324 <UTIL_SEQ_Run+0x1ec>)
 80191b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191b8:	00db      	lsls	r3, r3, #3
 80191ba:	4413      	add	r3, r2
 80191bc:	f04f 32ff 	mov.w	r2, #4294967295
 80191c0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80191c2:	4a58      	ldr	r2, [pc, #352]	@ (8019324 <UTIL_SEQ_Run+0x1ec>)
 80191c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191c6:	00db      	lsls	r3, r3, #3
 80191c8:	4413      	add	r3, r2
 80191ca:	685a      	ldr	r2, [r3, #4]
 80191cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191ce:	4013      	ands	r3, r2
 80191d0:	4618      	mov	r0, r3
 80191d2:	f000 f9b3 	bl	801953c <SEQ_BitPosition>
 80191d6:	4603      	mov	r3, r0
 80191d8:	461a      	mov	r2, r3
 80191da:	4b53      	ldr	r3, [pc, #332]	@ (8019328 <UTIL_SEQ_Run+0x1f0>)
 80191dc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80191de:	4a51      	ldr	r2, [pc, #324]	@ (8019324 <UTIL_SEQ_Run+0x1ec>)
 80191e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191e2:	00db      	lsls	r3, r3, #3
 80191e4:	4413      	add	r3, r2
 80191e6:	685a      	ldr	r2, [r3, #4]
 80191e8:	4b4f      	ldr	r3, [pc, #316]	@ (8019328 <UTIL_SEQ_Run+0x1f0>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	2101      	movs	r1, #1
 80191ee:	fa01 f303 	lsl.w	r3, r1, r3
 80191f2:	43db      	mvns	r3, r3
 80191f4:	401a      	ands	r2, r3
 80191f6:	494b      	ldr	r1, [pc, #300]	@ (8019324 <UTIL_SEQ_Run+0x1ec>)
 80191f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191fa:	00db      	lsls	r3, r3, #3
 80191fc:	440b      	add	r3, r1
 80191fe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019200:	f3ef 8310 	mrs	r3, PRIMASK
 8019204:	61bb      	str	r3, [r7, #24]
  return(result);
 8019206:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019208:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801920a:	b672      	cpsid	i
}
 801920c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801920e:	4b46      	ldr	r3, [pc, #280]	@ (8019328 <UTIL_SEQ_Run+0x1f0>)
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	2201      	movs	r2, #1
 8019214:	fa02 f303 	lsl.w	r3, r2, r3
 8019218:	43da      	mvns	r2, r3
 801921a:	4b3e      	ldr	r3, [pc, #248]	@ (8019314 <UTIL_SEQ_Run+0x1dc>)
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	4013      	ands	r3, r2
 8019220:	4a3c      	ldr	r2, [pc, #240]	@ (8019314 <UTIL_SEQ_Run+0x1dc>)
 8019222:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019224:	2301      	movs	r3, #1
 8019226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019228:	e013      	b.n	8019252 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801922a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801922c:	3b01      	subs	r3, #1
 801922e:	4a3d      	ldr	r2, [pc, #244]	@ (8019324 <UTIL_SEQ_Run+0x1ec>)
 8019230:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8019234:	4b3c      	ldr	r3, [pc, #240]	@ (8019328 <UTIL_SEQ_Run+0x1f0>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	2201      	movs	r2, #1
 801923a:	fa02 f303 	lsl.w	r3, r2, r3
 801923e:	43da      	mvns	r2, r3
 8019240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019242:	3b01      	subs	r3, #1
 8019244:	400a      	ands	r2, r1
 8019246:	4937      	ldr	r1, [pc, #220]	@ (8019324 <UTIL_SEQ_Run+0x1ec>)
 8019248:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801924c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801924e:	3b01      	subs	r3, #1
 8019250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019254:	2b00      	cmp	r3, #0
 8019256:	d1e8      	bne.n	801922a <UTIL_SEQ_Run+0xf2>
 8019258:	6a3b      	ldr	r3, [r7, #32]
 801925a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801925c:	697b      	ldr	r3, [r7, #20]
 801925e:	f383 8810 	msr	PRIMASK, r3
}
 8019262:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8019264:	4b30      	ldr	r3, [pc, #192]	@ (8019328 <UTIL_SEQ_Run+0x1f0>)
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	4a30      	ldr	r2, [pc, #192]	@ (801932c <UTIL_SEQ_Run+0x1f4>)
 801926a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801926e:	4798      	blx	r3

    local_taskset = TaskSet;
 8019270:	4b28      	ldr	r3, [pc, #160]	@ (8019314 <UTIL_SEQ_Run+0x1dc>)
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8019276:	4b28      	ldr	r3, [pc, #160]	@ (8019318 <UTIL_SEQ_Run+0x1e0>)
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801927c:	4b27      	ldr	r3, [pc, #156]	@ (801931c <UTIL_SEQ_Run+0x1e4>)
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8019282:	4b27      	ldr	r3, [pc, #156]	@ (8019320 <UTIL_SEQ_Run+0x1e8>)
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801928c:	401a      	ands	r2, r3
 801928e:	4b20      	ldr	r3, [pc, #128]	@ (8019310 <UTIL_SEQ_Run+0x1d8>)
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	4013      	ands	r3, r2
 8019294:	2b00      	cmp	r3, #0
 8019296:	d005      	beq.n	80192a4 <UTIL_SEQ_Run+0x16c>
 8019298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801929a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801929c:	4013      	ands	r3, r2
 801929e:	2b00      	cmp	r3, #0
 80192a0:	f43f af64 	beq.w	801916c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80192a4:	4b20      	ldr	r3, [pc, #128]	@ (8019328 <UTIL_SEQ_Run+0x1f0>)
 80192a6:	f04f 32ff 	mov.w	r2, #4294967295
 80192aa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80192ac:	f000 f938 	bl	8019520 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192b0:	f3ef 8310 	mrs	r3, PRIMASK
 80192b4:	613b      	str	r3, [r7, #16]
  return(result);
 80192b6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80192b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80192ba:	b672      	cpsid	i
}
 80192bc:	bf00      	nop
  local_taskset = TaskSet;
 80192be:	4b15      	ldr	r3, [pc, #84]	@ (8019314 <UTIL_SEQ_Run+0x1dc>)
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80192c4:	4b14      	ldr	r3, [pc, #80]	@ (8019318 <UTIL_SEQ_Run+0x1e0>)
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80192ca:	4b14      	ldr	r3, [pc, #80]	@ (801931c <UTIL_SEQ_Run+0x1e4>)
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80192d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80192d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192d4:	401a      	ands	r2, r3
 80192d6:	4b0e      	ldr	r3, [pc, #56]	@ (8019310 <UTIL_SEQ_Run+0x1d8>)
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	4013      	ands	r3, r2
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d107      	bne.n	80192f0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80192e0:	4b0f      	ldr	r3, [pc, #60]	@ (8019320 <UTIL_SEQ_Run+0x1e8>)
 80192e2:	681a      	ldr	r2, [r3, #0]
 80192e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80192e6:	4013      	ands	r3, r2
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d101      	bne.n	80192f0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80192ec:	f7e8 fa4c 	bl	8001788 <UTIL_SEQ_Idle>
 80192f0:	69fb      	ldr	r3, [r7, #28]
 80192f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	f383 8810 	msr	PRIMASK, r3
}
 80192fa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80192fc:	f000 f917 	bl	801952e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8019300:	4a03      	ldr	r2, [pc, #12]	@ (8019310 <UTIL_SEQ_Run+0x1d8>)
 8019302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019304:	6013      	str	r3, [r2, #0]

  return;
 8019306:	bf00      	nop
}
 8019308:	3740      	adds	r7, #64	@ 0x40
 801930a:	46bd      	mov	sp, r7
 801930c:	bd80      	pop	{r7, pc}
 801930e:	bf00      	nop
 8019310:	20000144 	.word	0x20000144
 8019314:	200031d0 	.word	0x200031d0
 8019318:	200031d4 	.word	0x200031d4
 801931c:	20000140 	.word	0x20000140
 8019320:	200031d8 	.word	0x200031d8
 8019324:	20003260 	.word	0x20003260
 8019328:	200031dc 	.word	0x200031dc
 801932c:	200031e0 	.word	0x200031e0

08019330 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b088      	sub	sp, #32
 8019334:	af00      	add	r7, sp, #0
 8019336:	60f8      	str	r0, [r7, #12]
 8019338:	60b9      	str	r1, [r7, #8]
 801933a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801933c:	f3ef 8310 	mrs	r3, PRIMASK
 8019340:	617b      	str	r3, [r7, #20]
  return(result);
 8019342:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019346:	b672      	cpsid	i
}
 8019348:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801934a:	68f8      	ldr	r0, [r7, #12]
 801934c:	f000 f8f6 	bl	801953c <SEQ_BitPosition>
 8019350:	4603      	mov	r3, r0
 8019352:	4619      	mov	r1, r3
 8019354:	4a06      	ldr	r2, [pc, #24]	@ (8019370 <UTIL_SEQ_RegTask+0x40>)
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801935c:	69fb      	ldr	r3, [r7, #28]
 801935e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019360:	69bb      	ldr	r3, [r7, #24]
 8019362:	f383 8810 	msr	PRIMASK, r3
}
 8019366:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019368:	bf00      	nop
}
 801936a:	3720      	adds	r7, #32
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}
 8019370:	200031e0 	.word	0x200031e0

08019374 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019374:	b480      	push	{r7}
 8019376:	b087      	sub	sp, #28
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801937e:	f3ef 8310 	mrs	r3, PRIMASK
 8019382:	60fb      	str	r3, [r7, #12]
  return(result);
 8019384:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019388:	b672      	cpsid	i
}
 801938a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801938c:	4b0d      	ldr	r3, [pc, #52]	@ (80193c4 <UTIL_SEQ_SetTask+0x50>)
 801938e:	681a      	ldr	r2, [r3, #0]
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	4313      	orrs	r3, r2
 8019394:	4a0b      	ldr	r2, [pc, #44]	@ (80193c4 <UTIL_SEQ_SetTask+0x50>)
 8019396:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019398:	4a0b      	ldr	r2, [pc, #44]	@ (80193c8 <UTIL_SEQ_SetTask+0x54>)
 801939a:	683b      	ldr	r3, [r7, #0]
 801939c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	431a      	orrs	r2, r3
 80193a4:	4908      	ldr	r1, [pc, #32]	@ (80193c8 <UTIL_SEQ_SetTask+0x54>)
 80193a6:	683b      	ldr	r3, [r7, #0]
 80193a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80193ac:	697b      	ldr	r3, [r7, #20]
 80193ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193b0:	693b      	ldr	r3, [r7, #16]
 80193b2:	f383 8810 	msr	PRIMASK, r3
}
 80193b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80193b8:	bf00      	nop
}
 80193ba:	371c      	adds	r7, #28
 80193bc:	46bd      	mov	sp, r7
 80193be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c2:	4770      	bx	lr
 80193c4:	200031d0 	.word	0x200031d0
 80193c8:	20003260 	.word	0x20003260

080193cc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80193cc:	b480      	push	{r7}
 80193ce:	b087      	sub	sp, #28
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193d4:	f3ef 8310 	mrs	r3, PRIMASK
 80193d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80193da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80193dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193de:	b672      	cpsid	i
}
 80193e0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	43da      	mvns	r2, r3
 80193e6:	4b08      	ldr	r3, [pc, #32]	@ (8019408 <UTIL_SEQ_PauseTask+0x3c>)
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	4013      	ands	r3, r2
 80193ec:	4a06      	ldr	r2, [pc, #24]	@ (8019408 <UTIL_SEQ_PauseTask+0x3c>)
 80193ee:	6013      	str	r3, [r2, #0]
 80193f0:	697b      	ldr	r3, [r7, #20]
 80193f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193f4:	693b      	ldr	r3, [r7, #16]
 80193f6:	f383 8810 	msr	PRIMASK, r3
}
 80193fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80193fc:	bf00      	nop
}
 80193fe:	371c      	adds	r7, #28
 8019400:	46bd      	mov	sp, r7
 8019402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019406:	4770      	bx	lr
 8019408:	20000140 	.word	0x20000140

0801940c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801940c:	b480      	push	{r7}
 801940e:	b087      	sub	sp, #28
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019414:	f3ef 8310 	mrs	r3, PRIMASK
 8019418:	60fb      	str	r3, [r7, #12]
  return(result);
 801941a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801941c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801941e:	b672      	cpsid	i
}
 8019420:	bf00      	nop

  TaskMask |= TaskId_bm;
 8019422:	4b09      	ldr	r3, [pc, #36]	@ (8019448 <UTIL_SEQ_ResumeTask+0x3c>)
 8019424:	681a      	ldr	r2, [r3, #0]
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	4313      	orrs	r3, r2
 801942a:	4a07      	ldr	r2, [pc, #28]	@ (8019448 <UTIL_SEQ_ResumeTask+0x3c>)
 801942c:	6013      	str	r3, [r2, #0]
 801942e:	697b      	ldr	r3, [r7, #20]
 8019430:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019432:	693b      	ldr	r3, [r7, #16]
 8019434:	f383 8810 	msr	PRIMASK, r3
}
 8019438:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801943a:	bf00      	nop
}
 801943c:	371c      	adds	r7, #28
 801943e:	46bd      	mov	sp, r7
 8019440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019444:	4770      	bx	lr
 8019446:	bf00      	nop
 8019448:	20000140 	.word	0x20000140

0801944c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801944c:	b480      	push	{r7}
 801944e:	b087      	sub	sp, #28
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019454:	f3ef 8310 	mrs	r3, PRIMASK
 8019458:	60fb      	str	r3, [r7, #12]
  return(result);
 801945a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801945c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801945e:	b672      	cpsid	i
}
 8019460:	bf00      	nop

  EvtSet |= EvtId_bm;
 8019462:	4b09      	ldr	r3, [pc, #36]	@ (8019488 <UTIL_SEQ_SetEvt+0x3c>)
 8019464:	681a      	ldr	r2, [r3, #0]
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	4313      	orrs	r3, r2
 801946a:	4a07      	ldr	r2, [pc, #28]	@ (8019488 <UTIL_SEQ_SetEvt+0x3c>)
 801946c:	6013      	str	r3, [r2, #0]
 801946e:	697b      	ldr	r3, [r7, #20]
 8019470:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019472:	693b      	ldr	r3, [r7, #16]
 8019474:	f383 8810 	msr	PRIMASK, r3
}
 8019478:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801947a:	bf00      	nop
}
 801947c:	371c      	adds	r7, #28
 801947e:	46bd      	mov	sp, r7
 8019480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019484:	4770      	bx	lr
 8019486:	bf00      	nop
 8019488:	200031d4 	.word	0x200031d4

0801948c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b088      	sub	sp, #32
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8019494:	4b1f      	ldr	r3, [pc, #124]	@ (8019514 <UTIL_SEQ_WaitEvt+0x88>)
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801949a:	4b1e      	ldr	r3, [pc, #120]	@ (8019514 <UTIL_SEQ_WaitEvt+0x88>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194a2:	d102      	bne.n	80194aa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80194a4:	2300      	movs	r3, #0
 80194a6:	61fb      	str	r3, [r7, #28]
 80194a8:	e005      	b.n	80194b6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80194aa:	4b1a      	ldr	r3, [pc, #104]	@ (8019514 <UTIL_SEQ_WaitEvt+0x88>)
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	2201      	movs	r2, #1
 80194b0:	fa02 f303 	lsl.w	r3, r2, r3
 80194b4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80194b6:	4b18      	ldr	r3, [pc, #96]	@ (8019518 <UTIL_SEQ_WaitEvt+0x8c>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80194bc:	4a16      	ldr	r2, [pc, #88]	@ (8019518 <UTIL_SEQ_WaitEvt+0x8c>)
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80194c2:	e003      	b.n	80194cc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80194c4:	6879      	ldr	r1, [r7, #4]
 80194c6:	69f8      	ldr	r0, [r7, #28]
 80194c8:	f7e8 f965 	bl	8001796 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80194cc:	4b13      	ldr	r3, [pc, #76]	@ (801951c <UTIL_SEQ_WaitEvt+0x90>)
 80194ce:	681a      	ldr	r2, [r3, #0]
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	4013      	ands	r3, r2
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d0f5      	beq.n	80194c4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80194d8:	4a0e      	ldr	r2, [pc, #56]	@ (8019514 <UTIL_SEQ_WaitEvt+0x88>)
 80194da:	69bb      	ldr	r3, [r7, #24]
 80194dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194de:	f3ef 8310 	mrs	r3, PRIMASK
 80194e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80194e4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80194e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80194e8:	b672      	cpsid	i
}
 80194ea:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	43da      	mvns	r2, r3
 80194f0:	4b0a      	ldr	r3, [pc, #40]	@ (801951c <UTIL_SEQ_WaitEvt+0x90>)
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	4013      	ands	r3, r2
 80194f6:	4a09      	ldr	r2, [pc, #36]	@ (801951c <UTIL_SEQ_WaitEvt+0x90>)
 80194f8:	6013      	str	r3, [r2, #0]
 80194fa:	693b      	ldr	r3, [r7, #16]
 80194fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	f383 8810 	msr	PRIMASK, r3
}
 8019504:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8019506:	4a04      	ldr	r2, [pc, #16]	@ (8019518 <UTIL_SEQ_WaitEvt+0x8c>)
 8019508:	697b      	ldr	r3, [r7, #20]
 801950a:	6013      	str	r3, [r2, #0]
  return;
 801950c:	bf00      	nop
}
 801950e:	3720      	adds	r7, #32
 8019510:	46bd      	mov	sp, r7
 8019512:	bd80      	pop	{r7, pc}
 8019514:	200031dc 	.word	0x200031dc
 8019518:	200031d8 	.word	0x200031d8
 801951c:	200031d4 	.word	0x200031d4

08019520 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019520:	b480      	push	{r7}
 8019522:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019524:	bf00      	nop
}
 8019526:	46bd      	mov	sp, r7
 8019528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952c:	4770      	bx	lr

0801952e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801952e:	b480      	push	{r7}
 8019530:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019532:	bf00      	nop
}
 8019534:	46bd      	mov	sp, r7
 8019536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801953a:	4770      	bx	lr

0801953c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801953c:	b480      	push	{r7}
 801953e:	b085      	sub	sp, #20
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d101      	bne.n	8019552 <SEQ_BitPosition+0x16>
    return 32U;
 801954e:	2320      	movs	r3, #32
 8019550:	e003      	b.n	801955a <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	fab3 f383 	clz	r3, r3
 8019558:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 801955a:	f1c3 031f 	rsb	r3, r3, #31
 801955e:	b2db      	uxtb	r3, r3
}
 8019560:	4618      	mov	r0, r3
 8019562:	3714      	adds	r7, #20
 8019564:	46bd      	mov	sp, r7
 8019566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801956a:	4770      	bx	lr

0801956c <atoi>:
 801956c:	220a      	movs	r2, #10
 801956e:	2100      	movs	r1, #0
 8019570:	f000 bfa8 	b.w	801a4c4 <strtol>

08019574 <malloc>:
 8019574:	4b02      	ldr	r3, [pc, #8]	@ (8019580 <malloc+0xc>)
 8019576:	4601      	mov	r1, r0
 8019578:	6818      	ldr	r0, [r3, #0]
 801957a:	f000 b82d 	b.w	80195d8 <_malloc_r>
 801957e:	bf00      	nop
 8019580:	200002c0 	.word	0x200002c0

08019584 <free>:
 8019584:	4b02      	ldr	r3, [pc, #8]	@ (8019590 <free+0xc>)
 8019586:	4601      	mov	r1, r0
 8019588:	6818      	ldr	r0, [r3, #0]
 801958a:	f002 bf0d 	b.w	801c3a8 <_free_r>
 801958e:	bf00      	nop
 8019590:	200002c0 	.word	0x200002c0

08019594 <sbrk_aligned>:
 8019594:	b570      	push	{r4, r5, r6, lr}
 8019596:	4e0f      	ldr	r6, [pc, #60]	@ (80195d4 <sbrk_aligned+0x40>)
 8019598:	460c      	mov	r4, r1
 801959a:	6831      	ldr	r1, [r6, #0]
 801959c:	4605      	mov	r5, r0
 801959e:	b911      	cbnz	r1, 80195a6 <sbrk_aligned+0x12>
 80195a0:	f002 f824 	bl	801b5ec <_sbrk_r>
 80195a4:	6030      	str	r0, [r6, #0]
 80195a6:	4621      	mov	r1, r4
 80195a8:	4628      	mov	r0, r5
 80195aa:	f002 f81f 	bl	801b5ec <_sbrk_r>
 80195ae:	1c43      	adds	r3, r0, #1
 80195b0:	d103      	bne.n	80195ba <sbrk_aligned+0x26>
 80195b2:	f04f 34ff 	mov.w	r4, #4294967295
 80195b6:	4620      	mov	r0, r4
 80195b8:	bd70      	pop	{r4, r5, r6, pc}
 80195ba:	1cc4      	adds	r4, r0, #3
 80195bc:	f024 0403 	bic.w	r4, r4, #3
 80195c0:	42a0      	cmp	r0, r4
 80195c2:	d0f8      	beq.n	80195b6 <sbrk_aligned+0x22>
 80195c4:	1a21      	subs	r1, r4, r0
 80195c6:	4628      	mov	r0, r5
 80195c8:	f002 f810 	bl	801b5ec <_sbrk_r>
 80195cc:	3001      	adds	r0, #1
 80195ce:	d1f2      	bne.n	80195b6 <sbrk_aligned+0x22>
 80195d0:	e7ef      	b.n	80195b2 <sbrk_aligned+0x1e>
 80195d2:	bf00      	nop
 80195d4:	20003268 	.word	0x20003268

080195d8 <_malloc_r>:
 80195d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195dc:	1ccd      	adds	r5, r1, #3
 80195de:	f025 0503 	bic.w	r5, r5, #3
 80195e2:	3508      	adds	r5, #8
 80195e4:	2d0c      	cmp	r5, #12
 80195e6:	bf38      	it	cc
 80195e8:	250c      	movcc	r5, #12
 80195ea:	2d00      	cmp	r5, #0
 80195ec:	4606      	mov	r6, r0
 80195ee:	db01      	blt.n	80195f4 <_malloc_r+0x1c>
 80195f0:	42a9      	cmp	r1, r5
 80195f2:	d904      	bls.n	80195fe <_malloc_r+0x26>
 80195f4:	230c      	movs	r3, #12
 80195f6:	6033      	str	r3, [r6, #0]
 80195f8:	2000      	movs	r0, #0
 80195fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80196d4 <_malloc_r+0xfc>
 8019602:	f000 f869 	bl	80196d8 <__malloc_lock>
 8019606:	f8d8 3000 	ldr.w	r3, [r8]
 801960a:	461c      	mov	r4, r3
 801960c:	bb44      	cbnz	r4, 8019660 <_malloc_r+0x88>
 801960e:	4629      	mov	r1, r5
 8019610:	4630      	mov	r0, r6
 8019612:	f7ff ffbf 	bl	8019594 <sbrk_aligned>
 8019616:	1c43      	adds	r3, r0, #1
 8019618:	4604      	mov	r4, r0
 801961a:	d158      	bne.n	80196ce <_malloc_r+0xf6>
 801961c:	f8d8 4000 	ldr.w	r4, [r8]
 8019620:	4627      	mov	r7, r4
 8019622:	2f00      	cmp	r7, #0
 8019624:	d143      	bne.n	80196ae <_malloc_r+0xd6>
 8019626:	2c00      	cmp	r4, #0
 8019628:	d04b      	beq.n	80196c2 <_malloc_r+0xea>
 801962a:	6823      	ldr	r3, [r4, #0]
 801962c:	4639      	mov	r1, r7
 801962e:	4630      	mov	r0, r6
 8019630:	eb04 0903 	add.w	r9, r4, r3
 8019634:	f001 ffda 	bl	801b5ec <_sbrk_r>
 8019638:	4581      	cmp	r9, r0
 801963a:	d142      	bne.n	80196c2 <_malloc_r+0xea>
 801963c:	6821      	ldr	r1, [r4, #0]
 801963e:	1a6d      	subs	r5, r5, r1
 8019640:	4629      	mov	r1, r5
 8019642:	4630      	mov	r0, r6
 8019644:	f7ff ffa6 	bl	8019594 <sbrk_aligned>
 8019648:	3001      	adds	r0, #1
 801964a:	d03a      	beq.n	80196c2 <_malloc_r+0xea>
 801964c:	6823      	ldr	r3, [r4, #0]
 801964e:	442b      	add	r3, r5
 8019650:	6023      	str	r3, [r4, #0]
 8019652:	f8d8 3000 	ldr.w	r3, [r8]
 8019656:	685a      	ldr	r2, [r3, #4]
 8019658:	bb62      	cbnz	r2, 80196b4 <_malloc_r+0xdc>
 801965a:	f8c8 7000 	str.w	r7, [r8]
 801965e:	e00f      	b.n	8019680 <_malloc_r+0xa8>
 8019660:	6822      	ldr	r2, [r4, #0]
 8019662:	1b52      	subs	r2, r2, r5
 8019664:	d420      	bmi.n	80196a8 <_malloc_r+0xd0>
 8019666:	2a0b      	cmp	r2, #11
 8019668:	d917      	bls.n	801969a <_malloc_r+0xc2>
 801966a:	1961      	adds	r1, r4, r5
 801966c:	42a3      	cmp	r3, r4
 801966e:	6025      	str	r5, [r4, #0]
 8019670:	bf18      	it	ne
 8019672:	6059      	strne	r1, [r3, #4]
 8019674:	6863      	ldr	r3, [r4, #4]
 8019676:	bf08      	it	eq
 8019678:	f8c8 1000 	streq.w	r1, [r8]
 801967c:	5162      	str	r2, [r4, r5]
 801967e:	604b      	str	r3, [r1, #4]
 8019680:	4630      	mov	r0, r6
 8019682:	f000 f82f 	bl	80196e4 <__malloc_unlock>
 8019686:	f104 000b 	add.w	r0, r4, #11
 801968a:	1d23      	adds	r3, r4, #4
 801968c:	f020 0007 	bic.w	r0, r0, #7
 8019690:	1ac2      	subs	r2, r0, r3
 8019692:	bf1c      	itt	ne
 8019694:	1a1b      	subne	r3, r3, r0
 8019696:	50a3      	strne	r3, [r4, r2]
 8019698:	e7af      	b.n	80195fa <_malloc_r+0x22>
 801969a:	6862      	ldr	r2, [r4, #4]
 801969c:	42a3      	cmp	r3, r4
 801969e:	bf0c      	ite	eq
 80196a0:	f8c8 2000 	streq.w	r2, [r8]
 80196a4:	605a      	strne	r2, [r3, #4]
 80196a6:	e7eb      	b.n	8019680 <_malloc_r+0xa8>
 80196a8:	4623      	mov	r3, r4
 80196aa:	6864      	ldr	r4, [r4, #4]
 80196ac:	e7ae      	b.n	801960c <_malloc_r+0x34>
 80196ae:	463c      	mov	r4, r7
 80196b0:	687f      	ldr	r7, [r7, #4]
 80196b2:	e7b6      	b.n	8019622 <_malloc_r+0x4a>
 80196b4:	461a      	mov	r2, r3
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	42a3      	cmp	r3, r4
 80196ba:	d1fb      	bne.n	80196b4 <_malloc_r+0xdc>
 80196bc:	2300      	movs	r3, #0
 80196be:	6053      	str	r3, [r2, #4]
 80196c0:	e7de      	b.n	8019680 <_malloc_r+0xa8>
 80196c2:	230c      	movs	r3, #12
 80196c4:	6033      	str	r3, [r6, #0]
 80196c6:	4630      	mov	r0, r6
 80196c8:	f000 f80c 	bl	80196e4 <__malloc_unlock>
 80196cc:	e794      	b.n	80195f8 <_malloc_r+0x20>
 80196ce:	6005      	str	r5, [r0, #0]
 80196d0:	e7d6      	b.n	8019680 <_malloc_r+0xa8>
 80196d2:	bf00      	nop
 80196d4:	2000326c 	.word	0x2000326c

080196d8 <__malloc_lock>:
 80196d8:	4801      	ldr	r0, [pc, #4]	@ (80196e0 <__malloc_lock+0x8>)
 80196da:	f001 bfd4 	b.w	801b686 <__retarget_lock_acquire_recursive>
 80196de:	bf00      	nop
 80196e0:	200033b0 	.word	0x200033b0

080196e4 <__malloc_unlock>:
 80196e4:	4801      	ldr	r0, [pc, #4]	@ (80196ec <__malloc_unlock+0x8>)
 80196e6:	f001 bfcf 	b.w	801b688 <__retarget_lock_release_recursive>
 80196ea:	bf00      	nop
 80196ec:	200033b0 	.word	0x200033b0

080196f0 <sulp>:
 80196f0:	b570      	push	{r4, r5, r6, lr}
 80196f2:	4604      	mov	r4, r0
 80196f4:	460d      	mov	r5, r1
 80196f6:	ec45 4b10 	vmov	d0, r4, r5
 80196fa:	4616      	mov	r6, r2
 80196fc:	f003 fd5e 	bl	801d1bc <__ulp>
 8019700:	ec51 0b10 	vmov	r0, r1, d0
 8019704:	b17e      	cbz	r6, 8019726 <sulp+0x36>
 8019706:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801970a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801970e:	2b00      	cmp	r3, #0
 8019710:	dd09      	ble.n	8019726 <sulp+0x36>
 8019712:	051b      	lsls	r3, r3, #20
 8019714:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8019718:	2400      	movs	r4, #0
 801971a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801971e:	4622      	mov	r2, r4
 8019720:	462b      	mov	r3, r5
 8019722:	f7e6 ff41 	bl	80005a8 <__aeabi_dmul>
 8019726:	ec41 0b10 	vmov	d0, r0, r1
 801972a:	bd70      	pop	{r4, r5, r6, pc}
 801972c:	0000      	movs	r0, r0
	...

08019730 <_strtod_l>:
 8019730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019734:	b09f      	sub	sp, #124	@ 0x7c
 8019736:	460c      	mov	r4, r1
 8019738:	9217      	str	r2, [sp, #92]	@ 0x5c
 801973a:	2200      	movs	r2, #0
 801973c:	921a      	str	r2, [sp, #104]	@ 0x68
 801973e:	9005      	str	r0, [sp, #20]
 8019740:	f04f 0a00 	mov.w	sl, #0
 8019744:	f04f 0b00 	mov.w	fp, #0
 8019748:	460a      	mov	r2, r1
 801974a:	9219      	str	r2, [sp, #100]	@ 0x64
 801974c:	7811      	ldrb	r1, [r2, #0]
 801974e:	292b      	cmp	r1, #43	@ 0x2b
 8019750:	d04a      	beq.n	80197e8 <_strtod_l+0xb8>
 8019752:	d838      	bhi.n	80197c6 <_strtod_l+0x96>
 8019754:	290d      	cmp	r1, #13
 8019756:	d832      	bhi.n	80197be <_strtod_l+0x8e>
 8019758:	2908      	cmp	r1, #8
 801975a:	d832      	bhi.n	80197c2 <_strtod_l+0x92>
 801975c:	2900      	cmp	r1, #0
 801975e:	d03b      	beq.n	80197d8 <_strtod_l+0xa8>
 8019760:	2200      	movs	r2, #0
 8019762:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019764:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8019766:	782a      	ldrb	r2, [r5, #0]
 8019768:	2a30      	cmp	r2, #48	@ 0x30
 801976a:	f040 80b3 	bne.w	80198d4 <_strtod_l+0x1a4>
 801976e:	786a      	ldrb	r2, [r5, #1]
 8019770:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019774:	2a58      	cmp	r2, #88	@ 0x58
 8019776:	d16e      	bne.n	8019856 <_strtod_l+0x126>
 8019778:	9302      	str	r3, [sp, #8]
 801977a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801977c:	9301      	str	r3, [sp, #4]
 801977e:	ab1a      	add	r3, sp, #104	@ 0x68
 8019780:	9300      	str	r3, [sp, #0]
 8019782:	4a8e      	ldr	r2, [pc, #568]	@ (80199bc <_strtod_l+0x28c>)
 8019784:	9805      	ldr	r0, [sp, #20]
 8019786:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019788:	a919      	add	r1, sp, #100	@ 0x64
 801978a:	f002 febf 	bl	801c50c <__gethex>
 801978e:	f010 060f 	ands.w	r6, r0, #15
 8019792:	4604      	mov	r4, r0
 8019794:	d005      	beq.n	80197a2 <_strtod_l+0x72>
 8019796:	2e06      	cmp	r6, #6
 8019798:	d128      	bne.n	80197ec <_strtod_l+0xbc>
 801979a:	3501      	adds	r5, #1
 801979c:	2300      	movs	r3, #0
 801979e:	9519      	str	r5, [sp, #100]	@ 0x64
 80197a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80197a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	f040 858e 	bne.w	801a2c6 <_strtod_l+0xb96>
 80197aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80197ac:	b1cb      	cbz	r3, 80197e2 <_strtod_l+0xb2>
 80197ae:	4652      	mov	r2, sl
 80197b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80197b4:	ec43 2b10 	vmov	d0, r2, r3
 80197b8:	b01f      	add	sp, #124	@ 0x7c
 80197ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197be:	2920      	cmp	r1, #32
 80197c0:	d1ce      	bne.n	8019760 <_strtod_l+0x30>
 80197c2:	3201      	adds	r2, #1
 80197c4:	e7c1      	b.n	801974a <_strtod_l+0x1a>
 80197c6:	292d      	cmp	r1, #45	@ 0x2d
 80197c8:	d1ca      	bne.n	8019760 <_strtod_l+0x30>
 80197ca:	2101      	movs	r1, #1
 80197cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80197ce:	1c51      	adds	r1, r2, #1
 80197d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80197d2:	7852      	ldrb	r2, [r2, #1]
 80197d4:	2a00      	cmp	r2, #0
 80197d6:	d1c5      	bne.n	8019764 <_strtod_l+0x34>
 80197d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80197da:	9419      	str	r4, [sp, #100]	@ 0x64
 80197dc:	2b00      	cmp	r3, #0
 80197de:	f040 8570 	bne.w	801a2c2 <_strtod_l+0xb92>
 80197e2:	4652      	mov	r2, sl
 80197e4:	465b      	mov	r3, fp
 80197e6:	e7e5      	b.n	80197b4 <_strtod_l+0x84>
 80197e8:	2100      	movs	r1, #0
 80197ea:	e7ef      	b.n	80197cc <_strtod_l+0x9c>
 80197ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80197ee:	b13a      	cbz	r2, 8019800 <_strtod_l+0xd0>
 80197f0:	2135      	movs	r1, #53	@ 0x35
 80197f2:	a81c      	add	r0, sp, #112	@ 0x70
 80197f4:	f003 fddc 	bl	801d3b0 <__copybits>
 80197f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80197fa:	9805      	ldr	r0, [sp, #20]
 80197fc:	f003 f9aa 	bl	801cb54 <_Bfree>
 8019800:	3e01      	subs	r6, #1
 8019802:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019804:	2e04      	cmp	r6, #4
 8019806:	d806      	bhi.n	8019816 <_strtod_l+0xe6>
 8019808:	e8df f006 	tbb	[pc, r6]
 801980c:	201d0314 	.word	0x201d0314
 8019810:	14          	.byte	0x14
 8019811:	00          	.byte	0x00
 8019812:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8019816:	05e1      	lsls	r1, r4, #23
 8019818:	bf48      	it	mi
 801981a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801981e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019822:	0d1b      	lsrs	r3, r3, #20
 8019824:	051b      	lsls	r3, r3, #20
 8019826:	2b00      	cmp	r3, #0
 8019828:	d1bb      	bne.n	80197a2 <_strtod_l+0x72>
 801982a:	f001 ff01 	bl	801b630 <__errno>
 801982e:	2322      	movs	r3, #34	@ 0x22
 8019830:	6003      	str	r3, [r0, #0]
 8019832:	e7b6      	b.n	80197a2 <_strtod_l+0x72>
 8019834:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8019838:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801983c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019840:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019844:	e7e7      	b.n	8019816 <_strtod_l+0xe6>
 8019846:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80199c4 <_strtod_l+0x294>
 801984a:	e7e4      	b.n	8019816 <_strtod_l+0xe6>
 801984c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019850:	f04f 3aff 	mov.w	sl, #4294967295
 8019854:	e7df      	b.n	8019816 <_strtod_l+0xe6>
 8019856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019858:	1c5a      	adds	r2, r3, #1
 801985a:	9219      	str	r2, [sp, #100]	@ 0x64
 801985c:	785b      	ldrb	r3, [r3, #1]
 801985e:	2b30      	cmp	r3, #48	@ 0x30
 8019860:	d0f9      	beq.n	8019856 <_strtod_l+0x126>
 8019862:	2b00      	cmp	r3, #0
 8019864:	d09d      	beq.n	80197a2 <_strtod_l+0x72>
 8019866:	2301      	movs	r3, #1
 8019868:	9309      	str	r3, [sp, #36]	@ 0x24
 801986a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801986c:	930c      	str	r3, [sp, #48]	@ 0x30
 801986e:	2300      	movs	r3, #0
 8019870:	9308      	str	r3, [sp, #32]
 8019872:	930a      	str	r3, [sp, #40]	@ 0x28
 8019874:	461f      	mov	r7, r3
 8019876:	220a      	movs	r2, #10
 8019878:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801987a:	7805      	ldrb	r5, [r0, #0]
 801987c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019880:	b2d9      	uxtb	r1, r3
 8019882:	2909      	cmp	r1, #9
 8019884:	d928      	bls.n	80198d8 <_strtod_l+0x1a8>
 8019886:	494e      	ldr	r1, [pc, #312]	@ (80199c0 <_strtod_l+0x290>)
 8019888:	2201      	movs	r2, #1
 801988a:	f001 fdf2 	bl	801b472 <strncmp>
 801988e:	2800      	cmp	r0, #0
 8019890:	d032      	beq.n	80198f8 <_strtod_l+0x1c8>
 8019892:	2000      	movs	r0, #0
 8019894:	462a      	mov	r2, r5
 8019896:	4681      	mov	r9, r0
 8019898:	463d      	mov	r5, r7
 801989a:	4603      	mov	r3, r0
 801989c:	2a65      	cmp	r2, #101	@ 0x65
 801989e:	d001      	beq.n	80198a4 <_strtod_l+0x174>
 80198a0:	2a45      	cmp	r2, #69	@ 0x45
 80198a2:	d114      	bne.n	80198ce <_strtod_l+0x19e>
 80198a4:	b91d      	cbnz	r5, 80198ae <_strtod_l+0x17e>
 80198a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80198a8:	4302      	orrs	r2, r0
 80198aa:	d095      	beq.n	80197d8 <_strtod_l+0xa8>
 80198ac:	2500      	movs	r5, #0
 80198ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80198b0:	1c62      	adds	r2, r4, #1
 80198b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80198b4:	7862      	ldrb	r2, [r4, #1]
 80198b6:	2a2b      	cmp	r2, #43	@ 0x2b
 80198b8:	d077      	beq.n	80199aa <_strtod_l+0x27a>
 80198ba:	2a2d      	cmp	r2, #45	@ 0x2d
 80198bc:	d07b      	beq.n	80199b6 <_strtod_l+0x286>
 80198be:	f04f 0c00 	mov.w	ip, #0
 80198c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80198c6:	2909      	cmp	r1, #9
 80198c8:	f240 8082 	bls.w	80199d0 <_strtod_l+0x2a0>
 80198cc:	9419      	str	r4, [sp, #100]	@ 0x64
 80198ce:	f04f 0800 	mov.w	r8, #0
 80198d2:	e0a2      	b.n	8019a1a <_strtod_l+0x2ea>
 80198d4:	2300      	movs	r3, #0
 80198d6:	e7c7      	b.n	8019868 <_strtod_l+0x138>
 80198d8:	2f08      	cmp	r7, #8
 80198da:	bfd5      	itete	le
 80198dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80198de:	9908      	ldrgt	r1, [sp, #32]
 80198e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80198e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80198e8:	f100 0001 	add.w	r0, r0, #1
 80198ec:	bfd4      	ite	le
 80198ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 80198f0:	9308      	strgt	r3, [sp, #32]
 80198f2:	3701      	adds	r7, #1
 80198f4:	9019      	str	r0, [sp, #100]	@ 0x64
 80198f6:	e7bf      	b.n	8019878 <_strtod_l+0x148>
 80198f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80198fa:	1c5a      	adds	r2, r3, #1
 80198fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80198fe:	785a      	ldrb	r2, [r3, #1]
 8019900:	b37f      	cbz	r7, 8019962 <_strtod_l+0x232>
 8019902:	4681      	mov	r9, r0
 8019904:	463d      	mov	r5, r7
 8019906:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801990a:	2b09      	cmp	r3, #9
 801990c:	d912      	bls.n	8019934 <_strtod_l+0x204>
 801990e:	2301      	movs	r3, #1
 8019910:	e7c4      	b.n	801989c <_strtod_l+0x16c>
 8019912:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019914:	1c5a      	adds	r2, r3, #1
 8019916:	9219      	str	r2, [sp, #100]	@ 0x64
 8019918:	785a      	ldrb	r2, [r3, #1]
 801991a:	3001      	adds	r0, #1
 801991c:	2a30      	cmp	r2, #48	@ 0x30
 801991e:	d0f8      	beq.n	8019912 <_strtod_l+0x1e2>
 8019920:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8019924:	2b08      	cmp	r3, #8
 8019926:	f200 84d3 	bhi.w	801a2d0 <_strtod_l+0xba0>
 801992a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801992c:	930c      	str	r3, [sp, #48]	@ 0x30
 801992e:	4681      	mov	r9, r0
 8019930:	2000      	movs	r0, #0
 8019932:	4605      	mov	r5, r0
 8019934:	3a30      	subs	r2, #48	@ 0x30
 8019936:	f100 0301 	add.w	r3, r0, #1
 801993a:	d02a      	beq.n	8019992 <_strtod_l+0x262>
 801993c:	4499      	add	r9, r3
 801993e:	eb00 0c05 	add.w	ip, r0, r5
 8019942:	462b      	mov	r3, r5
 8019944:	210a      	movs	r1, #10
 8019946:	4563      	cmp	r3, ip
 8019948:	d10d      	bne.n	8019966 <_strtod_l+0x236>
 801994a:	1c69      	adds	r1, r5, #1
 801994c:	4401      	add	r1, r0
 801994e:	4428      	add	r0, r5
 8019950:	2808      	cmp	r0, #8
 8019952:	dc16      	bgt.n	8019982 <_strtod_l+0x252>
 8019954:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019956:	230a      	movs	r3, #10
 8019958:	fb03 2300 	mla	r3, r3, r0, r2
 801995c:	930a      	str	r3, [sp, #40]	@ 0x28
 801995e:	2300      	movs	r3, #0
 8019960:	e018      	b.n	8019994 <_strtod_l+0x264>
 8019962:	4638      	mov	r0, r7
 8019964:	e7da      	b.n	801991c <_strtod_l+0x1ec>
 8019966:	2b08      	cmp	r3, #8
 8019968:	f103 0301 	add.w	r3, r3, #1
 801996c:	dc03      	bgt.n	8019976 <_strtod_l+0x246>
 801996e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019970:	434e      	muls	r6, r1
 8019972:	960a      	str	r6, [sp, #40]	@ 0x28
 8019974:	e7e7      	b.n	8019946 <_strtod_l+0x216>
 8019976:	2b10      	cmp	r3, #16
 8019978:	bfde      	ittt	le
 801997a:	9e08      	ldrle	r6, [sp, #32]
 801997c:	434e      	mulle	r6, r1
 801997e:	9608      	strle	r6, [sp, #32]
 8019980:	e7e1      	b.n	8019946 <_strtod_l+0x216>
 8019982:	280f      	cmp	r0, #15
 8019984:	dceb      	bgt.n	801995e <_strtod_l+0x22e>
 8019986:	9808      	ldr	r0, [sp, #32]
 8019988:	230a      	movs	r3, #10
 801998a:	fb03 2300 	mla	r3, r3, r0, r2
 801998e:	9308      	str	r3, [sp, #32]
 8019990:	e7e5      	b.n	801995e <_strtod_l+0x22e>
 8019992:	4629      	mov	r1, r5
 8019994:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019996:	1c50      	adds	r0, r2, #1
 8019998:	9019      	str	r0, [sp, #100]	@ 0x64
 801999a:	7852      	ldrb	r2, [r2, #1]
 801999c:	4618      	mov	r0, r3
 801999e:	460d      	mov	r5, r1
 80199a0:	e7b1      	b.n	8019906 <_strtod_l+0x1d6>
 80199a2:	f04f 0900 	mov.w	r9, #0
 80199a6:	2301      	movs	r3, #1
 80199a8:	e77d      	b.n	80198a6 <_strtod_l+0x176>
 80199aa:	f04f 0c00 	mov.w	ip, #0
 80199ae:	1ca2      	adds	r2, r4, #2
 80199b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80199b2:	78a2      	ldrb	r2, [r4, #2]
 80199b4:	e785      	b.n	80198c2 <_strtod_l+0x192>
 80199b6:	f04f 0c01 	mov.w	ip, #1
 80199ba:	e7f8      	b.n	80199ae <_strtod_l+0x27e>
 80199bc:	08021b2c 	.word	0x08021b2c
 80199c0:	08021b14 	.word	0x08021b14
 80199c4:	7ff00000 	.word	0x7ff00000
 80199c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80199ca:	1c51      	adds	r1, r2, #1
 80199cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80199ce:	7852      	ldrb	r2, [r2, #1]
 80199d0:	2a30      	cmp	r2, #48	@ 0x30
 80199d2:	d0f9      	beq.n	80199c8 <_strtod_l+0x298>
 80199d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80199d8:	2908      	cmp	r1, #8
 80199da:	f63f af78 	bhi.w	80198ce <_strtod_l+0x19e>
 80199de:	3a30      	subs	r2, #48	@ 0x30
 80199e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80199e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80199e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80199e6:	f04f 080a 	mov.w	r8, #10
 80199ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80199ec:	1c56      	adds	r6, r2, #1
 80199ee:	9619      	str	r6, [sp, #100]	@ 0x64
 80199f0:	7852      	ldrb	r2, [r2, #1]
 80199f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80199f6:	f1be 0f09 	cmp.w	lr, #9
 80199fa:	d939      	bls.n	8019a70 <_strtod_l+0x340>
 80199fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80199fe:	1a76      	subs	r6, r6, r1
 8019a00:	2e08      	cmp	r6, #8
 8019a02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8019a06:	dc03      	bgt.n	8019a10 <_strtod_l+0x2e0>
 8019a08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019a0a:	4588      	cmp	r8, r1
 8019a0c:	bfa8      	it	ge
 8019a0e:	4688      	movge	r8, r1
 8019a10:	f1bc 0f00 	cmp.w	ip, #0
 8019a14:	d001      	beq.n	8019a1a <_strtod_l+0x2ea>
 8019a16:	f1c8 0800 	rsb	r8, r8, #0
 8019a1a:	2d00      	cmp	r5, #0
 8019a1c:	d14e      	bne.n	8019abc <_strtod_l+0x38c>
 8019a1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019a20:	4308      	orrs	r0, r1
 8019a22:	f47f aebe 	bne.w	80197a2 <_strtod_l+0x72>
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	f47f aed6 	bne.w	80197d8 <_strtod_l+0xa8>
 8019a2c:	2a69      	cmp	r2, #105	@ 0x69
 8019a2e:	d028      	beq.n	8019a82 <_strtod_l+0x352>
 8019a30:	dc25      	bgt.n	8019a7e <_strtod_l+0x34e>
 8019a32:	2a49      	cmp	r2, #73	@ 0x49
 8019a34:	d025      	beq.n	8019a82 <_strtod_l+0x352>
 8019a36:	2a4e      	cmp	r2, #78	@ 0x4e
 8019a38:	f47f aece 	bne.w	80197d8 <_strtod_l+0xa8>
 8019a3c:	499b      	ldr	r1, [pc, #620]	@ (8019cac <_strtod_l+0x57c>)
 8019a3e:	a819      	add	r0, sp, #100	@ 0x64
 8019a40:	f002 ff86 	bl	801c950 <__match>
 8019a44:	2800      	cmp	r0, #0
 8019a46:	f43f aec7 	beq.w	80197d8 <_strtod_l+0xa8>
 8019a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019a4c:	781b      	ldrb	r3, [r3, #0]
 8019a4e:	2b28      	cmp	r3, #40	@ 0x28
 8019a50:	d12e      	bne.n	8019ab0 <_strtod_l+0x380>
 8019a52:	4997      	ldr	r1, [pc, #604]	@ (8019cb0 <_strtod_l+0x580>)
 8019a54:	aa1c      	add	r2, sp, #112	@ 0x70
 8019a56:	a819      	add	r0, sp, #100	@ 0x64
 8019a58:	f002 ff8e 	bl	801c978 <__hexnan>
 8019a5c:	2805      	cmp	r0, #5
 8019a5e:	d127      	bne.n	8019ab0 <_strtod_l+0x380>
 8019a60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019a62:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8019a66:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019a6a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019a6e:	e698      	b.n	80197a2 <_strtod_l+0x72>
 8019a70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019a72:	fb08 2101 	mla	r1, r8, r1, r2
 8019a76:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019a7a:	920e      	str	r2, [sp, #56]	@ 0x38
 8019a7c:	e7b5      	b.n	80199ea <_strtod_l+0x2ba>
 8019a7e:	2a6e      	cmp	r2, #110	@ 0x6e
 8019a80:	e7da      	b.n	8019a38 <_strtod_l+0x308>
 8019a82:	498c      	ldr	r1, [pc, #560]	@ (8019cb4 <_strtod_l+0x584>)
 8019a84:	a819      	add	r0, sp, #100	@ 0x64
 8019a86:	f002 ff63 	bl	801c950 <__match>
 8019a8a:	2800      	cmp	r0, #0
 8019a8c:	f43f aea4 	beq.w	80197d8 <_strtod_l+0xa8>
 8019a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019a92:	4989      	ldr	r1, [pc, #548]	@ (8019cb8 <_strtod_l+0x588>)
 8019a94:	3b01      	subs	r3, #1
 8019a96:	a819      	add	r0, sp, #100	@ 0x64
 8019a98:	9319      	str	r3, [sp, #100]	@ 0x64
 8019a9a:	f002 ff59 	bl	801c950 <__match>
 8019a9e:	b910      	cbnz	r0, 8019aa6 <_strtod_l+0x376>
 8019aa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019aa2:	3301      	adds	r3, #1
 8019aa4:	9319      	str	r3, [sp, #100]	@ 0x64
 8019aa6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8019cc8 <_strtod_l+0x598>
 8019aaa:	f04f 0a00 	mov.w	sl, #0
 8019aae:	e678      	b.n	80197a2 <_strtod_l+0x72>
 8019ab0:	4882      	ldr	r0, [pc, #520]	@ (8019cbc <_strtod_l+0x58c>)
 8019ab2:	f001 fe01 	bl	801b6b8 <nan>
 8019ab6:	ec5b ab10 	vmov	sl, fp, d0
 8019aba:	e672      	b.n	80197a2 <_strtod_l+0x72>
 8019abc:	eba8 0309 	sub.w	r3, r8, r9
 8019ac0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ac4:	2f00      	cmp	r7, #0
 8019ac6:	bf08      	it	eq
 8019ac8:	462f      	moveq	r7, r5
 8019aca:	2d10      	cmp	r5, #16
 8019acc:	462c      	mov	r4, r5
 8019ace:	bfa8      	it	ge
 8019ad0:	2410      	movge	r4, #16
 8019ad2:	f7e6 fcef 	bl	80004b4 <__aeabi_ui2d>
 8019ad6:	2d09      	cmp	r5, #9
 8019ad8:	4682      	mov	sl, r0
 8019ada:	468b      	mov	fp, r1
 8019adc:	dc13      	bgt.n	8019b06 <_strtod_l+0x3d6>
 8019ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	f43f ae5e 	beq.w	80197a2 <_strtod_l+0x72>
 8019ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ae8:	dd78      	ble.n	8019bdc <_strtod_l+0x4ac>
 8019aea:	2b16      	cmp	r3, #22
 8019aec:	dc5f      	bgt.n	8019bae <_strtod_l+0x47e>
 8019aee:	4974      	ldr	r1, [pc, #464]	@ (8019cc0 <_strtod_l+0x590>)
 8019af0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019af8:	4652      	mov	r2, sl
 8019afa:	465b      	mov	r3, fp
 8019afc:	f7e6 fd54 	bl	80005a8 <__aeabi_dmul>
 8019b00:	4682      	mov	sl, r0
 8019b02:	468b      	mov	fp, r1
 8019b04:	e64d      	b.n	80197a2 <_strtod_l+0x72>
 8019b06:	4b6e      	ldr	r3, [pc, #440]	@ (8019cc0 <_strtod_l+0x590>)
 8019b08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019b0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8019b10:	f7e6 fd4a 	bl	80005a8 <__aeabi_dmul>
 8019b14:	4682      	mov	sl, r0
 8019b16:	9808      	ldr	r0, [sp, #32]
 8019b18:	468b      	mov	fp, r1
 8019b1a:	f7e6 fccb 	bl	80004b4 <__aeabi_ui2d>
 8019b1e:	4602      	mov	r2, r0
 8019b20:	460b      	mov	r3, r1
 8019b22:	4650      	mov	r0, sl
 8019b24:	4659      	mov	r1, fp
 8019b26:	f7e6 fb89 	bl	800023c <__adddf3>
 8019b2a:	2d0f      	cmp	r5, #15
 8019b2c:	4682      	mov	sl, r0
 8019b2e:	468b      	mov	fp, r1
 8019b30:	ddd5      	ble.n	8019ade <_strtod_l+0x3ae>
 8019b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b34:	1b2c      	subs	r4, r5, r4
 8019b36:	441c      	add	r4, r3
 8019b38:	2c00      	cmp	r4, #0
 8019b3a:	f340 8096 	ble.w	8019c6a <_strtod_l+0x53a>
 8019b3e:	f014 030f 	ands.w	r3, r4, #15
 8019b42:	d00a      	beq.n	8019b5a <_strtod_l+0x42a>
 8019b44:	495e      	ldr	r1, [pc, #376]	@ (8019cc0 <_strtod_l+0x590>)
 8019b46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019b4a:	4652      	mov	r2, sl
 8019b4c:	465b      	mov	r3, fp
 8019b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b52:	f7e6 fd29 	bl	80005a8 <__aeabi_dmul>
 8019b56:	4682      	mov	sl, r0
 8019b58:	468b      	mov	fp, r1
 8019b5a:	f034 040f 	bics.w	r4, r4, #15
 8019b5e:	d073      	beq.n	8019c48 <_strtod_l+0x518>
 8019b60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019b64:	dd48      	ble.n	8019bf8 <_strtod_l+0x4c8>
 8019b66:	2400      	movs	r4, #0
 8019b68:	46a0      	mov	r8, r4
 8019b6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8019b6c:	46a1      	mov	r9, r4
 8019b6e:	9a05      	ldr	r2, [sp, #20]
 8019b70:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019cc8 <_strtod_l+0x598>
 8019b74:	2322      	movs	r3, #34	@ 0x22
 8019b76:	6013      	str	r3, [r2, #0]
 8019b78:	f04f 0a00 	mov.w	sl, #0
 8019b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	f43f ae0f 	beq.w	80197a2 <_strtod_l+0x72>
 8019b84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019b86:	9805      	ldr	r0, [sp, #20]
 8019b88:	f002 ffe4 	bl	801cb54 <_Bfree>
 8019b8c:	9805      	ldr	r0, [sp, #20]
 8019b8e:	4649      	mov	r1, r9
 8019b90:	f002 ffe0 	bl	801cb54 <_Bfree>
 8019b94:	9805      	ldr	r0, [sp, #20]
 8019b96:	4641      	mov	r1, r8
 8019b98:	f002 ffdc 	bl	801cb54 <_Bfree>
 8019b9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019b9e:	9805      	ldr	r0, [sp, #20]
 8019ba0:	f002 ffd8 	bl	801cb54 <_Bfree>
 8019ba4:	9805      	ldr	r0, [sp, #20]
 8019ba6:	4621      	mov	r1, r4
 8019ba8:	f002 ffd4 	bl	801cb54 <_Bfree>
 8019bac:	e5f9      	b.n	80197a2 <_strtod_l+0x72>
 8019bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019bb0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019bb4:	4293      	cmp	r3, r2
 8019bb6:	dbbc      	blt.n	8019b32 <_strtod_l+0x402>
 8019bb8:	4c41      	ldr	r4, [pc, #260]	@ (8019cc0 <_strtod_l+0x590>)
 8019bba:	f1c5 050f 	rsb	r5, r5, #15
 8019bbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019bc2:	4652      	mov	r2, sl
 8019bc4:	465b      	mov	r3, fp
 8019bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bca:	f7e6 fced 	bl	80005a8 <__aeabi_dmul>
 8019bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019bd0:	1b5d      	subs	r5, r3, r5
 8019bd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019bd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019bda:	e78f      	b.n	8019afc <_strtod_l+0x3cc>
 8019bdc:	3316      	adds	r3, #22
 8019bde:	dba8      	blt.n	8019b32 <_strtod_l+0x402>
 8019be0:	4b37      	ldr	r3, [pc, #220]	@ (8019cc0 <_strtod_l+0x590>)
 8019be2:	eba9 0808 	sub.w	r8, r9, r8
 8019be6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019bea:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019bee:	4650      	mov	r0, sl
 8019bf0:	4659      	mov	r1, fp
 8019bf2:	f7e6 fe03 	bl	80007fc <__aeabi_ddiv>
 8019bf6:	e783      	b.n	8019b00 <_strtod_l+0x3d0>
 8019bf8:	4b32      	ldr	r3, [pc, #200]	@ (8019cc4 <_strtod_l+0x594>)
 8019bfa:	9308      	str	r3, [sp, #32]
 8019bfc:	2300      	movs	r3, #0
 8019bfe:	1124      	asrs	r4, r4, #4
 8019c00:	4650      	mov	r0, sl
 8019c02:	4659      	mov	r1, fp
 8019c04:	461e      	mov	r6, r3
 8019c06:	2c01      	cmp	r4, #1
 8019c08:	dc21      	bgt.n	8019c4e <_strtod_l+0x51e>
 8019c0a:	b10b      	cbz	r3, 8019c10 <_strtod_l+0x4e0>
 8019c0c:	4682      	mov	sl, r0
 8019c0e:	468b      	mov	fp, r1
 8019c10:	492c      	ldr	r1, [pc, #176]	@ (8019cc4 <_strtod_l+0x594>)
 8019c12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019c16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019c1a:	4652      	mov	r2, sl
 8019c1c:	465b      	mov	r3, fp
 8019c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c22:	f7e6 fcc1 	bl	80005a8 <__aeabi_dmul>
 8019c26:	4b28      	ldr	r3, [pc, #160]	@ (8019cc8 <_strtod_l+0x598>)
 8019c28:	460a      	mov	r2, r1
 8019c2a:	400b      	ands	r3, r1
 8019c2c:	4927      	ldr	r1, [pc, #156]	@ (8019ccc <_strtod_l+0x59c>)
 8019c2e:	428b      	cmp	r3, r1
 8019c30:	4682      	mov	sl, r0
 8019c32:	d898      	bhi.n	8019b66 <_strtod_l+0x436>
 8019c34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019c38:	428b      	cmp	r3, r1
 8019c3a:	bf86      	itte	hi
 8019c3c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8019cd0 <_strtod_l+0x5a0>
 8019c40:	f04f 3aff 	movhi.w	sl, #4294967295
 8019c44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019c48:	2300      	movs	r3, #0
 8019c4a:	9308      	str	r3, [sp, #32]
 8019c4c:	e07a      	b.n	8019d44 <_strtod_l+0x614>
 8019c4e:	07e2      	lsls	r2, r4, #31
 8019c50:	d505      	bpl.n	8019c5e <_strtod_l+0x52e>
 8019c52:	9b08      	ldr	r3, [sp, #32]
 8019c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c58:	f7e6 fca6 	bl	80005a8 <__aeabi_dmul>
 8019c5c:	2301      	movs	r3, #1
 8019c5e:	9a08      	ldr	r2, [sp, #32]
 8019c60:	3208      	adds	r2, #8
 8019c62:	3601      	adds	r6, #1
 8019c64:	1064      	asrs	r4, r4, #1
 8019c66:	9208      	str	r2, [sp, #32]
 8019c68:	e7cd      	b.n	8019c06 <_strtod_l+0x4d6>
 8019c6a:	d0ed      	beq.n	8019c48 <_strtod_l+0x518>
 8019c6c:	4264      	negs	r4, r4
 8019c6e:	f014 020f 	ands.w	r2, r4, #15
 8019c72:	d00a      	beq.n	8019c8a <_strtod_l+0x55a>
 8019c74:	4b12      	ldr	r3, [pc, #72]	@ (8019cc0 <_strtod_l+0x590>)
 8019c76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019c7a:	4650      	mov	r0, sl
 8019c7c:	4659      	mov	r1, fp
 8019c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c82:	f7e6 fdbb 	bl	80007fc <__aeabi_ddiv>
 8019c86:	4682      	mov	sl, r0
 8019c88:	468b      	mov	fp, r1
 8019c8a:	1124      	asrs	r4, r4, #4
 8019c8c:	d0dc      	beq.n	8019c48 <_strtod_l+0x518>
 8019c8e:	2c1f      	cmp	r4, #31
 8019c90:	dd20      	ble.n	8019cd4 <_strtod_l+0x5a4>
 8019c92:	2400      	movs	r4, #0
 8019c94:	46a0      	mov	r8, r4
 8019c96:	940a      	str	r4, [sp, #40]	@ 0x28
 8019c98:	46a1      	mov	r9, r4
 8019c9a:	9a05      	ldr	r2, [sp, #20]
 8019c9c:	2322      	movs	r3, #34	@ 0x22
 8019c9e:	f04f 0a00 	mov.w	sl, #0
 8019ca2:	f04f 0b00 	mov.w	fp, #0
 8019ca6:	6013      	str	r3, [r2, #0]
 8019ca8:	e768      	b.n	8019b7c <_strtod_l+0x44c>
 8019caa:	bf00      	nop
 8019cac:	08021c76 	.word	0x08021c76
 8019cb0:	08021b18 	.word	0x08021b18
 8019cb4:	08021c6e 	.word	0x08021c6e
 8019cb8:	08021d5a 	.word	0x08021d5a
 8019cbc:	08021d56 	.word	0x08021d56
 8019cc0:	08021ec0 	.word	0x08021ec0
 8019cc4:	08021e98 	.word	0x08021e98
 8019cc8:	7ff00000 	.word	0x7ff00000
 8019ccc:	7ca00000 	.word	0x7ca00000
 8019cd0:	7fefffff 	.word	0x7fefffff
 8019cd4:	f014 0310 	ands.w	r3, r4, #16
 8019cd8:	bf18      	it	ne
 8019cda:	236a      	movne	r3, #106	@ 0x6a
 8019cdc:	4ea9      	ldr	r6, [pc, #676]	@ (8019f84 <_strtod_l+0x854>)
 8019cde:	9308      	str	r3, [sp, #32]
 8019ce0:	4650      	mov	r0, sl
 8019ce2:	4659      	mov	r1, fp
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	07e2      	lsls	r2, r4, #31
 8019ce8:	d504      	bpl.n	8019cf4 <_strtod_l+0x5c4>
 8019cea:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019cee:	f7e6 fc5b 	bl	80005a8 <__aeabi_dmul>
 8019cf2:	2301      	movs	r3, #1
 8019cf4:	1064      	asrs	r4, r4, #1
 8019cf6:	f106 0608 	add.w	r6, r6, #8
 8019cfa:	d1f4      	bne.n	8019ce6 <_strtod_l+0x5b6>
 8019cfc:	b10b      	cbz	r3, 8019d02 <_strtod_l+0x5d2>
 8019cfe:	4682      	mov	sl, r0
 8019d00:	468b      	mov	fp, r1
 8019d02:	9b08      	ldr	r3, [sp, #32]
 8019d04:	b1b3      	cbz	r3, 8019d34 <_strtod_l+0x604>
 8019d06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019d0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	4659      	mov	r1, fp
 8019d12:	dd0f      	ble.n	8019d34 <_strtod_l+0x604>
 8019d14:	2b1f      	cmp	r3, #31
 8019d16:	dd55      	ble.n	8019dc4 <_strtod_l+0x694>
 8019d18:	2b34      	cmp	r3, #52	@ 0x34
 8019d1a:	bfde      	ittt	le
 8019d1c:	f04f 33ff 	movle.w	r3, #4294967295
 8019d20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8019d24:	4093      	lslle	r3, r2
 8019d26:	f04f 0a00 	mov.w	sl, #0
 8019d2a:	bfcc      	ite	gt
 8019d2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8019d30:	ea03 0b01 	andle.w	fp, r3, r1
 8019d34:	2200      	movs	r2, #0
 8019d36:	2300      	movs	r3, #0
 8019d38:	4650      	mov	r0, sl
 8019d3a:	4659      	mov	r1, fp
 8019d3c:	f7e6 fe9c 	bl	8000a78 <__aeabi_dcmpeq>
 8019d40:	2800      	cmp	r0, #0
 8019d42:	d1a6      	bne.n	8019c92 <_strtod_l+0x562>
 8019d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d46:	9300      	str	r3, [sp, #0]
 8019d48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019d4a:	9805      	ldr	r0, [sp, #20]
 8019d4c:	462b      	mov	r3, r5
 8019d4e:	463a      	mov	r2, r7
 8019d50:	f002 ff68 	bl	801cc24 <__s2b>
 8019d54:	900a      	str	r0, [sp, #40]	@ 0x28
 8019d56:	2800      	cmp	r0, #0
 8019d58:	f43f af05 	beq.w	8019b66 <_strtod_l+0x436>
 8019d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019d5e:	2a00      	cmp	r2, #0
 8019d60:	eba9 0308 	sub.w	r3, r9, r8
 8019d64:	bfa8      	it	ge
 8019d66:	2300      	movge	r3, #0
 8019d68:	9312      	str	r3, [sp, #72]	@ 0x48
 8019d6a:	2400      	movs	r4, #0
 8019d6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019d70:	9316      	str	r3, [sp, #88]	@ 0x58
 8019d72:	46a0      	mov	r8, r4
 8019d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d76:	9805      	ldr	r0, [sp, #20]
 8019d78:	6859      	ldr	r1, [r3, #4]
 8019d7a:	f002 feab 	bl	801cad4 <_Balloc>
 8019d7e:	4681      	mov	r9, r0
 8019d80:	2800      	cmp	r0, #0
 8019d82:	f43f aef4 	beq.w	8019b6e <_strtod_l+0x43e>
 8019d86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d88:	691a      	ldr	r2, [r3, #16]
 8019d8a:	3202      	adds	r2, #2
 8019d8c:	f103 010c 	add.w	r1, r3, #12
 8019d90:	0092      	lsls	r2, r2, #2
 8019d92:	300c      	adds	r0, #12
 8019d94:	f001 fc81 	bl	801b69a <memcpy>
 8019d98:	ec4b ab10 	vmov	d0, sl, fp
 8019d9c:	9805      	ldr	r0, [sp, #20]
 8019d9e:	aa1c      	add	r2, sp, #112	@ 0x70
 8019da0:	a91b      	add	r1, sp, #108	@ 0x6c
 8019da2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8019da6:	f003 fa79 	bl	801d29c <__d2b>
 8019daa:	901a      	str	r0, [sp, #104]	@ 0x68
 8019dac:	2800      	cmp	r0, #0
 8019dae:	f43f aede 	beq.w	8019b6e <_strtod_l+0x43e>
 8019db2:	9805      	ldr	r0, [sp, #20]
 8019db4:	2101      	movs	r1, #1
 8019db6:	f002 ffcb 	bl	801cd50 <__i2b>
 8019dba:	4680      	mov	r8, r0
 8019dbc:	b948      	cbnz	r0, 8019dd2 <_strtod_l+0x6a2>
 8019dbe:	f04f 0800 	mov.w	r8, #0
 8019dc2:	e6d4      	b.n	8019b6e <_strtod_l+0x43e>
 8019dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8019dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8019dcc:	ea03 0a0a 	and.w	sl, r3, sl
 8019dd0:	e7b0      	b.n	8019d34 <_strtod_l+0x604>
 8019dd2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8019dd4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019dd6:	2d00      	cmp	r5, #0
 8019dd8:	bfab      	itete	ge
 8019dda:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8019ddc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8019dde:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8019de0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8019de2:	bfac      	ite	ge
 8019de4:	18ef      	addge	r7, r5, r3
 8019de6:	1b5e      	sublt	r6, r3, r5
 8019de8:	9b08      	ldr	r3, [sp, #32]
 8019dea:	1aed      	subs	r5, r5, r3
 8019dec:	4415      	add	r5, r2
 8019dee:	4b66      	ldr	r3, [pc, #408]	@ (8019f88 <_strtod_l+0x858>)
 8019df0:	3d01      	subs	r5, #1
 8019df2:	429d      	cmp	r5, r3
 8019df4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019df8:	da50      	bge.n	8019e9c <_strtod_l+0x76c>
 8019dfa:	1b5b      	subs	r3, r3, r5
 8019dfc:	2b1f      	cmp	r3, #31
 8019dfe:	eba2 0203 	sub.w	r2, r2, r3
 8019e02:	f04f 0101 	mov.w	r1, #1
 8019e06:	dc3d      	bgt.n	8019e84 <_strtod_l+0x754>
 8019e08:	fa01 f303 	lsl.w	r3, r1, r3
 8019e0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019e0e:	2300      	movs	r3, #0
 8019e10:	9310      	str	r3, [sp, #64]	@ 0x40
 8019e12:	18bd      	adds	r5, r7, r2
 8019e14:	9b08      	ldr	r3, [sp, #32]
 8019e16:	42af      	cmp	r7, r5
 8019e18:	4416      	add	r6, r2
 8019e1a:	441e      	add	r6, r3
 8019e1c:	463b      	mov	r3, r7
 8019e1e:	bfa8      	it	ge
 8019e20:	462b      	movge	r3, r5
 8019e22:	42b3      	cmp	r3, r6
 8019e24:	bfa8      	it	ge
 8019e26:	4633      	movge	r3, r6
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	bfc2      	ittt	gt
 8019e2c:	1aed      	subgt	r5, r5, r3
 8019e2e:	1af6      	subgt	r6, r6, r3
 8019e30:	1aff      	subgt	r7, r7, r3
 8019e32:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	dd16      	ble.n	8019e66 <_strtod_l+0x736>
 8019e38:	4641      	mov	r1, r8
 8019e3a:	9805      	ldr	r0, [sp, #20]
 8019e3c:	461a      	mov	r2, r3
 8019e3e:	f003 f847 	bl	801ced0 <__pow5mult>
 8019e42:	4680      	mov	r8, r0
 8019e44:	2800      	cmp	r0, #0
 8019e46:	d0ba      	beq.n	8019dbe <_strtod_l+0x68e>
 8019e48:	4601      	mov	r1, r0
 8019e4a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019e4c:	9805      	ldr	r0, [sp, #20]
 8019e4e:	f002 ff95 	bl	801cd7c <__multiply>
 8019e52:	900e      	str	r0, [sp, #56]	@ 0x38
 8019e54:	2800      	cmp	r0, #0
 8019e56:	f43f ae8a 	beq.w	8019b6e <_strtod_l+0x43e>
 8019e5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019e5c:	9805      	ldr	r0, [sp, #20]
 8019e5e:	f002 fe79 	bl	801cb54 <_Bfree>
 8019e62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e64:	931a      	str	r3, [sp, #104]	@ 0x68
 8019e66:	2d00      	cmp	r5, #0
 8019e68:	dc1d      	bgt.n	8019ea6 <_strtod_l+0x776>
 8019e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	dd23      	ble.n	8019eb8 <_strtod_l+0x788>
 8019e70:	4649      	mov	r1, r9
 8019e72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019e74:	9805      	ldr	r0, [sp, #20]
 8019e76:	f003 f82b 	bl	801ced0 <__pow5mult>
 8019e7a:	4681      	mov	r9, r0
 8019e7c:	b9e0      	cbnz	r0, 8019eb8 <_strtod_l+0x788>
 8019e7e:	f04f 0900 	mov.w	r9, #0
 8019e82:	e674      	b.n	8019b6e <_strtod_l+0x43e>
 8019e84:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8019e88:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8019e8c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8019e90:	35e2      	adds	r5, #226	@ 0xe2
 8019e92:	fa01 f305 	lsl.w	r3, r1, r5
 8019e96:	9310      	str	r3, [sp, #64]	@ 0x40
 8019e98:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019e9a:	e7ba      	b.n	8019e12 <_strtod_l+0x6e2>
 8019e9c:	2300      	movs	r3, #0
 8019e9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019ea0:	2301      	movs	r3, #1
 8019ea2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019ea4:	e7b5      	b.n	8019e12 <_strtod_l+0x6e2>
 8019ea6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019ea8:	9805      	ldr	r0, [sp, #20]
 8019eaa:	462a      	mov	r2, r5
 8019eac:	f003 f86a 	bl	801cf84 <__lshift>
 8019eb0:	901a      	str	r0, [sp, #104]	@ 0x68
 8019eb2:	2800      	cmp	r0, #0
 8019eb4:	d1d9      	bne.n	8019e6a <_strtod_l+0x73a>
 8019eb6:	e65a      	b.n	8019b6e <_strtod_l+0x43e>
 8019eb8:	2e00      	cmp	r6, #0
 8019eba:	dd07      	ble.n	8019ecc <_strtod_l+0x79c>
 8019ebc:	4649      	mov	r1, r9
 8019ebe:	9805      	ldr	r0, [sp, #20]
 8019ec0:	4632      	mov	r2, r6
 8019ec2:	f003 f85f 	bl	801cf84 <__lshift>
 8019ec6:	4681      	mov	r9, r0
 8019ec8:	2800      	cmp	r0, #0
 8019eca:	d0d8      	beq.n	8019e7e <_strtod_l+0x74e>
 8019ecc:	2f00      	cmp	r7, #0
 8019ece:	dd08      	ble.n	8019ee2 <_strtod_l+0x7b2>
 8019ed0:	4641      	mov	r1, r8
 8019ed2:	9805      	ldr	r0, [sp, #20]
 8019ed4:	463a      	mov	r2, r7
 8019ed6:	f003 f855 	bl	801cf84 <__lshift>
 8019eda:	4680      	mov	r8, r0
 8019edc:	2800      	cmp	r0, #0
 8019ede:	f43f ae46 	beq.w	8019b6e <_strtod_l+0x43e>
 8019ee2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019ee4:	9805      	ldr	r0, [sp, #20]
 8019ee6:	464a      	mov	r2, r9
 8019ee8:	f003 f8d4 	bl	801d094 <__mdiff>
 8019eec:	4604      	mov	r4, r0
 8019eee:	2800      	cmp	r0, #0
 8019ef0:	f43f ae3d 	beq.w	8019b6e <_strtod_l+0x43e>
 8019ef4:	68c3      	ldr	r3, [r0, #12]
 8019ef6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019ef8:	2300      	movs	r3, #0
 8019efa:	60c3      	str	r3, [r0, #12]
 8019efc:	4641      	mov	r1, r8
 8019efe:	f003 f8ad 	bl	801d05c <__mcmp>
 8019f02:	2800      	cmp	r0, #0
 8019f04:	da46      	bge.n	8019f94 <_strtod_l+0x864>
 8019f06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f08:	ea53 030a 	orrs.w	r3, r3, sl
 8019f0c:	d16c      	bne.n	8019fe8 <_strtod_l+0x8b8>
 8019f0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d168      	bne.n	8019fe8 <_strtod_l+0x8b8>
 8019f16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019f1a:	0d1b      	lsrs	r3, r3, #20
 8019f1c:	051b      	lsls	r3, r3, #20
 8019f1e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019f22:	d961      	bls.n	8019fe8 <_strtod_l+0x8b8>
 8019f24:	6963      	ldr	r3, [r4, #20]
 8019f26:	b913      	cbnz	r3, 8019f2e <_strtod_l+0x7fe>
 8019f28:	6923      	ldr	r3, [r4, #16]
 8019f2a:	2b01      	cmp	r3, #1
 8019f2c:	dd5c      	ble.n	8019fe8 <_strtod_l+0x8b8>
 8019f2e:	4621      	mov	r1, r4
 8019f30:	2201      	movs	r2, #1
 8019f32:	9805      	ldr	r0, [sp, #20]
 8019f34:	f003 f826 	bl	801cf84 <__lshift>
 8019f38:	4641      	mov	r1, r8
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	f003 f88e 	bl	801d05c <__mcmp>
 8019f40:	2800      	cmp	r0, #0
 8019f42:	dd51      	ble.n	8019fe8 <_strtod_l+0x8b8>
 8019f44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019f48:	9a08      	ldr	r2, [sp, #32]
 8019f4a:	0d1b      	lsrs	r3, r3, #20
 8019f4c:	051b      	lsls	r3, r3, #20
 8019f4e:	2a00      	cmp	r2, #0
 8019f50:	d06b      	beq.n	801a02a <_strtod_l+0x8fa>
 8019f52:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019f56:	d868      	bhi.n	801a02a <_strtod_l+0x8fa>
 8019f58:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8019f5c:	f67f ae9d 	bls.w	8019c9a <_strtod_l+0x56a>
 8019f60:	4b0a      	ldr	r3, [pc, #40]	@ (8019f8c <_strtod_l+0x85c>)
 8019f62:	4650      	mov	r0, sl
 8019f64:	4659      	mov	r1, fp
 8019f66:	2200      	movs	r2, #0
 8019f68:	f7e6 fb1e 	bl	80005a8 <__aeabi_dmul>
 8019f6c:	4b08      	ldr	r3, [pc, #32]	@ (8019f90 <_strtod_l+0x860>)
 8019f6e:	400b      	ands	r3, r1
 8019f70:	4682      	mov	sl, r0
 8019f72:	468b      	mov	fp, r1
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	f47f ae05 	bne.w	8019b84 <_strtod_l+0x454>
 8019f7a:	9a05      	ldr	r2, [sp, #20]
 8019f7c:	2322      	movs	r3, #34	@ 0x22
 8019f7e:	6013      	str	r3, [r2, #0]
 8019f80:	e600      	b.n	8019b84 <_strtod_l+0x454>
 8019f82:	bf00      	nop
 8019f84:	08021b40 	.word	0x08021b40
 8019f88:	fffffc02 	.word	0xfffffc02
 8019f8c:	39500000 	.word	0x39500000
 8019f90:	7ff00000 	.word	0x7ff00000
 8019f94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8019f98:	d165      	bne.n	801a066 <_strtod_l+0x936>
 8019f9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019fa0:	b35a      	cbz	r2, 8019ffa <_strtod_l+0x8ca>
 8019fa2:	4a9f      	ldr	r2, [pc, #636]	@ (801a220 <_strtod_l+0xaf0>)
 8019fa4:	4293      	cmp	r3, r2
 8019fa6:	d12b      	bne.n	801a000 <_strtod_l+0x8d0>
 8019fa8:	9b08      	ldr	r3, [sp, #32]
 8019faa:	4651      	mov	r1, sl
 8019fac:	b303      	cbz	r3, 8019ff0 <_strtod_l+0x8c0>
 8019fae:	4b9d      	ldr	r3, [pc, #628]	@ (801a224 <_strtod_l+0xaf4>)
 8019fb0:	465a      	mov	r2, fp
 8019fb2:	4013      	ands	r3, r2
 8019fb4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8019fbc:	d81b      	bhi.n	8019ff6 <_strtod_l+0x8c6>
 8019fbe:	0d1b      	lsrs	r3, r3, #20
 8019fc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8019fc8:	4299      	cmp	r1, r3
 8019fca:	d119      	bne.n	801a000 <_strtod_l+0x8d0>
 8019fcc:	4b96      	ldr	r3, [pc, #600]	@ (801a228 <_strtod_l+0xaf8>)
 8019fce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019fd0:	429a      	cmp	r2, r3
 8019fd2:	d102      	bne.n	8019fda <_strtod_l+0x8aa>
 8019fd4:	3101      	adds	r1, #1
 8019fd6:	f43f adca 	beq.w	8019b6e <_strtod_l+0x43e>
 8019fda:	4b92      	ldr	r3, [pc, #584]	@ (801a224 <_strtod_l+0xaf4>)
 8019fdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019fde:	401a      	ands	r2, r3
 8019fe0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8019fe4:	f04f 0a00 	mov.w	sl, #0
 8019fe8:	9b08      	ldr	r3, [sp, #32]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d1b8      	bne.n	8019f60 <_strtod_l+0x830>
 8019fee:	e5c9      	b.n	8019b84 <_strtod_l+0x454>
 8019ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8019ff4:	e7e8      	b.n	8019fc8 <_strtod_l+0x898>
 8019ff6:	4613      	mov	r3, r2
 8019ff8:	e7e6      	b.n	8019fc8 <_strtod_l+0x898>
 8019ffa:	ea53 030a 	orrs.w	r3, r3, sl
 8019ffe:	d0a1      	beq.n	8019f44 <_strtod_l+0x814>
 801a000:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a002:	b1db      	cbz	r3, 801a03c <_strtod_l+0x90c>
 801a004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a006:	4213      	tst	r3, r2
 801a008:	d0ee      	beq.n	8019fe8 <_strtod_l+0x8b8>
 801a00a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a00c:	9a08      	ldr	r2, [sp, #32]
 801a00e:	4650      	mov	r0, sl
 801a010:	4659      	mov	r1, fp
 801a012:	b1bb      	cbz	r3, 801a044 <_strtod_l+0x914>
 801a014:	f7ff fb6c 	bl	80196f0 <sulp>
 801a018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a01c:	ec53 2b10 	vmov	r2, r3, d0
 801a020:	f7e6 f90c 	bl	800023c <__adddf3>
 801a024:	4682      	mov	sl, r0
 801a026:	468b      	mov	fp, r1
 801a028:	e7de      	b.n	8019fe8 <_strtod_l+0x8b8>
 801a02a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a02e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a032:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a036:	f04f 3aff 	mov.w	sl, #4294967295
 801a03a:	e7d5      	b.n	8019fe8 <_strtod_l+0x8b8>
 801a03c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a03e:	ea13 0f0a 	tst.w	r3, sl
 801a042:	e7e1      	b.n	801a008 <_strtod_l+0x8d8>
 801a044:	f7ff fb54 	bl	80196f0 <sulp>
 801a048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a04c:	ec53 2b10 	vmov	r2, r3, d0
 801a050:	f7e6 f8f2 	bl	8000238 <__aeabi_dsub>
 801a054:	2200      	movs	r2, #0
 801a056:	2300      	movs	r3, #0
 801a058:	4682      	mov	sl, r0
 801a05a:	468b      	mov	fp, r1
 801a05c:	f7e6 fd0c 	bl	8000a78 <__aeabi_dcmpeq>
 801a060:	2800      	cmp	r0, #0
 801a062:	d0c1      	beq.n	8019fe8 <_strtod_l+0x8b8>
 801a064:	e619      	b.n	8019c9a <_strtod_l+0x56a>
 801a066:	4641      	mov	r1, r8
 801a068:	4620      	mov	r0, r4
 801a06a:	f003 f96f 	bl	801d34c <__ratio>
 801a06e:	ec57 6b10 	vmov	r6, r7, d0
 801a072:	2200      	movs	r2, #0
 801a074:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a078:	4630      	mov	r0, r6
 801a07a:	4639      	mov	r1, r7
 801a07c:	f7e6 fd10 	bl	8000aa0 <__aeabi_dcmple>
 801a080:	2800      	cmp	r0, #0
 801a082:	d06f      	beq.n	801a164 <_strtod_l+0xa34>
 801a084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a086:	2b00      	cmp	r3, #0
 801a088:	d17a      	bne.n	801a180 <_strtod_l+0xa50>
 801a08a:	f1ba 0f00 	cmp.w	sl, #0
 801a08e:	d158      	bne.n	801a142 <_strtod_l+0xa12>
 801a090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a096:	2b00      	cmp	r3, #0
 801a098:	d15a      	bne.n	801a150 <_strtod_l+0xa20>
 801a09a:	4b64      	ldr	r3, [pc, #400]	@ (801a22c <_strtod_l+0xafc>)
 801a09c:	2200      	movs	r2, #0
 801a09e:	4630      	mov	r0, r6
 801a0a0:	4639      	mov	r1, r7
 801a0a2:	f7e6 fcf3 	bl	8000a8c <__aeabi_dcmplt>
 801a0a6:	2800      	cmp	r0, #0
 801a0a8:	d159      	bne.n	801a15e <_strtod_l+0xa2e>
 801a0aa:	4630      	mov	r0, r6
 801a0ac:	4639      	mov	r1, r7
 801a0ae:	4b60      	ldr	r3, [pc, #384]	@ (801a230 <_strtod_l+0xb00>)
 801a0b0:	2200      	movs	r2, #0
 801a0b2:	f7e6 fa79 	bl	80005a8 <__aeabi_dmul>
 801a0b6:	4606      	mov	r6, r0
 801a0b8:	460f      	mov	r7, r1
 801a0ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801a0be:	9606      	str	r6, [sp, #24]
 801a0c0:	9307      	str	r3, [sp, #28]
 801a0c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a0c6:	4d57      	ldr	r5, [pc, #348]	@ (801a224 <_strtod_l+0xaf4>)
 801a0c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a0cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a0ce:	401d      	ands	r5, r3
 801a0d0:	4b58      	ldr	r3, [pc, #352]	@ (801a234 <_strtod_l+0xb04>)
 801a0d2:	429d      	cmp	r5, r3
 801a0d4:	f040 80b2 	bne.w	801a23c <_strtod_l+0xb0c>
 801a0d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a0da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801a0de:	ec4b ab10 	vmov	d0, sl, fp
 801a0e2:	f003 f86b 	bl	801d1bc <__ulp>
 801a0e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a0ea:	ec51 0b10 	vmov	r0, r1, d0
 801a0ee:	f7e6 fa5b 	bl	80005a8 <__aeabi_dmul>
 801a0f2:	4652      	mov	r2, sl
 801a0f4:	465b      	mov	r3, fp
 801a0f6:	f7e6 f8a1 	bl	800023c <__adddf3>
 801a0fa:	460b      	mov	r3, r1
 801a0fc:	4949      	ldr	r1, [pc, #292]	@ (801a224 <_strtod_l+0xaf4>)
 801a0fe:	4a4e      	ldr	r2, [pc, #312]	@ (801a238 <_strtod_l+0xb08>)
 801a100:	4019      	ands	r1, r3
 801a102:	4291      	cmp	r1, r2
 801a104:	4682      	mov	sl, r0
 801a106:	d942      	bls.n	801a18e <_strtod_l+0xa5e>
 801a108:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a10a:	4b47      	ldr	r3, [pc, #284]	@ (801a228 <_strtod_l+0xaf8>)
 801a10c:	429a      	cmp	r2, r3
 801a10e:	d103      	bne.n	801a118 <_strtod_l+0x9e8>
 801a110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a112:	3301      	adds	r3, #1
 801a114:	f43f ad2b 	beq.w	8019b6e <_strtod_l+0x43e>
 801a118:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a228 <_strtod_l+0xaf8>
 801a11c:	f04f 3aff 	mov.w	sl, #4294967295
 801a120:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a122:	9805      	ldr	r0, [sp, #20]
 801a124:	f002 fd16 	bl	801cb54 <_Bfree>
 801a128:	9805      	ldr	r0, [sp, #20]
 801a12a:	4649      	mov	r1, r9
 801a12c:	f002 fd12 	bl	801cb54 <_Bfree>
 801a130:	9805      	ldr	r0, [sp, #20]
 801a132:	4641      	mov	r1, r8
 801a134:	f002 fd0e 	bl	801cb54 <_Bfree>
 801a138:	9805      	ldr	r0, [sp, #20]
 801a13a:	4621      	mov	r1, r4
 801a13c:	f002 fd0a 	bl	801cb54 <_Bfree>
 801a140:	e618      	b.n	8019d74 <_strtod_l+0x644>
 801a142:	f1ba 0f01 	cmp.w	sl, #1
 801a146:	d103      	bne.n	801a150 <_strtod_l+0xa20>
 801a148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	f43f ada5 	beq.w	8019c9a <_strtod_l+0x56a>
 801a150:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a200 <_strtod_l+0xad0>
 801a154:	4f35      	ldr	r7, [pc, #212]	@ (801a22c <_strtod_l+0xafc>)
 801a156:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a15a:	2600      	movs	r6, #0
 801a15c:	e7b1      	b.n	801a0c2 <_strtod_l+0x992>
 801a15e:	4f34      	ldr	r7, [pc, #208]	@ (801a230 <_strtod_l+0xb00>)
 801a160:	2600      	movs	r6, #0
 801a162:	e7aa      	b.n	801a0ba <_strtod_l+0x98a>
 801a164:	4b32      	ldr	r3, [pc, #200]	@ (801a230 <_strtod_l+0xb00>)
 801a166:	4630      	mov	r0, r6
 801a168:	4639      	mov	r1, r7
 801a16a:	2200      	movs	r2, #0
 801a16c:	f7e6 fa1c 	bl	80005a8 <__aeabi_dmul>
 801a170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a172:	4606      	mov	r6, r0
 801a174:	460f      	mov	r7, r1
 801a176:	2b00      	cmp	r3, #0
 801a178:	d09f      	beq.n	801a0ba <_strtod_l+0x98a>
 801a17a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a17e:	e7a0      	b.n	801a0c2 <_strtod_l+0x992>
 801a180:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a208 <_strtod_l+0xad8>
 801a184:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a188:	ec57 6b17 	vmov	r6, r7, d7
 801a18c:	e799      	b.n	801a0c2 <_strtod_l+0x992>
 801a18e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a192:	9b08      	ldr	r3, [sp, #32]
 801a194:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d1c1      	bne.n	801a120 <_strtod_l+0x9f0>
 801a19c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a1a0:	0d1b      	lsrs	r3, r3, #20
 801a1a2:	051b      	lsls	r3, r3, #20
 801a1a4:	429d      	cmp	r5, r3
 801a1a6:	d1bb      	bne.n	801a120 <_strtod_l+0x9f0>
 801a1a8:	4630      	mov	r0, r6
 801a1aa:	4639      	mov	r1, r7
 801a1ac:	f7e6 fd5c 	bl	8000c68 <__aeabi_d2lz>
 801a1b0:	f7e6 f9cc 	bl	800054c <__aeabi_l2d>
 801a1b4:	4602      	mov	r2, r0
 801a1b6:	460b      	mov	r3, r1
 801a1b8:	4630      	mov	r0, r6
 801a1ba:	4639      	mov	r1, r7
 801a1bc:	f7e6 f83c 	bl	8000238 <__aeabi_dsub>
 801a1c0:	460b      	mov	r3, r1
 801a1c2:	4602      	mov	r2, r0
 801a1c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a1c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a1ce:	ea46 060a 	orr.w	r6, r6, sl
 801a1d2:	431e      	orrs	r6, r3
 801a1d4:	d06f      	beq.n	801a2b6 <_strtod_l+0xb86>
 801a1d6:	a30e      	add	r3, pc, #56	@ (adr r3, 801a210 <_strtod_l+0xae0>)
 801a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1dc:	f7e6 fc56 	bl	8000a8c <__aeabi_dcmplt>
 801a1e0:	2800      	cmp	r0, #0
 801a1e2:	f47f accf 	bne.w	8019b84 <_strtod_l+0x454>
 801a1e6:	a30c      	add	r3, pc, #48	@ (adr r3, 801a218 <_strtod_l+0xae8>)
 801a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a1f0:	f7e6 fc6a 	bl	8000ac8 <__aeabi_dcmpgt>
 801a1f4:	2800      	cmp	r0, #0
 801a1f6:	d093      	beq.n	801a120 <_strtod_l+0x9f0>
 801a1f8:	e4c4      	b.n	8019b84 <_strtod_l+0x454>
 801a1fa:	bf00      	nop
 801a1fc:	f3af 8000 	nop.w
 801a200:	00000000 	.word	0x00000000
 801a204:	bff00000 	.word	0xbff00000
 801a208:	00000000 	.word	0x00000000
 801a20c:	3ff00000 	.word	0x3ff00000
 801a210:	94a03595 	.word	0x94a03595
 801a214:	3fdfffff 	.word	0x3fdfffff
 801a218:	35afe535 	.word	0x35afe535
 801a21c:	3fe00000 	.word	0x3fe00000
 801a220:	000fffff 	.word	0x000fffff
 801a224:	7ff00000 	.word	0x7ff00000
 801a228:	7fefffff 	.word	0x7fefffff
 801a22c:	3ff00000 	.word	0x3ff00000
 801a230:	3fe00000 	.word	0x3fe00000
 801a234:	7fe00000 	.word	0x7fe00000
 801a238:	7c9fffff 	.word	0x7c9fffff
 801a23c:	9b08      	ldr	r3, [sp, #32]
 801a23e:	b323      	cbz	r3, 801a28a <_strtod_l+0xb5a>
 801a240:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a244:	d821      	bhi.n	801a28a <_strtod_l+0xb5a>
 801a246:	a328      	add	r3, pc, #160	@ (adr r3, 801a2e8 <_strtod_l+0xbb8>)
 801a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a24c:	4630      	mov	r0, r6
 801a24e:	4639      	mov	r1, r7
 801a250:	f7e6 fc26 	bl	8000aa0 <__aeabi_dcmple>
 801a254:	b1a0      	cbz	r0, 801a280 <_strtod_l+0xb50>
 801a256:	4639      	mov	r1, r7
 801a258:	4630      	mov	r0, r6
 801a25a:	f7e6 fc7d 	bl	8000b58 <__aeabi_d2uiz>
 801a25e:	2801      	cmp	r0, #1
 801a260:	bf38      	it	cc
 801a262:	2001      	movcc	r0, #1
 801a264:	f7e6 f926 	bl	80004b4 <__aeabi_ui2d>
 801a268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a26a:	4606      	mov	r6, r0
 801a26c:	460f      	mov	r7, r1
 801a26e:	b9fb      	cbnz	r3, 801a2b0 <_strtod_l+0xb80>
 801a270:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a274:	9014      	str	r0, [sp, #80]	@ 0x50
 801a276:	9315      	str	r3, [sp, #84]	@ 0x54
 801a278:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a27c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a280:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a282:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a286:	1b5b      	subs	r3, r3, r5
 801a288:	9311      	str	r3, [sp, #68]	@ 0x44
 801a28a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a28e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a292:	f002 ff93 	bl	801d1bc <__ulp>
 801a296:	4650      	mov	r0, sl
 801a298:	ec53 2b10 	vmov	r2, r3, d0
 801a29c:	4659      	mov	r1, fp
 801a29e:	f7e6 f983 	bl	80005a8 <__aeabi_dmul>
 801a2a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a2a6:	f7e5 ffc9 	bl	800023c <__adddf3>
 801a2aa:	4682      	mov	sl, r0
 801a2ac:	468b      	mov	fp, r1
 801a2ae:	e770      	b.n	801a192 <_strtod_l+0xa62>
 801a2b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a2b4:	e7e0      	b.n	801a278 <_strtod_l+0xb48>
 801a2b6:	a30e      	add	r3, pc, #56	@ (adr r3, 801a2f0 <_strtod_l+0xbc0>)
 801a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2bc:	f7e6 fbe6 	bl	8000a8c <__aeabi_dcmplt>
 801a2c0:	e798      	b.n	801a1f4 <_strtod_l+0xac4>
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a2c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a2c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a2ca:	6013      	str	r3, [r2, #0]
 801a2cc:	f7ff ba6d 	b.w	80197aa <_strtod_l+0x7a>
 801a2d0:	2a65      	cmp	r2, #101	@ 0x65
 801a2d2:	f43f ab66 	beq.w	80199a2 <_strtod_l+0x272>
 801a2d6:	2a45      	cmp	r2, #69	@ 0x45
 801a2d8:	f43f ab63 	beq.w	80199a2 <_strtod_l+0x272>
 801a2dc:	2301      	movs	r3, #1
 801a2de:	f7ff bb9e 	b.w	8019a1e <_strtod_l+0x2ee>
 801a2e2:	bf00      	nop
 801a2e4:	f3af 8000 	nop.w
 801a2e8:	ffc00000 	.word	0xffc00000
 801a2ec:	41dfffff 	.word	0x41dfffff
 801a2f0:	94a03595 	.word	0x94a03595
 801a2f4:	3fcfffff 	.word	0x3fcfffff

0801a2f8 <_strtod_r>:
 801a2f8:	4b01      	ldr	r3, [pc, #4]	@ (801a300 <_strtod_r+0x8>)
 801a2fa:	f7ff ba19 	b.w	8019730 <_strtod_l>
 801a2fe:	bf00      	nop
 801a300:	20000154 	.word	0x20000154

0801a304 <strtof>:
 801a304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a308:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801a3c8 <strtof+0xc4>
 801a30c:	4b29      	ldr	r3, [pc, #164]	@ (801a3b4 <strtof+0xb0>)
 801a30e:	460a      	mov	r2, r1
 801a310:	ed2d 8b02 	vpush	{d8}
 801a314:	4601      	mov	r1, r0
 801a316:	f8d8 0000 	ldr.w	r0, [r8]
 801a31a:	f7ff fa09 	bl	8019730 <_strtod_l>
 801a31e:	ec55 4b10 	vmov	r4, r5, d0
 801a322:	4622      	mov	r2, r4
 801a324:	462b      	mov	r3, r5
 801a326:	4620      	mov	r0, r4
 801a328:	4629      	mov	r1, r5
 801a32a:	f7e6 fbd7 	bl	8000adc <__aeabi_dcmpun>
 801a32e:	b190      	cbz	r0, 801a356 <strtof+0x52>
 801a330:	2d00      	cmp	r5, #0
 801a332:	4821      	ldr	r0, [pc, #132]	@ (801a3b8 <strtof+0xb4>)
 801a334:	da09      	bge.n	801a34a <strtof+0x46>
 801a336:	f001 f9c7 	bl	801b6c8 <nanf>
 801a33a:	eeb1 8a40 	vneg.f32	s16, s0
 801a33e:	eeb0 0a48 	vmov.f32	s0, s16
 801a342:	ecbd 8b02 	vpop	{d8}
 801a346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a34a:	ecbd 8b02 	vpop	{d8}
 801a34e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a352:	f001 b9b9 	b.w	801b6c8 <nanf>
 801a356:	4620      	mov	r0, r4
 801a358:	4629      	mov	r1, r5
 801a35a:	f7e6 fc1d 	bl	8000b98 <__aeabi_d2f>
 801a35e:	ee08 0a10 	vmov	s16, r0
 801a362:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801a3bc <strtof+0xb8>
 801a366:	eeb0 7ac8 	vabs.f32	s14, s16
 801a36a:	eeb4 7a67 	vcmp.f32	s14, s15
 801a36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a372:	dd11      	ble.n	801a398 <strtof+0x94>
 801a374:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801a378:	4b11      	ldr	r3, [pc, #68]	@ (801a3c0 <strtof+0xbc>)
 801a37a:	f04f 32ff 	mov.w	r2, #4294967295
 801a37e:	4620      	mov	r0, r4
 801a380:	4639      	mov	r1, r7
 801a382:	f7e6 fbab 	bl	8000adc <__aeabi_dcmpun>
 801a386:	b980      	cbnz	r0, 801a3aa <strtof+0xa6>
 801a388:	4b0d      	ldr	r3, [pc, #52]	@ (801a3c0 <strtof+0xbc>)
 801a38a:	f04f 32ff 	mov.w	r2, #4294967295
 801a38e:	4620      	mov	r0, r4
 801a390:	4639      	mov	r1, r7
 801a392:	f7e6 fb85 	bl	8000aa0 <__aeabi_dcmple>
 801a396:	b940      	cbnz	r0, 801a3aa <strtof+0xa6>
 801a398:	ee18 3a10 	vmov	r3, s16
 801a39c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a3a0:	d1cd      	bne.n	801a33e <strtof+0x3a>
 801a3a2:	4b08      	ldr	r3, [pc, #32]	@ (801a3c4 <strtof+0xc0>)
 801a3a4:	402b      	ands	r3, r5
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d0c9      	beq.n	801a33e <strtof+0x3a>
 801a3aa:	f8d8 3000 	ldr.w	r3, [r8]
 801a3ae:	2222      	movs	r2, #34	@ 0x22
 801a3b0:	601a      	str	r2, [r3, #0]
 801a3b2:	e7c4      	b.n	801a33e <strtof+0x3a>
 801a3b4:	20000154 	.word	0x20000154
 801a3b8:	08021d56 	.word	0x08021d56
 801a3bc:	7f7fffff 	.word	0x7f7fffff
 801a3c0:	7fefffff 	.word	0x7fefffff
 801a3c4:	7ff00000 	.word	0x7ff00000
 801a3c8:	200002c0 	.word	0x200002c0

0801a3cc <_strtol_l.constprop.0>:
 801a3cc:	2b24      	cmp	r3, #36	@ 0x24
 801a3ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3d2:	4686      	mov	lr, r0
 801a3d4:	4690      	mov	r8, r2
 801a3d6:	d801      	bhi.n	801a3dc <_strtol_l.constprop.0+0x10>
 801a3d8:	2b01      	cmp	r3, #1
 801a3da:	d106      	bne.n	801a3ea <_strtol_l.constprop.0+0x1e>
 801a3dc:	f001 f928 	bl	801b630 <__errno>
 801a3e0:	2316      	movs	r3, #22
 801a3e2:	6003      	str	r3, [r0, #0]
 801a3e4:	2000      	movs	r0, #0
 801a3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3ea:	4834      	ldr	r0, [pc, #208]	@ (801a4bc <_strtol_l.constprop.0+0xf0>)
 801a3ec:	460d      	mov	r5, r1
 801a3ee:	462a      	mov	r2, r5
 801a3f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a3f4:	5d06      	ldrb	r6, [r0, r4]
 801a3f6:	f016 0608 	ands.w	r6, r6, #8
 801a3fa:	d1f8      	bne.n	801a3ee <_strtol_l.constprop.0+0x22>
 801a3fc:	2c2d      	cmp	r4, #45	@ 0x2d
 801a3fe:	d12d      	bne.n	801a45c <_strtol_l.constprop.0+0x90>
 801a400:	782c      	ldrb	r4, [r5, #0]
 801a402:	2601      	movs	r6, #1
 801a404:	1c95      	adds	r5, r2, #2
 801a406:	f033 0210 	bics.w	r2, r3, #16
 801a40a:	d109      	bne.n	801a420 <_strtol_l.constprop.0+0x54>
 801a40c:	2c30      	cmp	r4, #48	@ 0x30
 801a40e:	d12a      	bne.n	801a466 <_strtol_l.constprop.0+0x9a>
 801a410:	782a      	ldrb	r2, [r5, #0]
 801a412:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a416:	2a58      	cmp	r2, #88	@ 0x58
 801a418:	d125      	bne.n	801a466 <_strtol_l.constprop.0+0x9a>
 801a41a:	786c      	ldrb	r4, [r5, #1]
 801a41c:	2310      	movs	r3, #16
 801a41e:	3502      	adds	r5, #2
 801a420:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a424:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a428:	2200      	movs	r2, #0
 801a42a:	fbbc f9f3 	udiv	r9, ip, r3
 801a42e:	4610      	mov	r0, r2
 801a430:	fb03 ca19 	mls	sl, r3, r9, ip
 801a434:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a438:	2f09      	cmp	r7, #9
 801a43a:	d81b      	bhi.n	801a474 <_strtol_l.constprop.0+0xa8>
 801a43c:	463c      	mov	r4, r7
 801a43e:	42a3      	cmp	r3, r4
 801a440:	dd27      	ble.n	801a492 <_strtol_l.constprop.0+0xc6>
 801a442:	1c57      	adds	r7, r2, #1
 801a444:	d007      	beq.n	801a456 <_strtol_l.constprop.0+0x8a>
 801a446:	4581      	cmp	r9, r0
 801a448:	d320      	bcc.n	801a48c <_strtol_l.constprop.0+0xc0>
 801a44a:	d101      	bne.n	801a450 <_strtol_l.constprop.0+0x84>
 801a44c:	45a2      	cmp	sl, r4
 801a44e:	db1d      	blt.n	801a48c <_strtol_l.constprop.0+0xc0>
 801a450:	fb00 4003 	mla	r0, r0, r3, r4
 801a454:	2201      	movs	r2, #1
 801a456:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a45a:	e7eb      	b.n	801a434 <_strtol_l.constprop.0+0x68>
 801a45c:	2c2b      	cmp	r4, #43	@ 0x2b
 801a45e:	bf04      	itt	eq
 801a460:	782c      	ldrbeq	r4, [r5, #0]
 801a462:	1c95      	addeq	r5, r2, #2
 801a464:	e7cf      	b.n	801a406 <_strtol_l.constprop.0+0x3a>
 801a466:	2b00      	cmp	r3, #0
 801a468:	d1da      	bne.n	801a420 <_strtol_l.constprop.0+0x54>
 801a46a:	2c30      	cmp	r4, #48	@ 0x30
 801a46c:	bf0c      	ite	eq
 801a46e:	2308      	moveq	r3, #8
 801a470:	230a      	movne	r3, #10
 801a472:	e7d5      	b.n	801a420 <_strtol_l.constprop.0+0x54>
 801a474:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a478:	2f19      	cmp	r7, #25
 801a47a:	d801      	bhi.n	801a480 <_strtol_l.constprop.0+0xb4>
 801a47c:	3c37      	subs	r4, #55	@ 0x37
 801a47e:	e7de      	b.n	801a43e <_strtol_l.constprop.0+0x72>
 801a480:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a484:	2f19      	cmp	r7, #25
 801a486:	d804      	bhi.n	801a492 <_strtol_l.constprop.0+0xc6>
 801a488:	3c57      	subs	r4, #87	@ 0x57
 801a48a:	e7d8      	b.n	801a43e <_strtol_l.constprop.0+0x72>
 801a48c:	f04f 32ff 	mov.w	r2, #4294967295
 801a490:	e7e1      	b.n	801a456 <_strtol_l.constprop.0+0x8a>
 801a492:	1c53      	adds	r3, r2, #1
 801a494:	d108      	bne.n	801a4a8 <_strtol_l.constprop.0+0xdc>
 801a496:	2322      	movs	r3, #34	@ 0x22
 801a498:	f8ce 3000 	str.w	r3, [lr]
 801a49c:	4660      	mov	r0, ip
 801a49e:	f1b8 0f00 	cmp.w	r8, #0
 801a4a2:	d0a0      	beq.n	801a3e6 <_strtol_l.constprop.0+0x1a>
 801a4a4:	1e69      	subs	r1, r5, #1
 801a4a6:	e006      	b.n	801a4b6 <_strtol_l.constprop.0+0xea>
 801a4a8:	b106      	cbz	r6, 801a4ac <_strtol_l.constprop.0+0xe0>
 801a4aa:	4240      	negs	r0, r0
 801a4ac:	f1b8 0f00 	cmp.w	r8, #0
 801a4b0:	d099      	beq.n	801a3e6 <_strtol_l.constprop.0+0x1a>
 801a4b2:	2a00      	cmp	r2, #0
 801a4b4:	d1f6      	bne.n	801a4a4 <_strtol_l.constprop.0+0xd8>
 801a4b6:	f8c8 1000 	str.w	r1, [r8]
 801a4ba:	e794      	b.n	801a3e6 <_strtol_l.constprop.0+0x1a>
 801a4bc:	08021b69 	.word	0x08021b69

0801a4c0 <_strtol_r>:
 801a4c0:	f7ff bf84 	b.w	801a3cc <_strtol_l.constprop.0>

0801a4c4 <strtol>:
 801a4c4:	4613      	mov	r3, r2
 801a4c6:	460a      	mov	r2, r1
 801a4c8:	4601      	mov	r1, r0
 801a4ca:	4802      	ldr	r0, [pc, #8]	@ (801a4d4 <strtol+0x10>)
 801a4cc:	6800      	ldr	r0, [r0, #0]
 801a4ce:	f7ff bf7d 	b.w	801a3cc <_strtol_l.constprop.0>
 801a4d2:	bf00      	nop
 801a4d4:	200002c0 	.word	0x200002c0

0801a4d8 <__cvt>:
 801a4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a4dc:	ec57 6b10 	vmov	r6, r7, d0
 801a4e0:	2f00      	cmp	r7, #0
 801a4e2:	460c      	mov	r4, r1
 801a4e4:	4619      	mov	r1, r3
 801a4e6:	463b      	mov	r3, r7
 801a4e8:	bfbb      	ittet	lt
 801a4ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a4ee:	461f      	movlt	r7, r3
 801a4f0:	2300      	movge	r3, #0
 801a4f2:	232d      	movlt	r3, #45	@ 0x2d
 801a4f4:	700b      	strb	r3, [r1, #0]
 801a4f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a4f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a4fc:	4691      	mov	r9, r2
 801a4fe:	f023 0820 	bic.w	r8, r3, #32
 801a502:	bfbc      	itt	lt
 801a504:	4632      	movlt	r2, r6
 801a506:	4616      	movlt	r6, r2
 801a508:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a50c:	d005      	beq.n	801a51a <__cvt+0x42>
 801a50e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a512:	d100      	bne.n	801a516 <__cvt+0x3e>
 801a514:	3401      	adds	r4, #1
 801a516:	2102      	movs	r1, #2
 801a518:	e000      	b.n	801a51c <__cvt+0x44>
 801a51a:	2103      	movs	r1, #3
 801a51c:	ab03      	add	r3, sp, #12
 801a51e:	9301      	str	r3, [sp, #4]
 801a520:	ab02      	add	r3, sp, #8
 801a522:	9300      	str	r3, [sp, #0]
 801a524:	ec47 6b10 	vmov	d0, r6, r7
 801a528:	4653      	mov	r3, sl
 801a52a:	4622      	mov	r2, r4
 801a52c:	f001 f978 	bl	801b820 <_dtoa_r>
 801a530:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a534:	4605      	mov	r5, r0
 801a536:	d119      	bne.n	801a56c <__cvt+0x94>
 801a538:	f019 0f01 	tst.w	r9, #1
 801a53c:	d00e      	beq.n	801a55c <__cvt+0x84>
 801a53e:	eb00 0904 	add.w	r9, r0, r4
 801a542:	2200      	movs	r2, #0
 801a544:	2300      	movs	r3, #0
 801a546:	4630      	mov	r0, r6
 801a548:	4639      	mov	r1, r7
 801a54a:	f7e6 fa95 	bl	8000a78 <__aeabi_dcmpeq>
 801a54e:	b108      	cbz	r0, 801a554 <__cvt+0x7c>
 801a550:	f8cd 900c 	str.w	r9, [sp, #12]
 801a554:	2230      	movs	r2, #48	@ 0x30
 801a556:	9b03      	ldr	r3, [sp, #12]
 801a558:	454b      	cmp	r3, r9
 801a55a:	d31e      	bcc.n	801a59a <__cvt+0xc2>
 801a55c:	9b03      	ldr	r3, [sp, #12]
 801a55e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a560:	1b5b      	subs	r3, r3, r5
 801a562:	4628      	mov	r0, r5
 801a564:	6013      	str	r3, [r2, #0]
 801a566:	b004      	add	sp, #16
 801a568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a56c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a570:	eb00 0904 	add.w	r9, r0, r4
 801a574:	d1e5      	bne.n	801a542 <__cvt+0x6a>
 801a576:	7803      	ldrb	r3, [r0, #0]
 801a578:	2b30      	cmp	r3, #48	@ 0x30
 801a57a:	d10a      	bne.n	801a592 <__cvt+0xba>
 801a57c:	2200      	movs	r2, #0
 801a57e:	2300      	movs	r3, #0
 801a580:	4630      	mov	r0, r6
 801a582:	4639      	mov	r1, r7
 801a584:	f7e6 fa78 	bl	8000a78 <__aeabi_dcmpeq>
 801a588:	b918      	cbnz	r0, 801a592 <__cvt+0xba>
 801a58a:	f1c4 0401 	rsb	r4, r4, #1
 801a58e:	f8ca 4000 	str.w	r4, [sl]
 801a592:	f8da 3000 	ldr.w	r3, [sl]
 801a596:	4499      	add	r9, r3
 801a598:	e7d3      	b.n	801a542 <__cvt+0x6a>
 801a59a:	1c59      	adds	r1, r3, #1
 801a59c:	9103      	str	r1, [sp, #12]
 801a59e:	701a      	strb	r2, [r3, #0]
 801a5a0:	e7d9      	b.n	801a556 <__cvt+0x7e>

0801a5a2 <__exponent>:
 801a5a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a5a4:	2900      	cmp	r1, #0
 801a5a6:	bfba      	itte	lt
 801a5a8:	4249      	neglt	r1, r1
 801a5aa:	232d      	movlt	r3, #45	@ 0x2d
 801a5ac:	232b      	movge	r3, #43	@ 0x2b
 801a5ae:	2909      	cmp	r1, #9
 801a5b0:	7002      	strb	r2, [r0, #0]
 801a5b2:	7043      	strb	r3, [r0, #1]
 801a5b4:	dd29      	ble.n	801a60a <__exponent+0x68>
 801a5b6:	f10d 0307 	add.w	r3, sp, #7
 801a5ba:	461d      	mov	r5, r3
 801a5bc:	270a      	movs	r7, #10
 801a5be:	461a      	mov	r2, r3
 801a5c0:	fbb1 f6f7 	udiv	r6, r1, r7
 801a5c4:	fb07 1416 	mls	r4, r7, r6, r1
 801a5c8:	3430      	adds	r4, #48	@ 0x30
 801a5ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a5ce:	460c      	mov	r4, r1
 801a5d0:	2c63      	cmp	r4, #99	@ 0x63
 801a5d2:	f103 33ff 	add.w	r3, r3, #4294967295
 801a5d6:	4631      	mov	r1, r6
 801a5d8:	dcf1      	bgt.n	801a5be <__exponent+0x1c>
 801a5da:	3130      	adds	r1, #48	@ 0x30
 801a5dc:	1e94      	subs	r4, r2, #2
 801a5de:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a5e2:	1c41      	adds	r1, r0, #1
 801a5e4:	4623      	mov	r3, r4
 801a5e6:	42ab      	cmp	r3, r5
 801a5e8:	d30a      	bcc.n	801a600 <__exponent+0x5e>
 801a5ea:	f10d 0309 	add.w	r3, sp, #9
 801a5ee:	1a9b      	subs	r3, r3, r2
 801a5f0:	42ac      	cmp	r4, r5
 801a5f2:	bf88      	it	hi
 801a5f4:	2300      	movhi	r3, #0
 801a5f6:	3302      	adds	r3, #2
 801a5f8:	4403      	add	r3, r0
 801a5fa:	1a18      	subs	r0, r3, r0
 801a5fc:	b003      	add	sp, #12
 801a5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a600:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a604:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a608:	e7ed      	b.n	801a5e6 <__exponent+0x44>
 801a60a:	2330      	movs	r3, #48	@ 0x30
 801a60c:	3130      	adds	r1, #48	@ 0x30
 801a60e:	7083      	strb	r3, [r0, #2]
 801a610:	70c1      	strb	r1, [r0, #3]
 801a612:	1d03      	adds	r3, r0, #4
 801a614:	e7f1      	b.n	801a5fa <__exponent+0x58>
	...

0801a618 <_printf_float>:
 801a618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a61c:	b08d      	sub	sp, #52	@ 0x34
 801a61e:	460c      	mov	r4, r1
 801a620:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a624:	4616      	mov	r6, r2
 801a626:	461f      	mov	r7, r3
 801a628:	4605      	mov	r5, r0
 801a62a:	f000 ffa7 	bl	801b57c <_localeconv_r>
 801a62e:	6803      	ldr	r3, [r0, #0]
 801a630:	9304      	str	r3, [sp, #16]
 801a632:	4618      	mov	r0, r3
 801a634:	f7e5 fdf4 	bl	8000220 <strlen>
 801a638:	2300      	movs	r3, #0
 801a63a:	930a      	str	r3, [sp, #40]	@ 0x28
 801a63c:	f8d8 3000 	ldr.w	r3, [r8]
 801a640:	9005      	str	r0, [sp, #20]
 801a642:	3307      	adds	r3, #7
 801a644:	f023 0307 	bic.w	r3, r3, #7
 801a648:	f103 0208 	add.w	r2, r3, #8
 801a64c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a650:	f8d4 b000 	ldr.w	fp, [r4]
 801a654:	f8c8 2000 	str.w	r2, [r8]
 801a658:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a65c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a660:	9307      	str	r3, [sp, #28]
 801a662:	f8cd 8018 	str.w	r8, [sp, #24]
 801a666:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a66a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a66e:	4b9c      	ldr	r3, [pc, #624]	@ (801a8e0 <_printf_float+0x2c8>)
 801a670:	f04f 32ff 	mov.w	r2, #4294967295
 801a674:	f7e6 fa32 	bl	8000adc <__aeabi_dcmpun>
 801a678:	bb70      	cbnz	r0, 801a6d8 <_printf_float+0xc0>
 801a67a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a67e:	4b98      	ldr	r3, [pc, #608]	@ (801a8e0 <_printf_float+0x2c8>)
 801a680:	f04f 32ff 	mov.w	r2, #4294967295
 801a684:	f7e6 fa0c 	bl	8000aa0 <__aeabi_dcmple>
 801a688:	bb30      	cbnz	r0, 801a6d8 <_printf_float+0xc0>
 801a68a:	2200      	movs	r2, #0
 801a68c:	2300      	movs	r3, #0
 801a68e:	4640      	mov	r0, r8
 801a690:	4649      	mov	r1, r9
 801a692:	f7e6 f9fb 	bl	8000a8c <__aeabi_dcmplt>
 801a696:	b110      	cbz	r0, 801a69e <_printf_float+0x86>
 801a698:	232d      	movs	r3, #45	@ 0x2d
 801a69a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a69e:	4a91      	ldr	r2, [pc, #580]	@ (801a8e4 <_printf_float+0x2cc>)
 801a6a0:	4b91      	ldr	r3, [pc, #580]	@ (801a8e8 <_printf_float+0x2d0>)
 801a6a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a6a6:	bf94      	ite	ls
 801a6a8:	4690      	movls	r8, r2
 801a6aa:	4698      	movhi	r8, r3
 801a6ac:	2303      	movs	r3, #3
 801a6ae:	6123      	str	r3, [r4, #16]
 801a6b0:	f02b 0304 	bic.w	r3, fp, #4
 801a6b4:	6023      	str	r3, [r4, #0]
 801a6b6:	f04f 0900 	mov.w	r9, #0
 801a6ba:	9700      	str	r7, [sp, #0]
 801a6bc:	4633      	mov	r3, r6
 801a6be:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a6c0:	4621      	mov	r1, r4
 801a6c2:	4628      	mov	r0, r5
 801a6c4:	f000 f9d2 	bl	801aa6c <_printf_common>
 801a6c8:	3001      	adds	r0, #1
 801a6ca:	f040 808d 	bne.w	801a7e8 <_printf_float+0x1d0>
 801a6ce:	f04f 30ff 	mov.w	r0, #4294967295
 801a6d2:	b00d      	add	sp, #52	@ 0x34
 801a6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6d8:	4642      	mov	r2, r8
 801a6da:	464b      	mov	r3, r9
 801a6dc:	4640      	mov	r0, r8
 801a6de:	4649      	mov	r1, r9
 801a6e0:	f7e6 f9fc 	bl	8000adc <__aeabi_dcmpun>
 801a6e4:	b140      	cbz	r0, 801a6f8 <_printf_float+0xe0>
 801a6e6:	464b      	mov	r3, r9
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	bfbc      	itt	lt
 801a6ec:	232d      	movlt	r3, #45	@ 0x2d
 801a6ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a6f2:	4a7e      	ldr	r2, [pc, #504]	@ (801a8ec <_printf_float+0x2d4>)
 801a6f4:	4b7e      	ldr	r3, [pc, #504]	@ (801a8f0 <_printf_float+0x2d8>)
 801a6f6:	e7d4      	b.n	801a6a2 <_printf_float+0x8a>
 801a6f8:	6863      	ldr	r3, [r4, #4]
 801a6fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a6fe:	9206      	str	r2, [sp, #24]
 801a700:	1c5a      	adds	r2, r3, #1
 801a702:	d13b      	bne.n	801a77c <_printf_float+0x164>
 801a704:	2306      	movs	r3, #6
 801a706:	6063      	str	r3, [r4, #4]
 801a708:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a70c:	2300      	movs	r3, #0
 801a70e:	6022      	str	r2, [r4, #0]
 801a710:	9303      	str	r3, [sp, #12]
 801a712:	ab0a      	add	r3, sp, #40	@ 0x28
 801a714:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a718:	ab09      	add	r3, sp, #36	@ 0x24
 801a71a:	9300      	str	r3, [sp, #0]
 801a71c:	6861      	ldr	r1, [r4, #4]
 801a71e:	ec49 8b10 	vmov	d0, r8, r9
 801a722:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a726:	4628      	mov	r0, r5
 801a728:	f7ff fed6 	bl	801a4d8 <__cvt>
 801a72c:	9b06      	ldr	r3, [sp, #24]
 801a72e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a730:	2b47      	cmp	r3, #71	@ 0x47
 801a732:	4680      	mov	r8, r0
 801a734:	d129      	bne.n	801a78a <_printf_float+0x172>
 801a736:	1cc8      	adds	r0, r1, #3
 801a738:	db02      	blt.n	801a740 <_printf_float+0x128>
 801a73a:	6863      	ldr	r3, [r4, #4]
 801a73c:	4299      	cmp	r1, r3
 801a73e:	dd41      	ble.n	801a7c4 <_printf_float+0x1ac>
 801a740:	f1aa 0a02 	sub.w	sl, sl, #2
 801a744:	fa5f fa8a 	uxtb.w	sl, sl
 801a748:	3901      	subs	r1, #1
 801a74a:	4652      	mov	r2, sl
 801a74c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a750:	9109      	str	r1, [sp, #36]	@ 0x24
 801a752:	f7ff ff26 	bl	801a5a2 <__exponent>
 801a756:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a758:	1813      	adds	r3, r2, r0
 801a75a:	2a01      	cmp	r2, #1
 801a75c:	4681      	mov	r9, r0
 801a75e:	6123      	str	r3, [r4, #16]
 801a760:	dc02      	bgt.n	801a768 <_printf_float+0x150>
 801a762:	6822      	ldr	r2, [r4, #0]
 801a764:	07d2      	lsls	r2, r2, #31
 801a766:	d501      	bpl.n	801a76c <_printf_float+0x154>
 801a768:	3301      	adds	r3, #1
 801a76a:	6123      	str	r3, [r4, #16]
 801a76c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a770:	2b00      	cmp	r3, #0
 801a772:	d0a2      	beq.n	801a6ba <_printf_float+0xa2>
 801a774:	232d      	movs	r3, #45	@ 0x2d
 801a776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a77a:	e79e      	b.n	801a6ba <_printf_float+0xa2>
 801a77c:	9a06      	ldr	r2, [sp, #24]
 801a77e:	2a47      	cmp	r2, #71	@ 0x47
 801a780:	d1c2      	bne.n	801a708 <_printf_float+0xf0>
 801a782:	2b00      	cmp	r3, #0
 801a784:	d1c0      	bne.n	801a708 <_printf_float+0xf0>
 801a786:	2301      	movs	r3, #1
 801a788:	e7bd      	b.n	801a706 <_printf_float+0xee>
 801a78a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a78e:	d9db      	bls.n	801a748 <_printf_float+0x130>
 801a790:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a794:	d118      	bne.n	801a7c8 <_printf_float+0x1b0>
 801a796:	2900      	cmp	r1, #0
 801a798:	6863      	ldr	r3, [r4, #4]
 801a79a:	dd0b      	ble.n	801a7b4 <_printf_float+0x19c>
 801a79c:	6121      	str	r1, [r4, #16]
 801a79e:	b913      	cbnz	r3, 801a7a6 <_printf_float+0x18e>
 801a7a0:	6822      	ldr	r2, [r4, #0]
 801a7a2:	07d0      	lsls	r0, r2, #31
 801a7a4:	d502      	bpl.n	801a7ac <_printf_float+0x194>
 801a7a6:	3301      	adds	r3, #1
 801a7a8:	440b      	add	r3, r1
 801a7aa:	6123      	str	r3, [r4, #16]
 801a7ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a7ae:	f04f 0900 	mov.w	r9, #0
 801a7b2:	e7db      	b.n	801a76c <_printf_float+0x154>
 801a7b4:	b913      	cbnz	r3, 801a7bc <_printf_float+0x1a4>
 801a7b6:	6822      	ldr	r2, [r4, #0]
 801a7b8:	07d2      	lsls	r2, r2, #31
 801a7ba:	d501      	bpl.n	801a7c0 <_printf_float+0x1a8>
 801a7bc:	3302      	adds	r3, #2
 801a7be:	e7f4      	b.n	801a7aa <_printf_float+0x192>
 801a7c0:	2301      	movs	r3, #1
 801a7c2:	e7f2      	b.n	801a7aa <_printf_float+0x192>
 801a7c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a7c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a7ca:	4299      	cmp	r1, r3
 801a7cc:	db05      	blt.n	801a7da <_printf_float+0x1c2>
 801a7ce:	6823      	ldr	r3, [r4, #0]
 801a7d0:	6121      	str	r1, [r4, #16]
 801a7d2:	07d8      	lsls	r0, r3, #31
 801a7d4:	d5ea      	bpl.n	801a7ac <_printf_float+0x194>
 801a7d6:	1c4b      	adds	r3, r1, #1
 801a7d8:	e7e7      	b.n	801a7aa <_printf_float+0x192>
 801a7da:	2900      	cmp	r1, #0
 801a7dc:	bfd4      	ite	le
 801a7de:	f1c1 0202 	rsble	r2, r1, #2
 801a7e2:	2201      	movgt	r2, #1
 801a7e4:	4413      	add	r3, r2
 801a7e6:	e7e0      	b.n	801a7aa <_printf_float+0x192>
 801a7e8:	6823      	ldr	r3, [r4, #0]
 801a7ea:	055a      	lsls	r2, r3, #21
 801a7ec:	d407      	bmi.n	801a7fe <_printf_float+0x1e6>
 801a7ee:	6923      	ldr	r3, [r4, #16]
 801a7f0:	4642      	mov	r2, r8
 801a7f2:	4631      	mov	r1, r6
 801a7f4:	4628      	mov	r0, r5
 801a7f6:	47b8      	blx	r7
 801a7f8:	3001      	adds	r0, #1
 801a7fa:	d12b      	bne.n	801a854 <_printf_float+0x23c>
 801a7fc:	e767      	b.n	801a6ce <_printf_float+0xb6>
 801a7fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a802:	f240 80dd 	bls.w	801a9c0 <_printf_float+0x3a8>
 801a806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a80a:	2200      	movs	r2, #0
 801a80c:	2300      	movs	r3, #0
 801a80e:	f7e6 f933 	bl	8000a78 <__aeabi_dcmpeq>
 801a812:	2800      	cmp	r0, #0
 801a814:	d033      	beq.n	801a87e <_printf_float+0x266>
 801a816:	4a37      	ldr	r2, [pc, #220]	@ (801a8f4 <_printf_float+0x2dc>)
 801a818:	2301      	movs	r3, #1
 801a81a:	4631      	mov	r1, r6
 801a81c:	4628      	mov	r0, r5
 801a81e:	47b8      	blx	r7
 801a820:	3001      	adds	r0, #1
 801a822:	f43f af54 	beq.w	801a6ce <_printf_float+0xb6>
 801a826:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a82a:	4543      	cmp	r3, r8
 801a82c:	db02      	blt.n	801a834 <_printf_float+0x21c>
 801a82e:	6823      	ldr	r3, [r4, #0]
 801a830:	07d8      	lsls	r0, r3, #31
 801a832:	d50f      	bpl.n	801a854 <_printf_float+0x23c>
 801a834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a838:	4631      	mov	r1, r6
 801a83a:	4628      	mov	r0, r5
 801a83c:	47b8      	blx	r7
 801a83e:	3001      	adds	r0, #1
 801a840:	f43f af45 	beq.w	801a6ce <_printf_float+0xb6>
 801a844:	f04f 0900 	mov.w	r9, #0
 801a848:	f108 38ff 	add.w	r8, r8, #4294967295
 801a84c:	f104 0a1a 	add.w	sl, r4, #26
 801a850:	45c8      	cmp	r8, r9
 801a852:	dc09      	bgt.n	801a868 <_printf_float+0x250>
 801a854:	6823      	ldr	r3, [r4, #0]
 801a856:	079b      	lsls	r3, r3, #30
 801a858:	f100 8103 	bmi.w	801aa62 <_printf_float+0x44a>
 801a85c:	68e0      	ldr	r0, [r4, #12]
 801a85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a860:	4298      	cmp	r0, r3
 801a862:	bfb8      	it	lt
 801a864:	4618      	movlt	r0, r3
 801a866:	e734      	b.n	801a6d2 <_printf_float+0xba>
 801a868:	2301      	movs	r3, #1
 801a86a:	4652      	mov	r2, sl
 801a86c:	4631      	mov	r1, r6
 801a86e:	4628      	mov	r0, r5
 801a870:	47b8      	blx	r7
 801a872:	3001      	adds	r0, #1
 801a874:	f43f af2b 	beq.w	801a6ce <_printf_float+0xb6>
 801a878:	f109 0901 	add.w	r9, r9, #1
 801a87c:	e7e8      	b.n	801a850 <_printf_float+0x238>
 801a87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a880:	2b00      	cmp	r3, #0
 801a882:	dc39      	bgt.n	801a8f8 <_printf_float+0x2e0>
 801a884:	4a1b      	ldr	r2, [pc, #108]	@ (801a8f4 <_printf_float+0x2dc>)
 801a886:	2301      	movs	r3, #1
 801a888:	4631      	mov	r1, r6
 801a88a:	4628      	mov	r0, r5
 801a88c:	47b8      	blx	r7
 801a88e:	3001      	adds	r0, #1
 801a890:	f43f af1d 	beq.w	801a6ce <_printf_float+0xb6>
 801a894:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a898:	ea59 0303 	orrs.w	r3, r9, r3
 801a89c:	d102      	bne.n	801a8a4 <_printf_float+0x28c>
 801a89e:	6823      	ldr	r3, [r4, #0]
 801a8a0:	07d9      	lsls	r1, r3, #31
 801a8a2:	d5d7      	bpl.n	801a854 <_printf_float+0x23c>
 801a8a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8a8:	4631      	mov	r1, r6
 801a8aa:	4628      	mov	r0, r5
 801a8ac:	47b8      	blx	r7
 801a8ae:	3001      	adds	r0, #1
 801a8b0:	f43f af0d 	beq.w	801a6ce <_printf_float+0xb6>
 801a8b4:	f04f 0a00 	mov.w	sl, #0
 801a8b8:	f104 0b1a 	add.w	fp, r4, #26
 801a8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8be:	425b      	negs	r3, r3
 801a8c0:	4553      	cmp	r3, sl
 801a8c2:	dc01      	bgt.n	801a8c8 <_printf_float+0x2b0>
 801a8c4:	464b      	mov	r3, r9
 801a8c6:	e793      	b.n	801a7f0 <_printf_float+0x1d8>
 801a8c8:	2301      	movs	r3, #1
 801a8ca:	465a      	mov	r2, fp
 801a8cc:	4631      	mov	r1, r6
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	47b8      	blx	r7
 801a8d2:	3001      	adds	r0, #1
 801a8d4:	f43f aefb 	beq.w	801a6ce <_printf_float+0xb6>
 801a8d8:	f10a 0a01 	add.w	sl, sl, #1
 801a8dc:	e7ee      	b.n	801a8bc <_printf_float+0x2a4>
 801a8de:	bf00      	nop
 801a8e0:	7fefffff 	.word	0x7fefffff
 801a8e4:	08021c69 	.word	0x08021c69
 801a8e8:	08021c6d 	.word	0x08021c6d
 801a8ec:	08021c71 	.word	0x08021c71
 801a8f0:	08021c75 	.word	0x08021c75
 801a8f4:	08021c79 	.word	0x08021c79
 801a8f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a8fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a8fe:	4553      	cmp	r3, sl
 801a900:	bfa8      	it	ge
 801a902:	4653      	movge	r3, sl
 801a904:	2b00      	cmp	r3, #0
 801a906:	4699      	mov	r9, r3
 801a908:	dc36      	bgt.n	801a978 <_printf_float+0x360>
 801a90a:	f04f 0b00 	mov.w	fp, #0
 801a90e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a912:	f104 021a 	add.w	r2, r4, #26
 801a916:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a918:	9306      	str	r3, [sp, #24]
 801a91a:	eba3 0309 	sub.w	r3, r3, r9
 801a91e:	455b      	cmp	r3, fp
 801a920:	dc31      	bgt.n	801a986 <_printf_float+0x36e>
 801a922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a924:	459a      	cmp	sl, r3
 801a926:	dc3a      	bgt.n	801a99e <_printf_float+0x386>
 801a928:	6823      	ldr	r3, [r4, #0]
 801a92a:	07da      	lsls	r2, r3, #31
 801a92c:	d437      	bmi.n	801a99e <_printf_float+0x386>
 801a92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a930:	ebaa 0903 	sub.w	r9, sl, r3
 801a934:	9b06      	ldr	r3, [sp, #24]
 801a936:	ebaa 0303 	sub.w	r3, sl, r3
 801a93a:	4599      	cmp	r9, r3
 801a93c:	bfa8      	it	ge
 801a93e:	4699      	movge	r9, r3
 801a940:	f1b9 0f00 	cmp.w	r9, #0
 801a944:	dc33      	bgt.n	801a9ae <_printf_float+0x396>
 801a946:	f04f 0800 	mov.w	r8, #0
 801a94a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a94e:	f104 0b1a 	add.w	fp, r4, #26
 801a952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a954:	ebaa 0303 	sub.w	r3, sl, r3
 801a958:	eba3 0309 	sub.w	r3, r3, r9
 801a95c:	4543      	cmp	r3, r8
 801a95e:	f77f af79 	ble.w	801a854 <_printf_float+0x23c>
 801a962:	2301      	movs	r3, #1
 801a964:	465a      	mov	r2, fp
 801a966:	4631      	mov	r1, r6
 801a968:	4628      	mov	r0, r5
 801a96a:	47b8      	blx	r7
 801a96c:	3001      	adds	r0, #1
 801a96e:	f43f aeae 	beq.w	801a6ce <_printf_float+0xb6>
 801a972:	f108 0801 	add.w	r8, r8, #1
 801a976:	e7ec      	b.n	801a952 <_printf_float+0x33a>
 801a978:	4642      	mov	r2, r8
 801a97a:	4631      	mov	r1, r6
 801a97c:	4628      	mov	r0, r5
 801a97e:	47b8      	blx	r7
 801a980:	3001      	adds	r0, #1
 801a982:	d1c2      	bne.n	801a90a <_printf_float+0x2f2>
 801a984:	e6a3      	b.n	801a6ce <_printf_float+0xb6>
 801a986:	2301      	movs	r3, #1
 801a988:	4631      	mov	r1, r6
 801a98a:	4628      	mov	r0, r5
 801a98c:	9206      	str	r2, [sp, #24]
 801a98e:	47b8      	blx	r7
 801a990:	3001      	adds	r0, #1
 801a992:	f43f ae9c 	beq.w	801a6ce <_printf_float+0xb6>
 801a996:	9a06      	ldr	r2, [sp, #24]
 801a998:	f10b 0b01 	add.w	fp, fp, #1
 801a99c:	e7bb      	b.n	801a916 <_printf_float+0x2fe>
 801a99e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a9a2:	4631      	mov	r1, r6
 801a9a4:	4628      	mov	r0, r5
 801a9a6:	47b8      	blx	r7
 801a9a8:	3001      	adds	r0, #1
 801a9aa:	d1c0      	bne.n	801a92e <_printf_float+0x316>
 801a9ac:	e68f      	b.n	801a6ce <_printf_float+0xb6>
 801a9ae:	9a06      	ldr	r2, [sp, #24]
 801a9b0:	464b      	mov	r3, r9
 801a9b2:	4442      	add	r2, r8
 801a9b4:	4631      	mov	r1, r6
 801a9b6:	4628      	mov	r0, r5
 801a9b8:	47b8      	blx	r7
 801a9ba:	3001      	adds	r0, #1
 801a9bc:	d1c3      	bne.n	801a946 <_printf_float+0x32e>
 801a9be:	e686      	b.n	801a6ce <_printf_float+0xb6>
 801a9c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a9c4:	f1ba 0f01 	cmp.w	sl, #1
 801a9c8:	dc01      	bgt.n	801a9ce <_printf_float+0x3b6>
 801a9ca:	07db      	lsls	r3, r3, #31
 801a9cc:	d536      	bpl.n	801aa3c <_printf_float+0x424>
 801a9ce:	2301      	movs	r3, #1
 801a9d0:	4642      	mov	r2, r8
 801a9d2:	4631      	mov	r1, r6
 801a9d4:	4628      	mov	r0, r5
 801a9d6:	47b8      	blx	r7
 801a9d8:	3001      	adds	r0, #1
 801a9da:	f43f ae78 	beq.w	801a6ce <_printf_float+0xb6>
 801a9de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a9e2:	4631      	mov	r1, r6
 801a9e4:	4628      	mov	r0, r5
 801a9e6:	47b8      	blx	r7
 801a9e8:	3001      	adds	r0, #1
 801a9ea:	f43f ae70 	beq.w	801a6ce <_printf_float+0xb6>
 801a9ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a9fa:	f7e6 f83d 	bl	8000a78 <__aeabi_dcmpeq>
 801a9fe:	b9c0      	cbnz	r0, 801aa32 <_printf_float+0x41a>
 801aa00:	4653      	mov	r3, sl
 801aa02:	f108 0201 	add.w	r2, r8, #1
 801aa06:	4631      	mov	r1, r6
 801aa08:	4628      	mov	r0, r5
 801aa0a:	47b8      	blx	r7
 801aa0c:	3001      	adds	r0, #1
 801aa0e:	d10c      	bne.n	801aa2a <_printf_float+0x412>
 801aa10:	e65d      	b.n	801a6ce <_printf_float+0xb6>
 801aa12:	2301      	movs	r3, #1
 801aa14:	465a      	mov	r2, fp
 801aa16:	4631      	mov	r1, r6
 801aa18:	4628      	mov	r0, r5
 801aa1a:	47b8      	blx	r7
 801aa1c:	3001      	adds	r0, #1
 801aa1e:	f43f ae56 	beq.w	801a6ce <_printf_float+0xb6>
 801aa22:	f108 0801 	add.w	r8, r8, #1
 801aa26:	45d0      	cmp	r8, sl
 801aa28:	dbf3      	blt.n	801aa12 <_printf_float+0x3fa>
 801aa2a:	464b      	mov	r3, r9
 801aa2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801aa30:	e6df      	b.n	801a7f2 <_printf_float+0x1da>
 801aa32:	f04f 0800 	mov.w	r8, #0
 801aa36:	f104 0b1a 	add.w	fp, r4, #26
 801aa3a:	e7f4      	b.n	801aa26 <_printf_float+0x40e>
 801aa3c:	2301      	movs	r3, #1
 801aa3e:	4642      	mov	r2, r8
 801aa40:	e7e1      	b.n	801aa06 <_printf_float+0x3ee>
 801aa42:	2301      	movs	r3, #1
 801aa44:	464a      	mov	r2, r9
 801aa46:	4631      	mov	r1, r6
 801aa48:	4628      	mov	r0, r5
 801aa4a:	47b8      	blx	r7
 801aa4c:	3001      	adds	r0, #1
 801aa4e:	f43f ae3e 	beq.w	801a6ce <_printf_float+0xb6>
 801aa52:	f108 0801 	add.w	r8, r8, #1
 801aa56:	68e3      	ldr	r3, [r4, #12]
 801aa58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801aa5a:	1a5b      	subs	r3, r3, r1
 801aa5c:	4543      	cmp	r3, r8
 801aa5e:	dcf0      	bgt.n	801aa42 <_printf_float+0x42a>
 801aa60:	e6fc      	b.n	801a85c <_printf_float+0x244>
 801aa62:	f04f 0800 	mov.w	r8, #0
 801aa66:	f104 0919 	add.w	r9, r4, #25
 801aa6a:	e7f4      	b.n	801aa56 <_printf_float+0x43e>

0801aa6c <_printf_common>:
 801aa6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa70:	4616      	mov	r6, r2
 801aa72:	4698      	mov	r8, r3
 801aa74:	688a      	ldr	r2, [r1, #8]
 801aa76:	690b      	ldr	r3, [r1, #16]
 801aa78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	bfb8      	it	lt
 801aa80:	4613      	movlt	r3, r2
 801aa82:	6033      	str	r3, [r6, #0]
 801aa84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801aa88:	4607      	mov	r7, r0
 801aa8a:	460c      	mov	r4, r1
 801aa8c:	b10a      	cbz	r2, 801aa92 <_printf_common+0x26>
 801aa8e:	3301      	adds	r3, #1
 801aa90:	6033      	str	r3, [r6, #0]
 801aa92:	6823      	ldr	r3, [r4, #0]
 801aa94:	0699      	lsls	r1, r3, #26
 801aa96:	bf42      	ittt	mi
 801aa98:	6833      	ldrmi	r3, [r6, #0]
 801aa9a:	3302      	addmi	r3, #2
 801aa9c:	6033      	strmi	r3, [r6, #0]
 801aa9e:	6825      	ldr	r5, [r4, #0]
 801aaa0:	f015 0506 	ands.w	r5, r5, #6
 801aaa4:	d106      	bne.n	801aab4 <_printf_common+0x48>
 801aaa6:	f104 0a19 	add.w	sl, r4, #25
 801aaaa:	68e3      	ldr	r3, [r4, #12]
 801aaac:	6832      	ldr	r2, [r6, #0]
 801aaae:	1a9b      	subs	r3, r3, r2
 801aab0:	42ab      	cmp	r3, r5
 801aab2:	dc26      	bgt.n	801ab02 <_printf_common+0x96>
 801aab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801aab8:	6822      	ldr	r2, [r4, #0]
 801aaba:	3b00      	subs	r3, #0
 801aabc:	bf18      	it	ne
 801aabe:	2301      	movne	r3, #1
 801aac0:	0692      	lsls	r2, r2, #26
 801aac2:	d42b      	bmi.n	801ab1c <_printf_common+0xb0>
 801aac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801aac8:	4641      	mov	r1, r8
 801aaca:	4638      	mov	r0, r7
 801aacc:	47c8      	blx	r9
 801aace:	3001      	adds	r0, #1
 801aad0:	d01e      	beq.n	801ab10 <_printf_common+0xa4>
 801aad2:	6823      	ldr	r3, [r4, #0]
 801aad4:	6922      	ldr	r2, [r4, #16]
 801aad6:	f003 0306 	and.w	r3, r3, #6
 801aada:	2b04      	cmp	r3, #4
 801aadc:	bf02      	ittt	eq
 801aade:	68e5      	ldreq	r5, [r4, #12]
 801aae0:	6833      	ldreq	r3, [r6, #0]
 801aae2:	1aed      	subeq	r5, r5, r3
 801aae4:	68a3      	ldr	r3, [r4, #8]
 801aae6:	bf0c      	ite	eq
 801aae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aaec:	2500      	movne	r5, #0
 801aaee:	4293      	cmp	r3, r2
 801aaf0:	bfc4      	itt	gt
 801aaf2:	1a9b      	subgt	r3, r3, r2
 801aaf4:	18ed      	addgt	r5, r5, r3
 801aaf6:	2600      	movs	r6, #0
 801aaf8:	341a      	adds	r4, #26
 801aafa:	42b5      	cmp	r5, r6
 801aafc:	d11a      	bne.n	801ab34 <_printf_common+0xc8>
 801aafe:	2000      	movs	r0, #0
 801ab00:	e008      	b.n	801ab14 <_printf_common+0xa8>
 801ab02:	2301      	movs	r3, #1
 801ab04:	4652      	mov	r2, sl
 801ab06:	4641      	mov	r1, r8
 801ab08:	4638      	mov	r0, r7
 801ab0a:	47c8      	blx	r9
 801ab0c:	3001      	adds	r0, #1
 801ab0e:	d103      	bne.n	801ab18 <_printf_common+0xac>
 801ab10:	f04f 30ff 	mov.w	r0, #4294967295
 801ab14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab18:	3501      	adds	r5, #1
 801ab1a:	e7c6      	b.n	801aaaa <_printf_common+0x3e>
 801ab1c:	18e1      	adds	r1, r4, r3
 801ab1e:	1c5a      	adds	r2, r3, #1
 801ab20:	2030      	movs	r0, #48	@ 0x30
 801ab22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ab26:	4422      	add	r2, r4
 801ab28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ab2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ab30:	3302      	adds	r3, #2
 801ab32:	e7c7      	b.n	801aac4 <_printf_common+0x58>
 801ab34:	2301      	movs	r3, #1
 801ab36:	4622      	mov	r2, r4
 801ab38:	4641      	mov	r1, r8
 801ab3a:	4638      	mov	r0, r7
 801ab3c:	47c8      	blx	r9
 801ab3e:	3001      	adds	r0, #1
 801ab40:	d0e6      	beq.n	801ab10 <_printf_common+0xa4>
 801ab42:	3601      	adds	r6, #1
 801ab44:	e7d9      	b.n	801aafa <_printf_common+0x8e>
	...

0801ab48 <_printf_i>:
 801ab48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab4c:	7e0f      	ldrb	r7, [r1, #24]
 801ab4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ab50:	2f78      	cmp	r7, #120	@ 0x78
 801ab52:	4691      	mov	r9, r2
 801ab54:	4680      	mov	r8, r0
 801ab56:	460c      	mov	r4, r1
 801ab58:	469a      	mov	sl, r3
 801ab5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ab5e:	d807      	bhi.n	801ab70 <_printf_i+0x28>
 801ab60:	2f62      	cmp	r7, #98	@ 0x62
 801ab62:	d80a      	bhi.n	801ab7a <_printf_i+0x32>
 801ab64:	2f00      	cmp	r7, #0
 801ab66:	f000 80d2 	beq.w	801ad0e <_printf_i+0x1c6>
 801ab6a:	2f58      	cmp	r7, #88	@ 0x58
 801ab6c:	f000 80b9 	beq.w	801ace2 <_printf_i+0x19a>
 801ab70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ab74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ab78:	e03a      	b.n	801abf0 <_printf_i+0xa8>
 801ab7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ab7e:	2b15      	cmp	r3, #21
 801ab80:	d8f6      	bhi.n	801ab70 <_printf_i+0x28>
 801ab82:	a101      	add	r1, pc, #4	@ (adr r1, 801ab88 <_printf_i+0x40>)
 801ab84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ab88:	0801abe1 	.word	0x0801abe1
 801ab8c:	0801abf5 	.word	0x0801abf5
 801ab90:	0801ab71 	.word	0x0801ab71
 801ab94:	0801ab71 	.word	0x0801ab71
 801ab98:	0801ab71 	.word	0x0801ab71
 801ab9c:	0801ab71 	.word	0x0801ab71
 801aba0:	0801abf5 	.word	0x0801abf5
 801aba4:	0801ab71 	.word	0x0801ab71
 801aba8:	0801ab71 	.word	0x0801ab71
 801abac:	0801ab71 	.word	0x0801ab71
 801abb0:	0801ab71 	.word	0x0801ab71
 801abb4:	0801acf5 	.word	0x0801acf5
 801abb8:	0801ac1f 	.word	0x0801ac1f
 801abbc:	0801acaf 	.word	0x0801acaf
 801abc0:	0801ab71 	.word	0x0801ab71
 801abc4:	0801ab71 	.word	0x0801ab71
 801abc8:	0801ad17 	.word	0x0801ad17
 801abcc:	0801ab71 	.word	0x0801ab71
 801abd0:	0801ac1f 	.word	0x0801ac1f
 801abd4:	0801ab71 	.word	0x0801ab71
 801abd8:	0801ab71 	.word	0x0801ab71
 801abdc:	0801acb7 	.word	0x0801acb7
 801abe0:	6833      	ldr	r3, [r6, #0]
 801abe2:	1d1a      	adds	r2, r3, #4
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	6032      	str	r2, [r6, #0]
 801abe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801abec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801abf0:	2301      	movs	r3, #1
 801abf2:	e09d      	b.n	801ad30 <_printf_i+0x1e8>
 801abf4:	6833      	ldr	r3, [r6, #0]
 801abf6:	6820      	ldr	r0, [r4, #0]
 801abf8:	1d19      	adds	r1, r3, #4
 801abfa:	6031      	str	r1, [r6, #0]
 801abfc:	0606      	lsls	r6, r0, #24
 801abfe:	d501      	bpl.n	801ac04 <_printf_i+0xbc>
 801ac00:	681d      	ldr	r5, [r3, #0]
 801ac02:	e003      	b.n	801ac0c <_printf_i+0xc4>
 801ac04:	0645      	lsls	r5, r0, #25
 801ac06:	d5fb      	bpl.n	801ac00 <_printf_i+0xb8>
 801ac08:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ac0c:	2d00      	cmp	r5, #0
 801ac0e:	da03      	bge.n	801ac18 <_printf_i+0xd0>
 801ac10:	232d      	movs	r3, #45	@ 0x2d
 801ac12:	426d      	negs	r5, r5
 801ac14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ac18:	4859      	ldr	r0, [pc, #356]	@ (801ad80 <_printf_i+0x238>)
 801ac1a:	230a      	movs	r3, #10
 801ac1c:	e011      	b.n	801ac42 <_printf_i+0xfa>
 801ac1e:	6821      	ldr	r1, [r4, #0]
 801ac20:	6833      	ldr	r3, [r6, #0]
 801ac22:	0608      	lsls	r0, r1, #24
 801ac24:	f853 5b04 	ldr.w	r5, [r3], #4
 801ac28:	d402      	bmi.n	801ac30 <_printf_i+0xe8>
 801ac2a:	0649      	lsls	r1, r1, #25
 801ac2c:	bf48      	it	mi
 801ac2e:	b2ad      	uxthmi	r5, r5
 801ac30:	2f6f      	cmp	r7, #111	@ 0x6f
 801ac32:	4853      	ldr	r0, [pc, #332]	@ (801ad80 <_printf_i+0x238>)
 801ac34:	6033      	str	r3, [r6, #0]
 801ac36:	bf14      	ite	ne
 801ac38:	230a      	movne	r3, #10
 801ac3a:	2308      	moveq	r3, #8
 801ac3c:	2100      	movs	r1, #0
 801ac3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ac42:	6866      	ldr	r6, [r4, #4]
 801ac44:	60a6      	str	r6, [r4, #8]
 801ac46:	2e00      	cmp	r6, #0
 801ac48:	bfa2      	ittt	ge
 801ac4a:	6821      	ldrge	r1, [r4, #0]
 801ac4c:	f021 0104 	bicge.w	r1, r1, #4
 801ac50:	6021      	strge	r1, [r4, #0]
 801ac52:	b90d      	cbnz	r5, 801ac58 <_printf_i+0x110>
 801ac54:	2e00      	cmp	r6, #0
 801ac56:	d04b      	beq.n	801acf0 <_printf_i+0x1a8>
 801ac58:	4616      	mov	r6, r2
 801ac5a:	fbb5 f1f3 	udiv	r1, r5, r3
 801ac5e:	fb03 5711 	mls	r7, r3, r1, r5
 801ac62:	5dc7      	ldrb	r7, [r0, r7]
 801ac64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ac68:	462f      	mov	r7, r5
 801ac6a:	42bb      	cmp	r3, r7
 801ac6c:	460d      	mov	r5, r1
 801ac6e:	d9f4      	bls.n	801ac5a <_printf_i+0x112>
 801ac70:	2b08      	cmp	r3, #8
 801ac72:	d10b      	bne.n	801ac8c <_printf_i+0x144>
 801ac74:	6823      	ldr	r3, [r4, #0]
 801ac76:	07df      	lsls	r7, r3, #31
 801ac78:	d508      	bpl.n	801ac8c <_printf_i+0x144>
 801ac7a:	6923      	ldr	r3, [r4, #16]
 801ac7c:	6861      	ldr	r1, [r4, #4]
 801ac7e:	4299      	cmp	r1, r3
 801ac80:	bfde      	ittt	le
 801ac82:	2330      	movle	r3, #48	@ 0x30
 801ac84:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ac88:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ac8c:	1b92      	subs	r2, r2, r6
 801ac8e:	6122      	str	r2, [r4, #16]
 801ac90:	f8cd a000 	str.w	sl, [sp]
 801ac94:	464b      	mov	r3, r9
 801ac96:	aa03      	add	r2, sp, #12
 801ac98:	4621      	mov	r1, r4
 801ac9a:	4640      	mov	r0, r8
 801ac9c:	f7ff fee6 	bl	801aa6c <_printf_common>
 801aca0:	3001      	adds	r0, #1
 801aca2:	d14a      	bne.n	801ad3a <_printf_i+0x1f2>
 801aca4:	f04f 30ff 	mov.w	r0, #4294967295
 801aca8:	b004      	add	sp, #16
 801acaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acae:	6823      	ldr	r3, [r4, #0]
 801acb0:	f043 0320 	orr.w	r3, r3, #32
 801acb4:	6023      	str	r3, [r4, #0]
 801acb6:	4833      	ldr	r0, [pc, #204]	@ (801ad84 <_printf_i+0x23c>)
 801acb8:	2778      	movs	r7, #120	@ 0x78
 801acba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801acbe:	6823      	ldr	r3, [r4, #0]
 801acc0:	6831      	ldr	r1, [r6, #0]
 801acc2:	061f      	lsls	r7, r3, #24
 801acc4:	f851 5b04 	ldr.w	r5, [r1], #4
 801acc8:	d402      	bmi.n	801acd0 <_printf_i+0x188>
 801acca:	065f      	lsls	r7, r3, #25
 801accc:	bf48      	it	mi
 801acce:	b2ad      	uxthmi	r5, r5
 801acd0:	6031      	str	r1, [r6, #0]
 801acd2:	07d9      	lsls	r1, r3, #31
 801acd4:	bf44      	itt	mi
 801acd6:	f043 0320 	orrmi.w	r3, r3, #32
 801acda:	6023      	strmi	r3, [r4, #0]
 801acdc:	b11d      	cbz	r5, 801ace6 <_printf_i+0x19e>
 801acde:	2310      	movs	r3, #16
 801ace0:	e7ac      	b.n	801ac3c <_printf_i+0xf4>
 801ace2:	4827      	ldr	r0, [pc, #156]	@ (801ad80 <_printf_i+0x238>)
 801ace4:	e7e9      	b.n	801acba <_printf_i+0x172>
 801ace6:	6823      	ldr	r3, [r4, #0]
 801ace8:	f023 0320 	bic.w	r3, r3, #32
 801acec:	6023      	str	r3, [r4, #0]
 801acee:	e7f6      	b.n	801acde <_printf_i+0x196>
 801acf0:	4616      	mov	r6, r2
 801acf2:	e7bd      	b.n	801ac70 <_printf_i+0x128>
 801acf4:	6833      	ldr	r3, [r6, #0]
 801acf6:	6825      	ldr	r5, [r4, #0]
 801acf8:	6961      	ldr	r1, [r4, #20]
 801acfa:	1d18      	adds	r0, r3, #4
 801acfc:	6030      	str	r0, [r6, #0]
 801acfe:	062e      	lsls	r6, r5, #24
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	d501      	bpl.n	801ad08 <_printf_i+0x1c0>
 801ad04:	6019      	str	r1, [r3, #0]
 801ad06:	e002      	b.n	801ad0e <_printf_i+0x1c6>
 801ad08:	0668      	lsls	r0, r5, #25
 801ad0a:	d5fb      	bpl.n	801ad04 <_printf_i+0x1bc>
 801ad0c:	8019      	strh	r1, [r3, #0]
 801ad0e:	2300      	movs	r3, #0
 801ad10:	6123      	str	r3, [r4, #16]
 801ad12:	4616      	mov	r6, r2
 801ad14:	e7bc      	b.n	801ac90 <_printf_i+0x148>
 801ad16:	6833      	ldr	r3, [r6, #0]
 801ad18:	1d1a      	adds	r2, r3, #4
 801ad1a:	6032      	str	r2, [r6, #0]
 801ad1c:	681e      	ldr	r6, [r3, #0]
 801ad1e:	6862      	ldr	r2, [r4, #4]
 801ad20:	2100      	movs	r1, #0
 801ad22:	4630      	mov	r0, r6
 801ad24:	f7e5 fa2c 	bl	8000180 <memchr>
 801ad28:	b108      	cbz	r0, 801ad2e <_printf_i+0x1e6>
 801ad2a:	1b80      	subs	r0, r0, r6
 801ad2c:	6060      	str	r0, [r4, #4]
 801ad2e:	6863      	ldr	r3, [r4, #4]
 801ad30:	6123      	str	r3, [r4, #16]
 801ad32:	2300      	movs	r3, #0
 801ad34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ad38:	e7aa      	b.n	801ac90 <_printf_i+0x148>
 801ad3a:	6923      	ldr	r3, [r4, #16]
 801ad3c:	4632      	mov	r2, r6
 801ad3e:	4649      	mov	r1, r9
 801ad40:	4640      	mov	r0, r8
 801ad42:	47d0      	blx	sl
 801ad44:	3001      	adds	r0, #1
 801ad46:	d0ad      	beq.n	801aca4 <_printf_i+0x15c>
 801ad48:	6823      	ldr	r3, [r4, #0]
 801ad4a:	079b      	lsls	r3, r3, #30
 801ad4c:	d413      	bmi.n	801ad76 <_printf_i+0x22e>
 801ad4e:	68e0      	ldr	r0, [r4, #12]
 801ad50:	9b03      	ldr	r3, [sp, #12]
 801ad52:	4298      	cmp	r0, r3
 801ad54:	bfb8      	it	lt
 801ad56:	4618      	movlt	r0, r3
 801ad58:	e7a6      	b.n	801aca8 <_printf_i+0x160>
 801ad5a:	2301      	movs	r3, #1
 801ad5c:	4632      	mov	r2, r6
 801ad5e:	4649      	mov	r1, r9
 801ad60:	4640      	mov	r0, r8
 801ad62:	47d0      	blx	sl
 801ad64:	3001      	adds	r0, #1
 801ad66:	d09d      	beq.n	801aca4 <_printf_i+0x15c>
 801ad68:	3501      	adds	r5, #1
 801ad6a:	68e3      	ldr	r3, [r4, #12]
 801ad6c:	9903      	ldr	r1, [sp, #12]
 801ad6e:	1a5b      	subs	r3, r3, r1
 801ad70:	42ab      	cmp	r3, r5
 801ad72:	dcf2      	bgt.n	801ad5a <_printf_i+0x212>
 801ad74:	e7eb      	b.n	801ad4e <_printf_i+0x206>
 801ad76:	2500      	movs	r5, #0
 801ad78:	f104 0619 	add.w	r6, r4, #25
 801ad7c:	e7f5      	b.n	801ad6a <_printf_i+0x222>
 801ad7e:	bf00      	nop
 801ad80:	08021c7b 	.word	0x08021c7b
 801ad84:	08021c8c 	.word	0x08021c8c

0801ad88 <_scanf_float>:
 801ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad8c:	b087      	sub	sp, #28
 801ad8e:	4617      	mov	r7, r2
 801ad90:	9303      	str	r3, [sp, #12]
 801ad92:	688b      	ldr	r3, [r1, #8]
 801ad94:	1e5a      	subs	r2, r3, #1
 801ad96:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ad9a:	bf81      	itttt	hi
 801ad9c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ada0:	eb03 0b05 	addhi.w	fp, r3, r5
 801ada4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ada8:	608b      	strhi	r3, [r1, #8]
 801adaa:	680b      	ldr	r3, [r1, #0]
 801adac:	460a      	mov	r2, r1
 801adae:	f04f 0500 	mov.w	r5, #0
 801adb2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801adb6:	f842 3b1c 	str.w	r3, [r2], #28
 801adba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801adbe:	4680      	mov	r8, r0
 801adc0:	460c      	mov	r4, r1
 801adc2:	bf98      	it	ls
 801adc4:	f04f 0b00 	movls.w	fp, #0
 801adc8:	9201      	str	r2, [sp, #4]
 801adca:	4616      	mov	r6, r2
 801adcc:	46aa      	mov	sl, r5
 801adce:	46a9      	mov	r9, r5
 801add0:	9502      	str	r5, [sp, #8]
 801add2:	68a2      	ldr	r2, [r4, #8]
 801add4:	b152      	cbz	r2, 801adec <_scanf_float+0x64>
 801add6:	683b      	ldr	r3, [r7, #0]
 801add8:	781b      	ldrb	r3, [r3, #0]
 801adda:	2b4e      	cmp	r3, #78	@ 0x4e
 801addc:	d864      	bhi.n	801aea8 <_scanf_float+0x120>
 801adde:	2b40      	cmp	r3, #64	@ 0x40
 801ade0:	d83c      	bhi.n	801ae5c <_scanf_float+0xd4>
 801ade2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801ade6:	b2c8      	uxtb	r0, r1
 801ade8:	280e      	cmp	r0, #14
 801adea:	d93a      	bls.n	801ae62 <_scanf_float+0xda>
 801adec:	f1b9 0f00 	cmp.w	r9, #0
 801adf0:	d003      	beq.n	801adfa <_scanf_float+0x72>
 801adf2:	6823      	ldr	r3, [r4, #0]
 801adf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801adf8:	6023      	str	r3, [r4, #0]
 801adfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801adfe:	f1ba 0f01 	cmp.w	sl, #1
 801ae02:	f200 8117 	bhi.w	801b034 <_scanf_float+0x2ac>
 801ae06:	9b01      	ldr	r3, [sp, #4]
 801ae08:	429e      	cmp	r6, r3
 801ae0a:	f200 8108 	bhi.w	801b01e <_scanf_float+0x296>
 801ae0e:	2001      	movs	r0, #1
 801ae10:	b007      	add	sp, #28
 801ae12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae16:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801ae1a:	2a0d      	cmp	r2, #13
 801ae1c:	d8e6      	bhi.n	801adec <_scanf_float+0x64>
 801ae1e:	a101      	add	r1, pc, #4	@ (adr r1, 801ae24 <_scanf_float+0x9c>)
 801ae20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ae24:	0801af6b 	.word	0x0801af6b
 801ae28:	0801aded 	.word	0x0801aded
 801ae2c:	0801aded 	.word	0x0801aded
 801ae30:	0801aded 	.word	0x0801aded
 801ae34:	0801afcb 	.word	0x0801afcb
 801ae38:	0801afa3 	.word	0x0801afa3
 801ae3c:	0801aded 	.word	0x0801aded
 801ae40:	0801aded 	.word	0x0801aded
 801ae44:	0801af79 	.word	0x0801af79
 801ae48:	0801aded 	.word	0x0801aded
 801ae4c:	0801aded 	.word	0x0801aded
 801ae50:	0801aded 	.word	0x0801aded
 801ae54:	0801aded 	.word	0x0801aded
 801ae58:	0801af31 	.word	0x0801af31
 801ae5c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801ae60:	e7db      	b.n	801ae1a <_scanf_float+0x92>
 801ae62:	290e      	cmp	r1, #14
 801ae64:	d8c2      	bhi.n	801adec <_scanf_float+0x64>
 801ae66:	a001      	add	r0, pc, #4	@ (adr r0, 801ae6c <_scanf_float+0xe4>)
 801ae68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ae6c:	0801af21 	.word	0x0801af21
 801ae70:	0801aded 	.word	0x0801aded
 801ae74:	0801af21 	.word	0x0801af21
 801ae78:	0801afb7 	.word	0x0801afb7
 801ae7c:	0801aded 	.word	0x0801aded
 801ae80:	0801aec9 	.word	0x0801aec9
 801ae84:	0801af07 	.word	0x0801af07
 801ae88:	0801af07 	.word	0x0801af07
 801ae8c:	0801af07 	.word	0x0801af07
 801ae90:	0801af07 	.word	0x0801af07
 801ae94:	0801af07 	.word	0x0801af07
 801ae98:	0801af07 	.word	0x0801af07
 801ae9c:	0801af07 	.word	0x0801af07
 801aea0:	0801af07 	.word	0x0801af07
 801aea4:	0801af07 	.word	0x0801af07
 801aea8:	2b6e      	cmp	r3, #110	@ 0x6e
 801aeaa:	d809      	bhi.n	801aec0 <_scanf_float+0x138>
 801aeac:	2b60      	cmp	r3, #96	@ 0x60
 801aeae:	d8b2      	bhi.n	801ae16 <_scanf_float+0x8e>
 801aeb0:	2b54      	cmp	r3, #84	@ 0x54
 801aeb2:	d07b      	beq.n	801afac <_scanf_float+0x224>
 801aeb4:	2b59      	cmp	r3, #89	@ 0x59
 801aeb6:	d199      	bne.n	801adec <_scanf_float+0x64>
 801aeb8:	2d07      	cmp	r5, #7
 801aeba:	d197      	bne.n	801adec <_scanf_float+0x64>
 801aebc:	2508      	movs	r5, #8
 801aebe:	e02c      	b.n	801af1a <_scanf_float+0x192>
 801aec0:	2b74      	cmp	r3, #116	@ 0x74
 801aec2:	d073      	beq.n	801afac <_scanf_float+0x224>
 801aec4:	2b79      	cmp	r3, #121	@ 0x79
 801aec6:	e7f6      	b.n	801aeb6 <_scanf_float+0x12e>
 801aec8:	6821      	ldr	r1, [r4, #0]
 801aeca:	05c8      	lsls	r0, r1, #23
 801aecc:	d51b      	bpl.n	801af06 <_scanf_float+0x17e>
 801aece:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801aed2:	6021      	str	r1, [r4, #0]
 801aed4:	f109 0901 	add.w	r9, r9, #1
 801aed8:	f1bb 0f00 	cmp.w	fp, #0
 801aedc:	d003      	beq.n	801aee6 <_scanf_float+0x15e>
 801aede:	3201      	adds	r2, #1
 801aee0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aee4:	60a2      	str	r2, [r4, #8]
 801aee6:	68a3      	ldr	r3, [r4, #8]
 801aee8:	3b01      	subs	r3, #1
 801aeea:	60a3      	str	r3, [r4, #8]
 801aeec:	6923      	ldr	r3, [r4, #16]
 801aeee:	3301      	adds	r3, #1
 801aef0:	6123      	str	r3, [r4, #16]
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	3b01      	subs	r3, #1
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	607b      	str	r3, [r7, #4]
 801aefa:	f340 8087 	ble.w	801b00c <_scanf_float+0x284>
 801aefe:	683b      	ldr	r3, [r7, #0]
 801af00:	3301      	adds	r3, #1
 801af02:	603b      	str	r3, [r7, #0]
 801af04:	e765      	b.n	801add2 <_scanf_float+0x4a>
 801af06:	eb1a 0105 	adds.w	r1, sl, r5
 801af0a:	f47f af6f 	bne.w	801adec <_scanf_float+0x64>
 801af0e:	6822      	ldr	r2, [r4, #0]
 801af10:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801af14:	6022      	str	r2, [r4, #0]
 801af16:	460d      	mov	r5, r1
 801af18:	468a      	mov	sl, r1
 801af1a:	f806 3b01 	strb.w	r3, [r6], #1
 801af1e:	e7e2      	b.n	801aee6 <_scanf_float+0x15e>
 801af20:	6822      	ldr	r2, [r4, #0]
 801af22:	0610      	lsls	r0, r2, #24
 801af24:	f57f af62 	bpl.w	801adec <_scanf_float+0x64>
 801af28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801af2c:	6022      	str	r2, [r4, #0]
 801af2e:	e7f4      	b.n	801af1a <_scanf_float+0x192>
 801af30:	f1ba 0f00 	cmp.w	sl, #0
 801af34:	d10e      	bne.n	801af54 <_scanf_float+0x1cc>
 801af36:	f1b9 0f00 	cmp.w	r9, #0
 801af3a:	d10e      	bne.n	801af5a <_scanf_float+0x1d2>
 801af3c:	6822      	ldr	r2, [r4, #0]
 801af3e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801af42:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801af46:	d108      	bne.n	801af5a <_scanf_float+0x1d2>
 801af48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801af4c:	6022      	str	r2, [r4, #0]
 801af4e:	f04f 0a01 	mov.w	sl, #1
 801af52:	e7e2      	b.n	801af1a <_scanf_float+0x192>
 801af54:	f1ba 0f02 	cmp.w	sl, #2
 801af58:	d055      	beq.n	801b006 <_scanf_float+0x27e>
 801af5a:	2d01      	cmp	r5, #1
 801af5c:	d002      	beq.n	801af64 <_scanf_float+0x1dc>
 801af5e:	2d04      	cmp	r5, #4
 801af60:	f47f af44 	bne.w	801adec <_scanf_float+0x64>
 801af64:	3501      	adds	r5, #1
 801af66:	b2ed      	uxtb	r5, r5
 801af68:	e7d7      	b.n	801af1a <_scanf_float+0x192>
 801af6a:	f1ba 0f01 	cmp.w	sl, #1
 801af6e:	f47f af3d 	bne.w	801adec <_scanf_float+0x64>
 801af72:	f04f 0a02 	mov.w	sl, #2
 801af76:	e7d0      	b.n	801af1a <_scanf_float+0x192>
 801af78:	b97d      	cbnz	r5, 801af9a <_scanf_float+0x212>
 801af7a:	f1b9 0f00 	cmp.w	r9, #0
 801af7e:	f47f af38 	bne.w	801adf2 <_scanf_float+0x6a>
 801af82:	6822      	ldr	r2, [r4, #0]
 801af84:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801af88:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801af8c:	f040 8108 	bne.w	801b1a0 <_scanf_float+0x418>
 801af90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801af94:	6022      	str	r2, [r4, #0]
 801af96:	2501      	movs	r5, #1
 801af98:	e7bf      	b.n	801af1a <_scanf_float+0x192>
 801af9a:	2d03      	cmp	r5, #3
 801af9c:	d0e2      	beq.n	801af64 <_scanf_float+0x1dc>
 801af9e:	2d05      	cmp	r5, #5
 801afa0:	e7de      	b.n	801af60 <_scanf_float+0x1d8>
 801afa2:	2d02      	cmp	r5, #2
 801afa4:	f47f af22 	bne.w	801adec <_scanf_float+0x64>
 801afa8:	2503      	movs	r5, #3
 801afaa:	e7b6      	b.n	801af1a <_scanf_float+0x192>
 801afac:	2d06      	cmp	r5, #6
 801afae:	f47f af1d 	bne.w	801adec <_scanf_float+0x64>
 801afb2:	2507      	movs	r5, #7
 801afb4:	e7b1      	b.n	801af1a <_scanf_float+0x192>
 801afb6:	6822      	ldr	r2, [r4, #0]
 801afb8:	0591      	lsls	r1, r2, #22
 801afba:	f57f af17 	bpl.w	801adec <_scanf_float+0x64>
 801afbe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801afc2:	6022      	str	r2, [r4, #0]
 801afc4:	f8cd 9008 	str.w	r9, [sp, #8]
 801afc8:	e7a7      	b.n	801af1a <_scanf_float+0x192>
 801afca:	6822      	ldr	r2, [r4, #0]
 801afcc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801afd0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801afd4:	d006      	beq.n	801afe4 <_scanf_float+0x25c>
 801afd6:	0550      	lsls	r0, r2, #21
 801afd8:	f57f af08 	bpl.w	801adec <_scanf_float+0x64>
 801afdc:	f1b9 0f00 	cmp.w	r9, #0
 801afe0:	f000 80de 	beq.w	801b1a0 <_scanf_float+0x418>
 801afe4:	0591      	lsls	r1, r2, #22
 801afe6:	bf58      	it	pl
 801afe8:	9902      	ldrpl	r1, [sp, #8]
 801afea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801afee:	bf58      	it	pl
 801aff0:	eba9 0101 	subpl.w	r1, r9, r1
 801aff4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801aff8:	bf58      	it	pl
 801affa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801affe:	6022      	str	r2, [r4, #0]
 801b000:	f04f 0900 	mov.w	r9, #0
 801b004:	e789      	b.n	801af1a <_scanf_float+0x192>
 801b006:	f04f 0a03 	mov.w	sl, #3
 801b00a:	e786      	b.n	801af1a <_scanf_float+0x192>
 801b00c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b010:	4639      	mov	r1, r7
 801b012:	4640      	mov	r0, r8
 801b014:	4798      	blx	r3
 801b016:	2800      	cmp	r0, #0
 801b018:	f43f aedb 	beq.w	801add2 <_scanf_float+0x4a>
 801b01c:	e6e6      	b.n	801adec <_scanf_float+0x64>
 801b01e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b022:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b026:	463a      	mov	r2, r7
 801b028:	4640      	mov	r0, r8
 801b02a:	4798      	blx	r3
 801b02c:	6923      	ldr	r3, [r4, #16]
 801b02e:	3b01      	subs	r3, #1
 801b030:	6123      	str	r3, [r4, #16]
 801b032:	e6e8      	b.n	801ae06 <_scanf_float+0x7e>
 801b034:	1e6b      	subs	r3, r5, #1
 801b036:	2b06      	cmp	r3, #6
 801b038:	d824      	bhi.n	801b084 <_scanf_float+0x2fc>
 801b03a:	2d02      	cmp	r5, #2
 801b03c:	d836      	bhi.n	801b0ac <_scanf_float+0x324>
 801b03e:	9b01      	ldr	r3, [sp, #4]
 801b040:	429e      	cmp	r6, r3
 801b042:	f67f aee4 	bls.w	801ae0e <_scanf_float+0x86>
 801b046:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b04a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b04e:	463a      	mov	r2, r7
 801b050:	4640      	mov	r0, r8
 801b052:	4798      	blx	r3
 801b054:	6923      	ldr	r3, [r4, #16]
 801b056:	3b01      	subs	r3, #1
 801b058:	6123      	str	r3, [r4, #16]
 801b05a:	e7f0      	b.n	801b03e <_scanf_float+0x2b6>
 801b05c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b060:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b064:	463a      	mov	r2, r7
 801b066:	4640      	mov	r0, r8
 801b068:	4798      	blx	r3
 801b06a:	6923      	ldr	r3, [r4, #16]
 801b06c:	3b01      	subs	r3, #1
 801b06e:	6123      	str	r3, [r4, #16]
 801b070:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b074:	fa5f fa8a 	uxtb.w	sl, sl
 801b078:	f1ba 0f02 	cmp.w	sl, #2
 801b07c:	d1ee      	bne.n	801b05c <_scanf_float+0x2d4>
 801b07e:	3d03      	subs	r5, #3
 801b080:	b2ed      	uxtb	r5, r5
 801b082:	1b76      	subs	r6, r6, r5
 801b084:	6823      	ldr	r3, [r4, #0]
 801b086:	05da      	lsls	r2, r3, #23
 801b088:	d530      	bpl.n	801b0ec <_scanf_float+0x364>
 801b08a:	055b      	lsls	r3, r3, #21
 801b08c:	d511      	bpl.n	801b0b2 <_scanf_float+0x32a>
 801b08e:	9b01      	ldr	r3, [sp, #4]
 801b090:	429e      	cmp	r6, r3
 801b092:	f67f aebc 	bls.w	801ae0e <_scanf_float+0x86>
 801b096:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b09a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b09e:	463a      	mov	r2, r7
 801b0a0:	4640      	mov	r0, r8
 801b0a2:	4798      	blx	r3
 801b0a4:	6923      	ldr	r3, [r4, #16]
 801b0a6:	3b01      	subs	r3, #1
 801b0a8:	6123      	str	r3, [r4, #16]
 801b0aa:	e7f0      	b.n	801b08e <_scanf_float+0x306>
 801b0ac:	46aa      	mov	sl, r5
 801b0ae:	46b3      	mov	fp, r6
 801b0b0:	e7de      	b.n	801b070 <_scanf_float+0x2e8>
 801b0b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b0b6:	6923      	ldr	r3, [r4, #16]
 801b0b8:	2965      	cmp	r1, #101	@ 0x65
 801b0ba:	f103 33ff 	add.w	r3, r3, #4294967295
 801b0be:	f106 35ff 	add.w	r5, r6, #4294967295
 801b0c2:	6123      	str	r3, [r4, #16]
 801b0c4:	d00c      	beq.n	801b0e0 <_scanf_float+0x358>
 801b0c6:	2945      	cmp	r1, #69	@ 0x45
 801b0c8:	d00a      	beq.n	801b0e0 <_scanf_float+0x358>
 801b0ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b0ce:	463a      	mov	r2, r7
 801b0d0:	4640      	mov	r0, r8
 801b0d2:	4798      	blx	r3
 801b0d4:	6923      	ldr	r3, [r4, #16]
 801b0d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b0da:	3b01      	subs	r3, #1
 801b0dc:	1eb5      	subs	r5, r6, #2
 801b0de:	6123      	str	r3, [r4, #16]
 801b0e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b0e4:	463a      	mov	r2, r7
 801b0e6:	4640      	mov	r0, r8
 801b0e8:	4798      	blx	r3
 801b0ea:	462e      	mov	r6, r5
 801b0ec:	6822      	ldr	r2, [r4, #0]
 801b0ee:	f012 0210 	ands.w	r2, r2, #16
 801b0f2:	d001      	beq.n	801b0f8 <_scanf_float+0x370>
 801b0f4:	2000      	movs	r0, #0
 801b0f6:	e68b      	b.n	801ae10 <_scanf_float+0x88>
 801b0f8:	7032      	strb	r2, [r6, #0]
 801b0fa:	6823      	ldr	r3, [r4, #0]
 801b0fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b104:	d11c      	bne.n	801b140 <_scanf_float+0x3b8>
 801b106:	9b02      	ldr	r3, [sp, #8]
 801b108:	454b      	cmp	r3, r9
 801b10a:	eba3 0209 	sub.w	r2, r3, r9
 801b10e:	d123      	bne.n	801b158 <_scanf_float+0x3d0>
 801b110:	9901      	ldr	r1, [sp, #4]
 801b112:	2200      	movs	r2, #0
 801b114:	4640      	mov	r0, r8
 801b116:	f7ff f8ef 	bl	801a2f8 <_strtod_r>
 801b11a:	9b03      	ldr	r3, [sp, #12]
 801b11c:	6821      	ldr	r1, [r4, #0]
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	f011 0f02 	tst.w	r1, #2
 801b124:	ec57 6b10 	vmov	r6, r7, d0
 801b128:	f103 0204 	add.w	r2, r3, #4
 801b12c:	d01f      	beq.n	801b16e <_scanf_float+0x3e6>
 801b12e:	9903      	ldr	r1, [sp, #12]
 801b130:	600a      	str	r2, [r1, #0]
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	e9c3 6700 	strd	r6, r7, [r3]
 801b138:	68e3      	ldr	r3, [r4, #12]
 801b13a:	3301      	adds	r3, #1
 801b13c:	60e3      	str	r3, [r4, #12]
 801b13e:	e7d9      	b.n	801b0f4 <_scanf_float+0x36c>
 801b140:	9b04      	ldr	r3, [sp, #16]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d0e4      	beq.n	801b110 <_scanf_float+0x388>
 801b146:	9905      	ldr	r1, [sp, #20]
 801b148:	230a      	movs	r3, #10
 801b14a:	3101      	adds	r1, #1
 801b14c:	4640      	mov	r0, r8
 801b14e:	f7ff f9b7 	bl	801a4c0 <_strtol_r>
 801b152:	9b04      	ldr	r3, [sp, #16]
 801b154:	9e05      	ldr	r6, [sp, #20]
 801b156:	1ac2      	subs	r2, r0, r3
 801b158:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b15c:	429e      	cmp	r6, r3
 801b15e:	bf28      	it	cs
 801b160:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b164:	4910      	ldr	r1, [pc, #64]	@ (801b1a8 <_scanf_float+0x420>)
 801b166:	4630      	mov	r0, r6
 801b168:	f000 f918 	bl	801b39c <siprintf>
 801b16c:	e7d0      	b.n	801b110 <_scanf_float+0x388>
 801b16e:	f011 0f04 	tst.w	r1, #4
 801b172:	9903      	ldr	r1, [sp, #12]
 801b174:	600a      	str	r2, [r1, #0]
 801b176:	d1dc      	bne.n	801b132 <_scanf_float+0x3aa>
 801b178:	681d      	ldr	r5, [r3, #0]
 801b17a:	4632      	mov	r2, r6
 801b17c:	463b      	mov	r3, r7
 801b17e:	4630      	mov	r0, r6
 801b180:	4639      	mov	r1, r7
 801b182:	f7e5 fcab 	bl	8000adc <__aeabi_dcmpun>
 801b186:	b128      	cbz	r0, 801b194 <_scanf_float+0x40c>
 801b188:	4808      	ldr	r0, [pc, #32]	@ (801b1ac <_scanf_float+0x424>)
 801b18a:	f000 fa9d 	bl	801b6c8 <nanf>
 801b18e:	ed85 0a00 	vstr	s0, [r5]
 801b192:	e7d1      	b.n	801b138 <_scanf_float+0x3b0>
 801b194:	4630      	mov	r0, r6
 801b196:	4639      	mov	r1, r7
 801b198:	f7e5 fcfe 	bl	8000b98 <__aeabi_d2f>
 801b19c:	6028      	str	r0, [r5, #0]
 801b19e:	e7cb      	b.n	801b138 <_scanf_float+0x3b0>
 801b1a0:	f04f 0900 	mov.w	r9, #0
 801b1a4:	e629      	b.n	801adfa <_scanf_float+0x72>
 801b1a6:	bf00      	nop
 801b1a8:	08021c9d 	.word	0x08021c9d
 801b1ac:	08021d56 	.word	0x08021d56

0801b1b0 <std>:
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	b510      	push	{r4, lr}
 801b1b4:	4604      	mov	r4, r0
 801b1b6:	e9c0 3300 	strd	r3, r3, [r0]
 801b1ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b1be:	6083      	str	r3, [r0, #8]
 801b1c0:	8181      	strh	r1, [r0, #12]
 801b1c2:	6643      	str	r3, [r0, #100]	@ 0x64
 801b1c4:	81c2      	strh	r2, [r0, #14]
 801b1c6:	6183      	str	r3, [r0, #24]
 801b1c8:	4619      	mov	r1, r3
 801b1ca:	2208      	movs	r2, #8
 801b1cc:	305c      	adds	r0, #92	@ 0x5c
 801b1ce:	f000 f948 	bl	801b462 <memset>
 801b1d2:	4b0d      	ldr	r3, [pc, #52]	@ (801b208 <std+0x58>)
 801b1d4:	6263      	str	r3, [r4, #36]	@ 0x24
 801b1d6:	4b0d      	ldr	r3, [pc, #52]	@ (801b20c <std+0x5c>)
 801b1d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b1da:	4b0d      	ldr	r3, [pc, #52]	@ (801b210 <std+0x60>)
 801b1dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b1de:	4b0d      	ldr	r3, [pc, #52]	@ (801b214 <std+0x64>)
 801b1e0:	6323      	str	r3, [r4, #48]	@ 0x30
 801b1e2:	4b0d      	ldr	r3, [pc, #52]	@ (801b218 <std+0x68>)
 801b1e4:	6224      	str	r4, [r4, #32]
 801b1e6:	429c      	cmp	r4, r3
 801b1e8:	d006      	beq.n	801b1f8 <std+0x48>
 801b1ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b1ee:	4294      	cmp	r4, r2
 801b1f0:	d002      	beq.n	801b1f8 <std+0x48>
 801b1f2:	33d0      	adds	r3, #208	@ 0xd0
 801b1f4:	429c      	cmp	r4, r3
 801b1f6:	d105      	bne.n	801b204 <std+0x54>
 801b1f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b200:	f000 ba40 	b.w	801b684 <__retarget_lock_init_recursive>
 801b204:	bd10      	pop	{r4, pc}
 801b206:	bf00      	nop
 801b208:	0801b3dd 	.word	0x0801b3dd
 801b20c:	0801b3ff 	.word	0x0801b3ff
 801b210:	0801b437 	.word	0x0801b437
 801b214:	0801b45b 	.word	0x0801b45b
 801b218:	20003270 	.word	0x20003270

0801b21c <stdio_exit_handler>:
 801b21c:	4a02      	ldr	r2, [pc, #8]	@ (801b228 <stdio_exit_handler+0xc>)
 801b21e:	4903      	ldr	r1, [pc, #12]	@ (801b22c <stdio_exit_handler+0x10>)
 801b220:	4803      	ldr	r0, [pc, #12]	@ (801b230 <stdio_exit_handler+0x14>)
 801b222:	f000 b869 	b.w	801b2f8 <_fwalk_sglue>
 801b226:	bf00      	nop
 801b228:	20000148 	.word	0x20000148
 801b22c:	0801da8d 	.word	0x0801da8d
 801b230:	200002c4 	.word	0x200002c4

0801b234 <cleanup_stdio>:
 801b234:	6841      	ldr	r1, [r0, #4]
 801b236:	4b0c      	ldr	r3, [pc, #48]	@ (801b268 <cleanup_stdio+0x34>)
 801b238:	4299      	cmp	r1, r3
 801b23a:	b510      	push	{r4, lr}
 801b23c:	4604      	mov	r4, r0
 801b23e:	d001      	beq.n	801b244 <cleanup_stdio+0x10>
 801b240:	f002 fc24 	bl	801da8c <_fflush_r>
 801b244:	68a1      	ldr	r1, [r4, #8]
 801b246:	4b09      	ldr	r3, [pc, #36]	@ (801b26c <cleanup_stdio+0x38>)
 801b248:	4299      	cmp	r1, r3
 801b24a:	d002      	beq.n	801b252 <cleanup_stdio+0x1e>
 801b24c:	4620      	mov	r0, r4
 801b24e:	f002 fc1d 	bl	801da8c <_fflush_r>
 801b252:	68e1      	ldr	r1, [r4, #12]
 801b254:	4b06      	ldr	r3, [pc, #24]	@ (801b270 <cleanup_stdio+0x3c>)
 801b256:	4299      	cmp	r1, r3
 801b258:	d004      	beq.n	801b264 <cleanup_stdio+0x30>
 801b25a:	4620      	mov	r0, r4
 801b25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b260:	f002 bc14 	b.w	801da8c <_fflush_r>
 801b264:	bd10      	pop	{r4, pc}
 801b266:	bf00      	nop
 801b268:	20003270 	.word	0x20003270
 801b26c:	200032d8 	.word	0x200032d8
 801b270:	20003340 	.word	0x20003340

0801b274 <global_stdio_init.part.0>:
 801b274:	b510      	push	{r4, lr}
 801b276:	4b0b      	ldr	r3, [pc, #44]	@ (801b2a4 <global_stdio_init.part.0+0x30>)
 801b278:	4c0b      	ldr	r4, [pc, #44]	@ (801b2a8 <global_stdio_init.part.0+0x34>)
 801b27a:	4a0c      	ldr	r2, [pc, #48]	@ (801b2ac <global_stdio_init.part.0+0x38>)
 801b27c:	601a      	str	r2, [r3, #0]
 801b27e:	4620      	mov	r0, r4
 801b280:	2200      	movs	r2, #0
 801b282:	2104      	movs	r1, #4
 801b284:	f7ff ff94 	bl	801b1b0 <std>
 801b288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b28c:	2201      	movs	r2, #1
 801b28e:	2109      	movs	r1, #9
 801b290:	f7ff ff8e 	bl	801b1b0 <std>
 801b294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b298:	2202      	movs	r2, #2
 801b29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b29e:	2112      	movs	r1, #18
 801b2a0:	f7ff bf86 	b.w	801b1b0 <std>
 801b2a4:	200033a8 	.word	0x200033a8
 801b2a8:	20003270 	.word	0x20003270
 801b2ac:	0801b21d 	.word	0x0801b21d

0801b2b0 <__sfp_lock_acquire>:
 801b2b0:	4801      	ldr	r0, [pc, #4]	@ (801b2b8 <__sfp_lock_acquire+0x8>)
 801b2b2:	f000 b9e8 	b.w	801b686 <__retarget_lock_acquire_recursive>
 801b2b6:	bf00      	nop
 801b2b8:	200033b1 	.word	0x200033b1

0801b2bc <__sfp_lock_release>:
 801b2bc:	4801      	ldr	r0, [pc, #4]	@ (801b2c4 <__sfp_lock_release+0x8>)
 801b2be:	f000 b9e3 	b.w	801b688 <__retarget_lock_release_recursive>
 801b2c2:	bf00      	nop
 801b2c4:	200033b1 	.word	0x200033b1

0801b2c8 <__sinit>:
 801b2c8:	b510      	push	{r4, lr}
 801b2ca:	4604      	mov	r4, r0
 801b2cc:	f7ff fff0 	bl	801b2b0 <__sfp_lock_acquire>
 801b2d0:	6a23      	ldr	r3, [r4, #32]
 801b2d2:	b11b      	cbz	r3, 801b2dc <__sinit+0x14>
 801b2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2d8:	f7ff bff0 	b.w	801b2bc <__sfp_lock_release>
 801b2dc:	4b04      	ldr	r3, [pc, #16]	@ (801b2f0 <__sinit+0x28>)
 801b2de:	6223      	str	r3, [r4, #32]
 801b2e0:	4b04      	ldr	r3, [pc, #16]	@ (801b2f4 <__sinit+0x2c>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d1f5      	bne.n	801b2d4 <__sinit+0xc>
 801b2e8:	f7ff ffc4 	bl	801b274 <global_stdio_init.part.0>
 801b2ec:	e7f2      	b.n	801b2d4 <__sinit+0xc>
 801b2ee:	bf00      	nop
 801b2f0:	0801b235 	.word	0x0801b235
 801b2f4:	200033a8 	.word	0x200033a8

0801b2f8 <_fwalk_sglue>:
 801b2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2fc:	4607      	mov	r7, r0
 801b2fe:	4688      	mov	r8, r1
 801b300:	4614      	mov	r4, r2
 801b302:	2600      	movs	r6, #0
 801b304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b308:	f1b9 0901 	subs.w	r9, r9, #1
 801b30c:	d505      	bpl.n	801b31a <_fwalk_sglue+0x22>
 801b30e:	6824      	ldr	r4, [r4, #0]
 801b310:	2c00      	cmp	r4, #0
 801b312:	d1f7      	bne.n	801b304 <_fwalk_sglue+0xc>
 801b314:	4630      	mov	r0, r6
 801b316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b31a:	89ab      	ldrh	r3, [r5, #12]
 801b31c:	2b01      	cmp	r3, #1
 801b31e:	d907      	bls.n	801b330 <_fwalk_sglue+0x38>
 801b320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b324:	3301      	adds	r3, #1
 801b326:	d003      	beq.n	801b330 <_fwalk_sglue+0x38>
 801b328:	4629      	mov	r1, r5
 801b32a:	4638      	mov	r0, r7
 801b32c:	47c0      	blx	r8
 801b32e:	4306      	orrs	r6, r0
 801b330:	3568      	adds	r5, #104	@ 0x68
 801b332:	e7e9      	b.n	801b308 <_fwalk_sglue+0x10>

0801b334 <sniprintf>:
 801b334:	b40c      	push	{r2, r3}
 801b336:	b530      	push	{r4, r5, lr}
 801b338:	4b17      	ldr	r3, [pc, #92]	@ (801b398 <sniprintf+0x64>)
 801b33a:	1e0c      	subs	r4, r1, #0
 801b33c:	681d      	ldr	r5, [r3, #0]
 801b33e:	b09d      	sub	sp, #116	@ 0x74
 801b340:	da08      	bge.n	801b354 <sniprintf+0x20>
 801b342:	238b      	movs	r3, #139	@ 0x8b
 801b344:	602b      	str	r3, [r5, #0]
 801b346:	f04f 30ff 	mov.w	r0, #4294967295
 801b34a:	b01d      	add	sp, #116	@ 0x74
 801b34c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b350:	b002      	add	sp, #8
 801b352:	4770      	bx	lr
 801b354:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b358:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b35c:	bf14      	ite	ne
 801b35e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b362:	4623      	moveq	r3, r4
 801b364:	9304      	str	r3, [sp, #16]
 801b366:	9307      	str	r3, [sp, #28]
 801b368:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b36c:	9002      	str	r0, [sp, #8]
 801b36e:	9006      	str	r0, [sp, #24]
 801b370:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b374:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b376:	ab21      	add	r3, sp, #132	@ 0x84
 801b378:	a902      	add	r1, sp, #8
 801b37a:	4628      	mov	r0, r5
 801b37c:	9301      	str	r3, [sp, #4]
 801b37e:	f002 f8c3 	bl	801d508 <_svfiprintf_r>
 801b382:	1c43      	adds	r3, r0, #1
 801b384:	bfbc      	itt	lt
 801b386:	238b      	movlt	r3, #139	@ 0x8b
 801b388:	602b      	strlt	r3, [r5, #0]
 801b38a:	2c00      	cmp	r4, #0
 801b38c:	d0dd      	beq.n	801b34a <sniprintf+0x16>
 801b38e:	9b02      	ldr	r3, [sp, #8]
 801b390:	2200      	movs	r2, #0
 801b392:	701a      	strb	r2, [r3, #0]
 801b394:	e7d9      	b.n	801b34a <sniprintf+0x16>
 801b396:	bf00      	nop
 801b398:	200002c0 	.word	0x200002c0

0801b39c <siprintf>:
 801b39c:	b40e      	push	{r1, r2, r3}
 801b39e:	b500      	push	{lr}
 801b3a0:	b09c      	sub	sp, #112	@ 0x70
 801b3a2:	ab1d      	add	r3, sp, #116	@ 0x74
 801b3a4:	9002      	str	r0, [sp, #8]
 801b3a6:	9006      	str	r0, [sp, #24]
 801b3a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b3ac:	4809      	ldr	r0, [pc, #36]	@ (801b3d4 <siprintf+0x38>)
 801b3ae:	9107      	str	r1, [sp, #28]
 801b3b0:	9104      	str	r1, [sp, #16]
 801b3b2:	4909      	ldr	r1, [pc, #36]	@ (801b3d8 <siprintf+0x3c>)
 801b3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3b8:	9105      	str	r1, [sp, #20]
 801b3ba:	6800      	ldr	r0, [r0, #0]
 801b3bc:	9301      	str	r3, [sp, #4]
 801b3be:	a902      	add	r1, sp, #8
 801b3c0:	f002 f8a2 	bl	801d508 <_svfiprintf_r>
 801b3c4:	9b02      	ldr	r3, [sp, #8]
 801b3c6:	2200      	movs	r2, #0
 801b3c8:	701a      	strb	r2, [r3, #0]
 801b3ca:	b01c      	add	sp, #112	@ 0x70
 801b3cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3d0:	b003      	add	sp, #12
 801b3d2:	4770      	bx	lr
 801b3d4:	200002c0 	.word	0x200002c0
 801b3d8:	ffff0208 	.word	0xffff0208

0801b3dc <__sread>:
 801b3dc:	b510      	push	{r4, lr}
 801b3de:	460c      	mov	r4, r1
 801b3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3e4:	f000 f8f0 	bl	801b5c8 <_read_r>
 801b3e8:	2800      	cmp	r0, #0
 801b3ea:	bfab      	itete	ge
 801b3ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b3ee:	89a3      	ldrhlt	r3, [r4, #12]
 801b3f0:	181b      	addge	r3, r3, r0
 801b3f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b3f6:	bfac      	ite	ge
 801b3f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b3fa:	81a3      	strhlt	r3, [r4, #12]
 801b3fc:	bd10      	pop	{r4, pc}

0801b3fe <__swrite>:
 801b3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b402:	461f      	mov	r7, r3
 801b404:	898b      	ldrh	r3, [r1, #12]
 801b406:	05db      	lsls	r3, r3, #23
 801b408:	4605      	mov	r5, r0
 801b40a:	460c      	mov	r4, r1
 801b40c:	4616      	mov	r6, r2
 801b40e:	d505      	bpl.n	801b41c <__swrite+0x1e>
 801b410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b414:	2302      	movs	r3, #2
 801b416:	2200      	movs	r2, #0
 801b418:	f000 f8c4 	bl	801b5a4 <_lseek_r>
 801b41c:	89a3      	ldrh	r3, [r4, #12]
 801b41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b422:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b426:	81a3      	strh	r3, [r4, #12]
 801b428:	4632      	mov	r2, r6
 801b42a:	463b      	mov	r3, r7
 801b42c:	4628      	mov	r0, r5
 801b42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b432:	f000 b8eb 	b.w	801b60c <_write_r>

0801b436 <__sseek>:
 801b436:	b510      	push	{r4, lr}
 801b438:	460c      	mov	r4, r1
 801b43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b43e:	f000 f8b1 	bl	801b5a4 <_lseek_r>
 801b442:	1c43      	adds	r3, r0, #1
 801b444:	89a3      	ldrh	r3, [r4, #12]
 801b446:	bf15      	itete	ne
 801b448:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b44a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b44e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b452:	81a3      	strheq	r3, [r4, #12]
 801b454:	bf18      	it	ne
 801b456:	81a3      	strhne	r3, [r4, #12]
 801b458:	bd10      	pop	{r4, pc}

0801b45a <__sclose>:
 801b45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b45e:	f000 b891 	b.w	801b584 <_close_r>

0801b462 <memset>:
 801b462:	4402      	add	r2, r0
 801b464:	4603      	mov	r3, r0
 801b466:	4293      	cmp	r3, r2
 801b468:	d100      	bne.n	801b46c <memset+0xa>
 801b46a:	4770      	bx	lr
 801b46c:	f803 1b01 	strb.w	r1, [r3], #1
 801b470:	e7f9      	b.n	801b466 <memset+0x4>

0801b472 <strncmp>:
 801b472:	b510      	push	{r4, lr}
 801b474:	b16a      	cbz	r2, 801b492 <strncmp+0x20>
 801b476:	3901      	subs	r1, #1
 801b478:	1884      	adds	r4, r0, r2
 801b47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b47e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b482:	429a      	cmp	r2, r3
 801b484:	d103      	bne.n	801b48e <strncmp+0x1c>
 801b486:	42a0      	cmp	r0, r4
 801b488:	d001      	beq.n	801b48e <strncmp+0x1c>
 801b48a:	2a00      	cmp	r2, #0
 801b48c:	d1f5      	bne.n	801b47a <strncmp+0x8>
 801b48e:	1ad0      	subs	r0, r2, r3
 801b490:	bd10      	pop	{r4, pc}
 801b492:	4610      	mov	r0, r2
 801b494:	e7fc      	b.n	801b490 <strncmp+0x1e>
	...

0801b498 <strtok>:
 801b498:	4b16      	ldr	r3, [pc, #88]	@ (801b4f4 <strtok+0x5c>)
 801b49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b49e:	681f      	ldr	r7, [r3, #0]
 801b4a0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b4a2:	4605      	mov	r5, r0
 801b4a4:	460e      	mov	r6, r1
 801b4a6:	b9ec      	cbnz	r4, 801b4e4 <strtok+0x4c>
 801b4a8:	2050      	movs	r0, #80	@ 0x50
 801b4aa:	f7fe f863 	bl	8019574 <malloc>
 801b4ae:	4602      	mov	r2, r0
 801b4b0:	6478      	str	r0, [r7, #68]	@ 0x44
 801b4b2:	b920      	cbnz	r0, 801b4be <strtok+0x26>
 801b4b4:	4b10      	ldr	r3, [pc, #64]	@ (801b4f8 <strtok+0x60>)
 801b4b6:	4811      	ldr	r0, [pc, #68]	@ (801b4fc <strtok+0x64>)
 801b4b8:	215b      	movs	r1, #91	@ 0x5b
 801b4ba:	f000 f90b 	bl	801b6d4 <__assert_func>
 801b4be:	e9c0 4400 	strd	r4, r4, [r0]
 801b4c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b4c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b4ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b4ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b4d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b4d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b4da:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b4de:	6184      	str	r4, [r0, #24]
 801b4e0:	7704      	strb	r4, [r0, #28]
 801b4e2:	6244      	str	r4, [r0, #36]	@ 0x24
 801b4e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b4e6:	4631      	mov	r1, r6
 801b4e8:	4628      	mov	r0, r5
 801b4ea:	2301      	movs	r3, #1
 801b4ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b4f0:	f000 b806 	b.w	801b500 <__strtok_r>
 801b4f4:	200002c0 	.word	0x200002c0
 801b4f8:	08021ca2 	.word	0x08021ca2
 801b4fc:	08021cb9 	.word	0x08021cb9

0801b500 <__strtok_r>:
 801b500:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b502:	4604      	mov	r4, r0
 801b504:	b908      	cbnz	r0, 801b50a <__strtok_r+0xa>
 801b506:	6814      	ldr	r4, [r2, #0]
 801b508:	b144      	cbz	r4, 801b51c <__strtok_r+0x1c>
 801b50a:	4620      	mov	r0, r4
 801b50c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b510:	460f      	mov	r7, r1
 801b512:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b516:	b91e      	cbnz	r6, 801b520 <__strtok_r+0x20>
 801b518:	b965      	cbnz	r5, 801b534 <__strtok_r+0x34>
 801b51a:	6015      	str	r5, [r2, #0]
 801b51c:	2000      	movs	r0, #0
 801b51e:	e005      	b.n	801b52c <__strtok_r+0x2c>
 801b520:	42b5      	cmp	r5, r6
 801b522:	d1f6      	bne.n	801b512 <__strtok_r+0x12>
 801b524:	2b00      	cmp	r3, #0
 801b526:	d1f0      	bne.n	801b50a <__strtok_r+0xa>
 801b528:	6014      	str	r4, [r2, #0]
 801b52a:	7003      	strb	r3, [r0, #0]
 801b52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b52e:	461c      	mov	r4, r3
 801b530:	e00c      	b.n	801b54c <__strtok_r+0x4c>
 801b532:	b915      	cbnz	r5, 801b53a <__strtok_r+0x3a>
 801b534:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b538:	460e      	mov	r6, r1
 801b53a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b53e:	42ab      	cmp	r3, r5
 801b540:	d1f7      	bne.n	801b532 <__strtok_r+0x32>
 801b542:	2b00      	cmp	r3, #0
 801b544:	d0f3      	beq.n	801b52e <__strtok_r+0x2e>
 801b546:	2300      	movs	r3, #0
 801b548:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b54c:	6014      	str	r4, [r2, #0]
 801b54e:	e7ed      	b.n	801b52c <__strtok_r+0x2c>

0801b550 <strstr>:
 801b550:	780a      	ldrb	r2, [r1, #0]
 801b552:	b570      	push	{r4, r5, r6, lr}
 801b554:	b96a      	cbnz	r2, 801b572 <strstr+0x22>
 801b556:	bd70      	pop	{r4, r5, r6, pc}
 801b558:	429a      	cmp	r2, r3
 801b55a:	d109      	bne.n	801b570 <strstr+0x20>
 801b55c:	460c      	mov	r4, r1
 801b55e:	4605      	mov	r5, r0
 801b560:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b564:	2b00      	cmp	r3, #0
 801b566:	d0f6      	beq.n	801b556 <strstr+0x6>
 801b568:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b56c:	429e      	cmp	r6, r3
 801b56e:	d0f7      	beq.n	801b560 <strstr+0x10>
 801b570:	3001      	adds	r0, #1
 801b572:	7803      	ldrb	r3, [r0, #0]
 801b574:	2b00      	cmp	r3, #0
 801b576:	d1ef      	bne.n	801b558 <strstr+0x8>
 801b578:	4618      	mov	r0, r3
 801b57a:	e7ec      	b.n	801b556 <strstr+0x6>

0801b57c <_localeconv_r>:
 801b57c:	4800      	ldr	r0, [pc, #0]	@ (801b580 <_localeconv_r+0x4>)
 801b57e:	4770      	bx	lr
 801b580:	20000244 	.word	0x20000244

0801b584 <_close_r>:
 801b584:	b538      	push	{r3, r4, r5, lr}
 801b586:	4d06      	ldr	r5, [pc, #24]	@ (801b5a0 <_close_r+0x1c>)
 801b588:	2300      	movs	r3, #0
 801b58a:	4604      	mov	r4, r0
 801b58c:	4608      	mov	r0, r1
 801b58e:	602b      	str	r3, [r5, #0]
 801b590:	f7ea fefc 	bl	800638c <_close>
 801b594:	1c43      	adds	r3, r0, #1
 801b596:	d102      	bne.n	801b59e <_close_r+0x1a>
 801b598:	682b      	ldr	r3, [r5, #0]
 801b59a:	b103      	cbz	r3, 801b59e <_close_r+0x1a>
 801b59c:	6023      	str	r3, [r4, #0]
 801b59e:	bd38      	pop	{r3, r4, r5, pc}
 801b5a0:	200033ac 	.word	0x200033ac

0801b5a4 <_lseek_r>:
 801b5a4:	b538      	push	{r3, r4, r5, lr}
 801b5a6:	4d07      	ldr	r5, [pc, #28]	@ (801b5c4 <_lseek_r+0x20>)
 801b5a8:	4604      	mov	r4, r0
 801b5aa:	4608      	mov	r0, r1
 801b5ac:	4611      	mov	r1, r2
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	602a      	str	r2, [r5, #0]
 801b5b2:	461a      	mov	r2, r3
 801b5b4:	f7ea ff11 	bl	80063da <_lseek>
 801b5b8:	1c43      	adds	r3, r0, #1
 801b5ba:	d102      	bne.n	801b5c2 <_lseek_r+0x1e>
 801b5bc:	682b      	ldr	r3, [r5, #0]
 801b5be:	b103      	cbz	r3, 801b5c2 <_lseek_r+0x1e>
 801b5c0:	6023      	str	r3, [r4, #0]
 801b5c2:	bd38      	pop	{r3, r4, r5, pc}
 801b5c4:	200033ac 	.word	0x200033ac

0801b5c8 <_read_r>:
 801b5c8:	b538      	push	{r3, r4, r5, lr}
 801b5ca:	4d07      	ldr	r5, [pc, #28]	@ (801b5e8 <_read_r+0x20>)
 801b5cc:	4604      	mov	r4, r0
 801b5ce:	4608      	mov	r0, r1
 801b5d0:	4611      	mov	r1, r2
 801b5d2:	2200      	movs	r2, #0
 801b5d4:	602a      	str	r2, [r5, #0]
 801b5d6:	461a      	mov	r2, r3
 801b5d8:	f7ea fe9f 	bl	800631a <_read>
 801b5dc:	1c43      	adds	r3, r0, #1
 801b5de:	d102      	bne.n	801b5e6 <_read_r+0x1e>
 801b5e0:	682b      	ldr	r3, [r5, #0]
 801b5e2:	b103      	cbz	r3, 801b5e6 <_read_r+0x1e>
 801b5e4:	6023      	str	r3, [r4, #0]
 801b5e6:	bd38      	pop	{r3, r4, r5, pc}
 801b5e8:	200033ac 	.word	0x200033ac

0801b5ec <_sbrk_r>:
 801b5ec:	b538      	push	{r3, r4, r5, lr}
 801b5ee:	4d06      	ldr	r5, [pc, #24]	@ (801b608 <_sbrk_r+0x1c>)
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	4604      	mov	r4, r0
 801b5f4:	4608      	mov	r0, r1
 801b5f6:	602b      	str	r3, [r5, #0]
 801b5f8:	f7ea fefc 	bl	80063f4 <_sbrk>
 801b5fc:	1c43      	adds	r3, r0, #1
 801b5fe:	d102      	bne.n	801b606 <_sbrk_r+0x1a>
 801b600:	682b      	ldr	r3, [r5, #0]
 801b602:	b103      	cbz	r3, 801b606 <_sbrk_r+0x1a>
 801b604:	6023      	str	r3, [r4, #0]
 801b606:	bd38      	pop	{r3, r4, r5, pc}
 801b608:	200033ac 	.word	0x200033ac

0801b60c <_write_r>:
 801b60c:	b538      	push	{r3, r4, r5, lr}
 801b60e:	4d07      	ldr	r5, [pc, #28]	@ (801b62c <_write_r+0x20>)
 801b610:	4604      	mov	r4, r0
 801b612:	4608      	mov	r0, r1
 801b614:	4611      	mov	r1, r2
 801b616:	2200      	movs	r2, #0
 801b618:	602a      	str	r2, [r5, #0]
 801b61a:	461a      	mov	r2, r3
 801b61c:	f7ea fe9a 	bl	8006354 <_write>
 801b620:	1c43      	adds	r3, r0, #1
 801b622:	d102      	bne.n	801b62a <_write_r+0x1e>
 801b624:	682b      	ldr	r3, [r5, #0]
 801b626:	b103      	cbz	r3, 801b62a <_write_r+0x1e>
 801b628:	6023      	str	r3, [r4, #0]
 801b62a:	bd38      	pop	{r3, r4, r5, pc}
 801b62c:	200033ac 	.word	0x200033ac

0801b630 <__errno>:
 801b630:	4b01      	ldr	r3, [pc, #4]	@ (801b638 <__errno+0x8>)
 801b632:	6818      	ldr	r0, [r3, #0]
 801b634:	4770      	bx	lr
 801b636:	bf00      	nop
 801b638:	200002c0 	.word	0x200002c0

0801b63c <__libc_init_array>:
 801b63c:	b570      	push	{r4, r5, r6, lr}
 801b63e:	4d0d      	ldr	r5, [pc, #52]	@ (801b674 <__libc_init_array+0x38>)
 801b640:	4c0d      	ldr	r4, [pc, #52]	@ (801b678 <__libc_init_array+0x3c>)
 801b642:	1b64      	subs	r4, r4, r5
 801b644:	10a4      	asrs	r4, r4, #2
 801b646:	2600      	movs	r6, #0
 801b648:	42a6      	cmp	r6, r4
 801b64a:	d109      	bne.n	801b660 <__libc_init_array+0x24>
 801b64c:	4d0b      	ldr	r5, [pc, #44]	@ (801b67c <__libc_init_array+0x40>)
 801b64e:	4c0c      	ldr	r4, [pc, #48]	@ (801b680 <__libc_init_array+0x44>)
 801b650:	f004 f99a 	bl	801f988 <_init>
 801b654:	1b64      	subs	r4, r4, r5
 801b656:	10a4      	asrs	r4, r4, #2
 801b658:	2600      	movs	r6, #0
 801b65a:	42a6      	cmp	r6, r4
 801b65c:	d105      	bne.n	801b66a <__libc_init_array+0x2e>
 801b65e:	bd70      	pop	{r4, r5, r6, pc}
 801b660:	f855 3b04 	ldr.w	r3, [r5], #4
 801b664:	4798      	blx	r3
 801b666:	3601      	adds	r6, #1
 801b668:	e7ee      	b.n	801b648 <__libc_init_array+0xc>
 801b66a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b66e:	4798      	blx	r3
 801b670:	3601      	adds	r6, #1
 801b672:	e7f2      	b.n	801b65a <__libc_init_array+0x1e>
 801b674:	08022198 	.word	0x08022198
 801b678:	08022198 	.word	0x08022198
 801b67c:	08022198 	.word	0x08022198
 801b680:	0802219c 	.word	0x0802219c

0801b684 <__retarget_lock_init_recursive>:
 801b684:	4770      	bx	lr

0801b686 <__retarget_lock_acquire_recursive>:
 801b686:	4770      	bx	lr

0801b688 <__retarget_lock_release_recursive>:
 801b688:	4770      	bx	lr

0801b68a <strcpy>:
 801b68a:	4603      	mov	r3, r0
 801b68c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b690:	f803 2b01 	strb.w	r2, [r3], #1
 801b694:	2a00      	cmp	r2, #0
 801b696:	d1f9      	bne.n	801b68c <strcpy+0x2>
 801b698:	4770      	bx	lr

0801b69a <memcpy>:
 801b69a:	440a      	add	r2, r1
 801b69c:	4291      	cmp	r1, r2
 801b69e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b6a2:	d100      	bne.n	801b6a6 <memcpy+0xc>
 801b6a4:	4770      	bx	lr
 801b6a6:	b510      	push	{r4, lr}
 801b6a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b6b0:	4291      	cmp	r1, r2
 801b6b2:	d1f9      	bne.n	801b6a8 <memcpy+0xe>
 801b6b4:	bd10      	pop	{r4, pc}
	...

0801b6b8 <nan>:
 801b6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b6c0 <nan+0x8>
 801b6bc:	4770      	bx	lr
 801b6be:	bf00      	nop
 801b6c0:	00000000 	.word	0x00000000
 801b6c4:	7ff80000 	.word	0x7ff80000

0801b6c8 <nanf>:
 801b6c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b6d0 <nanf+0x8>
 801b6cc:	4770      	bx	lr
 801b6ce:	bf00      	nop
 801b6d0:	7fc00000 	.word	0x7fc00000

0801b6d4 <__assert_func>:
 801b6d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b6d6:	4614      	mov	r4, r2
 801b6d8:	461a      	mov	r2, r3
 801b6da:	4b09      	ldr	r3, [pc, #36]	@ (801b700 <__assert_func+0x2c>)
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	4605      	mov	r5, r0
 801b6e0:	68d8      	ldr	r0, [r3, #12]
 801b6e2:	b954      	cbnz	r4, 801b6fa <__assert_func+0x26>
 801b6e4:	4b07      	ldr	r3, [pc, #28]	@ (801b704 <__assert_func+0x30>)
 801b6e6:	461c      	mov	r4, r3
 801b6e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b6ec:	9100      	str	r1, [sp, #0]
 801b6ee:	462b      	mov	r3, r5
 801b6f0:	4905      	ldr	r1, [pc, #20]	@ (801b708 <__assert_func+0x34>)
 801b6f2:	f002 f9f3 	bl	801dadc <fiprintf>
 801b6f6:	f002 fab1 	bl	801dc5c <abort>
 801b6fa:	4b04      	ldr	r3, [pc, #16]	@ (801b70c <__assert_func+0x38>)
 801b6fc:	e7f4      	b.n	801b6e8 <__assert_func+0x14>
 801b6fe:	bf00      	nop
 801b700:	200002c0 	.word	0x200002c0
 801b704:	08021d56 	.word	0x08021d56
 801b708:	08021d28 	.word	0x08021d28
 801b70c:	08021d1b 	.word	0x08021d1b

0801b710 <quorem>:
 801b710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b714:	6903      	ldr	r3, [r0, #16]
 801b716:	690c      	ldr	r4, [r1, #16]
 801b718:	42a3      	cmp	r3, r4
 801b71a:	4607      	mov	r7, r0
 801b71c:	db7e      	blt.n	801b81c <quorem+0x10c>
 801b71e:	3c01      	subs	r4, #1
 801b720:	f101 0814 	add.w	r8, r1, #20
 801b724:	00a3      	lsls	r3, r4, #2
 801b726:	f100 0514 	add.w	r5, r0, #20
 801b72a:	9300      	str	r3, [sp, #0]
 801b72c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b730:	9301      	str	r3, [sp, #4]
 801b732:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b73a:	3301      	adds	r3, #1
 801b73c:	429a      	cmp	r2, r3
 801b73e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b742:	fbb2 f6f3 	udiv	r6, r2, r3
 801b746:	d32e      	bcc.n	801b7a6 <quorem+0x96>
 801b748:	f04f 0a00 	mov.w	sl, #0
 801b74c:	46c4      	mov	ip, r8
 801b74e:	46ae      	mov	lr, r5
 801b750:	46d3      	mov	fp, sl
 801b752:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b756:	b298      	uxth	r0, r3
 801b758:	fb06 a000 	mla	r0, r6, r0, sl
 801b75c:	0c02      	lsrs	r2, r0, #16
 801b75e:	0c1b      	lsrs	r3, r3, #16
 801b760:	fb06 2303 	mla	r3, r6, r3, r2
 801b764:	f8de 2000 	ldr.w	r2, [lr]
 801b768:	b280      	uxth	r0, r0
 801b76a:	b292      	uxth	r2, r2
 801b76c:	1a12      	subs	r2, r2, r0
 801b76e:	445a      	add	r2, fp
 801b770:	f8de 0000 	ldr.w	r0, [lr]
 801b774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b778:	b29b      	uxth	r3, r3
 801b77a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b77e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b782:	b292      	uxth	r2, r2
 801b784:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b788:	45e1      	cmp	r9, ip
 801b78a:	f84e 2b04 	str.w	r2, [lr], #4
 801b78e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b792:	d2de      	bcs.n	801b752 <quorem+0x42>
 801b794:	9b00      	ldr	r3, [sp, #0]
 801b796:	58eb      	ldr	r3, [r5, r3]
 801b798:	b92b      	cbnz	r3, 801b7a6 <quorem+0x96>
 801b79a:	9b01      	ldr	r3, [sp, #4]
 801b79c:	3b04      	subs	r3, #4
 801b79e:	429d      	cmp	r5, r3
 801b7a0:	461a      	mov	r2, r3
 801b7a2:	d32f      	bcc.n	801b804 <quorem+0xf4>
 801b7a4:	613c      	str	r4, [r7, #16]
 801b7a6:	4638      	mov	r0, r7
 801b7a8:	f001 fc58 	bl	801d05c <__mcmp>
 801b7ac:	2800      	cmp	r0, #0
 801b7ae:	db25      	blt.n	801b7fc <quorem+0xec>
 801b7b0:	4629      	mov	r1, r5
 801b7b2:	2000      	movs	r0, #0
 801b7b4:	f858 2b04 	ldr.w	r2, [r8], #4
 801b7b8:	f8d1 c000 	ldr.w	ip, [r1]
 801b7bc:	fa1f fe82 	uxth.w	lr, r2
 801b7c0:	fa1f f38c 	uxth.w	r3, ip
 801b7c4:	eba3 030e 	sub.w	r3, r3, lr
 801b7c8:	4403      	add	r3, r0
 801b7ca:	0c12      	lsrs	r2, r2, #16
 801b7cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b7d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b7d4:	b29b      	uxth	r3, r3
 801b7d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b7da:	45c1      	cmp	r9, r8
 801b7dc:	f841 3b04 	str.w	r3, [r1], #4
 801b7e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b7e4:	d2e6      	bcs.n	801b7b4 <quorem+0xa4>
 801b7e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b7ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b7ee:	b922      	cbnz	r2, 801b7fa <quorem+0xea>
 801b7f0:	3b04      	subs	r3, #4
 801b7f2:	429d      	cmp	r5, r3
 801b7f4:	461a      	mov	r2, r3
 801b7f6:	d30b      	bcc.n	801b810 <quorem+0x100>
 801b7f8:	613c      	str	r4, [r7, #16]
 801b7fa:	3601      	adds	r6, #1
 801b7fc:	4630      	mov	r0, r6
 801b7fe:	b003      	add	sp, #12
 801b800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b804:	6812      	ldr	r2, [r2, #0]
 801b806:	3b04      	subs	r3, #4
 801b808:	2a00      	cmp	r2, #0
 801b80a:	d1cb      	bne.n	801b7a4 <quorem+0x94>
 801b80c:	3c01      	subs	r4, #1
 801b80e:	e7c6      	b.n	801b79e <quorem+0x8e>
 801b810:	6812      	ldr	r2, [r2, #0]
 801b812:	3b04      	subs	r3, #4
 801b814:	2a00      	cmp	r2, #0
 801b816:	d1ef      	bne.n	801b7f8 <quorem+0xe8>
 801b818:	3c01      	subs	r4, #1
 801b81a:	e7ea      	b.n	801b7f2 <quorem+0xe2>
 801b81c:	2000      	movs	r0, #0
 801b81e:	e7ee      	b.n	801b7fe <quorem+0xee>

0801b820 <_dtoa_r>:
 801b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b824:	69c7      	ldr	r7, [r0, #28]
 801b826:	b099      	sub	sp, #100	@ 0x64
 801b828:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b82c:	ec55 4b10 	vmov	r4, r5, d0
 801b830:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b832:	9109      	str	r1, [sp, #36]	@ 0x24
 801b834:	4683      	mov	fp, r0
 801b836:	920e      	str	r2, [sp, #56]	@ 0x38
 801b838:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b83a:	b97f      	cbnz	r7, 801b85c <_dtoa_r+0x3c>
 801b83c:	2010      	movs	r0, #16
 801b83e:	f7fd fe99 	bl	8019574 <malloc>
 801b842:	4602      	mov	r2, r0
 801b844:	f8cb 001c 	str.w	r0, [fp, #28]
 801b848:	b920      	cbnz	r0, 801b854 <_dtoa_r+0x34>
 801b84a:	4ba7      	ldr	r3, [pc, #668]	@ (801bae8 <_dtoa_r+0x2c8>)
 801b84c:	21ef      	movs	r1, #239	@ 0xef
 801b84e:	48a7      	ldr	r0, [pc, #668]	@ (801baec <_dtoa_r+0x2cc>)
 801b850:	f7ff ff40 	bl	801b6d4 <__assert_func>
 801b854:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b858:	6007      	str	r7, [r0, #0]
 801b85a:	60c7      	str	r7, [r0, #12]
 801b85c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b860:	6819      	ldr	r1, [r3, #0]
 801b862:	b159      	cbz	r1, 801b87c <_dtoa_r+0x5c>
 801b864:	685a      	ldr	r2, [r3, #4]
 801b866:	604a      	str	r2, [r1, #4]
 801b868:	2301      	movs	r3, #1
 801b86a:	4093      	lsls	r3, r2
 801b86c:	608b      	str	r3, [r1, #8]
 801b86e:	4658      	mov	r0, fp
 801b870:	f001 f970 	bl	801cb54 <_Bfree>
 801b874:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b878:	2200      	movs	r2, #0
 801b87a:	601a      	str	r2, [r3, #0]
 801b87c:	1e2b      	subs	r3, r5, #0
 801b87e:	bfb9      	ittee	lt
 801b880:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b884:	9303      	strlt	r3, [sp, #12]
 801b886:	2300      	movge	r3, #0
 801b888:	6033      	strge	r3, [r6, #0]
 801b88a:	9f03      	ldr	r7, [sp, #12]
 801b88c:	4b98      	ldr	r3, [pc, #608]	@ (801baf0 <_dtoa_r+0x2d0>)
 801b88e:	bfbc      	itt	lt
 801b890:	2201      	movlt	r2, #1
 801b892:	6032      	strlt	r2, [r6, #0]
 801b894:	43bb      	bics	r3, r7
 801b896:	d112      	bne.n	801b8be <_dtoa_r+0x9e>
 801b898:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b89a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b89e:	6013      	str	r3, [r2, #0]
 801b8a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b8a4:	4323      	orrs	r3, r4
 801b8a6:	f000 854d 	beq.w	801c344 <_dtoa_r+0xb24>
 801b8aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b8ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801bb04 <_dtoa_r+0x2e4>
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	f000 854f 	beq.w	801c354 <_dtoa_r+0xb34>
 801b8b6:	f10a 0303 	add.w	r3, sl, #3
 801b8ba:	f000 bd49 	b.w	801c350 <_dtoa_r+0xb30>
 801b8be:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b8c2:	2200      	movs	r2, #0
 801b8c4:	ec51 0b17 	vmov	r0, r1, d7
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801b8ce:	f7e5 f8d3 	bl	8000a78 <__aeabi_dcmpeq>
 801b8d2:	4680      	mov	r8, r0
 801b8d4:	b158      	cbz	r0, 801b8ee <_dtoa_r+0xce>
 801b8d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b8d8:	2301      	movs	r3, #1
 801b8da:	6013      	str	r3, [r2, #0]
 801b8dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b8de:	b113      	cbz	r3, 801b8e6 <_dtoa_r+0xc6>
 801b8e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b8e2:	4b84      	ldr	r3, [pc, #528]	@ (801baf4 <_dtoa_r+0x2d4>)
 801b8e4:	6013      	str	r3, [r2, #0]
 801b8e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801bb08 <_dtoa_r+0x2e8>
 801b8ea:	f000 bd33 	b.w	801c354 <_dtoa_r+0xb34>
 801b8ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b8f2:	aa16      	add	r2, sp, #88	@ 0x58
 801b8f4:	a917      	add	r1, sp, #92	@ 0x5c
 801b8f6:	4658      	mov	r0, fp
 801b8f8:	f001 fcd0 	bl	801d29c <__d2b>
 801b8fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b900:	4681      	mov	r9, r0
 801b902:	2e00      	cmp	r6, #0
 801b904:	d077      	beq.n	801b9f6 <_dtoa_r+0x1d6>
 801b906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b908:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801b90c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b914:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b918:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b91c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b920:	4619      	mov	r1, r3
 801b922:	2200      	movs	r2, #0
 801b924:	4b74      	ldr	r3, [pc, #464]	@ (801baf8 <_dtoa_r+0x2d8>)
 801b926:	f7e4 fc87 	bl	8000238 <__aeabi_dsub>
 801b92a:	a369      	add	r3, pc, #420	@ (adr r3, 801bad0 <_dtoa_r+0x2b0>)
 801b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b930:	f7e4 fe3a 	bl	80005a8 <__aeabi_dmul>
 801b934:	a368      	add	r3, pc, #416	@ (adr r3, 801bad8 <_dtoa_r+0x2b8>)
 801b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b93a:	f7e4 fc7f 	bl	800023c <__adddf3>
 801b93e:	4604      	mov	r4, r0
 801b940:	4630      	mov	r0, r6
 801b942:	460d      	mov	r5, r1
 801b944:	f7e4 fdc6 	bl	80004d4 <__aeabi_i2d>
 801b948:	a365      	add	r3, pc, #404	@ (adr r3, 801bae0 <_dtoa_r+0x2c0>)
 801b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b94e:	f7e4 fe2b 	bl	80005a8 <__aeabi_dmul>
 801b952:	4602      	mov	r2, r0
 801b954:	460b      	mov	r3, r1
 801b956:	4620      	mov	r0, r4
 801b958:	4629      	mov	r1, r5
 801b95a:	f7e4 fc6f 	bl	800023c <__adddf3>
 801b95e:	4604      	mov	r4, r0
 801b960:	460d      	mov	r5, r1
 801b962:	f7e5 f8d1 	bl	8000b08 <__aeabi_d2iz>
 801b966:	2200      	movs	r2, #0
 801b968:	4607      	mov	r7, r0
 801b96a:	2300      	movs	r3, #0
 801b96c:	4620      	mov	r0, r4
 801b96e:	4629      	mov	r1, r5
 801b970:	f7e5 f88c 	bl	8000a8c <__aeabi_dcmplt>
 801b974:	b140      	cbz	r0, 801b988 <_dtoa_r+0x168>
 801b976:	4638      	mov	r0, r7
 801b978:	f7e4 fdac 	bl	80004d4 <__aeabi_i2d>
 801b97c:	4622      	mov	r2, r4
 801b97e:	462b      	mov	r3, r5
 801b980:	f7e5 f87a 	bl	8000a78 <__aeabi_dcmpeq>
 801b984:	b900      	cbnz	r0, 801b988 <_dtoa_r+0x168>
 801b986:	3f01      	subs	r7, #1
 801b988:	2f16      	cmp	r7, #22
 801b98a:	d851      	bhi.n	801ba30 <_dtoa_r+0x210>
 801b98c:	4b5b      	ldr	r3, [pc, #364]	@ (801bafc <_dtoa_r+0x2dc>)
 801b98e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b99a:	f7e5 f877 	bl	8000a8c <__aeabi_dcmplt>
 801b99e:	2800      	cmp	r0, #0
 801b9a0:	d048      	beq.n	801ba34 <_dtoa_r+0x214>
 801b9a2:	3f01      	subs	r7, #1
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	9312      	str	r3, [sp, #72]	@ 0x48
 801b9a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b9aa:	1b9b      	subs	r3, r3, r6
 801b9ac:	1e5a      	subs	r2, r3, #1
 801b9ae:	bf44      	itt	mi
 801b9b0:	f1c3 0801 	rsbmi	r8, r3, #1
 801b9b4:	2300      	movmi	r3, #0
 801b9b6:	9208      	str	r2, [sp, #32]
 801b9b8:	bf54      	ite	pl
 801b9ba:	f04f 0800 	movpl.w	r8, #0
 801b9be:	9308      	strmi	r3, [sp, #32]
 801b9c0:	2f00      	cmp	r7, #0
 801b9c2:	db39      	blt.n	801ba38 <_dtoa_r+0x218>
 801b9c4:	9b08      	ldr	r3, [sp, #32]
 801b9c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 801b9c8:	443b      	add	r3, r7
 801b9ca:	9308      	str	r3, [sp, #32]
 801b9cc:	2300      	movs	r3, #0
 801b9ce:	930a      	str	r3, [sp, #40]	@ 0x28
 801b9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b9d2:	2b09      	cmp	r3, #9
 801b9d4:	d864      	bhi.n	801baa0 <_dtoa_r+0x280>
 801b9d6:	2b05      	cmp	r3, #5
 801b9d8:	bfc4      	itt	gt
 801b9da:	3b04      	subgt	r3, #4
 801b9dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801b9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b9e0:	f1a3 0302 	sub.w	r3, r3, #2
 801b9e4:	bfcc      	ite	gt
 801b9e6:	2400      	movgt	r4, #0
 801b9e8:	2401      	movle	r4, #1
 801b9ea:	2b03      	cmp	r3, #3
 801b9ec:	d863      	bhi.n	801bab6 <_dtoa_r+0x296>
 801b9ee:	e8df f003 	tbb	[pc, r3]
 801b9f2:	372a      	.short	0x372a
 801b9f4:	5535      	.short	0x5535
 801b9f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801b9fa:	441e      	add	r6, r3
 801b9fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ba00:	2b20      	cmp	r3, #32
 801ba02:	bfc1      	itttt	gt
 801ba04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ba08:	409f      	lslgt	r7, r3
 801ba0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ba0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ba12:	bfd6      	itet	le
 801ba14:	f1c3 0320 	rsble	r3, r3, #32
 801ba18:	ea47 0003 	orrgt.w	r0, r7, r3
 801ba1c:	fa04 f003 	lslle.w	r0, r4, r3
 801ba20:	f7e4 fd48 	bl	80004b4 <__aeabi_ui2d>
 801ba24:	2201      	movs	r2, #1
 801ba26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ba2a:	3e01      	subs	r6, #1
 801ba2c:	9214      	str	r2, [sp, #80]	@ 0x50
 801ba2e:	e777      	b.n	801b920 <_dtoa_r+0x100>
 801ba30:	2301      	movs	r3, #1
 801ba32:	e7b8      	b.n	801b9a6 <_dtoa_r+0x186>
 801ba34:	9012      	str	r0, [sp, #72]	@ 0x48
 801ba36:	e7b7      	b.n	801b9a8 <_dtoa_r+0x188>
 801ba38:	427b      	negs	r3, r7
 801ba3a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	eba8 0807 	sub.w	r8, r8, r7
 801ba42:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ba44:	e7c4      	b.n	801b9d0 <_dtoa_r+0x1b0>
 801ba46:	2300      	movs	r3, #0
 801ba48:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ba4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	dc35      	bgt.n	801babc <_dtoa_r+0x29c>
 801ba50:	2301      	movs	r3, #1
 801ba52:	9300      	str	r3, [sp, #0]
 801ba54:	9307      	str	r3, [sp, #28]
 801ba56:	461a      	mov	r2, r3
 801ba58:	920e      	str	r2, [sp, #56]	@ 0x38
 801ba5a:	e00b      	b.n	801ba74 <_dtoa_r+0x254>
 801ba5c:	2301      	movs	r3, #1
 801ba5e:	e7f3      	b.n	801ba48 <_dtoa_r+0x228>
 801ba60:	2300      	movs	r3, #0
 801ba62:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ba64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba66:	18fb      	adds	r3, r7, r3
 801ba68:	9300      	str	r3, [sp, #0]
 801ba6a:	3301      	adds	r3, #1
 801ba6c:	2b01      	cmp	r3, #1
 801ba6e:	9307      	str	r3, [sp, #28]
 801ba70:	bfb8      	it	lt
 801ba72:	2301      	movlt	r3, #1
 801ba74:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ba78:	2100      	movs	r1, #0
 801ba7a:	2204      	movs	r2, #4
 801ba7c:	f102 0514 	add.w	r5, r2, #20
 801ba80:	429d      	cmp	r5, r3
 801ba82:	d91f      	bls.n	801bac4 <_dtoa_r+0x2a4>
 801ba84:	6041      	str	r1, [r0, #4]
 801ba86:	4658      	mov	r0, fp
 801ba88:	f001 f824 	bl	801cad4 <_Balloc>
 801ba8c:	4682      	mov	sl, r0
 801ba8e:	2800      	cmp	r0, #0
 801ba90:	d13c      	bne.n	801bb0c <_dtoa_r+0x2ec>
 801ba92:	4b1b      	ldr	r3, [pc, #108]	@ (801bb00 <_dtoa_r+0x2e0>)
 801ba94:	4602      	mov	r2, r0
 801ba96:	f240 11af 	movw	r1, #431	@ 0x1af
 801ba9a:	e6d8      	b.n	801b84e <_dtoa_r+0x2e>
 801ba9c:	2301      	movs	r3, #1
 801ba9e:	e7e0      	b.n	801ba62 <_dtoa_r+0x242>
 801baa0:	2401      	movs	r4, #1
 801baa2:	2300      	movs	r3, #0
 801baa4:	9309      	str	r3, [sp, #36]	@ 0x24
 801baa6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801baa8:	f04f 33ff 	mov.w	r3, #4294967295
 801baac:	9300      	str	r3, [sp, #0]
 801baae:	9307      	str	r3, [sp, #28]
 801bab0:	2200      	movs	r2, #0
 801bab2:	2312      	movs	r3, #18
 801bab4:	e7d0      	b.n	801ba58 <_dtoa_r+0x238>
 801bab6:	2301      	movs	r3, #1
 801bab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801baba:	e7f5      	b.n	801baa8 <_dtoa_r+0x288>
 801babc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801babe:	9300      	str	r3, [sp, #0]
 801bac0:	9307      	str	r3, [sp, #28]
 801bac2:	e7d7      	b.n	801ba74 <_dtoa_r+0x254>
 801bac4:	3101      	adds	r1, #1
 801bac6:	0052      	lsls	r2, r2, #1
 801bac8:	e7d8      	b.n	801ba7c <_dtoa_r+0x25c>
 801baca:	bf00      	nop
 801bacc:	f3af 8000 	nop.w
 801bad0:	636f4361 	.word	0x636f4361
 801bad4:	3fd287a7 	.word	0x3fd287a7
 801bad8:	8b60c8b3 	.word	0x8b60c8b3
 801badc:	3fc68a28 	.word	0x3fc68a28
 801bae0:	509f79fb 	.word	0x509f79fb
 801bae4:	3fd34413 	.word	0x3fd34413
 801bae8:	08021ca2 	.word	0x08021ca2
 801baec:	08021d64 	.word	0x08021d64
 801baf0:	7ff00000 	.word	0x7ff00000
 801baf4:	08021c7a 	.word	0x08021c7a
 801baf8:	3ff80000 	.word	0x3ff80000
 801bafc:	08021ec0 	.word	0x08021ec0
 801bb00:	08021dbc 	.word	0x08021dbc
 801bb04:	08021d60 	.word	0x08021d60
 801bb08:	08021c79 	.word	0x08021c79
 801bb0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bb10:	6018      	str	r0, [r3, #0]
 801bb12:	9b07      	ldr	r3, [sp, #28]
 801bb14:	2b0e      	cmp	r3, #14
 801bb16:	f200 80a4 	bhi.w	801bc62 <_dtoa_r+0x442>
 801bb1a:	2c00      	cmp	r4, #0
 801bb1c:	f000 80a1 	beq.w	801bc62 <_dtoa_r+0x442>
 801bb20:	2f00      	cmp	r7, #0
 801bb22:	dd33      	ble.n	801bb8c <_dtoa_r+0x36c>
 801bb24:	4bad      	ldr	r3, [pc, #692]	@ (801bddc <_dtoa_r+0x5bc>)
 801bb26:	f007 020f 	and.w	r2, r7, #15
 801bb2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bb2e:	ed93 7b00 	vldr	d7, [r3]
 801bb32:	05f8      	lsls	r0, r7, #23
 801bb34:	ed8d 7b04 	vstr	d7, [sp, #16]
 801bb38:	ea4f 1427 	mov.w	r4, r7, asr #4
 801bb3c:	d516      	bpl.n	801bb6c <_dtoa_r+0x34c>
 801bb3e:	4ba8      	ldr	r3, [pc, #672]	@ (801bde0 <_dtoa_r+0x5c0>)
 801bb40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bb44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bb48:	f7e4 fe58 	bl	80007fc <__aeabi_ddiv>
 801bb4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb50:	f004 040f 	and.w	r4, r4, #15
 801bb54:	2603      	movs	r6, #3
 801bb56:	4da2      	ldr	r5, [pc, #648]	@ (801bde0 <_dtoa_r+0x5c0>)
 801bb58:	b954      	cbnz	r4, 801bb70 <_dtoa_r+0x350>
 801bb5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb62:	f7e4 fe4b 	bl	80007fc <__aeabi_ddiv>
 801bb66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb6a:	e028      	b.n	801bbbe <_dtoa_r+0x39e>
 801bb6c:	2602      	movs	r6, #2
 801bb6e:	e7f2      	b.n	801bb56 <_dtoa_r+0x336>
 801bb70:	07e1      	lsls	r1, r4, #31
 801bb72:	d508      	bpl.n	801bb86 <_dtoa_r+0x366>
 801bb74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb78:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bb7c:	f7e4 fd14 	bl	80005a8 <__aeabi_dmul>
 801bb80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb84:	3601      	adds	r6, #1
 801bb86:	1064      	asrs	r4, r4, #1
 801bb88:	3508      	adds	r5, #8
 801bb8a:	e7e5      	b.n	801bb58 <_dtoa_r+0x338>
 801bb8c:	f000 80d2 	beq.w	801bd34 <_dtoa_r+0x514>
 801bb90:	427c      	negs	r4, r7
 801bb92:	4b92      	ldr	r3, [pc, #584]	@ (801bddc <_dtoa_r+0x5bc>)
 801bb94:	4d92      	ldr	r5, [pc, #584]	@ (801bde0 <_dtoa_r+0x5c0>)
 801bb96:	f004 020f 	and.w	r2, r4, #15
 801bb9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bba6:	f7e4 fcff 	bl	80005a8 <__aeabi_dmul>
 801bbaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bbae:	1124      	asrs	r4, r4, #4
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	2602      	movs	r6, #2
 801bbb4:	2c00      	cmp	r4, #0
 801bbb6:	f040 80b2 	bne.w	801bd1e <_dtoa_r+0x4fe>
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d1d3      	bne.n	801bb66 <_dtoa_r+0x346>
 801bbbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bbc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	f000 80b7 	beq.w	801bd38 <_dtoa_r+0x518>
 801bbca:	4b86      	ldr	r3, [pc, #536]	@ (801bde4 <_dtoa_r+0x5c4>)
 801bbcc:	2200      	movs	r2, #0
 801bbce:	4620      	mov	r0, r4
 801bbd0:	4629      	mov	r1, r5
 801bbd2:	f7e4 ff5b 	bl	8000a8c <__aeabi_dcmplt>
 801bbd6:	2800      	cmp	r0, #0
 801bbd8:	f000 80ae 	beq.w	801bd38 <_dtoa_r+0x518>
 801bbdc:	9b07      	ldr	r3, [sp, #28]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	f000 80aa 	beq.w	801bd38 <_dtoa_r+0x518>
 801bbe4:	9b00      	ldr	r3, [sp, #0]
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	dd37      	ble.n	801bc5a <_dtoa_r+0x43a>
 801bbea:	1e7b      	subs	r3, r7, #1
 801bbec:	9304      	str	r3, [sp, #16]
 801bbee:	4620      	mov	r0, r4
 801bbf0:	4b7d      	ldr	r3, [pc, #500]	@ (801bde8 <_dtoa_r+0x5c8>)
 801bbf2:	2200      	movs	r2, #0
 801bbf4:	4629      	mov	r1, r5
 801bbf6:	f7e4 fcd7 	bl	80005a8 <__aeabi_dmul>
 801bbfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bbfe:	9c00      	ldr	r4, [sp, #0]
 801bc00:	3601      	adds	r6, #1
 801bc02:	4630      	mov	r0, r6
 801bc04:	f7e4 fc66 	bl	80004d4 <__aeabi_i2d>
 801bc08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bc0c:	f7e4 fccc 	bl	80005a8 <__aeabi_dmul>
 801bc10:	4b76      	ldr	r3, [pc, #472]	@ (801bdec <_dtoa_r+0x5cc>)
 801bc12:	2200      	movs	r2, #0
 801bc14:	f7e4 fb12 	bl	800023c <__adddf3>
 801bc18:	4605      	mov	r5, r0
 801bc1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bc1e:	2c00      	cmp	r4, #0
 801bc20:	f040 808d 	bne.w	801bd3e <_dtoa_r+0x51e>
 801bc24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc28:	4b71      	ldr	r3, [pc, #452]	@ (801bdf0 <_dtoa_r+0x5d0>)
 801bc2a:	2200      	movs	r2, #0
 801bc2c:	f7e4 fb04 	bl	8000238 <__aeabi_dsub>
 801bc30:	4602      	mov	r2, r0
 801bc32:	460b      	mov	r3, r1
 801bc34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bc38:	462a      	mov	r2, r5
 801bc3a:	4633      	mov	r3, r6
 801bc3c:	f7e4 ff44 	bl	8000ac8 <__aeabi_dcmpgt>
 801bc40:	2800      	cmp	r0, #0
 801bc42:	f040 828b 	bne.w	801c15c <_dtoa_r+0x93c>
 801bc46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc4a:	462a      	mov	r2, r5
 801bc4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801bc50:	f7e4 ff1c 	bl	8000a8c <__aeabi_dcmplt>
 801bc54:	2800      	cmp	r0, #0
 801bc56:	f040 8128 	bne.w	801beaa <_dtoa_r+0x68a>
 801bc5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801bc5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bc62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	f2c0 815a 	blt.w	801bf1e <_dtoa_r+0x6fe>
 801bc6a:	2f0e      	cmp	r7, #14
 801bc6c:	f300 8157 	bgt.w	801bf1e <_dtoa_r+0x6fe>
 801bc70:	4b5a      	ldr	r3, [pc, #360]	@ (801bddc <_dtoa_r+0x5bc>)
 801bc72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bc76:	ed93 7b00 	vldr	d7, [r3]
 801bc7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	ed8d 7b00 	vstr	d7, [sp]
 801bc82:	da03      	bge.n	801bc8c <_dtoa_r+0x46c>
 801bc84:	9b07      	ldr	r3, [sp, #28]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	f340 8101 	ble.w	801be8e <_dtoa_r+0x66e>
 801bc8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bc90:	4656      	mov	r6, sl
 801bc92:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc96:	4620      	mov	r0, r4
 801bc98:	4629      	mov	r1, r5
 801bc9a:	f7e4 fdaf 	bl	80007fc <__aeabi_ddiv>
 801bc9e:	f7e4 ff33 	bl	8000b08 <__aeabi_d2iz>
 801bca2:	4680      	mov	r8, r0
 801bca4:	f7e4 fc16 	bl	80004d4 <__aeabi_i2d>
 801bca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bcac:	f7e4 fc7c 	bl	80005a8 <__aeabi_dmul>
 801bcb0:	4602      	mov	r2, r0
 801bcb2:	460b      	mov	r3, r1
 801bcb4:	4620      	mov	r0, r4
 801bcb6:	4629      	mov	r1, r5
 801bcb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801bcbc:	f7e4 fabc 	bl	8000238 <__aeabi_dsub>
 801bcc0:	f806 4b01 	strb.w	r4, [r6], #1
 801bcc4:	9d07      	ldr	r5, [sp, #28]
 801bcc6:	eba6 040a 	sub.w	r4, r6, sl
 801bcca:	42a5      	cmp	r5, r4
 801bccc:	4602      	mov	r2, r0
 801bcce:	460b      	mov	r3, r1
 801bcd0:	f040 8117 	bne.w	801bf02 <_dtoa_r+0x6e2>
 801bcd4:	f7e4 fab2 	bl	800023c <__adddf3>
 801bcd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bcdc:	4604      	mov	r4, r0
 801bcde:	460d      	mov	r5, r1
 801bce0:	f7e4 fef2 	bl	8000ac8 <__aeabi_dcmpgt>
 801bce4:	2800      	cmp	r0, #0
 801bce6:	f040 80f9 	bne.w	801bedc <_dtoa_r+0x6bc>
 801bcea:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bcee:	4620      	mov	r0, r4
 801bcf0:	4629      	mov	r1, r5
 801bcf2:	f7e4 fec1 	bl	8000a78 <__aeabi_dcmpeq>
 801bcf6:	b118      	cbz	r0, 801bd00 <_dtoa_r+0x4e0>
 801bcf8:	f018 0f01 	tst.w	r8, #1
 801bcfc:	f040 80ee 	bne.w	801bedc <_dtoa_r+0x6bc>
 801bd00:	4649      	mov	r1, r9
 801bd02:	4658      	mov	r0, fp
 801bd04:	f000 ff26 	bl	801cb54 <_Bfree>
 801bd08:	2300      	movs	r3, #0
 801bd0a:	7033      	strb	r3, [r6, #0]
 801bd0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bd0e:	3701      	adds	r7, #1
 801bd10:	601f      	str	r7, [r3, #0]
 801bd12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	f000 831d 	beq.w	801c354 <_dtoa_r+0xb34>
 801bd1a:	601e      	str	r6, [r3, #0]
 801bd1c:	e31a      	b.n	801c354 <_dtoa_r+0xb34>
 801bd1e:	07e2      	lsls	r2, r4, #31
 801bd20:	d505      	bpl.n	801bd2e <_dtoa_r+0x50e>
 801bd22:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bd26:	f7e4 fc3f 	bl	80005a8 <__aeabi_dmul>
 801bd2a:	3601      	adds	r6, #1
 801bd2c:	2301      	movs	r3, #1
 801bd2e:	1064      	asrs	r4, r4, #1
 801bd30:	3508      	adds	r5, #8
 801bd32:	e73f      	b.n	801bbb4 <_dtoa_r+0x394>
 801bd34:	2602      	movs	r6, #2
 801bd36:	e742      	b.n	801bbbe <_dtoa_r+0x39e>
 801bd38:	9c07      	ldr	r4, [sp, #28]
 801bd3a:	9704      	str	r7, [sp, #16]
 801bd3c:	e761      	b.n	801bc02 <_dtoa_r+0x3e2>
 801bd3e:	4b27      	ldr	r3, [pc, #156]	@ (801bddc <_dtoa_r+0x5bc>)
 801bd40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bd42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bd46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bd4a:	4454      	add	r4, sl
 801bd4c:	2900      	cmp	r1, #0
 801bd4e:	d053      	beq.n	801bdf8 <_dtoa_r+0x5d8>
 801bd50:	4928      	ldr	r1, [pc, #160]	@ (801bdf4 <_dtoa_r+0x5d4>)
 801bd52:	2000      	movs	r0, #0
 801bd54:	f7e4 fd52 	bl	80007fc <__aeabi_ddiv>
 801bd58:	4633      	mov	r3, r6
 801bd5a:	462a      	mov	r2, r5
 801bd5c:	f7e4 fa6c 	bl	8000238 <__aeabi_dsub>
 801bd60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bd64:	4656      	mov	r6, sl
 801bd66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd6a:	f7e4 fecd 	bl	8000b08 <__aeabi_d2iz>
 801bd6e:	4605      	mov	r5, r0
 801bd70:	f7e4 fbb0 	bl	80004d4 <__aeabi_i2d>
 801bd74:	4602      	mov	r2, r0
 801bd76:	460b      	mov	r3, r1
 801bd78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd7c:	f7e4 fa5c 	bl	8000238 <__aeabi_dsub>
 801bd80:	3530      	adds	r5, #48	@ 0x30
 801bd82:	4602      	mov	r2, r0
 801bd84:	460b      	mov	r3, r1
 801bd86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bd8a:	f806 5b01 	strb.w	r5, [r6], #1
 801bd8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bd92:	f7e4 fe7b 	bl	8000a8c <__aeabi_dcmplt>
 801bd96:	2800      	cmp	r0, #0
 801bd98:	d171      	bne.n	801be7e <_dtoa_r+0x65e>
 801bd9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bd9e:	4911      	ldr	r1, [pc, #68]	@ (801bde4 <_dtoa_r+0x5c4>)
 801bda0:	2000      	movs	r0, #0
 801bda2:	f7e4 fa49 	bl	8000238 <__aeabi_dsub>
 801bda6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bdaa:	f7e4 fe6f 	bl	8000a8c <__aeabi_dcmplt>
 801bdae:	2800      	cmp	r0, #0
 801bdb0:	f040 8095 	bne.w	801bede <_dtoa_r+0x6be>
 801bdb4:	42a6      	cmp	r6, r4
 801bdb6:	f43f af50 	beq.w	801bc5a <_dtoa_r+0x43a>
 801bdba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bdbe:	4b0a      	ldr	r3, [pc, #40]	@ (801bde8 <_dtoa_r+0x5c8>)
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	f7e4 fbf1 	bl	80005a8 <__aeabi_dmul>
 801bdc6:	4b08      	ldr	r3, [pc, #32]	@ (801bde8 <_dtoa_r+0x5c8>)
 801bdc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bdcc:	2200      	movs	r2, #0
 801bdce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdd2:	f7e4 fbe9 	bl	80005a8 <__aeabi_dmul>
 801bdd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdda:	e7c4      	b.n	801bd66 <_dtoa_r+0x546>
 801bddc:	08021ec0 	.word	0x08021ec0
 801bde0:	08021e98 	.word	0x08021e98
 801bde4:	3ff00000 	.word	0x3ff00000
 801bde8:	40240000 	.word	0x40240000
 801bdec:	401c0000 	.word	0x401c0000
 801bdf0:	40140000 	.word	0x40140000
 801bdf4:	3fe00000 	.word	0x3fe00000
 801bdf8:	4631      	mov	r1, r6
 801bdfa:	4628      	mov	r0, r5
 801bdfc:	f7e4 fbd4 	bl	80005a8 <__aeabi_dmul>
 801be00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801be04:	9415      	str	r4, [sp, #84]	@ 0x54
 801be06:	4656      	mov	r6, sl
 801be08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be0c:	f7e4 fe7c 	bl	8000b08 <__aeabi_d2iz>
 801be10:	4605      	mov	r5, r0
 801be12:	f7e4 fb5f 	bl	80004d4 <__aeabi_i2d>
 801be16:	4602      	mov	r2, r0
 801be18:	460b      	mov	r3, r1
 801be1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be1e:	f7e4 fa0b 	bl	8000238 <__aeabi_dsub>
 801be22:	3530      	adds	r5, #48	@ 0x30
 801be24:	f806 5b01 	strb.w	r5, [r6], #1
 801be28:	4602      	mov	r2, r0
 801be2a:	460b      	mov	r3, r1
 801be2c:	42a6      	cmp	r6, r4
 801be2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801be32:	f04f 0200 	mov.w	r2, #0
 801be36:	d124      	bne.n	801be82 <_dtoa_r+0x662>
 801be38:	4bac      	ldr	r3, [pc, #688]	@ (801c0ec <_dtoa_r+0x8cc>)
 801be3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801be3e:	f7e4 f9fd 	bl	800023c <__adddf3>
 801be42:	4602      	mov	r2, r0
 801be44:	460b      	mov	r3, r1
 801be46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be4a:	f7e4 fe3d 	bl	8000ac8 <__aeabi_dcmpgt>
 801be4e:	2800      	cmp	r0, #0
 801be50:	d145      	bne.n	801bede <_dtoa_r+0x6be>
 801be52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801be56:	49a5      	ldr	r1, [pc, #660]	@ (801c0ec <_dtoa_r+0x8cc>)
 801be58:	2000      	movs	r0, #0
 801be5a:	f7e4 f9ed 	bl	8000238 <__aeabi_dsub>
 801be5e:	4602      	mov	r2, r0
 801be60:	460b      	mov	r3, r1
 801be62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be66:	f7e4 fe11 	bl	8000a8c <__aeabi_dcmplt>
 801be6a:	2800      	cmp	r0, #0
 801be6c:	f43f aef5 	beq.w	801bc5a <_dtoa_r+0x43a>
 801be70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801be72:	1e73      	subs	r3, r6, #1
 801be74:	9315      	str	r3, [sp, #84]	@ 0x54
 801be76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801be7a:	2b30      	cmp	r3, #48	@ 0x30
 801be7c:	d0f8      	beq.n	801be70 <_dtoa_r+0x650>
 801be7e:	9f04      	ldr	r7, [sp, #16]
 801be80:	e73e      	b.n	801bd00 <_dtoa_r+0x4e0>
 801be82:	4b9b      	ldr	r3, [pc, #620]	@ (801c0f0 <_dtoa_r+0x8d0>)
 801be84:	f7e4 fb90 	bl	80005a8 <__aeabi_dmul>
 801be88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be8c:	e7bc      	b.n	801be08 <_dtoa_r+0x5e8>
 801be8e:	d10c      	bne.n	801beaa <_dtoa_r+0x68a>
 801be90:	4b98      	ldr	r3, [pc, #608]	@ (801c0f4 <_dtoa_r+0x8d4>)
 801be92:	2200      	movs	r2, #0
 801be94:	e9dd 0100 	ldrd	r0, r1, [sp]
 801be98:	f7e4 fb86 	bl	80005a8 <__aeabi_dmul>
 801be9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bea0:	f7e4 fe08 	bl	8000ab4 <__aeabi_dcmpge>
 801bea4:	2800      	cmp	r0, #0
 801bea6:	f000 8157 	beq.w	801c158 <_dtoa_r+0x938>
 801beaa:	2400      	movs	r4, #0
 801beac:	4625      	mov	r5, r4
 801beae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801beb0:	43db      	mvns	r3, r3
 801beb2:	9304      	str	r3, [sp, #16]
 801beb4:	4656      	mov	r6, sl
 801beb6:	2700      	movs	r7, #0
 801beb8:	4621      	mov	r1, r4
 801beba:	4658      	mov	r0, fp
 801bebc:	f000 fe4a 	bl	801cb54 <_Bfree>
 801bec0:	2d00      	cmp	r5, #0
 801bec2:	d0dc      	beq.n	801be7e <_dtoa_r+0x65e>
 801bec4:	b12f      	cbz	r7, 801bed2 <_dtoa_r+0x6b2>
 801bec6:	42af      	cmp	r7, r5
 801bec8:	d003      	beq.n	801bed2 <_dtoa_r+0x6b2>
 801beca:	4639      	mov	r1, r7
 801becc:	4658      	mov	r0, fp
 801bece:	f000 fe41 	bl	801cb54 <_Bfree>
 801bed2:	4629      	mov	r1, r5
 801bed4:	4658      	mov	r0, fp
 801bed6:	f000 fe3d 	bl	801cb54 <_Bfree>
 801beda:	e7d0      	b.n	801be7e <_dtoa_r+0x65e>
 801bedc:	9704      	str	r7, [sp, #16]
 801bede:	4633      	mov	r3, r6
 801bee0:	461e      	mov	r6, r3
 801bee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bee6:	2a39      	cmp	r2, #57	@ 0x39
 801bee8:	d107      	bne.n	801befa <_dtoa_r+0x6da>
 801beea:	459a      	cmp	sl, r3
 801beec:	d1f8      	bne.n	801bee0 <_dtoa_r+0x6c0>
 801beee:	9a04      	ldr	r2, [sp, #16]
 801bef0:	3201      	adds	r2, #1
 801bef2:	9204      	str	r2, [sp, #16]
 801bef4:	2230      	movs	r2, #48	@ 0x30
 801bef6:	f88a 2000 	strb.w	r2, [sl]
 801befa:	781a      	ldrb	r2, [r3, #0]
 801befc:	3201      	adds	r2, #1
 801befe:	701a      	strb	r2, [r3, #0]
 801bf00:	e7bd      	b.n	801be7e <_dtoa_r+0x65e>
 801bf02:	4b7b      	ldr	r3, [pc, #492]	@ (801c0f0 <_dtoa_r+0x8d0>)
 801bf04:	2200      	movs	r2, #0
 801bf06:	f7e4 fb4f 	bl	80005a8 <__aeabi_dmul>
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	4604      	mov	r4, r0
 801bf10:	460d      	mov	r5, r1
 801bf12:	f7e4 fdb1 	bl	8000a78 <__aeabi_dcmpeq>
 801bf16:	2800      	cmp	r0, #0
 801bf18:	f43f aebb 	beq.w	801bc92 <_dtoa_r+0x472>
 801bf1c:	e6f0      	b.n	801bd00 <_dtoa_r+0x4e0>
 801bf1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bf20:	2a00      	cmp	r2, #0
 801bf22:	f000 80db 	beq.w	801c0dc <_dtoa_r+0x8bc>
 801bf26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bf28:	2a01      	cmp	r2, #1
 801bf2a:	f300 80bf 	bgt.w	801c0ac <_dtoa_r+0x88c>
 801bf2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bf30:	2a00      	cmp	r2, #0
 801bf32:	f000 80b7 	beq.w	801c0a4 <_dtoa_r+0x884>
 801bf36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801bf3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bf3c:	4646      	mov	r6, r8
 801bf3e:	9a08      	ldr	r2, [sp, #32]
 801bf40:	2101      	movs	r1, #1
 801bf42:	441a      	add	r2, r3
 801bf44:	4658      	mov	r0, fp
 801bf46:	4498      	add	r8, r3
 801bf48:	9208      	str	r2, [sp, #32]
 801bf4a:	f000 ff01 	bl	801cd50 <__i2b>
 801bf4e:	4605      	mov	r5, r0
 801bf50:	b15e      	cbz	r6, 801bf6a <_dtoa_r+0x74a>
 801bf52:	9b08      	ldr	r3, [sp, #32]
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	dd08      	ble.n	801bf6a <_dtoa_r+0x74a>
 801bf58:	42b3      	cmp	r3, r6
 801bf5a:	9a08      	ldr	r2, [sp, #32]
 801bf5c:	bfa8      	it	ge
 801bf5e:	4633      	movge	r3, r6
 801bf60:	eba8 0803 	sub.w	r8, r8, r3
 801bf64:	1af6      	subs	r6, r6, r3
 801bf66:	1ad3      	subs	r3, r2, r3
 801bf68:	9308      	str	r3, [sp, #32]
 801bf6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf6c:	b1f3      	cbz	r3, 801bfac <_dtoa_r+0x78c>
 801bf6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	f000 80b7 	beq.w	801c0e4 <_dtoa_r+0x8c4>
 801bf76:	b18c      	cbz	r4, 801bf9c <_dtoa_r+0x77c>
 801bf78:	4629      	mov	r1, r5
 801bf7a:	4622      	mov	r2, r4
 801bf7c:	4658      	mov	r0, fp
 801bf7e:	f000 ffa7 	bl	801ced0 <__pow5mult>
 801bf82:	464a      	mov	r2, r9
 801bf84:	4601      	mov	r1, r0
 801bf86:	4605      	mov	r5, r0
 801bf88:	4658      	mov	r0, fp
 801bf8a:	f000 fef7 	bl	801cd7c <__multiply>
 801bf8e:	4649      	mov	r1, r9
 801bf90:	9004      	str	r0, [sp, #16]
 801bf92:	4658      	mov	r0, fp
 801bf94:	f000 fdde 	bl	801cb54 <_Bfree>
 801bf98:	9b04      	ldr	r3, [sp, #16]
 801bf9a:	4699      	mov	r9, r3
 801bf9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf9e:	1b1a      	subs	r2, r3, r4
 801bfa0:	d004      	beq.n	801bfac <_dtoa_r+0x78c>
 801bfa2:	4649      	mov	r1, r9
 801bfa4:	4658      	mov	r0, fp
 801bfa6:	f000 ff93 	bl	801ced0 <__pow5mult>
 801bfaa:	4681      	mov	r9, r0
 801bfac:	2101      	movs	r1, #1
 801bfae:	4658      	mov	r0, fp
 801bfb0:	f000 fece 	bl	801cd50 <__i2b>
 801bfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bfb6:	4604      	mov	r4, r0
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	f000 81cf 	beq.w	801c35c <_dtoa_r+0xb3c>
 801bfbe:	461a      	mov	r2, r3
 801bfc0:	4601      	mov	r1, r0
 801bfc2:	4658      	mov	r0, fp
 801bfc4:	f000 ff84 	bl	801ced0 <__pow5mult>
 801bfc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfca:	2b01      	cmp	r3, #1
 801bfcc:	4604      	mov	r4, r0
 801bfce:	f300 8095 	bgt.w	801c0fc <_dtoa_r+0x8dc>
 801bfd2:	9b02      	ldr	r3, [sp, #8]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	f040 8087 	bne.w	801c0e8 <_dtoa_r+0x8c8>
 801bfda:	9b03      	ldr	r3, [sp, #12]
 801bfdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	f040 8089 	bne.w	801c0f8 <_dtoa_r+0x8d8>
 801bfe6:	9b03      	ldr	r3, [sp, #12]
 801bfe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bfec:	0d1b      	lsrs	r3, r3, #20
 801bfee:	051b      	lsls	r3, r3, #20
 801bff0:	b12b      	cbz	r3, 801bffe <_dtoa_r+0x7de>
 801bff2:	9b08      	ldr	r3, [sp, #32]
 801bff4:	3301      	adds	r3, #1
 801bff6:	9308      	str	r3, [sp, #32]
 801bff8:	f108 0801 	add.w	r8, r8, #1
 801bffc:	2301      	movs	r3, #1
 801bffe:	930a      	str	r3, [sp, #40]	@ 0x28
 801c000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c002:	2b00      	cmp	r3, #0
 801c004:	f000 81b0 	beq.w	801c368 <_dtoa_r+0xb48>
 801c008:	6923      	ldr	r3, [r4, #16]
 801c00a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c00e:	6918      	ldr	r0, [r3, #16]
 801c010:	f000 fe52 	bl	801ccb8 <__hi0bits>
 801c014:	f1c0 0020 	rsb	r0, r0, #32
 801c018:	9b08      	ldr	r3, [sp, #32]
 801c01a:	4418      	add	r0, r3
 801c01c:	f010 001f 	ands.w	r0, r0, #31
 801c020:	d077      	beq.n	801c112 <_dtoa_r+0x8f2>
 801c022:	f1c0 0320 	rsb	r3, r0, #32
 801c026:	2b04      	cmp	r3, #4
 801c028:	dd6b      	ble.n	801c102 <_dtoa_r+0x8e2>
 801c02a:	9b08      	ldr	r3, [sp, #32]
 801c02c:	f1c0 001c 	rsb	r0, r0, #28
 801c030:	4403      	add	r3, r0
 801c032:	4480      	add	r8, r0
 801c034:	4406      	add	r6, r0
 801c036:	9308      	str	r3, [sp, #32]
 801c038:	f1b8 0f00 	cmp.w	r8, #0
 801c03c:	dd05      	ble.n	801c04a <_dtoa_r+0x82a>
 801c03e:	4649      	mov	r1, r9
 801c040:	4642      	mov	r2, r8
 801c042:	4658      	mov	r0, fp
 801c044:	f000 ff9e 	bl	801cf84 <__lshift>
 801c048:	4681      	mov	r9, r0
 801c04a:	9b08      	ldr	r3, [sp, #32]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	dd05      	ble.n	801c05c <_dtoa_r+0x83c>
 801c050:	4621      	mov	r1, r4
 801c052:	461a      	mov	r2, r3
 801c054:	4658      	mov	r0, fp
 801c056:	f000 ff95 	bl	801cf84 <__lshift>
 801c05a:	4604      	mov	r4, r0
 801c05c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d059      	beq.n	801c116 <_dtoa_r+0x8f6>
 801c062:	4621      	mov	r1, r4
 801c064:	4648      	mov	r0, r9
 801c066:	f000 fff9 	bl	801d05c <__mcmp>
 801c06a:	2800      	cmp	r0, #0
 801c06c:	da53      	bge.n	801c116 <_dtoa_r+0x8f6>
 801c06e:	1e7b      	subs	r3, r7, #1
 801c070:	9304      	str	r3, [sp, #16]
 801c072:	4649      	mov	r1, r9
 801c074:	2300      	movs	r3, #0
 801c076:	220a      	movs	r2, #10
 801c078:	4658      	mov	r0, fp
 801c07a:	f000 fd8d 	bl	801cb98 <__multadd>
 801c07e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c080:	4681      	mov	r9, r0
 801c082:	2b00      	cmp	r3, #0
 801c084:	f000 8172 	beq.w	801c36c <_dtoa_r+0xb4c>
 801c088:	2300      	movs	r3, #0
 801c08a:	4629      	mov	r1, r5
 801c08c:	220a      	movs	r2, #10
 801c08e:	4658      	mov	r0, fp
 801c090:	f000 fd82 	bl	801cb98 <__multadd>
 801c094:	9b00      	ldr	r3, [sp, #0]
 801c096:	2b00      	cmp	r3, #0
 801c098:	4605      	mov	r5, r0
 801c09a:	dc67      	bgt.n	801c16c <_dtoa_r+0x94c>
 801c09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c09e:	2b02      	cmp	r3, #2
 801c0a0:	dc41      	bgt.n	801c126 <_dtoa_r+0x906>
 801c0a2:	e063      	b.n	801c16c <_dtoa_r+0x94c>
 801c0a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c0a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c0aa:	e746      	b.n	801bf3a <_dtoa_r+0x71a>
 801c0ac:	9b07      	ldr	r3, [sp, #28]
 801c0ae:	1e5c      	subs	r4, r3, #1
 801c0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c0b2:	42a3      	cmp	r3, r4
 801c0b4:	bfbf      	itttt	lt
 801c0b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801c0b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801c0ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801c0bc:	1ae3      	sublt	r3, r4, r3
 801c0be:	bfb4      	ite	lt
 801c0c0:	18d2      	addlt	r2, r2, r3
 801c0c2:	1b1c      	subge	r4, r3, r4
 801c0c4:	9b07      	ldr	r3, [sp, #28]
 801c0c6:	bfbc      	itt	lt
 801c0c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c0ca:	2400      	movlt	r4, #0
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	bfb5      	itete	lt
 801c0d0:	eba8 0603 	sublt.w	r6, r8, r3
 801c0d4:	9b07      	ldrge	r3, [sp, #28]
 801c0d6:	2300      	movlt	r3, #0
 801c0d8:	4646      	movge	r6, r8
 801c0da:	e730      	b.n	801bf3e <_dtoa_r+0x71e>
 801c0dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c0de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c0e0:	4646      	mov	r6, r8
 801c0e2:	e735      	b.n	801bf50 <_dtoa_r+0x730>
 801c0e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c0e6:	e75c      	b.n	801bfa2 <_dtoa_r+0x782>
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	e788      	b.n	801bffe <_dtoa_r+0x7de>
 801c0ec:	3fe00000 	.word	0x3fe00000
 801c0f0:	40240000 	.word	0x40240000
 801c0f4:	40140000 	.word	0x40140000
 801c0f8:	9b02      	ldr	r3, [sp, #8]
 801c0fa:	e780      	b.n	801bffe <_dtoa_r+0x7de>
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 801c100:	e782      	b.n	801c008 <_dtoa_r+0x7e8>
 801c102:	d099      	beq.n	801c038 <_dtoa_r+0x818>
 801c104:	9a08      	ldr	r2, [sp, #32]
 801c106:	331c      	adds	r3, #28
 801c108:	441a      	add	r2, r3
 801c10a:	4498      	add	r8, r3
 801c10c:	441e      	add	r6, r3
 801c10e:	9208      	str	r2, [sp, #32]
 801c110:	e792      	b.n	801c038 <_dtoa_r+0x818>
 801c112:	4603      	mov	r3, r0
 801c114:	e7f6      	b.n	801c104 <_dtoa_r+0x8e4>
 801c116:	9b07      	ldr	r3, [sp, #28]
 801c118:	9704      	str	r7, [sp, #16]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	dc20      	bgt.n	801c160 <_dtoa_r+0x940>
 801c11e:	9300      	str	r3, [sp, #0]
 801c120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c122:	2b02      	cmp	r3, #2
 801c124:	dd1e      	ble.n	801c164 <_dtoa_r+0x944>
 801c126:	9b00      	ldr	r3, [sp, #0]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	f47f aec0 	bne.w	801beae <_dtoa_r+0x68e>
 801c12e:	4621      	mov	r1, r4
 801c130:	2205      	movs	r2, #5
 801c132:	4658      	mov	r0, fp
 801c134:	f000 fd30 	bl	801cb98 <__multadd>
 801c138:	4601      	mov	r1, r0
 801c13a:	4604      	mov	r4, r0
 801c13c:	4648      	mov	r0, r9
 801c13e:	f000 ff8d 	bl	801d05c <__mcmp>
 801c142:	2800      	cmp	r0, #0
 801c144:	f77f aeb3 	ble.w	801beae <_dtoa_r+0x68e>
 801c148:	4656      	mov	r6, sl
 801c14a:	2331      	movs	r3, #49	@ 0x31
 801c14c:	f806 3b01 	strb.w	r3, [r6], #1
 801c150:	9b04      	ldr	r3, [sp, #16]
 801c152:	3301      	adds	r3, #1
 801c154:	9304      	str	r3, [sp, #16]
 801c156:	e6ae      	b.n	801beb6 <_dtoa_r+0x696>
 801c158:	9c07      	ldr	r4, [sp, #28]
 801c15a:	9704      	str	r7, [sp, #16]
 801c15c:	4625      	mov	r5, r4
 801c15e:	e7f3      	b.n	801c148 <_dtoa_r+0x928>
 801c160:	9b07      	ldr	r3, [sp, #28]
 801c162:	9300      	str	r3, [sp, #0]
 801c164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c166:	2b00      	cmp	r3, #0
 801c168:	f000 8104 	beq.w	801c374 <_dtoa_r+0xb54>
 801c16c:	2e00      	cmp	r6, #0
 801c16e:	dd05      	ble.n	801c17c <_dtoa_r+0x95c>
 801c170:	4629      	mov	r1, r5
 801c172:	4632      	mov	r2, r6
 801c174:	4658      	mov	r0, fp
 801c176:	f000 ff05 	bl	801cf84 <__lshift>
 801c17a:	4605      	mov	r5, r0
 801c17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d05a      	beq.n	801c238 <_dtoa_r+0xa18>
 801c182:	6869      	ldr	r1, [r5, #4]
 801c184:	4658      	mov	r0, fp
 801c186:	f000 fca5 	bl	801cad4 <_Balloc>
 801c18a:	4606      	mov	r6, r0
 801c18c:	b928      	cbnz	r0, 801c19a <_dtoa_r+0x97a>
 801c18e:	4b84      	ldr	r3, [pc, #528]	@ (801c3a0 <_dtoa_r+0xb80>)
 801c190:	4602      	mov	r2, r0
 801c192:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c196:	f7ff bb5a 	b.w	801b84e <_dtoa_r+0x2e>
 801c19a:	692a      	ldr	r2, [r5, #16]
 801c19c:	3202      	adds	r2, #2
 801c19e:	0092      	lsls	r2, r2, #2
 801c1a0:	f105 010c 	add.w	r1, r5, #12
 801c1a4:	300c      	adds	r0, #12
 801c1a6:	f7ff fa78 	bl	801b69a <memcpy>
 801c1aa:	2201      	movs	r2, #1
 801c1ac:	4631      	mov	r1, r6
 801c1ae:	4658      	mov	r0, fp
 801c1b0:	f000 fee8 	bl	801cf84 <__lshift>
 801c1b4:	f10a 0301 	add.w	r3, sl, #1
 801c1b8:	9307      	str	r3, [sp, #28]
 801c1ba:	9b00      	ldr	r3, [sp, #0]
 801c1bc:	4453      	add	r3, sl
 801c1be:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c1c0:	9b02      	ldr	r3, [sp, #8]
 801c1c2:	f003 0301 	and.w	r3, r3, #1
 801c1c6:	462f      	mov	r7, r5
 801c1c8:	930a      	str	r3, [sp, #40]	@ 0x28
 801c1ca:	4605      	mov	r5, r0
 801c1cc:	9b07      	ldr	r3, [sp, #28]
 801c1ce:	4621      	mov	r1, r4
 801c1d0:	3b01      	subs	r3, #1
 801c1d2:	4648      	mov	r0, r9
 801c1d4:	9300      	str	r3, [sp, #0]
 801c1d6:	f7ff fa9b 	bl	801b710 <quorem>
 801c1da:	4639      	mov	r1, r7
 801c1dc:	9002      	str	r0, [sp, #8]
 801c1de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c1e2:	4648      	mov	r0, r9
 801c1e4:	f000 ff3a 	bl	801d05c <__mcmp>
 801c1e8:	462a      	mov	r2, r5
 801c1ea:	9008      	str	r0, [sp, #32]
 801c1ec:	4621      	mov	r1, r4
 801c1ee:	4658      	mov	r0, fp
 801c1f0:	f000 ff50 	bl	801d094 <__mdiff>
 801c1f4:	68c2      	ldr	r2, [r0, #12]
 801c1f6:	4606      	mov	r6, r0
 801c1f8:	bb02      	cbnz	r2, 801c23c <_dtoa_r+0xa1c>
 801c1fa:	4601      	mov	r1, r0
 801c1fc:	4648      	mov	r0, r9
 801c1fe:	f000 ff2d 	bl	801d05c <__mcmp>
 801c202:	4602      	mov	r2, r0
 801c204:	4631      	mov	r1, r6
 801c206:	4658      	mov	r0, fp
 801c208:	920e      	str	r2, [sp, #56]	@ 0x38
 801c20a:	f000 fca3 	bl	801cb54 <_Bfree>
 801c20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c212:	9e07      	ldr	r6, [sp, #28]
 801c214:	ea43 0102 	orr.w	r1, r3, r2
 801c218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c21a:	4319      	orrs	r1, r3
 801c21c:	d110      	bne.n	801c240 <_dtoa_r+0xa20>
 801c21e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c222:	d029      	beq.n	801c278 <_dtoa_r+0xa58>
 801c224:	9b08      	ldr	r3, [sp, #32]
 801c226:	2b00      	cmp	r3, #0
 801c228:	dd02      	ble.n	801c230 <_dtoa_r+0xa10>
 801c22a:	9b02      	ldr	r3, [sp, #8]
 801c22c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c230:	9b00      	ldr	r3, [sp, #0]
 801c232:	f883 8000 	strb.w	r8, [r3]
 801c236:	e63f      	b.n	801beb8 <_dtoa_r+0x698>
 801c238:	4628      	mov	r0, r5
 801c23a:	e7bb      	b.n	801c1b4 <_dtoa_r+0x994>
 801c23c:	2201      	movs	r2, #1
 801c23e:	e7e1      	b.n	801c204 <_dtoa_r+0x9e4>
 801c240:	9b08      	ldr	r3, [sp, #32]
 801c242:	2b00      	cmp	r3, #0
 801c244:	db04      	blt.n	801c250 <_dtoa_r+0xa30>
 801c246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c248:	430b      	orrs	r3, r1
 801c24a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c24c:	430b      	orrs	r3, r1
 801c24e:	d120      	bne.n	801c292 <_dtoa_r+0xa72>
 801c250:	2a00      	cmp	r2, #0
 801c252:	dded      	ble.n	801c230 <_dtoa_r+0xa10>
 801c254:	4649      	mov	r1, r9
 801c256:	2201      	movs	r2, #1
 801c258:	4658      	mov	r0, fp
 801c25a:	f000 fe93 	bl	801cf84 <__lshift>
 801c25e:	4621      	mov	r1, r4
 801c260:	4681      	mov	r9, r0
 801c262:	f000 fefb 	bl	801d05c <__mcmp>
 801c266:	2800      	cmp	r0, #0
 801c268:	dc03      	bgt.n	801c272 <_dtoa_r+0xa52>
 801c26a:	d1e1      	bne.n	801c230 <_dtoa_r+0xa10>
 801c26c:	f018 0f01 	tst.w	r8, #1
 801c270:	d0de      	beq.n	801c230 <_dtoa_r+0xa10>
 801c272:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c276:	d1d8      	bne.n	801c22a <_dtoa_r+0xa0a>
 801c278:	9a00      	ldr	r2, [sp, #0]
 801c27a:	2339      	movs	r3, #57	@ 0x39
 801c27c:	7013      	strb	r3, [r2, #0]
 801c27e:	4633      	mov	r3, r6
 801c280:	461e      	mov	r6, r3
 801c282:	3b01      	subs	r3, #1
 801c284:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c288:	2a39      	cmp	r2, #57	@ 0x39
 801c28a:	d052      	beq.n	801c332 <_dtoa_r+0xb12>
 801c28c:	3201      	adds	r2, #1
 801c28e:	701a      	strb	r2, [r3, #0]
 801c290:	e612      	b.n	801beb8 <_dtoa_r+0x698>
 801c292:	2a00      	cmp	r2, #0
 801c294:	dd07      	ble.n	801c2a6 <_dtoa_r+0xa86>
 801c296:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c29a:	d0ed      	beq.n	801c278 <_dtoa_r+0xa58>
 801c29c:	9a00      	ldr	r2, [sp, #0]
 801c29e:	f108 0301 	add.w	r3, r8, #1
 801c2a2:	7013      	strb	r3, [r2, #0]
 801c2a4:	e608      	b.n	801beb8 <_dtoa_r+0x698>
 801c2a6:	9b07      	ldr	r3, [sp, #28]
 801c2a8:	9a07      	ldr	r2, [sp, #28]
 801c2aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c2ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c2b0:	4293      	cmp	r3, r2
 801c2b2:	d028      	beq.n	801c306 <_dtoa_r+0xae6>
 801c2b4:	4649      	mov	r1, r9
 801c2b6:	2300      	movs	r3, #0
 801c2b8:	220a      	movs	r2, #10
 801c2ba:	4658      	mov	r0, fp
 801c2bc:	f000 fc6c 	bl	801cb98 <__multadd>
 801c2c0:	42af      	cmp	r7, r5
 801c2c2:	4681      	mov	r9, r0
 801c2c4:	f04f 0300 	mov.w	r3, #0
 801c2c8:	f04f 020a 	mov.w	r2, #10
 801c2cc:	4639      	mov	r1, r7
 801c2ce:	4658      	mov	r0, fp
 801c2d0:	d107      	bne.n	801c2e2 <_dtoa_r+0xac2>
 801c2d2:	f000 fc61 	bl	801cb98 <__multadd>
 801c2d6:	4607      	mov	r7, r0
 801c2d8:	4605      	mov	r5, r0
 801c2da:	9b07      	ldr	r3, [sp, #28]
 801c2dc:	3301      	adds	r3, #1
 801c2de:	9307      	str	r3, [sp, #28]
 801c2e0:	e774      	b.n	801c1cc <_dtoa_r+0x9ac>
 801c2e2:	f000 fc59 	bl	801cb98 <__multadd>
 801c2e6:	4629      	mov	r1, r5
 801c2e8:	4607      	mov	r7, r0
 801c2ea:	2300      	movs	r3, #0
 801c2ec:	220a      	movs	r2, #10
 801c2ee:	4658      	mov	r0, fp
 801c2f0:	f000 fc52 	bl	801cb98 <__multadd>
 801c2f4:	4605      	mov	r5, r0
 801c2f6:	e7f0      	b.n	801c2da <_dtoa_r+0xaba>
 801c2f8:	9b00      	ldr	r3, [sp, #0]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	bfcc      	ite	gt
 801c2fe:	461e      	movgt	r6, r3
 801c300:	2601      	movle	r6, #1
 801c302:	4456      	add	r6, sl
 801c304:	2700      	movs	r7, #0
 801c306:	4649      	mov	r1, r9
 801c308:	2201      	movs	r2, #1
 801c30a:	4658      	mov	r0, fp
 801c30c:	f000 fe3a 	bl	801cf84 <__lshift>
 801c310:	4621      	mov	r1, r4
 801c312:	4681      	mov	r9, r0
 801c314:	f000 fea2 	bl	801d05c <__mcmp>
 801c318:	2800      	cmp	r0, #0
 801c31a:	dcb0      	bgt.n	801c27e <_dtoa_r+0xa5e>
 801c31c:	d102      	bne.n	801c324 <_dtoa_r+0xb04>
 801c31e:	f018 0f01 	tst.w	r8, #1
 801c322:	d1ac      	bne.n	801c27e <_dtoa_r+0xa5e>
 801c324:	4633      	mov	r3, r6
 801c326:	461e      	mov	r6, r3
 801c328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c32c:	2a30      	cmp	r2, #48	@ 0x30
 801c32e:	d0fa      	beq.n	801c326 <_dtoa_r+0xb06>
 801c330:	e5c2      	b.n	801beb8 <_dtoa_r+0x698>
 801c332:	459a      	cmp	sl, r3
 801c334:	d1a4      	bne.n	801c280 <_dtoa_r+0xa60>
 801c336:	9b04      	ldr	r3, [sp, #16]
 801c338:	3301      	adds	r3, #1
 801c33a:	9304      	str	r3, [sp, #16]
 801c33c:	2331      	movs	r3, #49	@ 0x31
 801c33e:	f88a 3000 	strb.w	r3, [sl]
 801c342:	e5b9      	b.n	801beb8 <_dtoa_r+0x698>
 801c344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c346:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c3a4 <_dtoa_r+0xb84>
 801c34a:	b11b      	cbz	r3, 801c354 <_dtoa_r+0xb34>
 801c34c:	f10a 0308 	add.w	r3, sl, #8
 801c350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c352:	6013      	str	r3, [r2, #0]
 801c354:	4650      	mov	r0, sl
 801c356:	b019      	add	sp, #100	@ 0x64
 801c358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c35e:	2b01      	cmp	r3, #1
 801c360:	f77f ae37 	ble.w	801bfd2 <_dtoa_r+0x7b2>
 801c364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c366:	930a      	str	r3, [sp, #40]	@ 0x28
 801c368:	2001      	movs	r0, #1
 801c36a:	e655      	b.n	801c018 <_dtoa_r+0x7f8>
 801c36c:	9b00      	ldr	r3, [sp, #0]
 801c36e:	2b00      	cmp	r3, #0
 801c370:	f77f aed6 	ble.w	801c120 <_dtoa_r+0x900>
 801c374:	4656      	mov	r6, sl
 801c376:	4621      	mov	r1, r4
 801c378:	4648      	mov	r0, r9
 801c37a:	f7ff f9c9 	bl	801b710 <quorem>
 801c37e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c382:	f806 8b01 	strb.w	r8, [r6], #1
 801c386:	9b00      	ldr	r3, [sp, #0]
 801c388:	eba6 020a 	sub.w	r2, r6, sl
 801c38c:	4293      	cmp	r3, r2
 801c38e:	ddb3      	ble.n	801c2f8 <_dtoa_r+0xad8>
 801c390:	4649      	mov	r1, r9
 801c392:	2300      	movs	r3, #0
 801c394:	220a      	movs	r2, #10
 801c396:	4658      	mov	r0, fp
 801c398:	f000 fbfe 	bl	801cb98 <__multadd>
 801c39c:	4681      	mov	r9, r0
 801c39e:	e7ea      	b.n	801c376 <_dtoa_r+0xb56>
 801c3a0:	08021dbc 	.word	0x08021dbc
 801c3a4:	08021d57 	.word	0x08021d57

0801c3a8 <_free_r>:
 801c3a8:	b538      	push	{r3, r4, r5, lr}
 801c3aa:	4605      	mov	r5, r0
 801c3ac:	2900      	cmp	r1, #0
 801c3ae:	d041      	beq.n	801c434 <_free_r+0x8c>
 801c3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c3b4:	1f0c      	subs	r4, r1, #4
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	bfb8      	it	lt
 801c3ba:	18e4      	addlt	r4, r4, r3
 801c3bc:	f7fd f98c 	bl	80196d8 <__malloc_lock>
 801c3c0:	4a1d      	ldr	r2, [pc, #116]	@ (801c438 <_free_r+0x90>)
 801c3c2:	6813      	ldr	r3, [r2, #0]
 801c3c4:	b933      	cbnz	r3, 801c3d4 <_free_r+0x2c>
 801c3c6:	6063      	str	r3, [r4, #4]
 801c3c8:	6014      	str	r4, [r2, #0]
 801c3ca:	4628      	mov	r0, r5
 801c3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c3d0:	f7fd b988 	b.w	80196e4 <__malloc_unlock>
 801c3d4:	42a3      	cmp	r3, r4
 801c3d6:	d908      	bls.n	801c3ea <_free_r+0x42>
 801c3d8:	6820      	ldr	r0, [r4, #0]
 801c3da:	1821      	adds	r1, r4, r0
 801c3dc:	428b      	cmp	r3, r1
 801c3de:	bf01      	itttt	eq
 801c3e0:	6819      	ldreq	r1, [r3, #0]
 801c3e2:	685b      	ldreq	r3, [r3, #4]
 801c3e4:	1809      	addeq	r1, r1, r0
 801c3e6:	6021      	streq	r1, [r4, #0]
 801c3e8:	e7ed      	b.n	801c3c6 <_free_r+0x1e>
 801c3ea:	461a      	mov	r2, r3
 801c3ec:	685b      	ldr	r3, [r3, #4]
 801c3ee:	b10b      	cbz	r3, 801c3f4 <_free_r+0x4c>
 801c3f0:	42a3      	cmp	r3, r4
 801c3f2:	d9fa      	bls.n	801c3ea <_free_r+0x42>
 801c3f4:	6811      	ldr	r1, [r2, #0]
 801c3f6:	1850      	adds	r0, r2, r1
 801c3f8:	42a0      	cmp	r0, r4
 801c3fa:	d10b      	bne.n	801c414 <_free_r+0x6c>
 801c3fc:	6820      	ldr	r0, [r4, #0]
 801c3fe:	4401      	add	r1, r0
 801c400:	1850      	adds	r0, r2, r1
 801c402:	4283      	cmp	r3, r0
 801c404:	6011      	str	r1, [r2, #0]
 801c406:	d1e0      	bne.n	801c3ca <_free_r+0x22>
 801c408:	6818      	ldr	r0, [r3, #0]
 801c40a:	685b      	ldr	r3, [r3, #4]
 801c40c:	6053      	str	r3, [r2, #4]
 801c40e:	4408      	add	r0, r1
 801c410:	6010      	str	r0, [r2, #0]
 801c412:	e7da      	b.n	801c3ca <_free_r+0x22>
 801c414:	d902      	bls.n	801c41c <_free_r+0x74>
 801c416:	230c      	movs	r3, #12
 801c418:	602b      	str	r3, [r5, #0]
 801c41a:	e7d6      	b.n	801c3ca <_free_r+0x22>
 801c41c:	6820      	ldr	r0, [r4, #0]
 801c41e:	1821      	adds	r1, r4, r0
 801c420:	428b      	cmp	r3, r1
 801c422:	bf04      	itt	eq
 801c424:	6819      	ldreq	r1, [r3, #0]
 801c426:	685b      	ldreq	r3, [r3, #4]
 801c428:	6063      	str	r3, [r4, #4]
 801c42a:	bf04      	itt	eq
 801c42c:	1809      	addeq	r1, r1, r0
 801c42e:	6021      	streq	r1, [r4, #0]
 801c430:	6054      	str	r4, [r2, #4]
 801c432:	e7ca      	b.n	801c3ca <_free_r+0x22>
 801c434:	bd38      	pop	{r3, r4, r5, pc}
 801c436:	bf00      	nop
 801c438:	2000326c 	.word	0x2000326c

0801c43c <rshift>:
 801c43c:	6903      	ldr	r3, [r0, #16]
 801c43e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c446:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c44a:	f100 0414 	add.w	r4, r0, #20
 801c44e:	dd45      	ble.n	801c4dc <rshift+0xa0>
 801c450:	f011 011f 	ands.w	r1, r1, #31
 801c454:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c458:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c45c:	d10c      	bne.n	801c478 <rshift+0x3c>
 801c45e:	f100 0710 	add.w	r7, r0, #16
 801c462:	4629      	mov	r1, r5
 801c464:	42b1      	cmp	r1, r6
 801c466:	d334      	bcc.n	801c4d2 <rshift+0x96>
 801c468:	1a9b      	subs	r3, r3, r2
 801c46a:	009b      	lsls	r3, r3, #2
 801c46c:	1eea      	subs	r2, r5, #3
 801c46e:	4296      	cmp	r6, r2
 801c470:	bf38      	it	cc
 801c472:	2300      	movcc	r3, #0
 801c474:	4423      	add	r3, r4
 801c476:	e015      	b.n	801c4a4 <rshift+0x68>
 801c478:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c47c:	f1c1 0820 	rsb	r8, r1, #32
 801c480:	40cf      	lsrs	r7, r1
 801c482:	f105 0e04 	add.w	lr, r5, #4
 801c486:	46a1      	mov	r9, r4
 801c488:	4576      	cmp	r6, lr
 801c48a:	46f4      	mov	ip, lr
 801c48c:	d815      	bhi.n	801c4ba <rshift+0x7e>
 801c48e:	1a9a      	subs	r2, r3, r2
 801c490:	0092      	lsls	r2, r2, #2
 801c492:	3a04      	subs	r2, #4
 801c494:	3501      	adds	r5, #1
 801c496:	42ae      	cmp	r6, r5
 801c498:	bf38      	it	cc
 801c49a:	2200      	movcc	r2, #0
 801c49c:	18a3      	adds	r3, r4, r2
 801c49e:	50a7      	str	r7, [r4, r2]
 801c4a0:	b107      	cbz	r7, 801c4a4 <rshift+0x68>
 801c4a2:	3304      	adds	r3, #4
 801c4a4:	1b1a      	subs	r2, r3, r4
 801c4a6:	42a3      	cmp	r3, r4
 801c4a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c4ac:	bf08      	it	eq
 801c4ae:	2300      	moveq	r3, #0
 801c4b0:	6102      	str	r2, [r0, #16]
 801c4b2:	bf08      	it	eq
 801c4b4:	6143      	streq	r3, [r0, #20]
 801c4b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c4ba:	f8dc c000 	ldr.w	ip, [ip]
 801c4be:	fa0c fc08 	lsl.w	ip, ip, r8
 801c4c2:	ea4c 0707 	orr.w	r7, ip, r7
 801c4c6:	f849 7b04 	str.w	r7, [r9], #4
 801c4ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c4ce:	40cf      	lsrs	r7, r1
 801c4d0:	e7da      	b.n	801c488 <rshift+0x4c>
 801c4d2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c4d6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c4da:	e7c3      	b.n	801c464 <rshift+0x28>
 801c4dc:	4623      	mov	r3, r4
 801c4de:	e7e1      	b.n	801c4a4 <rshift+0x68>

0801c4e0 <__hexdig_fun>:
 801c4e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c4e4:	2b09      	cmp	r3, #9
 801c4e6:	d802      	bhi.n	801c4ee <__hexdig_fun+0xe>
 801c4e8:	3820      	subs	r0, #32
 801c4ea:	b2c0      	uxtb	r0, r0
 801c4ec:	4770      	bx	lr
 801c4ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c4f2:	2b05      	cmp	r3, #5
 801c4f4:	d801      	bhi.n	801c4fa <__hexdig_fun+0x1a>
 801c4f6:	3847      	subs	r0, #71	@ 0x47
 801c4f8:	e7f7      	b.n	801c4ea <__hexdig_fun+0xa>
 801c4fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c4fe:	2b05      	cmp	r3, #5
 801c500:	d801      	bhi.n	801c506 <__hexdig_fun+0x26>
 801c502:	3827      	subs	r0, #39	@ 0x27
 801c504:	e7f1      	b.n	801c4ea <__hexdig_fun+0xa>
 801c506:	2000      	movs	r0, #0
 801c508:	4770      	bx	lr
	...

0801c50c <__gethex>:
 801c50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c510:	b085      	sub	sp, #20
 801c512:	468a      	mov	sl, r1
 801c514:	9302      	str	r3, [sp, #8]
 801c516:	680b      	ldr	r3, [r1, #0]
 801c518:	9001      	str	r0, [sp, #4]
 801c51a:	4690      	mov	r8, r2
 801c51c:	1c9c      	adds	r4, r3, #2
 801c51e:	46a1      	mov	r9, r4
 801c520:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c524:	2830      	cmp	r0, #48	@ 0x30
 801c526:	d0fa      	beq.n	801c51e <__gethex+0x12>
 801c528:	eba9 0303 	sub.w	r3, r9, r3
 801c52c:	f1a3 0b02 	sub.w	fp, r3, #2
 801c530:	f7ff ffd6 	bl	801c4e0 <__hexdig_fun>
 801c534:	4605      	mov	r5, r0
 801c536:	2800      	cmp	r0, #0
 801c538:	d168      	bne.n	801c60c <__gethex+0x100>
 801c53a:	49a0      	ldr	r1, [pc, #640]	@ (801c7bc <__gethex+0x2b0>)
 801c53c:	2201      	movs	r2, #1
 801c53e:	4648      	mov	r0, r9
 801c540:	f7fe ff97 	bl	801b472 <strncmp>
 801c544:	4607      	mov	r7, r0
 801c546:	2800      	cmp	r0, #0
 801c548:	d167      	bne.n	801c61a <__gethex+0x10e>
 801c54a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c54e:	4626      	mov	r6, r4
 801c550:	f7ff ffc6 	bl	801c4e0 <__hexdig_fun>
 801c554:	2800      	cmp	r0, #0
 801c556:	d062      	beq.n	801c61e <__gethex+0x112>
 801c558:	4623      	mov	r3, r4
 801c55a:	7818      	ldrb	r0, [r3, #0]
 801c55c:	2830      	cmp	r0, #48	@ 0x30
 801c55e:	4699      	mov	r9, r3
 801c560:	f103 0301 	add.w	r3, r3, #1
 801c564:	d0f9      	beq.n	801c55a <__gethex+0x4e>
 801c566:	f7ff ffbb 	bl	801c4e0 <__hexdig_fun>
 801c56a:	fab0 f580 	clz	r5, r0
 801c56e:	096d      	lsrs	r5, r5, #5
 801c570:	f04f 0b01 	mov.w	fp, #1
 801c574:	464a      	mov	r2, r9
 801c576:	4616      	mov	r6, r2
 801c578:	3201      	adds	r2, #1
 801c57a:	7830      	ldrb	r0, [r6, #0]
 801c57c:	f7ff ffb0 	bl	801c4e0 <__hexdig_fun>
 801c580:	2800      	cmp	r0, #0
 801c582:	d1f8      	bne.n	801c576 <__gethex+0x6a>
 801c584:	498d      	ldr	r1, [pc, #564]	@ (801c7bc <__gethex+0x2b0>)
 801c586:	2201      	movs	r2, #1
 801c588:	4630      	mov	r0, r6
 801c58a:	f7fe ff72 	bl	801b472 <strncmp>
 801c58e:	2800      	cmp	r0, #0
 801c590:	d13f      	bne.n	801c612 <__gethex+0x106>
 801c592:	b944      	cbnz	r4, 801c5a6 <__gethex+0x9a>
 801c594:	1c74      	adds	r4, r6, #1
 801c596:	4622      	mov	r2, r4
 801c598:	4616      	mov	r6, r2
 801c59a:	3201      	adds	r2, #1
 801c59c:	7830      	ldrb	r0, [r6, #0]
 801c59e:	f7ff ff9f 	bl	801c4e0 <__hexdig_fun>
 801c5a2:	2800      	cmp	r0, #0
 801c5a4:	d1f8      	bne.n	801c598 <__gethex+0x8c>
 801c5a6:	1ba4      	subs	r4, r4, r6
 801c5a8:	00a7      	lsls	r7, r4, #2
 801c5aa:	7833      	ldrb	r3, [r6, #0]
 801c5ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c5b0:	2b50      	cmp	r3, #80	@ 0x50
 801c5b2:	d13e      	bne.n	801c632 <__gethex+0x126>
 801c5b4:	7873      	ldrb	r3, [r6, #1]
 801c5b6:	2b2b      	cmp	r3, #43	@ 0x2b
 801c5b8:	d033      	beq.n	801c622 <__gethex+0x116>
 801c5ba:	2b2d      	cmp	r3, #45	@ 0x2d
 801c5bc:	d034      	beq.n	801c628 <__gethex+0x11c>
 801c5be:	1c71      	adds	r1, r6, #1
 801c5c0:	2400      	movs	r4, #0
 801c5c2:	7808      	ldrb	r0, [r1, #0]
 801c5c4:	f7ff ff8c 	bl	801c4e0 <__hexdig_fun>
 801c5c8:	1e43      	subs	r3, r0, #1
 801c5ca:	b2db      	uxtb	r3, r3
 801c5cc:	2b18      	cmp	r3, #24
 801c5ce:	d830      	bhi.n	801c632 <__gethex+0x126>
 801c5d0:	f1a0 0210 	sub.w	r2, r0, #16
 801c5d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c5d8:	f7ff ff82 	bl	801c4e0 <__hexdig_fun>
 801c5dc:	f100 3cff 	add.w	ip, r0, #4294967295
 801c5e0:	fa5f fc8c 	uxtb.w	ip, ip
 801c5e4:	f1bc 0f18 	cmp.w	ip, #24
 801c5e8:	f04f 030a 	mov.w	r3, #10
 801c5ec:	d91e      	bls.n	801c62c <__gethex+0x120>
 801c5ee:	b104      	cbz	r4, 801c5f2 <__gethex+0xe6>
 801c5f0:	4252      	negs	r2, r2
 801c5f2:	4417      	add	r7, r2
 801c5f4:	f8ca 1000 	str.w	r1, [sl]
 801c5f8:	b1ed      	cbz	r5, 801c636 <__gethex+0x12a>
 801c5fa:	f1bb 0f00 	cmp.w	fp, #0
 801c5fe:	bf0c      	ite	eq
 801c600:	2506      	moveq	r5, #6
 801c602:	2500      	movne	r5, #0
 801c604:	4628      	mov	r0, r5
 801c606:	b005      	add	sp, #20
 801c608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c60c:	2500      	movs	r5, #0
 801c60e:	462c      	mov	r4, r5
 801c610:	e7b0      	b.n	801c574 <__gethex+0x68>
 801c612:	2c00      	cmp	r4, #0
 801c614:	d1c7      	bne.n	801c5a6 <__gethex+0x9a>
 801c616:	4627      	mov	r7, r4
 801c618:	e7c7      	b.n	801c5aa <__gethex+0x9e>
 801c61a:	464e      	mov	r6, r9
 801c61c:	462f      	mov	r7, r5
 801c61e:	2501      	movs	r5, #1
 801c620:	e7c3      	b.n	801c5aa <__gethex+0x9e>
 801c622:	2400      	movs	r4, #0
 801c624:	1cb1      	adds	r1, r6, #2
 801c626:	e7cc      	b.n	801c5c2 <__gethex+0xb6>
 801c628:	2401      	movs	r4, #1
 801c62a:	e7fb      	b.n	801c624 <__gethex+0x118>
 801c62c:	fb03 0002 	mla	r0, r3, r2, r0
 801c630:	e7ce      	b.n	801c5d0 <__gethex+0xc4>
 801c632:	4631      	mov	r1, r6
 801c634:	e7de      	b.n	801c5f4 <__gethex+0xe8>
 801c636:	eba6 0309 	sub.w	r3, r6, r9
 801c63a:	3b01      	subs	r3, #1
 801c63c:	4629      	mov	r1, r5
 801c63e:	2b07      	cmp	r3, #7
 801c640:	dc0a      	bgt.n	801c658 <__gethex+0x14c>
 801c642:	9801      	ldr	r0, [sp, #4]
 801c644:	f000 fa46 	bl	801cad4 <_Balloc>
 801c648:	4604      	mov	r4, r0
 801c64a:	b940      	cbnz	r0, 801c65e <__gethex+0x152>
 801c64c:	4b5c      	ldr	r3, [pc, #368]	@ (801c7c0 <__gethex+0x2b4>)
 801c64e:	4602      	mov	r2, r0
 801c650:	21e4      	movs	r1, #228	@ 0xe4
 801c652:	485c      	ldr	r0, [pc, #368]	@ (801c7c4 <__gethex+0x2b8>)
 801c654:	f7ff f83e 	bl	801b6d4 <__assert_func>
 801c658:	3101      	adds	r1, #1
 801c65a:	105b      	asrs	r3, r3, #1
 801c65c:	e7ef      	b.n	801c63e <__gethex+0x132>
 801c65e:	f100 0a14 	add.w	sl, r0, #20
 801c662:	2300      	movs	r3, #0
 801c664:	4655      	mov	r5, sl
 801c666:	469b      	mov	fp, r3
 801c668:	45b1      	cmp	r9, r6
 801c66a:	d337      	bcc.n	801c6dc <__gethex+0x1d0>
 801c66c:	f845 bb04 	str.w	fp, [r5], #4
 801c670:	eba5 050a 	sub.w	r5, r5, sl
 801c674:	10ad      	asrs	r5, r5, #2
 801c676:	6125      	str	r5, [r4, #16]
 801c678:	4658      	mov	r0, fp
 801c67a:	f000 fb1d 	bl	801ccb8 <__hi0bits>
 801c67e:	016d      	lsls	r5, r5, #5
 801c680:	f8d8 6000 	ldr.w	r6, [r8]
 801c684:	1a2d      	subs	r5, r5, r0
 801c686:	42b5      	cmp	r5, r6
 801c688:	dd54      	ble.n	801c734 <__gethex+0x228>
 801c68a:	1bad      	subs	r5, r5, r6
 801c68c:	4629      	mov	r1, r5
 801c68e:	4620      	mov	r0, r4
 801c690:	f000 feb1 	bl	801d3f6 <__any_on>
 801c694:	4681      	mov	r9, r0
 801c696:	b178      	cbz	r0, 801c6b8 <__gethex+0x1ac>
 801c698:	1e6b      	subs	r3, r5, #1
 801c69a:	1159      	asrs	r1, r3, #5
 801c69c:	f003 021f 	and.w	r2, r3, #31
 801c6a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c6a4:	f04f 0901 	mov.w	r9, #1
 801c6a8:	fa09 f202 	lsl.w	r2, r9, r2
 801c6ac:	420a      	tst	r2, r1
 801c6ae:	d003      	beq.n	801c6b8 <__gethex+0x1ac>
 801c6b0:	454b      	cmp	r3, r9
 801c6b2:	dc36      	bgt.n	801c722 <__gethex+0x216>
 801c6b4:	f04f 0902 	mov.w	r9, #2
 801c6b8:	4629      	mov	r1, r5
 801c6ba:	4620      	mov	r0, r4
 801c6bc:	f7ff febe 	bl	801c43c <rshift>
 801c6c0:	442f      	add	r7, r5
 801c6c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c6c6:	42bb      	cmp	r3, r7
 801c6c8:	da42      	bge.n	801c750 <__gethex+0x244>
 801c6ca:	9801      	ldr	r0, [sp, #4]
 801c6cc:	4621      	mov	r1, r4
 801c6ce:	f000 fa41 	bl	801cb54 <_Bfree>
 801c6d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	6013      	str	r3, [r2, #0]
 801c6d8:	25a3      	movs	r5, #163	@ 0xa3
 801c6da:	e793      	b.n	801c604 <__gethex+0xf8>
 801c6dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801c6e0:	2a2e      	cmp	r2, #46	@ 0x2e
 801c6e2:	d012      	beq.n	801c70a <__gethex+0x1fe>
 801c6e4:	2b20      	cmp	r3, #32
 801c6e6:	d104      	bne.n	801c6f2 <__gethex+0x1e6>
 801c6e8:	f845 bb04 	str.w	fp, [r5], #4
 801c6ec:	f04f 0b00 	mov.w	fp, #0
 801c6f0:	465b      	mov	r3, fp
 801c6f2:	7830      	ldrb	r0, [r6, #0]
 801c6f4:	9303      	str	r3, [sp, #12]
 801c6f6:	f7ff fef3 	bl	801c4e0 <__hexdig_fun>
 801c6fa:	9b03      	ldr	r3, [sp, #12]
 801c6fc:	f000 000f 	and.w	r0, r0, #15
 801c700:	4098      	lsls	r0, r3
 801c702:	ea4b 0b00 	orr.w	fp, fp, r0
 801c706:	3304      	adds	r3, #4
 801c708:	e7ae      	b.n	801c668 <__gethex+0x15c>
 801c70a:	45b1      	cmp	r9, r6
 801c70c:	d8ea      	bhi.n	801c6e4 <__gethex+0x1d8>
 801c70e:	492b      	ldr	r1, [pc, #172]	@ (801c7bc <__gethex+0x2b0>)
 801c710:	9303      	str	r3, [sp, #12]
 801c712:	2201      	movs	r2, #1
 801c714:	4630      	mov	r0, r6
 801c716:	f7fe feac 	bl	801b472 <strncmp>
 801c71a:	9b03      	ldr	r3, [sp, #12]
 801c71c:	2800      	cmp	r0, #0
 801c71e:	d1e1      	bne.n	801c6e4 <__gethex+0x1d8>
 801c720:	e7a2      	b.n	801c668 <__gethex+0x15c>
 801c722:	1ea9      	subs	r1, r5, #2
 801c724:	4620      	mov	r0, r4
 801c726:	f000 fe66 	bl	801d3f6 <__any_on>
 801c72a:	2800      	cmp	r0, #0
 801c72c:	d0c2      	beq.n	801c6b4 <__gethex+0x1a8>
 801c72e:	f04f 0903 	mov.w	r9, #3
 801c732:	e7c1      	b.n	801c6b8 <__gethex+0x1ac>
 801c734:	da09      	bge.n	801c74a <__gethex+0x23e>
 801c736:	1b75      	subs	r5, r6, r5
 801c738:	4621      	mov	r1, r4
 801c73a:	9801      	ldr	r0, [sp, #4]
 801c73c:	462a      	mov	r2, r5
 801c73e:	f000 fc21 	bl	801cf84 <__lshift>
 801c742:	1b7f      	subs	r7, r7, r5
 801c744:	4604      	mov	r4, r0
 801c746:	f100 0a14 	add.w	sl, r0, #20
 801c74a:	f04f 0900 	mov.w	r9, #0
 801c74e:	e7b8      	b.n	801c6c2 <__gethex+0x1b6>
 801c750:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c754:	42bd      	cmp	r5, r7
 801c756:	dd6f      	ble.n	801c838 <__gethex+0x32c>
 801c758:	1bed      	subs	r5, r5, r7
 801c75a:	42ae      	cmp	r6, r5
 801c75c:	dc34      	bgt.n	801c7c8 <__gethex+0x2bc>
 801c75e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c762:	2b02      	cmp	r3, #2
 801c764:	d022      	beq.n	801c7ac <__gethex+0x2a0>
 801c766:	2b03      	cmp	r3, #3
 801c768:	d024      	beq.n	801c7b4 <__gethex+0x2a8>
 801c76a:	2b01      	cmp	r3, #1
 801c76c:	d115      	bne.n	801c79a <__gethex+0x28e>
 801c76e:	42ae      	cmp	r6, r5
 801c770:	d113      	bne.n	801c79a <__gethex+0x28e>
 801c772:	2e01      	cmp	r6, #1
 801c774:	d10b      	bne.n	801c78e <__gethex+0x282>
 801c776:	9a02      	ldr	r2, [sp, #8]
 801c778:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c77c:	6013      	str	r3, [r2, #0]
 801c77e:	2301      	movs	r3, #1
 801c780:	6123      	str	r3, [r4, #16]
 801c782:	f8ca 3000 	str.w	r3, [sl]
 801c786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c788:	2562      	movs	r5, #98	@ 0x62
 801c78a:	601c      	str	r4, [r3, #0]
 801c78c:	e73a      	b.n	801c604 <__gethex+0xf8>
 801c78e:	1e71      	subs	r1, r6, #1
 801c790:	4620      	mov	r0, r4
 801c792:	f000 fe30 	bl	801d3f6 <__any_on>
 801c796:	2800      	cmp	r0, #0
 801c798:	d1ed      	bne.n	801c776 <__gethex+0x26a>
 801c79a:	9801      	ldr	r0, [sp, #4]
 801c79c:	4621      	mov	r1, r4
 801c79e:	f000 f9d9 	bl	801cb54 <_Bfree>
 801c7a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c7a4:	2300      	movs	r3, #0
 801c7a6:	6013      	str	r3, [r2, #0]
 801c7a8:	2550      	movs	r5, #80	@ 0x50
 801c7aa:	e72b      	b.n	801c604 <__gethex+0xf8>
 801c7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d1f3      	bne.n	801c79a <__gethex+0x28e>
 801c7b2:	e7e0      	b.n	801c776 <__gethex+0x26a>
 801c7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d1dd      	bne.n	801c776 <__gethex+0x26a>
 801c7ba:	e7ee      	b.n	801c79a <__gethex+0x28e>
 801c7bc:	08021b14 	.word	0x08021b14
 801c7c0:	08021dbc 	.word	0x08021dbc
 801c7c4:	08021dcd 	.word	0x08021dcd
 801c7c8:	1e6f      	subs	r7, r5, #1
 801c7ca:	f1b9 0f00 	cmp.w	r9, #0
 801c7ce:	d130      	bne.n	801c832 <__gethex+0x326>
 801c7d0:	b127      	cbz	r7, 801c7dc <__gethex+0x2d0>
 801c7d2:	4639      	mov	r1, r7
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	f000 fe0e 	bl	801d3f6 <__any_on>
 801c7da:	4681      	mov	r9, r0
 801c7dc:	117a      	asrs	r2, r7, #5
 801c7de:	2301      	movs	r3, #1
 801c7e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c7e4:	f007 071f 	and.w	r7, r7, #31
 801c7e8:	40bb      	lsls	r3, r7
 801c7ea:	4213      	tst	r3, r2
 801c7ec:	4629      	mov	r1, r5
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	bf18      	it	ne
 801c7f2:	f049 0902 	orrne.w	r9, r9, #2
 801c7f6:	f7ff fe21 	bl	801c43c <rshift>
 801c7fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801c7fe:	1b76      	subs	r6, r6, r5
 801c800:	2502      	movs	r5, #2
 801c802:	f1b9 0f00 	cmp.w	r9, #0
 801c806:	d047      	beq.n	801c898 <__gethex+0x38c>
 801c808:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c80c:	2b02      	cmp	r3, #2
 801c80e:	d015      	beq.n	801c83c <__gethex+0x330>
 801c810:	2b03      	cmp	r3, #3
 801c812:	d017      	beq.n	801c844 <__gethex+0x338>
 801c814:	2b01      	cmp	r3, #1
 801c816:	d109      	bne.n	801c82c <__gethex+0x320>
 801c818:	f019 0f02 	tst.w	r9, #2
 801c81c:	d006      	beq.n	801c82c <__gethex+0x320>
 801c81e:	f8da 3000 	ldr.w	r3, [sl]
 801c822:	ea49 0903 	orr.w	r9, r9, r3
 801c826:	f019 0f01 	tst.w	r9, #1
 801c82a:	d10e      	bne.n	801c84a <__gethex+0x33e>
 801c82c:	f045 0510 	orr.w	r5, r5, #16
 801c830:	e032      	b.n	801c898 <__gethex+0x38c>
 801c832:	f04f 0901 	mov.w	r9, #1
 801c836:	e7d1      	b.n	801c7dc <__gethex+0x2d0>
 801c838:	2501      	movs	r5, #1
 801c83a:	e7e2      	b.n	801c802 <__gethex+0x2f6>
 801c83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c83e:	f1c3 0301 	rsb	r3, r3, #1
 801c842:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c846:	2b00      	cmp	r3, #0
 801c848:	d0f0      	beq.n	801c82c <__gethex+0x320>
 801c84a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c84e:	f104 0314 	add.w	r3, r4, #20
 801c852:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c856:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c85a:	f04f 0c00 	mov.w	ip, #0
 801c85e:	4618      	mov	r0, r3
 801c860:	f853 2b04 	ldr.w	r2, [r3], #4
 801c864:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c868:	d01b      	beq.n	801c8a2 <__gethex+0x396>
 801c86a:	3201      	adds	r2, #1
 801c86c:	6002      	str	r2, [r0, #0]
 801c86e:	2d02      	cmp	r5, #2
 801c870:	f104 0314 	add.w	r3, r4, #20
 801c874:	d13c      	bne.n	801c8f0 <__gethex+0x3e4>
 801c876:	f8d8 2000 	ldr.w	r2, [r8]
 801c87a:	3a01      	subs	r2, #1
 801c87c:	42b2      	cmp	r2, r6
 801c87e:	d109      	bne.n	801c894 <__gethex+0x388>
 801c880:	1171      	asrs	r1, r6, #5
 801c882:	2201      	movs	r2, #1
 801c884:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c888:	f006 061f 	and.w	r6, r6, #31
 801c88c:	fa02 f606 	lsl.w	r6, r2, r6
 801c890:	421e      	tst	r6, r3
 801c892:	d13a      	bne.n	801c90a <__gethex+0x3fe>
 801c894:	f045 0520 	orr.w	r5, r5, #32
 801c898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c89a:	601c      	str	r4, [r3, #0]
 801c89c:	9b02      	ldr	r3, [sp, #8]
 801c89e:	601f      	str	r7, [r3, #0]
 801c8a0:	e6b0      	b.n	801c604 <__gethex+0xf8>
 801c8a2:	4299      	cmp	r1, r3
 801c8a4:	f843 cc04 	str.w	ip, [r3, #-4]
 801c8a8:	d8d9      	bhi.n	801c85e <__gethex+0x352>
 801c8aa:	68a3      	ldr	r3, [r4, #8]
 801c8ac:	459b      	cmp	fp, r3
 801c8ae:	db17      	blt.n	801c8e0 <__gethex+0x3d4>
 801c8b0:	6861      	ldr	r1, [r4, #4]
 801c8b2:	9801      	ldr	r0, [sp, #4]
 801c8b4:	3101      	adds	r1, #1
 801c8b6:	f000 f90d 	bl	801cad4 <_Balloc>
 801c8ba:	4681      	mov	r9, r0
 801c8bc:	b918      	cbnz	r0, 801c8c6 <__gethex+0x3ba>
 801c8be:	4b1a      	ldr	r3, [pc, #104]	@ (801c928 <__gethex+0x41c>)
 801c8c0:	4602      	mov	r2, r0
 801c8c2:	2184      	movs	r1, #132	@ 0x84
 801c8c4:	e6c5      	b.n	801c652 <__gethex+0x146>
 801c8c6:	6922      	ldr	r2, [r4, #16]
 801c8c8:	3202      	adds	r2, #2
 801c8ca:	f104 010c 	add.w	r1, r4, #12
 801c8ce:	0092      	lsls	r2, r2, #2
 801c8d0:	300c      	adds	r0, #12
 801c8d2:	f7fe fee2 	bl	801b69a <memcpy>
 801c8d6:	4621      	mov	r1, r4
 801c8d8:	9801      	ldr	r0, [sp, #4]
 801c8da:	f000 f93b 	bl	801cb54 <_Bfree>
 801c8de:	464c      	mov	r4, r9
 801c8e0:	6923      	ldr	r3, [r4, #16]
 801c8e2:	1c5a      	adds	r2, r3, #1
 801c8e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c8e8:	6122      	str	r2, [r4, #16]
 801c8ea:	2201      	movs	r2, #1
 801c8ec:	615a      	str	r2, [r3, #20]
 801c8ee:	e7be      	b.n	801c86e <__gethex+0x362>
 801c8f0:	6922      	ldr	r2, [r4, #16]
 801c8f2:	455a      	cmp	r2, fp
 801c8f4:	dd0b      	ble.n	801c90e <__gethex+0x402>
 801c8f6:	2101      	movs	r1, #1
 801c8f8:	4620      	mov	r0, r4
 801c8fa:	f7ff fd9f 	bl	801c43c <rshift>
 801c8fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c902:	3701      	adds	r7, #1
 801c904:	42bb      	cmp	r3, r7
 801c906:	f6ff aee0 	blt.w	801c6ca <__gethex+0x1be>
 801c90a:	2501      	movs	r5, #1
 801c90c:	e7c2      	b.n	801c894 <__gethex+0x388>
 801c90e:	f016 061f 	ands.w	r6, r6, #31
 801c912:	d0fa      	beq.n	801c90a <__gethex+0x3fe>
 801c914:	4453      	add	r3, sl
 801c916:	f1c6 0620 	rsb	r6, r6, #32
 801c91a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c91e:	f000 f9cb 	bl	801ccb8 <__hi0bits>
 801c922:	42b0      	cmp	r0, r6
 801c924:	dbe7      	blt.n	801c8f6 <__gethex+0x3ea>
 801c926:	e7f0      	b.n	801c90a <__gethex+0x3fe>
 801c928:	08021dbc 	.word	0x08021dbc

0801c92c <L_shift>:
 801c92c:	f1c2 0208 	rsb	r2, r2, #8
 801c930:	0092      	lsls	r2, r2, #2
 801c932:	b570      	push	{r4, r5, r6, lr}
 801c934:	f1c2 0620 	rsb	r6, r2, #32
 801c938:	6843      	ldr	r3, [r0, #4]
 801c93a:	6804      	ldr	r4, [r0, #0]
 801c93c:	fa03 f506 	lsl.w	r5, r3, r6
 801c940:	432c      	orrs	r4, r5
 801c942:	40d3      	lsrs	r3, r2
 801c944:	6004      	str	r4, [r0, #0]
 801c946:	f840 3f04 	str.w	r3, [r0, #4]!
 801c94a:	4288      	cmp	r0, r1
 801c94c:	d3f4      	bcc.n	801c938 <L_shift+0xc>
 801c94e:	bd70      	pop	{r4, r5, r6, pc}

0801c950 <__match>:
 801c950:	b530      	push	{r4, r5, lr}
 801c952:	6803      	ldr	r3, [r0, #0]
 801c954:	3301      	adds	r3, #1
 801c956:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c95a:	b914      	cbnz	r4, 801c962 <__match+0x12>
 801c95c:	6003      	str	r3, [r0, #0]
 801c95e:	2001      	movs	r0, #1
 801c960:	bd30      	pop	{r4, r5, pc}
 801c962:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c966:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801c96a:	2d19      	cmp	r5, #25
 801c96c:	bf98      	it	ls
 801c96e:	3220      	addls	r2, #32
 801c970:	42a2      	cmp	r2, r4
 801c972:	d0f0      	beq.n	801c956 <__match+0x6>
 801c974:	2000      	movs	r0, #0
 801c976:	e7f3      	b.n	801c960 <__match+0x10>

0801c978 <__hexnan>:
 801c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c97c:	680b      	ldr	r3, [r1, #0]
 801c97e:	6801      	ldr	r1, [r0, #0]
 801c980:	115e      	asrs	r6, r3, #5
 801c982:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c986:	f013 031f 	ands.w	r3, r3, #31
 801c98a:	b087      	sub	sp, #28
 801c98c:	bf18      	it	ne
 801c98e:	3604      	addne	r6, #4
 801c990:	2500      	movs	r5, #0
 801c992:	1f37      	subs	r7, r6, #4
 801c994:	4682      	mov	sl, r0
 801c996:	4690      	mov	r8, r2
 801c998:	9301      	str	r3, [sp, #4]
 801c99a:	f846 5c04 	str.w	r5, [r6, #-4]
 801c99e:	46b9      	mov	r9, r7
 801c9a0:	463c      	mov	r4, r7
 801c9a2:	9502      	str	r5, [sp, #8]
 801c9a4:	46ab      	mov	fp, r5
 801c9a6:	784a      	ldrb	r2, [r1, #1]
 801c9a8:	1c4b      	adds	r3, r1, #1
 801c9aa:	9303      	str	r3, [sp, #12]
 801c9ac:	b342      	cbz	r2, 801ca00 <__hexnan+0x88>
 801c9ae:	4610      	mov	r0, r2
 801c9b0:	9105      	str	r1, [sp, #20]
 801c9b2:	9204      	str	r2, [sp, #16]
 801c9b4:	f7ff fd94 	bl	801c4e0 <__hexdig_fun>
 801c9b8:	2800      	cmp	r0, #0
 801c9ba:	d151      	bne.n	801ca60 <__hexnan+0xe8>
 801c9bc:	9a04      	ldr	r2, [sp, #16]
 801c9be:	9905      	ldr	r1, [sp, #20]
 801c9c0:	2a20      	cmp	r2, #32
 801c9c2:	d818      	bhi.n	801c9f6 <__hexnan+0x7e>
 801c9c4:	9b02      	ldr	r3, [sp, #8]
 801c9c6:	459b      	cmp	fp, r3
 801c9c8:	dd13      	ble.n	801c9f2 <__hexnan+0x7a>
 801c9ca:	454c      	cmp	r4, r9
 801c9cc:	d206      	bcs.n	801c9dc <__hexnan+0x64>
 801c9ce:	2d07      	cmp	r5, #7
 801c9d0:	dc04      	bgt.n	801c9dc <__hexnan+0x64>
 801c9d2:	462a      	mov	r2, r5
 801c9d4:	4649      	mov	r1, r9
 801c9d6:	4620      	mov	r0, r4
 801c9d8:	f7ff ffa8 	bl	801c92c <L_shift>
 801c9dc:	4544      	cmp	r4, r8
 801c9de:	d952      	bls.n	801ca86 <__hexnan+0x10e>
 801c9e0:	2300      	movs	r3, #0
 801c9e2:	f1a4 0904 	sub.w	r9, r4, #4
 801c9e6:	f844 3c04 	str.w	r3, [r4, #-4]
 801c9ea:	f8cd b008 	str.w	fp, [sp, #8]
 801c9ee:	464c      	mov	r4, r9
 801c9f0:	461d      	mov	r5, r3
 801c9f2:	9903      	ldr	r1, [sp, #12]
 801c9f4:	e7d7      	b.n	801c9a6 <__hexnan+0x2e>
 801c9f6:	2a29      	cmp	r2, #41	@ 0x29
 801c9f8:	d157      	bne.n	801caaa <__hexnan+0x132>
 801c9fa:	3102      	adds	r1, #2
 801c9fc:	f8ca 1000 	str.w	r1, [sl]
 801ca00:	f1bb 0f00 	cmp.w	fp, #0
 801ca04:	d051      	beq.n	801caaa <__hexnan+0x132>
 801ca06:	454c      	cmp	r4, r9
 801ca08:	d206      	bcs.n	801ca18 <__hexnan+0xa0>
 801ca0a:	2d07      	cmp	r5, #7
 801ca0c:	dc04      	bgt.n	801ca18 <__hexnan+0xa0>
 801ca0e:	462a      	mov	r2, r5
 801ca10:	4649      	mov	r1, r9
 801ca12:	4620      	mov	r0, r4
 801ca14:	f7ff ff8a 	bl	801c92c <L_shift>
 801ca18:	4544      	cmp	r4, r8
 801ca1a:	d936      	bls.n	801ca8a <__hexnan+0x112>
 801ca1c:	f1a8 0204 	sub.w	r2, r8, #4
 801ca20:	4623      	mov	r3, r4
 801ca22:	f853 1b04 	ldr.w	r1, [r3], #4
 801ca26:	f842 1f04 	str.w	r1, [r2, #4]!
 801ca2a:	429f      	cmp	r7, r3
 801ca2c:	d2f9      	bcs.n	801ca22 <__hexnan+0xaa>
 801ca2e:	1b3b      	subs	r3, r7, r4
 801ca30:	f023 0303 	bic.w	r3, r3, #3
 801ca34:	3304      	adds	r3, #4
 801ca36:	3401      	adds	r4, #1
 801ca38:	3e03      	subs	r6, #3
 801ca3a:	42b4      	cmp	r4, r6
 801ca3c:	bf88      	it	hi
 801ca3e:	2304      	movhi	r3, #4
 801ca40:	4443      	add	r3, r8
 801ca42:	2200      	movs	r2, #0
 801ca44:	f843 2b04 	str.w	r2, [r3], #4
 801ca48:	429f      	cmp	r7, r3
 801ca4a:	d2fb      	bcs.n	801ca44 <__hexnan+0xcc>
 801ca4c:	683b      	ldr	r3, [r7, #0]
 801ca4e:	b91b      	cbnz	r3, 801ca58 <__hexnan+0xe0>
 801ca50:	4547      	cmp	r7, r8
 801ca52:	d128      	bne.n	801caa6 <__hexnan+0x12e>
 801ca54:	2301      	movs	r3, #1
 801ca56:	603b      	str	r3, [r7, #0]
 801ca58:	2005      	movs	r0, #5
 801ca5a:	b007      	add	sp, #28
 801ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca60:	3501      	adds	r5, #1
 801ca62:	2d08      	cmp	r5, #8
 801ca64:	f10b 0b01 	add.w	fp, fp, #1
 801ca68:	dd06      	ble.n	801ca78 <__hexnan+0x100>
 801ca6a:	4544      	cmp	r4, r8
 801ca6c:	d9c1      	bls.n	801c9f2 <__hexnan+0x7a>
 801ca6e:	2300      	movs	r3, #0
 801ca70:	f844 3c04 	str.w	r3, [r4, #-4]
 801ca74:	2501      	movs	r5, #1
 801ca76:	3c04      	subs	r4, #4
 801ca78:	6822      	ldr	r2, [r4, #0]
 801ca7a:	f000 000f 	and.w	r0, r0, #15
 801ca7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ca82:	6020      	str	r0, [r4, #0]
 801ca84:	e7b5      	b.n	801c9f2 <__hexnan+0x7a>
 801ca86:	2508      	movs	r5, #8
 801ca88:	e7b3      	b.n	801c9f2 <__hexnan+0x7a>
 801ca8a:	9b01      	ldr	r3, [sp, #4]
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d0dd      	beq.n	801ca4c <__hexnan+0xd4>
 801ca90:	f1c3 0320 	rsb	r3, r3, #32
 801ca94:	f04f 32ff 	mov.w	r2, #4294967295
 801ca98:	40da      	lsrs	r2, r3
 801ca9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ca9e:	4013      	ands	r3, r2
 801caa0:	f846 3c04 	str.w	r3, [r6, #-4]
 801caa4:	e7d2      	b.n	801ca4c <__hexnan+0xd4>
 801caa6:	3f04      	subs	r7, #4
 801caa8:	e7d0      	b.n	801ca4c <__hexnan+0xd4>
 801caaa:	2004      	movs	r0, #4
 801caac:	e7d5      	b.n	801ca5a <__hexnan+0xe2>

0801caae <__ascii_mbtowc>:
 801caae:	b082      	sub	sp, #8
 801cab0:	b901      	cbnz	r1, 801cab4 <__ascii_mbtowc+0x6>
 801cab2:	a901      	add	r1, sp, #4
 801cab4:	b142      	cbz	r2, 801cac8 <__ascii_mbtowc+0x1a>
 801cab6:	b14b      	cbz	r3, 801cacc <__ascii_mbtowc+0x1e>
 801cab8:	7813      	ldrb	r3, [r2, #0]
 801caba:	600b      	str	r3, [r1, #0]
 801cabc:	7812      	ldrb	r2, [r2, #0]
 801cabe:	1e10      	subs	r0, r2, #0
 801cac0:	bf18      	it	ne
 801cac2:	2001      	movne	r0, #1
 801cac4:	b002      	add	sp, #8
 801cac6:	4770      	bx	lr
 801cac8:	4610      	mov	r0, r2
 801caca:	e7fb      	b.n	801cac4 <__ascii_mbtowc+0x16>
 801cacc:	f06f 0001 	mvn.w	r0, #1
 801cad0:	e7f8      	b.n	801cac4 <__ascii_mbtowc+0x16>
	...

0801cad4 <_Balloc>:
 801cad4:	b570      	push	{r4, r5, r6, lr}
 801cad6:	69c6      	ldr	r6, [r0, #28]
 801cad8:	4604      	mov	r4, r0
 801cada:	460d      	mov	r5, r1
 801cadc:	b976      	cbnz	r6, 801cafc <_Balloc+0x28>
 801cade:	2010      	movs	r0, #16
 801cae0:	f7fc fd48 	bl	8019574 <malloc>
 801cae4:	4602      	mov	r2, r0
 801cae6:	61e0      	str	r0, [r4, #28]
 801cae8:	b920      	cbnz	r0, 801caf4 <_Balloc+0x20>
 801caea:	4b18      	ldr	r3, [pc, #96]	@ (801cb4c <_Balloc+0x78>)
 801caec:	4818      	ldr	r0, [pc, #96]	@ (801cb50 <_Balloc+0x7c>)
 801caee:	216b      	movs	r1, #107	@ 0x6b
 801caf0:	f7fe fdf0 	bl	801b6d4 <__assert_func>
 801caf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801caf8:	6006      	str	r6, [r0, #0]
 801cafa:	60c6      	str	r6, [r0, #12]
 801cafc:	69e6      	ldr	r6, [r4, #28]
 801cafe:	68f3      	ldr	r3, [r6, #12]
 801cb00:	b183      	cbz	r3, 801cb24 <_Balloc+0x50>
 801cb02:	69e3      	ldr	r3, [r4, #28]
 801cb04:	68db      	ldr	r3, [r3, #12]
 801cb06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cb0a:	b9b8      	cbnz	r0, 801cb3c <_Balloc+0x68>
 801cb0c:	2101      	movs	r1, #1
 801cb0e:	fa01 f605 	lsl.w	r6, r1, r5
 801cb12:	1d72      	adds	r2, r6, #5
 801cb14:	0092      	lsls	r2, r2, #2
 801cb16:	4620      	mov	r0, r4
 801cb18:	f001 f8a7 	bl	801dc6a <_calloc_r>
 801cb1c:	b160      	cbz	r0, 801cb38 <_Balloc+0x64>
 801cb1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cb22:	e00e      	b.n	801cb42 <_Balloc+0x6e>
 801cb24:	2221      	movs	r2, #33	@ 0x21
 801cb26:	2104      	movs	r1, #4
 801cb28:	4620      	mov	r0, r4
 801cb2a:	f001 f89e 	bl	801dc6a <_calloc_r>
 801cb2e:	69e3      	ldr	r3, [r4, #28]
 801cb30:	60f0      	str	r0, [r6, #12]
 801cb32:	68db      	ldr	r3, [r3, #12]
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d1e4      	bne.n	801cb02 <_Balloc+0x2e>
 801cb38:	2000      	movs	r0, #0
 801cb3a:	bd70      	pop	{r4, r5, r6, pc}
 801cb3c:	6802      	ldr	r2, [r0, #0]
 801cb3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cb42:	2300      	movs	r3, #0
 801cb44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cb48:	e7f7      	b.n	801cb3a <_Balloc+0x66>
 801cb4a:	bf00      	nop
 801cb4c:	08021ca2 	.word	0x08021ca2
 801cb50:	08021e2d 	.word	0x08021e2d

0801cb54 <_Bfree>:
 801cb54:	b570      	push	{r4, r5, r6, lr}
 801cb56:	69c6      	ldr	r6, [r0, #28]
 801cb58:	4605      	mov	r5, r0
 801cb5a:	460c      	mov	r4, r1
 801cb5c:	b976      	cbnz	r6, 801cb7c <_Bfree+0x28>
 801cb5e:	2010      	movs	r0, #16
 801cb60:	f7fc fd08 	bl	8019574 <malloc>
 801cb64:	4602      	mov	r2, r0
 801cb66:	61e8      	str	r0, [r5, #28]
 801cb68:	b920      	cbnz	r0, 801cb74 <_Bfree+0x20>
 801cb6a:	4b09      	ldr	r3, [pc, #36]	@ (801cb90 <_Bfree+0x3c>)
 801cb6c:	4809      	ldr	r0, [pc, #36]	@ (801cb94 <_Bfree+0x40>)
 801cb6e:	218f      	movs	r1, #143	@ 0x8f
 801cb70:	f7fe fdb0 	bl	801b6d4 <__assert_func>
 801cb74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cb78:	6006      	str	r6, [r0, #0]
 801cb7a:	60c6      	str	r6, [r0, #12]
 801cb7c:	b13c      	cbz	r4, 801cb8e <_Bfree+0x3a>
 801cb7e:	69eb      	ldr	r3, [r5, #28]
 801cb80:	6862      	ldr	r2, [r4, #4]
 801cb82:	68db      	ldr	r3, [r3, #12]
 801cb84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cb88:	6021      	str	r1, [r4, #0]
 801cb8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cb8e:	bd70      	pop	{r4, r5, r6, pc}
 801cb90:	08021ca2 	.word	0x08021ca2
 801cb94:	08021e2d 	.word	0x08021e2d

0801cb98 <__multadd>:
 801cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb9c:	690d      	ldr	r5, [r1, #16]
 801cb9e:	4607      	mov	r7, r0
 801cba0:	460c      	mov	r4, r1
 801cba2:	461e      	mov	r6, r3
 801cba4:	f101 0c14 	add.w	ip, r1, #20
 801cba8:	2000      	movs	r0, #0
 801cbaa:	f8dc 3000 	ldr.w	r3, [ip]
 801cbae:	b299      	uxth	r1, r3
 801cbb0:	fb02 6101 	mla	r1, r2, r1, r6
 801cbb4:	0c1e      	lsrs	r6, r3, #16
 801cbb6:	0c0b      	lsrs	r3, r1, #16
 801cbb8:	fb02 3306 	mla	r3, r2, r6, r3
 801cbbc:	b289      	uxth	r1, r1
 801cbbe:	3001      	adds	r0, #1
 801cbc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cbc4:	4285      	cmp	r5, r0
 801cbc6:	f84c 1b04 	str.w	r1, [ip], #4
 801cbca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cbce:	dcec      	bgt.n	801cbaa <__multadd+0x12>
 801cbd0:	b30e      	cbz	r6, 801cc16 <__multadd+0x7e>
 801cbd2:	68a3      	ldr	r3, [r4, #8]
 801cbd4:	42ab      	cmp	r3, r5
 801cbd6:	dc19      	bgt.n	801cc0c <__multadd+0x74>
 801cbd8:	6861      	ldr	r1, [r4, #4]
 801cbda:	4638      	mov	r0, r7
 801cbdc:	3101      	adds	r1, #1
 801cbde:	f7ff ff79 	bl	801cad4 <_Balloc>
 801cbe2:	4680      	mov	r8, r0
 801cbe4:	b928      	cbnz	r0, 801cbf2 <__multadd+0x5a>
 801cbe6:	4602      	mov	r2, r0
 801cbe8:	4b0c      	ldr	r3, [pc, #48]	@ (801cc1c <__multadd+0x84>)
 801cbea:	480d      	ldr	r0, [pc, #52]	@ (801cc20 <__multadd+0x88>)
 801cbec:	21ba      	movs	r1, #186	@ 0xba
 801cbee:	f7fe fd71 	bl	801b6d4 <__assert_func>
 801cbf2:	6922      	ldr	r2, [r4, #16]
 801cbf4:	3202      	adds	r2, #2
 801cbf6:	f104 010c 	add.w	r1, r4, #12
 801cbfa:	0092      	lsls	r2, r2, #2
 801cbfc:	300c      	adds	r0, #12
 801cbfe:	f7fe fd4c 	bl	801b69a <memcpy>
 801cc02:	4621      	mov	r1, r4
 801cc04:	4638      	mov	r0, r7
 801cc06:	f7ff ffa5 	bl	801cb54 <_Bfree>
 801cc0a:	4644      	mov	r4, r8
 801cc0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cc10:	3501      	adds	r5, #1
 801cc12:	615e      	str	r6, [r3, #20]
 801cc14:	6125      	str	r5, [r4, #16]
 801cc16:	4620      	mov	r0, r4
 801cc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc1c:	08021dbc 	.word	0x08021dbc
 801cc20:	08021e2d 	.word	0x08021e2d

0801cc24 <__s2b>:
 801cc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc28:	460c      	mov	r4, r1
 801cc2a:	4615      	mov	r5, r2
 801cc2c:	461f      	mov	r7, r3
 801cc2e:	2209      	movs	r2, #9
 801cc30:	3308      	adds	r3, #8
 801cc32:	4606      	mov	r6, r0
 801cc34:	fb93 f3f2 	sdiv	r3, r3, r2
 801cc38:	2100      	movs	r1, #0
 801cc3a:	2201      	movs	r2, #1
 801cc3c:	429a      	cmp	r2, r3
 801cc3e:	db09      	blt.n	801cc54 <__s2b+0x30>
 801cc40:	4630      	mov	r0, r6
 801cc42:	f7ff ff47 	bl	801cad4 <_Balloc>
 801cc46:	b940      	cbnz	r0, 801cc5a <__s2b+0x36>
 801cc48:	4602      	mov	r2, r0
 801cc4a:	4b19      	ldr	r3, [pc, #100]	@ (801ccb0 <__s2b+0x8c>)
 801cc4c:	4819      	ldr	r0, [pc, #100]	@ (801ccb4 <__s2b+0x90>)
 801cc4e:	21d3      	movs	r1, #211	@ 0xd3
 801cc50:	f7fe fd40 	bl	801b6d4 <__assert_func>
 801cc54:	0052      	lsls	r2, r2, #1
 801cc56:	3101      	adds	r1, #1
 801cc58:	e7f0      	b.n	801cc3c <__s2b+0x18>
 801cc5a:	9b08      	ldr	r3, [sp, #32]
 801cc5c:	6143      	str	r3, [r0, #20]
 801cc5e:	2d09      	cmp	r5, #9
 801cc60:	f04f 0301 	mov.w	r3, #1
 801cc64:	6103      	str	r3, [r0, #16]
 801cc66:	dd16      	ble.n	801cc96 <__s2b+0x72>
 801cc68:	f104 0909 	add.w	r9, r4, #9
 801cc6c:	46c8      	mov	r8, r9
 801cc6e:	442c      	add	r4, r5
 801cc70:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cc74:	4601      	mov	r1, r0
 801cc76:	3b30      	subs	r3, #48	@ 0x30
 801cc78:	220a      	movs	r2, #10
 801cc7a:	4630      	mov	r0, r6
 801cc7c:	f7ff ff8c 	bl	801cb98 <__multadd>
 801cc80:	45a0      	cmp	r8, r4
 801cc82:	d1f5      	bne.n	801cc70 <__s2b+0x4c>
 801cc84:	f1a5 0408 	sub.w	r4, r5, #8
 801cc88:	444c      	add	r4, r9
 801cc8a:	1b2d      	subs	r5, r5, r4
 801cc8c:	1963      	adds	r3, r4, r5
 801cc8e:	42bb      	cmp	r3, r7
 801cc90:	db04      	blt.n	801cc9c <__s2b+0x78>
 801cc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc96:	340a      	adds	r4, #10
 801cc98:	2509      	movs	r5, #9
 801cc9a:	e7f6      	b.n	801cc8a <__s2b+0x66>
 801cc9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cca0:	4601      	mov	r1, r0
 801cca2:	3b30      	subs	r3, #48	@ 0x30
 801cca4:	220a      	movs	r2, #10
 801cca6:	4630      	mov	r0, r6
 801cca8:	f7ff ff76 	bl	801cb98 <__multadd>
 801ccac:	e7ee      	b.n	801cc8c <__s2b+0x68>
 801ccae:	bf00      	nop
 801ccb0:	08021dbc 	.word	0x08021dbc
 801ccb4:	08021e2d 	.word	0x08021e2d

0801ccb8 <__hi0bits>:
 801ccb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ccbc:	4603      	mov	r3, r0
 801ccbe:	bf36      	itet	cc
 801ccc0:	0403      	lslcc	r3, r0, #16
 801ccc2:	2000      	movcs	r0, #0
 801ccc4:	2010      	movcc	r0, #16
 801ccc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ccca:	bf3c      	itt	cc
 801cccc:	021b      	lslcc	r3, r3, #8
 801ccce:	3008      	addcc	r0, #8
 801ccd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ccd4:	bf3c      	itt	cc
 801ccd6:	011b      	lslcc	r3, r3, #4
 801ccd8:	3004      	addcc	r0, #4
 801ccda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ccde:	bf3c      	itt	cc
 801cce0:	009b      	lslcc	r3, r3, #2
 801cce2:	3002      	addcc	r0, #2
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	db05      	blt.n	801ccf4 <__hi0bits+0x3c>
 801cce8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ccec:	f100 0001 	add.w	r0, r0, #1
 801ccf0:	bf08      	it	eq
 801ccf2:	2020      	moveq	r0, #32
 801ccf4:	4770      	bx	lr

0801ccf6 <__lo0bits>:
 801ccf6:	6803      	ldr	r3, [r0, #0]
 801ccf8:	4602      	mov	r2, r0
 801ccfa:	f013 0007 	ands.w	r0, r3, #7
 801ccfe:	d00b      	beq.n	801cd18 <__lo0bits+0x22>
 801cd00:	07d9      	lsls	r1, r3, #31
 801cd02:	d421      	bmi.n	801cd48 <__lo0bits+0x52>
 801cd04:	0798      	lsls	r0, r3, #30
 801cd06:	bf49      	itett	mi
 801cd08:	085b      	lsrmi	r3, r3, #1
 801cd0a:	089b      	lsrpl	r3, r3, #2
 801cd0c:	2001      	movmi	r0, #1
 801cd0e:	6013      	strmi	r3, [r2, #0]
 801cd10:	bf5c      	itt	pl
 801cd12:	6013      	strpl	r3, [r2, #0]
 801cd14:	2002      	movpl	r0, #2
 801cd16:	4770      	bx	lr
 801cd18:	b299      	uxth	r1, r3
 801cd1a:	b909      	cbnz	r1, 801cd20 <__lo0bits+0x2a>
 801cd1c:	0c1b      	lsrs	r3, r3, #16
 801cd1e:	2010      	movs	r0, #16
 801cd20:	b2d9      	uxtb	r1, r3
 801cd22:	b909      	cbnz	r1, 801cd28 <__lo0bits+0x32>
 801cd24:	3008      	adds	r0, #8
 801cd26:	0a1b      	lsrs	r3, r3, #8
 801cd28:	0719      	lsls	r1, r3, #28
 801cd2a:	bf04      	itt	eq
 801cd2c:	091b      	lsreq	r3, r3, #4
 801cd2e:	3004      	addeq	r0, #4
 801cd30:	0799      	lsls	r1, r3, #30
 801cd32:	bf04      	itt	eq
 801cd34:	089b      	lsreq	r3, r3, #2
 801cd36:	3002      	addeq	r0, #2
 801cd38:	07d9      	lsls	r1, r3, #31
 801cd3a:	d403      	bmi.n	801cd44 <__lo0bits+0x4e>
 801cd3c:	085b      	lsrs	r3, r3, #1
 801cd3e:	f100 0001 	add.w	r0, r0, #1
 801cd42:	d003      	beq.n	801cd4c <__lo0bits+0x56>
 801cd44:	6013      	str	r3, [r2, #0]
 801cd46:	4770      	bx	lr
 801cd48:	2000      	movs	r0, #0
 801cd4a:	4770      	bx	lr
 801cd4c:	2020      	movs	r0, #32
 801cd4e:	4770      	bx	lr

0801cd50 <__i2b>:
 801cd50:	b510      	push	{r4, lr}
 801cd52:	460c      	mov	r4, r1
 801cd54:	2101      	movs	r1, #1
 801cd56:	f7ff febd 	bl	801cad4 <_Balloc>
 801cd5a:	4602      	mov	r2, r0
 801cd5c:	b928      	cbnz	r0, 801cd6a <__i2b+0x1a>
 801cd5e:	4b05      	ldr	r3, [pc, #20]	@ (801cd74 <__i2b+0x24>)
 801cd60:	4805      	ldr	r0, [pc, #20]	@ (801cd78 <__i2b+0x28>)
 801cd62:	f240 1145 	movw	r1, #325	@ 0x145
 801cd66:	f7fe fcb5 	bl	801b6d4 <__assert_func>
 801cd6a:	2301      	movs	r3, #1
 801cd6c:	6144      	str	r4, [r0, #20]
 801cd6e:	6103      	str	r3, [r0, #16]
 801cd70:	bd10      	pop	{r4, pc}
 801cd72:	bf00      	nop
 801cd74:	08021dbc 	.word	0x08021dbc
 801cd78:	08021e2d 	.word	0x08021e2d

0801cd7c <__multiply>:
 801cd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd80:	4614      	mov	r4, r2
 801cd82:	690a      	ldr	r2, [r1, #16]
 801cd84:	6923      	ldr	r3, [r4, #16]
 801cd86:	429a      	cmp	r2, r3
 801cd88:	bfa8      	it	ge
 801cd8a:	4623      	movge	r3, r4
 801cd8c:	460f      	mov	r7, r1
 801cd8e:	bfa4      	itt	ge
 801cd90:	460c      	movge	r4, r1
 801cd92:	461f      	movge	r7, r3
 801cd94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801cd98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801cd9c:	68a3      	ldr	r3, [r4, #8]
 801cd9e:	6861      	ldr	r1, [r4, #4]
 801cda0:	eb0a 0609 	add.w	r6, sl, r9
 801cda4:	42b3      	cmp	r3, r6
 801cda6:	b085      	sub	sp, #20
 801cda8:	bfb8      	it	lt
 801cdaa:	3101      	addlt	r1, #1
 801cdac:	f7ff fe92 	bl	801cad4 <_Balloc>
 801cdb0:	b930      	cbnz	r0, 801cdc0 <__multiply+0x44>
 801cdb2:	4602      	mov	r2, r0
 801cdb4:	4b44      	ldr	r3, [pc, #272]	@ (801cec8 <__multiply+0x14c>)
 801cdb6:	4845      	ldr	r0, [pc, #276]	@ (801cecc <__multiply+0x150>)
 801cdb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801cdbc:	f7fe fc8a 	bl	801b6d4 <__assert_func>
 801cdc0:	f100 0514 	add.w	r5, r0, #20
 801cdc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cdc8:	462b      	mov	r3, r5
 801cdca:	2200      	movs	r2, #0
 801cdcc:	4543      	cmp	r3, r8
 801cdce:	d321      	bcc.n	801ce14 <__multiply+0x98>
 801cdd0:	f107 0114 	add.w	r1, r7, #20
 801cdd4:	f104 0214 	add.w	r2, r4, #20
 801cdd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801cddc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801cde0:	9302      	str	r3, [sp, #8]
 801cde2:	1b13      	subs	r3, r2, r4
 801cde4:	3b15      	subs	r3, #21
 801cde6:	f023 0303 	bic.w	r3, r3, #3
 801cdea:	3304      	adds	r3, #4
 801cdec:	f104 0715 	add.w	r7, r4, #21
 801cdf0:	42ba      	cmp	r2, r7
 801cdf2:	bf38      	it	cc
 801cdf4:	2304      	movcc	r3, #4
 801cdf6:	9301      	str	r3, [sp, #4]
 801cdf8:	9b02      	ldr	r3, [sp, #8]
 801cdfa:	9103      	str	r1, [sp, #12]
 801cdfc:	428b      	cmp	r3, r1
 801cdfe:	d80c      	bhi.n	801ce1a <__multiply+0x9e>
 801ce00:	2e00      	cmp	r6, #0
 801ce02:	dd03      	ble.n	801ce0c <__multiply+0x90>
 801ce04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d05b      	beq.n	801cec4 <__multiply+0x148>
 801ce0c:	6106      	str	r6, [r0, #16]
 801ce0e:	b005      	add	sp, #20
 801ce10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce14:	f843 2b04 	str.w	r2, [r3], #4
 801ce18:	e7d8      	b.n	801cdcc <__multiply+0x50>
 801ce1a:	f8b1 a000 	ldrh.w	sl, [r1]
 801ce1e:	f1ba 0f00 	cmp.w	sl, #0
 801ce22:	d024      	beq.n	801ce6e <__multiply+0xf2>
 801ce24:	f104 0e14 	add.w	lr, r4, #20
 801ce28:	46a9      	mov	r9, r5
 801ce2a:	f04f 0c00 	mov.w	ip, #0
 801ce2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ce32:	f8d9 3000 	ldr.w	r3, [r9]
 801ce36:	fa1f fb87 	uxth.w	fp, r7
 801ce3a:	b29b      	uxth	r3, r3
 801ce3c:	fb0a 330b 	mla	r3, sl, fp, r3
 801ce40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801ce44:	f8d9 7000 	ldr.w	r7, [r9]
 801ce48:	4463      	add	r3, ip
 801ce4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ce4e:	fb0a c70b 	mla	r7, sl, fp, ip
 801ce52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ce56:	b29b      	uxth	r3, r3
 801ce58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ce5c:	4572      	cmp	r2, lr
 801ce5e:	f849 3b04 	str.w	r3, [r9], #4
 801ce62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ce66:	d8e2      	bhi.n	801ce2e <__multiply+0xb2>
 801ce68:	9b01      	ldr	r3, [sp, #4]
 801ce6a:	f845 c003 	str.w	ip, [r5, r3]
 801ce6e:	9b03      	ldr	r3, [sp, #12]
 801ce70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ce74:	3104      	adds	r1, #4
 801ce76:	f1b9 0f00 	cmp.w	r9, #0
 801ce7a:	d021      	beq.n	801cec0 <__multiply+0x144>
 801ce7c:	682b      	ldr	r3, [r5, #0]
 801ce7e:	f104 0c14 	add.w	ip, r4, #20
 801ce82:	46ae      	mov	lr, r5
 801ce84:	f04f 0a00 	mov.w	sl, #0
 801ce88:	f8bc b000 	ldrh.w	fp, [ip]
 801ce8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ce90:	fb09 770b 	mla	r7, r9, fp, r7
 801ce94:	4457      	add	r7, sl
 801ce96:	b29b      	uxth	r3, r3
 801ce98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ce9c:	f84e 3b04 	str.w	r3, [lr], #4
 801cea0:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cea4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cea8:	f8be 3000 	ldrh.w	r3, [lr]
 801ceac:	fb09 330a 	mla	r3, r9, sl, r3
 801ceb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ceb4:	4562      	cmp	r2, ip
 801ceb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ceba:	d8e5      	bhi.n	801ce88 <__multiply+0x10c>
 801cebc:	9f01      	ldr	r7, [sp, #4]
 801cebe:	51eb      	str	r3, [r5, r7]
 801cec0:	3504      	adds	r5, #4
 801cec2:	e799      	b.n	801cdf8 <__multiply+0x7c>
 801cec4:	3e01      	subs	r6, #1
 801cec6:	e79b      	b.n	801ce00 <__multiply+0x84>
 801cec8:	08021dbc 	.word	0x08021dbc
 801cecc:	08021e2d 	.word	0x08021e2d

0801ced0 <__pow5mult>:
 801ced0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ced4:	4615      	mov	r5, r2
 801ced6:	f012 0203 	ands.w	r2, r2, #3
 801ceda:	4607      	mov	r7, r0
 801cedc:	460e      	mov	r6, r1
 801cede:	d007      	beq.n	801cef0 <__pow5mult+0x20>
 801cee0:	4c25      	ldr	r4, [pc, #148]	@ (801cf78 <__pow5mult+0xa8>)
 801cee2:	3a01      	subs	r2, #1
 801cee4:	2300      	movs	r3, #0
 801cee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ceea:	f7ff fe55 	bl	801cb98 <__multadd>
 801ceee:	4606      	mov	r6, r0
 801cef0:	10ad      	asrs	r5, r5, #2
 801cef2:	d03d      	beq.n	801cf70 <__pow5mult+0xa0>
 801cef4:	69fc      	ldr	r4, [r7, #28]
 801cef6:	b97c      	cbnz	r4, 801cf18 <__pow5mult+0x48>
 801cef8:	2010      	movs	r0, #16
 801cefa:	f7fc fb3b 	bl	8019574 <malloc>
 801cefe:	4602      	mov	r2, r0
 801cf00:	61f8      	str	r0, [r7, #28]
 801cf02:	b928      	cbnz	r0, 801cf10 <__pow5mult+0x40>
 801cf04:	4b1d      	ldr	r3, [pc, #116]	@ (801cf7c <__pow5mult+0xac>)
 801cf06:	481e      	ldr	r0, [pc, #120]	@ (801cf80 <__pow5mult+0xb0>)
 801cf08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801cf0c:	f7fe fbe2 	bl	801b6d4 <__assert_func>
 801cf10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cf14:	6004      	str	r4, [r0, #0]
 801cf16:	60c4      	str	r4, [r0, #12]
 801cf18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801cf1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cf20:	b94c      	cbnz	r4, 801cf36 <__pow5mult+0x66>
 801cf22:	f240 2171 	movw	r1, #625	@ 0x271
 801cf26:	4638      	mov	r0, r7
 801cf28:	f7ff ff12 	bl	801cd50 <__i2b>
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	f8c8 0008 	str.w	r0, [r8, #8]
 801cf32:	4604      	mov	r4, r0
 801cf34:	6003      	str	r3, [r0, #0]
 801cf36:	f04f 0900 	mov.w	r9, #0
 801cf3a:	07eb      	lsls	r3, r5, #31
 801cf3c:	d50a      	bpl.n	801cf54 <__pow5mult+0x84>
 801cf3e:	4631      	mov	r1, r6
 801cf40:	4622      	mov	r2, r4
 801cf42:	4638      	mov	r0, r7
 801cf44:	f7ff ff1a 	bl	801cd7c <__multiply>
 801cf48:	4631      	mov	r1, r6
 801cf4a:	4680      	mov	r8, r0
 801cf4c:	4638      	mov	r0, r7
 801cf4e:	f7ff fe01 	bl	801cb54 <_Bfree>
 801cf52:	4646      	mov	r6, r8
 801cf54:	106d      	asrs	r5, r5, #1
 801cf56:	d00b      	beq.n	801cf70 <__pow5mult+0xa0>
 801cf58:	6820      	ldr	r0, [r4, #0]
 801cf5a:	b938      	cbnz	r0, 801cf6c <__pow5mult+0x9c>
 801cf5c:	4622      	mov	r2, r4
 801cf5e:	4621      	mov	r1, r4
 801cf60:	4638      	mov	r0, r7
 801cf62:	f7ff ff0b 	bl	801cd7c <__multiply>
 801cf66:	6020      	str	r0, [r4, #0]
 801cf68:	f8c0 9000 	str.w	r9, [r0]
 801cf6c:	4604      	mov	r4, r0
 801cf6e:	e7e4      	b.n	801cf3a <__pow5mult+0x6a>
 801cf70:	4630      	mov	r0, r6
 801cf72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf76:	bf00      	nop
 801cf78:	08021e88 	.word	0x08021e88
 801cf7c:	08021ca2 	.word	0x08021ca2
 801cf80:	08021e2d 	.word	0x08021e2d

0801cf84 <__lshift>:
 801cf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf88:	460c      	mov	r4, r1
 801cf8a:	6849      	ldr	r1, [r1, #4]
 801cf8c:	6923      	ldr	r3, [r4, #16]
 801cf8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cf92:	68a3      	ldr	r3, [r4, #8]
 801cf94:	4607      	mov	r7, r0
 801cf96:	4691      	mov	r9, r2
 801cf98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cf9c:	f108 0601 	add.w	r6, r8, #1
 801cfa0:	42b3      	cmp	r3, r6
 801cfa2:	db0b      	blt.n	801cfbc <__lshift+0x38>
 801cfa4:	4638      	mov	r0, r7
 801cfa6:	f7ff fd95 	bl	801cad4 <_Balloc>
 801cfaa:	4605      	mov	r5, r0
 801cfac:	b948      	cbnz	r0, 801cfc2 <__lshift+0x3e>
 801cfae:	4602      	mov	r2, r0
 801cfb0:	4b28      	ldr	r3, [pc, #160]	@ (801d054 <__lshift+0xd0>)
 801cfb2:	4829      	ldr	r0, [pc, #164]	@ (801d058 <__lshift+0xd4>)
 801cfb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801cfb8:	f7fe fb8c 	bl	801b6d4 <__assert_func>
 801cfbc:	3101      	adds	r1, #1
 801cfbe:	005b      	lsls	r3, r3, #1
 801cfc0:	e7ee      	b.n	801cfa0 <__lshift+0x1c>
 801cfc2:	2300      	movs	r3, #0
 801cfc4:	f100 0114 	add.w	r1, r0, #20
 801cfc8:	f100 0210 	add.w	r2, r0, #16
 801cfcc:	4618      	mov	r0, r3
 801cfce:	4553      	cmp	r3, sl
 801cfd0:	db33      	blt.n	801d03a <__lshift+0xb6>
 801cfd2:	6920      	ldr	r0, [r4, #16]
 801cfd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cfd8:	f104 0314 	add.w	r3, r4, #20
 801cfdc:	f019 091f 	ands.w	r9, r9, #31
 801cfe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cfe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cfe8:	d02b      	beq.n	801d042 <__lshift+0xbe>
 801cfea:	f1c9 0e20 	rsb	lr, r9, #32
 801cfee:	468a      	mov	sl, r1
 801cff0:	2200      	movs	r2, #0
 801cff2:	6818      	ldr	r0, [r3, #0]
 801cff4:	fa00 f009 	lsl.w	r0, r0, r9
 801cff8:	4310      	orrs	r0, r2
 801cffa:	f84a 0b04 	str.w	r0, [sl], #4
 801cffe:	f853 2b04 	ldr.w	r2, [r3], #4
 801d002:	459c      	cmp	ip, r3
 801d004:	fa22 f20e 	lsr.w	r2, r2, lr
 801d008:	d8f3      	bhi.n	801cff2 <__lshift+0x6e>
 801d00a:	ebac 0304 	sub.w	r3, ip, r4
 801d00e:	3b15      	subs	r3, #21
 801d010:	f023 0303 	bic.w	r3, r3, #3
 801d014:	3304      	adds	r3, #4
 801d016:	f104 0015 	add.w	r0, r4, #21
 801d01a:	4584      	cmp	ip, r0
 801d01c:	bf38      	it	cc
 801d01e:	2304      	movcc	r3, #4
 801d020:	50ca      	str	r2, [r1, r3]
 801d022:	b10a      	cbz	r2, 801d028 <__lshift+0xa4>
 801d024:	f108 0602 	add.w	r6, r8, #2
 801d028:	3e01      	subs	r6, #1
 801d02a:	4638      	mov	r0, r7
 801d02c:	612e      	str	r6, [r5, #16]
 801d02e:	4621      	mov	r1, r4
 801d030:	f7ff fd90 	bl	801cb54 <_Bfree>
 801d034:	4628      	mov	r0, r5
 801d036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d03a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d03e:	3301      	adds	r3, #1
 801d040:	e7c5      	b.n	801cfce <__lshift+0x4a>
 801d042:	3904      	subs	r1, #4
 801d044:	f853 2b04 	ldr.w	r2, [r3], #4
 801d048:	f841 2f04 	str.w	r2, [r1, #4]!
 801d04c:	459c      	cmp	ip, r3
 801d04e:	d8f9      	bhi.n	801d044 <__lshift+0xc0>
 801d050:	e7ea      	b.n	801d028 <__lshift+0xa4>
 801d052:	bf00      	nop
 801d054:	08021dbc 	.word	0x08021dbc
 801d058:	08021e2d 	.word	0x08021e2d

0801d05c <__mcmp>:
 801d05c:	690a      	ldr	r2, [r1, #16]
 801d05e:	4603      	mov	r3, r0
 801d060:	6900      	ldr	r0, [r0, #16]
 801d062:	1a80      	subs	r0, r0, r2
 801d064:	b530      	push	{r4, r5, lr}
 801d066:	d10e      	bne.n	801d086 <__mcmp+0x2a>
 801d068:	3314      	adds	r3, #20
 801d06a:	3114      	adds	r1, #20
 801d06c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d07c:	4295      	cmp	r5, r2
 801d07e:	d003      	beq.n	801d088 <__mcmp+0x2c>
 801d080:	d205      	bcs.n	801d08e <__mcmp+0x32>
 801d082:	f04f 30ff 	mov.w	r0, #4294967295
 801d086:	bd30      	pop	{r4, r5, pc}
 801d088:	42a3      	cmp	r3, r4
 801d08a:	d3f3      	bcc.n	801d074 <__mcmp+0x18>
 801d08c:	e7fb      	b.n	801d086 <__mcmp+0x2a>
 801d08e:	2001      	movs	r0, #1
 801d090:	e7f9      	b.n	801d086 <__mcmp+0x2a>
	...

0801d094 <__mdiff>:
 801d094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d098:	4689      	mov	r9, r1
 801d09a:	4606      	mov	r6, r0
 801d09c:	4611      	mov	r1, r2
 801d09e:	4648      	mov	r0, r9
 801d0a0:	4614      	mov	r4, r2
 801d0a2:	f7ff ffdb 	bl	801d05c <__mcmp>
 801d0a6:	1e05      	subs	r5, r0, #0
 801d0a8:	d112      	bne.n	801d0d0 <__mdiff+0x3c>
 801d0aa:	4629      	mov	r1, r5
 801d0ac:	4630      	mov	r0, r6
 801d0ae:	f7ff fd11 	bl	801cad4 <_Balloc>
 801d0b2:	4602      	mov	r2, r0
 801d0b4:	b928      	cbnz	r0, 801d0c2 <__mdiff+0x2e>
 801d0b6:	4b3f      	ldr	r3, [pc, #252]	@ (801d1b4 <__mdiff+0x120>)
 801d0b8:	f240 2137 	movw	r1, #567	@ 0x237
 801d0bc:	483e      	ldr	r0, [pc, #248]	@ (801d1b8 <__mdiff+0x124>)
 801d0be:	f7fe fb09 	bl	801b6d4 <__assert_func>
 801d0c2:	2301      	movs	r3, #1
 801d0c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d0c8:	4610      	mov	r0, r2
 801d0ca:	b003      	add	sp, #12
 801d0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0d0:	bfbc      	itt	lt
 801d0d2:	464b      	movlt	r3, r9
 801d0d4:	46a1      	movlt	r9, r4
 801d0d6:	4630      	mov	r0, r6
 801d0d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d0dc:	bfba      	itte	lt
 801d0de:	461c      	movlt	r4, r3
 801d0e0:	2501      	movlt	r5, #1
 801d0e2:	2500      	movge	r5, #0
 801d0e4:	f7ff fcf6 	bl	801cad4 <_Balloc>
 801d0e8:	4602      	mov	r2, r0
 801d0ea:	b918      	cbnz	r0, 801d0f4 <__mdiff+0x60>
 801d0ec:	4b31      	ldr	r3, [pc, #196]	@ (801d1b4 <__mdiff+0x120>)
 801d0ee:	f240 2145 	movw	r1, #581	@ 0x245
 801d0f2:	e7e3      	b.n	801d0bc <__mdiff+0x28>
 801d0f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d0f8:	6926      	ldr	r6, [r4, #16]
 801d0fa:	60c5      	str	r5, [r0, #12]
 801d0fc:	f109 0310 	add.w	r3, r9, #16
 801d100:	f109 0514 	add.w	r5, r9, #20
 801d104:	f104 0e14 	add.w	lr, r4, #20
 801d108:	f100 0b14 	add.w	fp, r0, #20
 801d10c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d110:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d114:	9301      	str	r3, [sp, #4]
 801d116:	46d9      	mov	r9, fp
 801d118:	f04f 0c00 	mov.w	ip, #0
 801d11c:	9b01      	ldr	r3, [sp, #4]
 801d11e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d122:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d126:	9301      	str	r3, [sp, #4]
 801d128:	fa1f f38a 	uxth.w	r3, sl
 801d12c:	4619      	mov	r1, r3
 801d12e:	b283      	uxth	r3, r0
 801d130:	1acb      	subs	r3, r1, r3
 801d132:	0c00      	lsrs	r0, r0, #16
 801d134:	4463      	add	r3, ip
 801d136:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d13a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d13e:	b29b      	uxth	r3, r3
 801d140:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d144:	4576      	cmp	r6, lr
 801d146:	f849 3b04 	str.w	r3, [r9], #4
 801d14a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d14e:	d8e5      	bhi.n	801d11c <__mdiff+0x88>
 801d150:	1b33      	subs	r3, r6, r4
 801d152:	3b15      	subs	r3, #21
 801d154:	f023 0303 	bic.w	r3, r3, #3
 801d158:	3415      	adds	r4, #21
 801d15a:	3304      	adds	r3, #4
 801d15c:	42a6      	cmp	r6, r4
 801d15e:	bf38      	it	cc
 801d160:	2304      	movcc	r3, #4
 801d162:	441d      	add	r5, r3
 801d164:	445b      	add	r3, fp
 801d166:	461e      	mov	r6, r3
 801d168:	462c      	mov	r4, r5
 801d16a:	4544      	cmp	r4, r8
 801d16c:	d30e      	bcc.n	801d18c <__mdiff+0xf8>
 801d16e:	f108 0103 	add.w	r1, r8, #3
 801d172:	1b49      	subs	r1, r1, r5
 801d174:	f021 0103 	bic.w	r1, r1, #3
 801d178:	3d03      	subs	r5, #3
 801d17a:	45a8      	cmp	r8, r5
 801d17c:	bf38      	it	cc
 801d17e:	2100      	movcc	r1, #0
 801d180:	440b      	add	r3, r1
 801d182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d186:	b191      	cbz	r1, 801d1ae <__mdiff+0x11a>
 801d188:	6117      	str	r7, [r2, #16]
 801d18a:	e79d      	b.n	801d0c8 <__mdiff+0x34>
 801d18c:	f854 1b04 	ldr.w	r1, [r4], #4
 801d190:	46e6      	mov	lr, ip
 801d192:	0c08      	lsrs	r0, r1, #16
 801d194:	fa1c fc81 	uxtah	ip, ip, r1
 801d198:	4471      	add	r1, lr
 801d19a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d19e:	b289      	uxth	r1, r1
 801d1a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d1a4:	f846 1b04 	str.w	r1, [r6], #4
 801d1a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d1ac:	e7dd      	b.n	801d16a <__mdiff+0xd6>
 801d1ae:	3f01      	subs	r7, #1
 801d1b0:	e7e7      	b.n	801d182 <__mdiff+0xee>
 801d1b2:	bf00      	nop
 801d1b4:	08021dbc 	.word	0x08021dbc
 801d1b8:	08021e2d 	.word	0x08021e2d

0801d1bc <__ulp>:
 801d1bc:	b082      	sub	sp, #8
 801d1be:	ed8d 0b00 	vstr	d0, [sp]
 801d1c2:	9a01      	ldr	r2, [sp, #4]
 801d1c4:	4b0f      	ldr	r3, [pc, #60]	@ (801d204 <__ulp+0x48>)
 801d1c6:	4013      	ands	r3, r2
 801d1c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	dc08      	bgt.n	801d1e2 <__ulp+0x26>
 801d1d0:	425b      	negs	r3, r3
 801d1d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d1d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d1da:	da04      	bge.n	801d1e6 <__ulp+0x2a>
 801d1dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d1e0:	4113      	asrs	r3, r2
 801d1e2:	2200      	movs	r2, #0
 801d1e4:	e008      	b.n	801d1f8 <__ulp+0x3c>
 801d1e6:	f1a2 0314 	sub.w	r3, r2, #20
 801d1ea:	2b1e      	cmp	r3, #30
 801d1ec:	bfda      	itte	le
 801d1ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d1f2:	40da      	lsrle	r2, r3
 801d1f4:	2201      	movgt	r2, #1
 801d1f6:	2300      	movs	r3, #0
 801d1f8:	4619      	mov	r1, r3
 801d1fa:	4610      	mov	r0, r2
 801d1fc:	ec41 0b10 	vmov	d0, r0, r1
 801d200:	b002      	add	sp, #8
 801d202:	4770      	bx	lr
 801d204:	7ff00000 	.word	0x7ff00000

0801d208 <__b2d>:
 801d208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d20c:	6906      	ldr	r6, [r0, #16]
 801d20e:	f100 0814 	add.w	r8, r0, #20
 801d212:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d216:	1f37      	subs	r7, r6, #4
 801d218:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d21c:	4610      	mov	r0, r2
 801d21e:	f7ff fd4b 	bl	801ccb8 <__hi0bits>
 801d222:	f1c0 0320 	rsb	r3, r0, #32
 801d226:	280a      	cmp	r0, #10
 801d228:	600b      	str	r3, [r1, #0]
 801d22a:	491b      	ldr	r1, [pc, #108]	@ (801d298 <__b2d+0x90>)
 801d22c:	dc15      	bgt.n	801d25a <__b2d+0x52>
 801d22e:	f1c0 0c0b 	rsb	ip, r0, #11
 801d232:	fa22 f30c 	lsr.w	r3, r2, ip
 801d236:	45b8      	cmp	r8, r7
 801d238:	ea43 0501 	orr.w	r5, r3, r1
 801d23c:	bf34      	ite	cc
 801d23e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d242:	2300      	movcs	r3, #0
 801d244:	3015      	adds	r0, #21
 801d246:	fa02 f000 	lsl.w	r0, r2, r0
 801d24a:	fa23 f30c 	lsr.w	r3, r3, ip
 801d24e:	4303      	orrs	r3, r0
 801d250:	461c      	mov	r4, r3
 801d252:	ec45 4b10 	vmov	d0, r4, r5
 801d256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d25a:	45b8      	cmp	r8, r7
 801d25c:	bf3a      	itte	cc
 801d25e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d262:	f1a6 0708 	subcc.w	r7, r6, #8
 801d266:	2300      	movcs	r3, #0
 801d268:	380b      	subs	r0, #11
 801d26a:	d012      	beq.n	801d292 <__b2d+0x8a>
 801d26c:	f1c0 0120 	rsb	r1, r0, #32
 801d270:	fa23 f401 	lsr.w	r4, r3, r1
 801d274:	4082      	lsls	r2, r0
 801d276:	4322      	orrs	r2, r4
 801d278:	4547      	cmp	r7, r8
 801d27a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d27e:	bf8c      	ite	hi
 801d280:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d284:	2200      	movls	r2, #0
 801d286:	4083      	lsls	r3, r0
 801d288:	40ca      	lsrs	r2, r1
 801d28a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d28e:	4313      	orrs	r3, r2
 801d290:	e7de      	b.n	801d250 <__b2d+0x48>
 801d292:	ea42 0501 	orr.w	r5, r2, r1
 801d296:	e7db      	b.n	801d250 <__b2d+0x48>
 801d298:	3ff00000 	.word	0x3ff00000

0801d29c <__d2b>:
 801d29c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d2a0:	460f      	mov	r7, r1
 801d2a2:	2101      	movs	r1, #1
 801d2a4:	ec59 8b10 	vmov	r8, r9, d0
 801d2a8:	4616      	mov	r6, r2
 801d2aa:	f7ff fc13 	bl	801cad4 <_Balloc>
 801d2ae:	4604      	mov	r4, r0
 801d2b0:	b930      	cbnz	r0, 801d2c0 <__d2b+0x24>
 801d2b2:	4602      	mov	r2, r0
 801d2b4:	4b23      	ldr	r3, [pc, #140]	@ (801d344 <__d2b+0xa8>)
 801d2b6:	4824      	ldr	r0, [pc, #144]	@ (801d348 <__d2b+0xac>)
 801d2b8:	f240 310f 	movw	r1, #783	@ 0x30f
 801d2bc:	f7fe fa0a 	bl	801b6d4 <__assert_func>
 801d2c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d2c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d2c8:	b10d      	cbz	r5, 801d2ce <__d2b+0x32>
 801d2ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d2ce:	9301      	str	r3, [sp, #4]
 801d2d0:	f1b8 0300 	subs.w	r3, r8, #0
 801d2d4:	d023      	beq.n	801d31e <__d2b+0x82>
 801d2d6:	4668      	mov	r0, sp
 801d2d8:	9300      	str	r3, [sp, #0]
 801d2da:	f7ff fd0c 	bl	801ccf6 <__lo0bits>
 801d2de:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d2e2:	b1d0      	cbz	r0, 801d31a <__d2b+0x7e>
 801d2e4:	f1c0 0320 	rsb	r3, r0, #32
 801d2e8:	fa02 f303 	lsl.w	r3, r2, r3
 801d2ec:	430b      	orrs	r3, r1
 801d2ee:	40c2      	lsrs	r2, r0
 801d2f0:	6163      	str	r3, [r4, #20]
 801d2f2:	9201      	str	r2, [sp, #4]
 801d2f4:	9b01      	ldr	r3, [sp, #4]
 801d2f6:	61a3      	str	r3, [r4, #24]
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	bf0c      	ite	eq
 801d2fc:	2201      	moveq	r2, #1
 801d2fe:	2202      	movne	r2, #2
 801d300:	6122      	str	r2, [r4, #16]
 801d302:	b1a5      	cbz	r5, 801d32e <__d2b+0x92>
 801d304:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d308:	4405      	add	r5, r0
 801d30a:	603d      	str	r5, [r7, #0]
 801d30c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d310:	6030      	str	r0, [r6, #0]
 801d312:	4620      	mov	r0, r4
 801d314:	b003      	add	sp, #12
 801d316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d31a:	6161      	str	r1, [r4, #20]
 801d31c:	e7ea      	b.n	801d2f4 <__d2b+0x58>
 801d31e:	a801      	add	r0, sp, #4
 801d320:	f7ff fce9 	bl	801ccf6 <__lo0bits>
 801d324:	9b01      	ldr	r3, [sp, #4]
 801d326:	6163      	str	r3, [r4, #20]
 801d328:	3020      	adds	r0, #32
 801d32a:	2201      	movs	r2, #1
 801d32c:	e7e8      	b.n	801d300 <__d2b+0x64>
 801d32e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d332:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d336:	6038      	str	r0, [r7, #0]
 801d338:	6918      	ldr	r0, [r3, #16]
 801d33a:	f7ff fcbd 	bl	801ccb8 <__hi0bits>
 801d33e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d342:	e7e5      	b.n	801d310 <__d2b+0x74>
 801d344:	08021dbc 	.word	0x08021dbc
 801d348:	08021e2d 	.word	0x08021e2d

0801d34c <__ratio>:
 801d34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d350:	b085      	sub	sp, #20
 801d352:	e9cd 1000 	strd	r1, r0, [sp]
 801d356:	a902      	add	r1, sp, #8
 801d358:	f7ff ff56 	bl	801d208 <__b2d>
 801d35c:	9800      	ldr	r0, [sp, #0]
 801d35e:	a903      	add	r1, sp, #12
 801d360:	ec55 4b10 	vmov	r4, r5, d0
 801d364:	f7ff ff50 	bl	801d208 <__b2d>
 801d368:	9b01      	ldr	r3, [sp, #4]
 801d36a:	6919      	ldr	r1, [r3, #16]
 801d36c:	9b00      	ldr	r3, [sp, #0]
 801d36e:	691b      	ldr	r3, [r3, #16]
 801d370:	1ac9      	subs	r1, r1, r3
 801d372:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d376:	1a9b      	subs	r3, r3, r2
 801d378:	ec5b ab10 	vmov	sl, fp, d0
 801d37c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d380:	2b00      	cmp	r3, #0
 801d382:	bfce      	itee	gt
 801d384:	462a      	movgt	r2, r5
 801d386:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d38a:	465a      	movle	r2, fp
 801d38c:	462f      	mov	r7, r5
 801d38e:	46d9      	mov	r9, fp
 801d390:	bfcc      	ite	gt
 801d392:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d396:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d39a:	464b      	mov	r3, r9
 801d39c:	4652      	mov	r2, sl
 801d39e:	4620      	mov	r0, r4
 801d3a0:	4639      	mov	r1, r7
 801d3a2:	f7e3 fa2b 	bl	80007fc <__aeabi_ddiv>
 801d3a6:	ec41 0b10 	vmov	d0, r0, r1
 801d3aa:	b005      	add	sp, #20
 801d3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3b0 <__copybits>:
 801d3b0:	3901      	subs	r1, #1
 801d3b2:	b570      	push	{r4, r5, r6, lr}
 801d3b4:	1149      	asrs	r1, r1, #5
 801d3b6:	6914      	ldr	r4, [r2, #16]
 801d3b8:	3101      	adds	r1, #1
 801d3ba:	f102 0314 	add.w	r3, r2, #20
 801d3be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d3c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d3c6:	1f05      	subs	r5, r0, #4
 801d3c8:	42a3      	cmp	r3, r4
 801d3ca:	d30c      	bcc.n	801d3e6 <__copybits+0x36>
 801d3cc:	1aa3      	subs	r3, r4, r2
 801d3ce:	3b11      	subs	r3, #17
 801d3d0:	f023 0303 	bic.w	r3, r3, #3
 801d3d4:	3211      	adds	r2, #17
 801d3d6:	42a2      	cmp	r2, r4
 801d3d8:	bf88      	it	hi
 801d3da:	2300      	movhi	r3, #0
 801d3dc:	4418      	add	r0, r3
 801d3de:	2300      	movs	r3, #0
 801d3e0:	4288      	cmp	r0, r1
 801d3e2:	d305      	bcc.n	801d3f0 <__copybits+0x40>
 801d3e4:	bd70      	pop	{r4, r5, r6, pc}
 801d3e6:	f853 6b04 	ldr.w	r6, [r3], #4
 801d3ea:	f845 6f04 	str.w	r6, [r5, #4]!
 801d3ee:	e7eb      	b.n	801d3c8 <__copybits+0x18>
 801d3f0:	f840 3b04 	str.w	r3, [r0], #4
 801d3f4:	e7f4      	b.n	801d3e0 <__copybits+0x30>

0801d3f6 <__any_on>:
 801d3f6:	f100 0214 	add.w	r2, r0, #20
 801d3fa:	6900      	ldr	r0, [r0, #16]
 801d3fc:	114b      	asrs	r3, r1, #5
 801d3fe:	4298      	cmp	r0, r3
 801d400:	b510      	push	{r4, lr}
 801d402:	db11      	blt.n	801d428 <__any_on+0x32>
 801d404:	dd0a      	ble.n	801d41c <__any_on+0x26>
 801d406:	f011 011f 	ands.w	r1, r1, #31
 801d40a:	d007      	beq.n	801d41c <__any_on+0x26>
 801d40c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d410:	fa24 f001 	lsr.w	r0, r4, r1
 801d414:	fa00 f101 	lsl.w	r1, r0, r1
 801d418:	428c      	cmp	r4, r1
 801d41a:	d10b      	bne.n	801d434 <__any_on+0x3e>
 801d41c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d420:	4293      	cmp	r3, r2
 801d422:	d803      	bhi.n	801d42c <__any_on+0x36>
 801d424:	2000      	movs	r0, #0
 801d426:	bd10      	pop	{r4, pc}
 801d428:	4603      	mov	r3, r0
 801d42a:	e7f7      	b.n	801d41c <__any_on+0x26>
 801d42c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d430:	2900      	cmp	r1, #0
 801d432:	d0f5      	beq.n	801d420 <__any_on+0x2a>
 801d434:	2001      	movs	r0, #1
 801d436:	e7f6      	b.n	801d426 <__any_on+0x30>

0801d438 <__ascii_wctomb>:
 801d438:	4603      	mov	r3, r0
 801d43a:	4608      	mov	r0, r1
 801d43c:	b141      	cbz	r1, 801d450 <__ascii_wctomb+0x18>
 801d43e:	2aff      	cmp	r2, #255	@ 0xff
 801d440:	d904      	bls.n	801d44c <__ascii_wctomb+0x14>
 801d442:	228a      	movs	r2, #138	@ 0x8a
 801d444:	601a      	str	r2, [r3, #0]
 801d446:	f04f 30ff 	mov.w	r0, #4294967295
 801d44a:	4770      	bx	lr
 801d44c:	700a      	strb	r2, [r1, #0]
 801d44e:	2001      	movs	r0, #1
 801d450:	4770      	bx	lr

0801d452 <__ssputs_r>:
 801d452:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d456:	688e      	ldr	r6, [r1, #8]
 801d458:	461f      	mov	r7, r3
 801d45a:	42be      	cmp	r6, r7
 801d45c:	680b      	ldr	r3, [r1, #0]
 801d45e:	4682      	mov	sl, r0
 801d460:	460c      	mov	r4, r1
 801d462:	4690      	mov	r8, r2
 801d464:	d82d      	bhi.n	801d4c2 <__ssputs_r+0x70>
 801d466:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d46a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d46e:	d026      	beq.n	801d4be <__ssputs_r+0x6c>
 801d470:	6965      	ldr	r5, [r4, #20]
 801d472:	6909      	ldr	r1, [r1, #16]
 801d474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d478:	eba3 0901 	sub.w	r9, r3, r1
 801d47c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d480:	1c7b      	adds	r3, r7, #1
 801d482:	444b      	add	r3, r9
 801d484:	106d      	asrs	r5, r5, #1
 801d486:	429d      	cmp	r5, r3
 801d488:	bf38      	it	cc
 801d48a:	461d      	movcc	r5, r3
 801d48c:	0553      	lsls	r3, r2, #21
 801d48e:	d527      	bpl.n	801d4e0 <__ssputs_r+0x8e>
 801d490:	4629      	mov	r1, r5
 801d492:	f7fc f8a1 	bl	80195d8 <_malloc_r>
 801d496:	4606      	mov	r6, r0
 801d498:	b360      	cbz	r0, 801d4f4 <__ssputs_r+0xa2>
 801d49a:	6921      	ldr	r1, [r4, #16]
 801d49c:	464a      	mov	r2, r9
 801d49e:	f7fe f8fc 	bl	801b69a <memcpy>
 801d4a2:	89a3      	ldrh	r3, [r4, #12]
 801d4a4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d4a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d4ac:	81a3      	strh	r3, [r4, #12]
 801d4ae:	6126      	str	r6, [r4, #16]
 801d4b0:	6165      	str	r5, [r4, #20]
 801d4b2:	444e      	add	r6, r9
 801d4b4:	eba5 0509 	sub.w	r5, r5, r9
 801d4b8:	6026      	str	r6, [r4, #0]
 801d4ba:	60a5      	str	r5, [r4, #8]
 801d4bc:	463e      	mov	r6, r7
 801d4be:	42be      	cmp	r6, r7
 801d4c0:	d900      	bls.n	801d4c4 <__ssputs_r+0x72>
 801d4c2:	463e      	mov	r6, r7
 801d4c4:	6820      	ldr	r0, [r4, #0]
 801d4c6:	4632      	mov	r2, r6
 801d4c8:	4641      	mov	r1, r8
 801d4ca:	f000 fbad 	bl	801dc28 <memmove>
 801d4ce:	68a3      	ldr	r3, [r4, #8]
 801d4d0:	1b9b      	subs	r3, r3, r6
 801d4d2:	60a3      	str	r3, [r4, #8]
 801d4d4:	6823      	ldr	r3, [r4, #0]
 801d4d6:	4433      	add	r3, r6
 801d4d8:	6023      	str	r3, [r4, #0]
 801d4da:	2000      	movs	r0, #0
 801d4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4e0:	462a      	mov	r2, r5
 801d4e2:	f000 fbd6 	bl	801dc92 <_realloc_r>
 801d4e6:	4606      	mov	r6, r0
 801d4e8:	2800      	cmp	r0, #0
 801d4ea:	d1e0      	bne.n	801d4ae <__ssputs_r+0x5c>
 801d4ec:	6921      	ldr	r1, [r4, #16]
 801d4ee:	4650      	mov	r0, sl
 801d4f0:	f7fe ff5a 	bl	801c3a8 <_free_r>
 801d4f4:	230c      	movs	r3, #12
 801d4f6:	f8ca 3000 	str.w	r3, [sl]
 801d4fa:	89a3      	ldrh	r3, [r4, #12]
 801d4fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d500:	81a3      	strh	r3, [r4, #12]
 801d502:	f04f 30ff 	mov.w	r0, #4294967295
 801d506:	e7e9      	b.n	801d4dc <__ssputs_r+0x8a>

0801d508 <_svfiprintf_r>:
 801d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d50c:	4698      	mov	r8, r3
 801d50e:	898b      	ldrh	r3, [r1, #12]
 801d510:	061b      	lsls	r3, r3, #24
 801d512:	b09d      	sub	sp, #116	@ 0x74
 801d514:	4607      	mov	r7, r0
 801d516:	460d      	mov	r5, r1
 801d518:	4614      	mov	r4, r2
 801d51a:	d510      	bpl.n	801d53e <_svfiprintf_r+0x36>
 801d51c:	690b      	ldr	r3, [r1, #16]
 801d51e:	b973      	cbnz	r3, 801d53e <_svfiprintf_r+0x36>
 801d520:	2140      	movs	r1, #64	@ 0x40
 801d522:	f7fc f859 	bl	80195d8 <_malloc_r>
 801d526:	6028      	str	r0, [r5, #0]
 801d528:	6128      	str	r0, [r5, #16]
 801d52a:	b930      	cbnz	r0, 801d53a <_svfiprintf_r+0x32>
 801d52c:	230c      	movs	r3, #12
 801d52e:	603b      	str	r3, [r7, #0]
 801d530:	f04f 30ff 	mov.w	r0, #4294967295
 801d534:	b01d      	add	sp, #116	@ 0x74
 801d536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d53a:	2340      	movs	r3, #64	@ 0x40
 801d53c:	616b      	str	r3, [r5, #20]
 801d53e:	2300      	movs	r3, #0
 801d540:	9309      	str	r3, [sp, #36]	@ 0x24
 801d542:	2320      	movs	r3, #32
 801d544:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d548:	f8cd 800c 	str.w	r8, [sp, #12]
 801d54c:	2330      	movs	r3, #48	@ 0x30
 801d54e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d6ec <_svfiprintf_r+0x1e4>
 801d552:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d556:	f04f 0901 	mov.w	r9, #1
 801d55a:	4623      	mov	r3, r4
 801d55c:	469a      	mov	sl, r3
 801d55e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d562:	b10a      	cbz	r2, 801d568 <_svfiprintf_r+0x60>
 801d564:	2a25      	cmp	r2, #37	@ 0x25
 801d566:	d1f9      	bne.n	801d55c <_svfiprintf_r+0x54>
 801d568:	ebba 0b04 	subs.w	fp, sl, r4
 801d56c:	d00b      	beq.n	801d586 <_svfiprintf_r+0x7e>
 801d56e:	465b      	mov	r3, fp
 801d570:	4622      	mov	r2, r4
 801d572:	4629      	mov	r1, r5
 801d574:	4638      	mov	r0, r7
 801d576:	f7ff ff6c 	bl	801d452 <__ssputs_r>
 801d57a:	3001      	adds	r0, #1
 801d57c:	f000 80a7 	beq.w	801d6ce <_svfiprintf_r+0x1c6>
 801d580:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d582:	445a      	add	r2, fp
 801d584:	9209      	str	r2, [sp, #36]	@ 0x24
 801d586:	f89a 3000 	ldrb.w	r3, [sl]
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	f000 809f 	beq.w	801d6ce <_svfiprintf_r+0x1c6>
 801d590:	2300      	movs	r3, #0
 801d592:	f04f 32ff 	mov.w	r2, #4294967295
 801d596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d59a:	f10a 0a01 	add.w	sl, sl, #1
 801d59e:	9304      	str	r3, [sp, #16]
 801d5a0:	9307      	str	r3, [sp, #28]
 801d5a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d5a6:	931a      	str	r3, [sp, #104]	@ 0x68
 801d5a8:	4654      	mov	r4, sl
 801d5aa:	2205      	movs	r2, #5
 801d5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d5b0:	484e      	ldr	r0, [pc, #312]	@ (801d6ec <_svfiprintf_r+0x1e4>)
 801d5b2:	f7e2 fde5 	bl	8000180 <memchr>
 801d5b6:	9a04      	ldr	r2, [sp, #16]
 801d5b8:	b9d8      	cbnz	r0, 801d5f2 <_svfiprintf_r+0xea>
 801d5ba:	06d0      	lsls	r0, r2, #27
 801d5bc:	bf44      	itt	mi
 801d5be:	2320      	movmi	r3, #32
 801d5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d5c4:	0711      	lsls	r1, r2, #28
 801d5c6:	bf44      	itt	mi
 801d5c8:	232b      	movmi	r3, #43	@ 0x2b
 801d5ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d5ce:	f89a 3000 	ldrb.w	r3, [sl]
 801d5d2:	2b2a      	cmp	r3, #42	@ 0x2a
 801d5d4:	d015      	beq.n	801d602 <_svfiprintf_r+0xfa>
 801d5d6:	9a07      	ldr	r2, [sp, #28]
 801d5d8:	4654      	mov	r4, sl
 801d5da:	2000      	movs	r0, #0
 801d5dc:	f04f 0c0a 	mov.w	ip, #10
 801d5e0:	4621      	mov	r1, r4
 801d5e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d5e6:	3b30      	subs	r3, #48	@ 0x30
 801d5e8:	2b09      	cmp	r3, #9
 801d5ea:	d94b      	bls.n	801d684 <_svfiprintf_r+0x17c>
 801d5ec:	b1b0      	cbz	r0, 801d61c <_svfiprintf_r+0x114>
 801d5ee:	9207      	str	r2, [sp, #28]
 801d5f0:	e014      	b.n	801d61c <_svfiprintf_r+0x114>
 801d5f2:	eba0 0308 	sub.w	r3, r0, r8
 801d5f6:	fa09 f303 	lsl.w	r3, r9, r3
 801d5fa:	4313      	orrs	r3, r2
 801d5fc:	9304      	str	r3, [sp, #16]
 801d5fe:	46a2      	mov	sl, r4
 801d600:	e7d2      	b.n	801d5a8 <_svfiprintf_r+0xa0>
 801d602:	9b03      	ldr	r3, [sp, #12]
 801d604:	1d19      	adds	r1, r3, #4
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	9103      	str	r1, [sp, #12]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	bfbb      	ittet	lt
 801d60e:	425b      	neglt	r3, r3
 801d610:	f042 0202 	orrlt.w	r2, r2, #2
 801d614:	9307      	strge	r3, [sp, #28]
 801d616:	9307      	strlt	r3, [sp, #28]
 801d618:	bfb8      	it	lt
 801d61a:	9204      	strlt	r2, [sp, #16]
 801d61c:	7823      	ldrb	r3, [r4, #0]
 801d61e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d620:	d10a      	bne.n	801d638 <_svfiprintf_r+0x130>
 801d622:	7863      	ldrb	r3, [r4, #1]
 801d624:	2b2a      	cmp	r3, #42	@ 0x2a
 801d626:	d132      	bne.n	801d68e <_svfiprintf_r+0x186>
 801d628:	9b03      	ldr	r3, [sp, #12]
 801d62a:	1d1a      	adds	r2, r3, #4
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	9203      	str	r2, [sp, #12]
 801d630:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d634:	3402      	adds	r4, #2
 801d636:	9305      	str	r3, [sp, #20]
 801d638:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d6fc <_svfiprintf_r+0x1f4>
 801d63c:	7821      	ldrb	r1, [r4, #0]
 801d63e:	2203      	movs	r2, #3
 801d640:	4650      	mov	r0, sl
 801d642:	f7e2 fd9d 	bl	8000180 <memchr>
 801d646:	b138      	cbz	r0, 801d658 <_svfiprintf_r+0x150>
 801d648:	9b04      	ldr	r3, [sp, #16]
 801d64a:	eba0 000a 	sub.w	r0, r0, sl
 801d64e:	2240      	movs	r2, #64	@ 0x40
 801d650:	4082      	lsls	r2, r0
 801d652:	4313      	orrs	r3, r2
 801d654:	3401      	adds	r4, #1
 801d656:	9304      	str	r3, [sp, #16]
 801d658:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d65c:	4824      	ldr	r0, [pc, #144]	@ (801d6f0 <_svfiprintf_r+0x1e8>)
 801d65e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d662:	2206      	movs	r2, #6
 801d664:	f7e2 fd8c 	bl	8000180 <memchr>
 801d668:	2800      	cmp	r0, #0
 801d66a:	d036      	beq.n	801d6da <_svfiprintf_r+0x1d2>
 801d66c:	4b21      	ldr	r3, [pc, #132]	@ (801d6f4 <_svfiprintf_r+0x1ec>)
 801d66e:	bb1b      	cbnz	r3, 801d6b8 <_svfiprintf_r+0x1b0>
 801d670:	9b03      	ldr	r3, [sp, #12]
 801d672:	3307      	adds	r3, #7
 801d674:	f023 0307 	bic.w	r3, r3, #7
 801d678:	3308      	adds	r3, #8
 801d67a:	9303      	str	r3, [sp, #12]
 801d67c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d67e:	4433      	add	r3, r6
 801d680:	9309      	str	r3, [sp, #36]	@ 0x24
 801d682:	e76a      	b.n	801d55a <_svfiprintf_r+0x52>
 801d684:	fb0c 3202 	mla	r2, ip, r2, r3
 801d688:	460c      	mov	r4, r1
 801d68a:	2001      	movs	r0, #1
 801d68c:	e7a8      	b.n	801d5e0 <_svfiprintf_r+0xd8>
 801d68e:	2300      	movs	r3, #0
 801d690:	3401      	adds	r4, #1
 801d692:	9305      	str	r3, [sp, #20]
 801d694:	4619      	mov	r1, r3
 801d696:	f04f 0c0a 	mov.w	ip, #10
 801d69a:	4620      	mov	r0, r4
 801d69c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d6a0:	3a30      	subs	r2, #48	@ 0x30
 801d6a2:	2a09      	cmp	r2, #9
 801d6a4:	d903      	bls.n	801d6ae <_svfiprintf_r+0x1a6>
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	d0c6      	beq.n	801d638 <_svfiprintf_r+0x130>
 801d6aa:	9105      	str	r1, [sp, #20]
 801d6ac:	e7c4      	b.n	801d638 <_svfiprintf_r+0x130>
 801d6ae:	fb0c 2101 	mla	r1, ip, r1, r2
 801d6b2:	4604      	mov	r4, r0
 801d6b4:	2301      	movs	r3, #1
 801d6b6:	e7f0      	b.n	801d69a <_svfiprintf_r+0x192>
 801d6b8:	ab03      	add	r3, sp, #12
 801d6ba:	9300      	str	r3, [sp, #0]
 801d6bc:	462a      	mov	r2, r5
 801d6be:	4b0e      	ldr	r3, [pc, #56]	@ (801d6f8 <_svfiprintf_r+0x1f0>)
 801d6c0:	a904      	add	r1, sp, #16
 801d6c2:	4638      	mov	r0, r7
 801d6c4:	f7fc ffa8 	bl	801a618 <_printf_float>
 801d6c8:	1c42      	adds	r2, r0, #1
 801d6ca:	4606      	mov	r6, r0
 801d6cc:	d1d6      	bne.n	801d67c <_svfiprintf_r+0x174>
 801d6ce:	89ab      	ldrh	r3, [r5, #12]
 801d6d0:	065b      	lsls	r3, r3, #25
 801d6d2:	f53f af2d 	bmi.w	801d530 <_svfiprintf_r+0x28>
 801d6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d6d8:	e72c      	b.n	801d534 <_svfiprintf_r+0x2c>
 801d6da:	ab03      	add	r3, sp, #12
 801d6dc:	9300      	str	r3, [sp, #0]
 801d6de:	462a      	mov	r2, r5
 801d6e0:	4b05      	ldr	r3, [pc, #20]	@ (801d6f8 <_svfiprintf_r+0x1f0>)
 801d6e2:	a904      	add	r1, sp, #16
 801d6e4:	4638      	mov	r0, r7
 801d6e6:	f7fd fa2f 	bl	801ab48 <_printf_i>
 801d6ea:	e7ed      	b.n	801d6c8 <_svfiprintf_r+0x1c0>
 801d6ec:	08021f88 	.word	0x08021f88
 801d6f0:	08021f92 	.word	0x08021f92
 801d6f4:	0801a619 	.word	0x0801a619
 801d6f8:	0801d453 	.word	0x0801d453
 801d6fc:	08021f8e 	.word	0x08021f8e

0801d700 <__sfputc_r>:
 801d700:	6893      	ldr	r3, [r2, #8]
 801d702:	3b01      	subs	r3, #1
 801d704:	2b00      	cmp	r3, #0
 801d706:	b410      	push	{r4}
 801d708:	6093      	str	r3, [r2, #8]
 801d70a:	da08      	bge.n	801d71e <__sfputc_r+0x1e>
 801d70c:	6994      	ldr	r4, [r2, #24]
 801d70e:	42a3      	cmp	r3, r4
 801d710:	db01      	blt.n	801d716 <__sfputc_r+0x16>
 801d712:	290a      	cmp	r1, #10
 801d714:	d103      	bne.n	801d71e <__sfputc_r+0x1e>
 801d716:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d71a:	f000 b9f1 	b.w	801db00 <__swbuf_r>
 801d71e:	6813      	ldr	r3, [r2, #0]
 801d720:	1c58      	adds	r0, r3, #1
 801d722:	6010      	str	r0, [r2, #0]
 801d724:	7019      	strb	r1, [r3, #0]
 801d726:	4608      	mov	r0, r1
 801d728:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d72c:	4770      	bx	lr

0801d72e <__sfputs_r>:
 801d72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d730:	4606      	mov	r6, r0
 801d732:	460f      	mov	r7, r1
 801d734:	4614      	mov	r4, r2
 801d736:	18d5      	adds	r5, r2, r3
 801d738:	42ac      	cmp	r4, r5
 801d73a:	d101      	bne.n	801d740 <__sfputs_r+0x12>
 801d73c:	2000      	movs	r0, #0
 801d73e:	e007      	b.n	801d750 <__sfputs_r+0x22>
 801d740:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d744:	463a      	mov	r2, r7
 801d746:	4630      	mov	r0, r6
 801d748:	f7ff ffda 	bl	801d700 <__sfputc_r>
 801d74c:	1c43      	adds	r3, r0, #1
 801d74e:	d1f3      	bne.n	801d738 <__sfputs_r+0xa>
 801d750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d754 <_vfiprintf_r>:
 801d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d758:	460d      	mov	r5, r1
 801d75a:	b09d      	sub	sp, #116	@ 0x74
 801d75c:	4614      	mov	r4, r2
 801d75e:	4698      	mov	r8, r3
 801d760:	4606      	mov	r6, r0
 801d762:	b118      	cbz	r0, 801d76c <_vfiprintf_r+0x18>
 801d764:	6a03      	ldr	r3, [r0, #32]
 801d766:	b90b      	cbnz	r3, 801d76c <_vfiprintf_r+0x18>
 801d768:	f7fd fdae 	bl	801b2c8 <__sinit>
 801d76c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d76e:	07d9      	lsls	r1, r3, #31
 801d770:	d405      	bmi.n	801d77e <_vfiprintf_r+0x2a>
 801d772:	89ab      	ldrh	r3, [r5, #12]
 801d774:	059a      	lsls	r2, r3, #22
 801d776:	d402      	bmi.n	801d77e <_vfiprintf_r+0x2a>
 801d778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d77a:	f7fd ff84 	bl	801b686 <__retarget_lock_acquire_recursive>
 801d77e:	89ab      	ldrh	r3, [r5, #12]
 801d780:	071b      	lsls	r3, r3, #28
 801d782:	d501      	bpl.n	801d788 <_vfiprintf_r+0x34>
 801d784:	692b      	ldr	r3, [r5, #16]
 801d786:	b99b      	cbnz	r3, 801d7b0 <_vfiprintf_r+0x5c>
 801d788:	4629      	mov	r1, r5
 801d78a:	4630      	mov	r0, r6
 801d78c:	f000 f9f6 	bl	801db7c <__swsetup_r>
 801d790:	b170      	cbz	r0, 801d7b0 <_vfiprintf_r+0x5c>
 801d792:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d794:	07dc      	lsls	r4, r3, #31
 801d796:	d504      	bpl.n	801d7a2 <_vfiprintf_r+0x4e>
 801d798:	f04f 30ff 	mov.w	r0, #4294967295
 801d79c:	b01d      	add	sp, #116	@ 0x74
 801d79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7a2:	89ab      	ldrh	r3, [r5, #12]
 801d7a4:	0598      	lsls	r0, r3, #22
 801d7a6:	d4f7      	bmi.n	801d798 <_vfiprintf_r+0x44>
 801d7a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d7aa:	f7fd ff6d 	bl	801b688 <__retarget_lock_release_recursive>
 801d7ae:	e7f3      	b.n	801d798 <_vfiprintf_r+0x44>
 801d7b0:	2300      	movs	r3, #0
 801d7b2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7b4:	2320      	movs	r3, #32
 801d7b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d7ba:	f8cd 800c 	str.w	r8, [sp, #12]
 801d7be:	2330      	movs	r3, #48	@ 0x30
 801d7c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d970 <_vfiprintf_r+0x21c>
 801d7c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d7c8:	f04f 0901 	mov.w	r9, #1
 801d7cc:	4623      	mov	r3, r4
 801d7ce:	469a      	mov	sl, r3
 801d7d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d7d4:	b10a      	cbz	r2, 801d7da <_vfiprintf_r+0x86>
 801d7d6:	2a25      	cmp	r2, #37	@ 0x25
 801d7d8:	d1f9      	bne.n	801d7ce <_vfiprintf_r+0x7a>
 801d7da:	ebba 0b04 	subs.w	fp, sl, r4
 801d7de:	d00b      	beq.n	801d7f8 <_vfiprintf_r+0xa4>
 801d7e0:	465b      	mov	r3, fp
 801d7e2:	4622      	mov	r2, r4
 801d7e4:	4629      	mov	r1, r5
 801d7e6:	4630      	mov	r0, r6
 801d7e8:	f7ff ffa1 	bl	801d72e <__sfputs_r>
 801d7ec:	3001      	adds	r0, #1
 801d7ee:	f000 80a7 	beq.w	801d940 <_vfiprintf_r+0x1ec>
 801d7f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d7f4:	445a      	add	r2, fp
 801d7f6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d7f8:	f89a 3000 	ldrb.w	r3, [sl]
 801d7fc:	2b00      	cmp	r3, #0
 801d7fe:	f000 809f 	beq.w	801d940 <_vfiprintf_r+0x1ec>
 801d802:	2300      	movs	r3, #0
 801d804:	f04f 32ff 	mov.w	r2, #4294967295
 801d808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d80c:	f10a 0a01 	add.w	sl, sl, #1
 801d810:	9304      	str	r3, [sp, #16]
 801d812:	9307      	str	r3, [sp, #28]
 801d814:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d818:	931a      	str	r3, [sp, #104]	@ 0x68
 801d81a:	4654      	mov	r4, sl
 801d81c:	2205      	movs	r2, #5
 801d81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d822:	4853      	ldr	r0, [pc, #332]	@ (801d970 <_vfiprintf_r+0x21c>)
 801d824:	f7e2 fcac 	bl	8000180 <memchr>
 801d828:	9a04      	ldr	r2, [sp, #16]
 801d82a:	b9d8      	cbnz	r0, 801d864 <_vfiprintf_r+0x110>
 801d82c:	06d1      	lsls	r1, r2, #27
 801d82e:	bf44      	itt	mi
 801d830:	2320      	movmi	r3, #32
 801d832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d836:	0713      	lsls	r3, r2, #28
 801d838:	bf44      	itt	mi
 801d83a:	232b      	movmi	r3, #43	@ 0x2b
 801d83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d840:	f89a 3000 	ldrb.w	r3, [sl]
 801d844:	2b2a      	cmp	r3, #42	@ 0x2a
 801d846:	d015      	beq.n	801d874 <_vfiprintf_r+0x120>
 801d848:	9a07      	ldr	r2, [sp, #28]
 801d84a:	4654      	mov	r4, sl
 801d84c:	2000      	movs	r0, #0
 801d84e:	f04f 0c0a 	mov.w	ip, #10
 801d852:	4621      	mov	r1, r4
 801d854:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d858:	3b30      	subs	r3, #48	@ 0x30
 801d85a:	2b09      	cmp	r3, #9
 801d85c:	d94b      	bls.n	801d8f6 <_vfiprintf_r+0x1a2>
 801d85e:	b1b0      	cbz	r0, 801d88e <_vfiprintf_r+0x13a>
 801d860:	9207      	str	r2, [sp, #28]
 801d862:	e014      	b.n	801d88e <_vfiprintf_r+0x13a>
 801d864:	eba0 0308 	sub.w	r3, r0, r8
 801d868:	fa09 f303 	lsl.w	r3, r9, r3
 801d86c:	4313      	orrs	r3, r2
 801d86e:	9304      	str	r3, [sp, #16]
 801d870:	46a2      	mov	sl, r4
 801d872:	e7d2      	b.n	801d81a <_vfiprintf_r+0xc6>
 801d874:	9b03      	ldr	r3, [sp, #12]
 801d876:	1d19      	adds	r1, r3, #4
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	9103      	str	r1, [sp, #12]
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	bfbb      	ittet	lt
 801d880:	425b      	neglt	r3, r3
 801d882:	f042 0202 	orrlt.w	r2, r2, #2
 801d886:	9307      	strge	r3, [sp, #28]
 801d888:	9307      	strlt	r3, [sp, #28]
 801d88a:	bfb8      	it	lt
 801d88c:	9204      	strlt	r2, [sp, #16]
 801d88e:	7823      	ldrb	r3, [r4, #0]
 801d890:	2b2e      	cmp	r3, #46	@ 0x2e
 801d892:	d10a      	bne.n	801d8aa <_vfiprintf_r+0x156>
 801d894:	7863      	ldrb	r3, [r4, #1]
 801d896:	2b2a      	cmp	r3, #42	@ 0x2a
 801d898:	d132      	bne.n	801d900 <_vfiprintf_r+0x1ac>
 801d89a:	9b03      	ldr	r3, [sp, #12]
 801d89c:	1d1a      	adds	r2, r3, #4
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	9203      	str	r2, [sp, #12]
 801d8a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d8a6:	3402      	adds	r4, #2
 801d8a8:	9305      	str	r3, [sp, #20]
 801d8aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d980 <_vfiprintf_r+0x22c>
 801d8ae:	7821      	ldrb	r1, [r4, #0]
 801d8b0:	2203      	movs	r2, #3
 801d8b2:	4650      	mov	r0, sl
 801d8b4:	f7e2 fc64 	bl	8000180 <memchr>
 801d8b8:	b138      	cbz	r0, 801d8ca <_vfiprintf_r+0x176>
 801d8ba:	9b04      	ldr	r3, [sp, #16]
 801d8bc:	eba0 000a 	sub.w	r0, r0, sl
 801d8c0:	2240      	movs	r2, #64	@ 0x40
 801d8c2:	4082      	lsls	r2, r0
 801d8c4:	4313      	orrs	r3, r2
 801d8c6:	3401      	adds	r4, #1
 801d8c8:	9304      	str	r3, [sp, #16]
 801d8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8ce:	4829      	ldr	r0, [pc, #164]	@ (801d974 <_vfiprintf_r+0x220>)
 801d8d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d8d4:	2206      	movs	r2, #6
 801d8d6:	f7e2 fc53 	bl	8000180 <memchr>
 801d8da:	2800      	cmp	r0, #0
 801d8dc:	d03f      	beq.n	801d95e <_vfiprintf_r+0x20a>
 801d8de:	4b26      	ldr	r3, [pc, #152]	@ (801d978 <_vfiprintf_r+0x224>)
 801d8e0:	bb1b      	cbnz	r3, 801d92a <_vfiprintf_r+0x1d6>
 801d8e2:	9b03      	ldr	r3, [sp, #12]
 801d8e4:	3307      	adds	r3, #7
 801d8e6:	f023 0307 	bic.w	r3, r3, #7
 801d8ea:	3308      	adds	r3, #8
 801d8ec:	9303      	str	r3, [sp, #12]
 801d8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8f0:	443b      	add	r3, r7
 801d8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8f4:	e76a      	b.n	801d7cc <_vfiprintf_r+0x78>
 801d8f6:	fb0c 3202 	mla	r2, ip, r2, r3
 801d8fa:	460c      	mov	r4, r1
 801d8fc:	2001      	movs	r0, #1
 801d8fe:	e7a8      	b.n	801d852 <_vfiprintf_r+0xfe>
 801d900:	2300      	movs	r3, #0
 801d902:	3401      	adds	r4, #1
 801d904:	9305      	str	r3, [sp, #20]
 801d906:	4619      	mov	r1, r3
 801d908:	f04f 0c0a 	mov.w	ip, #10
 801d90c:	4620      	mov	r0, r4
 801d90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d912:	3a30      	subs	r2, #48	@ 0x30
 801d914:	2a09      	cmp	r2, #9
 801d916:	d903      	bls.n	801d920 <_vfiprintf_r+0x1cc>
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d0c6      	beq.n	801d8aa <_vfiprintf_r+0x156>
 801d91c:	9105      	str	r1, [sp, #20]
 801d91e:	e7c4      	b.n	801d8aa <_vfiprintf_r+0x156>
 801d920:	fb0c 2101 	mla	r1, ip, r1, r2
 801d924:	4604      	mov	r4, r0
 801d926:	2301      	movs	r3, #1
 801d928:	e7f0      	b.n	801d90c <_vfiprintf_r+0x1b8>
 801d92a:	ab03      	add	r3, sp, #12
 801d92c:	9300      	str	r3, [sp, #0]
 801d92e:	462a      	mov	r2, r5
 801d930:	4b12      	ldr	r3, [pc, #72]	@ (801d97c <_vfiprintf_r+0x228>)
 801d932:	a904      	add	r1, sp, #16
 801d934:	4630      	mov	r0, r6
 801d936:	f7fc fe6f 	bl	801a618 <_printf_float>
 801d93a:	4607      	mov	r7, r0
 801d93c:	1c78      	adds	r0, r7, #1
 801d93e:	d1d6      	bne.n	801d8ee <_vfiprintf_r+0x19a>
 801d940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d942:	07d9      	lsls	r1, r3, #31
 801d944:	d405      	bmi.n	801d952 <_vfiprintf_r+0x1fe>
 801d946:	89ab      	ldrh	r3, [r5, #12]
 801d948:	059a      	lsls	r2, r3, #22
 801d94a:	d402      	bmi.n	801d952 <_vfiprintf_r+0x1fe>
 801d94c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d94e:	f7fd fe9b 	bl	801b688 <__retarget_lock_release_recursive>
 801d952:	89ab      	ldrh	r3, [r5, #12]
 801d954:	065b      	lsls	r3, r3, #25
 801d956:	f53f af1f 	bmi.w	801d798 <_vfiprintf_r+0x44>
 801d95a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d95c:	e71e      	b.n	801d79c <_vfiprintf_r+0x48>
 801d95e:	ab03      	add	r3, sp, #12
 801d960:	9300      	str	r3, [sp, #0]
 801d962:	462a      	mov	r2, r5
 801d964:	4b05      	ldr	r3, [pc, #20]	@ (801d97c <_vfiprintf_r+0x228>)
 801d966:	a904      	add	r1, sp, #16
 801d968:	4630      	mov	r0, r6
 801d96a:	f7fd f8ed 	bl	801ab48 <_printf_i>
 801d96e:	e7e4      	b.n	801d93a <_vfiprintf_r+0x1e6>
 801d970:	08021f88 	.word	0x08021f88
 801d974:	08021f92 	.word	0x08021f92
 801d978:	0801a619 	.word	0x0801a619
 801d97c:	0801d72f 	.word	0x0801d72f
 801d980:	08021f8e 	.word	0x08021f8e

0801d984 <__sflush_r>:
 801d984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d98c:	0716      	lsls	r6, r2, #28
 801d98e:	4605      	mov	r5, r0
 801d990:	460c      	mov	r4, r1
 801d992:	d454      	bmi.n	801da3e <__sflush_r+0xba>
 801d994:	684b      	ldr	r3, [r1, #4]
 801d996:	2b00      	cmp	r3, #0
 801d998:	dc02      	bgt.n	801d9a0 <__sflush_r+0x1c>
 801d99a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	dd48      	ble.n	801da32 <__sflush_r+0xae>
 801d9a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9a2:	2e00      	cmp	r6, #0
 801d9a4:	d045      	beq.n	801da32 <__sflush_r+0xae>
 801d9a6:	2300      	movs	r3, #0
 801d9a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d9ac:	682f      	ldr	r7, [r5, #0]
 801d9ae:	6a21      	ldr	r1, [r4, #32]
 801d9b0:	602b      	str	r3, [r5, #0]
 801d9b2:	d030      	beq.n	801da16 <__sflush_r+0x92>
 801d9b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d9b6:	89a3      	ldrh	r3, [r4, #12]
 801d9b8:	0759      	lsls	r1, r3, #29
 801d9ba:	d505      	bpl.n	801d9c8 <__sflush_r+0x44>
 801d9bc:	6863      	ldr	r3, [r4, #4]
 801d9be:	1ad2      	subs	r2, r2, r3
 801d9c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d9c2:	b10b      	cbz	r3, 801d9c8 <__sflush_r+0x44>
 801d9c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d9c6:	1ad2      	subs	r2, r2, r3
 801d9c8:	2300      	movs	r3, #0
 801d9ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9cc:	6a21      	ldr	r1, [r4, #32]
 801d9ce:	4628      	mov	r0, r5
 801d9d0:	47b0      	blx	r6
 801d9d2:	1c43      	adds	r3, r0, #1
 801d9d4:	89a3      	ldrh	r3, [r4, #12]
 801d9d6:	d106      	bne.n	801d9e6 <__sflush_r+0x62>
 801d9d8:	6829      	ldr	r1, [r5, #0]
 801d9da:	291d      	cmp	r1, #29
 801d9dc:	d82b      	bhi.n	801da36 <__sflush_r+0xb2>
 801d9de:	4a2a      	ldr	r2, [pc, #168]	@ (801da88 <__sflush_r+0x104>)
 801d9e0:	410a      	asrs	r2, r1
 801d9e2:	07d6      	lsls	r6, r2, #31
 801d9e4:	d427      	bmi.n	801da36 <__sflush_r+0xb2>
 801d9e6:	2200      	movs	r2, #0
 801d9e8:	6062      	str	r2, [r4, #4]
 801d9ea:	04d9      	lsls	r1, r3, #19
 801d9ec:	6922      	ldr	r2, [r4, #16]
 801d9ee:	6022      	str	r2, [r4, #0]
 801d9f0:	d504      	bpl.n	801d9fc <__sflush_r+0x78>
 801d9f2:	1c42      	adds	r2, r0, #1
 801d9f4:	d101      	bne.n	801d9fa <__sflush_r+0x76>
 801d9f6:	682b      	ldr	r3, [r5, #0]
 801d9f8:	b903      	cbnz	r3, 801d9fc <__sflush_r+0x78>
 801d9fa:	6560      	str	r0, [r4, #84]	@ 0x54
 801d9fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d9fe:	602f      	str	r7, [r5, #0]
 801da00:	b1b9      	cbz	r1, 801da32 <__sflush_r+0xae>
 801da02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801da06:	4299      	cmp	r1, r3
 801da08:	d002      	beq.n	801da10 <__sflush_r+0x8c>
 801da0a:	4628      	mov	r0, r5
 801da0c:	f7fe fccc 	bl	801c3a8 <_free_r>
 801da10:	2300      	movs	r3, #0
 801da12:	6363      	str	r3, [r4, #52]	@ 0x34
 801da14:	e00d      	b.n	801da32 <__sflush_r+0xae>
 801da16:	2301      	movs	r3, #1
 801da18:	4628      	mov	r0, r5
 801da1a:	47b0      	blx	r6
 801da1c:	4602      	mov	r2, r0
 801da1e:	1c50      	adds	r0, r2, #1
 801da20:	d1c9      	bne.n	801d9b6 <__sflush_r+0x32>
 801da22:	682b      	ldr	r3, [r5, #0]
 801da24:	2b00      	cmp	r3, #0
 801da26:	d0c6      	beq.n	801d9b6 <__sflush_r+0x32>
 801da28:	2b1d      	cmp	r3, #29
 801da2a:	d001      	beq.n	801da30 <__sflush_r+0xac>
 801da2c:	2b16      	cmp	r3, #22
 801da2e:	d11e      	bne.n	801da6e <__sflush_r+0xea>
 801da30:	602f      	str	r7, [r5, #0]
 801da32:	2000      	movs	r0, #0
 801da34:	e022      	b.n	801da7c <__sflush_r+0xf8>
 801da36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da3a:	b21b      	sxth	r3, r3
 801da3c:	e01b      	b.n	801da76 <__sflush_r+0xf2>
 801da3e:	690f      	ldr	r7, [r1, #16]
 801da40:	2f00      	cmp	r7, #0
 801da42:	d0f6      	beq.n	801da32 <__sflush_r+0xae>
 801da44:	0793      	lsls	r3, r2, #30
 801da46:	680e      	ldr	r6, [r1, #0]
 801da48:	bf08      	it	eq
 801da4a:	694b      	ldreq	r3, [r1, #20]
 801da4c:	600f      	str	r7, [r1, #0]
 801da4e:	bf18      	it	ne
 801da50:	2300      	movne	r3, #0
 801da52:	eba6 0807 	sub.w	r8, r6, r7
 801da56:	608b      	str	r3, [r1, #8]
 801da58:	f1b8 0f00 	cmp.w	r8, #0
 801da5c:	dde9      	ble.n	801da32 <__sflush_r+0xae>
 801da5e:	6a21      	ldr	r1, [r4, #32]
 801da60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801da62:	4643      	mov	r3, r8
 801da64:	463a      	mov	r2, r7
 801da66:	4628      	mov	r0, r5
 801da68:	47b0      	blx	r6
 801da6a:	2800      	cmp	r0, #0
 801da6c:	dc08      	bgt.n	801da80 <__sflush_r+0xfc>
 801da6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da76:	81a3      	strh	r3, [r4, #12]
 801da78:	f04f 30ff 	mov.w	r0, #4294967295
 801da7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da80:	4407      	add	r7, r0
 801da82:	eba8 0800 	sub.w	r8, r8, r0
 801da86:	e7e7      	b.n	801da58 <__sflush_r+0xd4>
 801da88:	dfbffffe 	.word	0xdfbffffe

0801da8c <_fflush_r>:
 801da8c:	b538      	push	{r3, r4, r5, lr}
 801da8e:	690b      	ldr	r3, [r1, #16]
 801da90:	4605      	mov	r5, r0
 801da92:	460c      	mov	r4, r1
 801da94:	b913      	cbnz	r3, 801da9c <_fflush_r+0x10>
 801da96:	2500      	movs	r5, #0
 801da98:	4628      	mov	r0, r5
 801da9a:	bd38      	pop	{r3, r4, r5, pc}
 801da9c:	b118      	cbz	r0, 801daa6 <_fflush_r+0x1a>
 801da9e:	6a03      	ldr	r3, [r0, #32]
 801daa0:	b90b      	cbnz	r3, 801daa6 <_fflush_r+0x1a>
 801daa2:	f7fd fc11 	bl	801b2c8 <__sinit>
 801daa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d0f3      	beq.n	801da96 <_fflush_r+0xa>
 801daae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dab0:	07d0      	lsls	r0, r2, #31
 801dab2:	d404      	bmi.n	801dabe <_fflush_r+0x32>
 801dab4:	0599      	lsls	r1, r3, #22
 801dab6:	d402      	bmi.n	801dabe <_fflush_r+0x32>
 801dab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801daba:	f7fd fde4 	bl	801b686 <__retarget_lock_acquire_recursive>
 801dabe:	4628      	mov	r0, r5
 801dac0:	4621      	mov	r1, r4
 801dac2:	f7ff ff5f 	bl	801d984 <__sflush_r>
 801dac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dac8:	07da      	lsls	r2, r3, #31
 801daca:	4605      	mov	r5, r0
 801dacc:	d4e4      	bmi.n	801da98 <_fflush_r+0xc>
 801dace:	89a3      	ldrh	r3, [r4, #12]
 801dad0:	059b      	lsls	r3, r3, #22
 801dad2:	d4e1      	bmi.n	801da98 <_fflush_r+0xc>
 801dad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dad6:	f7fd fdd7 	bl	801b688 <__retarget_lock_release_recursive>
 801dada:	e7dd      	b.n	801da98 <_fflush_r+0xc>

0801dadc <fiprintf>:
 801dadc:	b40e      	push	{r1, r2, r3}
 801dade:	b503      	push	{r0, r1, lr}
 801dae0:	4601      	mov	r1, r0
 801dae2:	ab03      	add	r3, sp, #12
 801dae4:	4805      	ldr	r0, [pc, #20]	@ (801dafc <fiprintf+0x20>)
 801dae6:	f853 2b04 	ldr.w	r2, [r3], #4
 801daea:	6800      	ldr	r0, [r0, #0]
 801daec:	9301      	str	r3, [sp, #4]
 801daee:	f7ff fe31 	bl	801d754 <_vfiprintf_r>
 801daf2:	b002      	add	sp, #8
 801daf4:	f85d eb04 	ldr.w	lr, [sp], #4
 801daf8:	b003      	add	sp, #12
 801dafa:	4770      	bx	lr
 801dafc:	200002c0 	.word	0x200002c0

0801db00 <__swbuf_r>:
 801db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db02:	460e      	mov	r6, r1
 801db04:	4614      	mov	r4, r2
 801db06:	4605      	mov	r5, r0
 801db08:	b118      	cbz	r0, 801db12 <__swbuf_r+0x12>
 801db0a:	6a03      	ldr	r3, [r0, #32]
 801db0c:	b90b      	cbnz	r3, 801db12 <__swbuf_r+0x12>
 801db0e:	f7fd fbdb 	bl	801b2c8 <__sinit>
 801db12:	69a3      	ldr	r3, [r4, #24]
 801db14:	60a3      	str	r3, [r4, #8]
 801db16:	89a3      	ldrh	r3, [r4, #12]
 801db18:	071a      	lsls	r2, r3, #28
 801db1a:	d501      	bpl.n	801db20 <__swbuf_r+0x20>
 801db1c:	6923      	ldr	r3, [r4, #16]
 801db1e:	b943      	cbnz	r3, 801db32 <__swbuf_r+0x32>
 801db20:	4621      	mov	r1, r4
 801db22:	4628      	mov	r0, r5
 801db24:	f000 f82a 	bl	801db7c <__swsetup_r>
 801db28:	b118      	cbz	r0, 801db32 <__swbuf_r+0x32>
 801db2a:	f04f 37ff 	mov.w	r7, #4294967295
 801db2e:	4638      	mov	r0, r7
 801db30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db32:	6823      	ldr	r3, [r4, #0]
 801db34:	6922      	ldr	r2, [r4, #16]
 801db36:	1a98      	subs	r0, r3, r2
 801db38:	6963      	ldr	r3, [r4, #20]
 801db3a:	b2f6      	uxtb	r6, r6
 801db3c:	4283      	cmp	r3, r0
 801db3e:	4637      	mov	r7, r6
 801db40:	dc05      	bgt.n	801db4e <__swbuf_r+0x4e>
 801db42:	4621      	mov	r1, r4
 801db44:	4628      	mov	r0, r5
 801db46:	f7ff ffa1 	bl	801da8c <_fflush_r>
 801db4a:	2800      	cmp	r0, #0
 801db4c:	d1ed      	bne.n	801db2a <__swbuf_r+0x2a>
 801db4e:	68a3      	ldr	r3, [r4, #8]
 801db50:	3b01      	subs	r3, #1
 801db52:	60a3      	str	r3, [r4, #8]
 801db54:	6823      	ldr	r3, [r4, #0]
 801db56:	1c5a      	adds	r2, r3, #1
 801db58:	6022      	str	r2, [r4, #0]
 801db5a:	701e      	strb	r6, [r3, #0]
 801db5c:	6962      	ldr	r2, [r4, #20]
 801db5e:	1c43      	adds	r3, r0, #1
 801db60:	429a      	cmp	r2, r3
 801db62:	d004      	beq.n	801db6e <__swbuf_r+0x6e>
 801db64:	89a3      	ldrh	r3, [r4, #12]
 801db66:	07db      	lsls	r3, r3, #31
 801db68:	d5e1      	bpl.n	801db2e <__swbuf_r+0x2e>
 801db6a:	2e0a      	cmp	r6, #10
 801db6c:	d1df      	bne.n	801db2e <__swbuf_r+0x2e>
 801db6e:	4621      	mov	r1, r4
 801db70:	4628      	mov	r0, r5
 801db72:	f7ff ff8b 	bl	801da8c <_fflush_r>
 801db76:	2800      	cmp	r0, #0
 801db78:	d0d9      	beq.n	801db2e <__swbuf_r+0x2e>
 801db7a:	e7d6      	b.n	801db2a <__swbuf_r+0x2a>

0801db7c <__swsetup_r>:
 801db7c:	b538      	push	{r3, r4, r5, lr}
 801db7e:	4b29      	ldr	r3, [pc, #164]	@ (801dc24 <__swsetup_r+0xa8>)
 801db80:	4605      	mov	r5, r0
 801db82:	6818      	ldr	r0, [r3, #0]
 801db84:	460c      	mov	r4, r1
 801db86:	b118      	cbz	r0, 801db90 <__swsetup_r+0x14>
 801db88:	6a03      	ldr	r3, [r0, #32]
 801db8a:	b90b      	cbnz	r3, 801db90 <__swsetup_r+0x14>
 801db8c:	f7fd fb9c 	bl	801b2c8 <__sinit>
 801db90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db94:	0719      	lsls	r1, r3, #28
 801db96:	d422      	bmi.n	801dbde <__swsetup_r+0x62>
 801db98:	06da      	lsls	r2, r3, #27
 801db9a:	d407      	bmi.n	801dbac <__swsetup_r+0x30>
 801db9c:	2209      	movs	r2, #9
 801db9e:	602a      	str	r2, [r5, #0]
 801dba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dba4:	81a3      	strh	r3, [r4, #12]
 801dba6:	f04f 30ff 	mov.w	r0, #4294967295
 801dbaa:	e033      	b.n	801dc14 <__swsetup_r+0x98>
 801dbac:	0758      	lsls	r0, r3, #29
 801dbae:	d512      	bpl.n	801dbd6 <__swsetup_r+0x5a>
 801dbb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dbb2:	b141      	cbz	r1, 801dbc6 <__swsetup_r+0x4a>
 801dbb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dbb8:	4299      	cmp	r1, r3
 801dbba:	d002      	beq.n	801dbc2 <__swsetup_r+0x46>
 801dbbc:	4628      	mov	r0, r5
 801dbbe:	f7fe fbf3 	bl	801c3a8 <_free_r>
 801dbc2:	2300      	movs	r3, #0
 801dbc4:	6363      	str	r3, [r4, #52]	@ 0x34
 801dbc6:	89a3      	ldrh	r3, [r4, #12]
 801dbc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dbcc:	81a3      	strh	r3, [r4, #12]
 801dbce:	2300      	movs	r3, #0
 801dbd0:	6063      	str	r3, [r4, #4]
 801dbd2:	6923      	ldr	r3, [r4, #16]
 801dbd4:	6023      	str	r3, [r4, #0]
 801dbd6:	89a3      	ldrh	r3, [r4, #12]
 801dbd8:	f043 0308 	orr.w	r3, r3, #8
 801dbdc:	81a3      	strh	r3, [r4, #12]
 801dbde:	6923      	ldr	r3, [r4, #16]
 801dbe0:	b94b      	cbnz	r3, 801dbf6 <__swsetup_r+0x7a>
 801dbe2:	89a3      	ldrh	r3, [r4, #12]
 801dbe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dbe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dbec:	d003      	beq.n	801dbf6 <__swsetup_r+0x7a>
 801dbee:	4621      	mov	r1, r4
 801dbf0:	4628      	mov	r0, r5
 801dbf2:	f000 f8a2 	bl	801dd3a <__smakebuf_r>
 801dbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbfa:	f013 0201 	ands.w	r2, r3, #1
 801dbfe:	d00a      	beq.n	801dc16 <__swsetup_r+0x9a>
 801dc00:	2200      	movs	r2, #0
 801dc02:	60a2      	str	r2, [r4, #8]
 801dc04:	6962      	ldr	r2, [r4, #20]
 801dc06:	4252      	negs	r2, r2
 801dc08:	61a2      	str	r2, [r4, #24]
 801dc0a:	6922      	ldr	r2, [r4, #16]
 801dc0c:	b942      	cbnz	r2, 801dc20 <__swsetup_r+0xa4>
 801dc0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dc12:	d1c5      	bne.n	801dba0 <__swsetup_r+0x24>
 801dc14:	bd38      	pop	{r3, r4, r5, pc}
 801dc16:	0799      	lsls	r1, r3, #30
 801dc18:	bf58      	it	pl
 801dc1a:	6962      	ldrpl	r2, [r4, #20]
 801dc1c:	60a2      	str	r2, [r4, #8]
 801dc1e:	e7f4      	b.n	801dc0a <__swsetup_r+0x8e>
 801dc20:	2000      	movs	r0, #0
 801dc22:	e7f7      	b.n	801dc14 <__swsetup_r+0x98>
 801dc24:	200002c0 	.word	0x200002c0

0801dc28 <memmove>:
 801dc28:	4288      	cmp	r0, r1
 801dc2a:	b510      	push	{r4, lr}
 801dc2c:	eb01 0402 	add.w	r4, r1, r2
 801dc30:	d902      	bls.n	801dc38 <memmove+0x10>
 801dc32:	4284      	cmp	r4, r0
 801dc34:	4623      	mov	r3, r4
 801dc36:	d807      	bhi.n	801dc48 <memmove+0x20>
 801dc38:	1e43      	subs	r3, r0, #1
 801dc3a:	42a1      	cmp	r1, r4
 801dc3c:	d008      	beq.n	801dc50 <memmove+0x28>
 801dc3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dc42:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dc46:	e7f8      	b.n	801dc3a <memmove+0x12>
 801dc48:	4402      	add	r2, r0
 801dc4a:	4601      	mov	r1, r0
 801dc4c:	428a      	cmp	r2, r1
 801dc4e:	d100      	bne.n	801dc52 <memmove+0x2a>
 801dc50:	bd10      	pop	{r4, pc}
 801dc52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dc56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dc5a:	e7f7      	b.n	801dc4c <memmove+0x24>

0801dc5c <abort>:
 801dc5c:	b508      	push	{r3, lr}
 801dc5e:	2006      	movs	r0, #6
 801dc60:	f000 f8d0 	bl	801de04 <raise>
 801dc64:	2001      	movs	r0, #1
 801dc66:	f7e8 fb4d 	bl	8006304 <_exit>

0801dc6a <_calloc_r>:
 801dc6a:	b570      	push	{r4, r5, r6, lr}
 801dc6c:	fba1 5402 	umull	r5, r4, r1, r2
 801dc70:	b93c      	cbnz	r4, 801dc82 <_calloc_r+0x18>
 801dc72:	4629      	mov	r1, r5
 801dc74:	f7fb fcb0 	bl	80195d8 <_malloc_r>
 801dc78:	4606      	mov	r6, r0
 801dc7a:	b928      	cbnz	r0, 801dc88 <_calloc_r+0x1e>
 801dc7c:	2600      	movs	r6, #0
 801dc7e:	4630      	mov	r0, r6
 801dc80:	bd70      	pop	{r4, r5, r6, pc}
 801dc82:	220c      	movs	r2, #12
 801dc84:	6002      	str	r2, [r0, #0]
 801dc86:	e7f9      	b.n	801dc7c <_calloc_r+0x12>
 801dc88:	462a      	mov	r2, r5
 801dc8a:	4621      	mov	r1, r4
 801dc8c:	f7fd fbe9 	bl	801b462 <memset>
 801dc90:	e7f5      	b.n	801dc7e <_calloc_r+0x14>

0801dc92 <_realloc_r>:
 801dc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc96:	4680      	mov	r8, r0
 801dc98:	4615      	mov	r5, r2
 801dc9a:	460c      	mov	r4, r1
 801dc9c:	b921      	cbnz	r1, 801dca8 <_realloc_r+0x16>
 801dc9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dca2:	4611      	mov	r1, r2
 801dca4:	f7fb bc98 	b.w	80195d8 <_malloc_r>
 801dca8:	b92a      	cbnz	r2, 801dcb6 <_realloc_r+0x24>
 801dcaa:	f7fe fb7d 	bl	801c3a8 <_free_r>
 801dcae:	2400      	movs	r4, #0
 801dcb0:	4620      	mov	r0, r4
 801dcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcb6:	f000 f8e3 	bl	801de80 <_malloc_usable_size_r>
 801dcba:	4285      	cmp	r5, r0
 801dcbc:	4606      	mov	r6, r0
 801dcbe:	d802      	bhi.n	801dcc6 <_realloc_r+0x34>
 801dcc0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801dcc4:	d8f4      	bhi.n	801dcb0 <_realloc_r+0x1e>
 801dcc6:	4629      	mov	r1, r5
 801dcc8:	4640      	mov	r0, r8
 801dcca:	f7fb fc85 	bl	80195d8 <_malloc_r>
 801dcce:	4607      	mov	r7, r0
 801dcd0:	2800      	cmp	r0, #0
 801dcd2:	d0ec      	beq.n	801dcae <_realloc_r+0x1c>
 801dcd4:	42b5      	cmp	r5, r6
 801dcd6:	462a      	mov	r2, r5
 801dcd8:	4621      	mov	r1, r4
 801dcda:	bf28      	it	cs
 801dcdc:	4632      	movcs	r2, r6
 801dcde:	f7fd fcdc 	bl	801b69a <memcpy>
 801dce2:	4621      	mov	r1, r4
 801dce4:	4640      	mov	r0, r8
 801dce6:	f7fe fb5f 	bl	801c3a8 <_free_r>
 801dcea:	463c      	mov	r4, r7
 801dcec:	e7e0      	b.n	801dcb0 <_realloc_r+0x1e>

0801dcee <__swhatbuf_r>:
 801dcee:	b570      	push	{r4, r5, r6, lr}
 801dcf0:	460c      	mov	r4, r1
 801dcf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dcf6:	2900      	cmp	r1, #0
 801dcf8:	b096      	sub	sp, #88	@ 0x58
 801dcfa:	4615      	mov	r5, r2
 801dcfc:	461e      	mov	r6, r3
 801dcfe:	da0d      	bge.n	801dd1c <__swhatbuf_r+0x2e>
 801dd00:	89a3      	ldrh	r3, [r4, #12]
 801dd02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801dd06:	f04f 0100 	mov.w	r1, #0
 801dd0a:	bf14      	ite	ne
 801dd0c:	2340      	movne	r3, #64	@ 0x40
 801dd0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dd12:	2000      	movs	r0, #0
 801dd14:	6031      	str	r1, [r6, #0]
 801dd16:	602b      	str	r3, [r5, #0]
 801dd18:	b016      	add	sp, #88	@ 0x58
 801dd1a:	bd70      	pop	{r4, r5, r6, pc}
 801dd1c:	466a      	mov	r2, sp
 801dd1e:	f000 f879 	bl	801de14 <_fstat_r>
 801dd22:	2800      	cmp	r0, #0
 801dd24:	dbec      	blt.n	801dd00 <__swhatbuf_r+0x12>
 801dd26:	9901      	ldr	r1, [sp, #4]
 801dd28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dd2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dd30:	4259      	negs	r1, r3
 801dd32:	4159      	adcs	r1, r3
 801dd34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dd38:	e7eb      	b.n	801dd12 <__swhatbuf_r+0x24>

0801dd3a <__smakebuf_r>:
 801dd3a:	898b      	ldrh	r3, [r1, #12]
 801dd3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dd3e:	079d      	lsls	r5, r3, #30
 801dd40:	4606      	mov	r6, r0
 801dd42:	460c      	mov	r4, r1
 801dd44:	d507      	bpl.n	801dd56 <__smakebuf_r+0x1c>
 801dd46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dd4a:	6023      	str	r3, [r4, #0]
 801dd4c:	6123      	str	r3, [r4, #16]
 801dd4e:	2301      	movs	r3, #1
 801dd50:	6163      	str	r3, [r4, #20]
 801dd52:	b003      	add	sp, #12
 801dd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd56:	ab01      	add	r3, sp, #4
 801dd58:	466a      	mov	r2, sp
 801dd5a:	f7ff ffc8 	bl	801dcee <__swhatbuf_r>
 801dd5e:	9f00      	ldr	r7, [sp, #0]
 801dd60:	4605      	mov	r5, r0
 801dd62:	4639      	mov	r1, r7
 801dd64:	4630      	mov	r0, r6
 801dd66:	f7fb fc37 	bl	80195d8 <_malloc_r>
 801dd6a:	b948      	cbnz	r0, 801dd80 <__smakebuf_r+0x46>
 801dd6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd70:	059a      	lsls	r2, r3, #22
 801dd72:	d4ee      	bmi.n	801dd52 <__smakebuf_r+0x18>
 801dd74:	f023 0303 	bic.w	r3, r3, #3
 801dd78:	f043 0302 	orr.w	r3, r3, #2
 801dd7c:	81a3      	strh	r3, [r4, #12]
 801dd7e:	e7e2      	b.n	801dd46 <__smakebuf_r+0xc>
 801dd80:	89a3      	ldrh	r3, [r4, #12]
 801dd82:	6020      	str	r0, [r4, #0]
 801dd84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dd88:	81a3      	strh	r3, [r4, #12]
 801dd8a:	9b01      	ldr	r3, [sp, #4]
 801dd8c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dd90:	b15b      	cbz	r3, 801ddaa <__smakebuf_r+0x70>
 801dd92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd96:	4630      	mov	r0, r6
 801dd98:	f000 f84e 	bl	801de38 <_isatty_r>
 801dd9c:	b128      	cbz	r0, 801ddaa <__smakebuf_r+0x70>
 801dd9e:	89a3      	ldrh	r3, [r4, #12]
 801dda0:	f023 0303 	bic.w	r3, r3, #3
 801dda4:	f043 0301 	orr.w	r3, r3, #1
 801dda8:	81a3      	strh	r3, [r4, #12]
 801ddaa:	89a3      	ldrh	r3, [r4, #12]
 801ddac:	431d      	orrs	r5, r3
 801ddae:	81a5      	strh	r5, [r4, #12]
 801ddb0:	e7cf      	b.n	801dd52 <__smakebuf_r+0x18>

0801ddb2 <_raise_r>:
 801ddb2:	291f      	cmp	r1, #31
 801ddb4:	b538      	push	{r3, r4, r5, lr}
 801ddb6:	4605      	mov	r5, r0
 801ddb8:	460c      	mov	r4, r1
 801ddba:	d904      	bls.n	801ddc6 <_raise_r+0x14>
 801ddbc:	2316      	movs	r3, #22
 801ddbe:	6003      	str	r3, [r0, #0]
 801ddc0:	f04f 30ff 	mov.w	r0, #4294967295
 801ddc4:	bd38      	pop	{r3, r4, r5, pc}
 801ddc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ddc8:	b112      	cbz	r2, 801ddd0 <_raise_r+0x1e>
 801ddca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ddce:	b94b      	cbnz	r3, 801dde4 <_raise_r+0x32>
 801ddd0:	4628      	mov	r0, r5
 801ddd2:	f000 f853 	bl	801de7c <_getpid_r>
 801ddd6:	4622      	mov	r2, r4
 801ddd8:	4601      	mov	r1, r0
 801ddda:	4628      	mov	r0, r5
 801dddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dde0:	f000 b83a 	b.w	801de58 <_kill_r>
 801dde4:	2b01      	cmp	r3, #1
 801dde6:	d00a      	beq.n	801ddfe <_raise_r+0x4c>
 801dde8:	1c59      	adds	r1, r3, #1
 801ddea:	d103      	bne.n	801ddf4 <_raise_r+0x42>
 801ddec:	2316      	movs	r3, #22
 801ddee:	6003      	str	r3, [r0, #0]
 801ddf0:	2001      	movs	r0, #1
 801ddf2:	e7e7      	b.n	801ddc4 <_raise_r+0x12>
 801ddf4:	2100      	movs	r1, #0
 801ddf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ddfa:	4620      	mov	r0, r4
 801ddfc:	4798      	blx	r3
 801ddfe:	2000      	movs	r0, #0
 801de00:	e7e0      	b.n	801ddc4 <_raise_r+0x12>
	...

0801de04 <raise>:
 801de04:	4b02      	ldr	r3, [pc, #8]	@ (801de10 <raise+0xc>)
 801de06:	4601      	mov	r1, r0
 801de08:	6818      	ldr	r0, [r3, #0]
 801de0a:	f7ff bfd2 	b.w	801ddb2 <_raise_r>
 801de0e:	bf00      	nop
 801de10:	200002c0 	.word	0x200002c0

0801de14 <_fstat_r>:
 801de14:	b538      	push	{r3, r4, r5, lr}
 801de16:	4d07      	ldr	r5, [pc, #28]	@ (801de34 <_fstat_r+0x20>)
 801de18:	2300      	movs	r3, #0
 801de1a:	4604      	mov	r4, r0
 801de1c:	4608      	mov	r0, r1
 801de1e:	4611      	mov	r1, r2
 801de20:	602b      	str	r3, [r5, #0]
 801de22:	f7e8 fabf 	bl	80063a4 <_fstat>
 801de26:	1c43      	adds	r3, r0, #1
 801de28:	d102      	bne.n	801de30 <_fstat_r+0x1c>
 801de2a:	682b      	ldr	r3, [r5, #0]
 801de2c:	b103      	cbz	r3, 801de30 <_fstat_r+0x1c>
 801de2e:	6023      	str	r3, [r4, #0]
 801de30:	bd38      	pop	{r3, r4, r5, pc}
 801de32:	bf00      	nop
 801de34:	200033ac 	.word	0x200033ac

0801de38 <_isatty_r>:
 801de38:	b538      	push	{r3, r4, r5, lr}
 801de3a:	4d06      	ldr	r5, [pc, #24]	@ (801de54 <_isatty_r+0x1c>)
 801de3c:	2300      	movs	r3, #0
 801de3e:	4604      	mov	r4, r0
 801de40:	4608      	mov	r0, r1
 801de42:	602b      	str	r3, [r5, #0]
 801de44:	f7e8 fabe 	bl	80063c4 <_isatty>
 801de48:	1c43      	adds	r3, r0, #1
 801de4a:	d102      	bne.n	801de52 <_isatty_r+0x1a>
 801de4c:	682b      	ldr	r3, [r5, #0]
 801de4e:	b103      	cbz	r3, 801de52 <_isatty_r+0x1a>
 801de50:	6023      	str	r3, [r4, #0]
 801de52:	bd38      	pop	{r3, r4, r5, pc}
 801de54:	200033ac 	.word	0x200033ac

0801de58 <_kill_r>:
 801de58:	b538      	push	{r3, r4, r5, lr}
 801de5a:	4d07      	ldr	r5, [pc, #28]	@ (801de78 <_kill_r+0x20>)
 801de5c:	2300      	movs	r3, #0
 801de5e:	4604      	mov	r4, r0
 801de60:	4608      	mov	r0, r1
 801de62:	4611      	mov	r1, r2
 801de64:	602b      	str	r3, [r5, #0]
 801de66:	f7e8 fa3d 	bl	80062e4 <_kill>
 801de6a:	1c43      	adds	r3, r0, #1
 801de6c:	d102      	bne.n	801de74 <_kill_r+0x1c>
 801de6e:	682b      	ldr	r3, [r5, #0]
 801de70:	b103      	cbz	r3, 801de74 <_kill_r+0x1c>
 801de72:	6023      	str	r3, [r4, #0]
 801de74:	bd38      	pop	{r3, r4, r5, pc}
 801de76:	bf00      	nop
 801de78:	200033ac 	.word	0x200033ac

0801de7c <_getpid_r>:
 801de7c:	f7e8 ba2a 	b.w	80062d4 <_getpid>

0801de80 <_malloc_usable_size_r>:
 801de80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de84:	1f18      	subs	r0, r3, #4
 801de86:	2b00      	cmp	r3, #0
 801de88:	bfbc      	itt	lt
 801de8a:	580b      	ldrlt	r3, [r1, r0]
 801de8c:	18c0      	addlt	r0, r0, r3
 801de8e:	4770      	bx	lr

0801de90 <cos>:
 801de90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801de92:	ec53 2b10 	vmov	r2, r3, d0
 801de96:	4826      	ldr	r0, [pc, #152]	@ (801df30 <cos+0xa0>)
 801de98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801de9c:	4281      	cmp	r1, r0
 801de9e:	d806      	bhi.n	801deae <cos+0x1e>
 801dea0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801df28 <cos+0x98>
 801dea4:	b005      	add	sp, #20
 801dea6:	f85d eb04 	ldr.w	lr, [sp], #4
 801deaa:	f000 b9b1 	b.w	801e210 <__kernel_cos>
 801deae:	4821      	ldr	r0, [pc, #132]	@ (801df34 <cos+0xa4>)
 801deb0:	4281      	cmp	r1, r0
 801deb2:	d908      	bls.n	801dec6 <cos+0x36>
 801deb4:	4610      	mov	r0, r2
 801deb6:	4619      	mov	r1, r3
 801deb8:	f7e2 f9be 	bl	8000238 <__aeabi_dsub>
 801debc:	ec41 0b10 	vmov	d0, r0, r1
 801dec0:	b005      	add	sp, #20
 801dec2:	f85d fb04 	ldr.w	pc, [sp], #4
 801dec6:	4668      	mov	r0, sp
 801dec8:	f000 fb26 	bl	801e518 <__ieee754_rem_pio2>
 801decc:	f000 0003 	and.w	r0, r0, #3
 801ded0:	2801      	cmp	r0, #1
 801ded2:	d00b      	beq.n	801deec <cos+0x5c>
 801ded4:	2802      	cmp	r0, #2
 801ded6:	d015      	beq.n	801df04 <cos+0x74>
 801ded8:	b9d8      	cbnz	r0, 801df12 <cos+0x82>
 801deda:	ed9d 1b02 	vldr	d1, [sp, #8]
 801dede:	ed9d 0b00 	vldr	d0, [sp]
 801dee2:	f000 f995 	bl	801e210 <__kernel_cos>
 801dee6:	ec51 0b10 	vmov	r0, r1, d0
 801deea:	e7e7      	b.n	801debc <cos+0x2c>
 801deec:	ed9d 1b02 	vldr	d1, [sp, #8]
 801def0:	ed9d 0b00 	vldr	d0, [sp]
 801def4:	f000 fa54 	bl	801e3a0 <__kernel_sin>
 801def8:	ec53 2b10 	vmov	r2, r3, d0
 801defc:	4610      	mov	r0, r2
 801defe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801df02:	e7db      	b.n	801debc <cos+0x2c>
 801df04:	ed9d 1b02 	vldr	d1, [sp, #8]
 801df08:	ed9d 0b00 	vldr	d0, [sp]
 801df0c:	f000 f980 	bl	801e210 <__kernel_cos>
 801df10:	e7f2      	b.n	801def8 <cos+0x68>
 801df12:	ed9d 1b02 	vldr	d1, [sp, #8]
 801df16:	ed9d 0b00 	vldr	d0, [sp]
 801df1a:	2001      	movs	r0, #1
 801df1c:	f000 fa40 	bl	801e3a0 <__kernel_sin>
 801df20:	e7e1      	b.n	801dee6 <cos+0x56>
 801df22:	bf00      	nop
 801df24:	f3af 8000 	nop.w
	...
 801df30:	3fe921fb 	.word	0x3fe921fb
 801df34:	7fefffff 	.word	0x7fefffff

0801df38 <sin>:
 801df38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801df3a:	ec53 2b10 	vmov	r2, r3, d0
 801df3e:	4826      	ldr	r0, [pc, #152]	@ (801dfd8 <sin+0xa0>)
 801df40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801df44:	4281      	cmp	r1, r0
 801df46:	d807      	bhi.n	801df58 <sin+0x20>
 801df48:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801dfd0 <sin+0x98>
 801df4c:	2000      	movs	r0, #0
 801df4e:	b005      	add	sp, #20
 801df50:	f85d eb04 	ldr.w	lr, [sp], #4
 801df54:	f000 ba24 	b.w	801e3a0 <__kernel_sin>
 801df58:	4820      	ldr	r0, [pc, #128]	@ (801dfdc <sin+0xa4>)
 801df5a:	4281      	cmp	r1, r0
 801df5c:	d908      	bls.n	801df70 <sin+0x38>
 801df5e:	4610      	mov	r0, r2
 801df60:	4619      	mov	r1, r3
 801df62:	f7e2 f969 	bl	8000238 <__aeabi_dsub>
 801df66:	ec41 0b10 	vmov	d0, r0, r1
 801df6a:	b005      	add	sp, #20
 801df6c:	f85d fb04 	ldr.w	pc, [sp], #4
 801df70:	4668      	mov	r0, sp
 801df72:	f000 fad1 	bl	801e518 <__ieee754_rem_pio2>
 801df76:	f000 0003 	and.w	r0, r0, #3
 801df7a:	2801      	cmp	r0, #1
 801df7c:	d00c      	beq.n	801df98 <sin+0x60>
 801df7e:	2802      	cmp	r0, #2
 801df80:	d011      	beq.n	801dfa6 <sin+0x6e>
 801df82:	b9e8      	cbnz	r0, 801dfc0 <sin+0x88>
 801df84:	ed9d 1b02 	vldr	d1, [sp, #8]
 801df88:	ed9d 0b00 	vldr	d0, [sp]
 801df8c:	2001      	movs	r0, #1
 801df8e:	f000 fa07 	bl	801e3a0 <__kernel_sin>
 801df92:	ec51 0b10 	vmov	r0, r1, d0
 801df96:	e7e6      	b.n	801df66 <sin+0x2e>
 801df98:	ed9d 1b02 	vldr	d1, [sp, #8]
 801df9c:	ed9d 0b00 	vldr	d0, [sp]
 801dfa0:	f000 f936 	bl	801e210 <__kernel_cos>
 801dfa4:	e7f5      	b.n	801df92 <sin+0x5a>
 801dfa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801dfaa:	ed9d 0b00 	vldr	d0, [sp]
 801dfae:	2001      	movs	r0, #1
 801dfb0:	f000 f9f6 	bl	801e3a0 <__kernel_sin>
 801dfb4:	ec53 2b10 	vmov	r2, r3, d0
 801dfb8:	4610      	mov	r0, r2
 801dfba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801dfbe:	e7d2      	b.n	801df66 <sin+0x2e>
 801dfc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801dfc4:	ed9d 0b00 	vldr	d0, [sp]
 801dfc8:	f000 f922 	bl	801e210 <__kernel_cos>
 801dfcc:	e7f2      	b.n	801dfb4 <sin+0x7c>
 801dfce:	bf00      	nop
	...
 801dfd8:	3fe921fb 	.word	0x3fe921fb
 801dfdc:	7fefffff 	.word	0x7fefffff

0801dfe0 <expf>:
 801dfe0:	b508      	push	{r3, lr}
 801dfe2:	ed2d 8b02 	vpush	{d8}
 801dfe6:	eef0 8a40 	vmov.f32	s17, s0
 801dfea:	f000 fccd 	bl	801e988 <__ieee754_expf>
 801dfee:	eeb0 8a40 	vmov.f32	s16, s0
 801dff2:	eeb0 0a68 	vmov.f32	s0, s17
 801dff6:	f000 f87d 	bl	801e0f4 <finitef>
 801dffa:	b160      	cbz	r0, 801e016 <expf+0x36>
 801dffc:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801e03c <expf+0x5c>
 801e000:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e008:	dd0a      	ble.n	801e020 <expf+0x40>
 801e00a:	f7fd fb11 	bl	801b630 <__errno>
 801e00e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801e040 <expf+0x60>
 801e012:	2322      	movs	r3, #34	@ 0x22
 801e014:	6003      	str	r3, [r0, #0]
 801e016:	eeb0 0a48 	vmov.f32	s0, s16
 801e01a:	ecbd 8b02 	vpop	{d8}
 801e01e:	bd08      	pop	{r3, pc}
 801e020:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801e044 <expf+0x64>
 801e024:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e02c:	d5f3      	bpl.n	801e016 <expf+0x36>
 801e02e:	f7fd faff 	bl	801b630 <__errno>
 801e032:	2322      	movs	r3, #34	@ 0x22
 801e034:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801e048 <expf+0x68>
 801e038:	6003      	str	r3, [r0, #0]
 801e03a:	e7ec      	b.n	801e016 <expf+0x36>
 801e03c:	42b17217 	.word	0x42b17217
 801e040:	7f800000 	.word	0x7f800000
 801e044:	c2cff1b5 	.word	0xc2cff1b5
 801e048:	00000000 	.word	0x00000000

0801e04c <fmin>:
 801e04c:	b508      	push	{r3, lr}
 801e04e:	ed2d 8b04 	vpush	{d8-d9}
 801e052:	eeb0 8a40 	vmov.f32	s16, s0
 801e056:	eef0 8a60 	vmov.f32	s17, s1
 801e05a:	eeb0 9a41 	vmov.f32	s18, s2
 801e05e:	eef0 9a61 	vmov.f32	s19, s3
 801e062:	f000 f81d 	bl	801e0a0 <__fpclassifyd>
 801e066:	b950      	cbnz	r0, 801e07e <fmin+0x32>
 801e068:	eeb0 8a49 	vmov.f32	s16, s18
 801e06c:	eef0 8a69 	vmov.f32	s17, s19
 801e070:	eeb0 0a48 	vmov.f32	s0, s16
 801e074:	eef0 0a68 	vmov.f32	s1, s17
 801e078:	ecbd 8b04 	vpop	{d8-d9}
 801e07c:	bd08      	pop	{r3, pc}
 801e07e:	eeb0 0a49 	vmov.f32	s0, s18
 801e082:	eef0 0a69 	vmov.f32	s1, s19
 801e086:	f000 f80b 	bl	801e0a0 <__fpclassifyd>
 801e08a:	2800      	cmp	r0, #0
 801e08c:	d0f0      	beq.n	801e070 <fmin+0x24>
 801e08e:	ec53 2b19 	vmov	r2, r3, d9
 801e092:	ec51 0b18 	vmov	r0, r1, d8
 801e096:	f7e2 fcf9 	bl	8000a8c <__aeabi_dcmplt>
 801e09a:	2800      	cmp	r0, #0
 801e09c:	d0e4      	beq.n	801e068 <fmin+0x1c>
 801e09e:	e7e7      	b.n	801e070 <fmin+0x24>

0801e0a0 <__fpclassifyd>:
 801e0a0:	ec51 0b10 	vmov	r0, r1, d0
 801e0a4:	b510      	push	{r4, lr}
 801e0a6:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801e0aa:	460b      	mov	r3, r1
 801e0ac:	d019      	beq.n	801e0e2 <__fpclassifyd+0x42>
 801e0ae:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801e0b2:	490e      	ldr	r1, [pc, #56]	@ (801e0ec <__fpclassifyd+0x4c>)
 801e0b4:	428a      	cmp	r2, r1
 801e0b6:	d90e      	bls.n	801e0d6 <__fpclassifyd+0x36>
 801e0b8:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801e0bc:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801e0c0:	428a      	cmp	r2, r1
 801e0c2:	d908      	bls.n	801e0d6 <__fpclassifyd+0x36>
 801e0c4:	4a0a      	ldr	r2, [pc, #40]	@ (801e0f0 <__fpclassifyd+0x50>)
 801e0c6:	4213      	tst	r3, r2
 801e0c8:	d007      	beq.n	801e0da <__fpclassifyd+0x3a>
 801e0ca:	4294      	cmp	r4, r2
 801e0cc:	d107      	bne.n	801e0de <__fpclassifyd+0x3e>
 801e0ce:	fab0 f080 	clz	r0, r0
 801e0d2:	0940      	lsrs	r0, r0, #5
 801e0d4:	bd10      	pop	{r4, pc}
 801e0d6:	2004      	movs	r0, #4
 801e0d8:	e7fc      	b.n	801e0d4 <__fpclassifyd+0x34>
 801e0da:	2003      	movs	r0, #3
 801e0dc:	e7fa      	b.n	801e0d4 <__fpclassifyd+0x34>
 801e0de:	2000      	movs	r0, #0
 801e0e0:	e7f8      	b.n	801e0d4 <__fpclassifyd+0x34>
 801e0e2:	2800      	cmp	r0, #0
 801e0e4:	d1ee      	bne.n	801e0c4 <__fpclassifyd+0x24>
 801e0e6:	2002      	movs	r0, #2
 801e0e8:	e7f4      	b.n	801e0d4 <__fpclassifyd+0x34>
 801e0ea:	bf00      	nop
 801e0ec:	7fdfffff 	.word	0x7fdfffff
 801e0f0:	7ff00000 	.word	0x7ff00000

0801e0f4 <finitef>:
 801e0f4:	ee10 3a10 	vmov	r3, s0
 801e0f8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801e0fc:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801e100:	bfac      	ite	ge
 801e102:	2000      	movge	r0, #0
 801e104:	2001      	movlt	r0, #1
 801e106:	4770      	bx	lr

0801e108 <cosl>:
 801e108:	f7ff bec2 	b.w	801de90 <cos>

0801e10c <sinl>:
 801e10c:	f7ff bf14 	b.w	801df38 <sin>

0801e110 <acosl>:
 801e110:	f000 bbfe 	b.w	801e910 <acos>
 801e114:	0000      	movs	r0, r0
	...

0801e118 <floor>:
 801e118:	ec51 0b10 	vmov	r0, r1, d0
 801e11c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e124:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e128:	2e13      	cmp	r6, #19
 801e12a:	460c      	mov	r4, r1
 801e12c:	4605      	mov	r5, r0
 801e12e:	4680      	mov	r8, r0
 801e130:	dc34      	bgt.n	801e19c <floor+0x84>
 801e132:	2e00      	cmp	r6, #0
 801e134:	da17      	bge.n	801e166 <floor+0x4e>
 801e136:	a332      	add	r3, pc, #200	@ (adr r3, 801e200 <floor+0xe8>)
 801e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e13c:	f7e2 f87e 	bl	800023c <__adddf3>
 801e140:	2200      	movs	r2, #0
 801e142:	2300      	movs	r3, #0
 801e144:	f7e2 fcc0 	bl	8000ac8 <__aeabi_dcmpgt>
 801e148:	b150      	cbz	r0, 801e160 <floor+0x48>
 801e14a:	2c00      	cmp	r4, #0
 801e14c:	da55      	bge.n	801e1fa <floor+0xe2>
 801e14e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e152:	432c      	orrs	r4, r5
 801e154:	2500      	movs	r5, #0
 801e156:	42ac      	cmp	r4, r5
 801e158:	4c2b      	ldr	r4, [pc, #172]	@ (801e208 <floor+0xf0>)
 801e15a:	bf08      	it	eq
 801e15c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e160:	4621      	mov	r1, r4
 801e162:	4628      	mov	r0, r5
 801e164:	e023      	b.n	801e1ae <floor+0x96>
 801e166:	4f29      	ldr	r7, [pc, #164]	@ (801e20c <floor+0xf4>)
 801e168:	4137      	asrs	r7, r6
 801e16a:	ea01 0307 	and.w	r3, r1, r7
 801e16e:	4303      	orrs	r3, r0
 801e170:	d01d      	beq.n	801e1ae <floor+0x96>
 801e172:	a323      	add	r3, pc, #140	@ (adr r3, 801e200 <floor+0xe8>)
 801e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e178:	f7e2 f860 	bl	800023c <__adddf3>
 801e17c:	2200      	movs	r2, #0
 801e17e:	2300      	movs	r3, #0
 801e180:	f7e2 fca2 	bl	8000ac8 <__aeabi_dcmpgt>
 801e184:	2800      	cmp	r0, #0
 801e186:	d0eb      	beq.n	801e160 <floor+0x48>
 801e188:	2c00      	cmp	r4, #0
 801e18a:	bfbe      	ittt	lt
 801e18c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e190:	4133      	asrlt	r3, r6
 801e192:	18e4      	addlt	r4, r4, r3
 801e194:	ea24 0407 	bic.w	r4, r4, r7
 801e198:	2500      	movs	r5, #0
 801e19a:	e7e1      	b.n	801e160 <floor+0x48>
 801e19c:	2e33      	cmp	r6, #51	@ 0x33
 801e19e:	dd0a      	ble.n	801e1b6 <floor+0x9e>
 801e1a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e1a4:	d103      	bne.n	801e1ae <floor+0x96>
 801e1a6:	4602      	mov	r2, r0
 801e1a8:	460b      	mov	r3, r1
 801e1aa:	f7e2 f847 	bl	800023c <__adddf3>
 801e1ae:	ec41 0b10 	vmov	d0, r0, r1
 801e1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e1ba:	f04f 37ff 	mov.w	r7, #4294967295
 801e1be:	40df      	lsrs	r7, r3
 801e1c0:	4207      	tst	r7, r0
 801e1c2:	d0f4      	beq.n	801e1ae <floor+0x96>
 801e1c4:	a30e      	add	r3, pc, #56	@ (adr r3, 801e200 <floor+0xe8>)
 801e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1ca:	f7e2 f837 	bl	800023c <__adddf3>
 801e1ce:	2200      	movs	r2, #0
 801e1d0:	2300      	movs	r3, #0
 801e1d2:	f7e2 fc79 	bl	8000ac8 <__aeabi_dcmpgt>
 801e1d6:	2800      	cmp	r0, #0
 801e1d8:	d0c2      	beq.n	801e160 <floor+0x48>
 801e1da:	2c00      	cmp	r4, #0
 801e1dc:	da0a      	bge.n	801e1f4 <floor+0xdc>
 801e1de:	2e14      	cmp	r6, #20
 801e1e0:	d101      	bne.n	801e1e6 <floor+0xce>
 801e1e2:	3401      	adds	r4, #1
 801e1e4:	e006      	b.n	801e1f4 <floor+0xdc>
 801e1e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e1ea:	2301      	movs	r3, #1
 801e1ec:	40b3      	lsls	r3, r6
 801e1ee:	441d      	add	r5, r3
 801e1f0:	4545      	cmp	r5, r8
 801e1f2:	d3f6      	bcc.n	801e1e2 <floor+0xca>
 801e1f4:	ea25 0507 	bic.w	r5, r5, r7
 801e1f8:	e7b2      	b.n	801e160 <floor+0x48>
 801e1fa:	2500      	movs	r5, #0
 801e1fc:	462c      	mov	r4, r5
 801e1fe:	e7af      	b.n	801e160 <floor+0x48>
 801e200:	8800759c 	.word	0x8800759c
 801e204:	7e37e43c 	.word	0x7e37e43c
 801e208:	bff00000 	.word	0xbff00000
 801e20c:	000fffff 	.word	0x000fffff

0801e210 <__kernel_cos>:
 801e210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e214:	ec57 6b10 	vmov	r6, r7, d0
 801e218:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e21c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e220:	ed8d 1b00 	vstr	d1, [sp]
 801e224:	d206      	bcs.n	801e234 <__kernel_cos+0x24>
 801e226:	4630      	mov	r0, r6
 801e228:	4639      	mov	r1, r7
 801e22a:	f7e2 fc6d 	bl	8000b08 <__aeabi_d2iz>
 801e22e:	2800      	cmp	r0, #0
 801e230:	f000 8088 	beq.w	801e344 <__kernel_cos+0x134>
 801e234:	4632      	mov	r2, r6
 801e236:	463b      	mov	r3, r7
 801e238:	4630      	mov	r0, r6
 801e23a:	4639      	mov	r1, r7
 801e23c:	f7e2 f9b4 	bl	80005a8 <__aeabi_dmul>
 801e240:	4b51      	ldr	r3, [pc, #324]	@ (801e388 <__kernel_cos+0x178>)
 801e242:	2200      	movs	r2, #0
 801e244:	4604      	mov	r4, r0
 801e246:	460d      	mov	r5, r1
 801e248:	f7e2 f9ae 	bl	80005a8 <__aeabi_dmul>
 801e24c:	a340      	add	r3, pc, #256	@ (adr r3, 801e350 <__kernel_cos+0x140>)
 801e24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e252:	4682      	mov	sl, r0
 801e254:	468b      	mov	fp, r1
 801e256:	4620      	mov	r0, r4
 801e258:	4629      	mov	r1, r5
 801e25a:	f7e2 f9a5 	bl	80005a8 <__aeabi_dmul>
 801e25e:	a33e      	add	r3, pc, #248	@ (adr r3, 801e358 <__kernel_cos+0x148>)
 801e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e264:	f7e1 ffea 	bl	800023c <__adddf3>
 801e268:	4622      	mov	r2, r4
 801e26a:	462b      	mov	r3, r5
 801e26c:	f7e2 f99c 	bl	80005a8 <__aeabi_dmul>
 801e270:	a33b      	add	r3, pc, #236	@ (adr r3, 801e360 <__kernel_cos+0x150>)
 801e272:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e276:	f7e1 ffdf 	bl	8000238 <__aeabi_dsub>
 801e27a:	4622      	mov	r2, r4
 801e27c:	462b      	mov	r3, r5
 801e27e:	f7e2 f993 	bl	80005a8 <__aeabi_dmul>
 801e282:	a339      	add	r3, pc, #228	@ (adr r3, 801e368 <__kernel_cos+0x158>)
 801e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e288:	f7e1 ffd8 	bl	800023c <__adddf3>
 801e28c:	4622      	mov	r2, r4
 801e28e:	462b      	mov	r3, r5
 801e290:	f7e2 f98a 	bl	80005a8 <__aeabi_dmul>
 801e294:	a336      	add	r3, pc, #216	@ (adr r3, 801e370 <__kernel_cos+0x160>)
 801e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e29a:	f7e1 ffcd 	bl	8000238 <__aeabi_dsub>
 801e29e:	4622      	mov	r2, r4
 801e2a0:	462b      	mov	r3, r5
 801e2a2:	f7e2 f981 	bl	80005a8 <__aeabi_dmul>
 801e2a6:	a334      	add	r3, pc, #208	@ (adr r3, 801e378 <__kernel_cos+0x168>)
 801e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2ac:	f7e1 ffc6 	bl	800023c <__adddf3>
 801e2b0:	4622      	mov	r2, r4
 801e2b2:	462b      	mov	r3, r5
 801e2b4:	f7e2 f978 	bl	80005a8 <__aeabi_dmul>
 801e2b8:	4622      	mov	r2, r4
 801e2ba:	462b      	mov	r3, r5
 801e2bc:	f7e2 f974 	bl	80005a8 <__aeabi_dmul>
 801e2c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e2c4:	4604      	mov	r4, r0
 801e2c6:	460d      	mov	r5, r1
 801e2c8:	4630      	mov	r0, r6
 801e2ca:	4639      	mov	r1, r7
 801e2cc:	f7e2 f96c 	bl	80005a8 <__aeabi_dmul>
 801e2d0:	460b      	mov	r3, r1
 801e2d2:	4602      	mov	r2, r0
 801e2d4:	4629      	mov	r1, r5
 801e2d6:	4620      	mov	r0, r4
 801e2d8:	f7e1 ffae 	bl	8000238 <__aeabi_dsub>
 801e2dc:	4b2b      	ldr	r3, [pc, #172]	@ (801e38c <__kernel_cos+0x17c>)
 801e2de:	4598      	cmp	r8, r3
 801e2e0:	4606      	mov	r6, r0
 801e2e2:	460f      	mov	r7, r1
 801e2e4:	d810      	bhi.n	801e308 <__kernel_cos+0xf8>
 801e2e6:	4602      	mov	r2, r0
 801e2e8:	460b      	mov	r3, r1
 801e2ea:	4650      	mov	r0, sl
 801e2ec:	4659      	mov	r1, fp
 801e2ee:	f7e1 ffa3 	bl	8000238 <__aeabi_dsub>
 801e2f2:	460b      	mov	r3, r1
 801e2f4:	4926      	ldr	r1, [pc, #152]	@ (801e390 <__kernel_cos+0x180>)
 801e2f6:	4602      	mov	r2, r0
 801e2f8:	2000      	movs	r0, #0
 801e2fa:	f7e1 ff9d 	bl	8000238 <__aeabi_dsub>
 801e2fe:	ec41 0b10 	vmov	d0, r0, r1
 801e302:	b003      	add	sp, #12
 801e304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e308:	4b22      	ldr	r3, [pc, #136]	@ (801e394 <__kernel_cos+0x184>)
 801e30a:	4921      	ldr	r1, [pc, #132]	@ (801e390 <__kernel_cos+0x180>)
 801e30c:	4598      	cmp	r8, r3
 801e30e:	bf8c      	ite	hi
 801e310:	4d21      	ldrhi	r5, [pc, #132]	@ (801e398 <__kernel_cos+0x188>)
 801e312:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801e316:	2400      	movs	r4, #0
 801e318:	4622      	mov	r2, r4
 801e31a:	462b      	mov	r3, r5
 801e31c:	2000      	movs	r0, #0
 801e31e:	f7e1 ff8b 	bl	8000238 <__aeabi_dsub>
 801e322:	4622      	mov	r2, r4
 801e324:	4680      	mov	r8, r0
 801e326:	4689      	mov	r9, r1
 801e328:	462b      	mov	r3, r5
 801e32a:	4650      	mov	r0, sl
 801e32c:	4659      	mov	r1, fp
 801e32e:	f7e1 ff83 	bl	8000238 <__aeabi_dsub>
 801e332:	4632      	mov	r2, r6
 801e334:	463b      	mov	r3, r7
 801e336:	f7e1 ff7f 	bl	8000238 <__aeabi_dsub>
 801e33a:	4602      	mov	r2, r0
 801e33c:	460b      	mov	r3, r1
 801e33e:	4640      	mov	r0, r8
 801e340:	4649      	mov	r1, r9
 801e342:	e7da      	b.n	801e2fa <__kernel_cos+0xea>
 801e344:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801e380 <__kernel_cos+0x170>
 801e348:	e7db      	b.n	801e302 <__kernel_cos+0xf2>
 801e34a:	bf00      	nop
 801e34c:	f3af 8000 	nop.w
 801e350:	be8838d4 	.word	0xbe8838d4
 801e354:	bda8fae9 	.word	0xbda8fae9
 801e358:	bdb4b1c4 	.word	0xbdb4b1c4
 801e35c:	3e21ee9e 	.word	0x3e21ee9e
 801e360:	809c52ad 	.word	0x809c52ad
 801e364:	3e927e4f 	.word	0x3e927e4f
 801e368:	19cb1590 	.word	0x19cb1590
 801e36c:	3efa01a0 	.word	0x3efa01a0
 801e370:	16c15177 	.word	0x16c15177
 801e374:	3f56c16c 	.word	0x3f56c16c
 801e378:	5555554c 	.word	0x5555554c
 801e37c:	3fa55555 	.word	0x3fa55555
 801e380:	00000000 	.word	0x00000000
 801e384:	3ff00000 	.word	0x3ff00000
 801e388:	3fe00000 	.word	0x3fe00000
 801e38c:	3fd33332 	.word	0x3fd33332
 801e390:	3ff00000 	.word	0x3ff00000
 801e394:	3fe90000 	.word	0x3fe90000
 801e398:	3fd20000 	.word	0x3fd20000
 801e39c:	00000000 	.word	0x00000000

0801e3a0 <__kernel_sin>:
 801e3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3a4:	ec55 4b10 	vmov	r4, r5, d0
 801e3a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e3ac:	b085      	sub	sp, #20
 801e3ae:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e3b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e3b6:	4680      	mov	r8, r0
 801e3b8:	d205      	bcs.n	801e3c6 <__kernel_sin+0x26>
 801e3ba:	4620      	mov	r0, r4
 801e3bc:	4629      	mov	r1, r5
 801e3be:	f7e2 fba3 	bl	8000b08 <__aeabi_d2iz>
 801e3c2:	2800      	cmp	r0, #0
 801e3c4:	d052      	beq.n	801e46c <__kernel_sin+0xcc>
 801e3c6:	4622      	mov	r2, r4
 801e3c8:	462b      	mov	r3, r5
 801e3ca:	4620      	mov	r0, r4
 801e3cc:	4629      	mov	r1, r5
 801e3ce:	f7e2 f8eb 	bl	80005a8 <__aeabi_dmul>
 801e3d2:	4682      	mov	sl, r0
 801e3d4:	468b      	mov	fp, r1
 801e3d6:	4602      	mov	r2, r0
 801e3d8:	460b      	mov	r3, r1
 801e3da:	4620      	mov	r0, r4
 801e3dc:	4629      	mov	r1, r5
 801e3de:	f7e2 f8e3 	bl	80005a8 <__aeabi_dmul>
 801e3e2:	a342      	add	r3, pc, #264	@ (adr r3, 801e4ec <__kernel_sin+0x14c>)
 801e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3e8:	e9cd 0100 	strd	r0, r1, [sp]
 801e3ec:	4650      	mov	r0, sl
 801e3ee:	4659      	mov	r1, fp
 801e3f0:	f7e2 f8da 	bl	80005a8 <__aeabi_dmul>
 801e3f4:	a33f      	add	r3, pc, #252	@ (adr r3, 801e4f4 <__kernel_sin+0x154>)
 801e3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3fa:	f7e1 ff1d 	bl	8000238 <__aeabi_dsub>
 801e3fe:	4652      	mov	r2, sl
 801e400:	465b      	mov	r3, fp
 801e402:	f7e2 f8d1 	bl	80005a8 <__aeabi_dmul>
 801e406:	a33d      	add	r3, pc, #244	@ (adr r3, 801e4fc <__kernel_sin+0x15c>)
 801e408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e40c:	f7e1 ff16 	bl	800023c <__adddf3>
 801e410:	4652      	mov	r2, sl
 801e412:	465b      	mov	r3, fp
 801e414:	f7e2 f8c8 	bl	80005a8 <__aeabi_dmul>
 801e418:	a33a      	add	r3, pc, #232	@ (adr r3, 801e504 <__kernel_sin+0x164>)
 801e41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e41e:	f7e1 ff0b 	bl	8000238 <__aeabi_dsub>
 801e422:	4652      	mov	r2, sl
 801e424:	465b      	mov	r3, fp
 801e426:	f7e2 f8bf 	bl	80005a8 <__aeabi_dmul>
 801e42a:	a338      	add	r3, pc, #224	@ (adr r3, 801e50c <__kernel_sin+0x16c>)
 801e42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e430:	f7e1 ff04 	bl	800023c <__adddf3>
 801e434:	4606      	mov	r6, r0
 801e436:	460f      	mov	r7, r1
 801e438:	f1b8 0f00 	cmp.w	r8, #0
 801e43c:	d11b      	bne.n	801e476 <__kernel_sin+0xd6>
 801e43e:	4602      	mov	r2, r0
 801e440:	460b      	mov	r3, r1
 801e442:	4650      	mov	r0, sl
 801e444:	4659      	mov	r1, fp
 801e446:	f7e2 f8af 	bl	80005a8 <__aeabi_dmul>
 801e44a:	a325      	add	r3, pc, #148	@ (adr r3, 801e4e0 <__kernel_sin+0x140>)
 801e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e450:	f7e1 fef2 	bl	8000238 <__aeabi_dsub>
 801e454:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e458:	f7e2 f8a6 	bl	80005a8 <__aeabi_dmul>
 801e45c:	4602      	mov	r2, r0
 801e45e:	460b      	mov	r3, r1
 801e460:	4620      	mov	r0, r4
 801e462:	4629      	mov	r1, r5
 801e464:	f7e1 feea 	bl	800023c <__adddf3>
 801e468:	4604      	mov	r4, r0
 801e46a:	460d      	mov	r5, r1
 801e46c:	ec45 4b10 	vmov	d0, r4, r5
 801e470:	b005      	add	sp, #20
 801e472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e47a:	4b1b      	ldr	r3, [pc, #108]	@ (801e4e8 <__kernel_sin+0x148>)
 801e47c:	2200      	movs	r2, #0
 801e47e:	f7e2 f893 	bl	80005a8 <__aeabi_dmul>
 801e482:	4632      	mov	r2, r6
 801e484:	4680      	mov	r8, r0
 801e486:	4689      	mov	r9, r1
 801e488:	463b      	mov	r3, r7
 801e48a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e48e:	f7e2 f88b 	bl	80005a8 <__aeabi_dmul>
 801e492:	4602      	mov	r2, r0
 801e494:	460b      	mov	r3, r1
 801e496:	4640      	mov	r0, r8
 801e498:	4649      	mov	r1, r9
 801e49a:	f7e1 fecd 	bl	8000238 <__aeabi_dsub>
 801e49e:	4652      	mov	r2, sl
 801e4a0:	465b      	mov	r3, fp
 801e4a2:	f7e2 f881 	bl	80005a8 <__aeabi_dmul>
 801e4a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e4aa:	f7e1 fec5 	bl	8000238 <__aeabi_dsub>
 801e4ae:	a30c      	add	r3, pc, #48	@ (adr r3, 801e4e0 <__kernel_sin+0x140>)
 801e4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4b4:	4606      	mov	r6, r0
 801e4b6:	460f      	mov	r7, r1
 801e4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e4bc:	f7e2 f874 	bl	80005a8 <__aeabi_dmul>
 801e4c0:	4602      	mov	r2, r0
 801e4c2:	460b      	mov	r3, r1
 801e4c4:	4630      	mov	r0, r6
 801e4c6:	4639      	mov	r1, r7
 801e4c8:	f7e1 feb8 	bl	800023c <__adddf3>
 801e4cc:	4602      	mov	r2, r0
 801e4ce:	460b      	mov	r3, r1
 801e4d0:	4620      	mov	r0, r4
 801e4d2:	4629      	mov	r1, r5
 801e4d4:	f7e1 feb0 	bl	8000238 <__aeabi_dsub>
 801e4d8:	e7c6      	b.n	801e468 <__kernel_sin+0xc8>
 801e4da:	bf00      	nop
 801e4dc:	f3af 8000 	nop.w
 801e4e0:	55555549 	.word	0x55555549
 801e4e4:	3fc55555 	.word	0x3fc55555
 801e4e8:	3fe00000 	.word	0x3fe00000
 801e4ec:	5acfd57c 	.word	0x5acfd57c
 801e4f0:	3de5d93a 	.word	0x3de5d93a
 801e4f4:	8a2b9ceb 	.word	0x8a2b9ceb
 801e4f8:	3e5ae5e6 	.word	0x3e5ae5e6
 801e4fc:	57b1fe7d 	.word	0x57b1fe7d
 801e500:	3ec71de3 	.word	0x3ec71de3
 801e504:	19c161d5 	.word	0x19c161d5
 801e508:	3f2a01a0 	.word	0x3f2a01a0
 801e50c:	1110f8a6 	.word	0x1110f8a6
 801e510:	3f811111 	.word	0x3f811111
 801e514:	00000000 	.word	0x00000000

0801e518 <__ieee754_rem_pio2>:
 801e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e51c:	ec57 6b10 	vmov	r6, r7, d0
 801e520:	4bc5      	ldr	r3, [pc, #788]	@ (801e838 <__ieee754_rem_pio2+0x320>)
 801e522:	b08d      	sub	sp, #52	@ 0x34
 801e524:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e528:	4598      	cmp	r8, r3
 801e52a:	4604      	mov	r4, r0
 801e52c:	9704      	str	r7, [sp, #16]
 801e52e:	d807      	bhi.n	801e540 <__ieee754_rem_pio2+0x28>
 801e530:	2200      	movs	r2, #0
 801e532:	2300      	movs	r3, #0
 801e534:	ed80 0b00 	vstr	d0, [r0]
 801e538:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e53c:	2500      	movs	r5, #0
 801e53e:	e028      	b.n	801e592 <__ieee754_rem_pio2+0x7a>
 801e540:	4bbe      	ldr	r3, [pc, #760]	@ (801e83c <__ieee754_rem_pio2+0x324>)
 801e542:	4598      	cmp	r8, r3
 801e544:	d878      	bhi.n	801e638 <__ieee754_rem_pio2+0x120>
 801e546:	9b04      	ldr	r3, [sp, #16]
 801e548:	4dbd      	ldr	r5, [pc, #756]	@ (801e840 <__ieee754_rem_pio2+0x328>)
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	4630      	mov	r0, r6
 801e54e:	a3ac      	add	r3, pc, #688	@ (adr r3, 801e800 <__ieee754_rem_pio2+0x2e8>)
 801e550:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e554:	4639      	mov	r1, r7
 801e556:	dd38      	ble.n	801e5ca <__ieee754_rem_pio2+0xb2>
 801e558:	f7e1 fe6e 	bl	8000238 <__aeabi_dsub>
 801e55c:	45a8      	cmp	r8, r5
 801e55e:	4606      	mov	r6, r0
 801e560:	460f      	mov	r7, r1
 801e562:	d01a      	beq.n	801e59a <__ieee754_rem_pio2+0x82>
 801e564:	a3a8      	add	r3, pc, #672	@ (adr r3, 801e808 <__ieee754_rem_pio2+0x2f0>)
 801e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e56a:	f7e1 fe65 	bl	8000238 <__aeabi_dsub>
 801e56e:	4602      	mov	r2, r0
 801e570:	460b      	mov	r3, r1
 801e572:	4680      	mov	r8, r0
 801e574:	4689      	mov	r9, r1
 801e576:	4630      	mov	r0, r6
 801e578:	4639      	mov	r1, r7
 801e57a:	f7e1 fe5d 	bl	8000238 <__aeabi_dsub>
 801e57e:	a3a2      	add	r3, pc, #648	@ (adr r3, 801e808 <__ieee754_rem_pio2+0x2f0>)
 801e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e584:	f7e1 fe58 	bl	8000238 <__aeabi_dsub>
 801e588:	e9c4 8900 	strd	r8, r9, [r4]
 801e58c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e590:	2501      	movs	r5, #1
 801e592:	4628      	mov	r0, r5
 801e594:	b00d      	add	sp, #52	@ 0x34
 801e596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e59a:	a39d      	add	r3, pc, #628	@ (adr r3, 801e810 <__ieee754_rem_pio2+0x2f8>)
 801e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5a0:	f7e1 fe4a 	bl	8000238 <__aeabi_dsub>
 801e5a4:	a39c      	add	r3, pc, #624	@ (adr r3, 801e818 <__ieee754_rem_pio2+0x300>)
 801e5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5aa:	4606      	mov	r6, r0
 801e5ac:	460f      	mov	r7, r1
 801e5ae:	f7e1 fe43 	bl	8000238 <__aeabi_dsub>
 801e5b2:	4602      	mov	r2, r0
 801e5b4:	460b      	mov	r3, r1
 801e5b6:	4680      	mov	r8, r0
 801e5b8:	4689      	mov	r9, r1
 801e5ba:	4630      	mov	r0, r6
 801e5bc:	4639      	mov	r1, r7
 801e5be:	f7e1 fe3b 	bl	8000238 <__aeabi_dsub>
 801e5c2:	a395      	add	r3, pc, #596	@ (adr r3, 801e818 <__ieee754_rem_pio2+0x300>)
 801e5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c8:	e7dc      	b.n	801e584 <__ieee754_rem_pio2+0x6c>
 801e5ca:	f7e1 fe37 	bl	800023c <__adddf3>
 801e5ce:	45a8      	cmp	r8, r5
 801e5d0:	4606      	mov	r6, r0
 801e5d2:	460f      	mov	r7, r1
 801e5d4:	d018      	beq.n	801e608 <__ieee754_rem_pio2+0xf0>
 801e5d6:	a38c      	add	r3, pc, #560	@ (adr r3, 801e808 <__ieee754_rem_pio2+0x2f0>)
 801e5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5dc:	f7e1 fe2e 	bl	800023c <__adddf3>
 801e5e0:	4602      	mov	r2, r0
 801e5e2:	460b      	mov	r3, r1
 801e5e4:	4680      	mov	r8, r0
 801e5e6:	4689      	mov	r9, r1
 801e5e8:	4630      	mov	r0, r6
 801e5ea:	4639      	mov	r1, r7
 801e5ec:	f7e1 fe24 	bl	8000238 <__aeabi_dsub>
 801e5f0:	a385      	add	r3, pc, #532	@ (adr r3, 801e808 <__ieee754_rem_pio2+0x2f0>)
 801e5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5f6:	f7e1 fe21 	bl	800023c <__adddf3>
 801e5fa:	f04f 35ff 	mov.w	r5, #4294967295
 801e5fe:	e9c4 8900 	strd	r8, r9, [r4]
 801e602:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e606:	e7c4      	b.n	801e592 <__ieee754_rem_pio2+0x7a>
 801e608:	a381      	add	r3, pc, #516	@ (adr r3, 801e810 <__ieee754_rem_pio2+0x2f8>)
 801e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e60e:	f7e1 fe15 	bl	800023c <__adddf3>
 801e612:	a381      	add	r3, pc, #516	@ (adr r3, 801e818 <__ieee754_rem_pio2+0x300>)
 801e614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e618:	4606      	mov	r6, r0
 801e61a:	460f      	mov	r7, r1
 801e61c:	f7e1 fe0e 	bl	800023c <__adddf3>
 801e620:	4602      	mov	r2, r0
 801e622:	460b      	mov	r3, r1
 801e624:	4680      	mov	r8, r0
 801e626:	4689      	mov	r9, r1
 801e628:	4630      	mov	r0, r6
 801e62a:	4639      	mov	r1, r7
 801e62c:	f7e1 fe04 	bl	8000238 <__aeabi_dsub>
 801e630:	a379      	add	r3, pc, #484	@ (adr r3, 801e818 <__ieee754_rem_pio2+0x300>)
 801e632:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e636:	e7de      	b.n	801e5f6 <__ieee754_rem_pio2+0xde>
 801e638:	4b82      	ldr	r3, [pc, #520]	@ (801e844 <__ieee754_rem_pio2+0x32c>)
 801e63a:	4598      	cmp	r8, r3
 801e63c:	f200 80d1 	bhi.w	801e7e2 <__ieee754_rem_pio2+0x2ca>
 801e640:	f000 f99a 	bl	801e978 <fabs>
 801e644:	ec57 6b10 	vmov	r6, r7, d0
 801e648:	a375      	add	r3, pc, #468	@ (adr r3, 801e820 <__ieee754_rem_pio2+0x308>)
 801e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e64e:	4630      	mov	r0, r6
 801e650:	4639      	mov	r1, r7
 801e652:	f7e1 ffa9 	bl	80005a8 <__aeabi_dmul>
 801e656:	4b7c      	ldr	r3, [pc, #496]	@ (801e848 <__ieee754_rem_pio2+0x330>)
 801e658:	2200      	movs	r2, #0
 801e65a:	f7e1 fdef 	bl	800023c <__adddf3>
 801e65e:	f7e2 fa53 	bl	8000b08 <__aeabi_d2iz>
 801e662:	4605      	mov	r5, r0
 801e664:	f7e1 ff36 	bl	80004d4 <__aeabi_i2d>
 801e668:	4602      	mov	r2, r0
 801e66a:	460b      	mov	r3, r1
 801e66c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e670:	a363      	add	r3, pc, #396	@ (adr r3, 801e800 <__ieee754_rem_pio2+0x2e8>)
 801e672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e676:	f7e1 ff97 	bl	80005a8 <__aeabi_dmul>
 801e67a:	4602      	mov	r2, r0
 801e67c:	460b      	mov	r3, r1
 801e67e:	4630      	mov	r0, r6
 801e680:	4639      	mov	r1, r7
 801e682:	f7e1 fdd9 	bl	8000238 <__aeabi_dsub>
 801e686:	a360      	add	r3, pc, #384	@ (adr r3, 801e808 <__ieee754_rem_pio2+0x2f0>)
 801e688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e68c:	4682      	mov	sl, r0
 801e68e:	468b      	mov	fp, r1
 801e690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e694:	f7e1 ff88 	bl	80005a8 <__aeabi_dmul>
 801e698:	2d1f      	cmp	r5, #31
 801e69a:	4606      	mov	r6, r0
 801e69c:	460f      	mov	r7, r1
 801e69e:	dc0c      	bgt.n	801e6ba <__ieee754_rem_pio2+0x1a2>
 801e6a0:	4b6a      	ldr	r3, [pc, #424]	@ (801e84c <__ieee754_rem_pio2+0x334>)
 801e6a2:	1e6a      	subs	r2, r5, #1
 801e6a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e6a8:	4543      	cmp	r3, r8
 801e6aa:	d006      	beq.n	801e6ba <__ieee754_rem_pio2+0x1a2>
 801e6ac:	4632      	mov	r2, r6
 801e6ae:	463b      	mov	r3, r7
 801e6b0:	4650      	mov	r0, sl
 801e6b2:	4659      	mov	r1, fp
 801e6b4:	f7e1 fdc0 	bl	8000238 <__aeabi_dsub>
 801e6b8:	e00e      	b.n	801e6d8 <__ieee754_rem_pio2+0x1c0>
 801e6ba:	463b      	mov	r3, r7
 801e6bc:	4632      	mov	r2, r6
 801e6be:	4650      	mov	r0, sl
 801e6c0:	4659      	mov	r1, fp
 801e6c2:	f7e1 fdb9 	bl	8000238 <__aeabi_dsub>
 801e6c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e6ca:	9305      	str	r3, [sp, #20]
 801e6cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e6d0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801e6d4:	2b10      	cmp	r3, #16
 801e6d6:	dc02      	bgt.n	801e6de <__ieee754_rem_pio2+0x1c6>
 801e6d8:	e9c4 0100 	strd	r0, r1, [r4]
 801e6dc:	e039      	b.n	801e752 <__ieee754_rem_pio2+0x23a>
 801e6de:	a34c      	add	r3, pc, #304	@ (adr r3, 801e810 <__ieee754_rem_pio2+0x2f8>)
 801e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e6e8:	f7e1 ff5e 	bl	80005a8 <__aeabi_dmul>
 801e6ec:	4606      	mov	r6, r0
 801e6ee:	460f      	mov	r7, r1
 801e6f0:	4602      	mov	r2, r0
 801e6f2:	460b      	mov	r3, r1
 801e6f4:	4650      	mov	r0, sl
 801e6f6:	4659      	mov	r1, fp
 801e6f8:	f7e1 fd9e 	bl	8000238 <__aeabi_dsub>
 801e6fc:	4602      	mov	r2, r0
 801e6fe:	460b      	mov	r3, r1
 801e700:	4680      	mov	r8, r0
 801e702:	4689      	mov	r9, r1
 801e704:	4650      	mov	r0, sl
 801e706:	4659      	mov	r1, fp
 801e708:	f7e1 fd96 	bl	8000238 <__aeabi_dsub>
 801e70c:	4632      	mov	r2, r6
 801e70e:	463b      	mov	r3, r7
 801e710:	f7e1 fd92 	bl	8000238 <__aeabi_dsub>
 801e714:	a340      	add	r3, pc, #256	@ (adr r3, 801e818 <__ieee754_rem_pio2+0x300>)
 801e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e71a:	4606      	mov	r6, r0
 801e71c:	460f      	mov	r7, r1
 801e71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e722:	f7e1 ff41 	bl	80005a8 <__aeabi_dmul>
 801e726:	4632      	mov	r2, r6
 801e728:	463b      	mov	r3, r7
 801e72a:	f7e1 fd85 	bl	8000238 <__aeabi_dsub>
 801e72e:	4602      	mov	r2, r0
 801e730:	460b      	mov	r3, r1
 801e732:	4606      	mov	r6, r0
 801e734:	460f      	mov	r7, r1
 801e736:	4640      	mov	r0, r8
 801e738:	4649      	mov	r1, r9
 801e73a:	f7e1 fd7d 	bl	8000238 <__aeabi_dsub>
 801e73e:	9a05      	ldr	r2, [sp, #20]
 801e740:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e744:	1ad3      	subs	r3, r2, r3
 801e746:	2b31      	cmp	r3, #49	@ 0x31
 801e748:	dc20      	bgt.n	801e78c <__ieee754_rem_pio2+0x274>
 801e74a:	e9c4 0100 	strd	r0, r1, [r4]
 801e74e:	46c2      	mov	sl, r8
 801e750:	46cb      	mov	fp, r9
 801e752:	e9d4 8900 	ldrd	r8, r9, [r4]
 801e756:	4650      	mov	r0, sl
 801e758:	4642      	mov	r2, r8
 801e75a:	464b      	mov	r3, r9
 801e75c:	4659      	mov	r1, fp
 801e75e:	f7e1 fd6b 	bl	8000238 <__aeabi_dsub>
 801e762:	463b      	mov	r3, r7
 801e764:	4632      	mov	r2, r6
 801e766:	f7e1 fd67 	bl	8000238 <__aeabi_dsub>
 801e76a:	9b04      	ldr	r3, [sp, #16]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e772:	f6bf af0e 	bge.w	801e592 <__ieee754_rem_pio2+0x7a>
 801e776:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801e77a:	6063      	str	r3, [r4, #4]
 801e77c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e780:	f8c4 8000 	str.w	r8, [r4]
 801e784:	60a0      	str	r0, [r4, #8]
 801e786:	60e3      	str	r3, [r4, #12]
 801e788:	426d      	negs	r5, r5
 801e78a:	e702      	b.n	801e592 <__ieee754_rem_pio2+0x7a>
 801e78c:	a326      	add	r3, pc, #152	@ (adr r3, 801e828 <__ieee754_rem_pio2+0x310>)
 801e78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e796:	f7e1 ff07 	bl	80005a8 <__aeabi_dmul>
 801e79a:	4606      	mov	r6, r0
 801e79c:	460f      	mov	r7, r1
 801e79e:	4602      	mov	r2, r0
 801e7a0:	460b      	mov	r3, r1
 801e7a2:	4640      	mov	r0, r8
 801e7a4:	4649      	mov	r1, r9
 801e7a6:	f7e1 fd47 	bl	8000238 <__aeabi_dsub>
 801e7aa:	4602      	mov	r2, r0
 801e7ac:	460b      	mov	r3, r1
 801e7ae:	4682      	mov	sl, r0
 801e7b0:	468b      	mov	fp, r1
 801e7b2:	4640      	mov	r0, r8
 801e7b4:	4649      	mov	r1, r9
 801e7b6:	f7e1 fd3f 	bl	8000238 <__aeabi_dsub>
 801e7ba:	4632      	mov	r2, r6
 801e7bc:	463b      	mov	r3, r7
 801e7be:	f7e1 fd3b 	bl	8000238 <__aeabi_dsub>
 801e7c2:	a31b      	add	r3, pc, #108	@ (adr r3, 801e830 <__ieee754_rem_pio2+0x318>)
 801e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7c8:	4606      	mov	r6, r0
 801e7ca:	460f      	mov	r7, r1
 801e7cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e7d0:	f7e1 feea 	bl	80005a8 <__aeabi_dmul>
 801e7d4:	4632      	mov	r2, r6
 801e7d6:	463b      	mov	r3, r7
 801e7d8:	f7e1 fd2e 	bl	8000238 <__aeabi_dsub>
 801e7dc:	4606      	mov	r6, r0
 801e7de:	460f      	mov	r7, r1
 801e7e0:	e764      	b.n	801e6ac <__ieee754_rem_pio2+0x194>
 801e7e2:	4b1b      	ldr	r3, [pc, #108]	@ (801e850 <__ieee754_rem_pio2+0x338>)
 801e7e4:	4598      	cmp	r8, r3
 801e7e6:	d935      	bls.n	801e854 <__ieee754_rem_pio2+0x33c>
 801e7e8:	4632      	mov	r2, r6
 801e7ea:	463b      	mov	r3, r7
 801e7ec:	4630      	mov	r0, r6
 801e7ee:	4639      	mov	r1, r7
 801e7f0:	f7e1 fd22 	bl	8000238 <__aeabi_dsub>
 801e7f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e7f8:	e9c4 0100 	strd	r0, r1, [r4]
 801e7fc:	e69e      	b.n	801e53c <__ieee754_rem_pio2+0x24>
 801e7fe:	bf00      	nop
 801e800:	54400000 	.word	0x54400000
 801e804:	3ff921fb 	.word	0x3ff921fb
 801e808:	1a626331 	.word	0x1a626331
 801e80c:	3dd0b461 	.word	0x3dd0b461
 801e810:	1a600000 	.word	0x1a600000
 801e814:	3dd0b461 	.word	0x3dd0b461
 801e818:	2e037073 	.word	0x2e037073
 801e81c:	3ba3198a 	.word	0x3ba3198a
 801e820:	6dc9c883 	.word	0x6dc9c883
 801e824:	3fe45f30 	.word	0x3fe45f30
 801e828:	2e000000 	.word	0x2e000000
 801e82c:	3ba3198a 	.word	0x3ba3198a
 801e830:	252049c1 	.word	0x252049c1
 801e834:	397b839a 	.word	0x397b839a
 801e838:	3fe921fb 	.word	0x3fe921fb
 801e83c:	4002d97b 	.word	0x4002d97b
 801e840:	3ff921fb 	.word	0x3ff921fb
 801e844:	413921fb 	.word	0x413921fb
 801e848:	3fe00000 	.word	0x3fe00000
 801e84c:	08021f9c 	.word	0x08021f9c
 801e850:	7fefffff 	.word	0x7fefffff
 801e854:	ea4f 5528 	mov.w	r5, r8, asr #20
 801e858:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801e85c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801e860:	4630      	mov	r0, r6
 801e862:	460f      	mov	r7, r1
 801e864:	f7e2 f950 	bl	8000b08 <__aeabi_d2iz>
 801e868:	f7e1 fe34 	bl	80004d4 <__aeabi_i2d>
 801e86c:	4602      	mov	r2, r0
 801e86e:	460b      	mov	r3, r1
 801e870:	4630      	mov	r0, r6
 801e872:	4639      	mov	r1, r7
 801e874:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e878:	f7e1 fcde 	bl	8000238 <__aeabi_dsub>
 801e87c:	4b22      	ldr	r3, [pc, #136]	@ (801e908 <__ieee754_rem_pio2+0x3f0>)
 801e87e:	2200      	movs	r2, #0
 801e880:	f7e1 fe92 	bl	80005a8 <__aeabi_dmul>
 801e884:	460f      	mov	r7, r1
 801e886:	4606      	mov	r6, r0
 801e888:	f7e2 f93e 	bl	8000b08 <__aeabi_d2iz>
 801e88c:	f7e1 fe22 	bl	80004d4 <__aeabi_i2d>
 801e890:	4602      	mov	r2, r0
 801e892:	460b      	mov	r3, r1
 801e894:	4630      	mov	r0, r6
 801e896:	4639      	mov	r1, r7
 801e898:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e89c:	f7e1 fccc 	bl	8000238 <__aeabi_dsub>
 801e8a0:	4b19      	ldr	r3, [pc, #100]	@ (801e908 <__ieee754_rem_pio2+0x3f0>)
 801e8a2:	2200      	movs	r2, #0
 801e8a4:	f7e1 fe80 	bl	80005a8 <__aeabi_dmul>
 801e8a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801e8ac:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801e8b0:	f04f 0803 	mov.w	r8, #3
 801e8b4:	2600      	movs	r6, #0
 801e8b6:	2700      	movs	r7, #0
 801e8b8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801e8bc:	4632      	mov	r2, r6
 801e8be:	463b      	mov	r3, r7
 801e8c0:	46c2      	mov	sl, r8
 801e8c2:	f108 38ff 	add.w	r8, r8, #4294967295
 801e8c6:	f7e2 f8d7 	bl	8000a78 <__aeabi_dcmpeq>
 801e8ca:	2800      	cmp	r0, #0
 801e8cc:	d1f4      	bne.n	801e8b8 <__ieee754_rem_pio2+0x3a0>
 801e8ce:	4b0f      	ldr	r3, [pc, #60]	@ (801e90c <__ieee754_rem_pio2+0x3f4>)
 801e8d0:	9301      	str	r3, [sp, #4]
 801e8d2:	2302      	movs	r3, #2
 801e8d4:	9300      	str	r3, [sp, #0]
 801e8d6:	462a      	mov	r2, r5
 801e8d8:	4653      	mov	r3, sl
 801e8da:	4621      	mov	r1, r4
 801e8dc:	a806      	add	r0, sp, #24
 801e8de:	f000 f947 	bl	801eb70 <__kernel_rem_pio2>
 801e8e2:	9b04      	ldr	r3, [sp, #16]
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	4605      	mov	r5, r0
 801e8e8:	f6bf ae53 	bge.w	801e592 <__ieee754_rem_pio2+0x7a>
 801e8ec:	e9d4 2100 	ldrd	r2, r1, [r4]
 801e8f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e8f4:	e9c4 2300 	strd	r2, r3, [r4]
 801e8f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801e8fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e900:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801e904:	e740      	b.n	801e788 <__ieee754_rem_pio2+0x270>
 801e906:	bf00      	nop
 801e908:	41700000 	.word	0x41700000
 801e90c:	0802201c 	.word	0x0802201c

0801e910 <acos>:
 801e910:	b538      	push	{r3, r4, r5, lr}
 801e912:	ed2d 8b02 	vpush	{d8}
 801e916:	ec55 4b10 	vmov	r4, r5, d0
 801e91a:	f000 fc81 	bl	801f220 <__ieee754_acos>
 801e91e:	4622      	mov	r2, r4
 801e920:	462b      	mov	r3, r5
 801e922:	4620      	mov	r0, r4
 801e924:	4629      	mov	r1, r5
 801e926:	eeb0 8a40 	vmov.f32	s16, s0
 801e92a:	eef0 8a60 	vmov.f32	s17, s1
 801e92e:	f7e2 f8d5 	bl	8000adc <__aeabi_dcmpun>
 801e932:	b9a8      	cbnz	r0, 801e960 <acos+0x50>
 801e934:	ec45 4b10 	vmov	d0, r4, r5
 801e938:	f000 f81e 	bl	801e978 <fabs>
 801e93c:	4b0c      	ldr	r3, [pc, #48]	@ (801e970 <acos+0x60>)
 801e93e:	ec51 0b10 	vmov	r0, r1, d0
 801e942:	2200      	movs	r2, #0
 801e944:	f7e2 f8c0 	bl	8000ac8 <__aeabi_dcmpgt>
 801e948:	b150      	cbz	r0, 801e960 <acos+0x50>
 801e94a:	f7fc fe71 	bl	801b630 <__errno>
 801e94e:	ecbd 8b02 	vpop	{d8}
 801e952:	2321      	movs	r3, #33	@ 0x21
 801e954:	6003      	str	r3, [r0, #0]
 801e956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e95a:	4806      	ldr	r0, [pc, #24]	@ (801e974 <acos+0x64>)
 801e95c:	f7fc beac 	b.w	801b6b8 <nan>
 801e960:	eeb0 0a48 	vmov.f32	s0, s16
 801e964:	eef0 0a68 	vmov.f32	s1, s17
 801e968:	ecbd 8b02 	vpop	{d8}
 801e96c:	bd38      	pop	{r3, r4, r5, pc}
 801e96e:	bf00      	nop
 801e970:	3ff00000 	.word	0x3ff00000
 801e974:	08021d56 	.word	0x08021d56

0801e978 <fabs>:
 801e978:	ec51 0b10 	vmov	r0, r1, d0
 801e97c:	4602      	mov	r2, r0
 801e97e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e982:	ec43 2b10 	vmov	d0, r2, r3
 801e986:	4770      	bx	lr

0801e988 <__ieee754_expf>:
 801e988:	ee10 2a10 	vmov	r2, s0
 801e98c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801e990:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801e994:	d902      	bls.n	801e99c <__ieee754_expf+0x14>
 801e996:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e99a:	4770      	bx	lr
 801e99c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801e9a0:	d106      	bne.n	801e9b0 <__ieee754_expf+0x28>
 801e9a2:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801eadc <__ieee754_expf+0x154>
 801e9a6:	2900      	cmp	r1, #0
 801e9a8:	bf18      	it	ne
 801e9aa:	eeb0 0a67 	vmovne.f32	s0, s15
 801e9ae:	4770      	bx	lr
 801e9b0:	484b      	ldr	r0, [pc, #300]	@ (801eae0 <__ieee754_expf+0x158>)
 801e9b2:	4282      	cmp	r2, r0
 801e9b4:	dd02      	ble.n	801e9bc <__ieee754_expf+0x34>
 801e9b6:	2000      	movs	r0, #0
 801e9b8:	f000 b8d4 	b.w	801eb64 <__math_oflowf>
 801e9bc:	2a00      	cmp	r2, #0
 801e9be:	da05      	bge.n	801e9cc <__ieee754_expf+0x44>
 801e9c0:	4a48      	ldr	r2, [pc, #288]	@ (801eae4 <__ieee754_expf+0x15c>)
 801e9c2:	4293      	cmp	r3, r2
 801e9c4:	d902      	bls.n	801e9cc <__ieee754_expf+0x44>
 801e9c6:	2000      	movs	r0, #0
 801e9c8:	f000 b8c6 	b.w	801eb58 <__math_uflowf>
 801e9cc:	4a46      	ldr	r2, [pc, #280]	@ (801eae8 <__ieee754_expf+0x160>)
 801e9ce:	4293      	cmp	r3, r2
 801e9d0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801e9d4:	d952      	bls.n	801ea7c <__ieee754_expf+0xf4>
 801e9d6:	4a45      	ldr	r2, [pc, #276]	@ (801eaec <__ieee754_expf+0x164>)
 801e9d8:	4293      	cmp	r3, r2
 801e9da:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801e9de:	d834      	bhi.n	801ea4a <__ieee754_expf+0xc2>
 801e9e0:	4b43      	ldr	r3, [pc, #268]	@ (801eaf0 <__ieee754_expf+0x168>)
 801e9e2:	4413      	add	r3, r2
 801e9e4:	ed93 7a00 	vldr	s14, [r3]
 801e9e8:	4b42      	ldr	r3, [pc, #264]	@ (801eaf4 <__ieee754_expf+0x16c>)
 801e9ea:	4413      	add	r3, r2
 801e9ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 801e9f0:	f1c1 0201 	rsb	r2, r1, #1
 801e9f4:	edd3 7a00 	vldr	s15, [r3]
 801e9f8:	1a52      	subs	r2, r2, r1
 801e9fa:	ee37 0a67 	vsub.f32	s0, s14, s15
 801e9fe:	ee20 6a00 	vmul.f32	s12, s0, s0
 801ea02:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801eaf8 <__ieee754_expf+0x170>
 801ea06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801eafc <__ieee754_expf+0x174>
 801ea0a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801ea0e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801eb00 <__ieee754_expf+0x178>
 801ea12:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ea16:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801eb04 <__ieee754_expf+0x17c>
 801ea1a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801ea1e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801eb08 <__ieee754_expf+0x180>
 801ea22:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ea26:	eef0 6a40 	vmov.f32	s13, s0
 801ea2a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801ea2e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801ea32:	ee20 5a26 	vmul.f32	s10, s0, s13
 801ea36:	bb92      	cbnz	r2, 801ea9e <__ieee754_expf+0x116>
 801ea38:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801ea3c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801ea40:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ea44:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801ea48:	4770      	bx	lr
 801ea4a:	4b30      	ldr	r3, [pc, #192]	@ (801eb0c <__ieee754_expf+0x184>)
 801ea4c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801eb10 <__ieee754_expf+0x188>
 801ea50:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801eb14 <__ieee754_expf+0x18c>
 801ea54:	4413      	add	r3, r2
 801ea56:	edd3 7a00 	vldr	s15, [r3]
 801ea5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ea5e:	eeb0 7a40 	vmov.f32	s14, s0
 801ea62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ea66:	ee17 2a90 	vmov	r2, s15
 801ea6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea6e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ea72:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801eb18 <__ieee754_expf+0x190>
 801ea76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ea7a:	e7be      	b.n	801e9fa <__ieee754_expf+0x72>
 801ea7c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801ea80:	d20b      	bcs.n	801ea9a <__ieee754_expf+0x112>
 801ea82:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801eb1c <__ieee754_expf+0x194>
 801ea86:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ea8a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ea8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea92:	dd02      	ble.n	801ea9a <__ieee754_expf+0x112>
 801ea94:	ee30 0a25 	vadd.f32	s0, s0, s11
 801ea98:	4770      	bx	lr
 801ea9a:	2200      	movs	r2, #0
 801ea9c:	e7af      	b.n	801e9fe <__ieee754_expf+0x76>
 801ea9e:	ee36 6a66 	vsub.f32	s12, s12, s13
 801eaa2:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801eaa6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801eaaa:	bfb8      	it	lt
 801eaac:	3264      	addlt	r2, #100	@ 0x64
 801eaae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801eab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eab6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801eaba:	ee17 3a90 	vmov	r3, s15
 801eabe:	bfab      	itete	ge
 801eac0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801eac4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801eac8:	ee00 3a10 	vmovge	s0, r3
 801eacc:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801eb20 <__ieee754_expf+0x198>
 801ead0:	bfbc      	itt	lt
 801ead2:	ee00 3a10 	vmovlt	s0, r3
 801ead6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801eada:	4770      	bx	lr
 801eadc:	00000000 	.word	0x00000000
 801eae0:	42b17217 	.word	0x42b17217
 801eae4:	42cff1b5 	.word	0x42cff1b5
 801eae8:	3eb17218 	.word	0x3eb17218
 801eaec:	3f851591 	.word	0x3f851591
 801eaf0:	0802212c 	.word	0x0802212c
 801eaf4:	08022124 	.word	0x08022124
 801eaf8:	3331bb4c 	.word	0x3331bb4c
 801eafc:	b5ddea0e 	.word	0xb5ddea0e
 801eb00:	388ab355 	.word	0x388ab355
 801eb04:	bb360b61 	.word	0xbb360b61
 801eb08:	3e2aaaab 	.word	0x3e2aaaab
 801eb0c:	08022134 	.word	0x08022134
 801eb10:	3fb8aa3b 	.word	0x3fb8aa3b
 801eb14:	3f317180 	.word	0x3f317180
 801eb18:	3717f7d1 	.word	0x3717f7d1
 801eb1c:	7149f2ca 	.word	0x7149f2ca
 801eb20:	0d800000 	.word	0x0d800000

0801eb24 <with_errnof>:
 801eb24:	b510      	push	{r4, lr}
 801eb26:	ed2d 8b02 	vpush	{d8}
 801eb2a:	eeb0 8a40 	vmov.f32	s16, s0
 801eb2e:	4604      	mov	r4, r0
 801eb30:	f7fc fd7e 	bl	801b630 <__errno>
 801eb34:	eeb0 0a48 	vmov.f32	s0, s16
 801eb38:	ecbd 8b02 	vpop	{d8}
 801eb3c:	6004      	str	r4, [r0, #0]
 801eb3e:	bd10      	pop	{r4, pc}

0801eb40 <xflowf>:
 801eb40:	b130      	cbz	r0, 801eb50 <xflowf+0x10>
 801eb42:	eef1 7a40 	vneg.f32	s15, s0
 801eb46:	ee27 0a80 	vmul.f32	s0, s15, s0
 801eb4a:	2022      	movs	r0, #34	@ 0x22
 801eb4c:	f7ff bfea 	b.w	801eb24 <with_errnof>
 801eb50:	eef0 7a40 	vmov.f32	s15, s0
 801eb54:	e7f7      	b.n	801eb46 <xflowf+0x6>
	...

0801eb58 <__math_uflowf>:
 801eb58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801eb60 <__math_uflowf+0x8>
 801eb5c:	f7ff bff0 	b.w	801eb40 <xflowf>
 801eb60:	10000000 	.word	0x10000000

0801eb64 <__math_oflowf>:
 801eb64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801eb6c <__math_oflowf+0x8>
 801eb68:	f7ff bfea 	b.w	801eb40 <xflowf>
 801eb6c:	70000000 	.word	0x70000000

0801eb70 <__kernel_rem_pio2>:
 801eb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb74:	ed2d 8b02 	vpush	{d8}
 801eb78:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801eb7c:	f112 0f14 	cmn.w	r2, #20
 801eb80:	9306      	str	r3, [sp, #24]
 801eb82:	9104      	str	r1, [sp, #16]
 801eb84:	4bbe      	ldr	r3, [pc, #760]	@ (801ee80 <__kernel_rem_pio2+0x310>)
 801eb86:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801eb88:	9008      	str	r0, [sp, #32]
 801eb8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801eb8e:	9300      	str	r3, [sp, #0]
 801eb90:	9b06      	ldr	r3, [sp, #24]
 801eb92:	f103 33ff 	add.w	r3, r3, #4294967295
 801eb96:	bfa8      	it	ge
 801eb98:	1ed4      	subge	r4, r2, #3
 801eb9a:	9305      	str	r3, [sp, #20]
 801eb9c:	bfb2      	itee	lt
 801eb9e:	2400      	movlt	r4, #0
 801eba0:	2318      	movge	r3, #24
 801eba2:	fb94 f4f3 	sdivge	r4, r4, r3
 801eba6:	f06f 0317 	mvn.w	r3, #23
 801ebaa:	fb04 3303 	mla	r3, r4, r3, r3
 801ebae:	eb03 0b02 	add.w	fp, r3, r2
 801ebb2:	9b00      	ldr	r3, [sp, #0]
 801ebb4:	9a05      	ldr	r2, [sp, #20]
 801ebb6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801ee70 <__kernel_rem_pio2+0x300>
 801ebba:	eb03 0802 	add.w	r8, r3, r2
 801ebbe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ebc0:	1aa7      	subs	r7, r4, r2
 801ebc2:	ae20      	add	r6, sp, #128	@ 0x80
 801ebc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ebc8:	2500      	movs	r5, #0
 801ebca:	4545      	cmp	r5, r8
 801ebcc:	dd13      	ble.n	801ebf6 <__kernel_rem_pio2+0x86>
 801ebce:	9b06      	ldr	r3, [sp, #24]
 801ebd0:	aa20      	add	r2, sp, #128	@ 0x80
 801ebd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ebd6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801ebda:	f04f 0800 	mov.w	r8, #0
 801ebde:	9b00      	ldr	r3, [sp, #0]
 801ebe0:	4598      	cmp	r8, r3
 801ebe2:	dc31      	bgt.n	801ec48 <__kernel_rem_pio2+0xd8>
 801ebe4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801ee70 <__kernel_rem_pio2+0x300>
 801ebe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ebec:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ebf0:	462f      	mov	r7, r5
 801ebf2:	2600      	movs	r6, #0
 801ebf4:	e01b      	b.n	801ec2e <__kernel_rem_pio2+0xbe>
 801ebf6:	42ef      	cmn	r7, r5
 801ebf8:	d407      	bmi.n	801ec0a <__kernel_rem_pio2+0x9a>
 801ebfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ebfe:	f7e1 fc69 	bl	80004d4 <__aeabi_i2d>
 801ec02:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ec06:	3501      	adds	r5, #1
 801ec08:	e7df      	b.n	801ebca <__kernel_rem_pio2+0x5a>
 801ec0a:	ec51 0b18 	vmov	r0, r1, d8
 801ec0e:	e7f8      	b.n	801ec02 <__kernel_rem_pio2+0x92>
 801ec10:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ec14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ec18:	f7e1 fcc6 	bl	80005a8 <__aeabi_dmul>
 801ec1c:	4602      	mov	r2, r0
 801ec1e:	460b      	mov	r3, r1
 801ec20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec24:	f7e1 fb0a 	bl	800023c <__adddf3>
 801ec28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec2c:	3601      	adds	r6, #1
 801ec2e:	9b05      	ldr	r3, [sp, #20]
 801ec30:	429e      	cmp	r6, r3
 801ec32:	f1a7 0708 	sub.w	r7, r7, #8
 801ec36:	ddeb      	ble.n	801ec10 <__kernel_rem_pio2+0xa0>
 801ec38:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ec3c:	f108 0801 	add.w	r8, r8, #1
 801ec40:	ecaa 7b02 	vstmia	sl!, {d7}
 801ec44:	3508      	adds	r5, #8
 801ec46:	e7ca      	b.n	801ebde <__kernel_rem_pio2+0x6e>
 801ec48:	9b00      	ldr	r3, [sp, #0]
 801ec4a:	f8dd 8000 	ldr.w	r8, [sp]
 801ec4e:	aa0c      	add	r2, sp, #48	@ 0x30
 801ec50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ec54:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ec58:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ec5c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801ec62:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec64:	ab98      	add	r3, sp, #608	@ 0x260
 801ec66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ec6a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801ec6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ec72:	ac0c      	add	r4, sp, #48	@ 0x30
 801ec74:	ab70      	add	r3, sp, #448	@ 0x1c0
 801ec76:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801ec7a:	46a1      	mov	r9, r4
 801ec7c:	46c2      	mov	sl, r8
 801ec7e:	f1ba 0f00 	cmp.w	sl, #0
 801ec82:	f1a5 0508 	sub.w	r5, r5, #8
 801ec86:	dc77      	bgt.n	801ed78 <__kernel_rem_pio2+0x208>
 801ec88:	4658      	mov	r0, fp
 801ec8a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801ec8e:	f000 fd23 	bl	801f6d8 <scalbn>
 801ec92:	ec57 6b10 	vmov	r6, r7, d0
 801ec96:	2200      	movs	r2, #0
 801ec98:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801ec9c:	4630      	mov	r0, r6
 801ec9e:	4639      	mov	r1, r7
 801eca0:	f7e1 fc82 	bl	80005a8 <__aeabi_dmul>
 801eca4:	ec41 0b10 	vmov	d0, r0, r1
 801eca8:	f7ff fa36 	bl	801e118 <floor>
 801ecac:	4b75      	ldr	r3, [pc, #468]	@ (801ee84 <__kernel_rem_pio2+0x314>)
 801ecae:	ec51 0b10 	vmov	r0, r1, d0
 801ecb2:	2200      	movs	r2, #0
 801ecb4:	f7e1 fc78 	bl	80005a8 <__aeabi_dmul>
 801ecb8:	4602      	mov	r2, r0
 801ecba:	460b      	mov	r3, r1
 801ecbc:	4630      	mov	r0, r6
 801ecbe:	4639      	mov	r1, r7
 801ecc0:	f7e1 faba 	bl	8000238 <__aeabi_dsub>
 801ecc4:	460f      	mov	r7, r1
 801ecc6:	4606      	mov	r6, r0
 801ecc8:	f7e1 ff1e 	bl	8000b08 <__aeabi_d2iz>
 801eccc:	9002      	str	r0, [sp, #8]
 801ecce:	f7e1 fc01 	bl	80004d4 <__aeabi_i2d>
 801ecd2:	4602      	mov	r2, r0
 801ecd4:	460b      	mov	r3, r1
 801ecd6:	4630      	mov	r0, r6
 801ecd8:	4639      	mov	r1, r7
 801ecda:	f7e1 faad 	bl	8000238 <__aeabi_dsub>
 801ecde:	f1bb 0f00 	cmp.w	fp, #0
 801ece2:	4606      	mov	r6, r0
 801ece4:	460f      	mov	r7, r1
 801ece6:	dd6c      	ble.n	801edc2 <__kernel_rem_pio2+0x252>
 801ece8:	f108 31ff 	add.w	r1, r8, #4294967295
 801ecec:	ab0c      	add	r3, sp, #48	@ 0x30
 801ecee:	9d02      	ldr	r5, [sp, #8]
 801ecf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ecf4:	f1cb 0018 	rsb	r0, fp, #24
 801ecf8:	fa43 f200 	asr.w	r2, r3, r0
 801ecfc:	4415      	add	r5, r2
 801ecfe:	4082      	lsls	r2, r0
 801ed00:	1a9b      	subs	r3, r3, r2
 801ed02:	aa0c      	add	r2, sp, #48	@ 0x30
 801ed04:	9502      	str	r5, [sp, #8]
 801ed06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ed0a:	f1cb 0217 	rsb	r2, fp, #23
 801ed0e:	fa43 f902 	asr.w	r9, r3, r2
 801ed12:	f1b9 0f00 	cmp.w	r9, #0
 801ed16:	dd64      	ble.n	801ede2 <__kernel_rem_pio2+0x272>
 801ed18:	9b02      	ldr	r3, [sp, #8]
 801ed1a:	2200      	movs	r2, #0
 801ed1c:	3301      	adds	r3, #1
 801ed1e:	9302      	str	r3, [sp, #8]
 801ed20:	4615      	mov	r5, r2
 801ed22:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801ed26:	4590      	cmp	r8, r2
 801ed28:	f300 80b8 	bgt.w	801ee9c <__kernel_rem_pio2+0x32c>
 801ed2c:	f1bb 0f00 	cmp.w	fp, #0
 801ed30:	dd07      	ble.n	801ed42 <__kernel_rem_pio2+0x1d2>
 801ed32:	f1bb 0f01 	cmp.w	fp, #1
 801ed36:	f000 80bf 	beq.w	801eeb8 <__kernel_rem_pio2+0x348>
 801ed3a:	f1bb 0f02 	cmp.w	fp, #2
 801ed3e:	f000 80c6 	beq.w	801eece <__kernel_rem_pio2+0x35e>
 801ed42:	f1b9 0f02 	cmp.w	r9, #2
 801ed46:	d14c      	bne.n	801ede2 <__kernel_rem_pio2+0x272>
 801ed48:	4632      	mov	r2, r6
 801ed4a:	463b      	mov	r3, r7
 801ed4c:	494e      	ldr	r1, [pc, #312]	@ (801ee88 <__kernel_rem_pio2+0x318>)
 801ed4e:	2000      	movs	r0, #0
 801ed50:	f7e1 fa72 	bl	8000238 <__aeabi_dsub>
 801ed54:	4606      	mov	r6, r0
 801ed56:	460f      	mov	r7, r1
 801ed58:	2d00      	cmp	r5, #0
 801ed5a:	d042      	beq.n	801ede2 <__kernel_rem_pio2+0x272>
 801ed5c:	4658      	mov	r0, fp
 801ed5e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801ee78 <__kernel_rem_pio2+0x308>
 801ed62:	f000 fcb9 	bl	801f6d8 <scalbn>
 801ed66:	4630      	mov	r0, r6
 801ed68:	4639      	mov	r1, r7
 801ed6a:	ec53 2b10 	vmov	r2, r3, d0
 801ed6e:	f7e1 fa63 	bl	8000238 <__aeabi_dsub>
 801ed72:	4606      	mov	r6, r0
 801ed74:	460f      	mov	r7, r1
 801ed76:	e034      	b.n	801ede2 <__kernel_rem_pio2+0x272>
 801ed78:	4b44      	ldr	r3, [pc, #272]	@ (801ee8c <__kernel_rem_pio2+0x31c>)
 801ed7a:	2200      	movs	r2, #0
 801ed7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed80:	f7e1 fc12 	bl	80005a8 <__aeabi_dmul>
 801ed84:	f7e1 fec0 	bl	8000b08 <__aeabi_d2iz>
 801ed88:	f7e1 fba4 	bl	80004d4 <__aeabi_i2d>
 801ed8c:	4b40      	ldr	r3, [pc, #256]	@ (801ee90 <__kernel_rem_pio2+0x320>)
 801ed8e:	2200      	movs	r2, #0
 801ed90:	4606      	mov	r6, r0
 801ed92:	460f      	mov	r7, r1
 801ed94:	f7e1 fc08 	bl	80005a8 <__aeabi_dmul>
 801ed98:	4602      	mov	r2, r0
 801ed9a:	460b      	mov	r3, r1
 801ed9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eda0:	f7e1 fa4a 	bl	8000238 <__aeabi_dsub>
 801eda4:	f7e1 feb0 	bl	8000b08 <__aeabi_d2iz>
 801eda8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801edac:	f849 0b04 	str.w	r0, [r9], #4
 801edb0:	4639      	mov	r1, r7
 801edb2:	4630      	mov	r0, r6
 801edb4:	f7e1 fa42 	bl	800023c <__adddf3>
 801edb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801edbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801edc0:	e75d      	b.n	801ec7e <__kernel_rem_pio2+0x10e>
 801edc2:	d107      	bne.n	801edd4 <__kernel_rem_pio2+0x264>
 801edc4:	f108 33ff 	add.w	r3, r8, #4294967295
 801edc8:	aa0c      	add	r2, sp, #48	@ 0x30
 801edca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801edce:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801edd2:	e79e      	b.n	801ed12 <__kernel_rem_pio2+0x1a2>
 801edd4:	4b2f      	ldr	r3, [pc, #188]	@ (801ee94 <__kernel_rem_pio2+0x324>)
 801edd6:	2200      	movs	r2, #0
 801edd8:	f7e1 fe6c 	bl	8000ab4 <__aeabi_dcmpge>
 801eddc:	2800      	cmp	r0, #0
 801edde:	d143      	bne.n	801ee68 <__kernel_rem_pio2+0x2f8>
 801ede0:	4681      	mov	r9, r0
 801ede2:	2200      	movs	r2, #0
 801ede4:	2300      	movs	r3, #0
 801ede6:	4630      	mov	r0, r6
 801ede8:	4639      	mov	r1, r7
 801edea:	f7e1 fe45 	bl	8000a78 <__aeabi_dcmpeq>
 801edee:	2800      	cmp	r0, #0
 801edf0:	f000 80bf 	beq.w	801ef72 <__kernel_rem_pio2+0x402>
 801edf4:	f108 33ff 	add.w	r3, r8, #4294967295
 801edf8:	2200      	movs	r2, #0
 801edfa:	9900      	ldr	r1, [sp, #0]
 801edfc:	428b      	cmp	r3, r1
 801edfe:	da6e      	bge.n	801eede <__kernel_rem_pio2+0x36e>
 801ee00:	2a00      	cmp	r2, #0
 801ee02:	f000 8089 	beq.w	801ef18 <__kernel_rem_pio2+0x3a8>
 801ee06:	f108 38ff 	add.w	r8, r8, #4294967295
 801ee0a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ee0c:	f1ab 0b18 	sub.w	fp, fp, #24
 801ee10:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	d0f6      	beq.n	801ee06 <__kernel_rem_pio2+0x296>
 801ee18:	4658      	mov	r0, fp
 801ee1a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801ee78 <__kernel_rem_pio2+0x308>
 801ee1e:	f000 fc5b 	bl	801f6d8 <scalbn>
 801ee22:	f108 0301 	add.w	r3, r8, #1
 801ee26:	00da      	lsls	r2, r3, #3
 801ee28:	9205      	str	r2, [sp, #20]
 801ee2a:	ec55 4b10 	vmov	r4, r5, d0
 801ee2e:	aa70      	add	r2, sp, #448	@ 0x1c0
 801ee30:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801ee8c <__kernel_rem_pio2+0x31c>
 801ee34:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801ee38:	4646      	mov	r6, r8
 801ee3a:	f04f 0a00 	mov.w	sl, #0
 801ee3e:	2e00      	cmp	r6, #0
 801ee40:	f280 80cf 	bge.w	801efe2 <__kernel_rem_pio2+0x472>
 801ee44:	4644      	mov	r4, r8
 801ee46:	2c00      	cmp	r4, #0
 801ee48:	f2c0 80fd 	blt.w	801f046 <__kernel_rem_pio2+0x4d6>
 801ee4c:	4b12      	ldr	r3, [pc, #72]	@ (801ee98 <__kernel_rem_pio2+0x328>)
 801ee4e:	461f      	mov	r7, r3
 801ee50:	ab70      	add	r3, sp, #448	@ 0x1c0
 801ee52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ee56:	9306      	str	r3, [sp, #24]
 801ee58:	f04f 0a00 	mov.w	sl, #0
 801ee5c:	f04f 0b00 	mov.w	fp, #0
 801ee60:	2600      	movs	r6, #0
 801ee62:	eba8 0504 	sub.w	r5, r8, r4
 801ee66:	e0e2      	b.n	801f02e <__kernel_rem_pio2+0x4be>
 801ee68:	f04f 0902 	mov.w	r9, #2
 801ee6c:	e754      	b.n	801ed18 <__kernel_rem_pio2+0x1a8>
 801ee6e:	bf00      	nop
	...
 801ee7c:	3ff00000 	.word	0x3ff00000
 801ee80:	08022180 	.word	0x08022180
 801ee84:	40200000 	.word	0x40200000
 801ee88:	3ff00000 	.word	0x3ff00000
 801ee8c:	3e700000 	.word	0x3e700000
 801ee90:	41700000 	.word	0x41700000
 801ee94:	3fe00000 	.word	0x3fe00000
 801ee98:	08022140 	.word	0x08022140
 801ee9c:	f854 3b04 	ldr.w	r3, [r4], #4
 801eea0:	b945      	cbnz	r5, 801eeb4 <__kernel_rem_pio2+0x344>
 801eea2:	b123      	cbz	r3, 801eeae <__kernel_rem_pio2+0x33e>
 801eea4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801eea8:	f844 3c04 	str.w	r3, [r4, #-4]
 801eeac:	2301      	movs	r3, #1
 801eeae:	3201      	adds	r2, #1
 801eeb0:	461d      	mov	r5, r3
 801eeb2:	e738      	b.n	801ed26 <__kernel_rem_pio2+0x1b6>
 801eeb4:	1acb      	subs	r3, r1, r3
 801eeb6:	e7f7      	b.n	801eea8 <__kernel_rem_pio2+0x338>
 801eeb8:	f108 32ff 	add.w	r2, r8, #4294967295
 801eebc:	ab0c      	add	r3, sp, #48	@ 0x30
 801eebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eec2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801eec6:	a90c      	add	r1, sp, #48	@ 0x30
 801eec8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801eecc:	e739      	b.n	801ed42 <__kernel_rem_pio2+0x1d2>
 801eece:	f108 32ff 	add.w	r2, r8, #4294967295
 801eed2:	ab0c      	add	r3, sp, #48	@ 0x30
 801eed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801eed8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801eedc:	e7f3      	b.n	801eec6 <__kernel_rem_pio2+0x356>
 801eede:	a90c      	add	r1, sp, #48	@ 0x30
 801eee0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801eee4:	3b01      	subs	r3, #1
 801eee6:	430a      	orrs	r2, r1
 801eee8:	e787      	b.n	801edfa <__kernel_rem_pio2+0x28a>
 801eeea:	3401      	adds	r4, #1
 801eeec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801eef0:	2a00      	cmp	r2, #0
 801eef2:	d0fa      	beq.n	801eeea <__kernel_rem_pio2+0x37a>
 801eef4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eef6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801eefa:	eb0d 0503 	add.w	r5, sp, r3
 801eefe:	9b06      	ldr	r3, [sp, #24]
 801ef00:	aa20      	add	r2, sp, #128	@ 0x80
 801ef02:	4443      	add	r3, r8
 801ef04:	f108 0701 	add.w	r7, r8, #1
 801ef08:	3d98      	subs	r5, #152	@ 0x98
 801ef0a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801ef0e:	4444      	add	r4, r8
 801ef10:	42bc      	cmp	r4, r7
 801ef12:	da04      	bge.n	801ef1e <__kernel_rem_pio2+0x3ae>
 801ef14:	46a0      	mov	r8, r4
 801ef16:	e6a2      	b.n	801ec5e <__kernel_rem_pio2+0xee>
 801ef18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ef1a:	2401      	movs	r4, #1
 801ef1c:	e7e6      	b.n	801eeec <__kernel_rem_pio2+0x37c>
 801ef1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef20:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801ef24:	f7e1 fad6 	bl	80004d4 <__aeabi_i2d>
 801ef28:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801f1f0 <__kernel_rem_pio2+0x680>
 801ef2c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ef30:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ef34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ef38:	46b2      	mov	sl, r6
 801ef3a:	f04f 0800 	mov.w	r8, #0
 801ef3e:	9b05      	ldr	r3, [sp, #20]
 801ef40:	4598      	cmp	r8, r3
 801ef42:	dd05      	ble.n	801ef50 <__kernel_rem_pio2+0x3e0>
 801ef44:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ef48:	3701      	adds	r7, #1
 801ef4a:	eca5 7b02 	vstmia	r5!, {d7}
 801ef4e:	e7df      	b.n	801ef10 <__kernel_rem_pio2+0x3a0>
 801ef50:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801ef54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ef58:	f7e1 fb26 	bl	80005a8 <__aeabi_dmul>
 801ef5c:	4602      	mov	r2, r0
 801ef5e:	460b      	mov	r3, r1
 801ef60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef64:	f7e1 f96a 	bl	800023c <__adddf3>
 801ef68:	f108 0801 	add.w	r8, r8, #1
 801ef6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef70:	e7e5      	b.n	801ef3e <__kernel_rem_pio2+0x3ce>
 801ef72:	f1cb 0000 	rsb	r0, fp, #0
 801ef76:	ec47 6b10 	vmov	d0, r6, r7
 801ef7a:	f000 fbad 	bl	801f6d8 <scalbn>
 801ef7e:	ec55 4b10 	vmov	r4, r5, d0
 801ef82:	4b9d      	ldr	r3, [pc, #628]	@ (801f1f8 <__kernel_rem_pio2+0x688>)
 801ef84:	2200      	movs	r2, #0
 801ef86:	4620      	mov	r0, r4
 801ef88:	4629      	mov	r1, r5
 801ef8a:	f7e1 fd93 	bl	8000ab4 <__aeabi_dcmpge>
 801ef8e:	b300      	cbz	r0, 801efd2 <__kernel_rem_pio2+0x462>
 801ef90:	4b9a      	ldr	r3, [pc, #616]	@ (801f1fc <__kernel_rem_pio2+0x68c>)
 801ef92:	2200      	movs	r2, #0
 801ef94:	4620      	mov	r0, r4
 801ef96:	4629      	mov	r1, r5
 801ef98:	f7e1 fb06 	bl	80005a8 <__aeabi_dmul>
 801ef9c:	f7e1 fdb4 	bl	8000b08 <__aeabi_d2iz>
 801efa0:	4606      	mov	r6, r0
 801efa2:	f7e1 fa97 	bl	80004d4 <__aeabi_i2d>
 801efa6:	4b94      	ldr	r3, [pc, #592]	@ (801f1f8 <__kernel_rem_pio2+0x688>)
 801efa8:	2200      	movs	r2, #0
 801efaa:	f7e1 fafd 	bl	80005a8 <__aeabi_dmul>
 801efae:	460b      	mov	r3, r1
 801efb0:	4602      	mov	r2, r0
 801efb2:	4629      	mov	r1, r5
 801efb4:	4620      	mov	r0, r4
 801efb6:	f7e1 f93f 	bl	8000238 <__aeabi_dsub>
 801efba:	f7e1 fda5 	bl	8000b08 <__aeabi_d2iz>
 801efbe:	ab0c      	add	r3, sp, #48	@ 0x30
 801efc0:	f10b 0b18 	add.w	fp, fp, #24
 801efc4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801efc8:	f108 0801 	add.w	r8, r8, #1
 801efcc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801efd0:	e722      	b.n	801ee18 <__kernel_rem_pio2+0x2a8>
 801efd2:	4620      	mov	r0, r4
 801efd4:	4629      	mov	r1, r5
 801efd6:	f7e1 fd97 	bl	8000b08 <__aeabi_d2iz>
 801efda:	ab0c      	add	r3, sp, #48	@ 0x30
 801efdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801efe0:	e71a      	b.n	801ee18 <__kernel_rem_pio2+0x2a8>
 801efe2:	ab0c      	add	r3, sp, #48	@ 0x30
 801efe4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801efe8:	f7e1 fa74 	bl	80004d4 <__aeabi_i2d>
 801efec:	4622      	mov	r2, r4
 801efee:	462b      	mov	r3, r5
 801eff0:	f7e1 fada 	bl	80005a8 <__aeabi_dmul>
 801eff4:	4652      	mov	r2, sl
 801eff6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801effa:	465b      	mov	r3, fp
 801effc:	4620      	mov	r0, r4
 801effe:	4629      	mov	r1, r5
 801f000:	f7e1 fad2 	bl	80005a8 <__aeabi_dmul>
 801f004:	3e01      	subs	r6, #1
 801f006:	4604      	mov	r4, r0
 801f008:	460d      	mov	r5, r1
 801f00a:	e718      	b.n	801ee3e <__kernel_rem_pio2+0x2ce>
 801f00c:	9906      	ldr	r1, [sp, #24]
 801f00e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801f012:	9106      	str	r1, [sp, #24]
 801f014:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801f018:	f7e1 fac6 	bl	80005a8 <__aeabi_dmul>
 801f01c:	4602      	mov	r2, r0
 801f01e:	460b      	mov	r3, r1
 801f020:	4650      	mov	r0, sl
 801f022:	4659      	mov	r1, fp
 801f024:	f7e1 f90a 	bl	800023c <__adddf3>
 801f028:	3601      	adds	r6, #1
 801f02a:	4682      	mov	sl, r0
 801f02c:	468b      	mov	fp, r1
 801f02e:	9b00      	ldr	r3, [sp, #0]
 801f030:	429e      	cmp	r6, r3
 801f032:	dc01      	bgt.n	801f038 <__kernel_rem_pio2+0x4c8>
 801f034:	42b5      	cmp	r5, r6
 801f036:	dae9      	bge.n	801f00c <__kernel_rem_pio2+0x49c>
 801f038:	ab48      	add	r3, sp, #288	@ 0x120
 801f03a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801f03e:	e9c5 ab00 	strd	sl, fp, [r5]
 801f042:	3c01      	subs	r4, #1
 801f044:	e6ff      	b.n	801ee46 <__kernel_rem_pio2+0x2d6>
 801f046:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f048:	2b02      	cmp	r3, #2
 801f04a:	dc0b      	bgt.n	801f064 <__kernel_rem_pio2+0x4f4>
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	dc39      	bgt.n	801f0c4 <__kernel_rem_pio2+0x554>
 801f050:	d05d      	beq.n	801f10e <__kernel_rem_pio2+0x59e>
 801f052:	9b02      	ldr	r3, [sp, #8]
 801f054:	f003 0007 	and.w	r0, r3, #7
 801f058:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801f05c:	ecbd 8b02 	vpop	{d8}
 801f060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f064:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f066:	2b03      	cmp	r3, #3
 801f068:	d1f3      	bne.n	801f052 <__kernel_rem_pio2+0x4e2>
 801f06a:	9b05      	ldr	r3, [sp, #20]
 801f06c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f070:	eb0d 0403 	add.w	r4, sp, r3
 801f074:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801f078:	4625      	mov	r5, r4
 801f07a:	46c2      	mov	sl, r8
 801f07c:	f1ba 0f00 	cmp.w	sl, #0
 801f080:	f1a5 0508 	sub.w	r5, r5, #8
 801f084:	dc6b      	bgt.n	801f15e <__kernel_rem_pio2+0x5ee>
 801f086:	4645      	mov	r5, r8
 801f088:	2d01      	cmp	r5, #1
 801f08a:	f1a4 0408 	sub.w	r4, r4, #8
 801f08e:	f300 8087 	bgt.w	801f1a0 <__kernel_rem_pio2+0x630>
 801f092:	9c05      	ldr	r4, [sp, #20]
 801f094:	ab48      	add	r3, sp, #288	@ 0x120
 801f096:	441c      	add	r4, r3
 801f098:	2000      	movs	r0, #0
 801f09a:	2100      	movs	r1, #0
 801f09c:	f1b8 0f01 	cmp.w	r8, #1
 801f0a0:	f300 809c 	bgt.w	801f1dc <__kernel_rem_pio2+0x66c>
 801f0a4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801f0a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801f0ac:	f1b9 0f00 	cmp.w	r9, #0
 801f0b0:	f040 80a6 	bne.w	801f200 <__kernel_rem_pio2+0x690>
 801f0b4:	9b04      	ldr	r3, [sp, #16]
 801f0b6:	e9c3 7800 	strd	r7, r8, [r3]
 801f0ba:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801f0be:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f0c2:	e7c6      	b.n	801f052 <__kernel_rem_pio2+0x4e2>
 801f0c4:	9d05      	ldr	r5, [sp, #20]
 801f0c6:	ab48      	add	r3, sp, #288	@ 0x120
 801f0c8:	441d      	add	r5, r3
 801f0ca:	4644      	mov	r4, r8
 801f0cc:	2000      	movs	r0, #0
 801f0ce:	2100      	movs	r1, #0
 801f0d0:	2c00      	cmp	r4, #0
 801f0d2:	da35      	bge.n	801f140 <__kernel_rem_pio2+0x5d0>
 801f0d4:	f1b9 0f00 	cmp.w	r9, #0
 801f0d8:	d038      	beq.n	801f14c <__kernel_rem_pio2+0x5dc>
 801f0da:	4602      	mov	r2, r0
 801f0dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f0e0:	9c04      	ldr	r4, [sp, #16]
 801f0e2:	e9c4 2300 	strd	r2, r3, [r4]
 801f0e6:	4602      	mov	r2, r0
 801f0e8:	460b      	mov	r3, r1
 801f0ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801f0ee:	f7e1 f8a3 	bl	8000238 <__aeabi_dsub>
 801f0f2:	ad4a      	add	r5, sp, #296	@ 0x128
 801f0f4:	2401      	movs	r4, #1
 801f0f6:	45a0      	cmp	r8, r4
 801f0f8:	da2b      	bge.n	801f152 <__kernel_rem_pio2+0x5e2>
 801f0fa:	f1b9 0f00 	cmp.w	r9, #0
 801f0fe:	d002      	beq.n	801f106 <__kernel_rem_pio2+0x596>
 801f100:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f104:	4619      	mov	r1, r3
 801f106:	9b04      	ldr	r3, [sp, #16]
 801f108:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f10c:	e7a1      	b.n	801f052 <__kernel_rem_pio2+0x4e2>
 801f10e:	9c05      	ldr	r4, [sp, #20]
 801f110:	ab48      	add	r3, sp, #288	@ 0x120
 801f112:	441c      	add	r4, r3
 801f114:	2000      	movs	r0, #0
 801f116:	2100      	movs	r1, #0
 801f118:	f1b8 0f00 	cmp.w	r8, #0
 801f11c:	da09      	bge.n	801f132 <__kernel_rem_pio2+0x5c2>
 801f11e:	f1b9 0f00 	cmp.w	r9, #0
 801f122:	d002      	beq.n	801f12a <__kernel_rem_pio2+0x5ba>
 801f124:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f128:	4619      	mov	r1, r3
 801f12a:	9b04      	ldr	r3, [sp, #16]
 801f12c:	e9c3 0100 	strd	r0, r1, [r3]
 801f130:	e78f      	b.n	801f052 <__kernel_rem_pio2+0x4e2>
 801f132:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f136:	f7e1 f881 	bl	800023c <__adddf3>
 801f13a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f13e:	e7eb      	b.n	801f118 <__kernel_rem_pio2+0x5a8>
 801f140:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801f144:	f7e1 f87a 	bl	800023c <__adddf3>
 801f148:	3c01      	subs	r4, #1
 801f14a:	e7c1      	b.n	801f0d0 <__kernel_rem_pio2+0x560>
 801f14c:	4602      	mov	r2, r0
 801f14e:	460b      	mov	r3, r1
 801f150:	e7c6      	b.n	801f0e0 <__kernel_rem_pio2+0x570>
 801f152:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801f156:	f7e1 f871 	bl	800023c <__adddf3>
 801f15a:	3401      	adds	r4, #1
 801f15c:	e7cb      	b.n	801f0f6 <__kernel_rem_pio2+0x586>
 801f15e:	ed95 7b00 	vldr	d7, [r5]
 801f162:	ed8d 7b00 	vstr	d7, [sp]
 801f166:	ed95 7b02 	vldr	d7, [r5, #8]
 801f16a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f16e:	ec53 2b17 	vmov	r2, r3, d7
 801f172:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f176:	f7e1 f861 	bl	800023c <__adddf3>
 801f17a:	4602      	mov	r2, r0
 801f17c:	460b      	mov	r3, r1
 801f17e:	4606      	mov	r6, r0
 801f180:	460f      	mov	r7, r1
 801f182:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f186:	f7e1 f857 	bl	8000238 <__aeabi_dsub>
 801f18a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f18e:	f7e1 f855 	bl	800023c <__adddf3>
 801f192:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f196:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801f19a:	e9c5 6700 	strd	r6, r7, [r5]
 801f19e:	e76d      	b.n	801f07c <__kernel_rem_pio2+0x50c>
 801f1a0:	ed94 7b00 	vldr	d7, [r4]
 801f1a4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801f1a8:	ec51 0b17 	vmov	r0, r1, d7
 801f1ac:	4652      	mov	r2, sl
 801f1ae:	465b      	mov	r3, fp
 801f1b0:	ed8d 7b00 	vstr	d7, [sp]
 801f1b4:	f7e1 f842 	bl	800023c <__adddf3>
 801f1b8:	4602      	mov	r2, r0
 801f1ba:	460b      	mov	r3, r1
 801f1bc:	4606      	mov	r6, r0
 801f1be:	460f      	mov	r7, r1
 801f1c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f1c4:	f7e1 f838 	bl	8000238 <__aeabi_dsub>
 801f1c8:	4652      	mov	r2, sl
 801f1ca:	465b      	mov	r3, fp
 801f1cc:	f7e1 f836 	bl	800023c <__adddf3>
 801f1d0:	3d01      	subs	r5, #1
 801f1d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f1d6:	e9c4 6700 	strd	r6, r7, [r4]
 801f1da:	e755      	b.n	801f088 <__kernel_rem_pio2+0x518>
 801f1dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f1e0:	f7e1 f82c 	bl	800023c <__adddf3>
 801f1e4:	f108 38ff 	add.w	r8, r8, #4294967295
 801f1e8:	e758      	b.n	801f09c <__kernel_rem_pio2+0x52c>
 801f1ea:	bf00      	nop
 801f1ec:	f3af 8000 	nop.w
	...
 801f1f8:	41700000 	.word	0x41700000
 801f1fc:	3e700000 	.word	0x3e700000
 801f200:	9b04      	ldr	r3, [sp, #16]
 801f202:	9a04      	ldr	r2, [sp, #16]
 801f204:	601f      	str	r7, [r3, #0]
 801f206:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801f20a:	605c      	str	r4, [r3, #4]
 801f20c:	609d      	str	r5, [r3, #8]
 801f20e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f212:	60d3      	str	r3, [r2, #12]
 801f214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f218:	6110      	str	r0, [r2, #16]
 801f21a:	6153      	str	r3, [r2, #20]
 801f21c:	e719      	b.n	801f052 <__kernel_rem_pio2+0x4e2>
 801f21e:	bf00      	nop

0801f220 <__ieee754_acos>:
 801f220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f224:	ec55 4b10 	vmov	r4, r5, d0
 801f228:	49b7      	ldr	r1, [pc, #732]	@ (801f508 <__ieee754_acos+0x2e8>)
 801f22a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f22e:	428b      	cmp	r3, r1
 801f230:	d919      	bls.n	801f266 <__ieee754_acos+0x46>
 801f232:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801f236:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801f23a:	4323      	orrs	r3, r4
 801f23c:	d106      	bne.n	801f24c <__ieee754_acos+0x2c>
 801f23e:	2d00      	cmp	r5, #0
 801f240:	f340 8210 	ble.w	801f664 <__ieee754_acos+0x444>
 801f244:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801f498 <__ieee754_acos+0x278>
 801f248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f24c:	4622      	mov	r2, r4
 801f24e:	462b      	mov	r3, r5
 801f250:	4620      	mov	r0, r4
 801f252:	4629      	mov	r1, r5
 801f254:	f7e0 fff0 	bl	8000238 <__aeabi_dsub>
 801f258:	4602      	mov	r2, r0
 801f25a:	460b      	mov	r3, r1
 801f25c:	f7e1 face 	bl	80007fc <__aeabi_ddiv>
 801f260:	ec41 0b10 	vmov	d0, r0, r1
 801f264:	e7f0      	b.n	801f248 <__ieee754_acos+0x28>
 801f266:	49a9      	ldr	r1, [pc, #676]	@ (801f50c <__ieee754_acos+0x2ec>)
 801f268:	428b      	cmp	r3, r1
 801f26a:	f200 8085 	bhi.w	801f378 <__ieee754_acos+0x158>
 801f26e:	4aa8      	ldr	r2, [pc, #672]	@ (801f510 <__ieee754_acos+0x2f0>)
 801f270:	4293      	cmp	r3, r2
 801f272:	f240 81fa 	bls.w	801f66a <__ieee754_acos+0x44a>
 801f276:	4622      	mov	r2, r4
 801f278:	462b      	mov	r3, r5
 801f27a:	4620      	mov	r0, r4
 801f27c:	4629      	mov	r1, r5
 801f27e:	f7e1 f993 	bl	80005a8 <__aeabi_dmul>
 801f282:	a387      	add	r3, pc, #540	@ (adr r3, 801f4a0 <__ieee754_acos+0x280>)
 801f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f288:	4606      	mov	r6, r0
 801f28a:	460f      	mov	r7, r1
 801f28c:	f7e1 f98c 	bl	80005a8 <__aeabi_dmul>
 801f290:	a385      	add	r3, pc, #532	@ (adr r3, 801f4a8 <__ieee754_acos+0x288>)
 801f292:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f296:	f7e0 ffd1 	bl	800023c <__adddf3>
 801f29a:	4632      	mov	r2, r6
 801f29c:	463b      	mov	r3, r7
 801f29e:	f7e1 f983 	bl	80005a8 <__aeabi_dmul>
 801f2a2:	a383      	add	r3, pc, #524	@ (adr r3, 801f4b0 <__ieee754_acos+0x290>)
 801f2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2a8:	f7e0 ffc6 	bl	8000238 <__aeabi_dsub>
 801f2ac:	4632      	mov	r2, r6
 801f2ae:	463b      	mov	r3, r7
 801f2b0:	f7e1 f97a 	bl	80005a8 <__aeabi_dmul>
 801f2b4:	a380      	add	r3, pc, #512	@ (adr r3, 801f4b8 <__ieee754_acos+0x298>)
 801f2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ba:	f7e0 ffbf 	bl	800023c <__adddf3>
 801f2be:	4632      	mov	r2, r6
 801f2c0:	463b      	mov	r3, r7
 801f2c2:	f7e1 f971 	bl	80005a8 <__aeabi_dmul>
 801f2c6:	a37e      	add	r3, pc, #504	@ (adr r3, 801f4c0 <__ieee754_acos+0x2a0>)
 801f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2cc:	f7e0 ffb4 	bl	8000238 <__aeabi_dsub>
 801f2d0:	4632      	mov	r2, r6
 801f2d2:	463b      	mov	r3, r7
 801f2d4:	f7e1 f968 	bl	80005a8 <__aeabi_dmul>
 801f2d8:	a37b      	add	r3, pc, #492	@ (adr r3, 801f4c8 <__ieee754_acos+0x2a8>)
 801f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2de:	f7e0 ffad 	bl	800023c <__adddf3>
 801f2e2:	4632      	mov	r2, r6
 801f2e4:	463b      	mov	r3, r7
 801f2e6:	f7e1 f95f 	bl	80005a8 <__aeabi_dmul>
 801f2ea:	a379      	add	r3, pc, #484	@ (adr r3, 801f4d0 <__ieee754_acos+0x2b0>)
 801f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2f0:	4680      	mov	r8, r0
 801f2f2:	4689      	mov	r9, r1
 801f2f4:	4630      	mov	r0, r6
 801f2f6:	4639      	mov	r1, r7
 801f2f8:	f7e1 f956 	bl	80005a8 <__aeabi_dmul>
 801f2fc:	a376      	add	r3, pc, #472	@ (adr r3, 801f4d8 <__ieee754_acos+0x2b8>)
 801f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f302:	f7e0 ff99 	bl	8000238 <__aeabi_dsub>
 801f306:	4632      	mov	r2, r6
 801f308:	463b      	mov	r3, r7
 801f30a:	f7e1 f94d 	bl	80005a8 <__aeabi_dmul>
 801f30e:	a374      	add	r3, pc, #464	@ (adr r3, 801f4e0 <__ieee754_acos+0x2c0>)
 801f310:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f314:	f7e0 ff92 	bl	800023c <__adddf3>
 801f318:	4632      	mov	r2, r6
 801f31a:	463b      	mov	r3, r7
 801f31c:	f7e1 f944 	bl	80005a8 <__aeabi_dmul>
 801f320:	a371      	add	r3, pc, #452	@ (adr r3, 801f4e8 <__ieee754_acos+0x2c8>)
 801f322:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f326:	f7e0 ff87 	bl	8000238 <__aeabi_dsub>
 801f32a:	4632      	mov	r2, r6
 801f32c:	463b      	mov	r3, r7
 801f32e:	f7e1 f93b 	bl	80005a8 <__aeabi_dmul>
 801f332:	4b78      	ldr	r3, [pc, #480]	@ (801f514 <__ieee754_acos+0x2f4>)
 801f334:	2200      	movs	r2, #0
 801f336:	f7e0 ff81 	bl	800023c <__adddf3>
 801f33a:	4602      	mov	r2, r0
 801f33c:	460b      	mov	r3, r1
 801f33e:	4640      	mov	r0, r8
 801f340:	4649      	mov	r1, r9
 801f342:	f7e1 fa5b 	bl	80007fc <__aeabi_ddiv>
 801f346:	4622      	mov	r2, r4
 801f348:	462b      	mov	r3, r5
 801f34a:	f7e1 f92d 	bl	80005a8 <__aeabi_dmul>
 801f34e:	4602      	mov	r2, r0
 801f350:	460b      	mov	r3, r1
 801f352:	a167      	add	r1, pc, #412	@ (adr r1, 801f4f0 <__ieee754_acos+0x2d0>)
 801f354:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f358:	f7e0 ff6e 	bl	8000238 <__aeabi_dsub>
 801f35c:	4602      	mov	r2, r0
 801f35e:	460b      	mov	r3, r1
 801f360:	4620      	mov	r0, r4
 801f362:	4629      	mov	r1, r5
 801f364:	f7e0 ff68 	bl	8000238 <__aeabi_dsub>
 801f368:	4602      	mov	r2, r0
 801f36a:	460b      	mov	r3, r1
 801f36c:	a162      	add	r1, pc, #392	@ (adr r1, 801f4f8 <__ieee754_acos+0x2d8>)
 801f36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f372:	f7e0 ff61 	bl	8000238 <__aeabi_dsub>
 801f376:	e773      	b.n	801f260 <__ieee754_acos+0x40>
 801f378:	2d00      	cmp	r5, #0
 801f37a:	f280 80cf 	bge.w	801f51c <__ieee754_acos+0x2fc>
 801f37e:	4b65      	ldr	r3, [pc, #404]	@ (801f514 <__ieee754_acos+0x2f4>)
 801f380:	2200      	movs	r2, #0
 801f382:	4620      	mov	r0, r4
 801f384:	4629      	mov	r1, r5
 801f386:	f7e0 ff59 	bl	800023c <__adddf3>
 801f38a:	4b63      	ldr	r3, [pc, #396]	@ (801f518 <__ieee754_acos+0x2f8>)
 801f38c:	2200      	movs	r2, #0
 801f38e:	f7e1 f90b 	bl	80005a8 <__aeabi_dmul>
 801f392:	a343      	add	r3, pc, #268	@ (adr r3, 801f4a0 <__ieee754_acos+0x280>)
 801f394:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f398:	4604      	mov	r4, r0
 801f39a:	460d      	mov	r5, r1
 801f39c:	f7e1 f904 	bl	80005a8 <__aeabi_dmul>
 801f3a0:	a341      	add	r3, pc, #260	@ (adr r3, 801f4a8 <__ieee754_acos+0x288>)
 801f3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3a6:	f7e0 ff49 	bl	800023c <__adddf3>
 801f3aa:	4622      	mov	r2, r4
 801f3ac:	462b      	mov	r3, r5
 801f3ae:	f7e1 f8fb 	bl	80005a8 <__aeabi_dmul>
 801f3b2:	a33f      	add	r3, pc, #252	@ (adr r3, 801f4b0 <__ieee754_acos+0x290>)
 801f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3b8:	f7e0 ff3e 	bl	8000238 <__aeabi_dsub>
 801f3bc:	4622      	mov	r2, r4
 801f3be:	462b      	mov	r3, r5
 801f3c0:	f7e1 f8f2 	bl	80005a8 <__aeabi_dmul>
 801f3c4:	a33c      	add	r3, pc, #240	@ (adr r3, 801f4b8 <__ieee754_acos+0x298>)
 801f3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ca:	f7e0 ff37 	bl	800023c <__adddf3>
 801f3ce:	4622      	mov	r2, r4
 801f3d0:	462b      	mov	r3, r5
 801f3d2:	f7e1 f8e9 	bl	80005a8 <__aeabi_dmul>
 801f3d6:	a33a      	add	r3, pc, #232	@ (adr r3, 801f4c0 <__ieee754_acos+0x2a0>)
 801f3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3dc:	f7e0 ff2c 	bl	8000238 <__aeabi_dsub>
 801f3e0:	4622      	mov	r2, r4
 801f3e2:	462b      	mov	r3, r5
 801f3e4:	f7e1 f8e0 	bl	80005a8 <__aeabi_dmul>
 801f3e8:	a337      	add	r3, pc, #220	@ (adr r3, 801f4c8 <__ieee754_acos+0x2a8>)
 801f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ee:	f7e0 ff25 	bl	800023c <__adddf3>
 801f3f2:	4622      	mov	r2, r4
 801f3f4:	462b      	mov	r3, r5
 801f3f6:	f7e1 f8d7 	bl	80005a8 <__aeabi_dmul>
 801f3fa:	a335      	add	r3, pc, #212	@ (adr r3, 801f4d0 <__ieee754_acos+0x2b0>)
 801f3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f400:	4606      	mov	r6, r0
 801f402:	460f      	mov	r7, r1
 801f404:	4620      	mov	r0, r4
 801f406:	4629      	mov	r1, r5
 801f408:	f7e1 f8ce 	bl	80005a8 <__aeabi_dmul>
 801f40c:	a332      	add	r3, pc, #200	@ (adr r3, 801f4d8 <__ieee754_acos+0x2b8>)
 801f40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f412:	f7e0 ff11 	bl	8000238 <__aeabi_dsub>
 801f416:	4622      	mov	r2, r4
 801f418:	462b      	mov	r3, r5
 801f41a:	f7e1 f8c5 	bl	80005a8 <__aeabi_dmul>
 801f41e:	a330      	add	r3, pc, #192	@ (adr r3, 801f4e0 <__ieee754_acos+0x2c0>)
 801f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f424:	f7e0 ff0a 	bl	800023c <__adddf3>
 801f428:	4622      	mov	r2, r4
 801f42a:	462b      	mov	r3, r5
 801f42c:	f7e1 f8bc 	bl	80005a8 <__aeabi_dmul>
 801f430:	a32d      	add	r3, pc, #180	@ (adr r3, 801f4e8 <__ieee754_acos+0x2c8>)
 801f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f436:	f7e0 feff 	bl	8000238 <__aeabi_dsub>
 801f43a:	4622      	mov	r2, r4
 801f43c:	462b      	mov	r3, r5
 801f43e:	f7e1 f8b3 	bl	80005a8 <__aeabi_dmul>
 801f442:	4b34      	ldr	r3, [pc, #208]	@ (801f514 <__ieee754_acos+0x2f4>)
 801f444:	2200      	movs	r2, #0
 801f446:	f7e0 fef9 	bl	800023c <__adddf3>
 801f44a:	ec45 4b10 	vmov	d0, r4, r5
 801f44e:	4680      	mov	r8, r0
 801f450:	4689      	mov	r9, r1
 801f452:	f000 f9bf 	bl	801f7d4 <__ieee754_sqrt>
 801f456:	ec55 4b10 	vmov	r4, r5, d0
 801f45a:	4642      	mov	r2, r8
 801f45c:	464b      	mov	r3, r9
 801f45e:	4630      	mov	r0, r6
 801f460:	4639      	mov	r1, r7
 801f462:	f7e1 f9cb 	bl	80007fc <__aeabi_ddiv>
 801f466:	4622      	mov	r2, r4
 801f468:	462b      	mov	r3, r5
 801f46a:	f7e1 f89d 	bl	80005a8 <__aeabi_dmul>
 801f46e:	a320      	add	r3, pc, #128	@ (adr r3, 801f4f0 <__ieee754_acos+0x2d0>)
 801f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f474:	f7e0 fee0 	bl	8000238 <__aeabi_dsub>
 801f478:	4622      	mov	r2, r4
 801f47a:	462b      	mov	r3, r5
 801f47c:	f7e0 fede 	bl	800023c <__adddf3>
 801f480:	4602      	mov	r2, r0
 801f482:	460b      	mov	r3, r1
 801f484:	f7e0 feda 	bl	800023c <__adddf3>
 801f488:	4602      	mov	r2, r0
 801f48a:	460b      	mov	r3, r1
 801f48c:	a11c      	add	r1, pc, #112	@ (adr r1, 801f500 <__ieee754_acos+0x2e0>)
 801f48e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f492:	e76e      	b.n	801f372 <__ieee754_acos+0x152>
 801f494:	f3af 8000 	nop.w
	...
 801f4a0:	0dfdf709 	.word	0x0dfdf709
 801f4a4:	3f023de1 	.word	0x3f023de1
 801f4a8:	7501b288 	.word	0x7501b288
 801f4ac:	3f49efe0 	.word	0x3f49efe0
 801f4b0:	b5688f3b 	.word	0xb5688f3b
 801f4b4:	3fa48228 	.word	0x3fa48228
 801f4b8:	0e884455 	.word	0x0e884455
 801f4bc:	3fc9c155 	.word	0x3fc9c155
 801f4c0:	03eb6f7d 	.word	0x03eb6f7d
 801f4c4:	3fd4d612 	.word	0x3fd4d612
 801f4c8:	55555555 	.word	0x55555555
 801f4cc:	3fc55555 	.word	0x3fc55555
 801f4d0:	b12e9282 	.word	0xb12e9282
 801f4d4:	3fb3b8c5 	.word	0x3fb3b8c5
 801f4d8:	1b8d0159 	.word	0x1b8d0159
 801f4dc:	3fe6066c 	.word	0x3fe6066c
 801f4e0:	9c598ac8 	.word	0x9c598ac8
 801f4e4:	40002ae5 	.word	0x40002ae5
 801f4e8:	1c8a2d4b 	.word	0x1c8a2d4b
 801f4ec:	40033a27 	.word	0x40033a27
 801f4f0:	33145c07 	.word	0x33145c07
 801f4f4:	3c91a626 	.word	0x3c91a626
 801f4f8:	54442d18 	.word	0x54442d18
 801f4fc:	3ff921fb 	.word	0x3ff921fb
 801f500:	54442d18 	.word	0x54442d18
 801f504:	400921fb 	.word	0x400921fb
 801f508:	3fefffff 	.word	0x3fefffff
 801f50c:	3fdfffff 	.word	0x3fdfffff
 801f510:	3c600000 	.word	0x3c600000
 801f514:	3ff00000 	.word	0x3ff00000
 801f518:	3fe00000 	.word	0x3fe00000
 801f51c:	4622      	mov	r2, r4
 801f51e:	462b      	mov	r3, r5
 801f520:	496b      	ldr	r1, [pc, #428]	@ (801f6d0 <__ieee754_acos+0x4b0>)
 801f522:	2000      	movs	r0, #0
 801f524:	f7e0 fe88 	bl	8000238 <__aeabi_dsub>
 801f528:	4b6a      	ldr	r3, [pc, #424]	@ (801f6d4 <__ieee754_acos+0x4b4>)
 801f52a:	2200      	movs	r2, #0
 801f52c:	f7e1 f83c 	bl	80005a8 <__aeabi_dmul>
 801f530:	4604      	mov	r4, r0
 801f532:	460d      	mov	r5, r1
 801f534:	ec45 4b10 	vmov	d0, r4, r5
 801f538:	f000 f94c 	bl	801f7d4 <__ieee754_sqrt>
 801f53c:	a34c      	add	r3, pc, #304	@ (adr r3, 801f670 <__ieee754_acos+0x450>)
 801f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f542:	4620      	mov	r0, r4
 801f544:	4629      	mov	r1, r5
 801f546:	ec59 8b10 	vmov	r8, r9, d0
 801f54a:	f7e1 f82d 	bl	80005a8 <__aeabi_dmul>
 801f54e:	a34a      	add	r3, pc, #296	@ (adr r3, 801f678 <__ieee754_acos+0x458>)
 801f550:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f554:	f7e0 fe72 	bl	800023c <__adddf3>
 801f558:	4622      	mov	r2, r4
 801f55a:	462b      	mov	r3, r5
 801f55c:	f7e1 f824 	bl	80005a8 <__aeabi_dmul>
 801f560:	a347      	add	r3, pc, #284	@ (adr r3, 801f680 <__ieee754_acos+0x460>)
 801f562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f566:	f7e0 fe67 	bl	8000238 <__aeabi_dsub>
 801f56a:	4622      	mov	r2, r4
 801f56c:	462b      	mov	r3, r5
 801f56e:	f7e1 f81b 	bl	80005a8 <__aeabi_dmul>
 801f572:	a345      	add	r3, pc, #276	@ (adr r3, 801f688 <__ieee754_acos+0x468>)
 801f574:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f578:	f7e0 fe60 	bl	800023c <__adddf3>
 801f57c:	4622      	mov	r2, r4
 801f57e:	462b      	mov	r3, r5
 801f580:	f7e1 f812 	bl	80005a8 <__aeabi_dmul>
 801f584:	a342      	add	r3, pc, #264	@ (adr r3, 801f690 <__ieee754_acos+0x470>)
 801f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f58a:	f7e0 fe55 	bl	8000238 <__aeabi_dsub>
 801f58e:	4622      	mov	r2, r4
 801f590:	462b      	mov	r3, r5
 801f592:	f7e1 f809 	bl	80005a8 <__aeabi_dmul>
 801f596:	a340      	add	r3, pc, #256	@ (adr r3, 801f698 <__ieee754_acos+0x478>)
 801f598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f59c:	f7e0 fe4e 	bl	800023c <__adddf3>
 801f5a0:	4622      	mov	r2, r4
 801f5a2:	462b      	mov	r3, r5
 801f5a4:	f7e1 f800 	bl	80005a8 <__aeabi_dmul>
 801f5a8:	a33d      	add	r3, pc, #244	@ (adr r3, 801f6a0 <__ieee754_acos+0x480>)
 801f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5ae:	4682      	mov	sl, r0
 801f5b0:	468b      	mov	fp, r1
 801f5b2:	4620      	mov	r0, r4
 801f5b4:	4629      	mov	r1, r5
 801f5b6:	f7e0 fff7 	bl	80005a8 <__aeabi_dmul>
 801f5ba:	a33b      	add	r3, pc, #236	@ (adr r3, 801f6a8 <__ieee754_acos+0x488>)
 801f5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5c0:	f7e0 fe3a 	bl	8000238 <__aeabi_dsub>
 801f5c4:	4622      	mov	r2, r4
 801f5c6:	462b      	mov	r3, r5
 801f5c8:	f7e0 ffee 	bl	80005a8 <__aeabi_dmul>
 801f5cc:	a338      	add	r3, pc, #224	@ (adr r3, 801f6b0 <__ieee754_acos+0x490>)
 801f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5d2:	f7e0 fe33 	bl	800023c <__adddf3>
 801f5d6:	4622      	mov	r2, r4
 801f5d8:	462b      	mov	r3, r5
 801f5da:	f7e0 ffe5 	bl	80005a8 <__aeabi_dmul>
 801f5de:	a336      	add	r3, pc, #216	@ (adr r3, 801f6b8 <__ieee754_acos+0x498>)
 801f5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5e4:	f7e0 fe28 	bl	8000238 <__aeabi_dsub>
 801f5e8:	4622      	mov	r2, r4
 801f5ea:	462b      	mov	r3, r5
 801f5ec:	f7e0 ffdc 	bl	80005a8 <__aeabi_dmul>
 801f5f0:	4b37      	ldr	r3, [pc, #220]	@ (801f6d0 <__ieee754_acos+0x4b0>)
 801f5f2:	2200      	movs	r2, #0
 801f5f4:	f7e0 fe22 	bl	800023c <__adddf3>
 801f5f8:	4602      	mov	r2, r0
 801f5fa:	460b      	mov	r3, r1
 801f5fc:	4650      	mov	r0, sl
 801f5fe:	4659      	mov	r1, fp
 801f600:	f7e1 f8fc 	bl	80007fc <__aeabi_ddiv>
 801f604:	4642      	mov	r2, r8
 801f606:	464b      	mov	r3, r9
 801f608:	f7e0 ffce 	bl	80005a8 <__aeabi_dmul>
 801f60c:	2600      	movs	r6, #0
 801f60e:	4682      	mov	sl, r0
 801f610:	468b      	mov	fp, r1
 801f612:	4632      	mov	r2, r6
 801f614:	464b      	mov	r3, r9
 801f616:	4630      	mov	r0, r6
 801f618:	4649      	mov	r1, r9
 801f61a:	f7e0 ffc5 	bl	80005a8 <__aeabi_dmul>
 801f61e:	4602      	mov	r2, r0
 801f620:	460b      	mov	r3, r1
 801f622:	4620      	mov	r0, r4
 801f624:	4629      	mov	r1, r5
 801f626:	f7e0 fe07 	bl	8000238 <__aeabi_dsub>
 801f62a:	4632      	mov	r2, r6
 801f62c:	4604      	mov	r4, r0
 801f62e:	460d      	mov	r5, r1
 801f630:	464b      	mov	r3, r9
 801f632:	4640      	mov	r0, r8
 801f634:	4649      	mov	r1, r9
 801f636:	f7e0 fe01 	bl	800023c <__adddf3>
 801f63a:	4602      	mov	r2, r0
 801f63c:	460b      	mov	r3, r1
 801f63e:	4620      	mov	r0, r4
 801f640:	4629      	mov	r1, r5
 801f642:	f7e1 f8db 	bl	80007fc <__aeabi_ddiv>
 801f646:	4602      	mov	r2, r0
 801f648:	460b      	mov	r3, r1
 801f64a:	4650      	mov	r0, sl
 801f64c:	4659      	mov	r1, fp
 801f64e:	f7e0 fdf5 	bl	800023c <__adddf3>
 801f652:	4632      	mov	r2, r6
 801f654:	464b      	mov	r3, r9
 801f656:	f7e0 fdf1 	bl	800023c <__adddf3>
 801f65a:	4602      	mov	r2, r0
 801f65c:	460b      	mov	r3, r1
 801f65e:	f7e0 fded 	bl	800023c <__adddf3>
 801f662:	e5fd      	b.n	801f260 <__ieee754_acos+0x40>
 801f664:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801f6c0 <__ieee754_acos+0x4a0>
 801f668:	e5ee      	b.n	801f248 <__ieee754_acos+0x28>
 801f66a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f6c8 <__ieee754_acos+0x4a8>
 801f66e:	e5eb      	b.n	801f248 <__ieee754_acos+0x28>
 801f670:	0dfdf709 	.word	0x0dfdf709
 801f674:	3f023de1 	.word	0x3f023de1
 801f678:	7501b288 	.word	0x7501b288
 801f67c:	3f49efe0 	.word	0x3f49efe0
 801f680:	b5688f3b 	.word	0xb5688f3b
 801f684:	3fa48228 	.word	0x3fa48228
 801f688:	0e884455 	.word	0x0e884455
 801f68c:	3fc9c155 	.word	0x3fc9c155
 801f690:	03eb6f7d 	.word	0x03eb6f7d
 801f694:	3fd4d612 	.word	0x3fd4d612
 801f698:	55555555 	.word	0x55555555
 801f69c:	3fc55555 	.word	0x3fc55555
 801f6a0:	b12e9282 	.word	0xb12e9282
 801f6a4:	3fb3b8c5 	.word	0x3fb3b8c5
 801f6a8:	1b8d0159 	.word	0x1b8d0159
 801f6ac:	3fe6066c 	.word	0x3fe6066c
 801f6b0:	9c598ac8 	.word	0x9c598ac8
 801f6b4:	40002ae5 	.word	0x40002ae5
 801f6b8:	1c8a2d4b 	.word	0x1c8a2d4b
 801f6bc:	40033a27 	.word	0x40033a27
 801f6c0:	54442d18 	.word	0x54442d18
 801f6c4:	400921fb 	.word	0x400921fb
 801f6c8:	54442d18 	.word	0x54442d18
 801f6cc:	3ff921fb 	.word	0x3ff921fb
 801f6d0:	3ff00000 	.word	0x3ff00000
 801f6d4:	3fe00000 	.word	0x3fe00000

0801f6d8 <scalbn>:
 801f6d8:	b570      	push	{r4, r5, r6, lr}
 801f6da:	ec55 4b10 	vmov	r4, r5, d0
 801f6de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801f6e2:	4606      	mov	r6, r0
 801f6e4:	462b      	mov	r3, r5
 801f6e6:	b991      	cbnz	r1, 801f70e <scalbn+0x36>
 801f6e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f6ec:	4323      	orrs	r3, r4
 801f6ee:	d03d      	beq.n	801f76c <scalbn+0x94>
 801f6f0:	4b35      	ldr	r3, [pc, #212]	@ (801f7c8 <scalbn+0xf0>)
 801f6f2:	4620      	mov	r0, r4
 801f6f4:	4629      	mov	r1, r5
 801f6f6:	2200      	movs	r2, #0
 801f6f8:	f7e0 ff56 	bl	80005a8 <__aeabi_dmul>
 801f6fc:	4b33      	ldr	r3, [pc, #204]	@ (801f7cc <scalbn+0xf4>)
 801f6fe:	429e      	cmp	r6, r3
 801f700:	4604      	mov	r4, r0
 801f702:	460d      	mov	r5, r1
 801f704:	da0f      	bge.n	801f726 <scalbn+0x4e>
 801f706:	a328      	add	r3, pc, #160	@ (adr r3, 801f7a8 <scalbn+0xd0>)
 801f708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f70c:	e01e      	b.n	801f74c <scalbn+0x74>
 801f70e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801f712:	4291      	cmp	r1, r2
 801f714:	d10b      	bne.n	801f72e <scalbn+0x56>
 801f716:	4622      	mov	r2, r4
 801f718:	4620      	mov	r0, r4
 801f71a:	4629      	mov	r1, r5
 801f71c:	f7e0 fd8e 	bl	800023c <__adddf3>
 801f720:	4604      	mov	r4, r0
 801f722:	460d      	mov	r5, r1
 801f724:	e022      	b.n	801f76c <scalbn+0x94>
 801f726:	460b      	mov	r3, r1
 801f728:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801f72c:	3936      	subs	r1, #54	@ 0x36
 801f72e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801f732:	4296      	cmp	r6, r2
 801f734:	dd0d      	ble.n	801f752 <scalbn+0x7a>
 801f736:	2d00      	cmp	r5, #0
 801f738:	a11d      	add	r1, pc, #116	@ (adr r1, 801f7b0 <scalbn+0xd8>)
 801f73a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f73e:	da02      	bge.n	801f746 <scalbn+0x6e>
 801f740:	a11d      	add	r1, pc, #116	@ (adr r1, 801f7b8 <scalbn+0xe0>)
 801f742:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f746:	a31a      	add	r3, pc, #104	@ (adr r3, 801f7b0 <scalbn+0xd8>)
 801f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f74c:	f7e0 ff2c 	bl	80005a8 <__aeabi_dmul>
 801f750:	e7e6      	b.n	801f720 <scalbn+0x48>
 801f752:	1872      	adds	r2, r6, r1
 801f754:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801f758:	428a      	cmp	r2, r1
 801f75a:	dcec      	bgt.n	801f736 <scalbn+0x5e>
 801f75c:	2a00      	cmp	r2, #0
 801f75e:	dd08      	ble.n	801f772 <scalbn+0x9a>
 801f760:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f764:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f768:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f76c:	ec45 4b10 	vmov	d0, r4, r5
 801f770:	bd70      	pop	{r4, r5, r6, pc}
 801f772:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801f776:	da08      	bge.n	801f78a <scalbn+0xb2>
 801f778:	2d00      	cmp	r5, #0
 801f77a:	a10b      	add	r1, pc, #44	@ (adr r1, 801f7a8 <scalbn+0xd0>)
 801f77c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f780:	dac1      	bge.n	801f706 <scalbn+0x2e>
 801f782:	a10f      	add	r1, pc, #60	@ (adr r1, 801f7c0 <scalbn+0xe8>)
 801f784:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f788:	e7bd      	b.n	801f706 <scalbn+0x2e>
 801f78a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f78e:	3236      	adds	r2, #54	@ 0x36
 801f790:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f794:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f798:	4620      	mov	r0, r4
 801f79a:	4b0d      	ldr	r3, [pc, #52]	@ (801f7d0 <scalbn+0xf8>)
 801f79c:	4629      	mov	r1, r5
 801f79e:	2200      	movs	r2, #0
 801f7a0:	e7d4      	b.n	801f74c <scalbn+0x74>
 801f7a2:	bf00      	nop
 801f7a4:	f3af 8000 	nop.w
 801f7a8:	c2f8f359 	.word	0xc2f8f359
 801f7ac:	01a56e1f 	.word	0x01a56e1f
 801f7b0:	8800759c 	.word	0x8800759c
 801f7b4:	7e37e43c 	.word	0x7e37e43c
 801f7b8:	8800759c 	.word	0x8800759c
 801f7bc:	fe37e43c 	.word	0xfe37e43c
 801f7c0:	c2f8f359 	.word	0xc2f8f359
 801f7c4:	81a56e1f 	.word	0x81a56e1f
 801f7c8:	43500000 	.word	0x43500000
 801f7cc:	ffff3cb0 	.word	0xffff3cb0
 801f7d0:	3c900000 	.word	0x3c900000

0801f7d4 <__ieee754_sqrt>:
 801f7d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7d8:	4a68      	ldr	r2, [pc, #416]	@ (801f97c <__ieee754_sqrt+0x1a8>)
 801f7da:	ec55 4b10 	vmov	r4, r5, d0
 801f7de:	43aa      	bics	r2, r5
 801f7e0:	462b      	mov	r3, r5
 801f7e2:	4621      	mov	r1, r4
 801f7e4:	d110      	bne.n	801f808 <__ieee754_sqrt+0x34>
 801f7e6:	4622      	mov	r2, r4
 801f7e8:	4620      	mov	r0, r4
 801f7ea:	4629      	mov	r1, r5
 801f7ec:	f7e0 fedc 	bl	80005a8 <__aeabi_dmul>
 801f7f0:	4602      	mov	r2, r0
 801f7f2:	460b      	mov	r3, r1
 801f7f4:	4620      	mov	r0, r4
 801f7f6:	4629      	mov	r1, r5
 801f7f8:	f7e0 fd20 	bl	800023c <__adddf3>
 801f7fc:	4604      	mov	r4, r0
 801f7fe:	460d      	mov	r5, r1
 801f800:	ec45 4b10 	vmov	d0, r4, r5
 801f804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f808:	2d00      	cmp	r5, #0
 801f80a:	dc0e      	bgt.n	801f82a <__ieee754_sqrt+0x56>
 801f80c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f810:	4322      	orrs	r2, r4
 801f812:	d0f5      	beq.n	801f800 <__ieee754_sqrt+0x2c>
 801f814:	b19d      	cbz	r5, 801f83e <__ieee754_sqrt+0x6a>
 801f816:	4622      	mov	r2, r4
 801f818:	4620      	mov	r0, r4
 801f81a:	4629      	mov	r1, r5
 801f81c:	f7e0 fd0c 	bl	8000238 <__aeabi_dsub>
 801f820:	4602      	mov	r2, r0
 801f822:	460b      	mov	r3, r1
 801f824:	f7e0 ffea 	bl	80007fc <__aeabi_ddiv>
 801f828:	e7e8      	b.n	801f7fc <__ieee754_sqrt+0x28>
 801f82a:	152a      	asrs	r2, r5, #20
 801f82c:	d115      	bne.n	801f85a <__ieee754_sqrt+0x86>
 801f82e:	2000      	movs	r0, #0
 801f830:	e009      	b.n	801f846 <__ieee754_sqrt+0x72>
 801f832:	0acb      	lsrs	r3, r1, #11
 801f834:	3a15      	subs	r2, #21
 801f836:	0549      	lsls	r1, r1, #21
 801f838:	2b00      	cmp	r3, #0
 801f83a:	d0fa      	beq.n	801f832 <__ieee754_sqrt+0x5e>
 801f83c:	e7f7      	b.n	801f82e <__ieee754_sqrt+0x5a>
 801f83e:	462a      	mov	r2, r5
 801f840:	e7fa      	b.n	801f838 <__ieee754_sqrt+0x64>
 801f842:	005b      	lsls	r3, r3, #1
 801f844:	3001      	adds	r0, #1
 801f846:	02dc      	lsls	r4, r3, #11
 801f848:	d5fb      	bpl.n	801f842 <__ieee754_sqrt+0x6e>
 801f84a:	1e44      	subs	r4, r0, #1
 801f84c:	1b12      	subs	r2, r2, r4
 801f84e:	f1c0 0420 	rsb	r4, r0, #32
 801f852:	fa21 f404 	lsr.w	r4, r1, r4
 801f856:	4323      	orrs	r3, r4
 801f858:	4081      	lsls	r1, r0
 801f85a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f85e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801f862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f866:	07d2      	lsls	r2, r2, #31
 801f868:	bf5c      	itt	pl
 801f86a:	005b      	lslpl	r3, r3, #1
 801f86c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801f870:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f874:	bf58      	it	pl
 801f876:	0049      	lslpl	r1, r1, #1
 801f878:	2600      	movs	r6, #0
 801f87a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801f87e:	106d      	asrs	r5, r5, #1
 801f880:	0049      	lsls	r1, r1, #1
 801f882:	2016      	movs	r0, #22
 801f884:	4632      	mov	r2, r6
 801f886:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801f88a:	1917      	adds	r7, r2, r4
 801f88c:	429f      	cmp	r7, r3
 801f88e:	bfde      	ittt	le
 801f890:	193a      	addle	r2, r7, r4
 801f892:	1bdb      	suble	r3, r3, r7
 801f894:	1936      	addle	r6, r6, r4
 801f896:	0fcf      	lsrs	r7, r1, #31
 801f898:	3801      	subs	r0, #1
 801f89a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801f89e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f8a2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f8a6:	d1f0      	bne.n	801f88a <__ieee754_sqrt+0xb6>
 801f8a8:	4604      	mov	r4, r0
 801f8aa:	2720      	movs	r7, #32
 801f8ac:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801f8b0:	429a      	cmp	r2, r3
 801f8b2:	eb00 0e0c 	add.w	lr, r0, ip
 801f8b6:	db02      	blt.n	801f8be <__ieee754_sqrt+0xea>
 801f8b8:	d113      	bne.n	801f8e2 <__ieee754_sqrt+0x10e>
 801f8ba:	458e      	cmp	lr, r1
 801f8bc:	d811      	bhi.n	801f8e2 <__ieee754_sqrt+0x10e>
 801f8be:	f1be 0f00 	cmp.w	lr, #0
 801f8c2:	eb0e 000c 	add.w	r0, lr, ip
 801f8c6:	da42      	bge.n	801f94e <__ieee754_sqrt+0x17a>
 801f8c8:	2800      	cmp	r0, #0
 801f8ca:	db40      	blt.n	801f94e <__ieee754_sqrt+0x17a>
 801f8cc:	f102 0801 	add.w	r8, r2, #1
 801f8d0:	1a9b      	subs	r3, r3, r2
 801f8d2:	458e      	cmp	lr, r1
 801f8d4:	bf88      	it	hi
 801f8d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801f8da:	eba1 010e 	sub.w	r1, r1, lr
 801f8de:	4464      	add	r4, ip
 801f8e0:	4642      	mov	r2, r8
 801f8e2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801f8e6:	3f01      	subs	r7, #1
 801f8e8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801f8ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f8f0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f8f4:	d1dc      	bne.n	801f8b0 <__ieee754_sqrt+0xdc>
 801f8f6:	4319      	orrs	r1, r3
 801f8f8:	d01b      	beq.n	801f932 <__ieee754_sqrt+0x15e>
 801f8fa:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801f980 <__ieee754_sqrt+0x1ac>
 801f8fe:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801f984 <__ieee754_sqrt+0x1b0>
 801f902:	e9da 0100 	ldrd	r0, r1, [sl]
 801f906:	e9db 2300 	ldrd	r2, r3, [fp]
 801f90a:	f7e0 fc95 	bl	8000238 <__aeabi_dsub>
 801f90e:	e9da 8900 	ldrd	r8, r9, [sl]
 801f912:	4602      	mov	r2, r0
 801f914:	460b      	mov	r3, r1
 801f916:	4640      	mov	r0, r8
 801f918:	4649      	mov	r1, r9
 801f91a:	f7e1 f8c1 	bl	8000aa0 <__aeabi_dcmple>
 801f91e:	b140      	cbz	r0, 801f932 <__ieee754_sqrt+0x15e>
 801f920:	f1b4 3fff 	cmp.w	r4, #4294967295
 801f924:	e9da 0100 	ldrd	r0, r1, [sl]
 801f928:	e9db 2300 	ldrd	r2, r3, [fp]
 801f92c:	d111      	bne.n	801f952 <__ieee754_sqrt+0x17e>
 801f92e:	3601      	adds	r6, #1
 801f930:	463c      	mov	r4, r7
 801f932:	1072      	asrs	r2, r6, #1
 801f934:	0863      	lsrs	r3, r4, #1
 801f936:	07f1      	lsls	r1, r6, #31
 801f938:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f93c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f940:	bf48      	it	mi
 801f942:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f946:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f94a:	4618      	mov	r0, r3
 801f94c:	e756      	b.n	801f7fc <__ieee754_sqrt+0x28>
 801f94e:	4690      	mov	r8, r2
 801f950:	e7be      	b.n	801f8d0 <__ieee754_sqrt+0xfc>
 801f952:	f7e0 fc73 	bl	800023c <__adddf3>
 801f956:	e9da 8900 	ldrd	r8, r9, [sl]
 801f95a:	4602      	mov	r2, r0
 801f95c:	460b      	mov	r3, r1
 801f95e:	4640      	mov	r0, r8
 801f960:	4649      	mov	r1, r9
 801f962:	f7e1 f893 	bl	8000a8c <__aeabi_dcmplt>
 801f966:	b120      	cbz	r0, 801f972 <__ieee754_sqrt+0x19e>
 801f968:	1ca0      	adds	r0, r4, #2
 801f96a:	bf08      	it	eq
 801f96c:	3601      	addeq	r6, #1
 801f96e:	3402      	adds	r4, #2
 801f970:	e7df      	b.n	801f932 <__ieee754_sqrt+0x15e>
 801f972:	1c63      	adds	r3, r4, #1
 801f974:	f023 0401 	bic.w	r4, r3, #1
 801f978:	e7db      	b.n	801f932 <__ieee754_sqrt+0x15e>
 801f97a:	bf00      	nop
 801f97c:	7ff00000 	.word	0x7ff00000
 801f980:	20000318 	.word	0x20000318
 801f984:	20000310 	.word	0x20000310

0801f988 <_init>:
 801f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f98a:	bf00      	nop
 801f98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f98e:	bc08      	pop	{r3}
 801f990:	469e      	mov	lr, r3
 801f992:	4770      	bx	lr

0801f994 <_fini>:
 801f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f996:	bf00      	nop
 801f998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f99a:	bc08      	pop	{r3}
 801f99c:	469e      	mov	lr, r3
 801f99e:	4770      	bx	lr
