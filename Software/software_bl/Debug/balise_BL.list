
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020f30  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002868  08021070  08021070  00022070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080238d8  080238d8  000248d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080238e0  080238e0  000248e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080238e4  080238e4  000248e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  080238e8  00025008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000320  08023c00  00025320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000358  08023c35  00025358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002eb8  20000370  08023c46  00025370  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003228  08023c46  00026228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00026a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00027000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00027000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08023c46  000261e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004da31  00000000  00000000  00026a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a828  00000000  00000000  000744c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f88  00000000  00000000  0007ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000030a1  00000000  00000000  00082c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000396a0  00000000  00000000  00085d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000568b4  00000000  00000000  000bf3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e748  00000000  00000000  00115c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  002343b5  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012520  00000000  00000000  002343f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  00246918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	08021058 	.word	0x08021058

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	08021058 	.word	0x08021058

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PADS_continuous_init>:


}


uint8_t PADS_continuous_init(I2C_HandleTypeDef *i2c){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	6078      	str	r0, [r7, #4]

	uint8_t ctrl_2=0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	72fb      	strb	r3, [r7, #11]
	uint8_t ctrl_1=0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	72bb      	strb	r3, [r7, #10]
	int check=0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8000fa8:	2364      	movs	r3, #100	@ 0x64
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f107 030b 	add.w	r3, r7, #11
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2211      	movs	r2, #17
 8000fba:	21bb      	movs	r1, #187	@ 0xbb
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f009 fc27 	bl	800a810 <HAL_I2C_Mem_Read>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <PADS_continuous_init+0x38>
			check=1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
		}

	ctrl_2|=0b00000010;
 8000fcc:	7afb      	ldrb	r3, [r7, #11]
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	72fb      	strb	r3, [r7, #11]

	if(HAL_I2C_Mem_Write(i2c, 0xBA, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8000fd6:	2364      	movs	r3, #100	@ 0x64
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	f107 030b 	add.w	r3, r7, #11
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	2211      	movs	r2, #17
 8000fe8:	21ba      	movs	r1, #186	@ 0xba
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f009 fafc 	bl	800a5e8 <HAL_I2C_Mem_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <PADS_continuous_init+0x66>
			check=1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
		}

	if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 8000ffa:	2364      	movs	r3, #100	@ 0x64
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 030a 	add.w	r3, r7, #10
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2210      	movs	r2, #16
 800100c:	21bb      	movs	r1, #187	@ 0xbb
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f009 fbfe 	bl	800a810 <HAL_I2C_Mem_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <PADS_continuous_init+0x8a>
				check=1;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
			}


	ctrl_1|=0b01001110;
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	f043 034e 	orr.w	r3, r3, #78	@ 0x4e
 8001024:	b2db      	uxtb	r3, r3
 8001026:	72bb      	strb	r3, [r7, #10]

	ctrl_1&=0b11001111;
 8001028:	7abb      	ldrb	r3, [r7, #10]
 800102a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800102e:	b2db      	uxtb	r3, r3
 8001030:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Mem_Write(i2c, 0xBA, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 8001032:	2364      	movs	r3, #100	@ 0x64
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030a 	add.w	r3, r7, #10
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2210      	movs	r2, #16
 8001044:	21ba      	movs	r1, #186	@ 0xba
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f009 face 	bl	800a5e8 <HAL_I2C_Mem_Write>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <PADS_continuous_init+0xc2>
				check=1;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
			}



	return check;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	b2db      	uxtb	r3, r3

}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	0000      	movs	r0, r0
 8001064:	0000      	movs	r0, r0
	...

08001068 <PADS_continuous_read>:

uint8_t PADS_continuous_read(I2C_HandleTypeDef *i2c){
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	ed2d 8b02 	vpush	{d8}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af04      	add	r7, sp, #16
 8001072:	6078      	str	r0, [r7, #4]
		int check=0;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8_t recarray[5];
		int16_t intbuffertemp=0;
 8001078:	2300      	movs	r3, #0
 800107a:	847b      	strh	r3, [r7, #34]	@ 0x22
		int32_t intbufferpres=0;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
		double tmoy=0;
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x28, 1, &recarray[0], 1, 100)!=HAL_OK){
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2301      	movs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2228      	movs	r2, #40	@ 0x28
 800109e:	21bb      	movs	r1, #187	@ 0xbb
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f009 fbb5 	bl	800a810 <HAL_I2C_Mem_Read>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <PADS_continuous_read+0x48>
			check=1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x29, 1, &recarray[1], 1, 100)!=HAL_OK){
 80010b0:	2364      	movs	r3, #100	@ 0x64
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	3301      	adds	r3, #1
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	2229      	movs	r2, #41	@ 0x29
 80010c4:	21bb      	movs	r1, #187	@ 0xbb
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f009 fba2 	bl	800a810 <HAL_I2C_Mem_Read>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <PADS_continuous_read+0x6e>
			check=1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2A, 1, &recarray[2], 1, 100)!=HAL_OK){
 80010d6:	2364      	movs	r3, #100	@ 0x64
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	2301      	movs	r3, #1
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	3302      	adds	r3, #2
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	222a      	movs	r2, #42	@ 0x2a
 80010ea:	21bb      	movs	r1, #187	@ 0xbb
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f009 fb8f 	bl	800a810 <HAL_I2C_Mem_Read>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <PADS_continuous_read+0x94>
			check=1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2B, 1, &recarray[3], 1, 100)!=HAL_OK){
 80010fc:	2364      	movs	r3, #100	@ 0x64
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	3303      	adds	r3, #3
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	222b      	movs	r2, #43	@ 0x2b
 8001110:	21bb      	movs	r1, #187	@ 0xbb
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f009 fb7c 	bl	800a810 <HAL_I2C_Mem_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <PADS_continuous_read+0xba>
			check=1;
 800111e:	2301      	movs	r3, #1
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2C, 1, &recarray[4], 1, 100)!=HAL_OK){
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2301      	movs	r3, #1
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	3304      	adds	r3, #4
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	222c      	movs	r2, #44	@ 0x2c
 8001136:	21bb      	movs	r1, #187	@ 0xbb
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f009 fb69 	bl	800a810 <HAL_I2C_Mem_Read>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <PADS_continuous_read+0xe0>
			check=1;
 8001144:	2301      	movs	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		if(check==0){
 8001148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 80c9 	bne.w	80012e2 <PADS_continuous_read+0x27a>

		intbufferpres=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 8001150:	7abb      	ldrb	r3, [r7, #10]
 8001152:	041a      	lsls	r2, r3, #16
 8001154:	7a7b      	ldrb	r3, [r7, #9]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	4313      	orrs	r3, r2
 800115a:	7a3a      	ldrb	r2, [r7, #8]
 800115c:	4313      	orrs	r3, r2
 800115e:	61fb      	str	r3, [r7, #28]
		intbuffertemp=(recarray[4]<<8)|(recarray[3]);
 8001160:	7b3b      	ldrb	r3, [r7, #12]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	847b      	strh	r3, [r7, #34]	@ 0x22
		finaltemp=(float)intbuffertemp*0.01;
 800116e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117a:	ee17 0a90 	vmov	r0, s15
 800117e:	f7ff f9bb 	bl	80004f8 <__aeabi_f2d>
 8001182:	a36d      	add	r3, pc, #436	@ (adr r3, 8001338 <PADS_continuous_read+0x2d0>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa0e 	bl	80005a8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd00 	bl	8000b98 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4a61      	ldr	r2, [pc, #388]	@ (8001320 <PADS_continuous_read+0x2b8>)
 800119c:	6013      	str	r3, [r2, #0]
		finalpress=(float) intbufferpres*(0.00002441406);
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a8:	ee17 0a90 	vmov	r0, s15
 80011ac:	f7ff f9a4 	bl	80004f8 <__aeabi_f2d>
 80011b0:	a351      	add	r3, pc, #324	@ (adr r3, 80012f8 <PADS_continuous_read+0x290>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff f9f7 	bl	80005a8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fce9 	bl	8000b98 <__aeabi_d2f>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a56      	ldr	r2, [pc, #344]	@ (8001324 <PADS_continuous_read+0x2bc>)
 80011ca:	6013      	str	r3, [r2, #0]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		alt=(float) ((8.314*293.15)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 80011cc:	4b55      	ldr	r3, [pc, #340]	@ (8001324 <PADS_continuous_read+0x2bc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f991 	bl	80004f8 <__aeabi_f2d>
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b53      	ldr	r3, [pc, #332]	@ (8001328 <PADS_continuous_read+0x2c0>)
 80011dc:	f7ff f9e4 	bl	80005a8 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	a146      	add	r1, pc, #280	@ (adr r1, 8001300 <PADS_continuous_read+0x298>)
 80011e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011ea:	f7ff fb07 	bl	80007fc <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fccf 	bl	8000b98 <__aeabi_d2f>
 80011fa:	4603      	mov	r3, r0
 80011fc:	ee00 3a10 	vmov	s0, r3
 8001200:	f01e f96c 	bl	801f4dc <logf>
 8001204:	eef0 7a40 	vmov.f32	s15, s0
 8001208:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800132c <PADS_continuous_read+0x2c4>
 800120c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001210:	4b47      	ldr	r3, [pc, #284]	@ (8001330 <PADS_continuous_read+0x2c8>)
 8001212:	edc3 7a00 	vstr	s15, [r3]
		tmoy=(float) 293.15+finaltemp+(0.0065*alt)/2;
 8001216:	4b42      	ldr	r3, [pc, #264]	@ (8001320 <PADS_continuous_read+0x2b8>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001334 <PADS_continuous_read+0x2cc>
 8001220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001224:	ee17 0a90 	vmov	r0, s15
 8001228:	f7ff f966 	bl	80004f8 <__aeabi_f2d>
 800122c:	4604      	mov	r4, r0
 800122e:	460d      	mov	r5, r1
 8001230:	4b3f      	ldr	r3, [pc, #252]	@ (8001330 <PADS_continuous_read+0x2c8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f95f 	bl	80004f8 <__aeabi_f2d>
 800123a:	a333      	add	r3, pc, #204	@ (adr r3, 8001308 <PADS_continuous_read+0x2a0>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f9b2 	bl	80005a8 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001254:	f7ff fad2 	bl	80007fc <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4620      	mov	r0, r4
 800125e:	4629      	mov	r1, r5
 8001260:	f7fe ffec 	bl	800023c <__adddf3>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	e9c7 2304 	strd	r2, r3, [r7, #16]
		alt=(float) ((8.314*tmoy)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 800126c:	a328      	add	r3, pc, #160	@ (adr r3, 8001310 <PADS_continuous_read+0x2a8>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001276:	f7ff f997 	bl	80005a8 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	a325      	add	r3, pc, #148	@ (adr r3, 8001318 <PADS_continuous_read+0x2b0>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff fab8 	bl	80007fc <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fc80 	bl	8000b98 <__aeabi_d2f>
 8001298:	ee08 0a10 	vmov	s16, r0
 800129c:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <PADS_continuous_read+0x2bc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f929 	bl	80004f8 <__aeabi_f2d>
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <PADS_continuous_read+0x2c0>)
 80012ac:	f7ff f97c 	bl	80005a8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	a112      	add	r1, pc, #72	@ (adr r1, 8001300 <PADS_continuous_read+0x298>)
 80012b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ba:	f7ff fa9f 	bl	80007fc <__aeabi_ddiv>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc67 	bl	8000b98 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	ee00 3a10 	vmov	s0, r3
 80012d0:	f01e f904 	bl	801f4dc <logf>
 80012d4:	eef0 7a40 	vmov.f32	s15, s0
 80012d8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <PADS_continuous_read+0x2c8>)
 80012de:	edc3 7a00 	vstr	s15, [r3]



		}

		return check;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	b2db      	uxtb	r3, r3





}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3728      	adds	r7, #40	@ 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	ecbd 8b02 	vpop	{d8}
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	f3af 8000 	nop.w
 80012f8:	6d9e99d7 	.word	0x6d9e99d7
 80012fc:	3ef99999 	.word	0x3ef99999
 8001300:	00000000 	.word	0x00000000
 8001304:	40f8bcd0 	.word	0x40f8bcd0
 8001308:	76c8b439 	.word	0x76c8b439
 800130c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001310:	9ba5e354 	.word	0x9ba5e354
 8001314:	4020a0c4 	.word	0x4020a0c4
 8001318:	50527f89 	.word	0x50527f89
 800131c:	3fd22db5 	.word	0x3fd22db5
 8001320:	2000038c 	.word	0x2000038c
 8001324:	20000390 	.word	0x20000390
 8001328:	408f4000 	.word	0x408f4000
 800132c:	460612a4 	.word	0x460612a4
 8001330:	20000394 	.word	0x20000394
 8001334:	43929333 	.word	0x43929333
 8001338:	47ae147b 	.word	0x47ae147b
 800133c:	3f847ae1 	.word	0x3f847ae1

08001340 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800134e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800135c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800138a:	4b38      	ldr	r3, [pc, #224]	@ (800146c <MX_ADC1_Init+0xf8>)
 800138c:	4a38      	ldr	r2, [pc, #224]	@ (8001470 <MX_ADC1_Init+0xfc>)
 800138e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001390:	4b36      	ldr	r3, [pc, #216]	@ (800146c <MX_ADC1_Init+0xf8>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001396:	4b35      	ldr	r3, [pc, #212]	@ (800146c <MX_ADC1_Init+0xf8>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139c:	4b33      	ldr	r3, [pc, #204]	@ (800146c <MX_ADC1_Init+0xf8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013a2:	4b32      	ldr	r3, [pc, #200]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a8:	4b30      	ldr	r3, [pc, #192]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013ae:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013b4:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80013ba:	4b2c      	ldr	r3, [pc, #176]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013bc:	2203      	movs	r2, #3
 80013be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c0:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80013c8:	4b28      	ldr	r3, [pc, #160]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013ca:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013d0:	4b26      	ldr	r3, [pc, #152]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d8:	4b24      	ldr	r3, [pc, #144]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013e0:	4b22      	ldr	r3, [pc, #136]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013e6:	4b21      	ldr	r3, [pc, #132]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ee:	481f      	ldr	r0, [pc, #124]	@ (800146c <MX_ADC1_Init+0xf8>)
 80013f0:	f007 f950 	bl	8008694 <HAL_ADC_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80013fa:	f001 fe2f 	bl	800305c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <MX_ADC1_Init+0x100>)
 8001400:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001402:	2306      	movs	r3, #6
 8001404:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001406:	2307      	movs	r3, #7
 8001408:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800140a:	237f      	movs	r3, #127	@ 0x7f
 800140c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800140e:	2304      	movs	r3, #4
 8001410:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	4619      	mov	r1, r3
 800141a:	4814      	ldr	r0, [pc, #80]	@ (800146c <MX_ADC1_Init+0xf8>)
 800141c:	f007 fb1e 	bl	8008a5c <HAL_ADC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001426:	f001 fe19 	bl	800305c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <MX_ADC1_Init+0x104>)
 800142c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800142e:	230c      	movs	r3, #12
 8001430:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	480d      	ldr	r0, [pc, #52]	@ (800146c <MX_ADC1_Init+0xf8>)
 8001438:	f007 fb10 	bl	8008a5c <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001442:	f001 fe0b 	bl	800305c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <MX_ADC1_Init+0x108>)
 8001448:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800144a:	2312      	movs	r3, #18
 800144c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	@ (800146c <MX_ADC1_Init+0xf8>)
 8001454:	f007 fb02 	bl	8008a5c <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800145e:	f001 fdfd 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200003a0 	.word	0x200003a0
 8001470:	50040000 	.word	0x50040000
 8001474:	80000001 	.word	0x80000001
 8001478:	c7520000 	.word	0xc7520000
 800147c:	25b00200 	.word	0x25b00200

08001480 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a22      	ldr	r2, [pc, #136]	@ (8001528 <HAL_ADC_MspInit+0xa8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d13e      	bne.n	8001520 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014a2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014a6:	f7ff ff4b 	bl	8001340 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff ff48 	bl	8001340 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014b0:	2310      	movs	r3, #16
 80014b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b4:	2303      	movs	r3, #3
 80014b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c6:	f008 fd0b 	bl	8009ee0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014ca:	4b18      	ldr	r3, [pc, #96]	@ (800152c <HAL_ADC_MspInit+0xac>)
 80014cc:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <HAL_ADC_MspInit+0xb0>)
 80014ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_ADC_MspInit+0xac>)
 80014d2:	2205      	movs	r2, #5
 80014d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_ADC_MspInit+0xac>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014dc:	4b13      	ldr	r3, [pc, #76]	@ (800152c <HAL_ADC_MspInit+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_ADC_MspInit+0xac>)
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e8:	4b10      	ldr	r3, [pc, #64]	@ (800152c <HAL_ADC_MspInit+0xac>)
 80014ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <HAL_ADC_MspInit+0xac>)
 80014f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <HAL_ADC_MspInit+0xac>)
 80014fa:	2220      	movs	r2, #32
 80014fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <HAL_ADC_MspInit+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001504:	4809      	ldr	r0, [pc, #36]	@ (800152c <HAL_ADC_MspInit+0xac>)
 8001506:	f008 f917 	bl	8009738 <HAL_DMA_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001510:	f001 fda4 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a05      	ldr	r2, [pc, #20]	@ (800152c <HAL_ADC_MspInit+0xac>)
 8001518:	64da      	str	r2, [r3, #76]	@ 0x4c
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <HAL_ADC_MspInit+0xac>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	50040000 	.word	0x50040000
 800152c:	20000404 	.word	0x20000404
 8001530:	40020008 	.word	0x40020008
 8001534:	00000000 	.word	0x00000000

08001538 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001538:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a54      	ldr	r2, [pc, #336]	@ (8001698 <HAL_ADC_ConvCpltCallback+0x160>)
 8001548:	4293      	cmp	r3, r2
 800154a:	f040 8091 	bne.w	8001670 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800154e:	4b53      	ldr	r3, [pc, #332]	@ (800169c <HAL_ADC_ConvCpltCallback+0x164>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffbe 	bl	80004d4 <__aeabi_i2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	a14a      	add	r1, pc, #296	@ (adr r1, 8001688 <HAL_ADC_ConvCpltCallback+0x150>)
 800155e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001562:	f7ff f94b 	bl	80007fc <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb13 	bl	8000b98 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	4a4a      	ldr	r2, [pc, #296]	@ (80016a0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001576:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001578:	4b4a      	ldr	r3, [pc, #296]	@ (80016a4 <HAL_ADC_ConvCpltCallback+0x16c>)
 800157a:	ed93 7a00 	vldr	s14, [r3]
 800157e:	4b4a      	ldr	r3, [pc, #296]	@ (80016a8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001588:	ee17 0a90 	vmov	r0, s15
 800158c:	f7fe ffb4 	bl	80004f8 <__aeabi_f2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	f04f 0000 	mov.w	r0, #0
 8001598:	4944      	ldr	r1, [pc, #272]	@ (80016ac <HAL_ADC_ConvCpltCallback+0x174>)
 800159a:	f7ff f92f 	bl	80007fc <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4690      	mov	r8, r2
 80015a4:	4699      	mov	r9, r3
 80015a6:	4b3d      	ldr	r3, [pc, #244]	@ (800169c <HAL_ADC_ConvCpltCallback+0x164>)
 80015a8:	885b      	ldrh	r3, [r3, #2]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff92 	bl	80004d4 <__aeabi_i2d>
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	4b3a      	ldr	r3, [pc, #232]	@ (80016a0 <HAL_ADC_ConvCpltCallback+0x168>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff9d 	bl	80004f8 <__aeabi_f2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x178>)
 80015c4:	f7ff f91a 	bl	80007fc <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe ffea 	bl	80005a8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4614      	mov	r4, r2
 80015da:	461d      	mov	r5, r3
 80015dc:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <HAL_ADC_ConvCpltCallback+0x170>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff89 	bl	80004f8 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4620      	mov	r0, r4
 80015ec:	4629      	mov	r1, r5
 80015ee:	f7fe fe23 	bl	8000238 <__aeabi_dsub>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4640      	mov	r0, r8
 80015f8:	4649      	mov	r1, r9
 80015fa:	f7fe ffd5 	bl	80005a8 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fac7 	bl	8000b98 <__aeabi_d2f>
 800160a:	ee07 0a10 	vmov	s14, r0
 800160e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001618:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <HAL_ADC_ConvCpltCallback+0x164>)
 800161e:	889b      	ldrh	r3, [r3, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff57 	bl	80004d4 <__aeabi_i2d>
 8001626:	a31a      	add	r3, pc, #104	@ (adr r3, 8001690 <HAL_ADC_ConvCpltCallback+0x158>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7ff f8e6 	bl	80007fc <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	f7fe fdfe 	bl	800023c <__adddf3>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4614      	mov	r4, r2
 8001646:	461d      	mov	r5, r3
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_ADC_ConvCpltCallback+0x168>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff53 	bl	80004f8 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4620      	mov	r0, r4
 8001658:	4629      	mov	r1, r5
 800165a:	f7fe ffa5 	bl	80005a8 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa97 	bl	8000b98 <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <HAL_ADC_ConvCpltCallback+0x180>)
 800166e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001670:	2203      	movs	r2, #3
 8001672:	490a      	ldr	r1, [pc, #40]	@ (800169c <HAL_ADC_ConvCpltCallback+0x164>)
 8001674:	4811      	ldr	r0, [pc, #68]	@ (80016bc <HAL_ADC_ConvCpltCallback+0x184>)
 8001676:	f007 f959 	bl	800892c <HAL_ADC_Start_DMA>



}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001684:	f3af 8000 	nop.w
 8001688:	d70a3d70 	.word	0xd70a3d70
 800168c:	40b36323 	.word	0x40b36323
 8001690:	00000000 	.word	0x00000000
 8001694:	40affe00 	.word	0x40affe00
 8001698:	50040000 	.word	0x50040000
 800169c:	200008a0 	.word	0x200008a0
 80016a0:	200008ac 	.word	0x200008ac
 80016a4:	20000008 	.word	0x20000008
 80016a8:	2000000c 	.word	0x2000000c
 80016ac:	40590000 	.word	0x40590000
 80016b0:	40080000 	.word	0x40080000
 80016b4:	200008a8 	.word	0x200008a8
 80016b8:	200008b0 	.word	0x200008b0
 80016bc:	200003a0 	.word	0x200003a0

080016c0 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <APPD_EnableCPU2+0x34>)
 80016c8:	1d3c      	adds	r4, r7, #4
 80016ca:	461d      	mov	r5, r3
 80016cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016d4:	c403      	stmia	r4!, {r0, r1}
 80016d6:	8022      	strh	r2, [r4, #0]
 80016d8:	3402      	adds	r4, #2
 80016da:	0c13      	lsrs	r3, r2, #16
 80016dc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80016de:	f016 fcb1 	bl	8018044 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4618      	mov	r0, r3
 80016e6:	f015 ff42 	bl	801756e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80016ea:	bf00      	nop
}
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bdb0      	pop	{r4, r5, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	08021070 	.word	0x08021070

080016f8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <LL_C2_PWR_SetPowerMode+0x28>)
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001706:	f023 0207 	bic.w	r2, r3, #7
 800170a:	4905      	ldr	r1, [pc, #20]	@ (8001720 <LL_C2_PWR_SetPowerMode+0x28>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4313      	orrs	r3, r2
 8001710:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	58000400 	.word	0x58000400

08001724 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <LL_EXTI_EnableIT_32_63+0x24>)
 800172e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001732:	4905      	ldr	r1, [pc, #20]	@ (8001748 <LL_EXTI_EnableIT_32_63+0x24>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4313      	orrs	r3, r2
 8001738:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	58000800 	.word	0x58000800

0800174c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800175a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001762:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001766:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001772:	4313      	orrs	r3, r2
 8001774:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	cafecafe 	.word	0xcafecafe

08001788 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800179a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <LL_DBGMCU_GetDeviceID+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e0042000 	.word	0xe0042000

080017cc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <LL_DBGMCU_GetRevisionID+0x18>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	b29b      	uxth	r3, r3
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e0042000 	.word	0xe0042000

080017e8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <LL_LPM_EnableSleep+0x1c>)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <LL_LPM_EnableSleep+0x1c>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	6113      	str	r3, [r2, #16]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	22ff      	movs	r2, #255	@ 0xff
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	22ca      	movs	r2, #202	@ 0xca
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2253      	movs	r2, #83	@ 0x53
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 0207 	bic.w	r2, r3, #7
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <MX_APPE_Config+0x18>)
 800186e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001872:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001874:	f000 f824 	bl	80018c0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001878:	f000 f829 	bl	80018ce <Config_HSE>

  return;
 800187c:	bf00      	nop
}
 800187e:	bd80      	pop	{r7, pc}
 8001880:	58004000 	.word	0x58004000

08001884 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001888:	f000 f835 	bl	80018f6 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800188c:	f000 f84e 	bl	800192c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001890:	4903      	ldr	r1, [pc, #12]	@ (80018a0 <MX_APPE_Init+0x1c>)
 8001892:	2000      	movs	r0, #0
 8001894:	f000 fe4c 	bl	8002530 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001898:	f000 f856 	bl	8001948 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800189c:	bf00      	nop
}
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000d00 	.word	0x20000d00

080018a4 <Init_Smps>:

void Init_Smps(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80018a8:	bf00      	nop
}
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <Init_Exti>:

void Init_Exti(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80018b6:	2050      	movs	r0, #80	@ 0x50
 80018b8:	f7ff ff34 	bl	8001724 <LL_EXTI_EnableIT_32_63>

  return;
 80018bc:	bf00      	nop
}
 80018be:	bd80      	pop	{r7, pc}

080018c0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80018c4:	bf00      	nop
}
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f016 fc41 	bl	801815c <OTP_Read>
 80018da:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	799b      	ldrb	r3, [r3, #6]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff30 	bl	800174c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
}
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <System_Init>:

static void System_Init(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
  Init_Smps();
 80018fa:	f7ff ffd3 	bl	80018a4 <Init_Smps>

  Init_Exti();
 80018fe:	f7ff ffd8 	bl	80018b2 <Init_Exti>

  Init_Rtc();
 8001902:	f000 f803 	bl	800190c <Init_Rtc>

  return;
 8001906:	bf00      	nop
}
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <Init_Rtc>:

static void Init_Rtc(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <Init_Rtc+0x1c>)
 8001912:	f7ff ff86 	bl	8001822 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001916:	2100      	movs	r1, #0
 8001918:	4803      	ldr	r0, [pc, #12]	@ (8001928 <Init_Rtc+0x1c>)
 800191a:	f7ff ff92 	bl	8001842 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800191e:	4802      	ldr	r0, [pc, #8]	@ (8001928 <Init_Rtc+0x1c>)
 8001920:	f7ff ff72 	bl	8001808 <LL_RTC_EnableWriteProtection>

  return;
 8001924:	bf00      	nop
}
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40002800 	.word	0x40002800

0800192c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001930:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001934:	f7ff ff28 	bl	8001788 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001938:	f018 fe06 	bl	801a548 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800193c:	2004      	movs	r0, #4
 800193e:	f7ff fedb 	bl	80016f8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001942:	bf00      	nop
}
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800194e:	f016 f9c3 	bl	8017cd8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001952:	4a11      	ldr	r2, [pc, #68]	@ (8001998 <appe_Tl_Init+0x50>)
 8001954:	2100      	movs	r1, #0
 8001956:	2004      	movs	r0, #4
 8001958:	f018 ff34 	bl	801a7c4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <appe_Tl_Init+0x54>)
 800195e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <appe_Tl_Init+0x58>)
 8001962:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	480e      	ldr	r0, [pc, #56]	@ (80019a4 <appe_Tl_Init+0x5c>)
 800196a:	f016 f877 	bl	8017a5c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <appe_Tl_Init+0x60>)
 8001970:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <appe_Tl_Init+0x64>)
 8001974:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <appe_Tl_Init+0x68>)
 8001978:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800197a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800197e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	4618      	mov	r0, r3
 8001986:	f016 fae9 	bl	8017f5c <TL_MM_Init>

  TL_Enable();
 800198a:	f016 f99f 	bl	8017ccc <TL_Enable>

  return;
 800198e:	bf00      	nop
}
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	08017a95 	.word	0x08017a95
 800199c:	20030734 	.word	0x20030734
 80019a0:	080019b5 	.word	0x080019b5
 80019a4:	080019cd 	.word	0x080019cd
 80019a8:	2003094c 	.word	0x2003094c
 80019ac:	20030840 	.word	0x20030840
 80019b0:	200301f8 	.word	0x200301f8

080019b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80019be:	bf00      	nop
}
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	330b      	adds	r3, #11
 80019da:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80019e6:	2b07      	cmp	r3, #7
 80019e8:	d81f      	bhi.n	8001a2a <APPE_SysUserEvtRx+0x5e>
 80019ea:	a201      	add	r2, pc, #4	@ (adr r2, 80019f0 <APPE_SysUserEvtRx+0x24>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a11 	.word	0x08001a11
 80019f4:	08001a23 	.word	0x08001a23
 80019f8:	08001a2b 	.word	0x08001a2b
 80019fc:	08001a2b 	.word	0x08001a2b
 8001a00:	08001a2b 	.word	0x08001a2b
 8001a04:	08001a2b 	.word	0x08001a2b
 8001a08:	08001a2b 	.word	0x08001a2b
 8001a0c:	08001a2b 	.word	0x08001a2b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	4618      	mov	r0, r3
 8001a16:	f015 fdd7 	bl	80175c8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f81b 	bl	8001a56 <APPE_SysEvtReadyProcessing>
    break;
 8001a20:	e004      	b.n	8001a2c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f806 	bl	8001a34 <APPE_SysEvtError>
    break;
 8001a28:	e000      	b.n	8001a2c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001a2a:	bf00      	nop
  }

  return;
 8001a2c:	bf00      	nop
}
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	330b      	adds	r3, #11
 8001a42:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3302      	adds	r3, #2
 8001a48:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001a4a:	bf00      	nop
}
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b08a      	sub	sp, #40	@ 0x28
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	330b      	adds	r3, #11
 8001a7a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d11d      	bne.n	8001ac6 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001a8a:	f7ff fe19 	bl	80016c0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001a8e:	230f      	movs	r3, #15
 8001a90:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001a92:	237f      	movs	r3, #127	@ 0x7f
 8001a94:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001a96:	f7ff fe99 	bl	80017cc <LL_DBGMCU_GetRevisionID>
 8001a9a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001aa2:	f7ff fe85 	bl	80017b0 <LL_DBGMCU_GetDeviceID>
 8001aa6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f015 fd72 	bl	801759c <SHCI_C2_Config>

    APP_BLE_Init();
 8001ab8:	f017 f9a4 	bl	8018e04 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001abc:	2100      	movs	r1, #0
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f018 fd54 	bl	801a56c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001ac4:	e007      	b.n	8001ad6 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d103      	bne.n	8001ad6 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
  return;
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
}
 8001ad8:	3728      	adds	r7, #40	@ 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae6:	f006 fbe9 	bl	80082bc <HAL_GetTick>
 8001aea:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af6:	d00a      	beq.n	8001b0e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001af8:	f006 fbf8 	bl	80082ec <HAL_GetTickFreq>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	e002      	b.n	8001b0e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001b08:	f7ff fe6e 	bl	80017e8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001b0c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	f006 fbd5 	bl	80082bc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d8f4      	bhi.n	8001b08 <HAL_Delay+0x2a>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f018 fd4c 	bl	801a5cc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001b3c:	bf00      	nop
}
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f018 fd3a 	bl	801a5cc <UTIL_SEQ_Run>
  return;
 8001b58:	bf00      	nop
}
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2004      	movs	r0, #4
 8001b6c:	f018 fe4c 	bl	801a808 <UTIL_SEQ_SetTask>
  return;
 8001b70:	bf00      	nop
}
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001b80:	2002      	movs	r0, #2
 8001b82:	f018 fead 	bl	801a8e0 <UTIL_SEQ_SetEvt>
  return;
 8001b86:	bf00      	nop
}
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001b96:	2002      	movs	r0, #2
 8001b98:	f018 fec2 	bl	801a920 <UTIL_SEQ_WaitEvt>
  return;
 8001b9c:	bf00      	nop
}
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <LL_AHB1_GRP1_EnableClock>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bda:	2004      	movs	r0, #4
 8001bdc:	f7ff ffe2 	bl	8001ba4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff ffdf 	bl	8001ba4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	200b      	movs	r0, #11
 8001bec:	f007 fd45 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bf0:	200b      	movs	r0, #11
 8001bf2:	f007 fd5c 	bl	80096ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	200c      	movs	r0, #12
 8001bfc:	f007 fd3d 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c00:	200c      	movs	r0, #12
 8001c02:	f007 fd54 	bl	80096ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	200d      	movs	r0, #13
 8001c0c:	f007 fd35 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c10:	200d      	movs	r0, #13
 8001c12:	f007 fd4c 	bl	80096ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	200e      	movs	r0, #14
 8001c1c:	f007 fd2d 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c20:	200e      	movs	r0, #14
 8001c22:	f007 fd44 	bl	80096ae <HAL_NVIC_EnableIRQ>

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <LL_AHB2_GRP1_EnableClock>:
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c70:	2004      	movs	r0, #4
 8001c72:	f7ff ffda 	bl	8001c2a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff ffd7 	bl	8001c2a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f7ff ffd4 	bl	8001c2a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2101      	movs	r1, #1
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8a:	f008 fb8f 	bl	800a3ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2183      	movs	r1, #131	@ 0x83
 8001c92:	481b      	ldr	r0, [pc, #108]	@ (8001d00 <MX_GPIO_Init+0xa4>)
 8001c94:	f008 fb8a 	bl	800a3ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c98:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c9e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4815      	ldr	r0, [pc, #84]	@ (8001d04 <MX_GPIO_Init+0xa8>)
 8001cae:	f008 f917 	bl	8009ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cca:	f008 f909 	bl	8009ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 8001cce:	2383      	movs	r3, #131	@ 0x83
 8001cd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4807      	ldr	r0, [pc, #28]	@ (8001d00 <MX_GPIO_Init+0xa4>)
 8001ce4:	f008 f8fc 	bl	8009ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	2028      	movs	r0, #40	@ 0x28
 8001cee:	f007 fcc4 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cf2:	2028      	movs	r0, #40	@ 0x28
 8001cf4:	f007 fcdb 	bl	80096ae <HAL_NVIC_EnableIRQ>

}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	48000400 	.word	0x48000400
 8001d04:	48000800 	.word	0x48000800

08001d08 <LL_EXTI_EnableIT_0_31>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <LL_EXTI_EnableIT_0_31+0x24>)
 8001d12:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001d16:	4905      	ldr	r1, [pc, #20]	@ (8001d2c <LL_EXTI_EnableIT_0_31+0x24>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	58000800 	.word	0x58000800

08001d30 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4904      	ldr	r1, [pc, #16]	@ (8001d50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]

}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	58000800 	.word	0x58000800

08001d54 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <ReadRtcSsrValue+0x3c>)
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <ReadRtcSsrValue+0x3c>)
 8001d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001d6a:	e005      	b.n	8001d78 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d70:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <ReadRtcSsrValue+0x3c>)
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1f5      	bne.n	8001d6c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001d80:	683b      	ldr	r3, [r7, #0]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40002800 	.word	0x40002800

08001d94 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001da4:	79ba      	ldrb	r2, [r7, #6]
 8001da6:	491d      	ldr	r1, [pc, #116]	@ (8001e1c <LinkTimerAfter+0x88>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	3315      	adds	r3, #21
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d009      	beq.n	8001dd2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	4916      	ldr	r1, [pc, #88]	@ (8001e1c <LinkTimerAfter+0x88>)
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	3314      	adds	r3, #20
 8001dce:	79fa      	ldrb	r2, [r7, #7]
 8001dd0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	4911      	ldr	r1, [pc, #68]	@ (8001e1c <LinkTimerAfter+0x88>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3315      	adds	r3, #21
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001de6:	79fa      	ldrb	r2, [r7, #7]
 8001de8:	490c      	ldr	r1, [pc, #48]	@ (8001e1c <LinkTimerAfter+0x88>)
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	440b      	add	r3, r1
 8001df4:	3314      	adds	r3, #20
 8001df6:	79ba      	ldrb	r2, [r7, #6]
 8001df8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001dfa:	79ba      	ldrb	r2, [r7, #6]
 8001dfc:	4907      	ldr	r1, [pc, #28]	@ (8001e1c <LinkTimerAfter+0x88>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	3315      	adds	r3, #21
 8001e0a:	79fa      	ldrb	r2, [r7, #7]
 8001e0c:	701a      	strb	r2, [r3, #0]

  return;
 8001e0e:	bf00      	nop
}
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000464 	.word	0x20000464

08001e20 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	460a      	mov	r2, r1
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001e30:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <LinkTimerBefore+0xb8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	79ba      	ldrb	r2, [r7, #6]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d032      	beq.n	8001ea2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001e3c:	79ba      	ldrb	r2, [r7, #6]
 8001e3e:	4927      	ldr	r1, [pc, #156]	@ (8001edc <LinkTimerBefore+0xbc>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	4922      	ldr	r1, [pc, #136]	@ (8001edc <LinkTimerBefore+0xbc>)
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3315      	adds	r3, #21
 8001e60:	79fa      	ldrb	r2, [r7, #7]
 8001e62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e64:	79fa      	ldrb	r2, [r7, #7]
 8001e66:	491d      	ldr	r1, [pc, #116]	@ (8001edc <LinkTimerBefore+0xbc>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	3315      	adds	r3, #21
 8001e74:	79ba      	ldrb	r2, [r7, #6]
 8001e76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e78:	79fa      	ldrb	r2, [r7, #7]
 8001e7a:	4918      	ldr	r1, [pc, #96]	@ (8001edc <LinkTimerBefore+0xbc>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	3314      	adds	r3, #20
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e8c:	79ba      	ldrb	r2, [r7, #6]
 8001e8e:	4913      	ldr	r1, [pc, #76]	@ (8001edc <LinkTimerBefore+0xbc>)
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	440b      	add	r3, r1
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ea0:	e014      	b.n	8001ecc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	490d      	ldr	r1, [pc, #52]	@ (8001edc <LinkTimerBefore+0xbc>)
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3315      	adds	r3, #21
 8001eb2:	79ba      	ldrb	r2, [r7, #6]
 8001eb4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001eb6:	79ba      	ldrb	r2, [r7, #6]
 8001eb8:	4908      	ldr	r1, [pc, #32]	@ (8001edc <LinkTimerBefore+0xbc>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3314      	adds	r3, #20
 8001ec6:	79fa      	ldrb	r2, [r7, #7]
 8001ec8:	701a      	strb	r2, [r3, #0]
  return;
 8001eca:	bf00      	nop
}
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200004f4 	.word	0x200004f4
 8001edc:	20000464 	.word	0x20000464

08001ee0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001eea:	4b4e      	ldr	r3, [pc, #312]	@ (8002024 <linkTimer+0x144>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d118      	bne.n	8001f26 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8002024 <linkTimer+0x144>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b4b      	ldr	r3, [pc, #300]	@ (8002028 <linkTimer+0x148>)
 8001efc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001efe:	4a49      	ldr	r2, [pc, #292]	@ (8002024 <linkTimer+0x144>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001f04:	79fa      	ldrb	r2, [r7, #7]
 8001f06:	4949      	ldr	r1, [pc, #292]	@ (800202c <linkTimer+0x14c>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	3315      	adds	r3, #21
 8001f14:	2206      	movs	r2, #6
 8001f16:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f18:	4b45      	ldr	r3, [pc, #276]	@ (8002030 <linkTimer+0x150>)
 8001f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	81fb      	strh	r3, [r7, #14]
 8001f24:	e078      	b.n	8002018 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001f26:	f000 f909 	bl	800213c <ReturnTimeElapsed>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001f2e:	79fa      	ldrb	r2, [r7, #7]
 8001f30:	493e      	ldr	r1, [pc, #248]	@ (800202c <linkTimer+0x14c>)
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3308      	adds	r3, #8
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	89fb      	ldrh	r3, [r7, #14]
 8001f42:	79fa      	ldrb	r2, [r7, #7]
 8001f44:	4419      	add	r1, r3
 8001f46:	4839      	ldr	r0, [pc, #228]	@ (800202c <linkTimer+0x14c>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4403      	add	r3, r0
 8001f52:	3308      	adds	r3, #8
 8001f54:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	4934      	ldr	r1, [pc, #208]	@ (800202c <linkTimer+0x14c>)
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	3308      	adds	r3, #8
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <linkTimer+0x144>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	4619      	mov	r1, r3
 8001f72:	4a2e      	ldr	r2, [pc, #184]	@ (800202c <linkTimer+0x14c>)
 8001f74:	460b      	mov	r3, r1
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	440b      	add	r3, r1
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3308      	adds	r3, #8
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d337      	bcc.n	8001ff8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001f88:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <linkTimer+0x144>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f8e:	7b7a      	ldrb	r2, [r7, #13]
 8001f90:	4926      	ldr	r1, [pc, #152]	@ (800202c <linkTimer+0x14c>)
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3315      	adds	r3, #21
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001fa2:	e013      	b.n	8001fcc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001fa4:	7b7a      	ldrb	r2, [r7, #13]
 8001fa6:	4921      	ldr	r1, [pc, #132]	@ (800202c <linkTimer+0x14c>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3315      	adds	r3, #21
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001fb8:	7b7a      	ldrb	r2, [r7, #13]
 8001fba:	491c      	ldr	r1, [pc, #112]	@ (800202c <linkTimer+0x14c>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3315      	adds	r3, #21
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001fcc:	7b3b      	ldrb	r3, [r7, #12]
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d00b      	beq.n	8001fea <linkTimer+0x10a>
 8001fd2:	7b3a      	ldrb	r2, [r7, #12]
 8001fd4:	4915      	ldr	r1, [pc, #84]	@ (800202c <linkTimer+0x14c>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	3308      	adds	r3, #8
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d2dc      	bcs.n	8001fa4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001fea:	7b7a      	ldrb	r2, [r7, #13]
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fecf 	bl	8001d94 <LinkTimerAfter>
 8001ff6:	e00f      	b.n	8002018 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <linkTimer+0x144>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff0c 	bl	8001e20 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <linkTimer+0x144>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <linkTimer+0x148>)
 8002010:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002012:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <linkTimer+0x144>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002018:	89fb      	ldrh	r3, [r7, #14]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200004f4 	.word	0x200004f4
 8002028:	200004f5 	.word	0x200004f5
 800202c:	20000464 	.word	0x20000464
 8002030:	200004f8 	.word	0x200004f8

08002034 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	460a      	mov	r2, r1
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	4613      	mov	r3, r2
 8002042:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002044:	4b39      	ldr	r3, [pc, #228]	@ (800212c <UnlinkTimer+0xf8>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	79fa      	ldrb	r2, [r7, #7]
 800204c:	429a      	cmp	r2, r3
 800204e:	d111      	bne.n	8002074 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002050:	4b36      	ldr	r3, [pc, #216]	@ (800212c <UnlinkTimer+0xf8>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <UnlinkTimer+0xfc>)
 8002058:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800205a:	79fa      	ldrb	r2, [r7, #7]
 800205c:	4935      	ldr	r1, [pc, #212]	@ (8002134 <UnlinkTimer+0x100>)
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	3315      	adds	r3, #21
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b2f      	ldr	r3, [pc, #188]	@ (800212c <UnlinkTimer+0xf8>)
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e03e      	b.n	80020f2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002074:	79fa      	ldrb	r2, [r7, #7]
 8002076:	492f      	ldr	r1, [pc, #188]	@ (8002134 <UnlinkTimer+0x100>)
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	3314      	adds	r3, #20
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002088:	79fa      	ldrb	r2, [r7, #7]
 800208a:	492a      	ldr	r1, [pc, #168]	@ (8002134 <UnlinkTimer+0x100>)
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	3315      	adds	r3, #21
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800209c:	79f9      	ldrb	r1, [r7, #7]
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	4824      	ldr	r0, [pc, #144]	@ (8002134 <UnlinkTimer+0x100>)
 80020a2:	460b      	mov	r3, r1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4403      	add	r3, r0
 80020ac:	3315      	adds	r3, #21
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b2d8      	uxtb	r0, r3
 80020b2:	4920      	ldr	r1, [pc, #128]	@ (8002134 <UnlinkTimer+0x100>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	3315      	adds	r3, #21
 80020c0:	4602      	mov	r2, r0
 80020c2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020c4:	7bbb      	ldrb	r3, [r7, #14]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d013      	beq.n	80020f2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80020ca:	79f9      	ldrb	r1, [r7, #7]
 80020cc:	7bba      	ldrb	r2, [r7, #14]
 80020ce:	4819      	ldr	r0, [pc, #100]	@ (8002134 <UnlinkTimer+0x100>)
 80020d0:	460b      	mov	r3, r1
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	440b      	add	r3, r1
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4403      	add	r3, r0
 80020da:	3314      	adds	r3, #20
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2d8      	uxtb	r0, r3
 80020e0:	4914      	ldr	r1, [pc, #80]	@ (8002134 <UnlinkTimer+0x100>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	3314      	adds	r3, #20
 80020ee:	4602      	mov	r2, r0
 80020f0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80020f2:	79fa      	ldrb	r2, [r7, #7]
 80020f4:	490f      	ldr	r1, [pc, #60]	@ (8002134 <UnlinkTimer+0x100>)
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	330c      	adds	r3, #12
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <UnlinkTimer+0xf8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b06      	cmp	r3, #6
 800210e:	d107      	bne.n	8002120 <UnlinkTimer+0xec>
 8002110:	79bb      	ldrb	r3, [r7, #6]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d104      	bne.n	8002120 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002116:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <UnlinkTimer+0x104>)
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	601a      	str	r2, [r3, #0]
  }

  return;
 800211e:	bf00      	nop
 8002120:	bf00      	nop
}
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	200004f4 	.word	0x200004f4
 8002130:	200004f5 	.word	0x200004f5
 8002134:	20000464 	.word	0x20000464
 8002138:	200004f8 	.word	0x200004f8

0800213c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <ReturnTimeElapsed+0x70>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214a:	d026      	beq.n	800219a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800214c:	f7ff fe02 	bl	8001d54 <ReadRtcSsrValue>
 8002150:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <ReturnTimeElapsed+0x70>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	d805      	bhi.n	8002168 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800215c:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <ReturnTimeElapsed+0x70>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	e00a      	b.n	800217e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002168:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <ReturnTimeElapsed+0x74>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002174:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <ReturnTimeElapsed+0x70>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	4413      	add	r3, r2
 800217c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <ReturnTimeElapsed+0x78>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800218c:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <ReturnTimeElapsed+0x7c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	40d3      	lsrs	r3, r2
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	e001      	b.n	800219e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	b29b      	uxth	r3, r3
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200004f8 	.word	0x200004f8
 80021b0:	20000500 	.word	0x20000500
 80021b4:	200004fe 	.word	0x200004fe
 80021b8:	200004fd 	.word	0x200004fd

080021bc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d108      	bne.n	80021de <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021cc:	f7ff fdc2 	bl	8001d54 <ReadRtcSsrValue>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a21      	ldr	r2, [pc, #132]	@ (8002258 <RestartWakeupCounter+0x9c>)
 80021d4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021d6:	2003      	movs	r0, #3
 80021d8:	f007 fa91 	bl	80096fe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80021dc:	e039      	b.n	8002252 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d803      	bhi.n	80021ec <RestartWakeupCounter+0x30>
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <RestartWakeupCounter+0xa0>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d002      	beq.n	80021f2 <RestartWakeupCounter+0x36>
      Value -= 1;
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80021f2:	bf00      	nop
 80021f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <RestartWakeupCounter+0xa4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f8      	beq.n	80021f4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002202:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <RestartWakeupCounter+0xa4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <RestartWakeupCounter+0xa4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002212:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002214:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <RestartWakeupCounter+0xa8>)
 8002216:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800221a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800221c:	2003      	movs	r0, #3
 800221e:	f007 fa7c 	bl	800971a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <RestartWakeupCounter+0xac>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	0c1b      	lsrs	r3, r3, #16
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	88fa      	ldrh	r2, [r7, #6]
 800222c:	490e      	ldr	r1, [pc, #56]	@ (8002268 <RestartWakeupCounter+0xac>)
 800222e:	4313      	orrs	r3, r2
 8002230:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002232:	f7ff fd8f 	bl	8001d54 <ReadRtcSsrValue>
 8002236:	4603      	mov	r3, r0
 8002238:	4a07      	ldr	r2, [pc, #28]	@ (8002258 <RestartWakeupCounter+0x9c>)
 800223a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800223c:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <RestartWakeupCounter+0xa4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <RestartWakeupCounter+0xa4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800224a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800224c:	f3af 8000 	nop.w
  return ;
 8002250:	bf00      	nop
}
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200004f8 	.word	0x200004f8
 800225c:	200004fd 	.word	0x200004fd
 8002260:	20000d00 	.word	0x20000d00
 8002264:	58000800 	.word	0x58000800
 8002268:	40002800 	.word	0x40002800

0800226c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002272:	4b45      	ldr	r3, [pc, #276]	@ (8002388 <RescheduleTimerList+0x11c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227e:	d107      	bne.n	8002290 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002280:	bf00      	nop
 8002282:	4b42      	ldr	r3, [pc, #264]	@ (800238c <RescheduleTimerList+0x120>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f8      	bne.n	8002282 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002290:	4b3e      	ldr	r3, [pc, #248]	@ (800238c <RescheduleTimerList+0x120>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b3d      	ldr	r3, [pc, #244]	@ (800238c <RescheduleTimerList+0x120>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800229e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80022a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002390 <RescheduleTimerList+0x124>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	493a      	ldr	r1, [pc, #232]	@ (8002394 <RescheduleTimerList+0x128>)
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	440b      	add	r3, r1
 80022b4:	3308      	adds	r3, #8
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80022ba:	f7ff ff3f 	bl	800213c <ReturnTimeElapsed>
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d205      	bcs.n	80022d6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022ce:	4b32      	ldr	r3, [pc, #200]	@ (8002398 <RescheduleTimerList+0x12c>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e04d      	b.n	8002372 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	4a30      	ldr	r2, [pc, #192]	@ (800239c <RescheduleTimerList+0x130>)
 80022da:	8812      	ldrh	r2, [r2, #0]
 80022dc:	b292      	uxth	r2, r2
 80022de:	4413      	add	r3, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d906      	bls.n	80022f6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80022e8:	4b2c      	ldr	r3, [pc, #176]	@ (800239c <RescheduleTimerList+0x130>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80022ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <RescheduleTimerList+0x12c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
 80022f4:	e03d      	b.n	8002372 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <RescheduleTimerList+0x12c>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002306:	e034      	b.n	8002372 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	4922      	ldr	r1, [pc, #136]	@ (8002394 <RescheduleTimerList+0x128>)
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	3308      	adds	r3, #8
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	429a      	cmp	r2, r3
 800231e:	d20a      	bcs.n	8002336 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	491c      	ldr	r1, [pc, #112]	@ (8002394 <RescheduleTimerList+0x128>)
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	3308      	adds	r3, #8
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e013      	b.n	800235e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	4916      	ldr	r1, [pc, #88]	@ (8002394 <RescheduleTimerList+0x128>)
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	3308      	adds	r3, #8
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	1ac9      	subs	r1, r1, r3
 800234e:	4811      	ldr	r0, [pc, #68]	@ (8002394 <RescheduleTimerList+0x128>)
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4403      	add	r3, r0
 800235a:	3308      	adds	r3, #8
 800235c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	490c      	ldr	r1, [pc, #48]	@ (8002394 <RescheduleTimerList+0x128>)
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	3315      	adds	r3, #21
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b06      	cmp	r3, #6
 8002376:	d1c7      	bne.n	8002308 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002378:	89bb      	ldrh	r3, [r7, #12]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff1e 	bl	80021bc <RestartWakeupCounter>

  return ;
 8002380:	bf00      	nop
}
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40002800 	.word	0x40002800
 800238c:	20000d00 	.word	0x20000d00
 8002390:	200004f4 	.word	0x200004f4
 8002394:	20000464 	.word	0x20000464
 8002398:	200004fc 	.word	0x200004fc
 800239c:	20000502 	.word	0x20000502

080023a0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a6:	f3ef 8310 	mrs	r3, PRIMASK
 80023aa:	617b      	str	r3, [r7, #20]
  return(result);
 80023ac:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023b4:	4b59      	ldr	r3, [pc, #356]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22ca      	movs	r2, #202	@ 0xca
 80023ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80023bc:	4b57      	ldr	r3, [pc, #348]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2253      	movs	r2, #83	@ 0x53
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80023c4:	4b55      	ldr	r3, [pc, #340]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	4b54      	ldr	r3, [pc, #336]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80023d4:	4b52      	ldr	r3, [pc, #328]	@ (8002520 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80023dc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023e0:	4950      	ldr	r1, [pc, #320]	@ (8002524 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	330c      	adds	r3, #12
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d16e      	bne.n	80024d4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80023f6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023fa:	494a      	ldr	r1, [pc, #296]	@ (8002524 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800240a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800240e:	4945      	ldr	r1, [pc, #276]	@ (8002524 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	3310      	adds	r3, #16
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002420:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d04c      	beq.n	80024c4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800242a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800242e:	493d      	ldr	r1, [pc, #244]	@ (8002524 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	330d      	adds	r3, #13
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d124      	bne.n	800248e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002444:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002448:	2101      	movs	r1, #1
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fdf2 	bl	8002034 <UnlinkTimer>
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f383 8810 	msr	PRIMASK, r3
}
 800245a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800245c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002460:	4930      	ldr	r1, [pc, #192]	@ (8002524 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	3304      	adds	r3, #4
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f9b8 	bl	80027ec <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800247c:	4b27      	ldr	r3, [pc, #156]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	22ca      	movs	r2, #202	@ 0xca
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
 8002484:	4b25      	ldr	r3, [pc, #148]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2253      	movs	r2, #83	@ 0x53
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24
 800248c:	e012      	b.n	80024b4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f383 8810 	msr	PRIMASK, r3
}
 8002498:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800249a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f920 	bl	80026e4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	22ca      	movs	r2, #202	@ 0xca
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2253      	movs	r2, #83	@ 0x53
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80024b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	4619      	mov	r1, r3
 80024bc:	69b8      	ldr	r0, [r7, #24]
 80024be:	f000 fa1b 	bl	80028f8 <HW_TS_RTC_Int_AppNot>
 80024c2:	e022      	b.n	800250a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80024c4:	f7ff fed2 	bl	800226c <RescheduleTimerList>
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f383 8810 	msr	PRIMASK, r3
}
 80024d2:	e01a      	b.n	800250a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024d4:	bf00      	nop
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f8      	beq.n	80024d6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024e4:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80024f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80024f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f383 8810 	msr	PRIMASK, r3
}
 8002508:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800250a:	4b04      	ldr	r3, [pc, #16]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	22ff      	movs	r2, #255	@ 0xff
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002512:	bf00      	nop
}
 8002514:	3728      	adds	r7, #40	@ 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000d00 	.word	0x20000d00
 8002520:	200004f4 	.word	0x200004f4
 8002524:	20000464 	.word	0x20000464
 8002528:	200004fc 	.word	0x200004fc
 800252c:	58000800 	.word	0x58000800

08002530 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800253c:	4b5e      	ldr	r3, [pc, #376]	@ (80026b8 <HW_TS_Init+0x188>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	22ca      	movs	r2, #202	@ 0xca
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24
 8002544:	4b5c      	ldr	r3, [pc, #368]	@ (80026b8 <HW_TS_Init+0x188>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2253      	movs	r2, #83	@ 0x53
 800254a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800254c:	4b5b      	ldr	r3, [pc, #364]	@ (80026bc <HW_TS_Init+0x18c>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a5a      	ldr	r2, [pc, #360]	@ (80026bc <HW_TS_Init+0x18c>)
 8002552:	f043 0320 	orr.w	r3, r3, #32
 8002556:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002558:	4b58      	ldr	r3, [pc, #352]	@ (80026bc <HW_TS_Init+0x18c>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f1c3 0304 	rsb	r3, r3, #4
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b55      	ldr	r3, [pc, #340]	@ (80026c0 <HW_TS_Init+0x190>)
 800256c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800256e:	4b53      	ldr	r3, [pc, #332]	@ (80026bc <HW_TS_Init+0x18c>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002576:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800257a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	fa92 f2a2 	rbit	r2, r2
 8002582:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	2a00      	cmp	r2, #0
 800258c:	d101      	bne.n	8002592 <HW_TS_Init+0x62>
  {
    return 32U;
 800258e:	2220      	movs	r2, #32
 8002590:	e003      	b.n	800259a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	fab2 f282 	clz	r2, r2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	40d3      	lsrs	r3, r2
 800259c:	b2db      	uxtb	r3, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4b48      	ldr	r3, [pc, #288]	@ (80026c4 <HW_TS_Init+0x194>)
 80025a4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80025a6:	4b45      	ldr	r3, [pc, #276]	@ (80026bc <HW_TS_Init+0x18c>)
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b44      	ldr	r3, [pc, #272]	@ (80026c8 <HW_TS_Init+0x198>)
 80025b8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80025ba:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <HW_TS_Init+0x198>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	4a40      	ldr	r2, [pc, #256]	@ (80026c4 <HW_TS_Init+0x194>)
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025cc:	4a3c      	ldr	r2, [pc, #240]	@ (80026c0 <HW_TS_Init+0x190>)
 80025ce:	7812      	ldrb	r2, [r2, #0]
 80025d0:	40d3      	lsrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80025da:	4293      	cmp	r3, r2
 80025dc:	d904      	bls.n	80025e8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80025de:	4b3b      	ldr	r3, [pc, #236]	@ (80026cc <HW_TS_Init+0x19c>)
 80025e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	e003      	b.n	80025f0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b37      	ldr	r3, [pc, #220]	@ (80026cc <HW_TS_Init+0x19c>)
 80025ee:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025f0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025f4:	f7ff fb9c 	bl	8001d30 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025f8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025fc:	f7ff fb84 	bl	8001d08 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d13d      	bne.n	8002682 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002606:	4b32      	ldr	r3, [pc, #200]	@ (80026d0 <HW_TS_Init+0x1a0>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800260c:	4b31      	ldr	r3, [pc, #196]	@ (80026d4 <HW_TS_Init+0x1a4>)
 800260e:	f04f 32ff 	mov.w	r2, #4294967295
 8002612:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002614:	2300      	movs	r3, #0
 8002616:	77fb      	strb	r3, [r7, #31]
 8002618:	e00c      	b.n	8002634 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800261a:	7ffa      	ldrb	r2, [r7, #31]
 800261c:	492e      	ldr	r1, [pc, #184]	@ (80026d8 <HW_TS_Init+0x1a8>)
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	330c      	adds	r3, #12
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	3301      	adds	r3, #1
 8002632:	77fb      	strb	r3, [r7, #31]
 8002634:	7ffb      	ldrb	r3, [r7, #31]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d9ef      	bls.n	800261a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800263a:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <HW_TS_Init+0x1ac>)
 800263c:	2206      	movs	r2, #6
 800263e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002640:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HW_TS_Init+0x188>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	4b1c      	ldr	r3, [pc, #112]	@ (80026b8 <HW_TS_Init+0x188>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800264e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002650:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HW_TS_Init+0x188>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b17      	ldr	r3, [pc, #92]	@ (80026b8 <HW_TS_Init+0x188>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002660:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002662:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HW_TS_Init+0x1b0>)
 8002664:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002668:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800266a:	2003      	movs	r0, #3
 800266c:	f007 f855 	bl	800971a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <HW_TS_Init+0x188>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <HW_TS_Init+0x188>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	e009      	b.n	8002696 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002682:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <HW_TS_Init+0x188>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002690:	2003      	movs	r0, #3
 8002692:	f007 f834 	bl	80096fe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HW_TS_Init+0x188>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	22ff      	movs	r2, #255	@ 0xff
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800269e:	2200      	movs	r2, #0
 80026a0:	2103      	movs	r1, #3
 80026a2:	2003      	movs	r0, #3
 80026a4:	f006 ffe9 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80026a8:	2003      	movs	r0, #3
 80026aa:	f007 f800 	bl	80096ae <HAL_NVIC_EnableIRQ>

  return;
 80026ae:	bf00      	nop
}
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000d00 	.word	0x20000d00
 80026bc:	40002800 	.word	0x40002800
 80026c0:	200004fd 	.word	0x200004fd
 80026c4:	200004fe 	.word	0x200004fe
 80026c8:	20000500 	.word	0x20000500
 80026cc:	20000502 	.word	0x20000502
 80026d0:	200004fc 	.word	0x200004fc
 80026d4:	200004f8 	.word	0x200004f8
 80026d8:	20000464 	.word	0x20000464
 80026dc:	200004f4 	.word	0x200004f4
 80026e0:	58000800 	.word	0x58000800

080026e4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ee:	f3ef 8310 	mrs	r3, PRIMASK
 80026f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80026f4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80026f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80026f8:	b672      	cpsid	i
}
 80026fa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80026fc:	2003      	movs	r0, #3
 80026fe:	f006 ffe4 	bl	80096ca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002702:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <HW_TS_Stop+0xf0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	22ca      	movs	r2, #202	@ 0xca
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24
 800270a:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <HW_TS_Stop+0xf0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2253      	movs	r2, #83	@ 0x53
 8002710:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002712:	79fa      	ldrb	r2, [r7, #7]
 8002714:	4930      	ldr	r1, [pc, #192]	@ (80027d8 <HW_TS_Stop+0xf4>)
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	330c      	adds	r3, #12
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d142      	bne.n	80027b0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fc80 	bl	8002034 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002734:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <HW_TS_Stop+0xf8>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b06      	cmp	r3, #6
 800273e:	d12f      	bne.n	80027a0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002740:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <HW_TS_Stop+0xfc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800274c:	d107      	bne.n	800275e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800274e:	bf00      	nop
 8002750:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <HW_TS_Stop+0xf0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f8      	bne.n	8002750 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800275e:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <HW_TS_Stop+0xf0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HW_TS_Stop+0xf0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800276c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800276e:	bf00      	nop
 8002770:	4b18      	ldr	r3, [pc, #96]	@ (80027d4 <HW_TS_Stop+0xf0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f8      	beq.n	8002770 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <HW_TS_Stop+0xf0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <HW_TS_Stop+0xf0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800278e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002790:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <HW_TS_Stop+0x100>)
 8002792:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002796:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002798:	2003      	movs	r0, #3
 800279a:	f006 ffbe 	bl	800971a <HAL_NVIC_ClearPendingIRQ>
 800279e:	e007      	b.n	80027b0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80027a0:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HW_TS_Stop+0x104>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	7cfa      	ldrb	r2, [r7, #19]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80027ac:	f7ff fd5e 	bl	800226c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HW_TS_Stop+0xf0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	22ff      	movs	r2, #255	@ 0xff
 80027b6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80027b8:	2003      	movs	r0, #3
 80027ba:	f006 ff78 	bl	80096ae <HAL_NVIC_EnableIRQ>
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f383 8810 	msr	PRIMASK, r3
}
 80027c8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80027ca:	bf00      	nop
}
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000d00 	.word	0x20000d00
 80027d8:	20000464 	.word	0x20000464
 80027dc:	200004f4 	.word	0x200004f4
 80027e0:	40002800 	.word	0x40002800
 80027e4:	58000800 	.word	0x58000800
 80027e8:	200004f5 	.word	0x200004f5

080027ec <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80027f8:	79fa      	ldrb	r2, [r7, #7]
 80027fa:	493b      	ldr	r1, [pc, #236]	@ (80028e8 <HW_TS_Start+0xfc>)
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	330c      	adds	r3, #12
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d103      	bne.n	8002818 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff66 	bl	80026e4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002818:	f3ef 8310 	mrs	r3, PRIMASK
 800281c:	60fb      	str	r3, [r7, #12]
  return(result);
 800281e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002822:	b672      	cpsid	i
}
 8002824:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002826:	2003      	movs	r0, #3
 8002828:	f006 ff4f 	bl	80096ca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800282c:	4b2f      	ldr	r3, [pc, #188]	@ (80028ec <HW_TS_Start+0x100>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	22ca      	movs	r2, #202	@ 0xca
 8002832:	625a      	str	r2, [r3, #36]	@ 0x24
 8002834:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <HW_TS_Start+0x100>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2253      	movs	r2, #83	@ 0x53
 800283a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800283c:	79fa      	ldrb	r2, [r7, #7]
 800283e:	492a      	ldr	r1, [pc, #168]	@ (80028e8 <HW_TS_Start+0xfc>)
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	330c      	adds	r3, #12
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002850:	79fa      	ldrb	r2, [r7, #7]
 8002852:	4925      	ldr	r1, [pc, #148]	@ (80028e8 <HW_TS_Start+0xfc>)
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	3308      	adds	r3, #8
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002864:	79fa      	ldrb	r2, [r7, #7]
 8002866:	4920      	ldr	r1, [pc, #128]	@ (80028e8 <HW_TS_Start+0xfc>)
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	3304      	adds	r3, #4
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fb30 	bl	8001ee0 <linkTimer>
 8002880:	4603      	mov	r3, r0
 8002882:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002884:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <HW_TS_Start+0x104>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800288a:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <HW_TS_Start+0x108>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	7c7a      	ldrb	r2, [r7, #17]
 8002892:	429a      	cmp	r2, r3
 8002894:	d002      	beq.n	800289c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002896:	f7ff fce9 	bl	800226c <RescheduleTimerList>
 800289a:	e013      	b.n	80028c4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800289c:	79fa      	ldrb	r2, [r7, #7]
 800289e:	4912      	ldr	r1, [pc, #72]	@ (80028e8 <HW_TS_Start+0xfc>)
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	3308      	adds	r3, #8
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	8a7b      	ldrh	r3, [r7, #18]
 80028b0:	79fa      	ldrb	r2, [r7, #7]
 80028b2:	1ac9      	subs	r1, r1, r3
 80028b4:	480c      	ldr	r0, [pc, #48]	@ (80028e8 <HW_TS_Start+0xfc>)
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4403      	add	r3, r0
 80028c0:	3308      	adds	r3, #8
 80028c2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <HW_TS_Start+0x100>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	22ff      	movs	r2, #255	@ 0xff
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80028cc:	2003      	movs	r0, #3
 80028ce:	f006 feee 	bl	80096ae <HAL_NVIC_EnableIRQ>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f383 8810 	msr	PRIMASK, r3
}
 80028dc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80028de:	bf00      	nop
}
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000464 	.word	0x20000464
 80028ec:	20000d00 	.word	0x20000d00
 80028f0:	200004f4 	.word	0x200004f4
 80028f4:	200004f5 	.word	0x200004f5

080028f8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	460b      	mov	r3, r1
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4798      	blx	r3

  return;
 800290a:	bf00      	nop
}
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <LL_AHB2_GRP1_EnableClock>:
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002920:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4313      	orrs	r3, r2
 8002928:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4013      	ands	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002936:	68fb      	ldr	r3, [r7, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002950:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002952:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4313      	orrs	r3, r2
 800295a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002960:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002968:	68fb      	ldr	r3, [r7, #12]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002982:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	43db      	mvns	r3, r3
 8002988:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800298c:	4013      	ands	r3, r2
 800298e:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a14 <MX_I2C1_Init+0x78>)
 80029a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80029a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a18 <MX_I2C1_Init+0x7c>)
 80029aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029ac:	4b18      	ldr	r3, [pc, #96]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029b2:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b8:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029be:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029c4:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ca:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029d6:	480e      	ldr	r0, [pc, #56]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029d8:	f007 fd3c 	bl	800a454 <HAL_I2C_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029e2:	f000 fb3b 	bl	800305c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029e6:	2100      	movs	r1, #0
 80029e8:	4809      	ldr	r0, [pc, #36]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029ea:	f008 faed 	bl	800afc8 <HAL_I2CEx_ConfigAnalogFilter>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029f4:	f000 fb32 	bl	800305c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029f8:	2100      	movs	r1, #0
 80029fa:	4805      	ldr	r0, [pc, #20]	@ (8002a10 <MX_I2C1_Init+0x74>)
 80029fc:	f008 fb2f 	bl	800b05e <HAL_I2CEx_ConfigDigitalFilter>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a06:	f000 fb29 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000504 	.word	0x20000504
 8002a14:	40005400 	.word	0x40005400
 8002a18:	10707dbc 	.word	0x10707dbc

08002a1c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a22:	4a1e      	ldr	r2, [pc, #120]	@ (8002a9c <MX_I2C3_Init+0x80>)
 8002a24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300B29;
 8002a26:	4b1c      	ldr	r3, [pc, #112]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a28:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa0 <MX_I2C3_Init+0x84>)
 8002a2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a32:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a38:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a44:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a50:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002a56:	4810      	ldr	r0, [pc, #64]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a58:	f007 fcfc 	bl	800a454 <HAL_I2C_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002a62:	f000 fafb 	bl	800305c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a66:	2100      	movs	r1, #0
 8002a68:	480b      	ldr	r0, [pc, #44]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a6a:	f008 faad 	bl	800afc8 <HAL_I2CEx_ConfigAnalogFilter>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002a74:	f000 faf2 	bl	800305c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4807      	ldr	r0, [pc, #28]	@ (8002a98 <MX_I2C3_Init+0x7c>)
 8002a7c:	f008 faef 	bl	800b05e <HAL_I2CEx_ConfigDigitalFilter>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002a86:	f000 fae9 	bl	800305c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002a8a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002a8e:	f008 fb33 	bl	800b0f8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000558 	.word	0x20000558
 8002a9c:	40005c00 	.word	0x40005c00
 8002aa0:	00300b29 	.word	0x00300b29

08002aa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b09c      	sub	sp, #112	@ 0x70
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	2250      	movs	r2, #80	@ 0x50
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f019 ff14 	bl	801c8f2 <memset>
  if(i2cHandle->Instance==I2C1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a37      	ldr	r2, [pc, #220]	@ (8002bac <HAL_I2C_MspInit+0x108>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d127      	bne.n	8002b24 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ad8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f00b fbf7 	bl	800e2d6 <HAL_RCCEx_PeriphCLKConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002aee:	f000 fab5 	bl	800305c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	2002      	movs	r0, #2
 8002af4:	f7ff ff0d 	bl	8002912 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002af8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afe:	2312      	movs	r3, #18
 8002b00:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b12:	4619      	mov	r1, r3
 8002b14:	4826      	ldr	r0, [pc, #152]	@ (8002bb0 <HAL_I2C_MspInit+0x10c>)
 8002b16:	f007 f9e3 	bl	8009ee0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b1a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002b1e:	f7ff ff11 	bl	8002944 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002b22:	e03e      	b.n	8002ba2 <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a22      	ldr	r2, [pc, #136]	@ (8002bb4 <HAL_I2C_MspInit+0x110>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d139      	bne.n	8002ba2 <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002b2e:	2308      	movs	r3, #8
 8002b30:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002b32:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002b36:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f00b fbca 	bl	800e2d6 <HAL_RCCEx_PeriphCLKConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002b48:	f000 fa88 	bl	800305c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f7ff fee0 	bl	8002912 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	2002      	movs	r0, #2
 8002b54:	f7ff fedd 	bl	8002912 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b58:	2380      	movs	r3, #128	@ 0x80
 8002b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b5c:	2312      	movs	r3, #18
 8002b5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b68:	2304      	movs	r3, #4
 8002b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b70:	4619      	mov	r1, r3
 8002b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b76:	f007 f9b3 	bl	8009ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b7a:	2310      	movs	r3, #16
 8002b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7e:	2312      	movs	r3, #18
 8002b80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b92:	4619      	mov	r1, r3
 8002b94:	4806      	ldr	r0, [pc, #24]	@ (8002bb0 <HAL_I2C_MspInit+0x10c>)
 8002b96:	f007 f9a3 	bl	8009ee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b9a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002b9e:	f7ff fed1 	bl	8002944 <LL_APB1_GRP1_EnableClock>
}
 8002ba2:	bf00      	nop
 8002ba4:	3770      	adds	r7, #112	@ 0x70
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40005400 	.word	0x40005400
 8002bb0:	48000400 	.word	0x48000400
 8002bb4:	40005c00 	.word	0x40005c00

08002bb8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a13      	ldr	r2, [pc, #76]	@ (8002c14 <HAL_I2C_MspDeInit+0x5c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10e      	bne.n	8002be8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002bca:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002bce:	f7ff fed2 	bl	8002976 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002bd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bd6:	4810      	ldr	r0, [pc, #64]	@ (8002c18 <HAL_I2C_MspDeInit+0x60>)
 8002bd8:	f007 faf2 	bl	800a1c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002bdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002be0:	480d      	ldr	r0, [pc, #52]	@ (8002c18 <HAL_I2C_MspDeInit+0x60>)
 8002be2:	f007 faed 	bl	800a1c0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002be6:	e011      	b.n	8002c0c <HAL_I2C_MspDeInit+0x54>
  else if(i2cHandle->Instance==I2C3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0b      	ldr	r2, [pc, #44]	@ (8002c1c <HAL_I2C_MspDeInit+0x64>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10c      	bne.n	8002c0c <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002bf2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002bf6:	f7ff febe 	bl	8002976 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 8002bfa:	2180      	movs	r1, #128	@ 0x80
 8002bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c00:	f007 fade 	bl	800a1c0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8002c04:	2110      	movs	r1, #16
 8002c06:	4804      	ldr	r0, [pc, #16]	@ (8002c18 <HAL_I2C_MspDeInit+0x60>)
 8002c08:	f007 fada 	bl	800a1c0 <HAL_GPIO_DeInit>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40005400 	.word	0x40005400
 8002c18:	48000400 	.word	0x48000400
 8002c1c:	40005c00 	.word	0x40005c00

08002c20 <LL_AHB3_GRP1_EnableClock>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c44:	68fb      	ldr	r3, [r7, #12]
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <MX_IPCC_Init+0x20>)
 8002c5a:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <MX_IPCC_Init+0x24>)
 8002c5c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002c5e:	4805      	ldr	r0, [pc, #20]	@ (8002c74 <MX_IPCC_Init+0x20>)
 8002c60:	f008 fa5c 	bl	800b11c <HAL_IPCC_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002c6a:	f000 f9f7 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200005ac 	.word	0x200005ac
 8002c78:	58000c00 	.word	0x58000c00

08002c7c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc0 <HAL_IPCC_MspInit+0x44>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d113      	bne.n	8002cb6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002c8e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002c92:	f7ff ffc5 	bl	8002c20 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	202c      	movs	r0, #44	@ 0x2c
 8002c9c:	f006 fced 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002ca0:	202c      	movs	r0, #44	@ 0x2c
 8002ca2:	f006 fd04 	bl	80096ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	202d      	movs	r0, #45	@ 0x2d
 8002cac:	f006 fce5 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002cb0:	202d      	movs	r0, #45	@ 0x2d
 8002cb2:	f006 fcfc 	bl	80096ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	58000c00 	.word	0x58000c00

08002cc4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cd4:	d12f      	bne.n	8002d36 <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002cd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002cda:	4833      	ldr	r0, [pc, #204]	@ (8002da8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002cdc:	f007 fb4e 	bl	800a37c <HAL_GPIO_ReadPin>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002ce6:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_GPIO_EXTI_Callback+0xe8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8002cec:	f005 fae6 	bl	80082bc <HAL_GetTick>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8002db0 <HAL_GPIO_EXTI_Callback+0xec>)
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e010      	b.n	8002d1c <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 8002cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8002db4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	4a2c      	ldr	r2, [pc, #176]	@ (8002db4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002d02:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002d04:	f005 fada 	bl	80082bc <HAL_GetTick>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a29      	ldr	r2, [pc, #164]	@ (8002db0 <HAL_GPIO_EXTI_Callback+0xec>)
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b26      	ldr	r3, [pc, #152]	@ (8002dac <HAL_GPIO_EXTI_Callback+0xe8>)
 8002d14:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002d16:	4b26      	ldr	r3, [pc, #152]	@ (8002db0 <HAL_GPIO_EXTI_Callback+0xec>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8002d1c:	4b23      	ldr	r3, [pc, #140]	@ (8002dac <HAL_GPIO_EXTI_Callback+0xe8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002d24:	db07      	blt.n	8002d36 <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8002d26:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	4a22      	ldr	r2, [pc, #136]	@ (8002db8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002d2e:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8002d30:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d3c:	d12f      	bne.n	8002d9e <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 8002d3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d42:	4819      	ldr	r0, [pc, #100]	@ (8002da8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002d44:	f007 fb1a 	bl	800a37c <HAL_GPIO_ReadPin>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8002d54:	f005 fab2 	bl	80082bc <HAL_GetTick>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b18      	ldr	r3, [pc, #96]	@ (8002dc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e010      	b.n	8002d84 <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 8002d62:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <HAL_GPIO_EXTI_Callback+0x100>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a16      	ldr	r2, [pc, #88]	@ (8002dc4 <HAL_GPIO_EXTI_Callback+0x100>)
 8002d6a:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8002d6c:	f005 faa6 	bl	80082bc <HAL_GetTick>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4a13      	ldr	r2, [pc, #76]	@ (8002dc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d7c:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8002d84:	4b0d      	ldr	r3, [pc, #52]	@ (8002dbc <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002d8c:	db07      	blt.n	8002d9e <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8002d96:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002d98:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_GPIO_EXTI_Callback+0x100>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	48000800 	.word	0x48000800
 8002dac:	20000cac 	.word	0x20000cac
 8002db0:	20000cb4 	.word	0x20000cb4
 8002db4:	20000878 	.word	0x20000878
 8002db8:	20000cc0 	.word	0x20000cc0
 8002dbc:	20000cb0 	.word	0x20000cb0
 8002dc0:	20000cb8 	.word	0x20000cb8
 8002dc4:	2000087c 	.word	0x2000087c
 8002dc8:	20000cbc 	.word	0x20000cbc

08002dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dd2:	f005 fa05 	bl	80081e0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002dd6:	f7fe fd47 	bl	8001868 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dda:	f000 f8a7 	bl	8002f2c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002dde:	f000 f909 	bl	8002ff4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002de2:	f7ff ff37 	bl	8002c54 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002de6:	f000 fdd3 	bl	8003990 <MX_RF_Init>
  MX_GPIO_Init();
 8002dea:	f7fe ff37 	bl	8001c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8002dee:	f7fe fef2 	bl	8001bd6 <MX_DMA_Init>
  MX_ADC1_Init();
 8002df2:	f7fe fabf 	bl	8001374 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002df6:	f7ff fdd1 	bl	800299c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002dfa:	f7ff fe0f 	bl	8002a1c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002dfe:	f004 ff75 	bl	8007cec <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002e02:	f004 fca3 	bl	800774c <MX_TIM2_Init>
  MX_TIM16_Init();
 8002e06:	f004 fcef 	bl	80077e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002e0a:	f004 fd15 	bl	8007838 <MX_TIM17_Init>
  MX_SPI1_Init();
 8002e0e:	f000 fec5 	bl	8003b9c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002e12:	f004 ffb7 	bl	8007d84 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002e16:	f016 fe47 	bl	8019aa8 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002e1a:	f000 fdeb 	bl	80039f4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Abort(&huart1);
 8002e1e:	4833      	ldr	r0, [pc, #204]	@ (8002eec <main+0x120>)
 8002e20:	f00d ff2a 	bl	8010c78 <HAL_UART_Abort>
    HAL_UART_DeInit(&huart1);
 8002e24:	4831      	ldr	r0, [pc, #196]	@ (8002eec <main+0x120>)
 8002e26:	f00d fe0d 	bl	8010a44 <HAL_UART_DeInit>

    HAL_I2C_DeInit(&hi2c1);
 8002e2a:	4831      	ldr	r0, [pc, #196]	@ (8002ef0 <main+0x124>)
 8002e2c:	f007 fbad 	bl	800a58a <HAL_I2C_DeInit>



  	ssd1306_Init();
 8002e30:	f001 f996 	bl	8004160 <ssd1306_Init>

  	HAL_Delay(10);
 8002e34:	200a      	movs	r0, #10
 8002e36:	f7fe fe52 	bl	8001ade <HAL_Delay>
  	ssd1306_Fill(Black);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f001 f9fa 	bl	8004234 <ssd1306_Fill>

  	ssd1306_DrawBitmap(32, 12, startimg, 64, 64, White);
 8002e40:	2301      	movs	r3, #1
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	2340      	movs	r3, #64	@ 0x40
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2340      	movs	r3, #64	@ 0x40
 8002e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef4 <main+0x128>)
 8002e4c:	210c      	movs	r1, #12
 8002e4e:	2020      	movs	r0, #32
 8002e50:	f001 fcc2 	bl	80047d8 <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002e54:	f001 fa06 	bl	8004264 <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002e58:	2203      	movs	r2, #3
 8002e5a:	4927      	ldr	r1, [pc, #156]	@ (8002ef8 <main+0x12c>)
 8002e5c:	4827      	ldr	r0, [pc, #156]	@ (8002efc <main+0x130>)
 8002e5e:	f005 fd65 	bl	800892c <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002e62:	4827      	ldr	r0, [pc, #156]	@ (8002f00 <main+0x134>)
 8002e64:	f00d f92e 	bl	80100c4 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002e68:	4826      	ldr	r0, [pc, #152]	@ (8002f04 <main+0x138>)
 8002e6a:	f00d f971 	bl	8010150 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim17);
 8002e6e:	4826      	ldr	r0, [pc, #152]	@ (8002f08 <main+0x13c>)
 8002e70:	f00d f96e 	bl	8010150 <HAL_TIM_Base_Start_IT>

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002e74:	2201      	movs	r2, #1
 8002e76:	2101      	movs	r1, #1
 8002e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e7c:	f007 fa96 	bl	800a3ac <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002e80:	2064      	movs	r0, #100	@ 0x64
 8002e82:	f7fe fe2c 	bl	8001ade <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002e86:	4821      	ldr	r0, [pc, #132]	@ (8002f0c <main+0x140>)
 8002e88:	f00d fef6 	bl	8010c78 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002e8c:	2240      	movs	r2, #64	@ 0x40
 8002e8e:	4920      	ldr	r1, [pc, #128]	@ (8002f10 <main+0x144>)
 8002e90:	481e      	ldr	r0, [pc, #120]	@ (8002f0c <main+0x140>)
 8002e92:	f00d fea5 	bl	8010be0 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8002e96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e9a:	2131      	movs	r1, #49	@ 0x31
 8002e9c:	481d      	ldr	r0, [pc, #116]	@ (8002f14 <main+0x148>)
 8002e9e:	f019 fd28 	bl	801c8f2 <memset>
  	memset(flashwrite,'\0',256);
 8002ea2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	481b      	ldr	r0, [pc, #108]	@ (8002f18 <main+0x14c>)
 8002eaa:	f019 fd22 	bl	801c8f2 <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002eae:	2232      	movs	r2, #50	@ 0x32
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	481a      	ldr	r0, [pc, #104]	@ (8002f1c <main+0x150>)
 8002eb4:	f019 fd1d 	bl	801c8f2 <memset>

  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	4a19      	ldr	r2, [pc, #100]	@ (8002f20 <main+0x154>)
 8002ebc:	4919      	ldr	r1, [pc, #100]	@ (8002f24 <main+0x158>)
 8002ebe:	481a      	ldr	r0, [pc, #104]	@ (8002f28 <main+0x15c>)
 8002ec0:	f015 fe63 	bl	8018b8a <SPIF_Init>



  	getindex();
 8002ec4:	f001 f818 	bl	8003ef8 <getindex>

  	ssd1306_Fill(Black);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f001 f9b3 	bl	8004234 <ssd1306_Fill>

  	HAL_Delay(700);
 8002ece:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002ed2:	f7fe fe04 	bl	8001ade <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002ed6:	f7fe fcd5 	bl	8001884 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002eda:	f7fe fe25 	bl	8001b28 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002ede:	f001 ff4f 	bl	8004d80 <statemachine>
	  ssd1306_UpdateScreen();
 8002ee2:	f001 f9bf 	bl	8004264 <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002ee6:	bf00      	nop
 8002ee8:	e7f7      	b.n	8002eda <main+0x10e>
 8002eea:	bf00      	nop
 8002eec:	20001444 	.word	0x20001444
 8002ef0:	20000504 	.word	0x20000504
 8002ef4:	080215b0 	.word	0x080215b0
 8002ef8:	200008a0 	.word	0x200008a0
 8002efc:	200003a0 	.word	0x200003a0
 8002f00:	200012cc 	.word	0x200012cc
 8002f04:	20001318 	.word	0x20001318
 8002f08:	20001364 	.word	0x20001364
 8002f0c:	200013b0 	.word	0x200013b0
 8002f10:	200005f8 	.word	0x200005f8
 8002f14:	200009b4 	.word	0x200009b4
 8002f18:	200008b4 	.word	0x200008b4
 8002f1c:	20000ad8 	.word	0x20000ad8
 8002f20:	48000400 	.word	0x48000400
 8002f24:	20000d58 	.word	0x20000d58
 8002f28:	20000880 	.word	0x20000880

08002f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b09a      	sub	sp, #104	@ 0x68
 8002f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f32:	f107 0320 	add.w	r3, r7, #32
 8002f36:	2248      	movs	r2, #72	@ 0x48
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f019 fcd9 	bl	801c8f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
 8002f4c:	611a      	str	r2, [r3, #16]
 8002f4e:	615a      	str	r2, [r3, #20]
 8002f50:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f52:	4b27      	ldr	r3, [pc, #156]	@ (8002ff0 <SystemClock_Config+0xc4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f5a:	4a25      	ldr	r2, [pc, #148]	@ (8002ff0 <SystemClock_Config+0xc4>)
 8002f5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <SystemClock_Config+0xc4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f7e:	2340      	movs	r3, #64	@ 0x40
 8002f80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f82:	2302      	movs	r3, #2
 8002f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f86:	2303      	movs	r3, #3
 8002f88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002f8e:	2308      	movs	r3, #8
 8002f90:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f98:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002f9c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fa2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa4:	f107 0320 	add.w	r3, r7, #32
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f00a f9e3 	bl	800d374 <HAL_RCC_OscConfig>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002fb4:	f000 f852 	bl	800305c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002fb8:	236f      	movs	r3, #111	@ 0x6f
 8002fba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002fcc:	2380      	movs	r3, #128	@ 0x80
 8002fce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	2103      	movs	r1, #3
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f00a fd3f 	bl	800da5c <HAL_RCC_ClockConfig>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002fe4:	f000 f83a 	bl	800305c <Error_Handler>
  }
}
 8002fe8:	bf00      	nop
 8002fea:	3768      	adds	r7, #104	@ 0x68
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	58000400 	.word	0x58000400

08002ff4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b094      	sub	sp, #80	@ 0x50
 8002ff8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ffa:	463b      	mov	r3, r7
 8002ffc:	2250      	movs	r2, #80	@ 0x50
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f019 fc76 	bl	801c8f2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003006:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 800300a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800300c:	2306      	movs	r3, #6
 800300e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003010:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003014:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003016:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800301a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800301c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003020:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8003022:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8003026:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003028:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800302e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8003034:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003038:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800303a:	2300      	movs	r3, #0
 800303c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800303e:	2310      	movs	r3, #16
 8003040:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003042:	463b      	mov	r3, r7
 8003044:	4618      	mov	r0, r3
 8003046:	f00b f946 	bl	800e2d6 <HAL_RCCEx_PeriphCLKConfig>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8003050:	f000 f804 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003054:	bf00      	nop
 8003056:	3750      	adds	r7, #80	@ 0x50
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003060:	b672      	cpsid	i
}
 8003062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <Error_Handler+0x8>

08003068 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7fd f8d5 	bl	8000220 <strlen>
 8003076:	4603      	mov	r3, r0
 8003078:	2b04      	cmp	r3, #4
 800307a:	d801      	bhi.n	8003080 <gps_checksum+0x18>
 800307c:	2300      	movs	r3, #0
 800307e:	e038      	b.n	80030f2 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fd f8cd 	bl	8000220 <strlen>
 8003086:	4603      	mov	r3, r0
 8003088:	3b04      	subs	r3, #4
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd f8c4 	bl	8000220 <strlen>
 8003098:	4603      	mov	r3, r0
 800309a:	3b03      	subs	r3, #3
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	e00a      	b.n	80030c4 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4053      	eors	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3301      	adds	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7fd f8ab 	bl	8000220 <strlen>
 80030ca:	4603      	mov	r3, r0
 80030cc:	1f5a      	subs	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d8ec      	bhi.n	80030ae <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80030d4:	f107 0308 	add.w	r3, r7, #8
 80030d8:	2210      	movs	r2, #16
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f018 fc39 	bl	801b954 <strtol>
 80030e2:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d101      	bne.n	80030f0 <gps_checksum+0x88>
        return 1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <gps_checksum+0x8a>
    }
    else{
        return 0;
 80030f0:	2300      	movs	r3, #0
    }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b0b7      	sub	sp, #220	@ 0xdc
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 800310c:	f107 0320 	add.w	r3, r7, #32
 8003110:	2264      	movs	r2, #100	@ 0x64
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f019 fbec 	bl	801c8f2 <memset>
    char *marker = strtok(inputString, ",");
 800311a:	49c2      	ldr	r1, [pc, #776]	@ (8003424 <nmea_GPGGA+0x328>)
 800311c:	6838      	ldr	r0, [r7, #0]
 800311e:	f019 fc03 	bl	801c928 <strtok>
 8003122:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8003126:	e027      	b.n	8003178 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003128:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800312c:	f7fd f878 	bl	8000220 <strlen>
 8003130:	4603      	mov	r3, r0
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8003138:	1c63      	adds	r3, r4, #1
 800313a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800313e:	4610      	mov	r0, r2
 8003140:	f017 fc62 	bl	801aa08 <malloc>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	00a3      	lsls	r3, r4, #2
 800314a:	33d8      	adds	r3, #216	@ 0xd8
 800314c:	443b      	add	r3, r7
 800314e:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8003152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003156:	3b01      	subs	r3, #1
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	33d8      	adds	r3, #216	@ 0xd8
 800315c:	443b      	add	r3, r7
 800315e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003162:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003166:	4618      	mov	r0, r3
 8003168:	f019 fcd7 	bl	801cb1a <strcpy>
        marker = strtok(NULL, ",");
 800316c:	49ad      	ldr	r1, [pc, #692]	@ (8003424 <nmea_GPGGA+0x328>)
 800316e:	2000      	movs	r0, #0
 8003170:	f019 fbda 	bl	801c928 <strtok>
 8003174:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8003178:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1d3      	bne.n	8003128 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8003180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	332c      	adds	r3, #44	@ 0x2c
 8003194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f019 fcbe 	bl	801cb1a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 800319e:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80031a2:	2b53      	cmp	r3, #83	@ 0x53
 80031a4:	d004      	beq.n	80031b0 <nmea_GPGGA+0xb4>
 80031a6:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80031aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80031ac:	f040 8159 	bne.w	8003462 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031b6:	e010      	b.n	80031da <nmea_GPGGA+0xde>
 80031b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031be:	4413      	add	r3, r2
 80031c0:	7819      	ldrb	r1, [r3, #0]
 80031c2:	f107 021c 	add.w	r2, r7, #28
 80031c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031ca:	4413      	add	r3, r2
 80031cc:	460a      	mov	r2, r1
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031d4:	3301      	adds	r3, #1
 80031d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031de:	2b01      	cmp	r3, #1
 80031e0:	ddea      	ble.n	80031b8 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031e8:	e011      	b.n	800320e <nmea_GPGGA+0x112>
 80031ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031f0:	3302      	adds	r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	7819      	ldrb	r1, [r3, #0]
 80031f6:	f107 0214 	add.w	r2, r7, #20
 80031fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031fe:	4413      	add	r3, r2
 8003200:	460a      	mov	r2, r1
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003208:	3301      	adds	r3, #1
 800320a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800320e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003212:	2b05      	cmp	r3, #5
 8003214:	dde9      	ble.n	80031ea <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003216:	f107 031c 	add.w	r3, r7, #28
 800321a:	220a      	movs	r2, #10
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f018 fb98 	bl	801b954 <strtol>
 8003224:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f018 fab0 	bl	801b794 <strtof>
 8003234:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800323c:	ee07 3a90 	vmov	s15, r3
 8003240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003244:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8003248:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 8003428 <nmea_GPGGA+0x32c>
 800324c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003254:	ee17 0a90 	vmov	r0, s15
 8003258:	f7fd f94e 	bl	80004f8 <__aeabi_f2d>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8003264:	2300      	movs	r3, #0
 8003266:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800326a:	e010      	b.n	800328e <nmea_GPGGA+0x192>
 800326c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800326e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003272:	4413      	add	r3, r2
 8003274:	7819      	ldrb	r1, [r3, #0]
 8003276:	f107 0210 	add.w	r2, r7, #16
 800327a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800327e:	4413      	add	r3, r2
 8003280:	460a      	mov	r2, r1
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003288:	3301      	adds	r3, #1
 800328a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800328e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003292:	2b02      	cmp	r3, #2
 8003294:	ddea      	ble.n	800326c <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800329c:	e011      	b.n	80032c2 <nmea_GPGGA+0x1c6>
 800329e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032a4:	3303      	adds	r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	7819      	ldrb	r1, [r3, #0]
 80032aa:	f107 0208 	add.w	r2, r7, #8
 80032ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032b2:	4413      	add	r3, r2
 80032b4:	460a      	mov	r2, r1
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032bc:	3301      	adds	r3, #1
 80032be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	dde9      	ble.n	800329e <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	220a      	movs	r2, #10
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f018 fb3e 	bl	801b954 <strtol>
 80032d8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f018 fa56 	bl	801b794 <strtof>
 80032e8:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80032ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032f8:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 80032fc:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 8003428 <nmea_GPGGA+0x32c>
 8003300:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003308:	ee17 0a90 	vmov	r0, s15
 800330c:	f7fd f8f4 	bl	80004f8 <__aeabi_f2d>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003324:	f7fd fba8 	bl	8000a78 <__aeabi_dcmpeq>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d176      	bne.n	800341c <nmea_GPGGA+0x320>
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800333a:	f7fd fb9d 	bl	8000a78 <__aeabi_dcmpeq>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d16b      	bne.n	800341c <nmea_GPGGA+0x320>
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	4b38      	ldr	r3, [pc, #224]	@ (800342c <nmea_GPGGA+0x330>)
 800334a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800334e:	f7fd fb9d 	bl	8000a8c <__aeabi_dcmplt>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d061      	beq.n	800341c <nmea_GPGGA+0x320>
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	4b34      	ldr	r3, [pc, #208]	@ (8003430 <nmea_GPGGA+0x334>)
 800335e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003362:	f7fd fb93 	bl	8000a8c <__aeabi_dcmplt>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d057      	beq.n	800341c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003372:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 800337c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003384:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800338e:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f018 f9fd 	bl	801b794 <strtof>
 800339a:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800339e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80033a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033aa:	d102      	bne.n	80033b2 <nmea_GPGGA+0x2b6>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	e001      	b.n	80033b6 <nmea_GPGGA+0x2ba>
 80033b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80033ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033bc:	220a      	movs	r2, #10
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f018 fac7 	bl	801b954 <strtol>
 80033c6:	4602      	mov	r2, r0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80033cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ce:	220a      	movs	r2, #10
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f018 fabe 	bl	801b954 <strtol>
 80033d8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80033dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bfcc      	ite	gt
 80033e4:	2301      	movgt	r3, #1
 80033e6:	2300      	movle	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 80033f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f018 f9cd 	bl	801b794 <strtof>
 80033fa:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80033fe:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003402:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	d102      	bne.n	8003412 <nmea_GPGGA+0x316>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	e001      	b.n	8003416 <nmea_GPGGA+0x31a>
 8003412:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800341a:	e022      	b.n	8003462 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003422:	e016      	b.n	8003452 <nmea_GPGGA+0x356>
 8003424:	0802108c 	.word	0x0802108c
 8003428:	42700000 	.word	0x42700000
 800342c:	40568000 	.word	0x40568000
 8003430:	40668000 	.word	0x40668000
 8003434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	33d8      	adds	r3, #216	@ 0xd8
 800343c:	443b      	add	r3, r7
 800343e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003442:	4618      	mov	r0, r3
 8003444:	f017 fae8 	bl	801aa18 <free>
 8003448:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800344c:	3301      	adds	r3, #1
 800344e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003452:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800345a:	429a      	cmp	r2, r3
 800345c:	dbea      	blt.n	8003434 <nmea_GPGGA+0x338>
            return 0;
 800345e:	2300      	movs	r3, #0
 8003460:	e019      	b.n	8003496 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8003462:	2300      	movs	r3, #0
 8003464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003468:	e00e      	b.n	8003488 <nmea_GPGGA+0x38c>
 800346a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	33d8      	adds	r3, #216	@ 0xd8
 8003472:	443b      	add	r3, r7
 8003474:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003478:	4618      	mov	r0, r3
 800347a:	f017 facd 	bl	801aa18 <free>
 800347e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003482:	3301      	adds	r3, #1
 8003484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003488:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800348c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003490:	429a      	cmp	r2, r3
 8003492:	dbea      	blt.n	800346a <nmea_GPGGA+0x36e>
    return 1;
 8003494:	2301      	movs	r3, #1
}
 8003496:	4618      	mov	r0, r3
 8003498:	37dc      	adds	r7, #220	@ 0xdc
 800349a:	46bd      	mov	sp, r7
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	bf00      	nop

080034a0 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b0a3      	sub	sp, #140	@ 0x8c
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	2264      	movs	r2, #100	@ 0x64
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f019 fa1a 	bl	801c8f2 <memset>
    char *marker = strtok(inputString, ",");
 80034be:	493b      	ldr	r1, [pc, #236]	@ (80035ac <nmea_GPGSA+0x10c>)
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f019 fa31 	bl	801c928 <strtok>
 80034c6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 80034ca:	e027      	b.n	800351c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80034cc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80034d0:	f7fc fea6 	bl	8000220 <strlen>
 80034d4:	4603      	mov	r3, r0
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 80034dc:	1c63      	adds	r3, r4, #1
 80034de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034e2:	4610      	mov	r0, r2
 80034e4:	f017 fa90 	bl	801aa08 <malloc>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	00a3      	lsls	r3, r4, #2
 80034ee:	3388      	adds	r3, #136	@ 0x88
 80034f0:	443b      	add	r3, r7
 80034f2:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 80034f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034fa:	3b01      	subs	r3, #1
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	3388      	adds	r3, #136	@ 0x88
 8003500:	443b      	add	r3, r7
 8003502:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003506:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800350a:	4618      	mov	r0, r3
 800350c:	f019 fb05 	bl	801cb1a <strcpy>
        marker = strtok(NULL, ",");
 8003510:	4926      	ldr	r1, [pc, #152]	@ (80035ac <nmea_GPGSA+0x10c>)
 8003512:	2000      	movs	r0, #0
 8003514:	f019 fa08 	bl	801c928 <strtok>
 8003518:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 800351c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1d3      	bne.n	80034cc <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	220a      	movs	r2, #10
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f018 fa12 	bl	801b954 <strtol>
 8003530:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8003532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003534:	2b01      	cmp	r3, #1
 8003536:	bfcc      	ite	gt
 8003538:	2301      	movgt	r3, #1
 800353a:	2300      	movle	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8003548:	2303      	movs	r3, #3
 800354a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800354c:	e00e      	b.n	800356c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 800354e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	3388      	adds	r3, #136	@ 0x88
 8003554:	443b      	add	r3, r7
 8003556:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003562:	3301      	adds	r3, #1
 8003564:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8003566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003568:	3301      	adds	r3, #1
 800356a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800356c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800356e:	2b0e      	cmp	r3, #14
 8003570:	dded      	ble.n	800354e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003576:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8003578:	2300      	movs	r3, #0
 800357a:	677b      	str	r3, [r7, #116]	@ 0x74
 800357c:	e00b      	b.n	8003596 <nmea_GPGSA+0xf6>
 800357e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	3388      	adds	r3, #136	@ 0x88
 8003584:	443b      	add	r3, r7
 8003586:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800358a:	4618      	mov	r0, r3
 800358c:	f017 fa44 	bl	801aa18 <free>
 8003590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003592:	3301      	adds	r3, #1
 8003594:	677b      	str	r3, [r7, #116]	@ 0x74
 8003596:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003598:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800359c:	429a      	cmp	r2, r3
 800359e:	dbee      	blt.n	800357e <nmea_GPGSA+0xde>
    return 1;
 80035a0:	2301      	movs	r3, #1
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	378c      	adds	r7, #140	@ 0x8c
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}
 80035aa:	bf00      	nop
 80035ac:	0802108c 	.word	0x0802108c

080035b0 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b0a1      	sub	sp, #132	@ 0x84
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	2264      	movs	r2, #100	@ 0x64
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f019 f993 	bl	801c8f2 <memset>
    char *marker = strtok(inputString, ",");
 80035cc:	4930      	ldr	r1, [pc, #192]	@ (8003690 <nmea_GNRMC+0xe0>)
 80035ce:	6838      	ldr	r0, [r7, #0]
 80035d0:	f019 f9aa 	bl	801c928 <strtok>
 80035d4:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 80035d6:	e021      	b.n	800361c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80035d8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80035da:	f7fc fe21 	bl	8000220 <strlen>
 80035de:	4603      	mov	r3, r0
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 80035e4:	1c63      	adds	r3, r4, #1
 80035e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035e8:	4610      	mov	r0, r2
 80035ea:	f017 fa0d 	bl	801aa08 <malloc>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	00a3      	lsls	r3, r4, #2
 80035f4:	3380      	adds	r3, #128	@ 0x80
 80035f6:	443b      	add	r3, r7
 80035f8:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 80035fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035fe:	3b01      	subs	r3, #1
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	3380      	adds	r3, #128	@ 0x80
 8003604:	443b      	add	r3, r7
 8003606:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800360a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800360c:	4618      	mov	r0, r3
 800360e:	f019 fa84 	bl	801cb1a <strcpy>
        marker = strtok(NULL, ",");
 8003612:	491f      	ldr	r1, [pc, #124]	@ (8003690 <nmea_GNRMC+0xe0>)
 8003614:	2000      	movs	r0, #0
 8003616:	f019 f987 	bl	801c928 <strtok>
 800361a:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800361c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1da      	bne.n	80035d8 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8003622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f018 f8b4 	bl	801b794 <strtof>
 800362c:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 8003630:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003632:	f7fc ff61 	bl	80004f8 <__aeabi_f2d>
 8003636:	a314      	add	r3, pc, #80	@ (adr r3, 8003688 <nmea_GNRMC+0xd8>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f7fd f8de 	bl	80007fc <__aeabi_ddiv>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	f7fd faa6 	bl	8000b98 <__aeabi_d2f>
 800364c:	4602      	mov	r2, r0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8003652:	2300      	movs	r3, #0
 8003654:	677b      	str	r3, [r7, #116]	@ 0x74
 8003656:	e00b      	b.n	8003670 <nmea_GNRMC+0xc0>
 8003658:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	3380      	adds	r3, #128	@ 0x80
 800365e:	443b      	add	r3, r7
 8003660:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003664:	4618      	mov	r0, r3
 8003666:	f017 f9d7 	bl	801aa18 <free>
 800366a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800366c:	3301      	adds	r3, #1
 800366e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003670:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003672:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003674:	429a      	cmp	r2, r3
 8003676:	dbef      	blt.n	8003658 <nmea_GNRMC+0xa8>
    return 1;
 8003678:	2301      	movs	r3, #1
}
 800367a:	4618      	mov	r0, r3
 800367c:	3784      	adds	r7, #132	@ 0x84
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}
 8003682:	bf00      	nop
 8003684:	f3af 8000 	nop.w
 8003688:	be76c8b4 	.word	0xbe76c8b4
 800368c:	3fff1a9f 	.word	0x3fff1a9f
 8003690:	0802108c 	.word	0x0802108c

08003694 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800369e:	223c      	movs	r2, #60	@ 0x3c
 80036a0:	2100      	movs	r1, #0
 80036a2:	484e      	ldr	r0, [pc, #312]	@ (80037dc <nmea_parse+0x148>)
 80036a4:	f019 f925 	bl	801c8f2 <memset>
    char * token = strtok(buffer, "$");
 80036a8:	494d      	ldr	r1, [pc, #308]	@ (80037e0 <nmea_parse+0x14c>)
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	f019 f93c 	bl	801c928 <strtok>
 80036b0:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80036b6:	e01d      	b.n	80036f4 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80036b8:	6978      	ldr	r0, [r7, #20]
 80036ba:	f7fc fdb1 	bl	8000220 <strlen>
 80036be:	4603      	mov	r3, r0
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	693c      	ldr	r4, [r7, #16]
 80036c4:	1c63      	adds	r3, r4, #1
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	4610      	mov	r0, r2
 80036ca:	f017 f99d 	bl	801aa08 <malloc>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b42      	ldr	r3, [pc, #264]	@ (80037dc <nmea_parse+0x148>)
 80036d4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	3b01      	subs	r3, #1
 80036dc:	4a3f      	ldr	r2, [pc, #252]	@ (80037dc <nmea_parse+0x148>)
 80036de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e2:	6979      	ldr	r1, [r7, #20]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f019 fa18 	bl	801cb1a <strcpy>
        token = strtok(NULL, "$");
 80036ea:	493d      	ldr	r1, [pc, #244]	@ (80037e0 <nmea_parse+0x14c>)
 80036ec:	2000      	movs	r0, #0
 80036ee:	f019 f91b 	bl	801c928 <strtok>
 80036f2:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1de      	bne.n	80036b8 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e052      	b.n	80037a6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003700:	4a36      	ldr	r2, [pc, #216]	@ (80037dc <nmea_parse+0x148>)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	4936      	ldr	r1, [pc, #216]	@ (80037e4 <nmea_parse+0x150>)
 800370a:	4618      	mov	r0, r3
 800370c:	f019 f968 	bl	801c9e0 <strstr>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d044      	beq.n	80037a0 <nmea_parse+0x10c>
 8003716:	4a31      	ldr	r2, [pc, #196]	@ (80037dc <nmea_parse+0x148>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fca2 	bl	8003068 <gps_checksum>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d03a      	beq.n	80037a0 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 800372a:	4a2c      	ldr	r2, [pc, #176]	@ (80037dc <nmea_parse+0x148>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003732:	492d      	ldr	r1, [pc, #180]	@ (80037e8 <nmea_parse+0x154>)
 8003734:	4618      	mov	r0, r3
 8003736:	f019 f953 	bl	801c9e0 <strstr>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8003740:	4a26      	ldr	r2, [pc, #152]	@ (80037dc <nmea_parse+0x148>)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	4619      	mov	r1, r3
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff30 	bl	80035b0 <nmea_GNRMC>
 8003750:	e026      	b.n	80037a0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8003752:	4a22      	ldr	r2, [pc, #136]	@ (80037dc <nmea_parse+0x148>)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	4924      	ldr	r1, [pc, #144]	@ (80037ec <nmea_parse+0x158>)
 800375c:	4618      	mov	r0, r3
 800375e:	f019 f93f 	bl	801c9e0 <strstr>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8003768:	4a1c      	ldr	r2, [pc, #112]	@ (80037dc <nmea_parse+0x148>)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fe94 	bl	80034a0 <nmea_GPGSA>
 8003778:	e012      	b.n	80037a0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 800377a:	4a18      	ldr	r2, [pc, #96]	@ (80037dc <nmea_parse+0x148>)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003782:	491b      	ldr	r1, [pc, #108]	@ (80037f0 <nmea_parse+0x15c>)
 8003784:	4618      	mov	r0, r3
 8003786:	f019 f92b 	bl	801c9e0 <strstr>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8003790:	4a12      	ldr	r2, [pc, #72]	@ (80037dc <nmea_parse+0x148>)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fcae 	bl	80030fc <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	dba8      	blt.n	8003700 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	e009      	b.n	80037c8 <nmea_parse+0x134>
 80037b4:	4a09      	ldr	r2, [pc, #36]	@ (80037dc <nmea_parse+0x148>)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037bc:	4618      	mov	r0, r3
 80037be:	f017 f92b 	bl	801aa18 <free>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3301      	adds	r3, #1
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	dbf1      	blt.n	80037b4 <nmea_parse+0x120>


}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000cc4 	.word	0x20000cc4
 80037e0:	08021090 	.word	0x08021090
 80037e4:	08021094 	.word	0x08021094
 80037e8:	08021098 	.word	0x08021098
 80037ec:	080210a0 	.word	0x080210a0
 80037f0:	080210a8 	.word	0x080210a8
 80037f4:	00000000 	.word	0x00000000

080037f8 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 80037f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037fc:	b08a      	sub	sp, #40	@ 0x28
 80037fe:	af00      	add	r7, sp, #0
 8003800:	ed87 0b06 	vstr	d0, [r7, #24]
 8003804:	ed87 1b04 	vstr	d1, [r7, #16]
 8003808:	ed87 2b02 	vstr	d2, [r7, #8]
 800380c:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 800381c:	a358      	add	r3, pc, #352	@ (adr r3, 8003980 <distancecalc+0x188>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003826:	f7fc febf 	bl	80005a8 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	ec43 2b17 	vmov	d7, r2, r3
 8003832:	eeb0 0a47 	vmov.f32	s0, s14
 8003836:	eef0 0a67 	vmov.f32	s1, s15
 800383a:	f01b fedd 	bl	801f5f8 <sinl>
 800383e:	ec55 4b10 	vmov	r4, r5, d0
 8003842:	a34f      	add	r3, pc, #316	@ (adr r3, 8003980 <distancecalc+0x188>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800384c:	f7fc feac 	bl	80005a8 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	ec43 2b17 	vmov	d7, r2, r3
 8003858:	eeb0 0a47 	vmov.f32	s0, s14
 800385c:	eef0 0a67 	vmov.f32	s1, s15
 8003860:	f01b feca 	bl	801f5f8 <sinl>
 8003864:	ec53 2b10 	vmov	r2, r3, d0
 8003868:	4620      	mov	r0, r4
 800386a:	4629      	mov	r1, r5
 800386c:	f7fc fe9c 	bl	80005a8 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4614      	mov	r4, r2
 8003876:	461d      	mov	r5, r3
 8003878:	a341      	add	r3, pc, #260	@ (adr r3, 8003980 <distancecalc+0x188>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003882:	f7fc fe91 	bl	80005a8 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	ec43 2b17 	vmov	d7, r2, r3
 800388e:	eeb0 0a47 	vmov.f32	s0, s14
 8003892:	eef0 0a67 	vmov.f32	s1, s15
 8003896:	f01b fead 	bl	801f5f4 <cosl>
 800389a:	ec59 8b10 	vmov	r8, r9, d0
 800389e:	a338      	add	r3, pc, #224	@ (adr r3, 8003980 <distancecalc+0x188>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038a8:	f7fc fe7e 	bl	80005a8 <__aeabi_dmul>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	ec43 2b17 	vmov	d7, r2, r3
 80038b4:	eeb0 0a47 	vmov.f32	s0, s14
 80038b8:	eef0 0a67 	vmov.f32	s1, s15
 80038bc:	f01b fe9a 	bl	801f5f4 <cosl>
 80038c0:	ec53 2b10 	vmov	r2, r3, d0
 80038c4:	4640      	mov	r0, r8
 80038c6:	4649      	mov	r1, r9
 80038c8:	f7fc fe6e 	bl	80005a8 <__aeabi_dmul>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4690      	mov	r8, r2
 80038d2:	4699      	mov	r9, r3
 80038d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038dc:	f7fc fcac 	bl	8000238 <__aeabi_dsub>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	a325      	add	r3, pc, #148	@ (adr r3, 8003980 <distancecalc+0x188>)
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f7fc fe5b 	bl	80005a8 <__aeabi_dmul>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	ec43 2b17 	vmov	d7, r2, r3
 80038fa:	eeb0 0a47 	vmov.f32	s0, s14
 80038fe:	eef0 0a67 	vmov.f32	s1, s15
 8003902:	f01b fe77 	bl	801f5f4 <cosl>
 8003906:	ec53 2b10 	vmov	r2, r3, d0
 800390a:	4640      	mov	r0, r8
 800390c:	4649      	mov	r1, r9
 800390e:	f7fc fe4b 	bl	80005a8 <__aeabi_dmul>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4620      	mov	r0, r4
 8003918:	4629      	mov	r1, r5
 800391a:	f7fc fc8f 	bl	800023c <__adddf3>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	ec43 2b17 	vmov	d7, r2, r3
 8003926:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8003978 <distancecalc+0x180>
 800392a:	eeb0 0a47 	vmov.f32	s0, s14
 800392e:	eef0 0a67 	vmov.f32	s1, s15
 8003932:	f01b fe01 	bl	801f538 <fmin>
 8003936:	eeb0 7a40 	vmov.f32	s14, s0
 800393a:	eef0 7a60 	vmov.f32	s15, s1
 800393e:	eeb0 0a47 	vmov.f32	s0, s14
 8003942:	eef0 0a67 	vmov.f32	s1, s15
 8003946:	f01b fe59 	bl	801f5fc <acosl>
 800394a:	ec51 0b10 	vmov	r0, r1, d0
 800394e:	a30e      	add	r3, pc, #56	@ (adr r3, 8003988 <distancecalc+0x190>)
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f7fc fe28 	bl	80005a8 <__aeabi_dmul>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 8003960:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003964:	ec43 2b17 	vmov	d7, r2, r3
}
 8003968:	eeb0 0a47 	vmov.f32	s0, s14
 800396c:	eef0 0a67 	vmov.f32	s1, s15
 8003970:	3728      	adds	r7, #40	@ 0x28
 8003972:	46bd      	mov	sp, r7
 8003974:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003978:	00000000 	.word	0x00000000
 800397c:	3ff00000 	.word	0x3ff00000
 8003980:	a2529d39 	.word	0xa2529d39
 8003984:	3f91df46 	.word	0x3f91df46
 8003988:	00000000 	.word	0x00000000
 800398c:	41584dae 	.word	0x41584dae

08003990 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80039b6:	bf00      	nop
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_APB1_GRP1_EnableClock>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80039ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4013      	ands	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039e4:	68fb      	ldr	r3, [r7, #12]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003a08:	2300      	movs	r3, #0
 8003a0a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac4 <MX_RTC_Init+0xd0>)
 8003a10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003a18:	4b29      	ldr	r3, [pc, #164]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a1a:	227f      	movs	r2, #127	@ 0x7f
 8003a1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003a1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a20:	f641 6284 	movw	r2, #7812	@ 0x1e84
 8003a24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a26:	4b26      	ldr	r3, [pc, #152]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a2c:	4b24      	ldr	r3, [pc, #144]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a32:	4b23      	ldr	r3, [pc, #140]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003a38:	4b21      	ldr	r3, [pc, #132]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a3e:	4820      	ldr	r0, [pc, #128]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a40:	f00a fed0 	bl	800e7e4 <HAL_RTC_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003a4a:	f7ff fb07 	bl	800305c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4814      	ldr	r0, [pc, #80]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a6e:	f00a ff69 	bl	800e944 <HAL_RTC_SetTime>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8003a78:	f7ff faf0 	bl	800305c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003a80:	2301      	movs	r3, #1
 8003a82:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003a84:	2301      	movs	r3, #1
 8003a86:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4619      	mov	r1, r3
 8003a92:	480b      	ldr	r0, [pc, #44]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003a94:	f00b f81a 	bl	800eacc <HAL_RTC_SetDate>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8003a9e:	f7ff fadd 	bl	800305c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4806      	ldr	r0, [pc, #24]	@ (8003ac0 <MX_RTC_Init+0xcc>)
 8003aa8:	f00b f92e 	bl	800ed08 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003ab2:	f7ff fad3 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003ab6:	bf00      	nop
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000d00 	.word	0x20000d00
 8003ac4:	40002800 	.word	0x40002800

08003ac8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b096      	sub	sp, #88	@ 0x58
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ad0:	f107 0308 	add.w	r3, r7, #8
 8003ad4:	2250      	movs	r2, #80	@ 0x50
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f018 ff0a 	bl	801c8f2 <memset>
  if(rtcHandle->Instance==RTC)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a14      	ldr	r2, [pc, #80]	@ (8003b34 <HAL_RTC_MspInit+0x6c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d121      	bne.n	8003b2c <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003ae8:	f009 f8a0 	bl	800cc2c <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 8003aec:	f009 f89e 	bl	800cc2c <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003af0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003af4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8003af6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003afa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003afc:	f107 0308 	add.w	r3, r7, #8
 8003b00:	4618      	mov	r0, r3
 8003b02:	f00a fbe8 	bl	800e2d6 <HAL_RCCEx_PeriphCLKConfig>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003b0c:	f7ff faa6 	bl	800305c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b10:	f7ff ff45 	bl	800399e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003b14:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003b18:	f7ff ff52 	bl	80039c0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2100      	movs	r1, #0
 8003b20:	2003      	movs	r0, #3
 8003b22:	f005 fdaa 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003b26:	2003      	movs	r0, #3
 8003b28:	f005 fdc1 	bl	80096ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3758      	adds	r7, #88	@ 0x58
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40002800 	.word	0x40002800

08003b38 <LL_AHB2_GRP1_EnableClock>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b76:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c14 <MX_SPI1_Init+0x78>)
 8003ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003ba8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bae:	4b18      	ldr	r3, [pc, #96]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bb4:	4b16      	ldr	r3, [pc, #88]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bb6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003bba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bc2:	4b13      	ldr	r3, [pc, #76]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bc8:	4b11      	ldr	r3, [pc, #68]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003be8:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bea:	2207      	movs	r2, #7
 8003bec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bfa:	4805      	ldr	r0, [pc, #20]	@ (8003c10 <MX_SPI1_Init+0x74>)
 8003bfc:	f00b f940 	bl	800ee80 <HAL_SPI_Init>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003c06:	f7ff fa29 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000d58 	.word	0x20000d58
 8003c14:	40013000 	.word	0x40013000

08003c18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c20:	f107 030c 	add.w	r3, r7, #12
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a46      	ldr	r2, [pc, #280]	@ (8003d50 <HAL_SPI_MspInit+0x138>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	f040 8085 	bne.w	8003d46 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c3c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003c40:	f7ff ff93 	bl	8003b6a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7ff ff77 	bl	8003b38 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c4a:	2002      	movs	r0, #2
 8003c4c:	f7ff ff74 	bl	8003b38 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8003c50:	2342      	movs	r3, #66	@ 0x42
 8003c52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c54:	2302      	movs	r3, #2
 8003c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c60:	2305      	movs	r3, #5
 8003c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c6e:	f006 f937 	bl	8009ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c72:	2320      	movs	r3, #32
 8003c74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c76:	2302      	movs	r3, #2
 8003c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c82:	2305      	movs	r3, #5
 8003c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4831      	ldr	r0, [pc, #196]	@ (8003d54 <HAL_SPI_MspInit+0x13c>)
 8003c8e:	f006 f927 	bl	8009ee0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003c92:	4b31      	ldr	r3, [pc, #196]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003c94:	4a31      	ldr	r2, [pc, #196]	@ (8003d5c <HAL_SPI_MspInit+0x144>)
 8003c96:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003c98:	4b2f      	ldr	r3, [pc, #188]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003c9a:	2206      	movs	r2, #6
 8003c9c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003caa:	4b2b      	ldr	r3, [pc, #172]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003cac:	2280      	movs	r2, #128	@ 0x80
 8003cae:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cb0:	4b29      	ldr	r3, [pc, #164]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cb6:	4b28      	ldr	r3, [pc, #160]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003cbc:	4b26      	ldr	r3, [pc, #152]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cc2:	4b25      	ldr	r3, [pc, #148]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003cc8:	4823      	ldr	r0, [pc, #140]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003cca:	f005 fd35 	bl	8009738 <HAL_DMA_Init>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003cd4:	f7ff f9c2 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003cdc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cde:	4a1e      	ldr	r2, [pc, #120]	@ (8003d58 <HAL_SPI_MspInit+0x140>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d64 <HAL_SPI_MspInit+0x14c>)
 8003ce8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003cea:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003cec:	2207      	movs	r2, #7
 8003cee:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cfc:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003cfe:	2280      	movs	r2, #128	@ 0x80
 8003d00:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d02:	4b17      	ldr	r3, [pc, #92]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d08:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003d0e:	4b14      	ldr	r3, [pc, #80]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d14:	4b12      	ldr	r3, [pc, #72]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003d1a:	4811      	ldr	r0, [pc, #68]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003d1c:	f005 fd0c 	bl	8009738 <HAL_DMA_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8003d26:	f7ff f999 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d30:	4a0b      	ldr	r2, [pc, #44]	@ (8003d60 <HAL_SPI_MspInit+0x148>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003d36:	2200      	movs	r2, #0
 8003d38:	2100      	movs	r1, #0
 8003d3a:	2022      	movs	r0, #34	@ 0x22
 8003d3c:	f005 fc9d 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003d40:	2022      	movs	r0, #34	@ 0x22
 8003d42:	f005 fcb4 	bl	80096ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003d46:	bf00      	nop
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40013000 	.word	0x40013000
 8003d54:	48000400 	.word	0x48000400
 8003d58:	20000dbc 	.word	0x20000dbc
 8003d5c:	40020030 	.word	0x40020030
 8003d60:	20000e1c 	.word	0x20000e1c
 8003d64:	40020044 	.word	0x40020044

08003d68 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8003d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d6c:	ed2d 8b02 	vpush	{d8}
 8003d70:	b0a7      	sub	sp, #156	@ 0x9c
 8003d72:	af16      	add	r7, sp, #88	@ 0x58
 8003d74:	6378      	str	r0, [r7, #52]	@ 0x34
 8003d76:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8003d7a:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003d7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d80:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d82:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003d8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d8c:	f7fc fbb4 	bl	80004f8 <__aeabi_f2d>
 8003d90:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003d94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d96:	f7fc fbaf 	bl	80004f8 <__aeabi_f2d>
 8003d9a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fba8 	bl	80004f8 <__aeabi_f2d>
 8003da8:	a332      	add	r3, pc, #200	@ (adr r3, 8003e74 <csvframe+0x10c>)
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f7fc fbfb 	bl	80005a8 <__aeabi_dmul>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	ec43 2b18 	vmov	d8, r2, r3
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc fb94 	bl	80004f8 <__aeabi_f2d>
 8003dd0:	4682      	mov	sl, r0
 8003dd2:	468b      	mov	fp, r1
 8003dd4:	6a38      	ldr	r0, [r7, #32]
 8003dd6:	f7fc fb8f 	bl	80004f8 <__aeabi_f2d>
 8003dda:	4b1f      	ldr	r3, [pc, #124]	@ (8003e58 <csvframe+0xf0>)
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e5c <csvframe+0xf4>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e60 <csvframe+0xf8>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <csvframe+0xfc>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	461e      	mov	r6, r3
 8003df2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <csvframe+0x100>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e6c <csvframe+0x104>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	9315      	str	r3, [sp, #84]	@ 0x54
 8003dfe:	9214      	str	r2, [sp, #80]	@ 0x50
 8003e00:	9613      	str	r6, [sp, #76]	@ 0x4c
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	9212      	str	r2, [sp, #72]	@ 0x48
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	9211      	str	r2, [sp, #68]	@ 0x44
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	9310      	str	r3, [sp, #64]	@ 0x40
 8003e0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8003e16:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003e1a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003e1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003e22:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003e26:	ed97 7b04 	vldr	d7, [r7, #16]
 8003e2a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003e2e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003e32:	ed8d 7b00 	vstr	d7, [sp]
 8003e36:	4a0e      	ldr	r2, [pc, #56]	@ (8003e70 <csvframe+0x108>)
 8003e38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e3e:	f018 fcc1 	bl	801c7c4 <sniprintf>
 8003e42:	63f8      	str	r0, [r7, #60]	@ 0x3c
	return framesize;
 8003e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3744      	adds	r7, #68	@ 0x44
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	ecbd 8b02 	vpop	{d8}
 8003e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e54:	f3af 8000 	nop.w
 8003e58:	20000012 	.word	0x20000012
 8003e5c:	20000011 	.word	0x20000011
 8003e60:	20000010 	.word	0x20000010
 8003e64:	20000ca5 	.word	0x20000ca5
 8003e68:	20000ca6 	.word	0x20000ca6
 8003e6c:	20000ca4 	.word	0x20000ca4
 8003e70:	080210b0 	.word	0x080210b0
 8003e74:	cccccccd 	.word	0xcccccccd
 8003e78:	400ccccc 	.word	0x400ccccc

08003e7c <storeindex>:


void storeindex(void){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b09c      	sub	sp, #112	@ 0x70
 8003e80:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8003e82:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003e86:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003e88:	463b      	mov	r3, r7
 8003e8a:	2264      	movs	r2, #100	@ 0x64
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f018 fd2f 	bl	801c8f2 <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8003e94:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <storeindex+0x6c>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b14      	ldr	r3, [pc, #80]	@ (8003eec <storeindex+0x70>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	4a13      	ldr	r2, [pc, #76]	@ (8003ef0 <storeindex+0x74>)
 8003ea4:	2164      	movs	r1, #100	@ 0x64
 8003ea6:	f018 fc8d 	bl	801c7c4 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da00      	bge.n	8003eb2 <storeindex+0x36>
 8003eb0:	330f      	adds	r3, #15
 8003eb2:	111b      	asrs	r3, r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc fb0d 	bl	80004d4 <__aeabi_i2d>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f7fc fe21 	bl	8000b08 <__aeabi_d2iz>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4619      	mov	r1, r3
 8003eca:	480a      	ldr	r0, [pc, #40]	@ (8003ef4 <storeindex+0x78>)
 8003ecc:	f014 fea9 	bl	8018c22 <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003ed0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003ed2:	463a      	mov	r2, r7
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2364      	movs	r3, #100	@ 0x64
 8003eda:	4806      	ldr	r0, [pc, #24]	@ (8003ef4 <storeindex+0x78>)
 8003edc:	f014 ff24 	bl	8018d28 <SPIF_WritePage>

}
 8003ee0:	bf00      	nop
 8003ee2:	3768      	adds	r7, #104	@ 0x68
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000ab4 	.word	0x20000ab4
 8003eec:	20000ab8 	.word	0x20000ab8
 8003ef0:	08021104 	.word	0x08021104
 8003ef4:	20000880 	.word	0x20000880

08003ef8 <getindex>:

void getindex(void){
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003efe:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003f02:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	2300      	movs	r3, #0
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2332      	movs	r3, #50	@ 0x32
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fbc <getindex+0xc4>)
 8003f0e:	482c      	ldr	r0, [pc, #176]	@ (8003fc0 <getindex+0xc8>)
 8003f10:	f014 ff28 	bl	8018d64 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8003f14:	220a      	movs	r2, #10
 8003f16:	2124      	movs	r1, #36	@ 0x24
 8003f18:	482a      	ldr	r0, [pc, #168]	@ (8003fc4 <getindex+0xcc>)
 8003f1a:	f018 fcea 	bl	801c8f2 <memset>
	memset(numbuf2,'$',10);
 8003f1e:	220a      	movs	r2, #10
 8003f20:	2124      	movs	r1, #36	@ 0x24
 8003f22:	4829      	ldr	r0, [pc, #164]	@ (8003fc8 <getindex+0xd0>)
 8003f24:	f018 fce5 	bl	801c8f2 <memset>
	int cnt=0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003f2c:	4b23      	ldr	r3, [pc, #140]	@ (8003fbc <getindex+0xc4>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	2b09      	cmp	r3, #9
 8003f36:	dc3a      	bgt.n	8003fae <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003f38:	e00b      	b.n	8003f52 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003f3a:	4a20      	ldr	r2, [pc, #128]	@ (8003fbc <getindex+0xc4>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	7819      	ldrb	r1, [r3, #0]
 8003f42:	4a20      	ldr	r2, [pc, #128]	@ (8003fc4 <getindex+0xcc>)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	460a      	mov	r2, r1
 8003f4a:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003f52:	4a1a      	ldr	r2, [pc, #104]	@ (8003fbc <getindex+0xc4>)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b24      	cmp	r3, #36	@ 0x24
 8003f5c:	d1ed      	bne.n	8003f3a <getindex+0x42>
		  }
		  cnt++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003f68:	e00e      	b.n	8003f88 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003f6a:	4a14      	ldr	r2, [pc, #80]	@ (8003fbc <getindex+0xc4>)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	7819      	ldrb	r1, [r3, #0]
 8003f72:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <getindex+0xd0>)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4413      	add	r3, r2
 8003f78:	460a      	mov	r2, r1
 8003f7a:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3301      	adds	r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003f88:	4a0c      	ldr	r2, [pc, #48]	@ (8003fbc <getindex+0xc4>)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b24      	cmp	r3, #36	@ 0x24
 8003f92:	d1ea      	bne.n	8003f6a <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003f94:	480b      	ldr	r0, [pc, #44]	@ (8003fc4 <getindex+0xcc>)
 8003f96:	f016 fd33 	bl	801aa00 <atoi>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003fcc <getindex+0xd4>)
 8003f9e:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003fa0:	4809      	ldr	r0, [pc, #36]	@ (8003fc8 <getindex+0xd0>)
 8003fa2:	f016 fd2d 	bl	801aa00 <atoi>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4a09      	ldr	r2, [pc, #36]	@ (8003fd0 <getindex+0xd8>)
 8003faa:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003fac:	e001      	b.n	8003fb2 <getindex+0xba>
		storeindex();
 8003fae:	f7ff ff65 	bl	8003e7c <storeindex>
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000d24 	.word	0x20000d24
 8003fc0:	20000880 	.word	0x20000880
 8003fc4:	20000ac0 	.word	0x20000ac0
 8003fc8:	20000acc 	.word	0x20000acc
 8003fcc:	20000ab4 	.word	0x20000ab4
 8003fd0:	20000ab8 	.word	0x20000ab8

08003fd4 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003fde:	4b3f      	ldr	r3, [pc, #252]	@ (80040dc <writebuffertoflash+0x108>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11b      	bne.n	8004024 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003fec:	4b3c      	ldr	r3, [pc, #240]	@ (80040e0 <writebuffertoflash+0x10c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d117      	bne.n	8004024 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003ff4:	4b39      	ldr	r3, [pc, #228]	@ (80040dc <writebuffertoflash+0x108>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	da00      	bge.n	8004000 <writebuffertoflash+0x2c>
 8003ffe:	330f      	adds	r3, #15
 8004000:	111b      	asrs	r3, r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc fa66 	bl	80004d4 <__aeabi_i2d>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	f7fc fd7a 	bl	8000b08 <__aeabi_d2iz>
 8004014:	4603      	mov	r3, r0
 8004016:	4619      	mov	r1, r3
 8004018:	4832      	ldr	r0, [pc, #200]	@ (80040e4 <writebuffertoflash+0x110>)
 800401a:	f014 fe02 	bl	8018c22 <SPIF_EraseSector>
		sectoreraseen=1;
 800401e:	4b30      	ldr	r3, [pc, #192]	@ (80040e0 <writebuffertoflash+0x10c>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8004024:	4b30      	ldr	r3, [pc, #192]	@ (80040e8 <writebuffertoflash+0x114>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4413      	add	r3, r2
 800402c:	2bff      	cmp	r3, #255	@ 0xff
 800402e:	dc11      	bgt.n	8004054 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8004030:	4b2a      	ldr	r3, [pc, #168]	@ (80040dc <writebuffertoflash+0x108>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4619      	mov	r1, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	4a2b      	ldr	r2, [pc, #172]	@ (80040e8 <writebuffertoflash+0x114>)
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	9200      	str	r2, [sp, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4828      	ldr	r0, [pc, #160]	@ (80040e4 <writebuffertoflash+0x110>)
 8004042:	f014 fe71 	bl	8018d28 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8004046:	4b28      	ldr	r3, [pc, #160]	@ (80040e8 <writebuffertoflash+0x114>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	4413      	add	r3, r2
 800404e:	4a26      	ldr	r2, [pc, #152]	@ (80040e8 <writebuffertoflash+0x114>)
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e03c      	b.n	80040ce <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8004054:	4b21      	ldr	r3, [pc, #132]	@ (80040dc <writebuffertoflash+0x108>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	4b23      	ldr	r3, [pc, #140]	@ (80040e8 <writebuffertoflash+0x114>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004062:	461a      	mov	r2, r3
 8004064:	4b20      	ldr	r3, [pc, #128]	@ (80040e8 <writebuffertoflash+0x114>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	481d      	ldr	r0, [pc, #116]	@ (80040e4 <writebuffertoflash+0x110>)
 8004070:	f014 fe5a 	bl	8018d28 <SPIF_WritePage>
		HAL_Delay(100);
 8004074:	2064      	movs	r0, #100	@ 0x64
 8004076:	f7fd fd32 	bl	8001ade <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 800407a:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <writebuffertoflash+0x108>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3301      	adds	r3, #1
 8004080:	4618      	mov	r0, r3
 8004082:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <writebuffertoflash+0x114>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800408a:	461a      	mov	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1899      	adds	r1, r3, r2
 8004090:	4b15      	ldr	r3, [pc, #84]	@ (80040e8 <writebuffertoflash+0x114>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	461a      	mov	r2, r3
 800409e:	2300      	movs	r3, #0
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	460a      	mov	r2, r1
 80040a6:	4601      	mov	r1, r0
 80040a8:	480e      	ldr	r0, [pc, #56]	@ (80040e4 <writebuffertoflash+0x110>)
 80040aa:	f014 fe3d 	bl	8018d28 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <writebuffertoflash+0x108>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	4a09      	ldr	r2, [pc, #36]	@ (80040dc <writebuffertoflash+0x108>)
 80040b6:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <writebuffertoflash+0x10c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <writebuffertoflash+0x114>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	4a07      	ldr	r2, [pc, #28]	@ (80040e8 <writebuffertoflash+0x114>)
 80040cc:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 80040ce:	f7ff fed5 	bl	8003e7c <storeindex>

}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000ab8 	.word	0x20000ab8
 80040e0:	20000abc 	.word	0x20000abc
 80040e4:	20000880 	.word	0x20000880
 80040e8:	20000ab4 	.word	0x20000ab4

080040ec <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af04      	add	r7, sp, #16
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	2301      	movs	r3, #1
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	1dfb      	adds	r3, r7, #7
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2301      	movs	r3, #1
 8004116:	2200      	movs	r2, #0
 8004118:	2178      	movs	r1, #120	@ 0x78
 800411a:	4803      	ldr	r0, [pc, #12]	@ (8004128 <ssd1306_WriteCommand+0x2c>)
 800411c:	f006 fa64 	bl	800a5e8 <HAL_I2C_Mem_Write>
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000558 	.word	0x20000558

0800412c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af04      	add	r7, sp, #16
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f04f 32ff 	mov.w	r2, #4294967295
 800413e:	9202      	str	r2, [sp, #8]
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	2301      	movs	r3, #1
 8004148:	2240      	movs	r2, #64	@ 0x40
 800414a:	2178      	movs	r1, #120	@ 0x78
 800414c:	4803      	ldr	r0, [pc, #12]	@ (800415c <ssd1306_WriteData+0x30>)
 800414e:	f006 fa4b 	bl	800a5e8 <HAL_I2C_Mem_Write>
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000558 	.word	0x20000558

08004160 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004164:	f7ff ffc2 	bl	80040ec <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004168:	2064      	movs	r0, #100	@ 0x64
 800416a:	f7fd fcb8 	bl	8001ade <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800416e:	2000      	movs	r0, #0
 8004170:	f000 fba0 	bl	80048b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004174:	2020      	movs	r0, #32
 8004176:	f7ff ffc1 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800417a:	2000      	movs	r0, #0
 800417c:	f7ff ffbe 	bl	80040fc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004180:	20b0      	movs	r0, #176	@ 0xb0
 8004182:	f7ff ffbb 	bl	80040fc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004186:	20c8      	movs	r0, #200	@ 0xc8
 8004188:	f7ff ffb8 	bl	80040fc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800418c:	2000      	movs	r0, #0
 800418e:	f7ff ffb5 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004192:	2010      	movs	r0, #16
 8004194:	f7ff ffb2 	bl	80040fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004198:	2040      	movs	r0, #64	@ 0x40
 800419a:	f7ff ffaf 	bl	80040fc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800419e:	20ff      	movs	r0, #255	@ 0xff
 80041a0:	f000 fb75 	bl	800488e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80041a4:	20a1      	movs	r0, #161	@ 0xa1
 80041a6:	f7ff ffa9 	bl	80040fc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80041aa:	20a6      	movs	r0, #166	@ 0xa6
 80041ac:	f7ff ffa6 	bl	80040fc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80041b0:	20a8      	movs	r0, #168	@ 0xa8
 80041b2:	f7ff ffa3 	bl	80040fc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80041b6:	203f      	movs	r0, #63	@ 0x3f
 80041b8:	f7ff ffa0 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80041bc:	20a4      	movs	r0, #164	@ 0xa4
 80041be:	f7ff ff9d 	bl	80040fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80041c2:	20d3      	movs	r0, #211	@ 0xd3
 80041c4:	f7ff ff9a 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80041c8:	2000      	movs	r0, #0
 80041ca:	f7ff ff97 	bl	80040fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80041ce:	20d5      	movs	r0, #213	@ 0xd5
 80041d0:	f7ff ff94 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80041d4:	20f0      	movs	r0, #240	@ 0xf0
 80041d6:	f7ff ff91 	bl	80040fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80041da:	20d9      	movs	r0, #217	@ 0xd9
 80041dc:	f7ff ff8e 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80041e0:	2022      	movs	r0, #34	@ 0x22
 80041e2:	f7ff ff8b 	bl	80040fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80041e6:	20da      	movs	r0, #218	@ 0xda
 80041e8:	f7ff ff88 	bl	80040fc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80041ec:	2012      	movs	r0, #18
 80041ee:	f7ff ff85 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80041f2:	20db      	movs	r0, #219	@ 0xdb
 80041f4:	f7ff ff82 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80041f8:	2020      	movs	r0, #32
 80041fa:	f7ff ff7f 	bl	80040fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80041fe:	208d      	movs	r0, #141	@ 0x8d
 8004200:	f7ff ff7c 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004204:	2014      	movs	r0, #20
 8004206:	f7ff ff79 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800420a:	2001      	movs	r0, #1
 800420c:	f000 fb52 	bl	80048b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004210:	2000      	movs	r0, #0
 8004212:	f000 f80f 	bl	8004234 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004216:	f000 f825 	bl	8004264 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800421a:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <ssd1306_Init+0xd0>)
 800421c:	2200      	movs	r2, #0
 800421e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004220:	4b03      	ldr	r3, [pc, #12]	@ (8004230 <ssd1306_Init+0xd0>)
 8004222:	2200      	movs	r2, #0
 8004224:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004226:	4b02      	ldr	r3, [pc, #8]	@ (8004230 <ssd1306_Init+0xd0>)
 8004228:	2201      	movs	r2, #1
 800422a:	711a      	strb	r2, [r3, #4]
}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}
 8004230:	2000127c 	.word	0x2000127c

08004234 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <ssd1306_Fill+0x14>
 8004244:	2300      	movs	r3, #0
 8004246:	e000      	b.n	800424a <ssd1306_Fill+0x16>
 8004248:	23ff      	movs	r3, #255	@ 0xff
 800424a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800424e:	4619      	mov	r1, r3
 8004250:	4803      	ldr	r0, [pc, #12]	@ (8004260 <ssd1306_Fill+0x2c>)
 8004252:	f018 fb4e 	bl	801c8f2 <memset>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000e7c 	.word	0x20000e7c

08004264 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800426a:	2300      	movs	r3, #0
 800426c:	71fb      	strb	r3, [r7, #7]
 800426e:	e016      	b.n	800429e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	3b50      	subs	r3, #80	@ 0x50
 8004274:	b2db      	uxtb	r3, r3
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff40 	bl	80040fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800427c:	2000      	movs	r0, #0
 800427e:	f7ff ff3d 	bl	80040fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004282:	2010      	movs	r0, #16
 8004284:	f7ff ff3a 	bl	80040fc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	4a08      	ldr	r2, [pc, #32]	@ (80042b0 <ssd1306_UpdateScreen+0x4c>)
 800428e:	4413      	add	r3, r2
 8004290:	2180      	movs	r1, #128	@ 0x80
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff4a 	bl	800412c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	3301      	adds	r3, #1
 800429c:	71fb      	strb	r3, [r7, #7]
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	2b07      	cmp	r3, #7
 80042a2:	d9e5      	bls.n	8004270 <ssd1306_UpdateScreen+0xc>
    }
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000e7c 	.word	0x20000e7c

080042b4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
 80042be:	460b      	mov	r3, r1
 80042c0:	71bb      	strb	r3, [r7, #6]
 80042c2:	4613      	mov	r3, r2
 80042c4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	db3d      	blt.n	800434a <ssd1306_DrawPixel+0x96>
 80042ce:	79bb      	ldrb	r3, [r7, #6]
 80042d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80042d2:	d83a      	bhi.n	800434a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80042d4:	797b      	ldrb	r3, [r7, #5]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d11a      	bne.n	8004310 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80042da:	79fa      	ldrb	r2, [r7, #7]
 80042dc:	79bb      	ldrb	r3, [r7, #6]
 80042de:	08db      	lsrs	r3, r3, #3
 80042e0:	b2d8      	uxtb	r0, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	01db      	lsls	r3, r3, #7
 80042e6:	4413      	add	r3, r2
 80042e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <ssd1306_DrawPixel+0xa4>)
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	b25a      	sxtb	r2, r3
 80042ee:	79bb      	ldrb	r3, [r7, #6]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b259      	sxtb	r1, r3
 8004300:	79fa      	ldrb	r2, [r7, #7]
 8004302:	4603      	mov	r3, r0
 8004304:	01db      	lsls	r3, r3, #7
 8004306:	4413      	add	r3, r2
 8004308:	b2c9      	uxtb	r1, r1
 800430a:	4a13      	ldr	r2, [pc, #76]	@ (8004358 <ssd1306_DrawPixel+0xa4>)
 800430c:	54d1      	strb	r1, [r2, r3]
 800430e:	e01d      	b.n	800434c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004310:	79fa      	ldrb	r2, [r7, #7]
 8004312:	79bb      	ldrb	r3, [r7, #6]
 8004314:	08db      	lsrs	r3, r3, #3
 8004316:	b2d8      	uxtb	r0, r3
 8004318:	4603      	mov	r3, r0
 800431a:	01db      	lsls	r3, r3, #7
 800431c:	4413      	add	r3, r2
 800431e:	4a0e      	ldr	r2, [pc, #56]	@ (8004358 <ssd1306_DrawPixel+0xa4>)
 8004320:	5cd3      	ldrb	r3, [r2, r3]
 8004322:	b25a      	sxtb	r2, r3
 8004324:	79bb      	ldrb	r3, [r7, #6]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	2101      	movs	r1, #1
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	b25b      	sxtb	r3, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	b25b      	sxtb	r3, r3
 8004336:	4013      	ands	r3, r2
 8004338:	b259      	sxtb	r1, r3
 800433a:	79fa      	ldrb	r2, [r7, #7]
 800433c:	4603      	mov	r3, r0
 800433e:	01db      	lsls	r3, r3, #7
 8004340:	4413      	add	r3, r2
 8004342:	b2c9      	uxtb	r1, r1
 8004344:	4a04      	ldr	r2, [pc, #16]	@ (8004358 <ssd1306_DrawPixel+0xa4>)
 8004346:	54d1      	strb	r1, [r2, r3]
 8004348:	e000      	b.n	800434c <ssd1306_DrawPixel+0x98>
        return;
 800434a:	bf00      	nop
    }
}
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000e7c 	.word	0x20000e7c

0800435c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b089      	sub	sp, #36	@ 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	4604      	mov	r4, r0
 8004364:	1d38      	adds	r0, r7, #4
 8004366:	e880 0006 	stmia.w	r0, {r1, r2}
 800436a:	461a      	mov	r2, r3
 800436c:	4623      	mov	r3, r4
 800436e:	73fb      	strb	r3, [r7, #15]
 8004370:	4613      	mov	r3, r2
 8004372:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b1f      	cmp	r3, #31
 8004378:	d902      	bls.n	8004380 <ssd1306_WriteChar+0x24>
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b7e      	cmp	r3, #126	@ 0x7e
 800437e:	d901      	bls.n	8004384 <ssd1306_WriteChar+0x28>
        return 0;
 8004380:	2300      	movs	r3, #0
 8004382:	e06c      	b.n	800445e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004384:	4b38      	ldr	r3, [pc, #224]	@ (8004468 <ssd1306_WriteChar+0x10c>)
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	793b      	ldrb	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	2b80      	cmp	r3, #128	@ 0x80
 8004390:	dc06      	bgt.n	80043a0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004392:	4b35      	ldr	r3, [pc, #212]	@ (8004468 <ssd1306_WriteChar+0x10c>)
 8004394:	885b      	ldrh	r3, [r3, #2]
 8004396:	461a      	mov	r2, r3
 8004398:	797b      	ldrb	r3, [r7, #5]
 800439a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800439c:	2b40      	cmp	r3, #64	@ 0x40
 800439e:	dd01      	ble.n	80043a4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e05c      	b.n	800445e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e04c      	b.n	8004444 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	3b20      	subs	r3, #32
 80043b0:	7979      	ldrb	r1, [r7, #5]
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	440b      	add	r3, r1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e034      	b.n	8004434 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d012      	beq.n	8004400 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80043da:	4b23      	ldr	r3, [pc, #140]	@ (8004468 <ssd1306_WriteChar+0x10c>)
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	b2d8      	uxtb	r0, r3
 80043e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004468 <ssd1306_WriteChar+0x10c>)
 80043ea:	885b      	ldrh	r3, [r3, #2]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	7bba      	ldrb	r2, [r7, #14]
 80043f8:	4619      	mov	r1, r3
 80043fa:	f7ff ff5b 	bl	80042b4 <ssd1306_DrawPixel>
 80043fe:	e016      	b.n	800442e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004400:	4b19      	ldr	r3, [pc, #100]	@ (8004468 <ssd1306_WriteChar+0x10c>)
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4413      	add	r3, r2
 800440c:	b2d8      	uxtb	r0, r3
 800440e:	4b16      	ldr	r3, [pc, #88]	@ (8004468 <ssd1306_WriteChar+0x10c>)
 8004410:	885b      	ldrh	r3, [r3, #2]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4413      	add	r3, r2
 800441a:	b2d9      	uxtb	r1, r3
 800441c:	7bbb      	ldrb	r3, [r7, #14]
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf0c      	ite	eq
 8004422:	2301      	moveq	r3, #1
 8004424:	2300      	movne	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	f7ff ff43 	bl	80042b4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	3301      	adds	r3, #1
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	793b      	ldrb	r3, [r7, #4]
 8004436:	461a      	mov	r2, r3
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4293      	cmp	r3, r2
 800443c:	d3c5      	bcc.n	80043ca <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3301      	adds	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	797b      	ldrb	r3, [r7, #5]
 8004446:	461a      	mov	r2, r3
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4293      	cmp	r3, r2
 800444c:	d3ad      	bcc.n	80043aa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800444e:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <ssd1306_WriteChar+0x10c>)
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	793a      	ldrb	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	b29a      	uxth	r2, r3
 8004458:	4b03      	ldr	r3, [pc, #12]	@ (8004468 <ssd1306_WriteChar+0x10c>)
 800445a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3724      	adds	r7, #36	@ 0x24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd90      	pop	{r4, r7, pc}
 8004466:	bf00      	nop
 8004468:	2000127c 	.word	0x2000127c

0800446c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	1d38      	adds	r0, r7, #4
 8004476:	e880 0006 	stmia.w	r0, {r1, r2}
 800447a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800447c:	e012      	b.n	80044a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	7818      	ldrb	r0, [r3, #0]
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	1d3a      	adds	r2, r7, #4
 8004486:	ca06      	ldmia	r2, {r1, r2}
 8004488:	f7ff ff68 	bl	800435c <ssd1306_WriteChar>
 800448c:	4603      	mov	r3, r0
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d002      	beq.n	800449e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	e008      	b.n	80044b0 <ssd1306_WriteString+0x44>
        }
        str++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e8      	bne.n	800447e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	781b      	ldrb	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	460a      	mov	r2, r1
 80044c2:	71fb      	strb	r3, [r7, #7]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	4b05      	ldr	r3, [pc, #20]	@ (80044e4 <ssd1306_SetCursor+0x2c>)
 80044ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80044d0:	79bb      	ldrb	r3, [r7, #6]
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	4b03      	ldr	r3, [pc, #12]	@ (80044e4 <ssd1306_SetCursor+0x2c>)
 80044d6:	805a      	strh	r2, [r3, #2]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	2000127c 	.word	0x2000127c

080044e8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b089      	sub	sp, #36	@ 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4604      	mov	r4, r0
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	71fb      	strb	r3, [r7, #7]
 80044fa:	4603      	mov	r3, r0
 80044fc:	71bb      	strb	r3, [r7, #6]
 80044fe:	460b      	mov	r3, r1
 8004500:	717b      	strb	r3, [r7, #5]
 8004502:	4613      	mov	r3, r2
 8004504:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8004506:	797a      	ldrb	r2, [r7, #5]
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	bfb8      	it	lt
 8004510:	425b      	neglt	r3, r3
 8004512:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8004514:	793a      	ldrb	r2, [r7, #4]
 8004516:	79bb      	ldrb	r3, [r7, #6]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	bfb8      	it	lt
 800451e:	425b      	neglt	r3, r3
 8004520:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8004522:	79fa      	ldrb	r2, [r7, #7]
 8004524:	797b      	ldrb	r3, [r7, #5]
 8004526:	429a      	cmp	r2, r3
 8004528:	d201      	bcs.n	800452e <ssd1306_Line+0x46>
 800452a:	2301      	movs	r3, #1
 800452c:	e001      	b.n	8004532 <ssd1306_Line+0x4a>
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8004534:	79ba      	ldrb	r2, [r7, #6]
 8004536:	793b      	ldrb	r3, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	d201      	bcs.n	8004540 <ssd1306_Line+0x58>
 800453c:	2301      	movs	r3, #1
 800453e:	e001      	b.n	8004544 <ssd1306_Line+0x5c>
 8004540:	f04f 33ff 	mov.w	r3, #4294967295
 8004544:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800454e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004552:	7939      	ldrb	r1, [r7, #4]
 8004554:	797b      	ldrb	r3, [r7, #5]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff feac 	bl	80042b4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800455c:	e024      	b.n	80045a8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800455e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004562:	79b9      	ldrb	r1, [r7, #6]
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fea4 	bl	80042b4 <ssd1306_DrawPixel>
        error2 = error * 2;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	425b      	negs	r3, r3
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	dd08      	ble.n	800458e <ssd1306_Line+0xa6>
            error -= deltaY;
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	b2da      	uxtb	r2, r3
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	4413      	add	r3, r2
 800458c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	429a      	cmp	r2, r3
 8004594:	da08      	bge.n	80045a8 <ssd1306_Line+0xc0>
            error += deltaX;
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	4413      	add	r3, r2
 800459c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	79bb      	ldrb	r3, [r7, #6]
 80045a4:	4413      	add	r3, r2
 80045a6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80045a8:	79fa      	ldrb	r2, [r7, #7]
 80045aa:	797b      	ldrb	r3, [r7, #5]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d1d6      	bne.n	800455e <ssd1306_Line+0x76>
 80045b0:	79ba      	ldrb	r2, [r7, #6]
 80045b2:	793b      	ldrb	r3, [r7, #4]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1d2      	bne.n	800455e <ssd1306_Line+0x76>
        }
    }
    return;
 80045b8:	bf00      	nop
}
 80045ba:	3724      	adds	r7, #36	@ 0x24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd90      	pop	{r4, r7, pc}

080045c0 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4604      	mov	r4, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	461a      	mov	r2, r3
 80045ce:	4623      	mov	r3, r4
 80045d0:	71fb      	strb	r3, [r7, #7]
 80045d2:	4603      	mov	r3, r0
 80045d4:	71bb      	strb	r3, [r7, #6]
 80045d6:	460b      	mov	r3, r1
 80045d8:	717b      	strb	r3, [r7, #5]
 80045da:	4613      	mov	r3, r2
 80045dc:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80045de:	797b      	ldrb	r3, [r7, #5]
 80045e0:	425b      	negs	r3, r3
 80045e2:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80045e8:	797b      	ldrb	r3, [r7, #5]
 80045ea:	f1c3 0301 	rsb	r3, r3, #1
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	db65      	blt.n	80046c6 <ssd1306_DrawCircle+0x106>
 80045fa:	79bb      	ldrb	r3, [r7, #6]
 80045fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80045fe:	d862      	bhi.n	80046c6 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	79fa      	ldrb	r2, [r7, #7]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	b2d8      	uxtb	r0, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	79bb      	ldrb	r3, [r7, #6]
 8004610:	4413      	add	r3, r2
 8004612:	b2db      	uxtb	r3, r3
 8004614:	793a      	ldrb	r2, [r7, #4]
 8004616:	4619      	mov	r1, r3
 8004618:	f7ff fe4c 	bl	80042b4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	b2da      	uxtb	r2, r3
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	4413      	add	r3, r2
 8004624:	b2d8      	uxtb	r0, r3
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	79bb      	ldrb	r3, [r7, #6]
 800462c:	4413      	add	r3, r2
 800462e:	b2db      	uxtb	r3, r3
 8004630:	793a      	ldrb	r2, [r7, #4]
 8004632:	4619      	mov	r1, r3
 8004634:	f7ff fe3e 	bl	80042b4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	4413      	add	r3, r2
 8004640:	b2d8      	uxtb	r0, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	79ba      	ldrb	r2, [r7, #6]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	793a      	ldrb	r2, [r7, #4]
 800464e:	4619      	mov	r1, r3
 8004650:	f7ff fe30 	bl	80042b4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	79fa      	ldrb	r2, [r7, #7]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	b2d8      	uxtb	r0, r3
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	79ba      	ldrb	r2, [r7, #6]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	793a      	ldrb	r2, [r7, #4]
 800466a:	4619      	mov	r1, r3
 800466c:	f7ff fe22 	bl	80042b4 <ssd1306_DrawPixel>
        e2 = err;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	429a      	cmp	r2, r3
 800467a:	dc13      	bgt.n	80046a4 <ssd1306_DrawCircle+0xe4>
            y++;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	3301      	adds	r3, #1
 8004680:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	3301      	adds	r3, #1
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	425b      	negs	r3, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d105      	bne.n	80046a4 <ssd1306_DrawCircle+0xe4>
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	dc01      	bgt.n	80046a4 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	dd08      	ble.n	80046be <ssd1306_DrawCircle+0xfe>
            x++;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3301      	adds	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	3301      	adds	r3, #1
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	dd9d      	ble.n	8004600 <ssd1306_DrawCircle+0x40>

    return;
 80046c4:	e000      	b.n	80046c8 <ssd1306_DrawCircle+0x108>
        return;
 80046c6:	bf00      	nop
}
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd90      	pop	{r4, r7, pc}

080046ce <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80046ce:	b590      	push	{r4, r7, lr}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af02      	add	r7, sp, #8
 80046d4:	4604      	mov	r4, r0
 80046d6:	4608      	mov	r0, r1
 80046d8:	4611      	mov	r1, r2
 80046da:	461a      	mov	r2, r3
 80046dc:	4623      	mov	r3, r4
 80046de:	71fb      	strb	r3, [r7, #7]
 80046e0:	4603      	mov	r3, r0
 80046e2:	71bb      	strb	r3, [r7, #6]
 80046e4:	460b      	mov	r3, r1
 80046e6:	717b      	strb	r3, [r7, #5]
 80046e8:	4613      	mov	r3, r2
 80046ea:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80046ec:	79bc      	ldrb	r4, [r7, #6]
 80046ee:	797a      	ldrb	r2, [r7, #5]
 80046f0:	79b9      	ldrb	r1, [r7, #6]
 80046f2:	79f8      	ldrb	r0, [r7, #7]
 80046f4:	7e3b      	ldrb	r3, [r7, #24]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	4623      	mov	r3, r4
 80046fa:	f7ff fef5 	bl	80044e8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80046fe:	793c      	ldrb	r4, [r7, #4]
 8004700:	797a      	ldrb	r2, [r7, #5]
 8004702:	79b9      	ldrb	r1, [r7, #6]
 8004704:	7978      	ldrb	r0, [r7, #5]
 8004706:	7e3b      	ldrb	r3, [r7, #24]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	4623      	mov	r3, r4
 800470c:	f7ff feec 	bl	80044e8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8004710:	793c      	ldrb	r4, [r7, #4]
 8004712:	79fa      	ldrb	r2, [r7, #7]
 8004714:	7939      	ldrb	r1, [r7, #4]
 8004716:	7978      	ldrb	r0, [r7, #5]
 8004718:	7e3b      	ldrb	r3, [r7, #24]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	4623      	mov	r3, r4
 800471e:	f7ff fee3 	bl	80044e8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8004722:	79bc      	ldrb	r4, [r7, #6]
 8004724:	79fa      	ldrb	r2, [r7, #7]
 8004726:	7939      	ldrb	r1, [r7, #4]
 8004728:	79f8      	ldrb	r0, [r7, #7]
 800472a:	7e3b      	ldrb	r3, [r7, #24]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	4623      	mov	r3, r4
 8004730:	f7ff feda 	bl	80044e8 <ssd1306_Line>

    return;
 8004734:	bf00      	nop
}
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bd90      	pop	{r4, r7, pc}

0800473c <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	4604      	mov	r4, r0
 8004744:	4608      	mov	r0, r1
 8004746:	4611      	mov	r1, r2
 8004748:	461a      	mov	r2, r3
 800474a:	4623      	mov	r3, r4
 800474c:	71fb      	strb	r3, [r7, #7]
 800474e:	4603      	mov	r3, r0
 8004750:	71bb      	strb	r3, [r7, #6]
 8004752:	460b      	mov	r3, r1
 8004754:	717b      	strb	r3, [r7, #5]
 8004756:	4613      	mov	r3, r2
 8004758:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800475a:	79fa      	ldrb	r2, [r7, #7]
 800475c:	797b      	ldrb	r3, [r7, #5]
 800475e:	4293      	cmp	r3, r2
 8004760:	bf28      	it	cs
 8004762:	4613      	movcs	r3, r2
 8004764:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004766:	797a      	ldrb	r2, [r7, #5]
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	4293      	cmp	r3, r2
 800476c:	bf38      	it	cc
 800476e:	4613      	movcc	r3, r2
 8004770:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8004772:	79ba      	ldrb	r2, [r7, #6]
 8004774:	793b      	ldrb	r3, [r7, #4]
 8004776:	4293      	cmp	r3, r2
 8004778:	bf28      	it	cs
 800477a:	4613      	movcs	r3, r2
 800477c:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800477e:	793a      	ldrb	r2, [r7, #4]
 8004780:	79bb      	ldrb	r3, [r7, #6]
 8004782:	4293      	cmp	r3, r2
 8004784:	bf38      	it	cc
 8004786:	4613      	movcc	r3, r2
 8004788:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800478a:	7afb      	ldrb	r3, [r7, #11]
 800478c:	73fb      	strb	r3, [r7, #15]
 800478e:	e017      	b.n	80047c0 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004790:	7b7b      	ldrb	r3, [r7, #13]
 8004792:	73bb      	strb	r3, [r7, #14]
 8004794:	e009      	b.n	80047aa <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004796:	f897 2020 	ldrb.w	r2, [r7, #32]
 800479a:	7bf9      	ldrb	r1, [r7, #15]
 800479c:	7bbb      	ldrb	r3, [r7, #14]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fd88 	bl	80042b4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80047a4:	7bbb      	ldrb	r3, [r7, #14]
 80047a6:	3301      	adds	r3, #1
 80047a8:	73bb      	strb	r3, [r7, #14]
 80047aa:	7bba      	ldrb	r2, [r7, #14]
 80047ac:	7b3b      	ldrb	r3, [r7, #12]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d803      	bhi.n	80047ba <ssd1306_FillRectangle+0x7e>
 80047b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	daed      	bge.n	8004796 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	3301      	adds	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	7abb      	ldrb	r3, [r7, #10]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d803      	bhi.n	80047d0 <ssd1306_FillRectangle+0x94>
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80047cc:	d9e0      	bls.n	8004790 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80047ce:	bf00      	nop
 80047d0:	bf00      	nop
}
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd90      	pop	{r4, r7, pc}

080047d8 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	603a      	str	r2, [r7, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
 80047e6:	460b      	mov	r3, r1
 80047e8:	71bb      	strb	r3, [r7, #6]
 80047ea:	4613      	mov	r3, r2
 80047ec:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80047ee:	797b      	ldrb	r3, [r7, #5]
 80047f0:	3307      	adds	r3, #7
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da00      	bge.n	80047f8 <ssd1306_DrawBitmap+0x20>
 80047f6:	3307      	adds	r3, #7
 80047f8:	10db      	asrs	r3, r3, #3
 80047fa:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004804:	2b00      	cmp	r3, #0
 8004806:	db3e      	blt.n	8004886 <ssd1306_DrawBitmap+0xae>
 8004808:	79bb      	ldrb	r3, [r7, #6]
 800480a:	2b3f      	cmp	r3, #63	@ 0x3f
 800480c:	d83b      	bhi.n	8004886 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800480e:	2300      	movs	r3, #0
 8004810:	73bb      	strb	r3, [r7, #14]
 8004812:	e033      	b.n	800487c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8004814:	2300      	movs	r3, #0
 8004816:	737b      	strb	r3, [r7, #13]
 8004818:	e026      	b.n	8004868 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800481a:	7b7b      	ldrb	r3, [r7, #13]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
 800482a:	e00d      	b.n	8004848 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800482c:	7bbb      	ldrb	r3, [r7, #14]
 800482e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	7b7a      	ldrb	r2, [r7, #13]
 8004838:	08d2      	lsrs	r2, r2, #3
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	4413      	add	r3, r2
 800483e:	461a      	mov	r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4413      	add	r3, r2
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8004848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800484c:	2b00      	cmp	r3, #0
 800484e:	da08      	bge.n	8004862 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8004850:	79fa      	ldrb	r2, [r7, #7]
 8004852:	7b7b      	ldrb	r3, [r7, #13]
 8004854:	4413      	add	r3, r2
 8004856:	b2db      	uxtb	r3, r3
 8004858:	7f3a      	ldrb	r2, [r7, #28]
 800485a:	79b9      	ldrb	r1, [r7, #6]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fd29 	bl	80042b4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8004862:	7b7b      	ldrb	r3, [r7, #13]
 8004864:	3301      	adds	r3, #1
 8004866:	737b      	strb	r3, [r7, #13]
 8004868:	7b7a      	ldrb	r2, [r7, #13]
 800486a:	797b      	ldrb	r3, [r7, #5]
 800486c:	429a      	cmp	r2, r3
 800486e:	d3d4      	bcc.n	800481a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8004870:	7bbb      	ldrb	r3, [r7, #14]
 8004872:	3301      	adds	r3, #1
 8004874:	73bb      	strb	r3, [r7, #14]
 8004876:	79bb      	ldrb	r3, [r7, #6]
 8004878:	3301      	adds	r3, #1
 800487a:	71bb      	strb	r3, [r7, #6]
 800487c:	7bba      	ldrb	r2, [r7, #14]
 800487e:	7e3b      	ldrb	r3, [r7, #24]
 8004880:	429a      	cmp	r2, r3
 8004882:	d3c7      	bcc.n	8004814 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004884:	e000      	b.n	8004888 <ssd1306_DrawBitmap+0xb0>
        return;
 8004886:	bf00      	nop
}
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	4603      	mov	r3, r0
 8004896:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004898:	2381      	movs	r3, #129	@ 0x81
 800489a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fc2c 	bl	80040fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fc28 	bl	80040fc <ssd1306_WriteCommand>
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80048c4:	23af      	movs	r3, #175	@ 0xaf
 80048c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80048c8:	4b08      	ldr	r3, [pc, #32]	@ (80048ec <ssd1306_SetDisplayOn+0x38>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	715a      	strb	r2, [r3, #5]
 80048ce:	e004      	b.n	80048da <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80048d0:	23ae      	movs	r3, #174	@ 0xae
 80048d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <ssd1306_SetDisplayOn+0x38>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fc0d 	bl	80040fc <ssd1306_WriteCommand>
}
 80048e2:	bf00      	nop
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	2000127c 	.word	0x2000127c

080048f0 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80048fa:	60b8      	str	r0, [r7, #8]
 80048fc:	6079      	str	r1, [r7, #4]
 80048fe:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	330f      	adds	r3, #15
 8004906:	b2d8      	uxtb	r0, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	3301      	adds	r3, #1
 800490e:	b2d9      	uxtb	r1, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	330f      	adds	r3, #15
 8004916:	b2da      	uxtb	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	3305      	adds	r3, #5
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2401      	movs	r4, #1
 8004922:	9400      	str	r4, [sp, #0]
 8004924:	f7ff fde0 	bl	80044e8 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	3310      	adds	r3, #16
 800492e:	b2d8      	uxtb	r0, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3301      	adds	r3, #1
 8004936:	b2d9      	uxtb	r1, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	3310      	adds	r3, #16
 800493e:	b2da      	uxtb	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	3305      	adds	r3, #5
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2401      	movs	r4, #1
 800494a:	9400      	str	r4, [sp, #0]
 800494c:	f7ff fdcc 	bl	80044e8 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	b2d8      	uxtb	r0, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	b2d9      	uxtb	r1, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	330e      	adds	r3, #14
 800495e:	b2da      	uxtb	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	3306      	adds	r3, #6
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2401      	movs	r4, #1
 800496a:	9400      	str	r4, [sp, #0]
 800496c:	f7ff feaf 	bl	80046ce <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7fb fdc1 	bl	80004f8 <__aeabi_f2d>
 8004976:	a396      	add	r3, pc, #600	@ (adr r3, 8004bd0 <batterygauge+0x2e0>)
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f7fc f890 	bl	8000aa0 <__aeabi_dcmple>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d02a      	beq.n	80049dc <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	3302      	adds	r3, #2
 800498c:	b2d8      	uxtb	r0, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	3302      	adds	r3, #2
 8004994:	b2d9      	uxtb	r1, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	3303      	adds	r3, #3
 800499c:	b2da      	uxtb	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	3304      	adds	r3, #4
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2401      	movs	r4, #1
 80049a8:	9400      	str	r4, [sp, #0]
 80049aa:	f7ff fe90 	bl	80046ce <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d113      	bne.n	80049dc <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	3302      	adds	r3, #2
 80049ba:	b2d8      	uxtb	r0, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	3302      	adds	r3, #2
 80049c2:	b2d9      	uxtb	r1, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	3303      	adds	r3, #3
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	3304      	adds	r3, #4
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2401      	movs	r4, #1
 80049d6:	9400      	str	r4, [sp, #0]
 80049d8:	f7ff fe79 	bl	80046ce <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7fb fd8b 	bl	80004f8 <__aeabi_f2d>
 80049e2:	a37b      	add	r3, pc, #492	@ (adr r3, 8004bd0 <batterygauge+0x2e0>)
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f7fc f86e 	bl	8000ac8 <__aeabi_dcmpgt>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d035      	beq.n	8004a5e <batterygauge+0x16e>
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7fb fd80 	bl	80004f8 <__aeabi_f2d>
 80049f8:	a377      	add	r3, pc, #476	@ (adr r3, 8004bd8 <batterygauge+0x2e8>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f7fc f84f 	bl	8000aa0 <__aeabi_dcmple>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d02a      	beq.n	8004a5e <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	b2d8      	uxtb	r0, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	3302      	adds	r3, #2
 8004a16:	b2d9      	uxtb	r1, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3303      	adds	r3, #3
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	3304      	adds	r3, #4
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2401      	movs	r4, #1
 8004a2a:	9400      	str	r4, [sp, #0]
 8004a2c:	f7ff fe4f 	bl	80046ce <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d113      	bne.n	8004a5e <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	3305      	adds	r3, #5
 8004a3c:	b2d8      	uxtb	r0, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	3302      	adds	r3, #2
 8004a44:	b2d9      	uxtb	r1, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	3306      	adds	r3, #6
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	3304      	adds	r3, #4
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2401      	movs	r4, #1
 8004a58:	9400      	str	r4, [sp, #0]
 8004a5a:	f7ff fe38 	bl	80046ce <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7fb fd4a 	bl	80004f8 <__aeabi_f2d>
 8004a64:	a35c      	add	r3, pc, #368	@ (adr r3, 8004bd8 <batterygauge+0x2e8>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f7fc f82d 	bl	8000ac8 <__aeabi_dcmpgt>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d049      	beq.n	8004b08 <batterygauge+0x218>
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7fb fd3f 	bl	80004f8 <__aeabi_f2d>
 8004a7a:	a359      	add	r3, pc, #356	@ (adr r3, 8004be0 <batterygauge+0x2f0>)
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f7fc f80e 	bl	8000aa0 <__aeabi_dcmple>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d03e      	beq.n	8004b08 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	3302      	adds	r3, #2
 8004a90:	b2d8      	uxtb	r0, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	3302      	adds	r3, #2
 8004a98:	b2d9      	uxtb	r1, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	3303      	adds	r3, #3
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2401      	movs	r4, #1
 8004aac:	9400      	str	r4, [sp, #0]
 8004aae:	f7ff fe0e 	bl	80046ce <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	3305      	adds	r3, #5
 8004ab8:	b2d8      	uxtb	r0, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	3302      	adds	r3, #2
 8004ac0:	b2d9      	uxtb	r1, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	3306      	adds	r3, #6
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	3304      	adds	r3, #4
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2401      	movs	r4, #1
 8004ad4:	9400      	str	r4, [sp, #0]
 8004ad6:	f7ff fdfa 	bl	80046ce <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d113      	bne.n	8004b08 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	b2d8      	uxtb	r0, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	3302      	adds	r3, #2
 8004aee:	b2d9      	uxtb	r1, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	3309      	adds	r3, #9
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	3304      	adds	r3, #4
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2401      	movs	r4, #1
 8004b02:	9400      	str	r4, [sp, #0]
 8004b04:	f7ff fde3 	bl	80046ce <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7fb fcf5 	bl	80004f8 <__aeabi_f2d>
 8004b0e:	a334      	add	r3, pc, #208	@ (adr r3, 8004be0 <batterygauge+0x2f0>)
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f7fb ffd8 	bl	8000ac8 <__aeabi_dcmpgt>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d100      	bne.n	8004b20 <batterygauge+0x230>
	}




}
 8004b1e:	e052      	b.n	8004bc6 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3302      	adds	r3, #2
 8004b26:	b2d8      	uxtb	r0, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	b2d9      	uxtb	r1, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	3303      	adds	r3, #3
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2401      	movs	r4, #1
 8004b42:	9400      	str	r4, [sp, #0]
 8004b44:	f7ff fdc3 	bl	80046ce <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	3305      	adds	r3, #5
 8004b4e:	b2d8      	uxtb	r0, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	3302      	adds	r3, #2
 8004b56:	b2d9      	uxtb	r1, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	3306      	adds	r3, #6
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	3304      	adds	r3, #4
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2401      	movs	r4, #1
 8004b6a:	9400      	str	r4, [sp, #0]
 8004b6c:	f7ff fdaf 	bl	80046ce <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	3308      	adds	r3, #8
 8004b76:	b2d8      	uxtb	r0, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	3302      	adds	r3, #2
 8004b7e:	b2d9      	uxtb	r1, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	3309      	adds	r3, #9
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2401      	movs	r4, #1
 8004b92:	9400      	str	r4, [sp, #0]
 8004b94:	f7ff fd9b 	bl	80046ce <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d113      	bne.n	8004bc6 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	330b      	adds	r3, #11
 8004ba4:	b2d8      	uxtb	r0, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	3302      	adds	r3, #2
 8004bac:	b2d9      	uxtb	r1, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	330c      	adds	r3, #12
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	3304      	adds	r3, #4
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2401      	movs	r4, #1
 8004bc0:	9400      	str	r4, [sp, #0]
 8004bc2:	f7ff fd84 	bl	80046ce <ssd1306_DrawRectangle>
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd90      	pop	{r4, r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	9999999a 	.word	0x9999999a
 8004bd4:	400d9999 	.word	0x400d9999
 8004bd8:	33333333 	.word	0x33333333
 8004bdc:	400f3333 	.word	0x400f3333
 8004be0:	66666666 	.word	0x66666666
 8004be4:	40106666 	.word	0x40106666

08004be8 <percentage>:

void percentage(float percent){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 20, floor(0.64*percent+32), 36, White);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fb fc80 	bl	80004f8 <__aeabi_f2d>
 8004bf8:	a329      	add	r3, pc, #164	@ (adr r3, 8004ca0 <percentage+0xb8>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fcd3 	bl	80005a8 <__aeabi_dmul>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	4b20      	ldr	r3, [pc, #128]	@ (8004c90 <percentage+0xa8>)
 8004c10:	f7fb fb14 	bl	800023c <__adddf3>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	ec43 2b17 	vmov	d7, r2, r3
 8004c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8004c20:	eef0 0a67 	vmov.f32	s1, s15
 8004c24:	f01a fcec 	bl	801f600 <floor>
 8004c28:	ec53 2b10 	vmov	r2, r3, d0
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f7fb ff92 	bl	8000b58 <__aeabi_d2uiz>
 8004c34:	4603      	mov	r3, r0
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	2301      	movs	r3, #1
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2324      	movs	r3, #36	@ 0x24
 8004c3e:	2114      	movs	r1, #20
 8004c40:	2020      	movs	r0, #32
 8004c42:	f7ff fd7b 	bl	800473c <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 20, 95, 36, White);
 8004c46:	2301      	movs	r3, #1
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2324      	movs	r3, #36	@ 0x24
 8004c4c:	225f      	movs	r2, #95	@ 0x5f
 8004c4e:	2114      	movs	r1, #20
 8004c50:	2020      	movs	r0, #32
 8004c52:	f7ff fd3c 	bl	80046ce <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fb fc4e 	bl	80004f8 <__aeabi_f2d>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	e9cd 2300 	strd	r2, r3, [sp]
 8004c64:	4a0b      	ldr	r2, [pc, #44]	@ (8004c94 <percentage+0xac>)
 8004c66:	2114      	movs	r1, #20
 8004c68:	480b      	ldr	r0, [pc, #44]	@ (8004c98 <percentage+0xb0>)
 8004c6a:	f017 fdab 	bl	801c7c4 <sniprintf>
	ssd1306_SetCursor(45,24);
 8004c6e:	2118      	movs	r1, #24
 8004c70:	202d      	movs	r0, #45	@ 0x2d
 8004c72:	f7ff fc21 	bl	80044b8 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8004c76:	4a09      	ldr	r2, [pc, #36]	@ (8004c9c <percentage+0xb4>)
 8004c78:	2301      	movs	r3, #1
 8004c7a:	ca06      	ldmia	r2, {r1, r2}
 8004c7c:	4806      	ldr	r0, [pc, #24]	@ (8004c98 <percentage+0xb0>)
 8004c7e:	f7ff fbf5 	bl	800446c <ssd1306_WriteString>


}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	f3af 8000 	nop.w
 8004c90:	40400000 	.word	0x40400000
 8004c94:	0802110c 	.word	0x0802110c
 8004c98:	20000ad8 	.word	0x20000ad8
 8004c9c:	20000014 	.word	0x20000014
 8004ca0:	47ae147b 	.word	0x47ae147b
 8004ca4:	3fe47ae1 	.word	0x3fe47ae1

08004ca8 <scrollText>:


uint16_t scrollText(uint8_t *text,FontDef Font,uint8_t x,uint8_t y,uint8_t widthonscreen,uint16_t offset) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	1d38      	adds	r0, r7, #4
 8004cb2:	e880 0006 	stmia.w	r0, {r1, r2}
 8004cb6:	70fb      	strb	r3, [r7, #3]
    uint8_t text_len = strlen((char *)text);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7fb fab1 	bl	8000220 <strlen>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	77bb      	strb	r3, [r7, #30]
    uint16_t text_width = text_len * Font.FontWidth;
 8004cc2:	7fbb      	ldrb	r3, [r7, #30]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	793a      	ldrb	r2, [r7, #4]
 8004cc8:	fb13 f302 	smulbb	r3, r3, r2
 8004ccc:	83bb      	strh	r3, [r7, #28]

        for (uint8_t i = x; i < widthonscreen; x++) {
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	76fb      	strb	r3, [r7, #27]
 8004cd2:	e016      	b.n	8004d02 <scrollText+0x5a>
            for (uint8_t j = y; y < Font.FontHeight; y++) {
 8004cd4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cd8:	74fb      	strb	r3, [r7, #19]
 8004cda:	e00a      	b.n	8004cf2 <scrollText+0x4a>
                ssd1306_DrawPixel(i, j, Black);
 8004cdc:	7cf9      	ldrb	r1, [r7, #19]
 8004cde:	7efb      	ldrb	r3, [r7, #27]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fae6 	bl	80042b4 <ssd1306_DrawPixel>
            for (uint8_t j = y; y < Font.FontHeight; y++) {
 8004ce8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cec:	3301      	adds	r3, #1
 8004cee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8004cf2:	797b      	ldrb	r3, [r7, #5]
 8004cf4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d3ef      	bcc.n	8004cdc <scrollText+0x34>
        for (uint8_t i = x; i < widthonscreen; x++) {
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	70fb      	strb	r3, [r7, #3]
 8004d02:	7efa      	ldrb	r2, [r7, #27]
 8004d04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d3e3      	bcc.n	8004cd4 <scrollText+0x2c>
            }
        }



        for (uint8_t i = 0; i < text_len; i++) {
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e02a      	b.n	8004d68 <scrollText+0xc0>
            int32_t char_x = x+widthonscreen + (i * Font.FontWidth) - offset;
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004d18:	441a      	add	r2, r3
 8004d1a:	7ffb      	ldrb	r3, [r7, #31]
 8004d1c:	7939      	ldrb	r1, [r7, #4]
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	441a      	add	r2, r3
 8004d24:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]

            if (char_x >= x && char_x < x+widthonscreen) {
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	db17      	blt.n	8004d62 <scrollText+0xba>
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004d38:	4413      	add	r3, r2
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	da10      	bge.n	8004d62 <scrollText+0xba>
                ssd1306_SetCursor(char_x, y);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fbb4 	bl	80044b8 <ssd1306_SetCursor>
                ssd1306_WriteChar(text[i], Font, White);
 8004d50:	7ffb      	ldrb	r3, [r7, #31]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	7818      	ldrb	r0, [r3, #0]
 8004d58:	2301      	movs	r3, #1
 8004d5a:	1d3a      	adds	r2, r7, #4
 8004d5c:	ca06      	ldmia	r2, {r1, r2}
 8004d5e:	f7ff fafd 	bl	800435c <ssd1306_WriteChar>
        for (uint8_t i = 0; i < text_len; i++) {
 8004d62:	7ffb      	ldrb	r3, [r7, #31]
 8004d64:	3301      	adds	r3, #1
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	7ffa      	ldrb	r2, [r7, #31]
 8004d6a:	7fbb      	ldrb	r3, [r7, #30]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d3d0      	bcc.n	8004d12 <scrollText+0x6a>
        }
        }
        return text_width;
 8004d70:	8bbb      	ldrh	r3, [r7, #28]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	0000      	movs	r0, r0
 8004d7c:	0000      	movs	r0, r0
	...

08004d80 <statemachine>:





void statemachine(void){
 8004d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d82:	ed2d 8b02 	vpush	{d8}
 8004d86:	b08b      	sub	sp, #44	@ 0x2c
 8004d88:	af04      	add	r7, sp, #16
	switch(state){
 8004d8a:	4bb9      	ldr	r3, [pc, #740]	@ (8005070 <statemachine+0x2f0>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b0a      	cmp	r3, #10
 8004d90:	f202 8229 	bhi.w	80071e6 <statemachine+0x2466>
 8004d94:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <statemachine+0x1c>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	080051e7 	.word	0x080051e7
 8004da4:	0800564b 	.word	0x0800564b
 8004da8:	08005cbd 	.word	0x08005cbd
 8004dac:	08005da7 	.word	0x08005da7
 8004db0:	08006011 	.word	0x08006011
 8004db4:	080065d1 	.word	0x080065d1
 8004db8:	08006ad5 	.word	0x08006ad5
 8004dbc:	08006b8b 	.word	0x08006b8b
 8004dc0:	08006e51 	.word	0x08006e51
 8004dc4:	0800708f 	.word	0x0800708f
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8004dc8:	2000      	movs	r0, #0
 8004dca:	f7ff fa33 	bl	8004234 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8004dce:	2120      	movs	r1, #32
 8004dd0:	2020      	movs	r0, #32
 8004dd2:	f7ff fb71 	bl	80044b8 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8004dd6:	49a7      	ldr	r1, [pc, #668]	@ (8005074 <statemachine+0x2f4>)
 8004dd8:	48a7      	ldr	r0, [pc, #668]	@ (8005078 <statemachine+0x2f8>)
 8004dda:	f7fe fc5b 	bl	8003694 <nmea_parse>
				 if(myData.speed>=vitmax){
 8004dde:	4ba6      	ldr	r3, [pc, #664]	@ (8005078 <statemachine+0x2f8>)
 8004de0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004de4:	4ba5      	ldr	r3, [pc, #660]	@ (800507c <statemachine+0x2fc>)
 8004de6:	edd3 7a00 	vldr	s15, [r3]
 8004dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df2:	db03      	blt.n	8004dfc <statemachine+0x7c>
									 vitmax=myData.speed;
 8004df4:	4ba0      	ldr	r3, [pc, #640]	@ (8005078 <statemachine+0x2f8>)
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	4aa0      	ldr	r2, [pc, #640]	@ (800507c <statemachine+0x2fc>)
 8004dfa:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
								 float sec=0;
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 8004e08:	4b9b      	ldr	r3, [pc, #620]	@ (8005078 <statemachine+0x2f8>)
 8004e0a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004e0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e16:	d032      	beq.n	8004e7e <statemachine+0xfe>
									 pace=1000/(60*myData.speed);
 8004e18:	4b97      	ldr	r3, [pc, #604]	@ (8005078 <statemachine+0x2f8>)
 8004e1a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004e1e:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8005080 <statemachine+0x300>
 8004e22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e26:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8005084 <statemachine+0x304>
 8004e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2e:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 8004e32:	6978      	ldr	r0, [r7, #20]
 8004e34:	f7fb fb60 	bl	80004f8 <__aeabi_f2d>
 8004e38:	4604      	mov	r4, r0
 8004e3a:	460d      	mov	r5, r1
 8004e3c:	6978      	ldr	r0, [r7, #20]
 8004e3e:	f7fb fb5b 	bl	80004f8 <__aeabi_f2d>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	ec43 2b10 	vmov	d0, r2, r3
 8004e4a:	f01a fbd9 	bl	801f600 <floor>
 8004e4e:	ec53 2b10 	vmov	r2, r3, d0
 8004e52:	4620      	mov	r0, r4
 8004e54:	4629      	mov	r1, r5
 8004e56:	f7fb f9ef 	bl	8000238 <__aeabi_dsub>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	4b88      	ldr	r3, [pc, #544]	@ (8005088 <statemachine+0x308>)
 8004e68:	f7fb fb9e 	bl	80005a8 <__aeabi_dmul>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	f7fb fe90 	bl	8000b98 <__aeabi_d2f>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	e001      	b.n	8004e82 <statemachine+0x102>
								 }
								 else {
									 pace=9999;
 8004e7e:	4b83      	ldr	r3, [pc, #524]	@ (800508c <statemachine+0x30c>)
 8004e80:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 8004e82:	4b83      	ldr	r3, [pc, #524]	@ (8005090 <statemachine+0x310>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	f000 8114 	beq.w	80050b4 <statemachine+0x334>
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	f300 8151 	bgt.w	8005134 <statemachine+0x3b4>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <statemachine+0x11e>
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	f000 8082 	beq.w	8004fa0 <statemachine+0x220>
 8004e9c:	e14a      	b.n	8005134 <statemachine+0x3b4>


				 case STATE_SUMMARY:

						snprintf((char *)bufferscreen,15, "MaxV=%.1f",vitmax*3.6);
 8004e9e:	4b77      	ldr	r3, [pc, #476]	@ (800507c <statemachine+0x2fc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb fb28 	bl	80004f8 <__aeabi_f2d>
 8004ea8:	a36d      	add	r3, pc, #436	@ (adr r3, 8005060 <statemachine+0x2e0>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f7fb fb7b 	bl	80005a8 <__aeabi_dmul>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	e9cd 2300 	strd	r2, r3, [sp]
 8004eba:	4a76      	ldr	r2, [pc, #472]	@ (8005094 <statemachine+0x314>)
 8004ebc:	210f      	movs	r1, #15
 8004ebe:	4876      	ldr	r0, [pc, #472]	@ (8005098 <statemachine+0x318>)
 8004ec0:	f017 fc80 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 12);
 8004ec4:	210c      	movs	r1, #12
 8004ec6:	2020      	movs	r0, #32
 8004ec8:	f7ff faf6 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004ecc:	4a73      	ldr	r2, [pc, #460]	@ (800509c <statemachine+0x31c>)
 8004ece:	2301      	movs	r3, #1
 8004ed0:	ca06      	ldmia	r2, {r1, r2}
 8004ed2:	4871      	ldr	r0, [pc, #452]	@ (8005098 <statemachine+0x318>)
 8004ed4:	f7ff faca 	bl	800446c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8004ed8:	4b67      	ldr	r3, [pc, #412]	@ (8005078 <statemachine+0x2f8>)
 8004eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fb fb0b 	bl	80004f8 <__aeabi_f2d>
 8004ee2:	a35f      	add	r3, pc, #380	@ (adr r3, 8005060 <statemachine+0x2e0>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f7fb fb5e 	bl	80005a8 <__aeabi_dmul>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	e9cd 2300 	strd	r2, r3, [sp]
 8004ef4:	4a6a      	ldr	r2, [pc, #424]	@ (80050a0 <statemachine+0x320>)
 8004ef6:	210f      	movs	r1, #15
 8004ef8:	4867      	ldr	r0, [pc, #412]	@ (8005098 <statemachine+0x318>)
 8004efa:	f017 fc63 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 20);
 8004efe:	2114      	movs	r1, #20
 8004f00:	2020      	movs	r0, #32
 8004f02:	f7ff fad9 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004f06:	4a65      	ldr	r2, [pc, #404]	@ (800509c <statemachine+0x31c>)
 8004f08:	2301      	movs	r3, #1
 8004f0a:	ca06      	ldmia	r2, {r1, r2}
 8004f0c:	4862      	ldr	r0, [pc, #392]	@ (8005098 <statemachine+0x318>)
 8004f0e:	f7ff faad 	bl	800446c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 8004f12:	6978      	ldr	r0, [r7, #20]
 8004f14:	f7fb faf0 	bl	80004f8 <__aeabi_f2d>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	ec43 2b10 	vmov	d0, r2, r3
 8004f20:	f01a fb6e 	bl	801f600 <floor>
 8004f24:	eeb0 8a40 	vmov.f32	s16, s0
 8004f28:	eef0 8a60 	vmov.f32	s17, s1
 8004f2c:	6938      	ldr	r0, [r7, #16]
 8004f2e:	f7fb fae3 	bl	80004f8 <__aeabi_f2d>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	ec43 2b10 	vmov	d0, r2, r3
 8004f3a:	f01a fb61 	bl	801f600 <floor>
 8004f3e:	eeb0 7a40 	vmov.f32	s14, s0
 8004f42:	eef0 7a60 	vmov.f32	s15, s1
 8004f46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f4a:	ed8d 8b00 	vstr	d8, [sp]
 8004f4e:	4a55      	ldr	r2, [pc, #340]	@ (80050a4 <statemachine+0x324>)
 8004f50:	210f      	movs	r1, #15
 8004f52:	4851      	ldr	r0, [pc, #324]	@ (8005098 <statemachine+0x318>)
 8004f54:	f017 fc36 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 28);
 8004f58:	211c      	movs	r1, #28
 8004f5a:	2020      	movs	r0, #32
 8004f5c:	f7ff faac 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004f60:	4a4e      	ldr	r2, [pc, #312]	@ (800509c <statemachine+0x31c>)
 8004f62:	2301      	movs	r3, #1
 8004f64:	ca06      	ldmia	r2, {r1, r2}
 8004f66:	484c      	ldr	r0, [pc, #304]	@ (8005098 <statemachine+0x318>)
 8004f68:	f7ff fa80 	bl	800446c <ssd1306_WriteString>



					 if(BTN_B>=1){
 8004f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80050a8 <statemachine+0x328>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	dd08      	ble.n	8004f86 <statemachine+0x206>
								spdstate++;
 8004f74:	4b46      	ldr	r3, [pc, #280]	@ (8005090 <statemachine+0x310>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	4b44      	ldr	r3, [pc, #272]	@ (8005090 <statemachine+0x310>)
 8004f7e:	701a      	strb	r2, [r3, #0]
								BTN_B=0;
 8004f80:	4b49      	ldr	r3, [pc, #292]	@ (80050a8 <statemachine+0x328>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
					 					 				  	}
					 if(BTN_B_LONG>=1){
 8004f86:	4b49      	ldr	r3, [pc, #292]	@ (80050ac <statemachine+0x32c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f340 80cd 	ble.w	800512a <statemachine+0x3aa>
							  vitmax=0;
 8004f90:	4b3a      	ldr	r3, [pc, #232]	@ (800507c <statemachine+0x2fc>)
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
							BTN_B_LONG=0;
 8004f98:	4b44      	ldr	r3, [pc, #272]	@ (80050ac <statemachine+0x32c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
						}



					 break;
 8004f9e:	e0c4      	b.n	800512a <statemachine+0x3aa>
				 case STATE_COMPTEUR:


						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8004fa0:	4b35      	ldr	r3, [pc, #212]	@ (8005078 <statemachine+0x2f8>)
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fb faa7 	bl	80004f8 <__aeabi_f2d>
 8004faa:	a32d      	add	r3, pc, #180	@ (adr r3, 8005060 <statemachine+0x2e0>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb fafa 	bl	80005a8 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	e9cd 2300 	strd	r2, r3, [sp]
 8004fbc:	4a38      	ldr	r2, [pc, #224]	@ (80050a0 <statemachine+0x320>)
 8004fbe:	210f      	movs	r1, #15
 8004fc0:	4835      	ldr	r0, [pc, #212]	@ (8005098 <statemachine+0x318>)
 8004fc2:	f017 fbff 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 54);
 8004fc6:	2136      	movs	r1, #54	@ 0x36
 8004fc8:	2020      	movs	r0, #32
 8004fca:	f7ff fa75 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004fce:	4a33      	ldr	r2, [pc, #204]	@ (800509c <statemachine+0x31c>)
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	ca06      	ldmia	r2, {r1, r2}
 8004fd4:	4830      	ldr	r0, [pc, #192]	@ (8005098 <statemachine+0x318>)
 8004fd6:	f7ff fa49 	bl	800446c <ssd1306_WriteString>
						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8004fda:	2301      	movs	r3, #1
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2335      	movs	r3, #53	@ 0x35
 8004fe0:	225f      	movs	r2, #95	@ 0x5f
 8004fe2:	2126      	movs	r1, #38	@ 0x26
 8004fe4:	2020      	movs	r0, #32
 8004fe6:	f7ff fb72 	bl	80046ce <ssd1306_DrawRectangle>
						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8004fea:	4b23      	ldr	r3, [pc, #140]	@ (8005078 <statemachine+0x2f8>)
 8004fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fb fa82 	bl	80004f8 <__aeabi_f2d>
 8004ff4:	a31c      	add	r3, pc, #112	@ (adr r3, 8005068 <statemachine+0x2e8>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb fad5 	bl	80005a8 <__aeabi_dmul>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4610      	mov	r0, r2
 8005004:	4619      	mov	r1, r3
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	4b29      	ldr	r3, [pc, #164]	@ (80050b0 <statemachine+0x330>)
 800500c:	f7fb f916 	bl	800023c <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	ec43 2b17 	vmov	d7, r2, r3
 8005018:	eeb0 0a47 	vmov.f32	s0, s14
 800501c:	eef0 0a67 	vmov.f32	s1, s15
 8005020:	f01a faee 	bl	801f600 <floor>
 8005024:	ec53 2b10 	vmov	r2, r3, d0
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	f7fb fd6c 	bl	8000b08 <__aeabi_d2iz>
 8005030:	4603      	mov	r3, r0
 8005032:	b2da      	uxtb	r2, r3
 8005034:	2301      	movs	r3, #1
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	2335      	movs	r3, #53	@ 0x35
 800503a:	2126      	movs	r1, #38	@ 0x26
 800503c:	2020      	movs	r0, #32
 800503e:	f7ff fb7d 	bl	800473c <ssd1306_FillRectangle>



					 if(BTN_B>=1){
 8005042:	4b19      	ldr	r3, [pc, #100]	@ (80050a8 <statemachine+0x328>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	dd71      	ble.n	800512e <statemachine+0x3ae>
							spdstate++;
 800504a:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <statemachine+0x310>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	b2da      	uxtb	r2, r3
 8005052:	4b0f      	ldr	r3, [pc, #60]	@ (8005090 <statemachine+0x310>)
 8005054:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8005056:	4b14      	ldr	r3, [pc, #80]	@ (80050a8 <statemachine+0x328>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 800505c:	e067      	b.n	800512e <statemachine+0x3ae>
 800505e:	bf00      	nop
 8005060:	cccccccd 	.word	0xcccccccd
 8005064:	400ccccc 	.word	0x400ccccc
 8005068:	c28f5c29 	.word	0xc28f5c29
 800506c:	3fe428f5 	.word	0x3fe428f5
 8005070:	200005e8 	.word	0x200005e8
 8005074:	20000638 	.word	0x20000638
 8005078:	20000838 	.word	0x20000838
 800507c:	20000c50 	.word	0x20000c50
 8005080:	42700000 	.word	0x42700000
 8005084:	447a0000 	.word	0x447a0000
 8005088:	404e0000 	.word	0x404e0000
 800508c:	461c3c00 	.word	0x461c3c00
 8005090:	200005ea 	.word	0x200005ea
 8005094:	08021118 	.word	0x08021118
 8005098:	20000ad8 	.word	0x20000ad8
 800509c:	20000014 	.word	0x20000014
 80050a0:	08021124 	.word	0x08021124
 80050a4:	0802112c 	.word	0x0802112c
 80050a8:	2000087c 	.word	0x2000087c
 80050ac:	20000cbc 	.word	0x20000cbc
 80050b0:	40400000 	.word	0x40400000
				 case STATE_GRAPH:


						ssd1306_SetCursor(32, 32);
 80050b4:	2120      	movs	r1, #32
 80050b6:	2020      	movs	r0, #32
 80050b8:	f7ff f9fe 	bl	80044b8 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 80050bc:	4b82      	ldr	r3, [pc, #520]	@ (80052c8 <statemachine+0x548>)
 80050be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fb fa19 	bl	80004f8 <__aeabi_f2d>
 80050c6:	a37e      	add	r3, pc, #504	@ (adr r3, 80052c0 <statemachine+0x540>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb fa6c 	bl	80005a8 <__aeabi_dmul>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	e9cd 2300 	strd	r2, r3, [sp]
 80050d8:	4a7c      	ldr	r2, [pc, #496]	@ (80052cc <statemachine+0x54c>)
 80050da:	210f      	movs	r1, #15
 80050dc:	487c      	ldr	r0, [pc, #496]	@ (80052d0 <statemachine+0x550>)
 80050de:	f017 fb71 	bl	801c7c4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 80050e2:	4a7c      	ldr	r2, [pc, #496]	@ (80052d4 <statemachine+0x554>)
 80050e4:	2301      	movs	r3, #1
 80050e6:	ca06      	ldmia	r2, {r1, r2}
 80050e8:	4879      	ldr	r0, [pc, #484]	@ (80052d0 <statemachine+0x550>)
 80050ea:	f7ff f9bf 	bl	800446c <ssd1306_WriteString>
						batterygauge(vbat,35, 54,1);
 80050ee:	4b7a      	ldr	r3, [pc, #488]	@ (80052d8 <statemachine+0x558>)
 80050f0:	edd3 7a00 	vldr	s15, [r3]
 80050f4:	2201      	movs	r2, #1
 80050f6:	2136      	movs	r1, #54	@ 0x36
 80050f8:	2023      	movs	r0, #35	@ 0x23
 80050fa:	eeb0 0a67 	vmov.f32	s0, s15
 80050fe:	f7ff fbf7 	bl	80048f0 <batterygauge>

					 if(BTN_B>=1){
 8005102:	4b76      	ldr	r3, [pc, #472]	@ (80052dc <statemachine+0x55c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	dd13      	ble.n	8005132 <statemachine+0x3b2>
							spdstate--;
 800510a:	4b75      	ldr	r3, [pc, #468]	@ (80052e0 <statemachine+0x560>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	3b01      	subs	r3, #1
 8005110:	b2da      	uxtb	r2, r3
 8005112:	4b73      	ldr	r3, [pc, #460]	@ (80052e0 <statemachine+0x560>)
 8005114:	701a      	strb	r2, [r3, #0]
							spdstate--;
 8005116:	4b72      	ldr	r3, [pc, #456]	@ (80052e0 <statemachine+0x560>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	4b70      	ldr	r3, [pc, #448]	@ (80052e0 <statemachine+0x560>)
 8005120:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8005122:	4b6e      	ldr	r3, [pc, #440]	@ (80052dc <statemachine+0x55c>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8005128:	e003      	b.n	8005132 <statemachine+0x3b2>
					 break;
 800512a:	bf00      	nop
 800512c:	e002      	b.n	8005134 <statemachine+0x3b4>
					 break;
 800512e:	bf00      	nop
 8005130:	e000      	b.n	8005134 <statemachine+0x3b4>
					 break;
 8005132:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8005134:	4b6b      	ldr	r3, [pc, #428]	@ (80052e4 <statemachine+0x564>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	dd0b      	ble.n	8005154 <statemachine+0x3d4>
				 					state++;
 800513c:	4b6a      	ldr	r3, [pc, #424]	@ (80052e8 <statemachine+0x568>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	b2da      	uxtb	r2, r3
 8005144:	4b68      	ldr	r3, [pc, #416]	@ (80052e8 <statemachine+0x568>)
 8005146:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8005148:	4b66      	ldr	r3, [pc, #408]	@ (80052e4 <statemachine+0x564>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 800514e:	4b63      	ldr	r3, [pc, #396]	@ (80052dc <statemachine+0x55c>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
				  	}
				 	 if(BTN_A_LONG>=1){
 8005154:	4b65      	ldr	r3, [pc, #404]	@ (80052ec <statemachine+0x56c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f342 8030 	ble.w	80071be <statemachine+0x243e>
				 						 				 									state++;
 800515e:	4b62      	ldr	r3, [pc, #392]	@ (80052e8 <statemachine+0x568>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4b60      	ldr	r3, [pc, #384]	@ (80052e8 <statemachine+0x568>)
 8005168:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 800516a:	4b5f      	ldr	r3, [pc, #380]	@ (80052e8 <statemachine+0x568>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	3301      	adds	r3, #1
 8005170:	b2da      	uxtb	r2, r3
 8005172:	4b5d      	ldr	r3, [pc, #372]	@ (80052e8 <statemachine+0x568>)
 8005174:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8005176:	4b5c      	ldr	r3, [pc, #368]	@ (80052e8 <statemachine+0x568>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	3301      	adds	r3, #1
 800517c:	b2da      	uxtb	r2, r3
 800517e:	4b5a      	ldr	r3, [pc, #360]	@ (80052e8 <statemachine+0x568>)
 8005180:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8005182:	4b59      	ldr	r3, [pc, #356]	@ (80052e8 <statemachine+0x568>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4b57      	ldr	r3, [pc, #348]	@ (80052e8 <statemachine+0x568>)
 800518c:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 800518e:	4b56      	ldr	r3, [pc, #344]	@ (80052e8 <statemachine+0x568>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	b2da      	uxtb	r2, r3
 8005196:	4b54      	ldr	r3, [pc, #336]	@ (80052e8 <statemachine+0x568>)
 8005198:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 800519a:	4b53      	ldr	r3, [pc, #332]	@ (80052e8 <statemachine+0x568>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	3301      	adds	r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	4b51      	ldr	r3, [pc, #324]	@ (80052e8 <statemachine+0x568>)
 80051a4:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 80051a6:	4b50      	ldr	r3, [pc, #320]	@ (80052e8 <statemachine+0x568>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	3301      	adds	r3, #1
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	4b4e      	ldr	r3, [pc, #312]	@ (80052e8 <statemachine+0x568>)
 80051b0:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 80051b2:	4b4d      	ldr	r3, [pc, #308]	@ (80052e8 <statemachine+0x568>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b4b      	ldr	r3, [pc, #300]	@ (80052e8 <statemachine+0x568>)
 80051bc:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 80051be:	4b4a      	ldr	r3, [pc, #296]	@ (80052e8 <statemachine+0x568>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4b48      	ldr	r3, [pc, #288]	@ (80052e8 <statemachine+0x568>)
 80051c8:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 80051ca:	4b47      	ldr	r3, [pc, #284]	@ (80052e8 <statemachine+0x568>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	3301      	adds	r3, #1
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	4b45      	ldr	r3, [pc, #276]	@ (80052e8 <statemachine+0x568>)
 80051d4:	701a      	strb	r2, [r3, #0]
				 						 				 									  			 	BTN_A_LONG=0;
 80051d6:	4b45      	ldr	r3, [pc, #276]	@ (80052ec <statemachine+0x56c>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
				 						 				 									  			 	BTN_B=0;
 80051dc:	4b3f      	ldr	r3, [pc, #252]	@ (80052dc <statemachine+0x55c>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
				 						 				 									  	}
				  break;
 80051e2:	f001 bfec 	b.w	80071be <statemachine+0x243e>


	case STATE_POS:
			  ssd1306_Fill(Black);
 80051e6:	2000      	movs	r0, #0
 80051e8:	f7ff f824 	bl	8004234 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80051ec:	4940      	ldr	r1, [pc, #256]	@ (80052f0 <statemachine+0x570>)
 80051ee:	4836      	ldr	r0, [pc, #216]	@ (80052c8 <statemachine+0x548>)
 80051f0:	f7fe fa50 	bl	8003694 <nmea_parse>
			  switch(posstate){
 80051f4:	4b3f      	ldr	r3, [pc, #252]	@ (80052f4 <statemachine+0x574>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	f200 8200 	bhi.w	80055fe <statemachine+0x87e>
 80051fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005204 <statemachine+0x484>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	08005215 	.word	0x08005215
 8005208:	08005309 	.word	0x08005309
 800520c:	080053c7 	.word	0x080053c7
 8005210:	08005485 	.word	0x08005485

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 12);
 8005214:	210c      	movs	r1, #12
 8005216:	2020      	movs	r0, #32
 8005218:	f7ff f94e 	bl	80044b8 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 800521c:	4a36      	ldr	r2, [pc, #216]	@ (80052f8 <statemachine+0x578>)
 800521e:	210f      	movs	r1, #15
 8005220:	482b      	ldr	r0, [pc, #172]	@ (80052d0 <statemachine+0x550>)
 8005222:	f017 facf 	bl	801c7c4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005226:	4a35      	ldr	r2, [pc, #212]	@ (80052fc <statemachine+0x57c>)
 8005228:	2301      	movs	r3, #1
 800522a:	ca06      	ldmia	r2, {r1, r2}
 800522c:	4828      	ldr	r0, [pc, #160]	@ (80052d0 <statemachine+0x550>)
 800522e:	f7ff f91d 	bl	800446c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005232:	4b25      	ldr	r3, [pc, #148]	@ (80052c8 <statemachine+0x548>)
 8005234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005238:	e9cd 2300 	strd	r2, r3, [sp]
 800523c:	4a30      	ldr	r2, [pc, #192]	@ (8005300 <statemachine+0x580>)
 800523e:	210f      	movs	r1, #15
 8005240:	4823      	ldr	r0, [pc, #140]	@ (80052d0 <statemachine+0x550>)
 8005242:	f017 fabf 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 20);
 8005246:	2114      	movs	r1, #20
 8005248:	2020      	movs	r0, #32
 800524a:	f7ff f935 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800524e:	4a2b      	ldr	r2, [pc, #172]	@ (80052fc <statemachine+0x57c>)
 8005250:	2301      	movs	r3, #1
 8005252:	ca06      	ldmia	r2, {r1, r2}
 8005254:	481e      	ldr	r0, [pc, #120]	@ (80052d0 <statemachine+0x550>)
 8005256:	f7ff f909 	bl	800446c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 800525a:	4a2a      	ldr	r2, [pc, #168]	@ (8005304 <statemachine+0x584>)
 800525c:	210f      	movs	r1, #15
 800525e:	481c      	ldr	r0, [pc, #112]	@ (80052d0 <statemachine+0x550>)
 8005260:	f017 fab0 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005264:	211c      	movs	r1, #28
 8005266:	2020      	movs	r0, #32
 8005268:	f7ff f926 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800526c:	4a23      	ldr	r2, [pc, #140]	@ (80052fc <statemachine+0x57c>)
 800526e:	2301      	movs	r3, #1
 8005270:	ca06      	ldmia	r2, {r1, r2}
 8005272:	4817      	ldr	r0, [pc, #92]	@ (80052d0 <statemachine+0x550>)
 8005274:	f7ff f8fa 	bl	800446c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005278:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <statemachine+0x548>)
 800527a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800527e:	e9cd 2300 	strd	r2, r3, [sp]
 8005282:	4a1f      	ldr	r2, [pc, #124]	@ (8005300 <statemachine+0x580>)
 8005284:	210f      	movs	r1, #15
 8005286:	4812      	ldr	r0, [pc, #72]	@ (80052d0 <statemachine+0x550>)
 8005288:	f017 fa9c 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 36);
 800528c:	2124      	movs	r1, #36	@ 0x24
 800528e:	2020      	movs	r0, #32
 8005290:	f7ff f912 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005294:	4a19      	ldr	r2, [pc, #100]	@ (80052fc <statemachine+0x57c>)
 8005296:	2301      	movs	r3, #1
 8005298:	ca06      	ldmia	r2, {r1, r2}
 800529a:	480d      	ldr	r0, [pc, #52]	@ (80052d0 <statemachine+0x550>)
 800529c:	f7ff f8e6 	bl	800446c <ssd1306_WriteString>
				  if(BTN_B>=1){
 80052a0:	4b0e      	ldr	r3, [pc, #56]	@ (80052dc <statemachine+0x55c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f340 817c 	ble.w	80055a2 <statemachine+0x822>
					  posstate++;
 80052aa:	4b12      	ldr	r3, [pc, #72]	@ (80052f4 <statemachine+0x574>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	3301      	adds	r3, #1
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <statemachine+0x574>)
 80052b4:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 80052b6:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <statemachine+0x55c>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]





				  break;
 80052bc:	e171      	b.n	80055a2 <statemachine+0x822>
 80052be:	bf00      	nop
 80052c0:	cccccccd 	.word	0xcccccccd
 80052c4:	400ccccc 	.word	0x400ccccc
 80052c8:	20000838 	.word	0x20000838
 80052cc:	08021140 	.word	0x08021140
 80052d0:	20000ad8 	.word	0x20000ad8
 80052d4:	20000024 	.word	0x20000024
 80052d8:	200008b0 	.word	0x200008b0
 80052dc:	2000087c 	.word	0x2000087c
 80052e0:	200005ea 	.word	0x200005ea
 80052e4:	20000878 	.word	0x20000878
 80052e8:	200005e8 	.word	0x200005e8
 80052ec:	20000cc0 	.word	0x20000cc0
 80052f0:	20000638 	.word	0x20000638
 80052f4:	200005eb 	.word	0x200005eb
 80052f8:	08021148 	.word	0x08021148
 80052fc:	20000014 	.word	0x20000014
 8005300:	08021154 	.word	0x08021154
 8005304:	0802115c 	.word	0x0802115c
			  case STATE_LAT:
						ssd1306_SetCursor(32, 12);
 8005308:	210c      	movs	r1, #12
 800530a:	2020      	movs	r0, #32
 800530c:	f7ff f8d4 	bl	80044b8 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8005310:	4aa9      	ldr	r2, [pc, #676]	@ (80055b8 <statemachine+0x838>)
 8005312:	210f      	movs	r1, #15
 8005314:	48a9      	ldr	r0, [pc, #676]	@ (80055bc <statemachine+0x83c>)
 8005316:	f017 fa55 	bl	801c7c4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800531a:	4aa9      	ldr	r2, [pc, #676]	@ (80055c0 <statemachine+0x840>)
 800531c:	2301      	movs	r3, #1
 800531e:	ca06      	ldmia	r2, {r1, r2}
 8005320:	48a6      	ldr	r0, [pc, #664]	@ (80055bc <statemachine+0x83c>)
 8005322:	f7ff f8a3 	bl	800446c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005326:	4ba7      	ldr	r3, [pc, #668]	@ (80055c4 <statemachine+0x844>)
 8005328:	7a1b      	ldrb	r3, [r3, #8]
 800532a:	4aa7      	ldr	r2, [pc, #668]	@ (80055c8 <statemachine+0x848>)
 800532c:	210f      	movs	r1, #15
 800532e:	48a3      	ldr	r0, [pc, #652]	@ (80055bc <statemachine+0x83c>)
 8005330:	f017 fa48 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 20);
 8005334:	2114      	movs	r1, #20
 8005336:	2020      	movs	r0, #32
 8005338:	f7ff f8be 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800533c:	4aa0      	ldr	r2, [pc, #640]	@ (80055c0 <statemachine+0x840>)
 800533e:	2301      	movs	r3, #1
 8005340:	ca06      	ldmia	r2, {r1, r2}
 8005342:	489e      	ldr	r0, [pc, #632]	@ (80055bc <statemachine+0x83c>)
 8005344:	f7ff f892 	bl	800446c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8005348:	4aa0      	ldr	r2, [pc, #640]	@ (80055cc <statemachine+0x84c>)
 800534a:	210f      	movs	r1, #15
 800534c:	489b      	ldr	r0, [pc, #620]	@ (80055bc <statemachine+0x83c>)
 800534e:	f017 fa39 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 28);
 8005352:	211c      	movs	r1, #28
 8005354:	2020      	movs	r0, #32
 8005356:	f7ff f8af 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800535a:	4a99      	ldr	r2, [pc, #612]	@ (80055c0 <statemachine+0x840>)
 800535c:	2301      	movs	r3, #1
 800535e:	ca06      	ldmia	r2, {r1, r2}
 8005360:	4896      	ldr	r0, [pc, #600]	@ (80055bc <statemachine+0x83c>)
 8005362:	f7ff f883 	bl	800446c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 8005366:	4b97      	ldr	r3, [pc, #604]	@ (80055c4 <statemachine+0x844>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	e9cd 2300 	strd	r2, r3, [sp]
 8005370:	4a97      	ldr	r2, [pc, #604]	@ (80055d0 <statemachine+0x850>)
 8005372:	210f      	movs	r1, #15
 8005374:	4891      	ldr	r0, [pc, #580]	@ (80055bc <statemachine+0x83c>)
 8005376:	f017 fa25 	bl	801c7c4 <sniprintf>
						ssd1306_SetCursor(32, 36);
 800537a:	2124      	movs	r1, #36	@ 0x24
 800537c:	2020      	movs	r0, #32
 800537e:	f7ff f89b 	bl	80044b8 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005382:	4a8f      	ldr	r2, [pc, #572]	@ (80055c0 <statemachine+0x840>)
 8005384:	2301      	movs	r3, #1
 8005386:	ca06      	ldmia	r2, {r1, r2}
 8005388:	488c      	ldr	r0, [pc, #560]	@ (80055bc <statemachine+0x83c>)
 800538a:	f7ff f86f 	bl	800446c <ssd1306_WriteString>


				  if(BTN_B>=1){
 800538e:	4b91      	ldr	r3, [pc, #580]	@ (80055d4 <statemachine+0x854>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	dd08      	ble.n	80053a8 <statemachine+0x628>
				  					  posstate++;
 8005396:	4b90      	ldr	r3, [pc, #576]	@ (80055d8 <statemachine+0x858>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	3301      	adds	r3, #1
 800539c:	b2da      	uxtb	r2, r3
 800539e:	4b8e      	ldr	r3, [pc, #568]	@ (80055d8 <statemachine+0x858>)
 80053a0:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80053a2:	4b8c      	ldr	r3, [pc, #560]	@ (80055d4 <statemachine+0x854>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80053a8:	4b8c      	ldr	r3, [pc, #560]	@ (80055dc <statemachine+0x85c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f340 80fa 	ble.w	80055a6 <statemachine+0x826>
									  posstate--;
 80053b2:	4b89      	ldr	r3, [pc, #548]	@ (80055d8 <statemachine+0x858>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4b87      	ldr	r3, [pc, #540]	@ (80055d8 <statemachine+0x858>)
 80053bc:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 80053be:	4b87      	ldr	r3, [pc, #540]	@ (80055dc <statemachine+0x85c>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
								}



				  break;
 80053c4:	e0ef      	b.n	80055a6 <statemachine+0x826>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 12);
 80053c6:	210c      	movs	r1, #12
 80053c8:	2020      	movs	r0, #32
 80053ca:	f7ff f875 	bl	80044b8 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 80053ce:	4a84      	ldr	r2, [pc, #528]	@ (80055e0 <statemachine+0x860>)
 80053d0:	210f      	movs	r1, #15
 80053d2:	487a      	ldr	r0, [pc, #488]	@ (80055bc <statemachine+0x83c>)
 80053d4:	f017 f9f6 	bl	801c7c4 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80053d8:	4a79      	ldr	r2, [pc, #484]	@ (80055c0 <statemachine+0x840>)
 80053da:	2301      	movs	r3, #1
 80053dc:	ca06      	ldmia	r2, {r1, r2}
 80053de:	4877      	ldr	r0, [pc, #476]	@ (80055bc <statemachine+0x83c>)
 80053e0:	f7ff f844 	bl	800446c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80053e4:	4b77      	ldr	r3, [pc, #476]	@ (80055c4 <statemachine+0x844>)
 80053e6:	7e1b      	ldrb	r3, [r3, #24]
 80053e8:	4a77      	ldr	r2, [pc, #476]	@ (80055c8 <statemachine+0x848>)
 80053ea:	210f      	movs	r1, #15
 80053ec:	4873      	ldr	r0, [pc, #460]	@ (80055bc <statemachine+0x83c>)
 80053ee:	f017 f9e9 	bl	801c7c4 <sniprintf>
					ssd1306_SetCursor(32, 20);
 80053f2:	2114      	movs	r1, #20
 80053f4:	2020      	movs	r0, #32
 80053f6:	f7ff f85f 	bl	80044b8 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80053fa:	4a71      	ldr	r2, [pc, #452]	@ (80055c0 <statemachine+0x840>)
 80053fc:	2301      	movs	r3, #1
 80053fe:	ca06      	ldmia	r2, {r1, r2}
 8005400:	486e      	ldr	r0, [pc, #440]	@ (80055bc <statemachine+0x83c>)
 8005402:	f7ff f833 	bl	800446c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 8005406:	4a77      	ldr	r2, [pc, #476]	@ (80055e4 <statemachine+0x864>)
 8005408:	210f      	movs	r1, #15
 800540a:	486c      	ldr	r0, [pc, #432]	@ (80055bc <statemachine+0x83c>)
 800540c:	f017 f9da 	bl	801c7c4 <sniprintf>
					ssd1306_SetCursor(32, 28);
 8005410:	211c      	movs	r1, #28
 8005412:	2020      	movs	r0, #32
 8005414:	f7ff f850 	bl	80044b8 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005418:	4a69      	ldr	r2, [pc, #420]	@ (80055c0 <statemachine+0x840>)
 800541a:	2301      	movs	r3, #1
 800541c:	ca06      	ldmia	r2, {r1, r2}
 800541e:	4867      	ldr	r0, [pc, #412]	@ (80055bc <statemachine+0x83c>)
 8005420:	f7ff f824 	bl	800446c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005424:	4b67      	ldr	r3, [pc, #412]	@ (80055c4 <statemachine+0x844>)
 8005426:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800542a:	e9cd 2300 	strd	r2, r3, [sp]
 800542e:	4a68      	ldr	r2, [pc, #416]	@ (80055d0 <statemachine+0x850>)
 8005430:	210f      	movs	r1, #15
 8005432:	4862      	ldr	r0, [pc, #392]	@ (80055bc <statemachine+0x83c>)
 8005434:	f017 f9c6 	bl	801c7c4 <sniprintf>
					ssd1306_SetCursor(32, 36);
 8005438:	2124      	movs	r1, #36	@ 0x24
 800543a:	2020      	movs	r0, #32
 800543c:	f7ff f83c 	bl	80044b8 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005440:	4a5f      	ldr	r2, [pc, #380]	@ (80055c0 <statemachine+0x840>)
 8005442:	2301      	movs	r3, #1
 8005444:	ca06      	ldmia	r2, {r1, r2}
 8005446:	485d      	ldr	r0, [pc, #372]	@ (80055bc <statemachine+0x83c>)
 8005448:	f7ff f810 	bl	800446c <ssd1306_WriteString>

				  if(BTN_B>=1){
 800544c:	4b61      	ldr	r3, [pc, #388]	@ (80055d4 <statemachine+0x854>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	dd08      	ble.n	8005466 <statemachine+0x6e6>
				  					  posstate++;
 8005454:	4b60      	ldr	r3, [pc, #384]	@ (80055d8 <statemachine+0x858>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	b2da      	uxtb	r2, r3
 800545c:	4b5e      	ldr	r3, [pc, #376]	@ (80055d8 <statemachine+0x858>)
 800545e:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8005460:	4b5c      	ldr	r3, [pc, #368]	@ (80055d4 <statemachine+0x854>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005466:	4b5d      	ldr	r3, [pc, #372]	@ (80055dc <statemachine+0x85c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f340 809d 	ble.w	80055aa <statemachine+0x82a>
									  posstate--;
 8005470:	4b59      	ldr	r3, [pc, #356]	@ (80055d8 <statemachine+0x858>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	3b01      	subs	r3, #1
 8005476:	b2da      	uxtb	r2, r3
 8005478:	4b57      	ldr	r3, [pc, #348]	@ (80055d8 <statemachine+0x858>)
 800547a:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 800547c:	4b57      	ldr	r3, [pc, #348]	@ (80055dc <statemachine+0x85c>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
								}

				  break;
 8005482:	e092      	b.n	80055aa <statemachine+0x82a>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 12);
 8005484:	210c      	movs	r1, #12
 8005486:	2020      	movs	r0, #32
 8005488:	f7ff f816 	bl	80044b8 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 800548c:	4a56      	ldr	r2, [pc, #344]	@ (80055e8 <statemachine+0x868>)
 800548e:	210f      	movs	r1, #15
 8005490:	484a      	ldr	r0, [pc, #296]	@ (80055bc <statemachine+0x83c>)
 8005492:	f017 f997 	bl	801c7c4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005496:	4a4a      	ldr	r2, [pc, #296]	@ (80055c0 <statemachine+0x840>)
 8005498:	2301      	movs	r3, #1
 800549a:	ca06      	ldmia	r2, {r1, r2}
 800549c:	4847      	ldr	r0, [pc, #284]	@ (80055bc <statemachine+0x83c>)
 800549e:	f7fe ffe5 	bl	800446c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80054a2:	4b48      	ldr	r3, [pc, #288]	@ (80055c4 <statemachine+0x844>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fb f826 	bl	80004f8 <__aeabi_f2d>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	e9cd 2300 	strd	r2, r3, [sp]
 80054b4:	4a4d      	ldr	r2, [pc, #308]	@ (80055ec <statemachine+0x86c>)
 80054b6:	210f      	movs	r1, #15
 80054b8:	4840      	ldr	r0, [pc, #256]	@ (80055bc <statemachine+0x83c>)
 80054ba:	f017 f983 	bl	801c7c4 <sniprintf>
				  						ssd1306_SetCursor(32, 20);
 80054be:	2114      	movs	r1, #20
 80054c0:	2020      	movs	r0, #32
 80054c2:	f7fe fff9 	bl	80044b8 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054c6:	4a3e      	ldr	r2, [pc, #248]	@ (80055c0 <statemachine+0x840>)
 80054c8:	2301      	movs	r3, #1
 80054ca:	ca06      	ldmia	r2, {r1, r2}
 80054cc:	483b      	ldr	r0, [pc, #236]	@ (80055bc <statemachine+0x83c>)
 80054ce:	f7fe ffcd 	bl	800446c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 80054d2:	4a47      	ldr	r2, [pc, #284]	@ (80055f0 <statemachine+0x870>)
 80054d4:	210f      	movs	r1, #15
 80054d6:	4839      	ldr	r0, [pc, #228]	@ (80055bc <statemachine+0x83c>)
 80054d8:	f017 f974 	bl	801c7c4 <sniprintf>
				  						ssd1306_SetCursor(32, 28);
 80054dc:	211c      	movs	r1, #28
 80054de:	2020      	movs	r0, #32
 80054e0:	f7fe ffea 	bl	80044b8 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054e4:	4a36      	ldr	r2, [pc, #216]	@ (80055c0 <statemachine+0x840>)
 80054e6:	2301      	movs	r3, #1
 80054e8:	ca06      	ldmia	r2, {r1, r2}
 80054ea:	4834      	ldr	r0, [pc, #208]	@ (80055bc <statemachine+0x83c>)
 80054ec:	f7fe ffbe 	bl	800446c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 80054f0:	4b34      	ldr	r3, [pc, #208]	@ (80055c4 <statemachine+0x844>)
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fa ffff 	bl	80004f8 <__aeabi_f2d>
 80054fa:	a32d      	add	r3, pc, #180	@ (adr r3, 80055b0 <statemachine+0x830>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fb f852 	bl	80005a8 <__aeabi_dmul>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	f7fb fb44 	bl	8000b98 <__aeabi_d2f>
 8005510:	4603      	mov	r3, r0
 8005512:	ee00 3a10 	vmov	s0, r3
 8005516:	f019 ffab 	bl	801f470 <expf>
 800551a:	eef0 7a40 	vmov.f32	s15, s0
 800551e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80055f4 <statemachine+0x874>
 8005522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005526:	ee17 0a90 	vmov	r0, s15
 800552a:	f7fa ffe5 	bl	80004f8 <__aeabi_f2d>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	e9cd 2300 	strd	r2, r3, [sp]
 8005536:	4a30      	ldr	r2, [pc, #192]	@ (80055f8 <statemachine+0x878>)
 8005538:	210f      	movs	r1, #15
 800553a:	4820      	ldr	r0, [pc, #128]	@ (80055bc <statemachine+0x83c>)
 800553c:	f017 f942 	bl	801c7c4 <sniprintf>
				  						ssd1306_SetCursor(32, 36);
 8005540:	2124      	movs	r1, #36	@ 0x24
 8005542:	2020      	movs	r0, #32
 8005544:	f7fe ffb8 	bl	80044b8 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005548:	4a1d      	ldr	r2, [pc, #116]	@ (80055c0 <statemachine+0x840>)
 800554a:	2301      	movs	r3, #1
 800554c:	ca06      	ldmia	r2, {r1, r2}
 800554e:	481b      	ldr	r0, [pc, #108]	@ (80055bc <statemachine+0x83c>)
 8005550:	f7fe ff8c 	bl	800446c <ssd1306_WriteString>

				  if(BTN_B>=1){
 8005554:	4b1f      	ldr	r3, [pc, #124]	@ (80055d4 <statemachine+0x854>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	dd14      	ble.n	8005586 <statemachine+0x806>
				  					posstate--;
 800555c:	4b1e      	ldr	r3, [pc, #120]	@ (80055d8 <statemachine+0x858>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	3b01      	subs	r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	4b1c      	ldr	r3, [pc, #112]	@ (80055d8 <statemachine+0x858>)
 8005566:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8005568:	4b1b      	ldr	r3, [pc, #108]	@ (80055d8 <statemachine+0x858>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	3b01      	subs	r3, #1
 800556e:	b2da      	uxtb	r2, r3
 8005570:	4b19      	ldr	r3, [pc, #100]	@ (80055d8 <statemachine+0x858>)
 8005572:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8005574:	4b18      	ldr	r3, [pc, #96]	@ (80055d8 <statemachine+0x858>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	3b01      	subs	r3, #1
 800557a:	b2da      	uxtb	r2, r3
 800557c:	4b16      	ldr	r3, [pc, #88]	@ (80055d8 <statemachine+0x858>)
 800557e:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8005580:	4b14      	ldr	r3, [pc, #80]	@ (80055d4 <statemachine+0x854>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005586:	4b15      	ldr	r3, [pc, #84]	@ (80055dc <statemachine+0x85c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	dd36      	ble.n	80055fc <statemachine+0x87c>
					  posstate--;
 800558e:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <statemachine+0x858>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	3b01      	subs	r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	4b10      	ldr	r3, [pc, #64]	@ (80055d8 <statemachine+0x858>)
 8005598:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 800559a:	4b10      	ldr	r3, [pc, #64]	@ (80055dc <statemachine+0x85c>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
				}
				  break;
 80055a0:	e02c      	b.n	80055fc <statemachine+0x87c>
				  break;
 80055a2:	bf00      	nop
 80055a4:	e02b      	b.n	80055fe <statemachine+0x87e>
				  break;
 80055a6:	bf00      	nop
 80055a8:	e029      	b.n	80055fe <statemachine+0x87e>
				  break;
 80055aa:	bf00      	nop
 80055ac:	e027      	b.n	80055fe <statemachine+0x87e>
 80055ae:	bf00      	nop
 80055b0:	fb798882 	.word	0xfb798882
 80055b4:	bf1e1818 	.word	0xbf1e1818
 80055b8:	08021168 	.word	0x08021168
 80055bc:	20000ad8 	.word	0x20000ad8
 80055c0:	20000014 	.word	0x20000014
 80055c4:	20000838 	.word	0x20000838
 80055c8:	08021174 	.word	0x08021174
 80055cc:	08021148 	.word	0x08021148
 80055d0:	08021154 	.word	0x08021154
 80055d4:	2000087c 	.word	0x2000087c
 80055d8:	200005eb 	.word	0x200005eb
 80055dc:	20000cbc 	.word	0x20000cbc
 80055e0:	08021178 	.word	0x08021178
 80055e4:	0802115c 	.word	0x0802115c
 80055e8:	08021184 	.word	0x08021184
 80055ec:	08021190 	.word	0x08021190
 80055f0:	08021198 	.word	0x08021198
 80055f4:	447a0000 	.word	0x447a0000
 80055f8:	080211a4 	.word	0x080211a4
				  break;
 80055fc:	bf00      	nop
			  }

					if(BTN_A>=1){
 80055fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005774 <statemachine+0x9f4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	dd0b      	ble.n	800561e <statemachine+0x89e>
							state++;
 8005606:	4b5c      	ldr	r3, [pc, #368]	@ (8005778 <statemachine+0x9f8>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	4b5a      	ldr	r3, [pc, #360]	@ (8005778 <statemachine+0x9f8>)
 8005610:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005612:	4b58      	ldr	r3, [pc, #352]	@ (8005774 <statemachine+0x9f4>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005618:	4b58      	ldr	r3, [pc, #352]	@ (800577c <statemachine+0x9fc>)
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 800561e:	4b58      	ldr	r3, [pc, #352]	@ (8005780 <statemachine+0xa00>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f341 85cd 	ble.w	80071c2 <statemachine+0x2442>
									 									 									  			 	state--;
 8005628:	4b53      	ldr	r3, [pc, #332]	@ (8005778 <statemachine+0x9f8>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	3b01      	subs	r3, #1
 800562e:	b2da      	uxtb	r2, r3
 8005630:	4b51      	ldr	r3, [pc, #324]	@ (8005778 <statemachine+0x9f8>)
 8005632:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8005634:	4b4f      	ldr	r3, [pc, #316]	@ (8005774 <statemachine+0x9f4>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 800563a:	4b50      	ldr	r3, [pc, #320]	@ (800577c <statemachine+0x9fc>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8005640:	4b4f      	ldr	r3, [pc, #316]	@ (8005780 <statemachine+0xa00>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8005646:	f001 bdbc 	b.w	80071c2 <statemachine+0x2442>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 800564a:	2000      	movs	r0, #0
 800564c:	f7fe fdf2 	bl	8004234 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005650:	494c      	ldr	r1, [pc, #304]	@ (8005784 <statemachine+0xa04>)
 8005652:	484d      	ldr	r0, [pc, #308]	@ (8005788 <statemachine+0xa08>)
 8005654:	f7fe f81e 	bl	8003694 <nmea_parse>
			  if(settimeen==0){
 8005658:	4b4c      	ldr	r3, [pc, #304]	@ (800578c <statemachine+0xa0c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d141      	bne.n	80056e4 <statemachine+0x964>

							settimeen=1;
 8005660:	4b4a      	ldr	r3, [pc, #296]	@ (800578c <statemachine+0xa0c>)
 8005662:	2201      	movs	r2, #1
 8005664:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005666:	4b48      	ldr	r3, [pc, #288]	@ (8005788 <statemachine+0xa08>)
 8005668:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	0092      	lsls	r2, r2, #2
 8005676:	4413      	add	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	4b42      	ldr	r3, [pc, #264]	@ (8005788 <statemachine+0xa08>)
 800567e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4413      	add	r3, r2
 800568a:	b2da      	uxtb	r2, r3
 800568c:	4b40      	ldr	r3, [pc, #256]	@ (8005790 <statemachine+0xa10>)
 800568e:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005690:	4b3d      	ldr	r3, [pc, #244]	@ (8005788 <statemachine+0xa08>)
 8005692:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	0092      	lsls	r2, r2, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	4b38      	ldr	r3, [pc, #224]	@ (8005788 <statemachine+0xa08>)
 80056a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	4413      	add	r3, r2
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	4b37      	ldr	r3, [pc, #220]	@ (8005794 <statemachine+0xa14>)
 80056b8:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 80056ba:	4b33      	ldr	r3, [pc, #204]	@ (8005788 <statemachine+0xa08>)
 80056bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	0092      	lsls	r2, r2, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005788 <statemachine+0xa08>)
 80056d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	4413      	add	r3, r2
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005798 <statemachine+0xa18>)
 80056e2:	701a      	strb	r2, [r3, #0]


					  }


				  ssd1306_SetCursor(32, 12);
 80056e4:	210c      	movs	r1, #12
 80056e6:	2020      	movs	r0, #32
 80056e8:	f7fe fee6 	bl	80044b8 <ssd1306_SetCursor>
				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 80056ec:	4a2b      	ldr	r2, [pc, #172]	@ (800579c <statemachine+0xa1c>)
 80056ee:	2301      	movs	r3, #1
 80056f0:	ca06      	ldmia	r2, {r1, r2}
 80056f2:	482b      	ldr	r0, [pc, #172]	@ (80057a0 <statemachine+0xa20>)
 80056f4:	f7fe feba 	bl	800446c <ssd1306_WriteString>




				  switch(hrstate){
 80056f8:	4b2a      	ldr	r3, [pc, #168]	@ (80057a4 <statemachine+0xa24>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <statemachine+0x986>
 8005700:	2b01      	cmp	r3, #1
 8005702:	d059      	beq.n	80057b8 <statemachine+0xa38>
 8005704:	e295      	b.n	8005c32 <statemachine+0xeb2>
				  case STATE_DIGIT:
					 ssd1306_SetCursor(32, 22);
 8005706:	2116      	movs	r1, #22
 8005708:	2020      	movs	r0, #32
 800570a:	f7fe fed5 	bl	80044b8 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 800570e:	4b20      	ldr	r3, [pc, #128]	@ (8005790 <statemachine+0xa10>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	4b1f      	ldr	r3, [pc, #124]	@ (8005794 <statemachine+0xa14>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	4613      	mov	r3, r2
 800571c:	4a22      	ldr	r2, [pc, #136]	@ (80057a8 <statemachine+0xa28>)
 800571e:	210f      	movs	r1, #15
 8005720:	4822      	ldr	r0, [pc, #136]	@ (80057ac <statemachine+0xa2c>)
 8005722:	f017 f84f 	bl	801c7c4 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005726:	4a22      	ldr	r2, [pc, #136]	@ (80057b0 <statemachine+0xa30>)
 8005728:	2301      	movs	r3, #1
 800572a:	ca06      	ldmia	r2, {r1, r2}
 800572c:	481f      	ldr	r0, [pc, #124]	@ (80057ac <statemachine+0xa2c>)
 800572e:	f7fe fe9d 	bl	800446c <ssd1306_WriteString>
					ssd1306_SetCursor(32, 32);
 8005732:	2120      	movs	r1, #32
 8005734:	2020      	movs	r0, #32
 8005736:	f7fe febf 	bl	80044b8 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 800573a:	4b17      	ldr	r3, [pc, #92]	@ (8005798 <statemachine+0xa18>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	4a1d      	ldr	r2, [pc, #116]	@ (80057b4 <statemachine+0xa34>)
 8005740:	210f      	movs	r1, #15
 8005742:	481a      	ldr	r0, [pc, #104]	@ (80057ac <statemachine+0xa2c>)
 8005744:	f017 f83e 	bl	801c7c4 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005748:	4a14      	ldr	r2, [pc, #80]	@ (800579c <statemachine+0xa1c>)
 800574a:	2301      	movs	r3, #1
 800574c:	ca06      	ldmia	r2, {r1, r2}
 800574e:	4817      	ldr	r0, [pc, #92]	@ (80057ac <statemachine+0xa2c>)
 8005750:	f7fe fe8c 	bl	800446c <ssd1306_WriteString>
					if(BTN_B>=1){
 8005754:	4b09      	ldr	r3, [pc, #36]	@ (800577c <statemachine+0x9fc>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f340 8267 	ble.w	8005c2c <statemachine+0xeac>
												hrstate++;
 800575e:	4b11      	ldr	r3, [pc, #68]	@ (80057a4 <statemachine+0xa24>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	3301      	adds	r3, #1
 8005764:	b2da      	uxtb	r2, r3
 8005766:	4b0f      	ldr	r3, [pc, #60]	@ (80057a4 <statemachine+0xa24>)
 8005768:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 800576a:	4b04      	ldr	r3, [pc, #16]	@ (800577c <statemachine+0x9fc>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
											}




					  break;
 8005770:	e25c      	b.n	8005c2c <statemachine+0xeac>
 8005772:	bf00      	nop
 8005774:	20000878 	.word	0x20000878
 8005778:	200005e8 	.word	0x200005e8
 800577c:	2000087c 	.word	0x2000087c
 8005780:	20000cc0 	.word	0x20000cc0
 8005784:	20000638 	.word	0x20000638
 8005788:	20000838 	.word	0x20000838
 800578c:	20000ca8 	.word	0x20000ca8
 8005790:	20000ca5 	.word	0x20000ca5
 8005794:	20000ca6 	.word	0x20000ca6
 8005798:	20000ca4 	.word	0x20000ca4
 800579c:	20000014 	.word	0x20000014
 80057a0:	080211b0 	.word	0x080211b0
 80057a4:	200005e9 	.word	0x200005e9
 80057a8:	080211b8 	.word	0x080211b8
 80057ac:	20000ad8 	.word	0x20000ad8
 80057b0:	2000001c 	.word	0x2000001c
 80057b4:	080211c4 	.word	0x080211c4
				  case STATE_OLD:
					  if(HR>12){
 80057b8:	4b91      	ldr	r3, [pc, #580]	@ (8005a00 <statemachine+0xc80>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b0c      	cmp	r3, #12
 80057be:	d905      	bls.n	80057cc <statemachine+0xa4c>
						  HR=HR-12;
 80057c0:	4b8f      	ldr	r3, [pc, #572]	@ (8005a00 <statemachine+0xc80>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	3b0c      	subs	r3, #12
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005a00 <statemachine+0xc80>)
 80057ca:	701a      	strb	r2, [r3, #0]
					  }
					  ssd1306_DrawCircle(64, 48, 12, White);
 80057cc:	2301      	movs	r3, #1
 80057ce:	220c      	movs	r2, #12
 80057d0:	2130      	movs	r1, #48	@ 0x30
 80057d2:	2040      	movs	r0, #64	@ 0x40
 80057d4:	f7fe fef4 	bl	80045c0 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-HR)*M_PI/6)),48-floor(6*sin((3-HR)*M_PI/6)),White);
 80057d8:	4b89      	ldr	r3, [pc, #548]	@ (8005a00 <statemachine+0xc80>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	f1c3 0303 	rsb	r3, r3, #3
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fa fe77 	bl	80004d4 <__aeabi_i2d>
 80057e6:	a384      	add	r3, pc, #528	@ (adr r3, 80059f8 <statemachine+0xc78>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f7fa fedc 	bl	80005a8 <__aeabi_dmul>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4610      	mov	r0, r2
 80057f6:	4619      	mov	r1, r3
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	4b81      	ldr	r3, [pc, #516]	@ (8005a04 <statemachine+0xc84>)
 80057fe:	f7fa fffd 	bl	80007fc <__aeabi_ddiv>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	ec43 2b17 	vmov	d7, r2, r3
 800580a:	eeb0 0a47 	vmov.f32	s0, s14
 800580e:	eef0 0a67 	vmov.f32	s1, s15
 8005812:	f019 fd85 	bl	801f320 <cos>
 8005816:	ec51 0b10 	vmov	r0, r1, d0
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	4b79      	ldr	r3, [pc, #484]	@ (8005a04 <statemachine+0xc84>)
 8005820:	f7fa fec2 	bl	80005a8 <__aeabi_dmul>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	ec43 2b17 	vmov	d7, r2, r3
 800582c:	eeb0 0a47 	vmov.f32	s0, s14
 8005830:	eef0 0a67 	vmov.f32	s1, s15
 8005834:	f019 fee4 	bl	801f600 <floor>
 8005838:	ec51 0b10 	vmov	r0, r1, d0
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	4b71      	ldr	r3, [pc, #452]	@ (8005a08 <statemachine+0xc88>)
 8005842:	f7fa fcfb 	bl	800023c <__adddf3>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	f7fb f983 	bl	8000b58 <__aeabi_d2uiz>
 8005852:	4603      	mov	r3, r0
 8005854:	b2dc      	uxtb	r4, r3
 8005856:	4b6a      	ldr	r3, [pc, #424]	@ (8005a00 <statemachine+0xc80>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	f1c3 0303 	rsb	r3, r3, #3
 800585e:	4618      	mov	r0, r3
 8005860:	f7fa fe38 	bl	80004d4 <__aeabi_i2d>
 8005864:	a364      	add	r3, pc, #400	@ (adr r3, 80059f8 <statemachine+0xc78>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f7fa fe9d 	bl	80005a8 <__aeabi_dmul>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4610      	mov	r0, r2
 8005874:	4619      	mov	r1, r3
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	4b62      	ldr	r3, [pc, #392]	@ (8005a04 <statemachine+0xc84>)
 800587c:	f7fa ffbe 	bl	80007fc <__aeabi_ddiv>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	ec43 2b17 	vmov	d7, r2, r3
 8005888:	eeb0 0a47 	vmov.f32	s0, s14
 800588c:	eef0 0a67 	vmov.f32	s1, s15
 8005890:	f019 fd9a 	bl	801f3c8 <sin>
 8005894:	ec51 0b10 	vmov	r0, r1, d0
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	4b59      	ldr	r3, [pc, #356]	@ (8005a04 <statemachine+0xc84>)
 800589e:	f7fa fe83 	bl	80005a8 <__aeabi_dmul>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	ec43 2b17 	vmov	d7, r2, r3
 80058aa:	eeb0 0a47 	vmov.f32	s0, s14
 80058ae:	eef0 0a67 	vmov.f32	s1, s15
 80058b2:	f019 fea5 	bl	801f600 <floor>
 80058b6:	ec53 2b10 	vmov	r2, r3, d0
 80058ba:	f04f 0000 	mov.w	r0, #0
 80058be:	4953      	ldr	r1, [pc, #332]	@ (8005a0c <statemachine+0xc8c>)
 80058c0:	f7fa fcba 	bl	8000238 <__aeabi_dsub>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4610      	mov	r0, r2
 80058ca:	4619      	mov	r1, r3
 80058cc:	f7fb f944 	bl	8000b58 <__aeabi_d2uiz>
 80058d0:	4603      	mov	r3, r0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2201      	movs	r2, #1
 80058d6:	9200      	str	r2, [sp, #0]
 80058d8:	4622      	mov	r2, r4
 80058da:	2130      	movs	r1, #48	@ 0x30
 80058dc:	2040      	movs	r0, #64	@ 0x40
 80058de:	f7fe fe03 	bl	80044e8 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-MINUTE)*M_PI/30)),48-floor(12*sin((15-MINUTE)*M_PI/30)),White);
 80058e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005a10 <statemachine+0xc90>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f1c3 030f 	rsb	r3, r3, #15
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fa fdf2 	bl	80004d4 <__aeabi_i2d>
 80058f0:	a341      	add	r3, pc, #260	@ (adr r3, 80059f8 <statemachine+0xc78>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f7fa fe57 	bl	80005a8 <__aeabi_dmul>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4610      	mov	r0, r2
 8005900:	4619      	mov	r1, r3
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	4b43      	ldr	r3, [pc, #268]	@ (8005a14 <statemachine+0xc94>)
 8005908:	f7fa ff78 	bl	80007fc <__aeabi_ddiv>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	ec43 2b17 	vmov	d7, r2, r3
 8005914:	eeb0 0a47 	vmov.f32	s0, s14
 8005918:	eef0 0a67 	vmov.f32	s1, s15
 800591c:	f019 fd00 	bl	801f320 <cos>
 8005920:	ec51 0b10 	vmov	r0, r1, d0
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	4b3b      	ldr	r3, [pc, #236]	@ (8005a18 <statemachine+0xc98>)
 800592a:	f7fa fe3d 	bl	80005a8 <__aeabi_dmul>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	ec43 2b17 	vmov	d7, r2, r3
 8005936:	eeb0 0a47 	vmov.f32	s0, s14
 800593a:	eef0 0a67 	vmov.f32	s1, s15
 800593e:	f019 fe5f 	bl	801f600 <floor>
 8005942:	ec51 0b10 	vmov	r0, r1, d0
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a08 <statemachine+0xc88>)
 800594c:	f7fa fc76 	bl	800023c <__adddf3>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4610      	mov	r0, r2
 8005956:	4619      	mov	r1, r3
 8005958:	f7fb f8fe 	bl	8000b58 <__aeabi_d2uiz>
 800595c:	4603      	mov	r3, r0
 800595e:	b2dc      	uxtb	r4, r3
 8005960:	4b2b      	ldr	r3, [pc, #172]	@ (8005a10 <statemachine+0xc90>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	f1c3 030f 	rsb	r3, r3, #15
 8005968:	4618      	mov	r0, r3
 800596a:	f7fa fdb3 	bl	80004d4 <__aeabi_i2d>
 800596e:	a322      	add	r3, pc, #136	@ (adr r3, 80059f8 <statemachine+0xc78>)
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f7fa fe18 	bl	80005a8 <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4610      	mov	r0, r2
 800597e:	4619      	mov	r1, r3
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	4b23      	ldr	r3, [pc, #140]	@ (8005a14 <statemachine+0xc94>)
 8005986:	f7fa ff39 	bl	80007fc <__aeabi_ddiv>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	ec43 2b17 	vmov	d7, r2, r3
 8005992:	eeb0 0a47 	vmov.f32	s0, s14
 8005996:	eef0 0a67 	vmov.f32	s1, s15
 800599a:	f019 fd15 	bl	801f3c8 <sin>
 800599e:	ec51 0b10 	vmov	r0, r1, d0
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a18 <statemachine+0xc98>)
 80059a8:	f7fa fdfe 	bl	80005a8 <__aeabi_dmul>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	ec43 2b17 	vmov	d7, r2, r3
 80059b4:	eeb0 0a47 	vmov.f32	s0, s14
 80059b8:	eef0 0a67 	vmov.f32	s1, s15
 80059bc:	f019 fe20 	bl	801f600 <floor>
 80059c0:	ec53 2b10 	vmov	r2, r3, d0
 80059c4:	f04f 0000 	mov.w	r0, #0
 80059c8:	4910      	ldr	r1, [pc, #64]	@ (8005a0c <statemachine+0xc8c>)
 80059ca:	f7fa fc35 	bl	8000238 <__aeabi_dsub>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4610      	mov	r0, r2
 80059d4:	4619      	mov	r1, r3
 80059d6:	f7fb f8bf 	bl	8000b58 <__aeabi_d2uiz>
 80059da:	4603      	mov	r3, r0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2201      	movs	r2, #1
 80059e0:	9200      	str	r2, [sp, #0]
 80059e2:	4622      	mov	r2, r4
 80059e4:	2130      	movs	r1, #48	@ 0x30
 80059e6:	2040      	movs	r0, #64	@ 0x40
 80059e8:	f7fe fd7e 	bl	80044e8 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e10a      	b.n	8005c08 <statemachine+0xe88>
 80059f2:	bf00      	nop
 80059f4:	f3af 8000 	nop.w
 80059f8:	54442d18 	.word	0x54442d18
 80059fc:	400921fb 	.word	0x400921fb
 8005a00:	20000ca5 	.word	0x20000ca5
 8005a04:	40180000 	.word	0x40180000
 8005a08:	40500000 	.word	0x40500000
 8005a0c:	40480000 	.word	0x40480000
 8005a10:	20000ca6 	.word	0x20000ca6
 8005a14:	403e0000 	.word	0x403e0000
 8005a18:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7fa fd59 	bl	80004d4 <__aeabi_i2d>
 8005a22:	a399      	add	r3, pc, #612	@ (adr r3, 8005c88 <statemachine+0xf08>)
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	f7fa fdbe 	bl	80005a8 <__aeabi_dmul>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4610      	mov	r0, r2
 8005a32:	4619      	mov	r1, r3
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	4b95      	ldr	r3, [pc, #596]	@ (8005c90 <statemachine+0xf10>)
 8005a3a:	f7fa fedf 	bl	80007fc <__aeabi_ddiv>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	ec43 2b17 	vmov	d7, r2, r3
 8005a46:	eeb0 0a47 	vmov.f32	s0, s14
 8005a4a:	eef0 0a67 	vmov.f32	s1, s15
 8005a4e:	f019 fc67 	bl	801f320 <cos>
 8005a52:	ec51 0b10 	vmov	r0, r1, d0
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	4b8e      	ldr	r3, [pc, #568]	@ (8005c94 <statemachine+0xf14>)
 8005a5c:	f7fa fda4 	bl	80005a8 <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	ec43 2b17 	vmov	d7, r2, r3
 8005a68:	eeb0 0a47 	vmov.f32	s0, s14
 8005a6c:	eef0 0a67 	vmov.f32	s1, s15
 8005a70:	f019 fdc6 	bl	801f600 <floor>
 8005a74:	ec51 0b10 	vmov	r0, r1, d0
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	4b86      	ldr	r3, [pc, #536]	@ (8005c98 <statemachine+0xf18>)
 8005a7e:	f7fa fbdd 	bl	800023c <__adddf3>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f7fb f865 	bl	8000b58 <__aeabi_d2uiz>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	b2dc      	uxtb	r4, r3
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7fa fd1e 	bl	80004d4 <__aeabi_i2d>
 8005a98:	a37b      	add	r3, pc, #492	@ (adr r3, 8005c88 <statemachine+0xf08>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f7fa fd83 	bl	80005a8 <__aeabi_dmul>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	4b78      	ldr	r3, [pc, #480]	@ (8005c90 <statemachine+0xf10>)
 8005ab0:	f7fa fea4 	bl	80007fc <__aeabi_ddiv>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	ec43 2b17 	vmov	d7, r2, r3
 8005abc:	eeb0 0a47 	vmov.f32	s0, s14
 8005ac0:	eef0 0a67 	vmov.f32	s1, s15
 8005ac4:	f019 fc80 	bl	801f3c8 <sin>
 8005ac8:	ec51 0b10 	vmov	r0, r1, d0
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	4b70      	ldr	r3, [pc, #448]	@ (8005c94 <statemachine+0xf14>)
 8005ad2:	f7fa fd69 	bl	80005a8 <__aeabi_dmul>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	ec43 2b17 	vmov	d7, r2, r3
 8005ade:	eeb0 0a47 	vmov.f32	s0, s14
 8005ae2:	eef0 0a67 	vmov.f32	s1, s15
 8005ae6:	f019 fd8b 	bl	801f600 <floor>
 8005aea:	ec51 0b10 	vmov	r0, r1, d0
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c9c <statemachine+0xf1c>)
 8005af4:	f7fa fba2 	bl	800023c <__adddf3>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4610      	mov	r0, r2
 8005afe:	4619      	mov	r1, r3
 8005b00:	f7fb f82a 	bl	8000b58 <__aeabi_d2uiz>
 8005b04:	4603      	mov	r3, r0
 8005b06:	b2dd      	uxtb	r5, r3
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7fa fce3 	bl	80004d4 <__aeabi_i2d>
 8005b0e:	a35e      	add	r3, pc, #376	@ (adr r3, 8005c88 <statemachine+0xf08>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fd48 	bl	80005a8 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	4b5a      	ldr	r3, [pc, #360]	@ (8005c90 <statemachine+0xf10>)
 8005b26:	f7fa fe69 	bl	80007fc <__aeabi_ddiv>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	ec43 2b17 	vmov	d7, r2, r3
 8005b32:	eeb0 0a47 	vmov.f32	s0, s14
 8005b36:	eef0 0a67 	vmov.f32	s1, s15
 8005b3a:	f019 fbf1 	bl	801f320 <cos>
 8005b3e:	ec51 0b10 	vmov	r0, r1, d0
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	4b56      	ldr	r3, [pc, #344]	@ (8005ca0 <statemachine+0xf20>)
 8005b48:	f7fa fd2e 	bl	80005a8 <__aeabi_dmul>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	ec43 2b17 	vmov	d7, r2, r3
 8005b54:	eeb0 0a47 	vmov.f32	s0, s14
 8005b58:	eef0 0a67 	vmov.f32	s1, s15
 8005b5c:	f019 fd50 	bl	801f600 <floor>
 8005b60:	ec51 0b10 	vmov	r0, r1, d0
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	4b4b      	ldr	r3, [pc, #300]	@ (8005c98 <statemachine+0xf18>)
 8005b6a:	f7fa fb67 	bl	800023c <__adddf3>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	f7fa ffef 	bl	8000b58 <__aeabi_d2uiz>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	b2de      	uxtb	r6, r3
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7fa fca8 	bl	80004d4 <__aeabi_i2d>
 8005b84:	a340      	add	r3, pc, #256	@ (adr r3, 8005c88 <statemachine+0xf08>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa fd0d 	bl	80005a8 <__aeabi_dmul>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4610      	mov	r0, r2
 8005b94:	4619      	mov	r1, r3
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c90 <statemachine+0xf10>)
 8005b9c:	f7fa fe2e 	bl	80007fc <__aeabi_ddiv>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	ec43 2b17 	vmov	d7, r2, r3
 8005ba8:	eeb0 0a47 	vmov.f32	s0, s14
 8005bac:	eef0 0a67 	vmov.f32	s1, s15
 8005bb0:	f019 fc0a 	bl	801f3c8 <sin>
 8005bb4:	ec51 0b10 	vmov	r0, r1, d0
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	4b38      	ldr	r3, [pc, #224]	@ (8005ca0 <statemachine+0xf20>)
 8005bbe:	f7fa fcf3 	bl	80005a8 <__aeabi_dmul>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	ec43 2b17 	vmov	d7, r2, r3
 8005bca:	eeb0 0a47 	vmov.f32	s0, s14
 8005bce:	eef0 0a67 	vmov.f32	s1, s15
 8005bd2:	f019 fd15 	bl	801f600 <floor>
 8005bd6:	ec51 0b10 	vmov	r0, r1, d0
 8005bda:	f04f 0200 	mov.w	r2, #0
 8005bde:	4b2f      	ldr	r3, [pc, #188]	@ (8005c9c <statemachine+0xf1c>)
 8005be0:	f7fa fb2c 	bl	800023c <__adddf3>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4610      	mov	r0, r2
 8005bea:	4619      	mov	r1, r3
 8005bec:	f7fa ffb4 	bl	8000b58 <__aeabi_d2uiz>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	9200      	str	r2, [sp, #0]
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f7fe fc73 	bl	80044e8 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3301      	adds	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b0c      	cmp	r3, #12
 8005c0c:	f77f af06 	ble.w	8005a1c <statemachine+0xc9c>
					  }
					  if(BTN_B>=1){
 8005c10:	4b24      	ldr	r3, [pc, #144]	@ (8005ca4 <statemachine+0xf24>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dd0b      	ble.n	8005c30 <statemachine+0xeb0>
					  	hrstate--;
 8005c18:	4b23      	ldr	r3, [pc, #140]	@ (8005ca8 <statemachine+0xf28>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	4b21      	ldr	r3, [pc, #132]	@ (8005ca8 <statemachine+0xf28>)
 8005c22:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8005c24:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca4 <statemachine+0xf24>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8005c2a:	e001      	b.n	8005c30 <statemachine+0xeb0>
					  break;
 8005c2c:	bf00      	nop
 8005c2e:	e000      	b.n	8005c32 <statemachine+0xeb2>
					  break;
 8005c30:	bf00      	nop

				  }

				  if(BTN_A>=1){
 8005c32:	4b1e      	ldr	r3, [pc, #120]	@ (8005cac <statemachine+0xf2c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	dd0e      	ble.n	8005c58 <statemachine+0xed8>
			  		state++;
 8005c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb0 <statemachine+0xf30>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb0 <statemachine+0xf30>)
 8005c44:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8005c46:	4b19      	ldr	r3, [pc, #100]	@ (8005cac <statemachine+0xf2c>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8005c4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ca4 <statemachine+0xf24>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
			  		settimeen=0;
 8005c52:	4b18      	ldr	r3, [pc, #96]	@ (8005cb4 <statemachine+0xf34>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
			  		}
				  if(BTN_A_LONG>=1){
 8005c58:	4b17      	ldr	r3, [pc, #92]	@ (8005cb8 <statemachine+0xf38>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f341 82b2 	ble.w	80071c6 <statemachine+0x2446>
				  									 									 									  			 	state--;
 8005c62:	4b13      	ldr	r3, [pc, #76]	@ (8005cb0 <statemachine+0xf30>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	4b11      	ldr	r3, [pc, #68]	@ (8005cb0 <statemachine+0xf30>)
 8005c6c:	701a      	strb	r2, [r3, #0]
				  									 									 									  			 	BTN_A=0;
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005cac <statemachine+0xf2c>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_B=0;
 8005c74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <statemachine+0xf24>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_A_LONG=0;
 8005c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb8 <statemachine+0xf38>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]





			  break;
 8005c80:	f001 baa1 	b.w	80071c6 <statemachine+0x2446>
 8005c84:	f3af 8000 	nop.w
 8005c88:	54442d18 	.word	0x54442d18
 8005c8c:	400921fb 	.word	0x400921fb
 8005c90:	40180000 	.word	0x40180000
 8005c94:	40240000 	.word	0x40240000
 8005c98:	40500000 	.word	0x40500000
 8005c9c:	40480000 	.word	0x40480000
 8005ca0:	40280000 	.word	0x40280000
 8005ca4:	2000087c 	.word	0x2000087c
 8005ca8:	200005e9 	.word	0x200005e9
 8005cac:	20000878 	.word	0x20000878
 8005cb0:	200005e8 	.word	0x200005e8
 8005cb4:	20000ca8 	.word	0x20000ca8
 8005cb8:	20000cc0 	.word	0x20000cc0
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f7fe fab9 	bl	8004234 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005cc2:	497a      	ldr	r1, [pc, #488]	@ (8005eac <statemachine+0x112c>)
 8005cc4:	487a      	ldr	r0, [pc, #488]	@ (8005eb0 <statemachine+0x1130>)
 8005cc6:	f7fd fce5 	bl	8003694 <nmea_parse>
			snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005cca:	4b79      	ldr	r3, [pc, #484]	@ (8005eb0 <statemachine+0x1130>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fa fc12 	bl	80004f8 <__aeabi_f2d>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	e9cd 2300 	strd	r2, r3, [sp]
 8005cdc:	4a75      	ldr	r2, [pc, #468]	@ (8005eb4 <statemachine+0x1134>)
 8005cde:	210f      	movs	r1, #15
 8005ce0:	4875      	ldr	r0, [pc, #468]	@ (8005eb8 <statemachine+0x1138>)
 8005ce2:	f016 fd6f 	bl	801c7c4 <sniprintf>
			ssd1306_SetCursor(32, 12);
 8005ce6:	210c      	movs	r1, #12
 8005ce8:	2020      	movs	r0, #32
 8005cea:	f7fe fbe5 	bl	80044b8 <ssd1306_SetCursor>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005cee:	4a73      	ldr	r2, [pc, #460]	@ (8005ebc <statemachine+0x113c>)
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	ca06      	ldmia	r2, {r1, r2}
 8005cf4:	4870      	ldr	r0, [pc, #448]	@ (8005eb8 <statemachine+0x1138>)
 8005cf6:	f7fe fbb9 	bl	800446c <ssd1306_WriteString>
			snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005cfa:	4b71      	ldr	r3, [pc, #452]	@ (8005ec0 <statemachine+0x1140>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fa fbfa 	bl	80004f8 <__aeabi_f2d>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	e9cd 2300 	strd	r2, r3, [sp]
 8005d0c:	4a6d      	ldr	r2, [pc, #436]	@ (8005ec4 <statemachine+0x1144>)
 8005d0e:	2114      	movs	r1, #20
 8005d10:	4869      	ldr	r0, [pc, #420]	@ (8005eb8 <statemachine+0x1138>)
 8005d12:	f016 fd57 	bl	801c7c4 <sniprintf>
			ssd1306_SetCursor(32, 20);
 8005d16:	2114      	movs	r1, #20
 8005d18:	2020      	movs	r0, #32
 8005d1a:	f7fe fbcd 	bl	80044b8 <ssd1306_SetCursor>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005d1e:	4a67      	ldr	r2, [pc, #412]	@ (8005ebc <statemachine+0x113c>)
 8005d20:	2301      	movs	r3, #1
 8005d22:	ca06      	ldmia	r2, {r1, r2}
 8005d24:	4864      	ldr	r0, [pc, #400]	@ (8005eb8 <statemachine+0x1138>)
 8005d26:	f7fe fba1 	bl	800446c <ssd1306_WriteString>
			ssd1306_SetCursor(32, 28);
 8005d2a:	211c      	movs	r1, #28
 8005d2c:	2020      	movs	r0, #32
 8005d2e:	f7fe fbc3 	bl	80044b8 <ssd1306_SetCursor>
			snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 8005d32:	4b65      	ldr	r3, [pc, #404]	@ (8005ec8 <statemachine+0x1148>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fa fbde 	bl	80004f8 <__aeabi_f2d>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	e9cd 2300 	strd	r2, r3, [sp]
 8005d44:	4a61      	ldr	r2, [pc, #388]	@ (8005ecc <statemachine+0x114c>)
 8005d46:	210f      	movs	r1, #15
 8005d48:	485b      	ldr	r0, [pc, #364]	@ (8005eb8 <statemachine+0x1138>)
 8005d4a:	f016 fd3b 	bl	801c7c4 <sniprintf>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8005ebc <statemachine+0x113c>)
 8005d50:	2301      	movs	r3, #1
 8005d52:	ca06      	ldmia	r2, {r1, r2}
 8005d54:	4858      	ldr	r0, [pc, #352]	@ (8005eb8 <statemachine+0x1138>)
 8005d56:	f7fe fb89 	bl	800446c <ssd1306_WriteString>

			  if(BTN_A>=1){
 8005d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ed0 <statemachine+0x1150>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dd0b      	ble.n	8005d7a <statemachine+0xffa>
			  		state++;
 8005d62:	4b5c      	ldr	r3, [pc, #368]	@ (8005ed4 <statemachine+0x1154>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	3301      	adds	r3, #1
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	4b5a      	ldr	r3, [pc, #360]	@ (8005ed4 <statemachine+0x1154>)
 8005d6c:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8005d6e:	4b58      	ldr	r3, [pc, #352]	@ (8005ed0 <statemachine+0x1150>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8005d74:	4b58      	ldr	r3, [pc, #352]	@ (8005ed8 <statemachine+0x1158>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
			  		}
			  if(BTN_A_LONG>=1){
 8005d7a:	4b58      	ldr	r3, [pc, #352]	@ (8005edc <statemachine+0x115c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f341 8223 	ble.w	80071ca <statemachine+0x244a>
			  				 									 									  			 	state--;
 8005d84:	4b53      	ldr	r3, [pc, #332]	@ (8005ed4 <statemachine+0x1154>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	4b51      	ldr	r3, [pc, #324]	@ (8005ed4 <statemachine+0x1154>)
 8005d8e:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005d90:	4b4f      	ldr	r3, [pc, #316]	@ (8005ed0 <statemachine+0x1150>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005d96:	4b50      	ldr	r3, [pc, #320]	@ (8005ed8 <statemachine+0x1158>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005d9c:	4b4f      	ldr	r3, [pc, #316]	@ (8005edc <statemachine+0x115c>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005da2:	f001 ba12 	b.w	80071ca <statemachine+0x244a>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005da6:	2000      	movs	r0, #0
 8005da8:	f7fe fa44 	bl	8004234 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 12);
 8005dac:	210c      	movs	r1, #12
 8005dae:	2020      	movs	r0, #32
 8005db0:	f7fe fb82 	bl	80044b8 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8005db4:	4a41      	ldr	r2, [pc, #260]	@ (8005ebc <statemachine+0x113c>)
 8005db6:	2301      	movs	r3, #1
 8005db8:	ca06      	ldmia	r2, {r1, r2}
 8005dba:	4849      	ldr	r0, [pc, #292]	@ (8005ee0 <statemachine+0x1160>)
 8005dbc:	f7fe fb56 	bl	800446c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 32);
 8005dc0:	2120      	movs	r1, #32
 8005dc2:	2020      	movs	r0, #32
 8005dc4:	f7fe fb78 	bl	80044b8 <ssd1306_SetCursor>

			  switch(chronostate){
 8005dc8:	4b46      	ldr	r3, [pc, #280]	@ (8005ee4 <statemachine+0x1164>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d03c      	beq.n	8005e4a <statemachine+0x10ca>
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	f300 8098 	bgt.w	8005f06 <statemachine+0x1186>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <statemachine+0x1060>
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d01d      	beq.n	8005e1a <statemachine+0x109a>
 8005dde:	e092      	b.n	8005f06 <statemachine+0x1186>
			  case STATE_RESET:
				  min=0;
 8005de0:	4b41      	ldr	r3, [pc, #260]	@ (8005ee8 <statemachine+0x1168>)
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005de8:	4b40      	ldr	r3, [pc, #256]	@ (8005eec <statemachine+0x116c>)
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8005df0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ef0 <statemachine+0x1170>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005df6:	4b38      	ldr	r3, [pc, #224]	@ (8005ed8 <statemachine+0x1158>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dd51      	ble.n	8005ea2 <statemachine+0x1122>
				  		chronostate++;
 8005dfe:	4b39      	ldr	r3, [pc, #228]	@ (8005ee4 <statemachine+0x1164>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	4b37      	ldr	r3, [pc, #220]	@ (8005ee4 <statemachine+0x1164>)
 8005e08:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005e0a:	4b33      	ldr	r3, [pc, #204]	@ (8005ed8 <statemachine+0x1158>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8005e10:	4b38      	ldr	r3, [pc, #224]	@ (8005ef4 <statemachine+0x1174>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a38      	ldr	r2, [pc, #224]	@ (8005ef8 <statemachine+0x1178>)
 8005e16:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005e18:	e043      	b.n	8005ea2 <statemachine+0x1122>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005e1a:	4b36      	ldr	r3, [pc, #216]	@ (8005ef4 <statemachine+0x1174>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b36      	ldr	r3, [pc, #216]	@ (8005ef8 <statemachine+0x1178>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	1ad2      	subs	r2, r2, r3
 8005e24:	4b35      	ldr	r3, [pc, #212]	@ (8005efc <statemachine+0x117c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4413      	add	r3, r2
 8005e2a:	4a31      	ldr	r2, [pc, #196]	@ (8005ef0 <statemachine+0x1170>)
 8005e2c:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed8 <statemachine+0x1158>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dd37      	ble.n	8005ea6 <statemachine+0x1126>
				  		chronostate++;
 8005e36:	4b2b      	ldr	r3, [pc, #172]	@ (8005ee4 <statemachine+0x1164>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	4b29      	ldr	r3, [pc, #164]	@ (8005ee4 <statemachine+0x1164>)
 8005e40:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005e42:	4b25      	ldr	r3, [pc, #148]	@ (8005ed8 <statemachine+0x1158>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8005e48:	e02d      	b.n	8005ea6 <statemachine+0x1126>
			  case STATE_PAUSE:
				  timehandler=calctime;
 8005e4a:	4b29      	ldr	r3, [pc, #164]	@ (8005ef0 <statemachine+0x1170>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8005efc <statemachine+0x117c>)
 8005e50:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005e52:	4b21      	ldr	r3, [pc, #132]	@ (8005ed8 <statemachine+0x1158>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dd0c      	ble.n	8005e74 <statemachine+0x10f4>
				  			chronostate--;
 8005e5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ee4 <statemachine+0x1164>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	4b20      	ldr	r3, [pc, #128]	@ (8005ee4 <statemachine+0x1164>)
 8005e64:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8005e66:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed8 <statemachine+0x1158>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8005e6c:	4b21      	ldr	r3, [pc, #132]	@ (8005ef4 <statemachine+0x1174>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a21      	ldr	r2, [pc, #132]	@ (8005ef8 <statemachine+0x1178>)
 8005e72:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005e74:	4b22      	ldr	r3, [pc, #136]	@ (8005f00 <statemachine+0x1180>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dd43      	ble.n	8005f04 <statemachine+0x1184>
				  				  	chronostate--;
 8005e7c:	4b19      	ldr	r3, [pc, #100]	@ (8005ee4 <statemachine+0x1164>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	4b17      	ldr	r3, [pc, #92]	@ (8005ee4 <statemachine+0x1164>)
 8005e86:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005e88:	4b16      	ldr	r3, [pc, #88]	@ (8005ee4 <statemachine+0x1164>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <statemachine+0x1164>)
 8005e92:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005e94:	4b1a      	ldr	r3, [pc, #104]	@ (8005f00 <statemachine+0x1180>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005e9a:	4b18      	ldr	r3, [pc, #96]	@ (8005efc <statemachine+0x117c>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005ea0:	e030      	b.n	8005f04 <statemachine+0x1184>
				  break;
 8005ea2:	bf00      	nop
 8005ea4:	e02f      	b.n	8005f06 <statemachine+0x1186>
				  break;
 8005ea6:	bf00      	nop
 8005ea8:	e02d      	b.n	8005f06 <statemachine+0x1186>
 8005eaa:	bf00      	nop
 8005eac:	20000638 	.word	0x20000638
 8005eb0:	20000838 	.word	0x20000838
 8005eb4:	080211d0 	.word	0x080211d0
 8005eb8:	20000ad8 	.word	0x20000ad8
 8005ebc:	20000014 	.word	0x20000014
 8005ec0:	200008b0 	.word	0x200008b0
 8005ec4:	080211dc 	.word	0x080211dc
 8005ec8:	200008a8 	.word	0x200008a8
 8005ecc:	080211e8 	.word	0x080211e8
 8005ed0:	20000878 	.word	0x20000878
 8005ed4:	200005e8 	.word	0x200005e8
 8005ed8:	2000087c 	.word	0x2000087c
 8005edc:	20000cc0 	.word	0x20000cc0
 8005ee0:	080211f4 	.word	0x080211f4
 8005ee4:	200005ec 	.word	0x200005ec
 8005ee8:	20000c58 	.word	0x20000c58
 8005eec:	20000c54 	.word	0x20000c54
 8005ef0:	20000c60 	.word	0x20000c60
 8005ef4:	20001550 	.word	0x20001550
 8005ef8:	20000c5c 	.word	0x20000c5c
 8005efc:	20000c64 	.word	0x20000c64
 8005f00:	20000cbc 	.word	0x20000cbc
				  break;
 8005f04:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005f06:	4ba4      	ldr	r3, [pc, #656]	@ (8006198 <statemachine+0x1418>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800619c <statemachine+0x141c>
 8005f16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f1a:	ee16 0a90 	vmov	r0, s13
 8005f1e:	f7fa faeb 	bl	80004f8 <__aeabi_f2d>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	ec43 2b10 	vmov	d0, r2, r3
 8005f2a:	f019 fb69 	bl	801f600 <floor>
 8005f2e:	ec53 2b10 	vmov	r2, r3, d0
 8005f32:	4610      	mov	r0, r2
 8005f34:	4619      	mov	r1, r3
 8005f36:	f7fa fe2f 	bl	8000b98 <__aeabi_d2f>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4a98      	ldr	r2, [pc, #608]	@ (80061a0 <statemachine+0x1420>)
 8005f3e:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005f40:	4b95      	ldr	r3, [pc, #596]	@ (8006198 <statemachine+0x1418>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f4c:	4b94      	ldr	r3, [pc, #592]	@ (80061a0 <statemachine+0x1420>)
 8005f4e:	edd3 7a00 	vldr	s15, [r3]
 8005f52:	eddf 6a92 	vldr	s13, [pc, #584]	@ 800619c <statemachine+0x141c>
 8005f56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005f5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f5e:	eddf 6a91 	vldr	s13, [pc, #580]	@ 80061a4 <statemachine+0x1424>
 8005f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f66:	4b90      	ldr	r3, [pc, #576]	@ (80061a8 <statemachine+0x1428>)
 8005f68:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80061a0 <statemachine+0x1420>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fa fac1 	bl	80004f8 <__aeabi_f2d>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	e9cd 2300 	strd	r2, r3, [sp]
 8005f7e:	4a8b      	ldr	r2, [pc, #556]	@ (80061ac <statemachine+0x142c>)
 8005f80:	210f      	movs	r1, #15
 8005f82:	488b      	ldr	r0, [pc, #556]	@ (80061b0 <statemachine+0x1430>)
 8005f84:	f016 fc1e 	bl	801c7c4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005f88:	4a8a      	ldr	r2, [pc, #552]	@ (80061b4 <statemachine+0x1434>)
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	ca06      	ldmia	r2, {r1, r2}
 8005f8e:	4888      	ldr	r0, [pc, #544]	@ (80061b0 <statemachine+0x1430>)
 8005f90:	f7fe fa6c 	bl	800446c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 44);
 8005f94:	212c      	movs	r1, #44	@ 0x2c
 8005f96:	2020      	movs	r0, #32
 8005f98:	f7fe fa8e 	bl	80044b8 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8005f9c:	4b82      	ldr	r3, [pc, #520]	@ (80061a8 <statemachine+0x1428>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fa faa9 	bl	80004f8 <__aeabi_f2d>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	e9cd 2300 	strd	r2, r3, [sp]
 8005fae:	4a82      	ldr	r2, [pc, #520]	@ (80061b8 <statemachine+0x1438>)
 8005fb0:	210f      	movs	r1, #15
 8005fb2:	487f      	ldr	r0, [pc, #508]	@ (80061b0 <statemachine+0x1430>)
 8005fb4:	f016 fc06 	bl	801c7c4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005fb8:	4a7e      	ldr	r2, [pc, #504]	@ (80061b4 <statemachine+0x1434>)
 8005fba:	2301      	movs	r3, #1
 8005fbc:	ca06      	ldmia	r2, {r1, r2}
 8005fbe:	487c      	ldr	r0, [pc, #496]	@ (80061b0 <statemachine+0x1430>)
 8005fc0:	f7fe fa54 	bl	800446c <ssd1306_WriteString>


			  if(BTN_A>=1){
 8005fc4:	4b7d      	ldr	r3, [pc, #500]	@ (80061bc <statemachine+0x143c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dd0b      	ble.n	8005fe4 <statemachine+0x1264>
			 	state++;
 8005fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80061c0 <statemachine+0x1440>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	4b7a      	ldr	r3, [pc, #488]	@ (80061c0 <statemachine+0x1440>)
 8005fd6:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005fd8:	4b78      	ldr	r3, [pc, #480]	@ (80061bc <statemachine+0x143c>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005fde:	4b79      	ldr	r3, [pc, #484]	@ (80061c4 <statemachine+0x1444>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005fe4:	4b78      	ldr	r3, [pc, #480]	@ (80061c8 <statemachine+0x1448>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f341 80f0 	ble.w	80071ce <statemachine+0x244e>
			  				 									 									  			 	state--;
 8005fee:	4b74      	ldr	r3, [pc, #464]	@ (80061c0 <statemachine+0x1440>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4b72      	ldr	r3, [pc, #456]	@ (80061c0 <statemachine+0x1440>)
 8005ff8:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005ffa:	4b70      	ldr	r3, [pc, #448]	@ (80061bc <statemachine+0x143c>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8006000:	4b70      	ldr	r3, [pc, #448]	@ (80061c4 <statemachine+0x1444>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8006006:	4b70      	ldr	r3, [pc, #448]	@ (80061c8 <statemachine+0x1448>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 800600c:	f001 b8df 	b.w	80071ce <statemachine+0x244e>


			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 8006010:	2000      	movs	r0, #0
 8006012:	f7fe f90f 	bl	8004234 <ssd1306_Fill>

				  if(settimeen==0){
 8006016:	4b6d      	ldr	r3, [pc, #436]	@ (80061cc <statemachine+0x144c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d145      	bne.n	80060aa <statemachine+0x132a>

					  if(myData.fix==1){
 800601e:	4b6c      	ldr	r3, [pc, #432]	@ (80061d0 <statemachine+0x1450>)
 8006020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006022:	2b01      	cmp	r3, #1
 8006024:	d141      	bne.n	80060aa <statemachine+0x132a>
						settimeen=1;
 8006026:	4b69      	ldr	r3, [pc, #420]	@ (80061cc <statemachine+0x144c>)
 8006028:	2201      	movs	r2, #1
 800602a:	601a      	str	r2, [r3, #0]
						HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 800602c:	4b68      	ldr	r3, [pc, #416]	@ (80061d0 <statemachine+0x1450>)
 800602e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	0092      	lsls	r2, r2, #2
 800603c:	4413      	add	r3, r2
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	b2da      	uxtb	r2, r3
 8006042:	4b63      	ldr	r3, [pc, #396]	@ (80061d0 <statemachine+0x1450>)
 8006044:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	b2db      	uxtb	r3, r3
 800604e:	4413      	add	r3, r2
 8006050:	b2da      	uxtb	r2, r3
 8006052:	4b60      	ldr	r3, [pc, #384]	@ (80061d4 <statemachine+0x1454>)
 8006054:	701a      	strb	r2, [r3, #0]
						MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8006056:	4b5e      	ldr	r3, [pc, #376]	@ (80061d0 <statemachine+0x1450>)
 8006058:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	b2db      	uxtb	r3, r3
 8006062:	461a      	mov	r2, r3
 8006064:	0092      	lsls	r2, r2, #2
 8006066:	4413      	add	r3, r2
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	b2da      	uxtb	r2, r3
 800606c:	4b58      	ldr	r3, [pc, #352]	@ (80061d0 <statemachine+0x1450>)
 800606e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	b2db      	uxtb	r3, r3
 8006078:	4413      	add	r3, r2
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b56      	ldr	r3, [pc, #344]	@ (80061d8 <statemachine+0x1458>)
 800607e:	701a      	strb	r2, [r3, #0]
						SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8006080:	4b53      	ldr	r3, [pc, #332]	@ (80061d0 <statemachine+0x1450>)
 8006082:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	0092      	lsls	r2, r2, #2
 8006090:	4413      	add	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	b2da      	uxtb	r2, r3
 8006096:	4b4e      	ldr	r3, [pc, #312]	@ (80061d0 <statemachine+0x1450>)
 8006098:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	4b4d      	ldr	r3, [pc, #308]	@ (80061dc <statemachine+0x145c>)
 80060a8:	701a      	strb	r2, [r3, #0]





				  switch(balisestate){
 80060aa:	4b4d      	ldr	r3, [pc, #308]	@ (80061e0 <statemachine+0x1460>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	f000 8236 	beq.w	8006520 <statemachine+0x17a0>
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	f301 808c 	bgt.w	80071d2 <statemachine+0x2452>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <statemachine+0x1348>
 80060be:	2b01      	cmp	r3, #1
 80060c0:	f000 809e 	beq.w	8006200 <statemachine+0x1480>
					  				 									 									  	}

				  }


				  break;
 80060c4:	f001 b885 	b.w	80071d2 <statemachine+0x2452>
					  ssd1306_SetCursor(32,12);
 80060c8:	210c      	movs	r1, #12
 80060ca:	2020      	movs	r0, #32
 80060cc:	f7fe f9f4 	bl	80044b8 <ssd1306_SetCursor>
					  ssd1306_WriteString("Tracker",Font_6x8,White);
 80060d0:	4a44      	ldr	r2, [pc, #272]	@ (80061e4 <statemachine+0x1464>)
 80060d2:	2301      	movs	r3, #1
 80060d4:	ca06      	ldmia	r2, {r1, r2}
 80060d6:	4844      	ldr	r0, [pc, #272]	@ (80061e8 <statemachine+0x1468>)
 80060d8:	f7fe f9c8 	bl	800446c <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 80060dc:	4b43      	ldr	r3, [pc, #268]	@ (80061ec <statemachine+0x146c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a43      	ldr	r2, [pc, #268]	@ (80061f0 <statemachine+0x1470>)
 80060e2:	2132      	movs	r1, #50	@ 0x32
 80060e4:	4832      	ldr	r0, [pc, #200]	@ (80061b0 <statemachine+0x1430>)
 80060e6:	f016 fb6d 	bl	801c7c4 <sniprintf>
					  ssd1306_SetCursor(32,22);
 80060ea:	2116      	movs	r1, #22
 80060ec:	2020      	movs	r0, #32
 80060ee:	f7fe f9e3 	bl	80044b8 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80060f2:	4a30      	ldr	r2, [pc, #192]	@ (80061b4 <statemachine+0x1434>)
 80060f4:	2301      	movs	r3, #1
 80060f6:	ca06      	ldmia	r2, {r1, r2}
 80060f8:	482d      	ldr	r0, [pc, #180]	@ (80061b0 <statemachine+0x1430>)
 80060fa:	f7fe f9b7 	bl	800446c <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 80060fe:	4b3d      	ldr	r3, [pc, #244]	@ (80061f4 <statemachine+0x1474>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a3d      	ldr	r2, [pc, #244]	@ (80061f8 <statemachine+0x1478>)
 8006104:	2132      	movs	r1, #50	@ 0x32
 8006106:	482a      	ldr	r0, [pc, #168]	@ (80061b0 <statemachine+0x1430>)
 8006108:	f016 fb5c 	bl	801c7c4 <sniprintf>
					  ssd1306_SetCursor(32,32);
 800610c:	2120      	movs	r1, #32
 800610e:	2020      	movs	r0, #32
 8006110:	f7fe f9d2 	bl	80044b8 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8006114:	4a27      	ldr	r2, [pc, #156]	@ (80061b4 <statemachine+0x1434>)
 8006116:	2301      	movs	r3, #1
 8006118:	ca06      	ldmia	r2, {r1, r2}
 800611a:	4825      	ldr	r0, [pc, #148]	@ (80061b0 <statemachine+0x1430>)
 800611c:	f7fe f9a6 	bl	800446c <ssd1306_WriteString>
					  if(BTN_B>=1){
 8006120:	4b28      	ldr	r3, [pc, #160]	@ (80061c4 <statemachine+0x1444>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	dd0e      	ble.n	8006146 <statemachine+0x13c6>
						balisestate++;
 8006128:	4b2d      	ldr	r3, [pc, #180]	@ (80061e0 <statemachine+0x1460>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	b2da      	uxtb	r2, r3
 8006130:	4b2b      	ldr	r3, [pc, #172]	@ (80061e0 <statemachine+0x1460>)
 8006132:	701a      	strb	r2, [r3, #0]
						BTN_B=0;
 8006134:	4b23      	ldr	r3, [pc, #140]	@ (80061c4 <statemachine+0x1444>)
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
						BTN_A=0;
 800613a:	4b20      	ldr	r3, [pc, #128]	@ (80061bc <statemachine+0x143c>)
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim17);
 8006140:	482e      	ldr	r0, [pc, #184]	@ (80061fc <statemachine+0x147c>)
 8006142:	f00a f805 	bl	8010150 <HAL_TIM_Base_Start_IT>
					  if(BTN_A>=1){
 8006146:	4b1d      	ldr	r3, [pc, #116]	@ (80061bc <statemachine+0x143c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	dd0e      	ble.n	800616c <statemachine+0x13ec>
					  				  			 	state++;
 800614e:	4b1c      	ldr	r3, [pc, #112]	@ (80061c0 <statemachine+0x1440>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	3301      	adds	r3, #1
 8006154:	b2da      	uxtb	r2, r3
 8006156:	4b1a      	ldr	r3, [pc, #104]	@ (80061c0 <statemachine+0x1440>)
 8006158:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 800615a:	4b18      	ldr	r3, [pc, #96]	@ (80061bc <statemachine+0x143c>)
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8006160:	4b18      	ldr	r3, [pc, #96]	@ (80061c4 <statemachine+0x1444>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
					  				  			 	settimeen=0;
 8006166:	4b19      	ldr	r3, [pc, #100]	@ (80061cc <statemachine+0x144c>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 800616c:	4b16      	ldr	r3, [pc, #88]	@ (80061c8 <statemachine+0x1448>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f340 8227 	ble.w	80065c4 <statemachine+0x1844>
								  state--;
 8006176:	4b12      	ldr	r3, [pc, #72]	@ (80061c0 <statemachine+0x1440>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	3b01      	subs	r3, #1
 800617c:	b2da      	uxtb	r2, r3
 800617e:	4b10      	ldr	r3, [pc, #64]	@ (80061c0 <statemachine+0x1440>)
 8006180:	701a      	strb	r2, [r3, #0]
								BTN_A_LONG=0;
 8006182:	4b11      	ldr	r3, [pc, #68]	@ (80061c8 <statemachine+0x1448>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
								BTN_B=0;
 8006188:	4b0e      	ldr	r3, [pc, #56]	@ (80061c4 <statemachine+0x1444>)
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
								settimeen=0;
 800618e:	4b0f      	ldr	r3, [pc, #60]	@ (80061cc <statemachine+0x144c>)
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
					  break;
 8006194:	e216      	b.n	80065c4 <statemachine+0x1844>
 8006196:	bf00      	nop
 8006198:	20000c60 	.word	0x20000c60
 800619c:	476a6000 	.word	0x476a6000
 80061a0:	20000c58 	.word	0x20000c58
 80061a4:	447a0000 	.word	0x447a0000
 80061a8:	20000c54 	.word	0x20000c54
 80061ac:	080211fc 	.word	0x080211fc
 80061b0:	20000ad8 	.word	0x20000ad8
 80061b4:	2000001c 	.word	0x2000001c
 80061b8:	08021208 	.word	0x08021208
 80061bc:	20000878 	.word	0x20000878
 80061c0:	200005e8 	.word	0x200005e8
 80061c4:	2000087c 	.word	0x2000087c
 80061c8:	20000cc0 	.word	0x20000cc0
 80061cc:	20000ca8 	.word	0x20000ca8
 80061d0:	20000838 	.word	0x20000838
 80061d4:	20000ca5 	.word	0x20000ca5
 80061d8:	20000ca6 	.word	0x20000ca6
 80061dc:	20000ca4 	.word	0x20000ca4
 80061e0:	200005ee 	.word	0x200005ee
 80061e4:	20000014 	.word	0x20000014
 80061e8:	08021210 	.word	0x08021210
 80061ec:	20000ab4 	.word	0x20000ab4
 80061f0:	08021218 	.word	0x08021218
 80061f4:	20000ab8 	.word	0x20000ab8
 80061f8:	08021224 	.word	0x08021224
 80061fc:	20001364 	.word	0x20001364
					  erasetime=HAL_GetTick();
 8006200:	f002 f85c 	bl	80082bc <HAL_GetTick>
 8006204:	4603      	mov	r3, r0
 8006206:	461a      	mov	r2, r3
 8006208:	4bab      	ldr	r3, [pc, #684]	@ (80064b8 <statemachine+0x1738>)
 800620a:	601a      	str	r2, [r3, #0]
					  if(pagenumber+1>=MAX_WRITE_PAGE){
 800620c:	4bab      	ldr	r3, [pc, #684]	@ (80064bc <statemachine+0x173c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8006214:	4293      	cmp	r3, r2
 8006216:	dd05      	ble.n	8006224 <statemachine+0x14a4>
						  HAL_TIM_Base_Stop_IT(&htim17);
 8006218:	48a9      	ldr	r0, [pc, #676]	@ (80064c0 <statemachine+0x1740>)
 800621a:	f009 ffe7 	bl	80101ec <HAL_TIM_Base_Stop_IT>
						  balisestate=2;
 800621e:	4ba9      	ldr	r3, [pc, #676]	@ (80064c4 <statemachine+0x1744>)
 8006220:	2202      	movs	r2, #2
 8006222:	701a      	strb	r2, [r3, #0]
					  if(enablewrite==1){
 8006224:	4ba8      	ldr	r3, [pc, #672]	@ (80064c8 <statemachine+0x1748>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	f040 80b0 	bne.w	800638e <statemachine+0x160e>
						  oldlat=myData.latitude;
 800622e:	4ba7      	ldr	r3, [pc, #668]	@ (80064cc <statemachine+0x174c>)
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	49a6      	ldr	r1, [pc, #664]	@ (80064d0 <statemachine+0x1750>)
 8006236:	e9c1 2300 	strd	r2, r3, [r1]
						  oldlong=myData.longitude;
 800623a:	4ba4      	ldr	r3, [pc, #656]	@ (80064cc <statemachine+0x174c>)
 800623c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006240:	49a4      	ldr	r1, [pc, #656]	@ (80064d4 <statemachine+0x1754>)
 8006242:	e9c1 2300 	strd	r2, r3, [r1]
						  nmea_parse(&myData, DataBuffer);
 8006246:	49a4      	ldr	r1, [pc, #656]	@ (80064d8 <statemachine+0x1758>)
 8006248:	48a0      	ldr	r0, [pc, #640]	@ (80064cc <statemachine+0x174c>)
 800624a:	f7fd fa23 	bl	8003694 <nmea_parse>
						  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 800624e:	4ba0      	ldr	r3, [pc, #640]	@ (80064d0 <statemachine+0x1750>)
 8006250:	ed93 7b00 	vldr	d7, [r3]
 8006254:	4b9d      	ldr	r3, [pc, #628]	@ (80064cc <statemachine+0x174c>)
 8006256:	ed93 6b00 	vldr	d6, [r3]
 800625a:	4b9e      	ldr	r3, [pc, #632]	@ (80064d4 <statemachine+0x1754>)
 800625c:	ed93 5b00 	vldr	d5, [r3]
 8006260:	4b9a      	ldr	r3, [pc, #616]	@ (80064cc <statemachine+0x174c>)
 8006262:	ed93 4b04 	vldr	d4, [r3, #16]
 8006266:	eeb0 3a44 	vmov.f32	s6, s8
 800626a:	eef0 3a64 	vmov.f32	s7, s9
 800626e:	eeb0 2a45 	vmov.f32	s4, s10
 8006272:	eef0 2a65 	vmov.f32	s5, s11
 8006276:	eeb0 1a46 	vmov.f32	s2, s12
 800627a:	eef0 1a66 	vmov.f32	s3, s13
 800627e:	eeb0 0a47 	vmov.f32	s0, s14
 8006282:	eef0 0a67 	vmov.f32	s1, s15
 8006286:	f7fd fab7 	bl	80037f8 <distancecalc>
 800628a:	ec51 0b10 	vmov	r0, r1, d0
 800628e:	a388      	add	r3, pc, #544	@ (adr r3, 80064b0 <statemachine+0x1730>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f7fa fc18 	bl	8000ac8 <__aeabi_dcmpgt>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d02b      	beq.n	80062f6 <statemachine+0x1576>
							  myData.latitude=oldlat;
 800629e:	4b8c      	ldr	r3, [pc, #560]	@ (80064d0 <statemachine+0x1750>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	4989      	ldr	r1, [pc, #548]	@ (80064cc <statemachine+0x174c>)
 80062a6:	e9c1 2300 	strd	r2, r3, [r1]
							  myData.longitude=oldlong;
 80062aa:	4b8a      	ldr	r3, [pc, #552]	@ (80064d4 <statemachine+0x1754>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	4986      	ldr	r1, [pc, #536]	@ (80064cc <statemachine+0x174c>)
 80062b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 80062b6:	4b89      	ldr	r3, [pc, #548]	@ (80064dc <statemachine+0x175c>)
 80062b8:	edd3 7a00 	vldr	s15, [r3]
 80062bc:	4b88      	ldr	r3, [pc, #544]	@ (80064e0 <statemachine+0x1760>)
 80062be:	ed93 7a00 	vldr	s14, [r3]
 80062c2:	4b82      	ldr	r3, [pc, #520]	@ (80064cc <statemachine+0x174c>)
 80062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c6:	4a81      	ldr	r2, [pc, #516]	@ (80064cc <statemachine+0x174c>)
 80062c8:	edd2 6a08 	vldr	s13, [r2, #32]
 80062cc:	eeb0 1a66 	vmov.f32	s2, s13
 80062d0:	461a      	mov	r2, r3
 80062d2:	497e      	ldr	r1, [pc, #504]	@ (80064cc <statemachine+0x174c>)
 80062d4:	eef0 0a47 	vmov.f32	s1, s14
 80062d8:	eeb0 0a67 	vmov.f32	s0, s15
 80062dc:	4881      	ldr	r0, [pc, #516]	@ (80064e4 <statemachine+0x1764>)
 80062de:	f7fd fd43 	bl	8003d68 <csvframe>
 80062e2:	4603      	mov	r3, r0
 80062e4:	4a80      	ldr	r2, [pc, #512]	@ (80064e8 <statemachine+0x1768>)
 80062e6:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 80062e8:	4b7f      	ldr	r3, [pc, #508]	@ (80064e8 <statemachine+0x1768>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	487d      	ldr	r0, [pc, #500]	@ (80064e4 <statemachine+0x1764>)
 80062f0:	f7fd fe70 	bl	8003fd4 <writebuffertoflash>
 80062f4:	e048      	b.n	8006388 <statemachine+0x1608>
							  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 80062f6:	4b76      	ldr	r3, [pc, #472]	@ (80064d0 <statemachine+0x1750>)
 80062f8:	ed93 7b00 	vldr	d7, [r3]
 80062fc:	4b73      	ldr	r3, [pc, #460]	@ (80064cc <statemachine+0x174c>)
 80062fe:	ed93 6b00 	vldr	d6, [r3]
 8006302:	4b74      	ldr	r3, [pc, #464]	@ (80064d4 <statemachine+0x1754>)
 8006304:	ed93 5b00 	vldr	d5, [r3]
 8006308:	4b70      	ldr	r3, [pc, #448]	@ (80064cc <statemachine+0x174c>)
 800630a:	ed93 4b04 	vldr	d4, [r3, #16]
 800630e:	eeb0 3a44 	vmov.f32	s6, s8
 8006312:	eef0 3a64 	vmov.f32	s7, s9
 8006316:	eeb0 2a45 	vmov.f32	s4, s10
 800631a:	eef0 2a65 	vmov.f32	s5, s11
 800631e:	eeb0 1a46 	vmov.f32	s2, s12
 8006322:	eef0 1a66 	vmov.f32	s3, s13
 8006326:	eeb0 0a47 	vmov.f32	s0, s14
 800632a:	eef0 0a67 	vmov.f32	s1, s15
 800632e:	f7fd fa63 	bl	80037f8 <distancecalc>
 8006332:	ec51 0b10 	vmov	r0, r1, d0
 8006336:	4b6d      	ldr	r3, [pc, #436]	@ (80064ec <statemachine+0x176c>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f7f9 ff7e 	bl	800023c <__adddf3>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4969      	ldr	r1, [pc, #420]	@ (80064ec <statemachine+0x176c>)
 8006346:	e9c1 2300 	strd	r2, r3, [r1]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 800634a:	4b64      	ldr	r3, [pc, #400]	@ (80064dc <statemachine+0x175c>)
 800634c:	edd3 7a00 	vldr	s15, [r3]
 8006350:	4b63      	ldr	r3, [pc, #396]	@ (80064e0 <statemachine+0x1760>)
 8006352:	ed93 7a00 	vldr	s14, [r3]
 8006356:	4b5d      	ldr	r3, [pc, #372]	@ (80064cc <statemachine+0x174c>)
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	4a5c      	ldr	r2, [pc, #368]	@ (80064cc <statemachine+0x174c>)
 800635c:	edd2 6a08 	vldr	s13, [r2, #32]
 8006360:	eeb0 1a66 	vmov.f32	s2, s13
 8006364:	461a      	mov	r2, r3
 8006366:	4959      	ldr	r1, [pc, #356]	@ (80064cc <statemachine+0x174c>)
 8006368:	eef0 0a47 	vmov.f32	s1, s14
 800636c:	eeb0 0a67 	vmov.f32	s0, s15
 8006370:	485c      	ldr	r0, [pc, #368]	@ (80064e4 <statemachine+0x1764>)
 8006372:	f7fd fcf9 	bl	8003d68 <csvframe>
 8006376:	4603      	mov	r3, r0
 8006378:	4a5b      	ldr	r2, [pc, #364]	@ (80064e8 <statemachine+0x1768>)
 800637a:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 800637c:	4b5a      	ldr	r3, [pc, #360]	@ (80064e8 <statemachine+0x1768>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4619      	mov	r1, r3
 8006382:	4858      	ldr	r0, [pc, #352]	@ (80064e4 <statemachine+0x1764>)
 8006384:	f7fd fe26 	bl	8003fd4 <writebuffertoflash>
						  enablewrite=0;
 8006388:	4b4f      	ldr	r3, [pc, #316]	@ (80064c8 <statemachine+0x1748>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
					  if(doubledonnee==0){
 800638e:	4b58      	ldr	r3, [pc, #352]	@ (80064f0 <statemachine+0x1770>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d111      	bne.n	80063ba <statemachine+0x163a>
					 	ssd1306_SetCursor(32,12);
 8006396:	210c      	movs	r1, #12
 8006398:	2020      	movs	r0, #32
 800639a:	f7fe f88d 	bl	80044b8 <ssd1306_SetCursor>
					 	snprintf((char *)bufferscreen,50,"p=%d",pagenumber);
 800639e:	4b47      	ldr	r3, [pc, #284]	@ (80064bc <statemachine+0x173c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a54      	ldr	r2, [pc, #336]	@ (80064f4 <statemachine+0x1774>)
 80063a4:	2132      	movs	r1, #50	@ 0x32
 80063a6:	4854      	ldr	r0, [pc, #336]	@ (80064f8 <statemachine+0x1778>)
 80063a8:	f016 fa0c 	bl	801c7c4 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80063ac:	4a53      	ldr	r2, [pc, #332]	@ (80064fc <statemachine+0x177c>)
 80063ae:	2301      	movs	r3, #1
 80063b0:	ca06      	ldmia	r2, {r1, r2}
 80063b2:	4851      	ldr	r0, [pc, #324]	@ (80064f8 <statemachine+0x1778>)
 80063b4:	f7fe f85a 	bl	800446c <ssd1306_WriteString>
 80063b8:	e013      	b.n	80063e2 <statemachine+0x1662>
					 	ssd1306_SetCursor(32,12);
 80063ba:	210c      	movs	r1, #12
 80063bc:	2020      	movs	r0, #32
 80063be:	f7fe f87b 	bl	80044b8 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 80063c2:	4b4a      	ldr	r3, [pc, #296]	@ (80064ec <statemachine+0x176c>)
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	e9cd 2300 	strd	r2, r3, [sp]
 80063cc:	4a4c      	ldr	r2, [pc, #304]	@ (8006500 <statemachine+0x1780>)
 80063ce:	2132      	movs	r1, #50	@ 0x32
 80063d0:	4849      	ldr	r0, [pc, #292]	@ (80064f8 <statemachine+0x1778>)
 80063d2:	f016 f9f7 	bl	801c7c4 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80063d6:	4a49      	ldr	r2, [pc, #292]	@ (80064fc <statemachine+0x177c>)
 80063d8:	2301      	movs	r3, #1
 80063da:	ca06      	ldmia	r2, {r1, r2}
 80063dc:	4846      	ldr	r0, [pc, #280]	@ (80064f8 <statemachine+0x1778>)
 80063de:	f7fe f845 	bl	800446c <ssd1306_WriteString>
					 	ssd1306_SetCursor(32,22);
 80063e2:	2116      	movs	r1, #22
 80063e4:	2020      	movs	r0, #32
 80063e6:	f7fe f867 	bl	80044b8 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 80063ea:	4b38      	ldr	r3, [pc, #224]	@ (80064cc <statemachine+0x174c>)
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	4a45      	ldr	r2, [pc, #276]	@ (8006504 <statemachine+0x1784>)
 80063f0:	2132      	movs	r1, #50	@ 0x32
 80063f2:	4841      	ldr	r0, [pc, #260]	@ (80064f8 <statemachine+0x1778>)
 80063f4:	f016 f9e6 	bl	801c7c4 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80063f8:	4a43      	ldr	r2, [pc, #268]	@ (8006508 <statemachine+0x1788>)
 80063fa:	2301      	movs	r3, #1
 80063fc:	ca06      	ldmia	r2, {r1, r2}
 80063fe:	483e      	ldr	r0, [pc, #248]	@ (80064f8 <statemachine+0x1778>)
 8006400:	f7fe f834 	bl	800446c <ssd1306_WriteString>
					 	batterygauge(vbat,34, 32,1);
 8006404:	4b36      	ldr	r3, [pc, #216]	@ (80064e0 <statemachine+0x1760>)
 8006406:	edd3 7a00 	vldr	s15, [r3]
 800640a:	2201      	movs	r2, #1
 800640c:	2120      	movs	r1, #32
 800640e:	2022      	movs	r0, #34	@ 0x22
 8006410:	eeb0 0a67 	vmov.f32	s0, s15
 8006414:	f7fe fa6c 	bl	80048f0 <batterygauge>
					 	ssd1306_SetCursor(55,32);
 8006418:	2120      	movs	r1, #32
 800641a:	2037      	movs	r0, #55	@ 0x37
 800641c:	f7fe f84c 	bl	80044b8 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8006420:	4b2f      	ldr	r3, [pc, #188]	@ (80064e0 <statemachine+0x1760>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f7fa f867 	bl	80004f8 <__aeabi_f2d>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	e9cd 2300 	strd	r2, r3, [sp]
 8006432:	4a36      	ldr	r2, [pc, #216]	@ (800650c <statemachine+0x178c>)
 8006434:	2132      	movs	r1, #50	@ 0x32
 8006436:	4830      	ldr	r0, [pc, #192]	@ (80064f8 <statemachine+0x1778>)
 8006438:	f016 f9c4 	bl	801c7c4 <sniprintf>
					 	if(cptdoubledonnee==3){
 800643c:	4b34      	ldr	r3, [pc, #208]	@ (8006510 <statemachine+0x1790>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b03      	cmp	r3, #3
 8006442:	d108      	bne.n	8006456 <statemachine+0x16d6>
					 	  		doubledonnee=1-doubledonnee;
 8006444:	4b2a      	ldr	r3, [pc, #168]	@ (80064f0 <statemachine+0x1770>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f1c3 0301 	rsb	r3, r3, #1
 800644c:	4a28      	ldr	r2, [pc, #160]	@ (80064f0 <statemachine+0x1770>)
 800644e:	6013      	str	r3, [r2, #0]
					 	  		cptdoubledonnee=0;
 8006450:	4b2f      	ldr	r3, [pc, #188]	@ (8006510 <statemachine+0x1790>)
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
					 	erasetime=HAL_GetTick()-erasetime;
 8006456:	f001 ff31 	bl	80082bc <HAL_GetTick>
 800645a:	4603      	mov	r3, r0
 800645c:	4a16      	ldr	r2, [pc, #88]	@ (80064b8 <statemachine+0x1738>)
 800645e:	6812      	ldr	r2, [r2, #0]
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	461a      	mov	r2, r3
 8006464:	4b14      	ldr	r3, [pc, #80]	@ (80064b8 <statemachine+0x1738>)
 8006466:	601a      	str	r2, [r3, #0]
					  if(BTN_B>=1){
 8006468:	4b2a      	ldr	r3, [pc, #168]	@ (8006514 <statemachine+0x1794>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	dd0e      	ble.n	800648e <statemachine+0x170e>
					  						  balisestate--;
 8006470:	4b14      	ldr	r3, [pc, #80]	@ (80064c4 <statemachine+0x1744>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	3b01      	subs	r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	4b12      	ldr	r3, [pc, #72]	@ (80064c4 <statemachine+0x1744>)
 800647a:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 800647c:	4b25      	ldr	r3, [pc, #148]	@ (8006514 <statemachine+0x1794>)
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 8006482:	4b25      	ldr	r3, [pc, #148]	@ (8006518 <statemachine+0x1798>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
					  						  HAL_TIM_Base_Stop_IT(&htim17);
 8006488:	480d      	ldr	r0, [pc, #52]	@ (80064c0 <statemachine+0x1740>)
 800648a:	f009 feaf 	bl	80101ec <HAL_TIM_Base_Stop_IT>
					  if(BTN_B_LONG>=1){
 800648e:	4b23      	ldr	r3, [pc, #140]	@ (800651c <statemachine+0x179c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f340 8099 	ble.w	80065ca <statemachine+0x184a>
						distanceparcouru=0;
 8006498:	4914      	ldr	r1, [pc, #80]	@ (80064ec <statemachine+0x176c>)
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	e9c1 2300 	strd	r2, r3, [r1]
					  	BTN_B_LONG=0;
 80064a6:	4b1d      	ldr	r3, [pc, #116]	@ (800651c <statemachine+0x179c>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
					  break;
 80064ac:	e08d      	b.n	80065ca <statemachine+0x184a>
 80064ae:	bf00      	nop
 80064b0:	00000000 	.word	0x00000000
 80064b4:	40616000 	.word	0x40616000
 80064b8:	20000c6c 	.word	0x20000c6c
 80064bc:	20000ab8 	.word	0x20000ab8
 80064c0:	20001364 	.word	0x20001364
 80064c4:	200005ee 	.word	0x200005ee
 80064c8:	20000ca0 	.word	0x20000ca0
 80064cc:	20000838 	.word	0x20000838
 80064d0:	20000c90 	.word	0x20000c90
 80064d4:	20000c98 	.word	0x20000c98
 80064d8:	20000638 	.word	0x20000638
 80064dc:	200008a8 	.word	0x200008a8
 80064e0:	200008b0 	.word	0x200008b0
 80064e4:	200008b4 	.word	0x200008b4
 80064e8:	20000c68 	.word	0x20000c68
 80064ec:	20000c88 	.word	0x20000c88
 80064f0:	20000c7c 	.word	0x20000c7c
 80064f4:	0802122c 	.word	0x0802122c
 80064f8:	20000ad8 	.word	0x20000ad8
 80064fc:	2000001c 	.word	0x2000001c
 8006500:	08021234 	.word	0x08021234
 8006504:	08021240 	.word	0x08021240
 8006508:	20000014 	.word	0x20000014
 800650c:	08021248 	.word	0x08021248
 8006510:	20000c80 	.word	0x20000c80
 8006514:	2000087c 	.word	0x2000087c
 8006518:	20000878 	.word	0x20000878
 800651c:	20000cbc 	.word	0x20000cbc
					  ssd1306_SetCursor(32,12);
 8006520:	210c      	movs	r1, #12
 8006522:	2020      	movs	r0, #32
 8006524:	f7fd ffc8 	bl	80044b8 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 8006528:	4aa2      	ldr	r2, [pc, #648]	@ (80067b4 <statemachine+0x1a34>)
 800652a:	2301      	movs	r3, #1
 800652c:	ca06      	ldmia	r2, {r1, r2}
 800652e:	48a2      	ldr	r0, [pc, #648]	@ (80067b8 <statemachine+0x1a38>)
 8006530:	f7fd ff9c 	bl	800446c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,20);
 8006534:	2114      	movs	r1, #20
 8006536:	2020      	movs	r0, #32
 8006538:	f7fd ffbe 	bl	80044b8 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 800653c:	4a9d      	ldr	r2, [pc, #628]	@ (80067b4 <statemachine+0x1a34>)
 800653e:	2301      	movs	r3, #1
 8006540:	ca06      	ldmia	r2, {r1, r2}
 8006542:	489e      	ldr	r0, [pc, #632]	@ (80067bc <statemachine+0x1a3c>)
 8006544:	f7fd ff92 	bl	800446c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,28);
 8006548:	211c      	movs	r1, #28
 800654a:	2020      	movs	r0, #32
 800654c:	f7fd ffb4 	bl	80044b8 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8006550:	4b9b      	ldr	r3, [pc, #620]	@ (80067c0 <statemachine+0x1a40>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4b9b      	ldr	r3, [pc, #620]	@ (80067c4 <statemachine+0x1a44>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	4613      	mov	r3, r2
 800655c:	4a9a      	ldr	r2, [pc, #616]	@ (80067c8 <statemachine+0x1a48>)
 800655e:	2132      	movs	r1, #50	@ 0x32
 8006560:	489a      	ldr	r0, [pc, #616]	@ (80067cc <statemachine+0x1a4c>)
 8006562:	f016 f92f 	bl	801c7c4 <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8006566:	4a93      	ldr	r2, [pc, #588]	@ (80067b4 <statemachine+0x1a34>)
 8006568:	2301      	movs	r3, #1
 800656a:	ca06      	ldmia	r2, {r1, r2}
 800656c:	4897      	ldr	r0, [pc, #604]	@ (80067cc <statemachine+0x1a4c>)
 800656e:	f7fd ff7d 	bl	800446c <ssd1306_WriteString>
					  if(BTN_A>=1){
 8006572:	4b97      	ldr	r3, [pc, #604]	@ (80067d0 <statemachine+0x1a50>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	dd0e      	ble.n	8006598 <statemachine+0x1818>
					  				  			 	state++;
 800657a:	4b96      	ldr	r3, [pc, #600]	@ (80067d4 <statemachine+0x1a54>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	4b94      	ldr	r3, [pc, #592]	@ (80067d4 <statemachine+0x1a54>)
 8006584:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8006586:	4b92      	ldr	r3, [pc, #584]	@ (80067d0 <statemachine+0x1a50>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 800658c:	4b92      	ldr	r3, [pc, #584]	@ (80067d8 <statemachine+0x1a58>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
					  				  			settimeen=0;
 8006592:	4b92      	ldr	r3, [pc, #584]	@ (80067dc <statemachine+0x1a5c>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8006598:	4b91      	ldr	r3, [pc, #580]	@ (80067e0 <statemachine+0x1a60>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f340 8618 	ble.w	80071d2 <statemachine+0x2452>
					  				 									 									  			 	state--;
 80065a2:	4b8c      	ldr	r3, [pc, #560]	@ (80067d4 <statemachine+0x1a54>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	4b8a      	ldr	r3, [pc, #552]	@ (80067d4 <statemachine+0x1a54>)
 80065ac:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 80065ae:	4b88      	ldr	r3, [pc, #544]	@ (80067d0 <statemachine+0x1a50>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 80065b4:	4b88      	ldr	r3, [pc, #544]	@ (80067d8 <statemachine+0x1a58>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 80065ba:	4b89      	ldr	r3, [pc, #548]	@ (80067e0 <statemachine+0x1a60>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
				  break;
 80065c0:	f000 be07 	b.w	80071d2 <statemachine+0x2452>
					  break;
 80065c4:	bf00      	nop
 80065c6:	f000 be04 	b.w	80071d2 <statemachine+0x2452>
					  break;
 80065ca:	bf00      	nop
				  break;
 80065cc:	f000 be01 	b.w	80071d2 <statemachine+0x2452>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 80065d0:	2000      	movs	r0, #0
 80065d2:	f7fd fe2f 	bl	8004234 <ssd1306_Fill>
				  ssd1306_SetCursor(32,12);
 80065d6:	210c      	movs	r1, #12
 80065d8:	2020      	movs	r0, #32
 80065da:	f7fd ff6d 	bl	80044b8 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 80065de:	4a75      	ldr	r2, [pc, #468]	@ (80067b4 <statemachine+0x1a34>)
 80065e0:	2301      	movs	r3, #1
 80065e2:	ca06      	ldmia	r2, {r1, r2}
 80065e4:	487f      	ldr	r0, [pc, #508]	@ (80067e4 <statemachine+0x1a64>)
 80065e6:	f7fd ff41 	bl	800446c <ssd1306_WriteString>
				  switch(usbstate){
 80065ea:	4b7f      	ldr	r3, [pc, #508]	@ (80067e8 <statemachine+0x1a68>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	f000 8162 	beq.w	80068b8 <statemachine+0x1b38>
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	f300 85ee 	bgt.w	80071d6 <statemachine+0x2456>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <statemachine+0x1886>
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d043      	beq.n	800668a <statemachine+0x190a>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8006602:	f000 bde8 	b.w	80071d6 <statemachine+0x2456>
				 					  ssd1306_SetCursor(32,20);
 8006606:	2114      	movs	r1, #20
 8006608:	2020      	movs	r0, #32
 800660a:	f7fd ff55 	bl	80044b8 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 800660e:	4a69      	ldr	r2, [pc, #420]	@ (80067b4 <statemachine+0x1a34>)
 8006610:	2301      	movs	r3, #1
 8006612:	ca06      	ldmia	r2, {r1, r2}
 8006614:	4875      	ldr	r0, [pc, #468]	@ (80067ec <statemachine+0x1a6c>)
 8006616:	f7fd ff29 	bl	800446c <ssd1306_WriteString>
				 					  usbtransmiten=0;
 800661a:	4b75      	ldr	r3, [pc, #468]	@ (80067f0 <statemachine+0x1a70>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8006620:	4b6d      	ldr	r3, [pc, #436]	@ (80067d8 <statemachine+0x1a58>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	dd0b      	ble.n	8006640 <statemachine+0x18c0>
				 						  usbstate++;
 8006628:	4b6f      	ldr	r3, [pc, #444]	@ (80067e8 <statemachine+0x1a68>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	b2da      	uxtb	r2, r3
 8006630:	4b6d      	ldr	r3, [pc, #436]	@ (80067e8 <statemachine+0x1a68>)
 8006632:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8006634:	4b68      	ldr	r3, [pc, #416]	@ (80067d8 <statemachine+0x1a58>)
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 800663a:	4b65      	ldr	r3, [pc, #404]	@ (80067d0 <statemachine+0x1a50>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8006640:	4b63      	ldr	r3, [pc, #396]	@ (80067d0 <statemachine+0x1a50>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dd0b      	ble.n	8006660 <statemachine+0x18e0>
				 						 state++;
 8006648:	4b62      	ldr	r3, [pc, #392]	@ (80067d4 <statemachine+0x1a54>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	4b60      	ldr	r3, [pc, #384]	@ (80067d4 <statemachine+0x1a54>)
 8006652:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8006654:	4b5e      	ldr	r3, [pc, #376]	@ (80067d0 <statemachine+0x1a50>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 800665a:	4b5f      	ldr	r3, [pc, #380]	@ (80067d8 <statemachine+0x1a58>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8006660:	4b5f      	ldr	r3, [pc, #380]	@ (80067e0 <statemachine+0x1a60>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f340 8207 	ble.w	8006a78 <statemachine+0x1cf8>
				 									 									 									  			 	state--;
 800666a:	4b5a      	ldr	r3, [pc, #360]	@ (80067d4 <statemachine+0x1a54>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	3b01      	subs	r3, #1
 8006670:	b2da      	uxtb	r2, r3
 8006672:	4b58      	ldr	r3, [pc, #352]	@ (80067d4 <statemachine+0x1a54>)
 8006674:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8006676:	4b56      	ldr	r3, [pc, #344]	@ (80067d0 <statemachine+0x1a50>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 800667c:	4b56      	ldr	r3, [pc, #344]	@ (80067d8 <statemachine+0x1a58>)
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8006682:	4b57      	ldr	r3, [pc, #348]	@ (80067e0 <statemachine+0x1a60>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
				 					  break;
 8006688:	e1f6      	b.n	8006a78 <statemachine+0x1cf8>
				 					 ssd1306_SetCursor(32,20);
 800668a:	2114      	movs	r1, #20
 800668c:	2020      	movs	r0, #32
 800668e:	f7fd ff13 	bl	80044b8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8006692:	4a48      	ldr	r2, [pc, #288]	@ (80067b4 <statemachine+0x1a34>)
 8006694:	2301      	movs	r3, #1
 8006696:	ca06      	ldmia	r2, {r1, r2}
 8006698:	4856      	ldr	r0, [pc, #344]	@ (80067f4 <statemachine+0x1a74>)
 800669a:	f7fd fee7 	bl	800446c <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,28);
 800669e:	211c      	movs	r1, #28
 80066a0:	2020      	movs	r0, #32
 80066a2:	f7fd ff09 	bl	80044b8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 80066a6:	4a43      	ldr	r2, [pc, #268]	@ (80067b4 <statemachine+0x1a34>)
 80066a8:	2301      	movs	r3, #1
 80066aa:	ca06      	ldmia	r2, {r1, r2}
 80066ac:	4852      	ldr	r0, [pc, #328]	@ (80067f8 <statemachine+0x1a78>)
 80066ae:	f7fd fedd 	bl	800446c <ssd1306_WriteString>
				 					if(erasedisplay==1){
 80066b2:	4b52      	ldr	r3, [pc, #328]	@ (80067fc <statemachine+0x1a7c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d137      	bne.n	800672a <statemachine+0x19aa>
					 					 ssd1306_Fill(Black);
 80066ba:	2000      	movs	r0, #0
 80066bc:	f7fd fdba 	bl	8004234 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,12);
 80066c0:	210c      	movs	r1, #12
 80066c2:	2020      	movs	r0, #32
 80066c4:	f7fd fef8 	bl	80044b8 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 80066c8:	4a3a      	ldr	r2, [pc, #232]	@ (80067b4 <statemachine+0x1a34>)
 80066ca:	2301      	movs	r3, #1
 80066cc:	ca06      	ldmia	r2, {r1, r2}
 80066ce:	4845      	ldr	r0, [pc, #276]	@ (80067e4 <statemachine+0x1a64>)
 80066d0:	f7fd fecc 	bl	800446c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,20);
 80066d4:	2114      	movs	r1, #20
 80066d6:	2020      	movs	r0, #32
 80066d8:	f7fd feee 	bl	80044b8 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 80066dc:	4a48      	ldr	r2, [pc, #288]	@ (8006800 <statemachine+0x1a80>)
 80066de:	2301      	movs	r3, #1
 80066e0:	ca06      	ldmia	r2, {r1, r2}
 80066e2:	4848      	ldr	r0, [pc, #288]	@ (8006804 <statemachine+0x1a84>)
 80066e4:	f7fd fec2 	bl	800446c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,30);
 80066e8:	211e      	movs	r1, #30
 80066ea:	2020      	movs	r0, #32
 80066ec:	f7fd fee4 	bl	80044b8 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 80066f0:	4b45      	ldr	r3, [pc, #276]	@ (8006808 <statemachine+0x1a88>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066fc:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800680c <statemachine+0x1a8c>
 8006700:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006704:	ee16 0a90 	vmov	r0, s13
 8006708:	f7f9 fef6 	bl	80004f8 <__aeabi_f2d>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	e9cd 2300 	strd	r2, r3, [sp]
 8006714:	4a3e      	ldr	r2, [pc, #248]	@ (8006810 <statemachine+0x1a90>)
 8006716:	2132      	movs	r1, #50	@ 0x32
 8006718:	482c      	ldr	r0, [pc, #176]	@ (80067cc <statemachine+0x1a4c>)
 800671a:	f016 f853 	bl	801c7c4 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800671e:	4a25      	ldr	r2, [pc, #148]	@ (80067b4 <statemachine+0x1a34>)
 8006720:	2301      	movs	r3, #1
 8006722:	ca06      	ldmia	r2, {r1, r2}
 8006724:	4829      	ldr	r0, [pc, #164]	@ (80067cc <statemachine+0x1a4c>)
 8006726:	f7fd fea1 	bl	800446c <ssd1306_WriteString>
				 					if(BTN_A>=1){
 800672a:	4b29      	ldr	r3, [pc, #164]	@ (80067d0 <statemachine+0x1a50>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f340 80b0 	ble.w	8006894 <statemachine+0x1b14>
				 						erasetime=HAL_GetTick();
 8006734:	f001 fdc2 	bl	80082bc <HAL_GetTick>
 8006738:	4603      	mov	r3, r0
 800673a:	461a      	mov	r2, r3
 800673c:	4b32      	ldr	r3, [pc, #200]	@ (8006808 <statemachine+0x1a88>)
 800673e:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8006740:	2300      	movs	r3, #0
 8006742:	60bb      	str	r3, [r7, #8]
 8006744:	e073      	b.n	800682e <statemachine+0x1aae>
				 							ssd1306_Fill(Black);
 8006746:	2000      	movs	r0, #0
 8006748:	f7fd fd74 	bl	8004234 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 800674c:	2120      	movs	r1, #32
 800674e:	2020      	movs	r0, #32
 8006750:	f7fd feb2 	bl	80044b8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8006754:	4a17      	ldr	r2, [pc, #92]	@ (80067b4 <statemachine+0x1a34>)
 8006756:	2301      	movs	r3, #1
 8006758:	ca06      	ldmia	r2, {r1, r2}
 800675a:	4822      	ldr	r0, [pc, #136]	@ (80067e4 <statemachine+0x1a64>)
 800675c:	f7fd fe86 	bl	800446c <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4619      	mov	r1, r3
 8006764:	482b      	ldr	r0, [pc, #172]	@ (8006814 <statemachine+0x1a94>)
 8006766:	f012 fa5c 	bl	8018c22 <SPIF_EraseSector>
				 							if(i>=1){
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	dd55      	ble.n	800681c <statemachine+0x1a9c>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2264      	movs	r2, #100	@ 0x64
 8006774:	fb02 f303 	mul.w	r3, r2, r3
 8006778:	ee07 3a90 	vmov	s15, r3
 800677c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006780:	4b10      	ldr	r3, [pc, #64]	@ (80067c4 <statemachine+0x1a44>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	da00      	bge.n	800678a <statemachine+0x1a0a>
 8006788:	330f      	adds	r3, #15
 800678a:	111b      	asrs	r3, r3, #4
 800678c:	4618      	mov	r0, r3
 800678e:	f7f9 fea1 	bl	80004d4 <__aeabi_i2d>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4610      	mov	r0, r2
 8006798:	4619      	mov	r1, r3
 800679a:	f7fa f9b5 	bl	8000b08 <__aeabi_d2iz>
 800679e:	ee07 0a90 	vmov	s15, r0
 80067a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067a6:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80067aa:	eeb0 0a47 	vmov.f32	s0, s14
 80067ae:	f7fe fa1b 	bl	8004be8 <percentage>
 80067b2:	e037      	b.n	8006824 <statemachine+0x1aa4>
 80067b4:	20000014 	.word	0x20000014
 80067b8:	08021250 	.word	0x08021250
 80067bc:	08021258 	.word	0x08021258
 80067c0:	20000ab4 	.word	0x20000ab4
 80067c4:	20000ab8 	.word	0x20000ab8
 80067c8:	08021260 	.word	0x08021260
 80067cc:	20000ad8 	.word	0x20000ad8
 80067d0:	20000878 	.word	0x20000878
 80067d4:	200005e8 	.word	0x200005e8
 80067d8:	2000087c 	.word	0x2000087c
 80067dc:	20000ca8 	.word	0x20000ca8
 80067e0:	20000cc0 	.word	0x20000cc0
 80067e4:	08021268 	.word	0x08021268
 80067e8:	200005ed 	.word	0x200005ed
 80067ec:	0802126c 	.word	0x0802126c
 80067f0:	20000c74 	.word	0x20000c74
 80067f4:	08021278 	.word	0x08021278
 80067f8:	08021280 	.word	0x08021280
 80067fc:	20000c70 	.word	0x20000c70
 8006800:	2000001c 	.word	0x2000001c
 8006804:	0802128c 	.word	0x0802128c
 8006808:	20000c6c 	.word	0x20000c6c
 800680c:	447a0000 	.word	0x447a0000
 8006810:	08021290 	.word	0x08021290
 8006814:	20000880 	.word	0x20000880
 8006818:	00000000 	.word	0x00000000
				 								percentage((float) 0);
 800681c:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 8006818 <statemachine+0x1a98>
 8006820:	f7fe f9e2 	bl	8004be8 <percentage>
				 							ssd1306_UpdateScreen();
 8006824:	f7fd fd1e 	bl	8004264 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3301      	adds	r3, #1
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	4b95      	ldr	r3, [pc, #596]	@ (8006a84 <statemachine+0x1d04>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	da00      	bge.n	8006838 <statemachine+0x1ab8>
 8006836:	330f      	adds	r3, #15
 8006838:	111b      	asrs	r3, r3, #4
 800683a:	4618      	mov	r0, r3
 800683c:	f7f9 fe4a 	bl	80004d4 <__aeabi_i2d>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	f7fa f95e 	bl	8000b08 <__aeabi_d2iz>
 800684c:	4602      	mov	r2, r0
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4293      	cmp	r3, r2
 8006852:	f77f af78 	ble.w	8006746 <statemachine+0x19c6>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8006856:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800685a:	488b      	ldr	r0, [pc, #556]	@ (8006a88 <statemachine+0x1d08>)
 800685c:	f012 f9e1 	bl	8018c22 <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8006860:	f001 fd2c 	bl	80082bc <HAL_GetTick>
 8006864:	4603      	mov	r3, r0
 8006866:	4a89      	ldr	r2, [pc, #548]	@ (8006a8c <statemachine+0x1d0c>)
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	1a9b      	subs	r3, r3, r2
 800686c:	461a      	mov	r2, r3
 800686e:	4b87      	ldr	r3, [pc, #540]	@ (8006a8c <statemachine+0x1d0c>)
 8006870:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8006872:	4b87      	ldr	r3, [pc, #540]	@ (8006a90 <statemachine+0x1d10>)
 8006874:	2201      	movs	r2, #1
 8006876:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8006878:	4b86      	ldr	r3, [pc, #536]	@ (8006a94 <statemachine+0x1d14>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 800687e:	4b81      	ldr	r3, [pc, #516]	@ (8006a84 <statemachine+0x1d04>)
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8006884:	f7fd fafa 	bl	8003e7c <storeindex>
				 						BTN_A=0;
 8006888:	4b83      	ldr	r3, [pc, #524]	@ (8006a98 <statemachine+0x1d18>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 800688e:	4b83      	ldr	r3, [pc, #524]	@ (8006a9c <statemachine+0x1d1c>)
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8006894:	4b81      	ldr	r3, [pc, #516]	@ (8006a9c <statemachine+0x1d1c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f340 80ef 	ble.w	8006a7c <statemachine+0x1cfc>
					 						usbstate++;
 800689e:	4b80      	ldr	r3, [pc, #512]	@ (8006aa0 <statemachine+0x1d20>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	3301      	adds	r3, #1
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	4b7e      	ldr	r3, [pc, #504]	@ (8006aa0 <statemachine+0x1d20>)
 80068a8:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 80068aa:	4b7c      	ldr	r3, [pc, #496]	@ (8006a9c <statemachine+0x1d1c>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 80068b0:	4b79      	ldr	r3, [pc, #484]	@ (8006a98 <statemachine+0x1d18>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
				 			  break;
 80068b6:	e0e1      	b.n	8006a7c <statemachine+0x1cfc>
				 					ssd1306_Fill(Black);
 80068b8:	2000      	movs	r0, #0
 80068ba:	f7fd fcbb 	bl	8004234 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,20);
 80068be:	2114      	movs	r1, #20
 80068c0:	2020      	movs	r0, #32
 80068c2:	f7fd fdf9 	bl	80044b8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 80068c6:	4a77      	ldr	r2, [pc, #476]	@ (8006aa4 <statemachine+0x1d24>)
 80068c8:	2301      	movs	r3, #1
 80068ca:	ca06      	ldmia	r2, {r1, r2}
 80068cc:	4876      	ldr	r0, [pc, #472]	@ (8006aa8 <statemachine+0x1d28>)
 80068ce:	f7fd fdcd 	bl	800446c <ssd1306_WriteString>
				 					if(pagenumber>0){
 80068d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006a84 <statemachine+0x1d04>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dd7d      	ble.n	80069d6 <statemachine+0x1c56>
				 					int i=0;
 80068da:	2300      	movs	r3, #0
 80068dc:	607b      	str	r3, [r7, #4]
				 					if(usbtransmiten==0){
 80068de:	4b73      	ldr	r3, [pc, #460]	@ (8006aac <statemachine+0x1d2c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d165      	bne.n	80069b2 <statemachine+0x1c32>
				 						while(i<pagenumber){
 80068e6:	e036      	b.n	8006956 <statemachine+0x1bd6>
				 							ssd1306_Fill(Black);
 80068e8:	2000      	movs	r0, #0
 80068ea:	f7fd fca3 	bl	8004234 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,12);
 80068ee:	210c      	movs	r1, #12
 80068f0:	2020      	movs	r0, #32
 80068f2:	f7fd fde1 	bl	80044b8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 80068f6:	4a6b      	ldr	r2, [pc, #428]	@ (8006aa4 <statemachine+0x1d24>)
 80068f8:	2301      	movs	r3, #1
 80068fa:	ca06      	ldmia	r2, {r1, r2}
 80068fc:	486a      	ldr	r0, [pc, #424]	@ (8006aa8 <statemachine+0x1d28>)
 80068fe:	f7fd fdb5 	bl	800446c <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	2300      	movs	r3, #0
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800690c:	4a68      	ldr	r2, [pc, #416]	@ (8006ab0 <statemachine+0x1d30>)
 800690e:	485e      	ldr	r0, [pc, #376]	@ (8006a88 <statemachine+0x1d08>)
 8006910:	f012 fa28 	bl	8018d64 <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8006914:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006918:	4865      	ldr	r0, [pc, #404]	@ (8006ab0 <statemachine+0x1d30>)
 800691a:	f013 f999 	bl	8019c50 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2264      	movs	r2, #100	@ 0x64
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800692e:	4b55      	ldr	r3, [pc, #340]	@ (8006a84 <statemachine+0x1d04>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800693a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800693e:	eeb0 0a66 	vmov.f32	s0, s13
 8006942:	f7fe f951 	bl	8004be8 <percentage>
				 							ssd1306_UpdateScreen();
 8006946:	f7fd fc8d 	bl	8004264 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 800694a:	207d      	movs	r0, #125	@ 0x7d
 800694c:	f7fb f8c7 	bl	8001ade <HAL_Delay>
				 							i++;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3301      	adds	r3, #1
 8006954:	607b      	str	r3, [r7, #4]
				 						while(i<pagenumber){
 8006956:	4b4b      	ldr	r3, [pc, #300]	@ (8006a84 <statemachine+0x1d04>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	429a      	cmp	r2, r3
 800695e:	dbc3      	blt.n	80068e8 <statemachine+0x1b68>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8006960:	4b48      	ldr	r3, [pc, #288]	@ (8006a84 <statemachine+0x1d04>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4619      	mov	r1, r3
 8006966:	4b4b      	ldr	r3, [pc, #300]	@ (8006a94 <statemachine+0x1d14>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	2300      	movs	r3, #0
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	4a4f      	ldr	r2, [pc, #316]	@ (8006ab0 <statemachine+0x1d30>)
 8006974:	4844      	ldr	r0, [pc, #272]	@ (8006a88 <statemachine+0x1d08>)
 8006976:	f012 f9f5 	bl	8018d64 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 800697a:	4b46      	ldr	r3, [pc, #280]	@ (8006a94 <statemachine+0x1d14>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	4619      	mov	r1, r3
 8006982:	484b      	ldr	r0, [pc, #300]	@ (8006ab0 <statemachine+0x1d30>)
 8006984:	f013 f964 	bl	8019c50 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8006988:	207d      	movs	r0, #125	@ 0x7d
 800698a:	f7fb f8a8 	bl	8001ade <HAL_Delay>
				 						int taillefin=0;
 800698e:	2300      	movs	r3, #0
 8006990:	603b      	str	r3, [r7, #0]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8006992:	4a48      	ldr	r2, [pc, #288]	@ (8006ab4 <statemachine+0x1d34>)
 8006994:	2140      	movs	r1, #64	@ 0x40
 8006996:	4848      	ldr	r0, [pc, #288]	@ (8006ab8 <statemachine+0x1d38>)
 8006998:	f015 ff14 	bl	801c7c4 <sniprintf>
 800699c:	6038      	str	r0, [r7, #0]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	4619      	mov	r1, r3
 80069a4:	4844      	ldr	r0, [pc, #272]	@ (8006ab8 <statemachine+0x1d38>)
 80069a6:	f013 f953 	bl	8019c50 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 80069aa:	4b40      	ldr	r3, [pc, #256]	@ (8006aac <statemachine+0x1d2c>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e003      	b.n	80069ba <statemachine+0x1c3a>
				 						usbpercent=1;
 80069b2:	4b42      	ldr	r3, [pc, #264]	@ (8006abc <statemachine+0x1d3c>)
 80069b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80069b8:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 80069ba:	2000      	movs	r0, #0
 80069bc:	f7fd fc3a 	bl	8004234 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,35);
 80069c0:	2123      	movs	r1, #35	@ 0x23
 80069c2:	2020      	movs	r0, #32
 80069c4:	f7fd fd78 	bl	80044b8 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 80069c8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ac0 <statemachine+0x1d40>)
 80069ca:	2301      	movs	r3, #1
 80069cc:	ca06      	ldmia	r2, {r1, r2}
 80069ce:	483d      	ldr	r0, [pc, #244]	@ (8006ac4 <statemachine+0x1d44>)
 80069d0:	f7fd fd4c 	bl	800446c <ssd1306_WriteString>
 80069d4:	e016      	b.n	8006a04 <statemachine+0x1c84>
				 							ssd1306_Fill(Black);
 80069d6:	2000      	movs	r0, #0
 80069d8:	f7fd fc2c 	bl	8004234 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,20);
 80069dc:	2114      	movs	r1, #20
 80069de:	2020      	movs	r0, #32
 80069e0:	f7fd fd6a 	bl	80044b8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 80069e4:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa4 <statemachine+0x1d24>)
 80069e6:	2301      	movs	r3, #1
 80069e8:	ca06      	ldmia	r2, {r1, r2}
 80069ea:	482f      	ldr	r0, [pc, #188]	@ (8006aa8 <statemachine+0x1d28>)
 80069ec:	f7fd fd3e 	bl	800446c <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,28);
 80069f0:	211c      	movs	r1, #28
 80069f2:	2020      	movs	r0, #32
 80069f4:	f7fd fd60 	bl	80044b8 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 80069f8:	4a2a      	ldr	r2, [pc, #168]	@ (8006aa4 <statemachine+0x1d24>)
 80069fa:	2301      	movs	r3, #1
 80069fc:	ca06      	ldmia	r2, {r1, r2}
 80069fe:	4832      	ldr	r0, [pc, #200]	@ (8006ac8 <statemachine+0x1d48>)
 8006a00:	f7fd fd34 	bl	800446c <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8006a04:	4b25      	ldr	r3, [pc, #148]	@ (8006a9c <statemachine+0x1d1c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dd11      	ble.n	8006a30 <statemachine+0x1cb0>
				 									 						usbstate--;
 8006a0c:	4b24      	ldr	r3, [pc, #144]	@ (8006aa0 <statemachine+0x1d20>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	4b22      	ldr	r3, [pc, #136]	@ (8006aa0 <statemachine+0x1d20>)
 8006a16:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8006a18:	4b21      	ldr	r3, [pc, #132]	@ (8006aa0 <statemachine+0x1d20>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa0 <statemachine+0x1d20>)
 8006a22:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8006a24:	4b1d      	ldr	r3, [pc, #116]	@ (8006a9c <statemachine+0x1d1c>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <statemachine+0x1d18>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8006a30:	4b19      	ldr	r3, [pc, #100]	@ (8006a98 <statemachine+0x1d18>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd0b      	ble.n	8006a50 <statemachine+0x1cd0>
				 									  			 	state++;
 8006a38:	4b24      	ldr	r3, [pc, #144]	@ (8006acc <statemachine+0x1d4c>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	4b22      	ldr	r3, [pc, #136]	@ (8006acc <statemachine+0x1d4c>)
 8006a42:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8006a44:	4b14      	ldr	r3, [pc, #80]	@ (8006a98 <statemachine+0x1d18>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8006a4a:	4b14      	ldr	r3, [pc, #80]	@ (8006a9c <statemachine+0x1d1c>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8006a50:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad0 <statemachine+0x1d50>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dd13      	ble.n	8006a80 <statemachine+0x1d00>
				 									 									  			 	state--;
 8006a58:	4b1c      	ldr	r3, [pc, #112]	@ (8006acc <statemachine+0x1d4c>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	4b1a      	ldr	r3, [pc, #104]	@ (8006acc <statemachine+0x1d4c>)
 8006a62:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8006a64:	4b0c      	ldr	r3, [pc, #48]	@ (8006a98 <statemachine+0x1d18>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a9c <statemachine+0x1d1c>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 8006a70:	4b17      	ldr	r3, [pc, #92]	@ (8006ad0 <statemachine+0x1d50>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
				 					 break;
 8006a76:	e003      	b.n	8006a80 <statemachine+0x1d00>
				 					  break;
 8006a78:	bf00      	nop
 8006a7a:	e3ac      	b.n	80071d6 <statemachine+0x2456>
				 			  break;
 8006a7c:	bf00      	nop
 8006a7e:	e3aa      	b.n	80071d6 <statemachine+0x2456>
				 					 break;
 8006a80:	bf00      	nop
				  break;
 8006a82:	e3a8      	b.n	80071d6 <statemachine+0x2456>
 8006a84:	20000ab8 	.word	0x20000ab8
 8006a88:	20000880 	.word	0x20000880
 8006a8c:	20000c6c 	.word	0x20000c6c
 8006a90:	20000c70 	.word	0x20000c70
 8006a94:	20000ab4 	.word	0x20000ab4
 8006a98:	20000878 	.word	0x20000878
 8006a9c:	2000087c 	.word	0x2000087c
 8006aa0:	200005ed 	.word	0x200005ed
 8006aa4:	20000014 	.word	0x20000014
 8006aa8:	08021298 	.word	0x08021298
 8006aac:	20000c74 	.word	0x20000c74
 8006ab0:	200009b4 	.word	0x200009b4
 8006ab4:	080212a0 	.word	0x080212a0
 8006ab8:	20000c0c 	.word	0x20000c0c
 8006abc:	20000c78 	.word	0x20000c78
 8006ac0:	2000001c 	.word	0x2000001c
 8006ac4:	080212b0 	.word	0x080212b0
 8006ac8:	080212b8 	.word	0x080212b8
 8006acc:	200005e8 	.word	0x200005e8
 8006ad0:	20000cc0 	.word	0x20000cc0



				  case STATE_MONITOR:
					  ssd1306_Fill(Black);
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	f7fd fbad 	bl	8004234 <ssd1306_Fill>
					  ssd1306_SetCursor(32,12);
 8006ada:	210c      	movs	r1, #12
 8006adc:	2020      	movs	r0, #32
 8006ade:	f7fd fceb 	bl	80044b8 <ssd1306_SetCursor>
					  ssd1306_WriteString("gputemp",Font_6x8,White);
 8006ae2:	4a92      	ldr	r2, [pc, #584]	@ (8006d2c <statemachine+0x1fac>)
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	ca06      	ldmia	r2, {r1, r2}
 8006ae8:	4891      	ldr	r0, [pc, #580]	@ (8006d30 <statemachine+0x1fb0>)
 8006aea:	f7fd fcbf 	bl	800446c <ssd1306_WriteString>

					  usbbuffer[60]='$';
 8006aee:	4b91      	ldr	r3, [pc, #580]	@ (8006d34 <statemachine+0x1fb4>)
 8006af0:	2224      	movs	r2, #36	@ 0x24
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					  getgpu((uint8_t  *)usbbuffer);
 8006af6:	488f      	ldr	r0, [pc, #572]	@ (8006d34 <statemachine+0x1fb4>)
 8006af8:	f001 fade 	bl	80080b8 <getgpu>
					  ssd1306_SetCursor(32,20);
 8006afc:	2114      	movs	r1, #20
 8006afe:	2020      	movs	r0, #32
 8006b00:	f7fd fcda 	bl	80044b8 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"T=%d*C",gputemp);
 8006b04:	4b8c      	ldr	r3, [pc, #560]	@ (8006d38 <statemachine+0x1fb8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a8c      	ldr	r2, [pc, #560]	@ (8006d3c <statemachine+0x1fbc>)
 8006b0a:	2132      	movs	r1, #50	@ 0x32
 8006b0c:	488c      	ldr	r0, [pc, #560]	@ (8006d40 <statemachine+0x1fc0>)
 8006b0e:	f015 fe59 	bl	801c7c4 <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 8006b12:	4a8c      	ldr	r2, [pc, #560]	@ (8006d44 <statemachine+0x1fc4>)
 8006b14:	2301      	movs	r3, #1
 8006b16:	ca06      	ldmia	r2, {r1, r2}
 8006b18:	4889      	ldr	r0, [pc, #548]	@ (8006d40 <statemachine+0x1fc0>)
 8006b1a:	f7fd fca7 	bl	800446c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,30);
 8006b1e:	211e      	movs	r1, #30
 8006b20:	2020      	movs	r0, #32
 8006b22:	f7fd fcc9 	bl	80044b8 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"p=%dW",(int) gpupower);
 8006b26:	4b88      	ldr	r3, [pc, #544]	@ (8006d48 <statemachine+0x1fc8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a88      	ldr	r2, [pc, #544]	@ (8006d4c <statemachine+0x1fcc>)
 8006b2c:	2132      	movs	r1, #50	@ 0x32
 8006b2e:	4884      	ldr	r0, [pc, #528]	@ (8006d40 <statemachine+0x1fc0>)
 8006b30:	f015 fe48 	bl	801c7c4 <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 8006b34:	4a83      	ldr	r2, [pc, #524]	@ (8006d44 <statemachine+0x1fc4>)
 8006b36:	2301      	movs	r3, #1
 8006b38:	ca06      	ldmia	r2, {r1, r2}
 8006b3a:	4881      	ldr	r0, [pc, #516]	@ (8006d40 <statemachine+0x1fc0>)
 8006b3c:	f7fd fc96 	bl	800446c <ssd1306_WriteString>


					  if(BTN_A>=1){
 8006b40:	4b83      	ldr	r3, [pc, #524]	@ (8006d50 <statemachine+0x1fd0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	dd0b      	ble.n	8006b60 <statemachine+0x1de0>
					 				 									  			 	state++;
 8006b48:	4b82      	ldr	r3, [pc, #520]	@ (8006d54 <statemachine+0x1fd4>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	4b80      	ldr	r3, [pc, #512]	@ (8006d54 <statemachine+0x1fd4>)
 8006b52:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 8006b54:	4b7e      	ldr	r3, [pc, #504]	@ (8006d50 <statemachine+0x1fd0>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 8006b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d58 <statemachine+0x1fd8>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
					 				 									  	}
					 				 					if(BTN_A_LONG>=1){
 8006b60:	4b7e      	ldr	r3, [pc, #504]	@ (8006d5c <statemachine+0x1fdc>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f340 8338 	ble.w	80071da <statemachine+0x245a>
					 				 									 									  			 	state--;
 8006b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8006d54 <statemachine+0x1fd4>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	4b78      	ldr	r3, [pc, #480]	@ (8006d54 <statemachine+0x1fd4>)
 8006b74:	701a      	strb	r2, [r3, #0]
					 				 									 									  			 	BTN_A=0;
 8006b76:	4b76      	ldr	r3, [pc, #472]	@ (8006d50 <statemachine+0x1fd0>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
					 				 									 									  			 	BTN_B=0;
 8006b7c:	4b76      	ldr	r3, [pc, #472]	@ (8006d58 <statemachine+0x1fd8>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
					 				 									 									  			 	BTN_A_LONG=0;
 8006b82:	4b76      	ldr	r3, [pc, #472]	@ (8006d5c <statemachine+0x1fdc>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
					 				 									 									  	}


					  break;
 8006b88:	e327      	b.n	80071da <statemachine+0x245a>


				  case STATE_TARVOS:
					  ssd1306_Fill(Black);
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	f7fd fb52 	bl	8004234 <ssd1306_Fill>
					  				  ssd1306_SetCursor(32,12);
 8006b90:	210c      	movs	r1, #12
 8006b92:	2020      	movs	r0, #32
 8006b94:	f7fd fc90 	bl	80044b8 <ssd1306_SetCursor>
					  				  ssd1306_WriteString("tarvos",Font_6x8,White);
 8006b98:	4a64      	ldr	r2, [pc, #400]	@ (8006d2c <statemachine+0x1fac>)
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	ca06      	ldmia	r2, {r1, r2}
 8006b9e:	4870      	ldr	r0, [pc, #448]	@ (8006d60 <statemachine+0x1fe0>)
 8006ba0:	f7fd fc64 	bl	800446c <ssd1306_WriteString>
					  				  switch(tarvosstate){
 8006ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8006d64 <statemachine+0x1fe4>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	f000 80f1 	beq.w	8006d90 <statemachine+0x2010>
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	f300 8315 	bgt.w	80071de <statemachine+0x245e>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <statemachine+0x1e3e>
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d07d      	beq.n	8006cb8 <statemachine+0x1f38>





					  break;
 8006bbc:	e30f      	b.n	80071de <statemachine+0x245e>
					  				 					  ssd1306_SetCursor(32,20);
 8006bbe:	2114      	movs	r1, #20
 8006bc0:	2020      	movs	r0, #32
 8006bc2:	f7fd fc79 	bl	80044b8 <ssd1306_SetCursor>
					  				 					  ssd1306_WriteString("push B",Font_6x8,White);
 8006bc6:	4a59      	ldr	r2, [pc, #356]	@ (8006d2c <statemachine+0x1fac>)
 8006bc8:	2301      	movs	r3, #1
 8006bca:	ca06      	ldmia	r2, {r1, r2}
 8006bcc:	4866      	ldr	r0, [pc, #408]	@ (8006d68 <statemachine+0x1fe8>)
 8006bce:	f7fd fc4d 	bl	800446c <ssd1306_WriteString>
					  									  if(BTN_A>=1){
 8006bd2:	4b5f      	ldr	r3, [pc, #380]	@ (8006d50 <statemachine+0x1fd0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	dd0b      	ble.n	8006bf2 <statemachine+0x1e72>
					  											state++;
 8006bda:	4b5e      	ldr	r3, [pc, #376]	@ (8006d54 <statemachine+0x1fd4>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	3301      	adds	r3, #1
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	4b5c      	ldr	r3, [pc, #368]	@ (8006d54 <statemachine+0x1fd4>)
 8006be4:	701a      	strb	r2, [r3, #0]
					  											BTN_A=0;
 8006be6:	4b5a      	ldr	r3, [pc, #360]	@ (8006d50 <statemachine+0x1fd0>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
					  											BTN_B=0;
 8006bec:	4b5a      	ldr	r3, [pc, #360]	@ (8006d58 <statemachine+0x1fd8>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
					  									if(BTN_A_LONG>=1){
 8006bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8006d5c <statemachine+0x1fdc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	dd0e      	ble.n	8006c18 <statemachine+0x1e98>
					  											state--;
 8006bfa:	4b56      	ldr	r3, [pc, #344]	@ (8006d54 <statemachine+0x1fd4>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	4b54      	ldr	r3, [pc, #336]	@ (8006d54 <statemachine+0x1fd4>)
 8006c04:	701a      	strb	r2, [r3, #0]
					  											BTN_A=0;
 8006c06:	4b52      	ldr	r3, [pc, #328]	@ (8006d50 <statemachine+0x1fd0>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]
					  											BTN_B=0;
 8006c0c:	4b52      	ldr	r3, [pc, #328]	@ (8006d58 <statemachine+0x1fd8>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
					  											BTN_A_LONG=0;
 8006c12:	4b52      	ldr	r3, [pc, #328]	@ (8006d5c <statemachine+0x1fdc>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]
					  				 					  if(BTN_B_LONG>=1){
 8006c18:	4b54      	ldr	r3, [pc, #336]	@ (8006d6c <statemachine+0x1fec>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f340 8111 	ble.w	8006e44 <statemachine+0x20c4>
					  				 						 huart1.Instance = USART1;
 8006c22:	4b53      	ldr	r3, [pc, #332]	@ (8006d70 <statemachine+0x1ff0>)
 8006c24:	4a53      	ldr	r2, [pc, #332]	@ (8006d74 <statemachine+0x1ff4>)
 8006c26:	601a      	str	r2, [r3, #0]
					  				 						 huart1.Init.BaudRate = 115200;
 8006c28:	4b51      	ldr	r3, [pc, #324]	@ (8006d70 <statemachine+0x1ff0>)
 8006c2a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006c2e:	605a      	str	r2, [r3, #4]
					  				 						 huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006c30:	4b4f      	ldr	r3, [pc, #316]	@ (8006d70 <statemachine+0x1ff0>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	609a      	str	r2, [r3, #8]
					  				 						 huart1.Init.StopBits = UART_STOPBITS_1;
 8006c36:	4b4e      	ldr	r3, [pc, #312]	@ (8006d70 <statemachine+0x1ff0>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	60da      	str	r2, [r3, #12]
					  				 						 huart1.Init.Parity = UART_PARITY_NONE;
 8006c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8006d70 <statemachine+0x1ff0>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	611a      	str	r2, [r3, #16]
					  				 						 huart1.Init.Mode = UART_MODE_TX_RX;
 8006c42:	4b4b      	ldr	r3, [pc, #300]	@ (8006d70 <statemachine+0x1ff0>)
 8006c44:	220c      	movs	r2, #12
 8006c46:	615a      	str	r2, [r3, #20]
					  				 						 huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c48:	4b49      	ldr	r3, [pc, #292]	@ (8006d70 <statemachine+0x1ff0>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	619a      	str	r2, [r3, #24]
					  				 						 huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c4e:	4b48      	ldr	r3, [pc, #288]	@ (8006d70 <statemachine+0x1ff0>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	61da      	str	r2, [r3, #28]
					  				 						 huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006c54:	4b46      	ldr	r3, [pc, #280]	@ (8006d70 <statemachine+0x1ff0>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	621a      	str	r2, [r3, #32]
					  				 						 huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006c5a:	4b45      	ldr	r3, [pc, #276]	@ (8006d70 <statemachine+0x1ff0>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	629a      	str	r2, [r3, #40]	@ 0x28
					  				 						  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006c60:	4843      	ldr	r0, [pc, #268]	@ (8006d70 <statemachine+0x1ff0>)
 8006c62:	f009 fe9f 	bl	80109a4 <HAL_UART_Init>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d012      	beq.n	8006c92 <statemachine+0x1f12>
					  				 						ssd1306_Fill(Black);
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	f7fd fae1 	bl	8004234 <ssd1306_Fill>
					  				 						 ssd1306_WriteString("problem",Font_6x8,White);
 8006c72:	4a2e      	ldr	r2, [pc, #184]	@ (8006d2c <statemachine+0x1fac>)
 8006c74:	2301      	movs	r3, #1
 8006c76:	ca06      	ldmia	r2, {r1, r2}
 8006c78:	483f      	ldr	r0, [pc, #252]	@ (8006d78 <statemachine+0x1ff8>)
 8006c7a:	f7fd fbf7 	bl	800446c <ssd1306_WriteString>
					  				 						ssd1306_UpdateScreen();
 8006c7e:	f7fd faf1 	bl	8004264 <ssd1306_UpdateScreen>
					  				 						HAL_Delay(1500);
 8006c82:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8006c86:	f7fa ff2a 	bl	8001ade <HAL_Delay>
					  				 						correctentarvos=0;
 8006c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8006d7c <statemachine+0x1ffc>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	e002      	b.n	8006c98 <statemachine+0x1f18>
					  				 							correctentarvos=1;
 8006c92:	4b3a      	ldr	r3, [pc, #232]	@ (8006d7c <statemachine+0x1ffc>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
					  				 						  HAL_Delay(10);
 8006c98:	200a      	movs	r0, #10
 8006c9a:	f7fa ff20 	bl	8001ade <HAL_Delay>
					  				 						  tarvosstate++;
 8006c9e:	4b31      	ldr	r3, [pc, #196]	@ (8006d64 <statemachine+0x1fe4>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8006d64 <statemachine+0x1fe4>)
 8006ca8:	701a      	strb	r2, [r3, #0]
					  				 						BTN_B_LONG=0;
 8006caa:	4b30      	ldr	r3, [pc, #192]	@ (8006d6c <statemachine+0x1fec>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
					  				 						BTN_A=0;
 8006cb0:	4b27      	ldr	r3, [pc, #156]	@ (8006d50 <statemachine+0x1fd0>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
					  				 					  break;
 8006cb6:	e0c5      	b.n	8006e44 <statemachine+0x20c4>
					  				 					 ssd1306_SetCursor(32,20);
 8006cb8:	2114      	movs	r1, #20
 8006cba:	2020      	movs	r0, #32
 8006cbc:	f7fd fbfc 	bl	80044b8 <ssd1306_SetCursor>
					  				 					ssd1306_WriteString("send1",Font_6x8,White);
 8006cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006d2c <statemachine+0x1fac>)
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	ca06      	ldmia	r2, {r1, r2}
 8006cc6:	482e      	ldr	r0, [pc, #184]	@ (8006d80 <statemachine+0x2000>)
 8006cc8:	f7fd fbd0 	bl	800446c <ssd1306_WriteString>
					  				 					if(correctentarvos==1){
 8006ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8006d7c <statemachine+0x1ffc>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d118      	bne.n	8006d06 <statemachine+0x1f86>
					  				 					snprintf((char  *)tarvosbuf,50,"cputemp=%0.2f\n\r",temp);
 8006cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d84 <statemachine+0x2004>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7f9 fc0d 	bl	80004f8 <__aeabi_f2d>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	e9cd 2300 	strd	r2, r3, [sp]
 8006ce6:	4a28      	ldr	r2, [pc, #160]	@ (8006d88 <statemachine+0x2008>)
 8006ce8:	2132      	movs	r1, #50	@ 0x32
 8006cea:	4828      	ldr	r0, [pc, #160]	@ (8006d8c <statemachine+0x200c>)
 8006cec:	f015 fd6a 	bl	801c7c4 <sniprintf>
					  				 					HAL_UART_Transmit(&huart1,(uint8_t  *)tarvosbuf,sizeof(tarvosbuf),HAL_MAX_DELAY);
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf4:	2232      	movs	r2, #50	@ 0x32
 8006cf6:	4925      	ldr	r1, [pc, #148]	@ (8006d8c <statemachine+0x200c>)
 8006cf8:	481d      	ldr	r0, [pc, #116]	@ (8006d70 <statemachine+0x1ff0>)
 8006cfa:	f009 fee2 	bl	8010ac2 <HAL_UART_Transmit>
					  				 					HAL_Delay(1000);
 8006cfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006d02:	f7fa feec 	bl	8001ade <HAL_Delay>
					  				 					if(BTN_B>=1){
 8006d06:	4b14      	ldr	r3, [pc, #80]	@ (8006d58 <statemachine+0x1fd8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f340 809c 	ble.w	8006e48 <statemachine+0x20c8>
					  					 						tarvosstate++;
 8006d10:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <statemachine+0x1fe4>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <statemachine+0x1fe4>)
 8006d1a:	701a      	strb	r2, [r3, #0]
					  					 						  BTN_B=0;
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d58 <statemachine+0x1fd8>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
					  					 						  BTN_A=0;
 8006d22:	4b0b      	ldr	r3, [pc, #44]	@ (8006d50 <statemachine+0x1fd0>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
					  				 			  break;
 8006d28:	e08e      	b.n	8006e48 <statemachine+0x20c8>
 8006d2a:	bf00      	nop
 8006d2c:	20000014 	.word	0x20000014
 8006d30:	080212c0 	.word	0x080212c0
 8006d34:	20000c0c 	.word	0x20000c0c
 8006d38:	20001284 	.word	0x20001284
 8006d3c:	080212c8 	.word	0x080212c8
 8006d40:	20000ad8 	.word	0x20000ad8
 8006d44:	2000001c 	.word	0x2000001c
 8006d48:	20001288 	.word	0x20001288
 8006d4c:	080212d0 	.word	0x080212d0
 8006d50:	20000878 	.word	0x20000878
 8006d54:	200005e8 	.word	0x200005e8
 8006d58:	2000087c 	.word	0x2000087c
 8006d5c:	20000cc0 	.word	0x20000cc0
 8006d60:	080212d8 	.word	0x080212d8
 8006d64:	200005ef 	.word	0x200005ef
 8006d68:	080212e0 	.word	0x080212e0
 8006d6c:	20000cbc 	.word	0x20000cbc
 8006d70:	20001444 	.word	0x20001444
 8006d74:	40013800 	.word	0x40013800
 8006d78:	080212e8 	.word	0x080212e8
 8006d7c:	200012c0 	.word	0x200012c0
 8006d80:	080212f0 	.word	0x080212f0
 8006d84:	200008a8 	.word	0x200008a8
 8006d88:	080212f8 	.word	0x080212f8
 8006d8c:	2000128c 	.word	0x2000128c
					  				 					ssd1306_Fill(Black);
 8006d90:	2000      	movs	r0, #0
 8006d92:	f7fd fa4f 	bl	8004234 <ssd1306_Fill>
					  				 					ssd1306_SetCursor(32,12);
 8006d96:	210c      	movs	r1, #12
 8006d98:	2020      	movs	r0, #32
 8006d9a:	f7fd fb8d 	bl	80044b8 <ssd1306_SetCursor>
					  				 					ssd1306_WriteString("send2",Font_6x8,White);
 8006d9e:	4a7f      	ldr	r2, [pc, #508]	@ (8006f9c <statemachine+0x221c>)
 8006da0:	2301      	movs	r3, #1
 8006da2:	ca06      	ldmia	r2, {r1, r2}
 8006da4:	487e      	ldr	r0, [pc, #504]	@ (8006fa0 <statemachine+0x2220>)
 8006da6:	f7fd fb61 	bl	800446c <ssd1306_WriteString>
					  				 					if(correctentarvos==1){
 8006daa:	4b7e      	ldr	r3, [pc, #504]	@ (8006fa4 <statemachine+0x2224>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d118      	bne.n	8006de4 <statemachine+0x2064>
					  				 						snprintf((char  *)tarvosbuf,50,"je suis à =%0.2f\n\r",vbat);
 8006db2:	4b7d      	ldr	r3, [pc, #500]	@ (8006fa8 <statemachine+0x2228>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7f9 fb9e 	bl	80004f8 <__aeabi_f2d>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	e9cd 2300 	strd	r2, r3, [sp]
 8006dc4:	4a79      	ldr	r2, [pc, #484]	@ (8006fac <statemachine+0x222c>)
 8006dc6:	2132      	movs	r1, #50	@ 0x32
 8006dc8:	4879      	ldr	r0, [pc, #484]	@ (8006fb0 <statemachine+0x2230>)
 8006dca:	f015 fcfb 	bl	801c7c4 <sniprintf>
					  				 						HAL_UART_Transmit(&huart1,(uint8_t  *)tarvosbuf,sizeof(tarvosbuf),HAL_MAX_DELAY);
 8006dce:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd2:	2232      	movs	r2, #50	@ 0x32
 8006dd4:	4976      	ldr	r1, [pc, #472]	@ (8006fb0 <statemachine+0x2230>)
 8006dd6:	4877      	ldr	r0, [pc, #476]	@ (8006fb4 <statemachine+0x2234>)
 8006dd8:	f009 fe73 	bl	8010ac2 <HAL_UART_Transmit>
					  				 						HAL_Delay(1000);
 8006ddc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006de0:	f7fa fe7d 	bl	8001ade <HAL_Delay>
					  				 					if(BTN_B>=1){
 8006de4:	4b74      	ldr	r3, [pc, #464]	@ (8006fb8 <statemachine+0x2238>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	dd0b      	ble.n	8006e04 <statemachine+0x2084>
					  				 									 						tarvosstate--;
 8006dec:	4b73      	ldr	r3, [pc, #460]	@ (8006fbc <statemachine+0x223c>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	4b71      	ldr	r3, [pc, #452]	@ (8006fbc <statemachine+0x223c>)
 8006df6:	701a      	strb	r2, [r3, #0]
					  				 									 						  BTN_B=0;
 8006df8:	4b6f      	ldr	r3, [pc, #444]	@ (8006fb8 <statemachine+0x2238>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]
					  				 									 						  BTN_A=0;
 8006dfe:	4b70      	ldr	r3, [pc, #448]	@ (8006fc0 <statemachine+0x2240>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
					  				 					if(BTN_B_LONG>=1){
 8006e04:	4b6f      	ldr	r3, [pc, #444]	@ (8006fc4 <statemachine+0x2244>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dd1f      	ble.n	8006e4c <statemachine+0x20cc>
					  				 						HAL_UART_Abort(&huart1);
 8006e0c:	4869      	ldr	r0, [pc, #420]	@ (8006fb4 <statemachine+0x2234>)
 8006e0e:	f009 ff33 	bl	8010c78 <HAL_UART_Abort>
					  				 						HAL_UART_DeInit(&huart1);
 8006e12:	4868      	ldr	r0, [pc, #416]	@ (8006fb4 <statemachine+0x2234>)
 8006e14:	f009 fe16 	bl	8010a44 <HAL_UART_DeInit>
					  				 										  				 									 						tarvosstate--;
 8006e18:	4b68      	ldr	r3, [pc, #416]	@ (8006fbc <statemachine+0x223c>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	4b66      	ldr	r3, [pc, #408]	@ (8006fbc <statemachine+0x223c>)
 8006e22:	701a      	strb	r2, [r3, #0]
					  				 										  				 									 					tarvosstate--;
 8006e24:	4b65      	ldr	r3, [pc, #404]	@ (8006fbc <statemachine+0x223c>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	4b63      	ldr	r3, [pc, #396]	@ (8006fbc <statemachine+0x223c>)
 8006e2e:	701a      	strb	r2, [r3, #0]
					  				 										  				 									 						  BTN_B_LONG=0;
 8006e30:	4b64      	ldr	r3, [pc, #400]	@ (8006fc4 <statemachine+0x2244>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
					  				 										  				 									 						  BTN_B=0;
 8006e36:	4b60      	ldr	r3, [pc, #384]	@ (8006fb8 <statemachine+0x2238>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
					  				 										  				 									 						  BTN_A=0;
 8006e3c:	4b60      	ldr	r3, [pc, #384]	@ (8006fc0 <statemachine+0x2240>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
					  				 					 break;
 8006e42:	e003      	b.n	8006e4c <statemachine+0x20cc>
					  				 					  break;
 8006e44:	bf00      	nop
 8006e46:	e1ca      	b.n	80071de <statemachine+0x245e>
					  				 			  break;
 8006e48:	bf00      	nop
 8006e4a:	e1c8      	b.n	80071de <statemachine+0x245e>
					  				 					 break;
 8006e4c:	bf00      	nop
					  break;
 8006e4e:	e1c6      	b.n	80071de <statemachine+0x245e>



					  				 case STATE_BARO:
					  									  ssd1306_Fill(Black);
 8006e50:	2000      	movs	r0, #0
 8006e52:	f7fd f9ef 	bl	8004234 <ssd1306_Fill>
					  									  				  ssd1306_SetCursor(32,12);
 8006e56:	210c      	movs	r1, #12
 8006e58:	2020      	movs	r0, #32
 8006e5a:	f7fd fb2d 	bl	80044b8 <ssd1306_SetCursor>
					  									  				  ssd1306_WriteString("baro",Font_6x8,White);
 8006e5e:	4a4f      	ldr	r2, [pc, #316]	@ (8006f9c <statemachine+0x221c>)
 8006e60:	2301      	movs	r3, #1
 8006e62:	ca06      	ldmia	r2, {r1, r2}
 8006e64:	4858      	ldr	r0, [pc, #352]	@ (8006fc8 <statemachine+0x2248>)
 8006e66:	f7fd fb01 	bl	800446c <ssd1306_WriteString>
					  									  				  switch(barostate){
 8006e6a:	4b58      	ldr	r3, [pc, #352]	@ (8006fcc <statemachine+0x224c>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <statemachine+0x20fa>
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	f000 80bc 	beq.w	8006ff0 <statemachine+0x2270>
					  									  				 			  break;


					  									  				 				  }

					  									  break;
 8006e78:	e1b4      	b.n	80071e4 <statemachine+0x2464>
					  									  				 					  ssd1306_SetCursor(32,20);
 8006e7a:	2114      	movs	r1, #20
 8006e7c:	2020      	movs	r0, #32
 8006e7e:	f7fd fb1b 	bl	80044b8 <ssd1306_SetCursor>
					  									  				 					  ssd1306_WriteString("push B",Font_6x8,White);
 8006e82:	4a46      	ldr	r2, [pc, #280]	@ (8006f9c <statemachine+0x221c>)
 8006e84:	2301      	movs	r3, #1
 8006e86:	ca06      	ldmia	r2, {r1, r2}
 8006e88:	4851      	ldr	r0, [pc, #324]	@ (8006fd0 <statemachine+0x2250>)
 8006e8a:	f7fd faef 	bl	800446c <ssd1306_WriteString>
					  									  									  if(BTN_A>=1){
 8006e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8006fc0 <statemachine+0x2240>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dd0b      	ble.n	8006eae <statemachine+0x212e>
					  									  											state++;
 8006e96:	4b4f      	ldr	r3, [pc, #316]	@ (8006fd4 <statemachine+0x2254>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8006fd4 <statemachine+0x2254>)
 8006ea0:	701a      	strb	r2, [r3, #0]
					  									  											BTN_A=0;
 8006ea2:	4b47      	ldr	r3, [pc, #284]	@ (8006fc0 <statemachine+0x2240>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
					  									  											BTN_B=0;
 8006ea8:	4b43      	ldr	r3, [pc, #268]	@ (8006fb8 <statemachine+0x2238>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
					  									  									if(BTN_A_LONG>=1){
 8006eae:	4b4a      	ldr	r3, [pc, #296]	@ (8006fd8 <statemachine+0x2258>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	dd0e      	ble.n	8006ed4 <statemachine+0x2154>
					  									  											state--;
 8006eb6:	4b47      	ldr	r3, [pc, #284]	@ (8006fd4 <statemachine+0x2254>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	4b45      	ldr	r3, [pc, #276]	@ (8006fd4 <statemachine+0x2254>)
 8006ec0:	701a      	strb	r2, [r3, #0]
					  									  											BTN_A=0;
 8006ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8006fc0 <statemachine+0x2240>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]
					  									  											BTN_B=0;
 8006ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb8 <statemachine+0x2238>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
					  									  											BTN_A_LONG=0;
 8006ece:	4b42      	ldr	r3, [pc, #264]	@ (8006fd8 <statemachine+0x2258>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
					  									  				 					  if(BTN_B_LONG>=1){
 8006ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8006fc4 <statemachine+0x2244>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f340 80d4 	ble.w	8007086 <statemachine+0x2306>
					  									  				 					 hi2c1.Instance = I2C1;
 8006ede:	4b3f      	ldr	r3, [pc, #252]	@ (8006fdc <statemachine+0x225c>)
 8006ee0:	4a3f      	ldr	r2, [pc, #252]	@ (8006fe0 <statemachine+0x2260>)
 8006ee2:	601a      	str	r2, [r3, #0]
					  									  				 					  hi2c1.Init.Timing = 0x00202538;
 8006ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8006fdc <statemachine+0x225c>)
 8006ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8006fe4 <statemachine+0x2264>)
 8006ee8:	605a      	str	r2, [r3, #4]
					  									  				 					  hi2c1.Init.OwnAddress1 = 0;
 8006eea:	4b3c      	ldr	r3, [pc, #240]	@ (8006fdc <statemachine+0x225c>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	609a      	str	r2, [r3, #8]
					  									  				 					  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8006fdc <statemachine+0x225c>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	60da      	str	r2, [r3, #12]
					  									  				 					  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ef6:	4b39      	ldr	r3, [pc, #228]	@ (8006fdc <statemachine+0x225c>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	611a      	str	r2, [r3, #16]
					  									  				 					  hi2c1.Init.OwnAddress2 = 0;
 8006efc:	4b37      	ldr	r3, [pc, #220]	@ (8006fdc <statemachine+0x225c>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	615a      	str	r2, [r3, #20]
					  									  				 					  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006f02:	4b36      	ldr	r3, [pc, #216]	@ (8006fdc <statemachine+0x225c>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	619a      	str	r2, [r3, #24]
					  									  				 					  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f08:	4b34      	ldr	r3, [pc, #208]	@ (8006fdc <statemachine+0x225c>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	61da      	str	r2, [r3, #28]
					  									  				 					  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f0e:	4b33      	ldr	r3, [pc, #204]	@ (8006fdc <statemachine+0x225c>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	621a      	str	r2, [r3, #32]
					  									  				 					  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006f14:	4831      	ldr	r0, [pc, #196]	@ (8006fdc <statemachine+0x225c>)
 8006f16:	f003 fa9d 	bl	800a454 <HAL_I2C_Init>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <statemachine+0x21a6>
					  									  				 						i2cerrcheck=1;
 8006f20:	4b31      	ldr	r3, [pc, #196]	@ (8006fe8 <statemachine+0x2268>)
 8006f22:	2201      	movs	r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
					  									  				 					  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006f26:	2100      	movs	r1, #0
 8006f28:	482c      	ldr	r0, [pc, #176]	@ (8006fdc <statemachine+0x225c>)
 8006f2a:	f004 f84d 	bl	800afc8 <HAL_I2CEx_ConfigAnalogFilter>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <statemachine+0x21ba>
					  									  				 						i2cerrcheck=1;
 8006f34:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe8 <statemachine+0x2268>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
					  									  				 					  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4827      	ldr	r0, [pc, #156]	@ (8006fdc <statemachine+0x225c>)
 8006f3e:	f004 f88e 	bl	800b05e <HAL_I2CEx_ConfigDigitalFilter>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <statemachine+0x21ce>
					  									  				 						i2cerrcheck=1;
 8006f48:	4b27      	ldr	r3, [pc, #156]	@ (8006fe8 <statemachine+0x2268>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
					  									  				 					  if(i2cerrcheck>=1){
 8006f4e:	4b26      	ldr	r3, [pc, #152]	@ (8006fe8 <statemachine+0x2268>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	dd0f      	ble.n	8006f76 <statemachine+0x21f6>
					  									  				 						ssd1306_Fill(Black);
 8006f56:	2000      	movs	r0, #0
 8006f58:	f7fd f96c 	bl	8004234 <ssd1306_Fill>
					  									  				 						 ssd1306_WriteString("problem",Font_6x8,White);
 8006f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8006f9c <statemachine+0x221c>)
 8006f5e:	2301      	movs	r3, #1
 8006f60:	ca06      	ldmia	r2, {r1, r2}
 8006f62:	4822      	ldr	r0, [pc, #136]	@ (8006fec <statemachine+0x226c>)
 8006f64:	f7fd fa82 	bl	800446c <ssd1306_WriteString>
					  									  				 						ssd1306_UpdateScreen();
 8006f68:	f7fd f97c 	bl	8004264 <ssd1306_UpdateScreen>
					  									  				 						HAL_Delay(1500);
 8006f6c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8006f70:	f7fa fdb5 	bl	8001ade <HAL_Delay>
 8006f74:	e00b      	b.n	8006f8e <statemachine+0x220e>
					  									  				 						HAL_Delay(10);
 8006f76:	200a      	movs	r0, #10
 8006f78:	f7fa fdb1 	bl	8001ade <HAL_Delay>
					  									  				 						  barostate++;
 8006f7c:	4b13      	ldr	r3, [pc, #76]	@ (8006fcc <statemachine+0x224c>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	4b11      	ldr	r3, [pc, #68]	@ (8006fcc <statemachine+0x224c>)
 8006f86:	701a      	strb	r2, [r3, #0]
					  									  				 						PADS_continuous_init(&hi2c1);
 8006f88:	4814      	ldr	r0, [pc, #80]	@ (8006fdc <statemachine+0x225c>)
 8006f8a:	f7fa f803 	bl	8000f94 <PADS_continuous_init>
					  									  				 					BTN_B_LONG=0;
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc4 <statemachine+0x2244>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
					  									  				 					BTN_A=0;
 8006f94:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc0 <statemachine+0x2240>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
					  									  				 					  break;
 8006f9a:	e074      	b.n	8007086 <statemachine+0x2306>
 8006f9c:	20000014 	.word	0x20000014
 8006fa0:	08021308 	.word	0x08021308
 8006fa4:	200012c0 	.word	0x200012c0
 8006fa8:	200008b0 	.word	0x200008b0
 8006fac:	08021310 	.word	0x08021310
 8006fb0:	2000128c 	.word	0x2000128c
 8006fb4:	20001444 	.word	0x20001444
 8006fb8:	2000087c 	.word	0x2000087c
 8006fbc:	200005ef 	.word	0x200005ef
 8006fc0:	20000878 	.word	0x20000878
 8006fc4:	20000cbc 	.word	0x20000cbc
 8006fc8:	08021324 	.word	0x08021324
 8006fcc:	200005f0 	.word	0x200005f0
 8006fd0:	080212e0 	.word	0x080212e0
 8006fd4:	200005e8 	.word	0x200005e8
 8006fd8:	20000cc0 	.word	0x20000cc0
 8006fdc:	20000504 	.word	0x20000504
 8006fe0:	40005400 	.word	0x40005400
 8006fe4:	00202538 	.word	0x00202538
 8006fe8:	200012c4 	.word	0x200012c4
 8006fec:	080212e8 	.word	0x080212e8
					  									  				 					 ssd1306_SetCursor(32,20);
 8006ff0:	2114      	movs	r1, #20
 8006ff2:	2020      	movs	r0, #32
 8006ff4:	f7fd fa60 	bl	80044b8 <ssd1306_SetCursor>
					  									  				 					ssd1306_WriteString("read",Font_6x8,White);
 8006ff8:	4a7e      	ldr	r2, [pc, #504]	@ (80071f4 <statemachine+0x2474>)
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	ca06      	ldmia	r2, {r1, r2}
 8006ffe:	487e      	ldr	r0, [pc, #504]	@ (80071f8 <statemachine+0x2478>)
 8007000:	f7fd fa34 	bl	800446c <ssd1306_WriteString>
					  									  				 					if(i2cerrcheck==0){
 8007004:	4b7d      	ldr	r3, [pc, #500]	@ (80071fc <statemachine+0x247c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d128      	bne.n	800705e <statemachine+0x22de>
					  									  				 					PADS_continuous_read(&hi2c1);
 800700c:	487c      	ldr	r0, [pc, #496]	@ (8007200 <statemachine+0x2480>)
 800700e:	f7fa f82b 	bl	8001068 <PADS_continuous_read>
					  									  				 				ssd1306_SetCursor(32,28);
 8007012:	211c      	movs	r1, #28
 8007014:	2020      	movs	r0, #32
 8007016:	f7fd fa4f 	bl	80044b8 <ssd1306_SetCursor>
					  									  				 			snprintf((char  *)bufferscreen,50,"t=%d",inttemp);
 800701a:	4b7a      	ldr	r3, [pc, #488]	@ (8007204 <statemachine+0x2484>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a7a      	ldr	r2, [pc, #488]	@ (8007208 <statemachine+0x2488>)
 8007020:	2132      	movs	r1, #50	@ 0x32
 8007022:	487a      	ldr	r0, [pc, #488]	@ (800720c <statemachine+0x248c>)
 8007024:	f015 fbce 	bl	801c7c4 <sniprintf>
					  									  				 			ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8007028:	4a72      	ldr	r2, [pc, #456]	@ (80071f4 <statemachine+0x2474>)
 800702a:	2301      	movs	r3, #1
 800702c:	ca06      	ldmia	r2, {r1, r2}
 800702e:	4877      	ldr	r0, [pc, #476]	@ (800720c <statemachine+0x248c>)
 8007030:	f7fd fa1c 	bl	800446c <ssd1306_WriteString>
					  									  				 			snprintf((char  *)bufferscreen,50,"p=%d",intpress);
 8007034:	4b76      	ldr	r3, [pc, #472]	@ (8007210 <statemachine+0x2490>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a76      	ldr	r2, [pc, #472]	@ (8007214 <statemachine+0x2494>)
 800703a:	2132      	movs	r1, #50	@ 0x32
 800703c:	4873      	ldr	r0, [pc, #460]	@ (800720c <statemachine+0x248c>)
 800703e:	f015 fbc1 	bl	801c7c4 <sniprintf>
					  									  				 		ssd1306_SetCursor(32,36);
 8007042:	2124      	movs	r1, #36	@ 0x24
 8007044:	2020      	movs	r0, #32
 8007046:	f7fd fa37 	bl	80044b8 <ssd1306_SetCursor>
					  									  				 	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 800704a:	4a6a      	ldr	r2, [pc, #424]	@ (80071f4 <statemachine+0x2474>)
 800704c:	2301      	movs	r3, #1
 800704e:	ca06      	ldmia	r2, {r1, r2}
 8007050:	486e      	ldr	r0, [pc, #440]	@ (800720c <statemachine+0x248c>)
 8007052:	f7fd fa0b 	bl	800446c <ssd1306_WriteString>
					  									  				 	HAL_Delay(500);
 8007056:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800705a:	f7fa fd40 	bl	8001ade <HAL_Delay>
					  									  				 					if(BTN_B_LONG>=1){
 800705e:	4b6e      	ldr	r3, [pc, #440]	@ (8007218 <statemachine+0x2498>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	dd11      	ble.n	800708a <statemachine+0x230a>
					  									  				 					HAL_I2C_DeInit(&hi2c1);
 8007066:	4866      	ldr	r0, [pc, #408]	@ (8007200 <statemachine+0x2480>)
 8007068:	f003 fa8f 	bl	800a58a <HAL_I2C_DeInit>
					  									  					 						barostate--;
 800706c:	4b6b      	ldr	r3, [pc, #428]	@ (800721c <statemachine+0x249c>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	3b01      	subs	r3, #1
 8007072:	b2da      	uxtb	r2, r3
 8007074:	4b69      	ldr	r3, [pc, #420]	@ (800721c <statemachine+0x249c>)
 8007076:	701a      	strb	r2, [r3, #0]
					  									  					 						  BTN_B_LONG=0;
 8007078:	4b67      	ldr	r3, [pc, #412]	@ (8007218 <statemachine+0x2498>)
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
					  									  					 						  BTN_A=0;
 800707e:	4b68      	ldr	r3, [pc, #416]	@ (8007220 <statemachine+0x24a0>)
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]
					  									  				 			  break;
 8007084:	e001      	b.n	800708a <statemachine+0x230a>
					  									  				 					  break;
 8007086:	bf00      	nop
 8007088:	e0ac      	b.n	80071e4 <statemachine+0x2464>
					  									  				 			  break;
 800708a:	bf00      	nop
					  									  break;
 800708c:	e0aa      	b.n	80071e4 <statemachine+0x2464>


				  case STATE_TEST:
					  ssd1306_Fill(Black);
 800708e:	2000      	movs	r0, #0
 8007090:	f7fd f8d0 	bl	8004234 <ssd1306_Fill>
					  ssd1306_SetCursor(32,12);
 8007094:	210c      	movs	r1, #12
 8007096:	2020      	movs	r0, #32
 8007098:	f7fd fa0e 	bl	80044b8 <ssd1306_SetCursor>
					  ssd1306_WriteString("test",Font_6x8,White);
 800709c:	4a55      	ldr	r2, [pc, #340]	@ (80071f4 <statemachine+0x2474>)
 800709e:	2301      	movs	r3, #1
 80070a0:	ca06      	ldmia	r2, {r1, r2}
 80070a2:	4860      	ldr	r0, [pc, #384]	@ (8007224 <statemachine+0x24a4>)
 80070a4:	f7fd f9e2 	bl	800446c <ssd1306_WriteString>
					  memcpy((char  *)longbufferscreen,"ceci est un text plutot long, qui ne s'arrette toujours pas et pourtant il s'affiche complet",sizeof("ceci est un text plutot long, qui ne s'arrette toujours pas et pourtant il s'affiche complet"));
 80070a8:	225d      	movs	r2, #93	@ 0x5d
 80070aa:	495f      	ldr	r1, [pc, #380]	@ (8007228 <statemachine+0x24a8>)
 80070ac:	485f      	ldr	r0, [pc, #380]	@ (800722c <statemachine+0x24ac>)
 80070ae:	f015 fd3c 	bl	801cb2a <memcpy>
					  scrolltextmax=scrollText(longbufferscreen,Font_7x10,32,20,32,offsetforscroltext);
 80070b2:	4b5f      	ldr	r3, [pc, #380]	@ (8007230 <statemachine+0x24b0>)
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	4a5f      	ldr	r2, [pc, #380]	@ (8007234 <statemachine+0x24b4>)
 80070b8:	9302      	str	r3, [sp, #8]
 80070ba:	2320      	movs	r3, #32
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	2314      	movs	r3, #20
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	2320      	movs	r3, #32
 80070c4:	ca06      	ldmia	r2, {r1, r2}
 80070c6:	4859      	ldr	r0, [pc, #356]	@ (800722c <statemachine+0x24ac>)
 80070c8:	f7fd fdee 	bl	8004ca8 <scrollText>
 80070cc:	4603      	mov	r3, r0
 80070ce:	461a      	mov	r2, r3
 80070d0:	4b59      	ldr	r3, [pc, #356]	@ (8007238 <statemachine+0x24b8>)
 80070d2:	801a      	strh	r2, [r3, #0]
					  ssd1306_SetCursor(32,35);
 80070d4:	2123      	movs	r1, #35	@ 0x23
 80070d6:	2020      	movs	r0, #32
 80070d8:	f7fd f9ee 	bl	80044b8 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d",offsetforscroltext);
 80070dc:	4b54      	ldr	r3, [pc, #336]	@ (8007230 <statemachine+0x24b0>)
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	4a56      	ldr	r2, [pc, #344]	@ (800723c <statemachine+0x24bc>)
 80070e2:	2132      	movs	r1, #50	@ 0x32
 80070e4:	4849      	ldr	r0, [pc, #292]	@ (800720c <statemachine+0x248c>)
 80070e6:	f015 fb6d 	bl	801c7c4 <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80070ea:	4a42      	ldr	r2, [pc, #264]	@ (80071f4 <statemachine+0x2474>)
 80070ec:	2301      	movs	r3, #1
 80070ee:	ca06      	ldmia	r2, {r1, r2}
 80070f0:	4846      	ldr	r0, [pc, #280]	@ (800720c <statemachine+0x248c>)
 80070f2:	f7fd f9bb 	bl	800446c <ssd1306_WriteString>


					  if(offsetforscroltext>=scrolltextmax+16){
 80070f6:	4b50      	ldr	r3, [pc, #320]	@ (8007238 <statemachine+0x24b8>)
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	330f      	adds	r3, #15
 80070fc:	4a4c      	ldr	r2, [pc, #304]	@ (8007230 <statemachine+0x24b0>)
 80070fe:	8812      	ldrh	r2, [r2, #0]
 8007100:	4293      	cmp	r3, r2
 8007102:	da02      	bge.n	800710a <statemachine+0x238a>
					  	  offsetforscroltext=0;
 8007104:	4b4a      	ldr	r3, [pc, #296]	@ (8007230 <statemachine+0x24b0>)
 8007106:	2200      	movs	r2, #0
 8007108:	801a      	strh	r2, [r3, #0]





					  if(BTN_A>=1){
 800710a:	4b45      	ldr	r3, [pc, #276]	@ (8007220 <statemachine+0x24a0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd41      	ble.n	8007196 <statemachine+0x2416>
					 				 									state--;
 8007112:	4b4b      	ldr	r3, [pc, #300]	@ (8007240 <statemachine+0x24c0>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	3b01      	subs	r3, #1
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4b49      	ldr	r3, [pc, #292]	@ (8007240 <statemachine+0x24c0>)
 800711c:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800711e:	4b48      	ldr	r3, [pc, #288]	@ (8007240 <statemachine+0x24c0>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	3b01      	subs	r3, #1
 8007124:	b2da      	uxtb	r2, r3
 8007126:	4b46      	ldr	r3, [pc, #280]	@ (8007240 <statemachine+0x24c0>)
 8007128:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800712a:	4b45      	ldr	r3, [pc, #276]	@ (8007240 <statemachine+0x24c0>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	3b01      	subs	r3, #1
 8007130:	b2da      	uxtb	r2, r3
 8007132:	4b43      	ldr	r3, [pc, #268]	@ (8007240 <statemachine+0x24c0>)
 8007134:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8007136:	4b42      	ldr	r3, [pc, #264]	@ (8007240 <statemachine+0x24c0>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	3b01      	subs	r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	4b40      	ldr	r3, [pc, #256]	@ (8007240 <statemachine+0x24c0>)
 8007140:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8007142:	4b3f      	ldr	r3, [pc, #252]	@ (8007240 <statemachine+0x24c0>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	3b01      	subs	r3, #1
 8007148:	b2da      	uxtb	r2, r3
 800714a:	4b3d      	ldr	r3, [pc, #244]	@ (8007240 <statemachine+0x24c0>)
 800714c:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800714e:	4b3c      	ldr	r3, [pc, #240]	@ (8007240 <statemachine+0x24c0>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	3b01      	subs	r3, #1
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4b3a      	ldr	r3, [pc, #232]	@ (8007240 <statemachine+0x24c0>)
 8007158:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800715a:	4b39      	ldr	r3, [pc, #228]	@ (8007240 <statemachine+0x24c0>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	3b01      	subs	r3, #1
 8007160:	b2da      	uxtb	r2, r3
 8007162:	4b37      	ldr	r3, [pc, #220]	@ (8007240 <statemachine+0x24c0>)
 8007164:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8007166:	4b36      	ldr	r3, [pc, #216]	@ (8007240 <statemachine+0x24c0>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	3b01      	subs	r3, #1
 800716c:	b2da      	uxtb	r2, r3
 800716e:	4b34      	ldr	r3, [pc, #208]	@ (8007240 <statemachine+0x24c0>)
 8007170:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8007172:	4b33      	ldr	r3, [pc, #204]	@ (8007240 <statemachine+0x24c0>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	3b01      	subs	r3, #1
 8007178:	b2da      	uxtb	r2, r3
 800717a:	4b31      	ldr	r3, [pc, #196]	@ (8007240 <statemachine+0x24c0>)
 800717c:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800717e:	4b30      	ldr	r3, [pc, #192]	@ (8007240 <statemachine+0x24c0>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	3b01      	subs	r3, #1
 8007184:	b2da      	uxtb	r2, r3
 8007186:	4b2e      	ldr	r3, [pc, #184]	@ (8007240 <statemachine+0x24c0>)
 8007188:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 800718a:	4b25      	ldr	r3, [pc, #148]	@ (8007220 <statemachine+0x24a0>)
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 8007190:	4b2c      	ldr	r3, [pc, #176]	@ (8007244 <statemachine+0x24c4>)
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]
					 				 									  	}
					  if(BTN_A_LONG>=1){
 8007196:	4b2c      	ldr	r3, [pc, #176]	@ (8007248 <statemachine+0x24c8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	dd21      	ble.n	80071e2 <statemachine+0x2462>
					  				 									 									  			 	state--;
 800719e:	4b28      	ldr	r3, [pc, #160]	@ (8007240 <statemachine+0x24c0>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	4b26      	ldr	r3, [pc, #152]	@ (8007240 <statemachine+0x24c0>)
 80071a8:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 80071aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007220 <statemachine+0x24a0>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 80071b0:	4b24      	ldr	r3, [pc, #144]	@ (8007244 <statemachine+0x24c4>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 80071b6:	4b24      	ldr	r3, [pc, #144]	@ (8007248 <statemachine+0x24c8>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
					  				 									 									  	}



					  break;
 80071bc:	e011      	b.n	80071e2 <statemachine+0x2462>
				  break;
 80071be:	bf00      	nop
 80071c0:	e010      	b.n	80071e4 <statemachine+0x2464>
			  break;
 80071c2:	bf00      	nop
 80071c4:	e00e      	b.n	80071e4 <statemachine+0x2464>
			  break;
 80071c6:	bf00      	nop
 80071c8:	e00c      	b.n	80071e4 <statemachine+0x2464>
			  break;
 80071ca:	bf00      	nop
 80071cc:	e00a      	b.n	80071e4 <statemachine+0x2464>
			  break;
 80071ce:	bf00      	nop
 80071d0:	e008      	b.n	80071e4 <statemachine+0x2464>
				  break;
 80071d2:	bf00      	nop
 80071d4:	e006      	b.n	80071e4 <statemachine+0x2464>
				  break;
 80071d6:	bf00      	nop
 80071d8:	e004      	b.n	80071e4 <statemachine+0x2464>
					  break;
 80071da:	bf00      	nop
 80071dc:	e002      	b.n	80071e4 <statemachine+0x2464>
					  break;
 80071de:	bf00      	nop
 80071e0:	e000      	b.n	80071e4 <statemachine+0x2464>
					  break;
 80071e2:	bf00      	nop
	}
return ;
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
}
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	ecbd 8b02 	vpop	{d8}
 80071f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000014 	.word	0x20000014
 80071f8:	0802132c 	.word	0x0802132c
 80071fc:	200012c4 	.word	0x200012c4
 8007200:	20000504 	.word	0x20000504
 8007204:	20000398 	.word	0x20000398
 8007208:	08021334 	.word	0x08021334
 800720c:	20000ad8 	.word	0x20000ad8
 8007210:	2000039c 	.word	0x2000039c
 8007214:	0802122c 	.word	0x0802122c
 8007218:	20000cbc 	.word	0x20000cbc
 800721c:	200005f0 	.word	0x200005f0
 8007220:	20000878 	.word	0x20000878
 8007224:	0802133c 	.word	0x0802133c
 8007228:	08021344 	.word	0x08021344
 800722c:	20000b0c 	.word	0x20000b0c
 8007230:	20000c4c 	.word	0x20000c4c
 8007234:	2000001c 	.word	0x2000001c
 8007238:	20000c4e 	.word	0x20000c4e
 800723c:	080213a4 	.word	0x080213a4
 8007240:	200005e8 	.word	0x200005e8
 8007244:	2000087c 	.word	0x2000087c
 8007248:	20000cc0 	.word	0x20000cc0

0800724c <LL_AHB3_GRP1_EnableClock>:
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007258:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800725a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4313      	orrs	r3, r2
 8007262:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007268:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4013      	ands	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007270:	68fb      	ldr	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8007282:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007286:	f7ff ffe1 	bl	800724c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800728a:	2200      	movs	r2, #0
 800728c:	2100      	movs	r1, #0
 800728e:	202e      	movs	r0, #46	@ 0x2e
 8007290:	f002 f9f3 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8007294:	202e      	movs	r0, #46	@ 0x2e
 8007296:	f002 fa0a 	bl	80096ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 80072a4:	2114      	movs	r1, #20
 80072a6:	2020      	movs	r0, #32
 80072a8:	f7fd f906 	bl	80044b8 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 80072ac:	4a04      	ldr	r2, [pc, #16]	@ (80072c0 <NMI_Handler+0x20>)
 80072ae:	2301      	movs	r3, #1
 80072b0:	ca06      	ldmia	r2, {r1, r2}
 80072b2:	4804      	ldr	r0, [pc, #16]	@ (80072c4 <NMI_Handler+0x24>)
 80072b4:	f7fd f8da 	bl	800446c <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 80072b8:	f7fc ffd4 	bl	8004264 <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 80072bc:	bf00      	nop
 80072be:	e7f1      	b.n	80072a4 <NMI_Handler+0x4>
 80072c0:	2000001c 	.word	0x2000001c
 80072c4:	080213a8 	.word	0x080213a8

080072c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80072cc:	2114      	movs	r1, #20
 80072ce:	2020      	movs	r0, #32
 80072d0:	f7fd f8f2 	bl	80044b8 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80072d4:	4a04      	ldr	r2, [pc, #16]	@ (80072e8 <HardFault_Handler+0x20>)
 80072d6:	2301      	movs	r3, #1
 80072d8:	ca06      	ldmia	r2, {r1, r2}
 80072da:	4804      	ldr	r0, [pc, #16]	@ (80072ec <HardFault_Handler+0x24>)
 80072dc:	f7fd f8c6 	bl	800446c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80072e0:	f7fc ffc0 	bl	8004264 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80072e4:	bf00      	nop
 80072e6:	e7f1      	b.n	80072cc <HardFault_Handler+0x4>
 80072e8:	2000001c 	.word	0x2000001c
 80072ec:	080213ac 	.word	0x080213ac

080072f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80072f4:	2114      	movs	r1, #20
 80072f6:	2020      	movs	r0, #32
 80072f8:	f7fd f8de 	bl	80044b8 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 80072fc:	4a04      	ldr	r2, [pc, #16]	@ (8007310 <MemManage_Handler+0x20>)
 80072fe:	2301      	movs	r3, #1
 8007300:	ca06      	ldmia	r2, {r1, r2}
 8007302:	4804      	ldr	r0, [pc, #16]	@ (8007314 <MemManage_Handler+0x24>)
 8007304:	f7fd f8b2 	bl	800446c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8007308:	f7fc ffac 	bl	8004264 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 800730c:	bf00      	nop
 800730e:	e7f1      	b.n	80072f4 <MemManage_Handler+0x4>
 8007310:	2000001c 	.word	0x2000001c
 8007314:	080213b8 	.word	0x080213b8

08007318 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 800731c:	2114      	movs	r1, #20
 800731e:	2020      	movs	r0, #32
 8007320:	f7fd f8ca 	bl	80044b8 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8007324:	4a04      	ldr	r2, [pc, #16]	@ (8007338 <BusFault_Handler+0x20>)
 8007326:	2301      	movs	r3, #1
 8007328:	ca06      	ldmia	r2, {r1, r2}
 800732a:	4804      	ldr	r0, [pc, #16]	@ (800733c <BusFault_Handler+0x24>)
 800732c:	f7fd f89e 	bl	800446c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8007330:	f7fc ff98 	bl	8004264 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8007334:	bf00      	nop
 8007336:	e7f1      	b.n	800731c <BusFault_Handler+0x4>
 8007338:	2000001c 	.word	0x2000001c
 800733c:	080213bc 	.word	0x080213bc

08007340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8007344:	2114      	movs	r1, #20
 8007346:	2020      	movs	r0, #32
 8007348:	f7fd f8b6 	bl	80044b8 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 800734c:	4a04      	ldr	r2, [pc, #16]	@ (8007360 <UsageFault_Handler+0x20>)
 800734e:	2301      	movs	r3, #1
 8007350:	ca06      	ldmia	r2, {r1, r2}
 8007352:	4804      	ldr	r0, [pc, #16]	@ (8007364 <UsageFault_Handler+0x24>)
 8007354:	f7fd f88a 	bl	800446c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8007358:	f7fc ff84 	bl	8004264 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 800735c:	bf00      	nop
 800735e:	e7f1      	b.n	8007344 <UsageFault_Handler+0x4>
 8007360:	2000001c 	.word	0x2000001c
 8007364:	080213c0 	.word	0x080213c0

08007368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800736c:	bf00      	nop
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007376:	b480      	push	{r7}
 8007378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800737a:	bf00      	nop
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007388:	bf00      	nop
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007396:	f000 ff7d 	bl	8008294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800739a:	bf00      	nop
 800739c:	bd80      	pop	{r7, pc}

0800739e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80073a2:	f7fa fffd 	bl	80023a0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80073a6:	bf00      	nop
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80073b0:	4802      	ldr	r0, [pc, #8]	@ (80073bc <DMA1_Channel1_IRQHandler+0x10>)
 80073b2:	f002 fc38 	bl	8009c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80073b6:	bf00      	nop
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000404 	.word	0x20000404

080073c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80073c4:	4802      	ldr	r0, [pc, #8]	@ (80073d0 <DMA1_Channel2_IRQHandler+0x10>)
 80073c6:	f002 fc2e 	bl	8009c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200014d8 	.word	0x200014d8

080073d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80073d8:	4802      	ldr	r0, [pc, #8]	@ (80073e4 <DMA1_Channel3_IRQHandler+0x10>)
 80073da:	f002 fc24 	bl	8009c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80073de:	bf00      	nop
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000dbc 	.word	0x20000dbc

080073e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80073ec:	4802      	ldr	r0, [pc, #8]	@ (80073f8 <DMA1_Channel4_IRQHandler+0x10>)
 80073ee:	f002 fc1a 	bl	8009c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80073f2:	bf00      	nop
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000e1c 	.word	0x20000e1c

080073fc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007400:	4802      	ldr	r0, [pc, #8]	@ (800740c <USB_LP_IRQHandler+0x10>)
 8007402:	f004 f801 	bl	800b408 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8007406:	bf00      	nop
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20002b40 	.word	0x20002b40

08007410 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8007414:	4803      	ldr	r0, [pc, #12]	@ (8007424 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8007416:	f008 ff18 	bl	801024a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 800741a:	f000 fa6d 	bl	80078f8 <updatedate>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800741e:	bf00      	nop
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20001318 	.word	0x20001318

08007428 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800742c:	4806      	ldr	r0, [pc, #24]	@ (8007448 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 800742e:	f008 ff0c 	bl	801024a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  cptdoubledonnee+=1;
 8007432:	4b06      	ldr	r3, [pc, #24]	@ (800744c <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	4a04      	ldr	r2, [pc, #16]	@ (800744c <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 800743a:	6013      	str	r3, [r2, #0]
  enablewrite=1;
 800743c:	4b04      	ldr	r3, [pc, #16]	@ (8007450 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 800743e:	2201      	movs	r2, #1
 8007440:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007442:	bf00      	nop
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20001364 	.word	0x20001364
 800744c:	20000c80 	.word	0x20000c80
 8007450:	20000ca0 	.word	0x20000ca0

08007454 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007458:	4802      	ldr	r0, [pc, #8]	@ (8007464 <SPI1_IRQHandler+0x10>)
 800745a:	f008 f989 	bl	800f770 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800745e:	bf00      	nop
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000d58 	.word	0x20000d58

08007468 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800746c:	4802      	ldr	r0, [pc, #8]	@ (8007478 <LPUART1_IRQHandler+0x10>)
 800746e:	f009 fd11 	bl	8010e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8007472:	bf00      	nop
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	200013b0 	.word	0x200013b0

0800747c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007480:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007484:	f002 ffaa 	bl	800a3dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007488:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800748c:	f002 ffa6 	bl	800a3dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007490:	bf00      	nop
 8007492:	bd80      	pop	{r7, pc}

08007494 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8007498:	f012 f9c8 	bl	801982c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800749c:	bf00      	nop
 800749e:	bd80      	pop	{r7, pc}

080074a0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80074a4:	f012 f9f8 	bl	8019898 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80074a8:	bf00      	nop
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80074b0:	f002 ffac 	bl	800a40c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80074b4:	bf00      	nop
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return 1;
 80074bc:	2301      	movs	r3, #1
}
 80074be:	4618      	mov	r0, r3
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <_kill>:

int _kill(int pid, int sig)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80074d2:	f015 faf5 	bl	801cac0 <__errno>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2216      	movs	r2, #22
 80074da:	601a      	str	r2, [r3, #0]
  return -1;
 80074dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <_exit>:

void _exit (int status)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80074f0:	f04f 31ff 	mov.w	r1, #4294967295
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff ffe7 	bl	80074c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80074fa:	bf00      	nop
 80074fc:	e7fd      	b.n	80074fa <_exit+0x12>

080074fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b086      	sub	sp, #24
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800750a:	2300      	movs	r3, #0
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	e00a      	b.n	8007526 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007510:	f3af 8000 	nop.w
 8007514:	4601      	mov	r1, r0
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	60ba      	str	r2, [r7, #8]
 800751c:	b2ca      	uxtb	r2, r1
 800751e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3301      	adds	r3, #1
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	429a      	cmp	r2, r3
 800752c:	dbf0      	blt.n	8007510 <_read+0x12>
  }

  return len;
 800752e:	687b      	ldr	r3, [r7, #4]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e009      	b.n	800755e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	60ba      	str	r2, [r7, #8]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	3301      	adds	r3, #1
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	429a      	cmp	r2, r3
 8007564:	dbf1      	blt.n	800754a <_write+0x12>
  }
  return len;
 8007566:	687b      	ldr	r3, [r7, #4]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <_close>:

int _close(int file)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007598:	605a      	str	r2, [r3, #4]
  return 0;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <_isatty>:

int _isatty(int file)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80075b0:	2301      	movs	r3, #1
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075be:	b480      	push	{r7}
 80075c0:	b085      	sub	sp, #20
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075e0:	4a14      	ldr	r2, [pc, #80]	@ (8007634 <_sbrk+0x5c>)
 80075e2:	4b15      	ldr	r3, [pc, #84]	@ (8007638 <_sbrk+0x60>)
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075ec:	4b13      	ldr	r3, [pc, #76]	@ (800763c <_sbrk+0x64>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075f4:	4b11      	ldr	r3, [pc, #68]	@ (800763c <_sbrk+0x64>)
 80075f6:	4a12      	ldr	r2, [pc, #72]	@ (8007640 <_sbrk+0x68>)
 80075f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075fa:	4b10      	ldr	r3, [pc, #64]	@ (800763c <_sbrk+0x64>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4413      	add	r3, r2
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	429a      	cmp	r2, r3
 8007606:	d207      	bcs.n	8007618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007608:	f015 fa5a 	bl	801cac0 <__errno>
 800760c:	4603      	mov	r3, r0
 800760e:	220c      	movs	r2, #12
 8007610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007612:	f04f 33ff 	mov.w	r3, #4294967295
 8007616:	e009      	b.n	800762c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007618:	4b08      	ldr	r3, [pc, #32]	@ (800763c <_sbrk+0x64>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800761e:	4b07      	ldr	r3, [pc, #28]	@ (800763c <_sbrk+0x64>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	4a05      	ldr	r2, [pc, #20]	@ (800763c <_sbrk+0x64>)
 8007628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800762a:	68fb      	ldr	r3, [r7, #12]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20030000 	.word	0x20030000
 8007638:	00000400 	.word	0x00000400
 800763c:	200012c8 	.word	0x200012c8
 8007640:	20003228 	.word	0x20003228

08007644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007644:	b480      	push	{r7}
 8007646:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8007648:	4b24      	ldr	r3, [pc, #144]	@ (80076dc <SystemInit+0x98>)
 800764a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800764e:	4a23      	ldr	r2, [pc, #140]	@ (80076dc <SystemInit+0x98>)
 8007650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800766c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8007670:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800767c:	4b18      	ldr	r3, [pc, #96]	@ (80076e0 <SystemInit+0x9c>)
 800767e:	4013      	ands	r3, r2
 8007680:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800768a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800768e:	f023 0305 	bic.w	r3, r3, #5
 8007692:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800769a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800769e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076a2:	f023 0301 	bic.w	r3, r3, #1
 80076a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80076aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076ae:	4a0d      	ldr	r2, [pc, #52]	@ (80076e4 <SystemInit+0xa0>)
 80076b0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80076b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076b6:	4a0b      	ldr	r2, [pc, #44]	@ (80076e4 <SystemInit+0xa0>)
 80076b8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80076ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80076ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076ce:	2200      	movs	r2, #0
 80076d0:	619a      	str	r2, [r3, #24]
}
 80076d2:	bf00      	nop
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	e000ed00 	.word	0xe000ed00
 80076e0:	faf6fefb 	.word	0xfaf6fefb
 80076e4:	22041000 	.word	0x22041000

080076e8 <LL_APB1_GRP1_EnableClock>:
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80076f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80076f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007704:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4013      	ands	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800770c:	68fb      	ldr	r3, [r7, #12]
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <LL_APB2_GRP1_EnableClock>:
{
 800771a:	b480      	push	{r7}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007726:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007728:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4313      	orrs	r3, r2
 8007730:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007736:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4013      	ands	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800773e:	68fb      	ldr	r3, [r7, #12]
}
 8007740:	bf00      	nop
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007752:	f107 0310 	add.w	r3, r7, #16
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	605a      	str	r2, [r3, #4]
 800775c:	609a      	str	r2, [r3, #8]
 800775e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007760:	1d3b      	adds	r3, r7, #4
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	605a      	str	r2, [r3, #4]
 8007768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800776a:	4b1e      	ldr	r3, [pc, #120]	@ (80077e4 <MX_TIM2_Init+0x98>)
 800776c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8007772:	4b1c      	ldr	r3, [pc, #112]	@ (80077e4 <MX_TIM2_Init+0x98>)
 8007774:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8007778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800777a:	4b1a      	ldr	r3, [pc, #104]	@ (80077e4 <MX_TIM2_Init+0x98>)
 800777c:	2200      	movs	r2, #0
 800777e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8007780:	4b18      	ldr	r3, [pc, #96]	@ (80077e4 <MX_TIM2_Init+0x98>)
 8007782:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007788:	4b16      	ldr	r3, [pc, #88]	@ (80077e4 <MX_TIM2_Init+0x98>)
 800778a:	2200      	movs	r2, #0
 800778c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800778e:	4b15      	ldr	r3, [pc, #84]	@ (80077e4 <MX_TIM2_Init+0x98>)
 8007790:	2200      	movs	r2, #0
 8007792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007794:	4813      	ldr	r0, [pc, #76]	@ (80077e4 <MX_TIM2_Init+0x98>)
 8007796:	f008 fc3d 	bl	8010014 <HAL_TIM_Base_Init>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80077a0:	f7fb fc5c 	bl	800305c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80077aa:	f107 0310 	add.w	r3, r7, #16
 80077ae:	4619      	mov	r1, r3
 80077b0:	480c      	ldr	r0, [pc, #48]	@ (80077e4 <MX_TIM2_Init+0x98>)
 80077b2:	f008 fe51 	bl	8010458 <HAL_TIM_ConfigClockSource>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80077bc:	f7fb fc4e 	bl	800305c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80077c0:	2320      	movs	r3, #32
 80077c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80077c8:	1d3b      	adds	r3, r7, #4
 80077ca:	4619      	mov	r1, r3
 80077cc:	4805      	ldr	r0, [pc, #20]	@ (80077e4 <MX_TIM2_Init+0x98>)
 80077ce:	f009 f84b 	bl	8010868 <HAL_TIMEx_MasterConfigSynchronization>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80077d8:	f7fb fc40 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80077dc:	bf00      	nop
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	200012cc 	.word	0x200012cc

080077e8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80077ec:	4b10      	ldr	r3, [pc, #64]	@ (8007830 <MX_TIM16_Init+0x48>)
 80077ee:	4a11      	ldr	r2, [pc, #68]	@ (8007834 <MX_TIM16_Init+0x4c>)
 80077f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 80077f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007830 <MX_TIM16_Init+0x48>)
 80077f4:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80077f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007830 <MX_TIM16_Init+0x48>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8007800:	4b0b      	ldr	r3, [pc, #44]	@ (8007830 <MX_TIM16_Init+0x48>)
 8007802:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007806:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007808:	4b09      	ldr	r3, [pc, #36]	@ (8007830 <MX_TIM16_Init+0x48>)
 800780a:	2200      	movs	r2, #0
 800780c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800780e:	4b08      	ldr	r3, [pc, #32]	@ (8007830 <MX_TIM16_Init+0x48>)
 8007810:	2200      	movs	r2, #0
 8007812:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007814:	4b06      	ldr	r3, [pc, #24]	@ (8007830 <MX_TIM16_Init+0x48>)
 8007816:	2200      	movs	r2, #0
 8007818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800781a:	4805      	ldr	r0, [pc, #20]	@ (8007830 <MX_TIM16_Init+0x48>)
 800781c:	f008 fbfa 	bl	8010014 <HAL_TIM_Base_Init>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007826:	f7fb fc19 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800782a:	bf00      	nop
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20001318 	.word	0x20001318
 8007834:	40014400 	.word	0x40014400

08007838 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800783c:	4b10      	ldr	r3, [pc, #64]	@ (8007880 <MX_TIM17_Init+0x48>)
 800783e:	4a11      	ldr	r2, [pc, #68]	@ (8007884 <MX_TIM17_Init+0x4c>)
 8007840:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8007842:	4b0f      	ldr	r3, [pc, #60]	@ (8007880 <MX_TIM17_Init+0x48>)
 8007844:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8007848:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <MX_TIM17_Init+0x48>)
 800784c:	2200      	movs	r2, #0
 800784e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8007850:	4b0b      	ldr	r3, [pc, #44]	@ (8007880 <MX_TIM17_Init+0x48>)
 8007852:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007856:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007858:	4b09      	ldr	r3, [pc, #36]	@ (8007880 <MX_TIM17_Init+0x48>)
 800785a:	2200      	movs	r2, #0
 800785c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800785e:	4b08      	ldr	r3, [pc, #32]	@ (8007880 <MX_TIM17_Init+0x48>)
 8007860:	2200      	movs	r2, #0
 8007862:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007864:	4b06      	ldr	r3, [pc, #24]	@ (8007880 <MX_TIM17_Init+0x48>)
 8007866:	2200      	movs	r2, #0
 8007868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800786a:	4805      	ldr	r0, [pc, #20]	@ (8007880 <MX_TIM17_Init+0x48>)
 800786c:	f008 fbd2 	bl	8010014 <HAL_TIM_Base_Init>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8007876:	f7fb fbf1 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800787a:	bf00      	nop
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20001364 	.word	0x20001364
 8007884:	40014800 	.word	0x40014800

08007888 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007898:	d103      	bne.n	80078a2 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800789a:	2001      	movs	r0, #1
 800789c:	f7ff ff24 	bl	80076e8 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80078a0:	e022      	b.n	80078e8 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a12      	ldr	r2, [pc, #72]	@ (80078f0 <HAL_TIM_Base_MspInit+0x68>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d10c      	bne.n	80078c6 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80078ac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80078b0:	f7ff ff33 	bl	800771a <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80078b4:	2200      	movs	r2, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	2019      	movs	r0, #25
 80078ba:	f001 fede 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80078be:	2019      	movs	r0, #25
 80078c0:	f001 fef5 	bl	80096ae <HAL_NVIC_EnableIRQ>
}
 80078c4:	e010      	b.n	80078e8 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a0a      	ldr	r2, [pc, #40]	@ (80078f4 <HAL_TIM_Base_MspInit+0x6c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10b      	bne.n	80078e8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80078d0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80078d4:	f7ff ff21 	bl	800771a <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80078d8:	2200      	movs	r2, #0
 80078da:	2100      	movs	r1, #0
 80078dc:	201a      	movs	r0, #26
 80078de:	f001 fecc 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80078e2:	201a      	movs	r0, #26
 80078e4:	f001 fee3 	bl	80096ae <HAL_NVIC_EnableIRQ>
}
 80078e8:	bf00      	nop
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	40014400 	.word	0x40014400
 80078f4:	40014800 	.word	0x40014800

080078f8 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0

	SEC+=1;
 80078fc:	4b98      	ldr	r3, [pc, #608]	@ (8007b60 <updatedate+0x268>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	b2da      	uxtb	r2, r3
 8007904:	4b96      	ldr	r3, [pc, #600]	@ (8007b60 <updatedate+0x268>)
 8007906:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8007908:	4b95      	ldr	r3, [pc, #596]	@ (8007b60 <updatedate+0x268>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b3b      	cmp	r3, #59	@ 0x3b
 800790e:	d908      	bls.n	8007922 <updatedate+0x2a>
		SEC=0;
 8007910:	4b93      	ldr	r3, [pc, #588]	@ (8007b60 <updatedate+0x268>)
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8007916:	4b93      	ldr	r3, [pc, #588]	@ (8007b64 <updatedate+0x26c>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	3301      	adds	r3, #1
 800791c:	b2da      	uxtb	r2, r3
 800791e:	4b91      	ldr	r3, [pc, #580]	@ (8007b64 <updatedate+0x26c>)
 8007920:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8007922:	4b90      	ldr	r3, [pc, #576]	@ (8007b64 <updatedate+0x26c>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b3b      	cmp	r3, #59	@ 0x3b
 8007928:	d908      	bls.n	800793c <updatedate+0x44>

		MINUTE=0;
 800792a:	4b8e      	ldr	r3, [pc, #568]	@ (8007b64 <updatedate+0x26c>)
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8007930:	4b8d      	ldr	r3, [pc, #564]	@ (8007b68 <updatedate+0x270>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	b2da      	uxtb	r2, r3
 8007938:	4b8b      	ldr	r3, [pc, #556]	@ (8007b68 <updatedate+0x270>)
 800793a:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 800793c:	4b8a      	ldr	r3, [pc, #552]	@ (8007b68 <updatedate+0x270>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b17      	cmp	r3, #23
 8007942:	d908      	bls.n	8007956 <updatedate+0x5e>
		HR=0;
 8007944:	4b88      	ldr	r3, [pc, #544]	@ (8007b68 <updatedate+0x270>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 800794a:	4b88      	ldr	r3, [pc, #544]	@ (8007b6c <updatedate+0x274>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	3301      	adds	r3, #1
 8007950:	b2da      	uxtb	r2, r3
 8007952:	4b86      	ldr	r3, [pc, #536]	@ (8007b6c <updatedate+0x274>)
 8007954:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8007956:	4b86      	ldr	r3, [pc, #536]	@ (8007b70 <updatedate+0x278>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b0b      	cmp	r3, #11
 800795c:	f200 8137 	bhi.w	8007bce <updatedate+0x2d6>
 8007960:	a201      	add	r2, pc, #4	@ (adr r2, 8007968 <updatedate+0x70>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	08007999 	.word	0x08007999
 800796c:	080079c3 	.word	0x080079c3
 8007970:	080079ed 	.word	0x080079ed
 8007974:	08007a17 	.word	0x08007a17
 8007978:	08007a41 	.word	0x08007a41
 800797c:	08007a6b 	.word	0x08007a6b
 8007980:	08007a95 	.word	0x08007a95
 8007984:	08007abf 	.word	0x08007abf
 8007988:	08007ae7 	.word	0x08007ae7
 800798c:	08007b0f 	.word	0x08007b0f
 8007990:	08007b37 	.word	0x08007b37
 8007994:	08007b79 	.word	0x08007b79

	case JANVIER:
		if(JOURS>31){
 8007998:	4b74      	ldr	r3, [pc, #464]	@ (8007b6c <updatedate+0x274>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b1f      	cmp	r3, #31
 800799e:	f240 80ff 	bls.w	8007ba0 <updatedate+0x2a8>
			JOURS=1;
 80079a2:	4b72      	ldr	r3, [pc, #456]	@ (8007b6c <updatedate+0x274>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
			mois++;
 80079a8:	4b71      	ldr	r3, [pc, #452]	@ (8007b70 <updatedate+0x278>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	3301      	adds	r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007b70 <updatedate+0x278>)
 80079b2:	701a      	strb	r2, [r3, #0]
			MOIS++;
 80079b4:	4b6f      	ldr	r3, [pc, #444]	@ (8007b74 <updatedate+0x27c>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	4b6d      	ldr	r3, [pc, #436]	@ (8007b74 <updatedate+0x27c>)
 80079be:	701a      	strb	r2, [r3, #0]
		}

		break;
 80079c0:	e0ee      	b.n	8007ba0 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 80079c2:	4b6a      	ldr	r3, [pc, #424]	@ (8007b6c <updatedate+0x274>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b1d      	cmp	r3, #29
 80079c8:	f240 80ec 	bls.w	8007ba4 <updatedate+0x2ac>
					JOURS=1;
 80079cc:	4b67      	ldr	r3, [pc, #412]	@ (8007b6c <updatedate+0x274>)
 80079ce:	2201      	movs	r2, #1
 80079d0:	701a      	strb	r2, [r3, #0]
					mois++;
 80079d2:	4b67      	ldr	r3, [pc, #412]	@ (8007b70 <updatedate+0x278>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	3301      	adds	r3, #1
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	4b65      	ldr	r3, [pc, #404]	@ (8007b70 <updatedate+0x278>)
 80079dc:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80079de:	4b65      	ldr	r3, [pc, #404]	@ (8007b74 <updatedate+0x27c>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	4b63      	ldr	r3, [pc, #396]	@ (8007b74 <updatedate+0x27c>)
 80079e8:	701a      	strb	r2, [r3, #0]
				}
		break;
 80079ea:	e0db      	b.n	8007ba4 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 80079ec:	4b5f      	ldr	r3, [pc, #380]	@ (8007b6c <updatedate+0x274>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b1f      	cmp	r3, #31
 80079f2:	f240 80d9 	bls.w	8007ba8 <updatedate+0x2b0>
					JOURS=1;
 80079f6:	4b5d      	ldr	r3, [pc, #372]	@ (8007b6c <updatedate+0x274>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	701a      	strb	r2, [r3, #0]
					mois++;
 80079fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007b70 <updatedate+0x278>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	4b5a      	ldr	r3, [pc, #360]	@ (8007b70 <updatedate+0x278>)
 8007a06:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007a08:	4b5a      	ldr	r3, [pc, #360]	@ (8007b74 <updatedate+0x27c>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	4b58      	ldr	r3, [pc, #352]	@ (8007b74 <updatedate+0x27c>)
 8007a12:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007a14:	e0c8      	b.n	8007ba8 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8007a16:	4b55      	ldr	r3, [pc, #340]	@ (8007b6c <updatedate+0x274>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b1e      	cmp	r3, #30
 8007a1c:	f240 80c6 	bls.w	8007bac <updatedate+0x2b4>
					JOURS=1;
 8007a20:	4b52      	ldr	r3, [pc, #328]	@ (8007b6c <updatedate+0x274>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]
					mois++;
 8007a26:	4b52      	ldr	r3, [pc, #328]	@ (8007b70 <updatedate+0x278>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	4b50      	ldr	r3, [pc, #320]	@ (8007b70 <updatedate+0x278>)
 8007a30:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007a32:	4b50      	ldr	r3, [pc, #320]	@ (8007b74 <updatedate+0x27c>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	3301      	adds	r3, #1
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8007b74 <updatedate+0x27c>)
 8007a3c:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007a3e:	e0b5      	b.n	8007bac <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8007a40:	4b4a      	ldr	r3, [pc, #296]	@ (8007b6c <updatedate+0x274>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b1f      	cmp	r3, #31
 8007a46:	f240 80b3 	bls.w	8007bb0 <updatedate+0x2b8>
					JOURS=1;
 8007a4a:	4b48      	ldr	r3, [pc, #288]	@ (8007b6c <updatedate+0x274>)
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	701a      	strb	r2, [r3, #0]
					mois++;
 8007a50:	4b47      	ldr	r3, [pc, #284]	@ (8007b70 <updatedate+0x278>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	4b45      	ldr	r3, [pc, #276]	@ (8007b70 <updatedate+0x278>)
 8007a5a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007a5c:	4b45      	ldr	r3, [pc, #276]	@ (8007b74 <updatedate+0x27c>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	4b43      	ldr	r3, [pc, #268]	@ (8007b74 <updatedate+0x27c>)
 8007a66:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007a68:	e0a2      	b.n	8007bb0 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8007a6a:	4b40      	ldr	r3, [pc, #256]	@ (8007b6c <updatedate+0x274>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b1e      	cmp	r3, #30
 8007a70:	f240 80a0 	bls.w	8007bb4 <updatedate+0x2bc>
					JOURS=1;
 8007a74:	4b3d      	ldr	r3, [pc, #244]	@ (8007b6c <updatedate+0x274>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	701a      	strb	r2, [r3, #0]
					mois++;
 8007a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8007b70 <updatedate+0x278>)
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	4b3b      	ldr	r3, [pc, #236]	@ (8007b70 <updatedate+0x278>)
 8007a84:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007a86:	4b3b      	ldr	r3, [pc, #236]	@ (8007b74 <updatedate+0x27c>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	4b39      	ldr	r3, [pc, #228]	@ (8007b74 <updatedate+0x27c>)
 8007a90:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007a92:	e08f      	b.n	8007bb4 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8007a94:	4b35      	ldr	r3, [pc, #212]	@ (8007b6c <updatedate+0x274>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b1f      	cmp	r3, #31
 8007a9a:	f240 808d 	bls.w	8007bb8 <updatedate+0x2c0>
					JOURS=1;
 8007a9e:	4b33      	ldr	r3, [pc, #204]	@ (8007b6c <updatedate+0x274>)
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	701a      	strb	r2, [r3, #0]
					mois++;
 8007aa4:	4b32      	ldr	r3, [pc, #200]	@ (8007b70 <updatedate+0x278>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	4b30      	ldr	r3, [pc, #192]	@ (8007b70 <updatedate+0x278>)
 8007aae:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007ab0:	4b30      	ldr	r3, [pc, #192]	@ (8007b74 <updatedate+0x27c>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8007b74 <updatedate+0x27c>)
 8007aba:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007abc:	e07c      	b.n	8007bb8 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8007abe:	4b2b      	ldr	r3, [pc, #172]	@ (8007b6c <updatedate+0x274>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b1f      	cmp	r3, #31
 8007ac4:	d97a      	bls.n	8007bbc <updatedate+0x2c4>
					JOURS=1;
 8007ac6:	4b29      	ldr	r3, [pc, #164]	@ (8007b6c <updatedate+0x274>)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	701a      	strb	r2, [r3, #0]
					mois++;
 8007acc:	4b28      	ldr	r3, [pc, #160]	@ (8007b70 <updatedate+0x278>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	4b26      	ldr	r3, [pc, #152]	@ (8007b70 <updatedate+0x278>)
 8007ad6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007ad8:	4b26      	ldr	r3, [pc, #152]	@ (8007b74 <updatedate+0x27c>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	3301      	adds	r3, #1
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	4b24      	ldr	r3, [pc, #144]	@ (8007b74 <updatedate+0x27c>)
 8007ae2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007ae4:	e06a      	b.n	8007bbc <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8007ae6:	4b21      	ldr	r3, [pc, #132]	@ (8007b6c <updatedate+0x274>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b1e      	cmp	r3, #30
 8007aec:	d968      	bls.n	8007bc0 <updatedate+0x2c8>
					JOURS=1;
 8007aee:	4b1f      	ldr	r3, [pc, #124]	@ (8007b6c <updatedate+0x274>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
					mois++;
 8007af4:	4b1e      	ldr	r3, [pc, #120]	@ (8007b70 <updatedate+0x278>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	3301      	adds	r3, #1
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	4b1c      	ldr	r3, [pc, #112]	@ (8007b70 <updatedate+0x278>)
 8007afe:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007b00:	4b1c      	ldr	r3, [pc, #112]	@ (8007b74 <updatedate+0x27c>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	4b1a      	ldr	r3, [pc, #104]	@ (8007b74 <updatedate+0x27c>)
 8007b0a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007b0c:	e058      	b.n	8007bc0 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8007b0e:	4b17      	ldr	r3, [pc, #92]	@ (8007b6c <updatedate+0x274>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b1f      	cmp	r3, #31
 8007b14:	d956      	bls.n	8007bc4 <updatedate+0x2cc>
					JOURS=1;
 8007b16:	4b15      	ldr	r3, [pc, #84]	@ (8007b6c <updatedate+0x274>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	701a      	strb	r2, [r3, #0]
					mois++;
 8007b1c:	4b14      	ldr	r3, [pc, #80]	@ (8007b70 <updatedate+0x278>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	3301      	adds	r3, #1
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	4b12      	ldr	r3, [pc, #72]	@ (8007b70 <updatedate+0x278>)
 8007b26:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007b28:	4b12      	ldr	r3, [pc, #72]	@ (8007b74 <updatedate+0x27c>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <updatedate+0x27c>)
 8007b32:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007b34:	e046      	b.n	8007bc4 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8007b36:	4b0d      	ldr	r3, [pc, #52]	@ (8007b6c <updatedate+0x274>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b1e      	cmp	r3, #30
 8007b3c:	d944      	bls.n	8007bc8 <updatedate+0x2d0>
					JOURS=1;
 8007b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b6c <updatedate+0x274>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
					mois++;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <updatedate+0x278>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	4b08      	ldr	r3, [pc, #32]	@ (8007b70 <updatedate+0x278>)
 8007b4e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007b50:	4b08      	ldr	r3, [pc, #32]	@ (8007b74 <updatedate+0x27c>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <updatedate+0x27c>)
 8007b5a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007b5c:	e034      	b.n	8007bc8 <updatedate+0x2d0>
 8007b5e:	bf00      	nop
 8007b60:	20000ca4 	.word	0x20000ca4
 8007b64:	20000ca6 	.word	0x20000ca6
 8007b68:	20000ca5 	.word	0x20000ca5
 8007b6c:	20000010 	.word	0x20000010
 8007b70:	20000ca7 	.word	0x20000ca7
 8007b74:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8007b78:	4b1f      	ldr	r3, [pc, #124]	@ (8007bf8 <updatedate+0x300>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b1f      	cmp	r3, #31
 8007b7e:	d925      	bls.n	8007bcc <updatedate+0x2d4>
					JOURS=1;
 8007b80:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf8 <updatedate+0x300>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
					mois++;
 8007b86:	4b1d      	ldr	r3, [pc, #116]	@ (8007bfc <updatedate+0x304>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bfc <updatedate+0x304>)
 8007b90:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8007b92:	4b1b      	ldr	r3, [pc, #108]	@ (8007c00 <updatedate+0x308>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	3301      	adds	r3, #1
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	4b19      	ldr	r3, [pc, #100]	@ (8007c00 <updatedate+0x308>)
 8007b9c:	701a      	strb	r2, [r3, #0]
				}
		break;
 8007b9e:	e015      	b.n	8007bcc <updatedate+0x2d4>
		break;
 8007ba0:	bf00      	nop
 8007ba2:	e014      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007ba4:	bf00      	nop
 8007ba6:	e012      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007ba8:	bf00      	nop
 8007baa:	e010      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007bac:	bf00      	nop
 8007bae:	e00e      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007bb0:	bf00      	nop
 8007bb2:	e00c      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007bb4:	bf00      	nop
 8007bb6:	e00a      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007bb8:	bf00      	nop
 8007bba:	e008      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007bbc:	bf00      	nop
 8007bbe:	e006      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007bc0:	bf00      	nop
 8007bc2:	e004      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007bc4:	bf00      	nop
 8007bc6:	e002      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007bc8:	bf00      	nop
 8007bca:	e000      	b.n	8007bce <updatedate+0x2d6>
		break;
 8007bcc:	bf00      	nop

	}

	if(MOIS>12){
 8007bce:	4b0c      	ldr	r3, [pc, #48]	@ (8007c00 <updatedate+0x308>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	2b0c      	cmp	r3, #12
 8007bd4:	d90b      	bls.n	8007bee <updatedate+0x2f6>
		mois=JANVIER;
 8007bd6:	4b09      	ldr	r3, [pc, #36]	@ (8007bfc <updatedate+0x304>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8007bdc:	4b08      	ldr	r3, [pc, #32]	@ (8007c00 <updatedate+0x308>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8007be2:	4b08      	ldr	r3, [pc, #32]	@ (8007c04 <updatedate+0x30c>)
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	4b06      	ldr	r3, [pc, #24]	@ (8007c04 <updatedate+0x30c>)
 8007bec:	801a      	strh	r2, [r3, #0]
	}
}
 8007bee:	bf00      	nop
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	20000010 	.word	0x20000010
 8007bfc:	20000ca7 	.word	0x20000ca7
 8007c00:	20000011 	.word	0x20000011
 8007c04:	20000012 	.word	0x20000012

08007c08 <LL_AHB2_GRP1_EnableClock>:
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
}
 8007c2e:	bf00      	nop
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <LL_APB1_GRP2_EnableClock>:
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8007c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8007c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_APB1_GRP2_DisableClock>:
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	43db      	mvns	r3, r3
 8007c7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c82:	4013      	ands	r3, r2
 8007c84:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <LL_APB2_GRP1_EnableClock>:
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007ca0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8007ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cda:	4013      	ands	r3, r2
 8007cdc:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007cf0:	4b22      	ldr	r3, [pc, #136]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007cf2:	4a23      	ldr	r2, [pc, #140]	@ (8007d80 <MX_LPUART1_UART_Init+0x94>)
 8007cf4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8007cf6:	4b21      	ldr	r3, [pc, #132]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007cf8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8007cfc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007d04:	4b1d      	ldr	r3, [pc, #116]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8007d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8007d10:	4b1a      	ldr	r3, [pc, #104]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d12:	220c      	movs	r2, #12
 8007d14:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d16:	4b19      	ldr	r3, [pc, #100]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007d1c:	4b17      	ldr	r3, [pc, #92]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007d22:	4b16      	ldr	r3, [pc, #88]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007d28:	4b14      	ldr	r3, [pc, #80]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8007d2e:	4b13      	ldr	r3, [pc, #76]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8007d34:	4811      	ldr	r0, [pc, #68]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d36:	f008 fe35 	bl	80109a4 <HAL_UART_Init>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8007d40:	f7fb f98c 	bl	800305c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007d44:	2100      	movs	r1, #0
 8007d46:	480d      	ldr	r0, [pc, #52]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d48:	f00a fac8 	bl	80122dc <HAL_UARTEx_SetTxFifoThreshold>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007d52:	f7fb f983 	bl	800305c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007d56:	2100      	movs	r1, #0
 8007d58:	4808      	ldr	r0, [pc, #32]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d5a:	f00a fafd 	bl	8012358 <HAL_UARTEx_SetRxFifoThreshold>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007d64:	f7fb f97a 	bl	800305c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007d68:	4804      	ldr	r0, [pc, #16]	@ (8007d7c <MX_LPUART1_UART_Init+0x90>)
 8007d6a:	f00a fa7e 	bl	801226a <HAL_UARTEx_DisableFifoMode>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007d74:	f7fb f972 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007d78:	bf00      	nop
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	200013b0 	.word	0x200013b0
 8007d80:	40008000 	.word	0x40008000

08007d84 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007d88:	4b22      	ldr	r3, [pc, #136]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007d8a:	4a23      	ldr	r2, [pc, #140]	@ (8007e18 <MX_USART1_UART_Init+0x94>)
 8007d8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007d8e:	4b21      	ldr	r3, [pc, #132]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007d90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007d94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d96:	4b1f      	ldr	r3, [pc, #124]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007da2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007da8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007daa:	220c      	movs	r2, #12
 8007dac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007dae:	4b19      	ldr	r3, [pc, #100]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007db4:	4b17      	ldr	r3, [pc, #92]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007dba:	4b16      	ldr	r3, [pc, #88]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007dc0:	4b14      	ldr	r3, [pc, #80]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007dc6:	4b13      	ldr	r3, [pc, #76]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007dcc:	4811      	ldr	r0, [pc, #68]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007dce:	f008 fde9 	bl	80109a4 <HAL_UART_Init>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007dd8:	f7fb f940 	bl	800305c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ddc:	2100      	movs	r1, #0
 8007dde:	480d      	ldr	r0, [pc, #52]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007de0:	f00a fa7c 	bl	80122dc <HAL_UARTEx_SetTxFifoThreshold>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007dea:	f7fb f937 	bl	800305c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007dee:	2100      	movs	r1, #0
 8007df0:	4808      	ldr	r0, [pc, #32]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007df2:	f00a fab1 	bl	8012358 <HAL_UARTEx_SetRxFifoThreshold>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007dfc:	f7fb f92e 	bl	800305c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007e00:	4804      	ldr	r0, [pc, #16]	@ (8007e14 <MX_USART1_UART_Init+0x90>)
 8007e02:	f00a fa32 	bl	801226a <HAL_UARTEx_DisableFifoMode>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007e0c:	f7fb f926 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007e10:	bf00      	nop
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20001444 	.word	0x20001444
 8007e18:	40013800 	.word	0x40013800

08007e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b09c      	sub	sp, #112	@ 0x70
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e24:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	605a      	str	r2, [r3, #4]
 8007e2e:	609a      	str	r2, [r3, #8]
 8007e30:	60da      	str	r2, [r3, #12]
 8007e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	2250      	movs	r2, #80	@ 0x50
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f014 fd58 	bl	801c8f2 <memset>
  if(uartHandle->Instance==LPUART1)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a46      	ldr	r2, [pc, #280]	@ (8007f60 <HAL_UART_MspInit+0x144>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d158      	bne.n	8007efe <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8007e50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e56:	f107 030c 	add.w	r3, r7, #12
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f006 fa3b 	bl	800e2d6 <HAL_RCCEx_PeriphCLKConfig>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007e66:	f7fb f8f9 	bl	800305c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	f7ff fee5 	bl	8007c3a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e70:	2001      	movs	r0, #1
 8007e72:	f7ff fec9 	bl	8007c08 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007e76:	230c      	movs	r3, #12
 8007e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e82:	2300      	movs	r3, #0
 8007e84:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8007e86:	2308      	movs	r3, #8
 8007e88:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e8a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007e8e:	4619      	mov	r1, r3
 8007e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e94:	f002 f824 	bl	8009ee0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8007e98:	4b32      	ldr	r3, [pc, #200]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007e9a:	4a33      	ldr	r2, [pc, #204]	@ (8007f68 <HAL_UART_MspInit+0x14c>)
 8007e9c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007e9e:	4b31      	ldr	r3, [pc, #196]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007eb2:	2280      	movs	r2, #128	@ 0x80
 8007eb4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ebc:	4b29      	ldr	r3, [pc, #164]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8007ec2:	4b28      	ldr	r3, [pc, #160]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007ec8:	4b26      	ldr	r3, [pc, #152]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007ece:	4825      	ldr	r0, [pc, #148]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007ed0:	f001 fc32 	bl	8009738 <HAL_DMA_Init>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8007eda:	f7fb f8bf 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a20      	ldr	r2, [pc, #128]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007ee2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f64 <HAL_UART_MspInit+0x148>)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8007eec:	2200      	movs	r2, #0
 8007eee:	2100      	movs	r1, #0
 8007ef0:	2025      	movs	r0, #37	@ 0x25
 8007ef2:	f001 fbc2 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8007ef6:	2025      	movs	r0, #37	@ 0x25
 8007ef8:	f001 fbd9 	bl	80096ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007efc:	e02b      	b.n	8007f56 <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART1)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1a      	ldr	r2, [pc, #104]	@ (8007f6c <HAL_UART_MspInit+0x150>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d126      	bne.n	8007f56 <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f10:	f107 030c 	add.w	r3, r7, #12
 8007f14:	4618      	mov	r0, r3
 8007f16:	f006 f9de 	bl	800e2d6 <HAL_RCCEx_PeriphCLKConfig>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8007f20:	f7fb f89c 	bl	800305c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f24:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007f28:	f7ff feb3 	bl	8007c92 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	f7ff fe6b 	bl	8007c08 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007f32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f40:	2300      	movs	r3, #0
 8007f42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007f44:	2307      	movs	r3, #7
 8007f46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007f52:	f001 ffc5 	bl	8009ee0 <HAL_GPIO_Init>
}
 8007f56:	bf00      	nop
 8007f58:	3770      	adds	r7, #112	@ 0x70
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	40008000 	.word	0x40008000
 8007f64:	200014d8 	.word	0x200014d8
 8007f68:	4002001c 	.word	0x4002001c
 8007f6c:	40013800 	.word	0x40013800

08007f70 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a13      	ldr	r2, [pc, #76]	@ (8007fcc <HAL_UART_MspDeInit+0x5c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d111      	bne.n	8007fa6 <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8007f82:	2001      	movs	r0, #1
 8007f84:	f7ff fe72 	bl	8007c6c <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8007f88:	210c      	movs	r1, #12
 8007f8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007f8e:	f002 f917 	bl	800a1c0 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 fc75 	bl	8009888 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8007f9e:	2025      	movs	r0, #37	@ 0x25
 8007fa0:	f001 fb93 	bl	80096ca <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8007fa4:	e00e      	b.n	8007fc4 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART1)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a09      	ldr	r2, [pc, #36]	@ (8007fd0 <HAL_UART_MspDeInit+0x60>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d109      	bne.n	8007fc4 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART1_CLK_DISABLE();
 8007fb0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007fb4:	f7ff fe86 	bl	8007cc4 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8007fb8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007fc0:	f002 f8fe 	bl	800a1c0 <HAL_GPIO_DeInit>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	40008000 	.word	0x40008000
 8007fd0:	40013800 	.word	0x40013800

08007fd4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8007fdc:	4b30      	ldr	r3, [pc, #192]	@ (80080a0 <HAL_UART_RxCpltCallback+0xcc>)
 8007fde:	881a      	ldrh	r2, [r3, #0]
 8007fe0:	4b30      	ldr	r3, [pc, #192]	@ (80080a4 <HAL_UART_RxCpltCallback+0xd0>)
 8007fe2:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8007fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80080a4 <HAL_UART_RxCpltCallback+0xd0>)
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8007fec:	d922      	bls.n	8008034 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8007fee:	4b2d      	ldr	r3, [pc, #180]	@ (80080a4 <HAL_UART_RxCpltCallback+0xd0>)
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007ff6:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8007ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80080a4 <HAL_UART_RxCpltCallback+0xd0>)
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80080a8 <HAL_UART_RxCpltCallback+0xd4>)
 8008000:	4413      	add	r3, r2
 8008002:	89fa      	ldrh	r2, [r7, #14]
 8008004:	4929      	ldr	r1, [pc, #164]	@ (80080ac <HAL_UART_RxCpltCallback+0xd8>)
 8008006:	4618      	mov	r0, r3
 8008008:	f014 fd8f 	bl	801cb2a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 800800c:	4b25      	ldr	r3, [pc, #148]	@ (80080a4 <HAL_UART_RxCpltCallback+0xd0>)
 800800e:	2200      	movs	r2, #0
 8008010:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8008012:	89fb      	ldrh	r3, [r7, #14]
 8008014:	4a25      	ldr	r2, [pc, #148]	@ (80080ac <HAL_UART_RxCpltCallback+0xd8>)
 8008016:	1899      	adds	r1, r3, r2
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800801e:	461a      	mov	r2, r3
 8008020:	4821      	ldr	r0, [pc, #132]	@ (80080a8 <HAL_UART_RxCpltCallback+0xd4>)
 8008022:	f014 fd82 	bl	801cb2a <memcpy>
				newPos = (64-datatocopy);  // update the position
 8008026:	89fb      	ldrh	r3, [r7, #14]
 8008028:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800802c:	b29a      	uxth	r2, r3
 800802e:	4b1c      	ldr	r3, [pc, #112]	@ (80080a0 <HAL_UART_RxCpltCallback+0xcc>)
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e01e      	b.n	8008072 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8008034:	4b1b      	ldr	r3, [pc, #108]	@ (80080a4 <HAL_UART_RxCpltCallback+0xd0>)
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	4b1b      	ldr	r3, [pc, #108]	@ (80080a8 <HAL_UART_RxCpltCallback+0xd4>)
 800803c:	441a      	add	r2, r3
 800803e:	4b1b      	ldr	r3, [pc, #108]	@ (80080ac <HAL_UART_RxCpltCallback+0xd8>)
 8008040:	4610      	mov	r0, r2
 8008042:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8008046:	4602      	mov	r2, r0
 8008048:	4619      	mov	r1, r3
 800804a:	f8d1 c000 	ldr.w	ip, [r1]
 800804e:	684e      	ldr	r6, [r1, #4]
 8008050:	688d      	ldr	r5, [r1, #8]
 8008052:	68c9      	ldr	r1, [r1, #12]
 8008054:	f8c2 c000 	str.w	ip, [r2]
 8008058:	6056      	str	r6, [r2, #4]
 800805a:	6095      	str	r5, [r2, #8]
 800805c:	60d1      	str	r1, [r2, #12]
 800805e:	3310      	adds	r3, #16
 8008060:	3010      	adds	r0, #16
 8008062:	42a3      	cmp	r3, r4
 8008064:	d1ef      	bne.n	8008046 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8008066:	4b0f      	ldr	r3, [pc, #60]	@ (80080a4 <HAL_UART_RxCpltCallback+0xd0>)
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	3340      	adds	r3, #64	@ 0x40
 800806c:	b29a      	uxth	r2, r3
 800806e:	4b0c      	ldr	r3, [pc, #48]	@ (80080a0 <HAL_UART_RxCpltCallback+0xcc>)
 8008070:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8008072:	2240      	movs	r2, #64	@ 0x40
 8008074:	490d      	ldr	r1, [pc, #52]	@ (80080ac <HAL_UART_RxCpltCallback+0xd8>)
 8008076:	480e      	ldr	r0, [pc, #56]	@ (80080b0 <HAL_UART_RxCpltCallback+0xdc>)
 8008078:	f008 fdb2 	bl	8010be0 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 800807c:	4b0d      	ldr	r3, [pc, #52]	@ (80080b4 <HAL_UART_RxCpltCallback+0xe0>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <HAL_UART_RxCpltCallback+0xe0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0204 	bic.w	r2, r2, #4
 800808a:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 800808c:	2240      	movs	r2, #64	@ 0x40
 800808e:	4907      	ldr	r1, [pc, #28]	@ (80080ac <HAL_UART_RxCpltCallback+0xd8>)
 8008090:	4807      	ldr	r0, [pc, #28]	@ (80080b0 <HAL_UART_RxCpltCallback+0xdc>)
 8008092:	f008 fda5 	bl	8010be0 <HAL_UART_Receive_DMA>
}
 8008096:	bf00      	nop
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800809e:	bf00      	nop
 80080a0:	200005f4 	.word	0x200005f4
 80080a4:	200005f2 	.word	0x200005f2
 80080a8:	20000638 	.word	0x20000638
 80080ac:	200005f8 	.word	0x200005f8
 80080b0:	200013b0 	.word	0x200013b0
 80080b4:	200014d8 	.word	0x200014d8

080080b8 <getgpu>:
uint8_t usbnumbuf2[10];




void getgpu(uint8_t * usbbuffer){
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	usbbuffer[64]='$';
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3340      	adds	r3, #64	@ 0x40
 80080c4:	2224      	movs	r2, #36	@ 0x24
 80080c6:	701a      	strb	r2, [r3, #0]
	memset(usbnumbuf1,'$',10);
 80080c8:	220a      	movs	r2, #10
 80080ca:	2124      	movs	r1, #36	@ 0x24
 80080cc:	4823      	ldr	r0, [pc, #140]	@ (800815c <getgpu+0xa4>)
 80080ce:	f014 fc10 	bl	801c8f2 <memset>
	memset(usbnumbuf2,'$',10);
 80080d2:	220a      	movs	r2, #10
 80080d4:	2124      	movs	r1, #36	@ 0x24
 80080d6:	4822      	ldr	r0, [pc, #136]	@ (8008160 <getgpu+0xa8>)
 80080d8:	f014 fc0b 	bl	801c8f2 <memset>


	int cnt=0;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
	while(usbbuffer[cnt]!='$'){
 80080e0:	e00b      	b.n	80080fa <getgpu+0x42>

		usbnumbuf1[cnt]=usbbuffer[cnt];
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	4413      	add	r3, r2
 80080e8:	7819      	ldrb	r1, [r3, #0]
 80080ea:	4a1c      	ldr	r2, [pc, #112]	@ (800815c <getgpu+0xa4>)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	460a      	mov	r2, r1
 80080f2:	701a      	strb	r2, [r3, #0]
				  cnt++;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3301      	adds	r3, #1
 80080f8:	60fb      	str	r3, [r7, #12]
	while(usbbuffer[cnt]!='$'){
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	4413      	add	r3, r2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b24      	cmp	r3, #36	@ 0x24
 8008104:	d1ed      	bne.n	80080e2 <getgpu+0x2a>
			  }
			  cnt++;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3301      	adds	r3, #1
 800810a:	60fb      	str	r3, [r7, #12]
			  int cnt1=0;
 800810c:	2300      	movs	r3, #0
 800810e:	60bb      	str	r3, [r7, #8]
			  while(usbbuffer[cnt]!='$'){
 8008110:	e00e      	b.n	8008130 <getgpu+0x78>

			  		  usbnumbuf2[cnt1]=usbbuffer[cnt];
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4413      	add	r3, r2
 8008118:	7819      	ldrb	r1, [r3, #0]
 800811a:	4a11      	ldr	r2, [pc, #68]	@ (8008160 <getgpu+0xa8>)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4413      	add	r3, r2
 8008120:	460a      	mov	r2, r1
 8008122:	701a      	strb	r2, [r3, #0]
			  		  cnt1++;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	3301      	adds	r3, #1
 8008128:	60bb      	str	r3, [r7, #8]
			  		  cnt++;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3301      	adds	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
			  while(usbbuffer[cnt]!='$'){
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4413      	add	r3, r2
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b24      	cmp	r3, #36	@ 0x24
 800813a:	d1ea      	bne.n	8008112 <getgpu+0x5a>
			  	  }

	gputemp=atoi((uint8_t *)usbnumbuf1);
 800813c:	4807      	ldr	r0, [pc, #28]	@ (800815c <getgpu+0xa4>)
 800813e:	f012 fc5f 	bl	801aa00 <atoi>
 8008142:	4603      	mov	r3, r0
 8008144:	4a07      	ldr	r2, [pc, #28]	@ (8008164 <getgpu+0xac>)
 8008146:	6013      	str	r3, [r2, #0]
	gpupower=atoi((uint8_t *)usbnumbuf2);
 8008148:	4805      	ldr	r0, [pc, #20]	@ (8008160 <getgpu+0xa8>)
 800814a:	f012 fc59 	bl	801aa00 <atoi>
 800814e:	4603      	mov	r3, r0
 8008150:	4a05      	ldr	r2, [pc, #20]	@ (8008168 <getgpu+0xb0>)
 8008152:	6013      	str	r3, [r2, #0]


}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	20001538 	.word	0x20001538
 8008160:	20001544 	.word	0x20001544
 8008164:	20001284 	.word	0x20001284
 8008168:	20001288 	.word	0x20001288

0800816c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800816c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800816e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008170:	3304      	adds	r3, #4

08008172 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008172:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008174:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8008176:	d3f9      	bcc.n	800816c <CopyDataInit>
  bx lr
 8008178:	4770      	bx	lr

0800817a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800817a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800817c:	3004      	adds	r0, #4

0800817e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800817e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8008180:	d3fb      	bcc.n	800817a <FillZerobss>
  bx lr
 8008182:	4770      	bx	lr

08008184 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008184:	480c      	ldr	r0, [pc, #48]	@ (80081b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008186:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008188:	f7ff fa5c 	bl	8007644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800818c:	480b      	ldr	r0, [pc, #44]	@ (80081bc <LoopForever+0x6>)
 800818e:	490c      	ldr	r1, [pc, #48]	@ (80081c0 <LoopForever+0xa>)
 8008190:	4a0c      	ldr	r2, [pc, #48]	@ (80081c4 <LoopForever+0xe>)
 8008192:	2300      	movs	r3, #0
 8008194:	f7ff ffed 	bl	8008172 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008198:	480b      	ldr	r0, [pc, #44]	@ (80081c8 <LoopForever+0x12>)
 800819a:	490c      	ldr	r1, [pc, #48]	@ (80081cc <LoopForever+0x16>)
 800819c:	4a0c      	ldr	r2, [pc, #48]	@ (80081d0 <LoopForever+0x1a>)
 800819e:	2300      	movs	r3, #0
 80081a0:	f7ff ffe7 	bl	8008172 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80081a4:	480b      	ldr	r0, [pc, #44]	@ (80081d4 <LoopForever+0x1e>)
 80081a6:	490c      	ldr	r1, [pc, #48]	@ (80081d8 <LoopForever+0x22>)
 80081a8:	2300      	movs	r3, #0
 80081aa:	f7ff ffe8 	bl	800817e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80081ae:	f014 fc8d 	bl	801cacc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80081b2:	f7fa fe0b 	bl	8002dcc <main>

080081b6 <LoopForever>:

LoopForever:
  b LoopForever
 80081b6:	e7fe      	b.n	80081b6 <LoopForever>
  ldr   r0, =_estack
 80081b8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80081bc:	20000008 	.word	0x20000008
 80081c0:	20000320 	.word	0x20000320
 80081c4:	080238e8 	.word	0x080238e8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80081c8:	200301e4 	.word	0x200301e4
 80081cc:	20030a67 	.word	0x20030a67
 80081d0:	08023c46 	.word	0x08023c46
  INIT_BSS _sbss, _ebss
 80081d4:	20000370 	.word	0x20000370
 80081d8:	20003228 	.word	0x20003228

080081dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80081dc:	e7fe      	b.n	80081dc <ADC1_IRQHandler>
	...

080081e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80081ea:	4b0c      	ldr	r3, [pc, #48]	@ (800821c <HAL_Init+0x3c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a0b      	ldr	r2, [pc, #44]	@ (800821c <HAL_Init+0x3c>)
 80081f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80081f6:	2003      	movs	r0, #3
 80081f8:	f001 fa34 	bl	8009664 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80081fc:	200f      	movs	r0, #15
 80081fe:	f000 f80f 	bl	8008220 <HAL_InitTick>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	71fb      	strb	r3, [r7, #7]
 800820c:	e001      	b.n	8008212 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800820e:	f7ff f836 	bl	800727e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008212:	79fb      	ldrb	r3, [r7, #7]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	58004000 	.word	0x58004000

08008220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800822c:	4b17      	ldr	r3, [pc, #92]	@ (800828c <HAL_InitTick+0x6c>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d024      	beq.n	800827e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008234:	f005 fdbe 	bl	800ddb4 <HAL_RCC_GetHCLKFreq>
 8008238:	4602      	mov	r2, r0
 800823a:	4b14      	ldr	r3, [pc, #80]	@ (800828c <HAL_InitTick+0x6c>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	4619      	mov	r1, r3
 8008240:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008244:	fbb3 f3f1 	udiv	r3, r3, r1
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	4618      	mov	r0, r3
 800824e:	f001 fa4a 	bl	80096e6 <HAL_SYSTICK_Config>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10f      	bne.n	8008278 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b0f      	cmp	r3, #15
 800825c:	d809      	bhi.n	8008272 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800825e:	2200      	movs	r2, #0
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	f04f 30ff 	mov.w	r0, #4294967295
 8008266:	f001 fa08 	bl	800967a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800826a:	4a09      	ldr	r2, [pc, #36]	@ (8008290 <HAL_InitTick+0x70>)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	e007      	b.n	8008282 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]
 8008276:	e004      	b.n	8008282 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
 800827c:	e001      	b.n	8008282 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	20000034 	.word	0x20000034
 8008290:	20000030 	.word	0x20000030

08008294 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008298:	4b06      	ldr	r3, [pc, #24]	@ (80082b4 <HAL_IncTick+0x20>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <HAL_IncTick+0x24>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4413      	add	r3, r2
 80082a4:	4a04      	ldr	r2, [pc, #16]	@ (80082b8 <HAL_IncTick+0x24>)
 80082a6:	6013      	str	r3, [r2, #0]
}
 80082a8:	bf00      	nop
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20000034 	.word	0x20000034
 80082b8:	20001550 	.word	0x20001550

080082bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
  return uwTick;
 80082c0:	4b03      	ldr	r3, [pc, #12]	@ (80082d0 <HAL_GetTick+0x14>)
 80082c2:	681b      	ldr	r3, [r3, #0]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	20001550 	.word	0x20001550

080082d4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80082d8:	4b03      	ldr	r3, [pc, #12]	@ (80082e8 <HAL_GetTickPrio+0x14>)
 80082da:	681b      	ldr	r3, [r3, #0]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20000030 	.word	0x20000030

080082ec <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80082f0:	4b03      	ldr	r3, [pc, #12]	@ (8008300 <HAL_GetTickFreq+0x14>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	20000034 	.word	0x20000034

08008304 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	609a      	str	r2, [r3, #8]
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3360      	adds	r3, #96	@ 0x60
 800837e:	461a      	mov	r2, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	4b08      	ldr	r3, [pc, #32]	@ (80083b0 <LL_ADC_SetOffset+0x44>)
 800838e:	4013      	ands	r3, r2
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	4313      	orrs	r3, r2
 800839c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	03fff000 	.word	0x03fff000

080083b4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3360      	adds	r3, #96	@ 0x60
 80083c2:	461a      	mov	r2, r3
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3360      	adds	r3, #96	@ 0x60
 80083f0:	461a      	mov	r2, r3
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	431a      	orrs	r2, r3
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800842e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3330      	adds	r3, #48	@ 0x30
 800844c:	461a      	mov	r2, r3
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	0a1b      	lsrs	r3, r3, #8
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	f003 030c 	and.w	r3, r3, #12
 8008458:	4413      	add	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f003 031f 	and.w	r3, r3, #31
 8008466:	211f      	movs	r1, #31
 8008468:	fa01 f303 	lsl.w	r3, r1, r3
 800846c:	43db      	mvns	r3, r3
 800846e:	401a      	ands	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	0e9b      	lsrs	r3, r3, #26
 8008474:	f003 011f 	and.w	r1, r3, #31
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f003 031f 	and.w	r3, r3, #31
 800847e:	fa01 f303 	lsl.w	r3, r1, r3
 8008482:	431a      	orrs	r2, r3
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008488:	bf00      	nop
 800848a:	371c      	adds	r7, #28
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3314      	adds	r3, #20
 80084a4:	461a      	mov	r2, r3
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	0e5b      	lsrs	r3, r3, #25
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	4413      	add	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	0d1b      	lsrs	r3, r3, #20
 80084bc:	f003 031f 	and.w	r3, r3, #31
 80084c0:	2107      	movs	r1, #7
 80084c2:	fa01 f303 	lsl.w	r3, r1, r3
 80084c6:	43db      	mvns	r3, r3
 80084c8:	401a      	ands	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	0d1b      	lsrs	r3, r3, #20
 80084ce:	f003 031f 	and.w	r3, r3, #31
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	fa01 f303 	lsl.w	r3, r1, r3
 80084d8:	431a      	orrs	r2, r3
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80084de:	bf00      	nop
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
	...

080084ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008504:	43db      	mvns	r3, r3
 8008506:	401a      	ands	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f003 0318 	and.w	r3, r3, #24
 800850e:	4908      	ldr	r1, [pc, #32]	@ (8008530 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008510:	40d9      	lsrs	r1, r3
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	400b      	ands	r3, r1
 8008516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800851a:	431a      	orrs	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	0007ffff 	.word	0x0007ffff

08008534 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008544:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6093      	str	r3, [r2, #8]
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800856c:	d101      	bne.n	8008572 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800856e:	2301      	movs	r3, #1
 8008570:	e000      	b.n	8008574 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8008590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008594:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085bc:	d101      	bne.n	80085c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80085e4:	f043 0201 	orr.w	r2, r3, #1
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b01      	cmp	r3, #1
 800860a:	d101      	bne.n	8008610 <LL_ADC_IsEnabled+0x18>
 800860c:	2301      	movs	r3, #1
 800860e:	e000      	b.n	8008612 <LL_ADC_IsEnabled+0x1a>
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800862e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008632:	f043 0204 	orr.w	r2, r3, #4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 0304 	and.w	r3, r3, #4
 8008656:	2b04      	cmp	r3, #4
 8008658:	d101      	bne.n	800865e <LL_ADC_REG_IsConversionOngoing+0x18>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f003 0308 	and.w	r3, r3, #8
 800867c:	2b08      	cmp	r3, #8
 800867e:	d101      	bne.n	8008684 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008680:	2301      	movs	r3, #1
 8008682:	e000      	b.n	8008686 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
	...

08008694 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e12e      	b.n	8008910 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7f8 fedd 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff ff3d 	bl	8008558 <LL_ADC_IsDeepPowerDownEnabled>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff ff23 	bl	8008534 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff ff58 	bl	80085a8 <LL_ADC_IsInternalRegulatorEnabled>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d115      	bne.n	800872a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff ff3c 	bl	8008580 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008708:	4b83      	ldr	r3, [pc, #524]	@ (8008918 <HAL_ADC_Init+0x284>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	099b      	lsrs	r3, r3, #6
 800870e:	4a83      	ldr	r2, [pc, #524]	@ (800891c <HAL_ADC_Init+0x288>)
 8008710:	fba2 2303 	umull	r2, r3, r2, r3
 8008714:	099b      	lsrs	r3, r3, #6
 8008716:	3301      	adds	r3, #1
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800871c:	e002      	b.n	8008724 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	3b01      	subs	r3, #1
 8008722:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1f9      	bne.n	800871e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff ff3a 	bl	80085a8 <LL_ADC_IsInternalRegulatorEnabled>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10d      	bne.n	8008756 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873e:	f043 0210 	orr.w	r2, r3, #16
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800874a:	f043 0201 	orr.w	r2, r3, #1
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff ff73 	bl	8008646 <LL_ADC_REG_IsConversionOngoing>
 8008760:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008766:	f003 0310 	and.w	r3, r3, #16
 800876a:	2b00      	cmp	r3, #0
 800876c:	f040 80c7 	bne.w	80088fe <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	f040 80c3 	bne.w	80088fe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008780:	f043 0202 	orr.w	r2, r3, #2
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	f7ff ff33 	bl	80085f8 <LL_ADC_IsEnabled>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10b      	bne.n	80087b0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008798:	4861      	ldr	r0, [pc, #388]	@ (8008920 <HAL_ADC_Init+0x28c>)
 800879a:	f7ff ff2d 	bl	80085f8 <LL_ADC_IsEnabled>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	4619      	mov	r1, r3
 80087aa:	485e      	ldr	r0, [pc, #376]	@ (8008924 <HAL_ADC_Init+0x290>)
 80087ac:	f7ff fdaa 	bl	8008304 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7e5b      	ldrb	r3, [r3, #25]
 80087b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80087ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80087c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80087c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087ce:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80087d0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d106      	bne.n	80087f0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e6:	3b01      	subs	r3, #1
 80087e8:	045b      	lsls	r3, r3, #17
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d009      	beq.n	800880c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008804:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	4313      	orrs	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	4b45      	ldr	r3, [pc, #276]	@ (8008928 <HAL_ADC_Init+0x294>)
 8008814:	4013      	ands	r3, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	69b9      	ldr	r1, [r7, #24]
 800881c:	430b      	orrs	r3, r1
 800881e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff ff0e 	bl	8008646 <LL_ADC_REG_IsConversionOngoing>
 800882a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff ff1b 	bl	800866c <LL_ADC_INJ_IsConversionOngoing>
 8008836:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d13d      	bne.n	80088ba <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d13a      	bne.n	80088ba <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008848:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008850:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008852:	4313      	orrs	r3, r2
 8008854:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008860:	f023 0302 	bic.w	r3, r3, #2
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	6812      	ldr	r2, [r2, #0]
 8008868:	69b9      	ldr	r1, [r7, #24]
 800886a:	430b      	orrs	r3, r1
 800886c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008874:	2b01      	cmp	r3, #1
 8008876:	d118      	bne.n	80088aa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008882:	f023 0304 	bic.w	r3, r3, #4
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800888e:	4311      	orrs	r1, r2
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008894:	4311      	orrs	r1, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800889a:	430a      	orrs	r2, r1
 800889c:	431a      	orrs	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0201 	orr.w	r2, r2, #1
 80088a6:	611a      	str	r2, [r3, #16]
 80088a8:	e007      	b.n	80088ba <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	691a      	ldr	r2, [r3, #16]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0201 	bic.w	r2, r2, #1
 80088b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d10c      	bne.n	80088dc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c8:	f023 010f 	bic.w	r1, r3, #15
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	1e5a      	subs	r2, r3, #1
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80088da:	e007      	b.n	80088ec <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 020f 	bic.w	r2, r2, #15
 80088ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088f0:	f023 0303 	bic.w	r3, r3, #3
 80088f4:	f043 0201 	orr.w	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80088fc:	e007      	b.n	800890e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008902:	f043 0210 	orr.w	r2, r3, #16
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800890e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	2000002c 	.word	0x2000002c
 800891c:	053e2d63 	.word	0x053e2d63
 8008920:	50040000 	.word	0x50040000
 8008924:	50040300 	.word	0x50040300
 8008928:	fff0c007 	.word	0xfff0c007

0800892c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff fe82 	bl	8008646 <LL_ADC_REG_IsConversionOngoing>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d167      	bne.n	8008a18 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <HAL_ADC_Start_DMA+0x2a>
 8008952:	2302      	movs	r3, #2
 8008954:	e063      	b.n	8008a1e <HAL_ADC_Start_DMA+0xf2>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fc42 	bl	80091e8 <ADC_Enable>
 8008964:	4603      	mov	r3, r0
 8008966:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d14f      	bne.n	8008a0e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008972:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008976:	f023 0301 	bic.w	r3, r3, #1
 800897a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d006      	beq.n	800899c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008992:	f023 0206 	bic.w	r2, r3, #6
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	659a      	str	r2, [r3, #88]	@ 0x58
 800899a:	e002      	b.n	80089a2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089a6:	4a20      	ldr	r2, [pc, #128]	@ (8008a28 <HAL_ADC_Start_DMA+0xfc>)
 80089a8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089ae:	4a1f      	ldr	r2, [pc, #124]	@ (8008a2c <HAL_ADC_Start_DMA+0x100>)
 80089b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008a30 <HAL_ADC_Start_DMA+0x104>)
 80089b8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	221c      	movs	r2, #28
 80089c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0210 	orr.w	r2, r2, #16
 80089d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0201 	orr.w	r2, r2, #1
 80089e8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3340      	adds	r3, #64	@ 0x40
 80089f4:	4619      	mov	r1, r3
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f000 ffdb 	bl	80099b4 <HAL_DMA_Start_IT>
 80089fe:	4603      	mov	r3, r0
 8008a00:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff fe09 	bl	800861e <LL_ADC_REG_StartConversion>
 8008a0c:	e006      	b.n	8008a1c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8008a16:	e001      	b.n	8008a1c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008a18:	2302      	movs	r3, #2
 8008a1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	080092dd 	.word	0x080092dd
 8008a2c:	080093b5 	.word	0x080093b5
 8008a30:	080093d1 	.word	0x080093d1

08008a34 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b0b6      	sub	sp, #216	@ 0xd8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d101      	bne.n	8008a7e <HAL_ADC_ConfigChannel+0x22>
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	e39f      	b.n	80091be <HAL_ADC_ConfigChannel+0x762>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fddb 	bl	8008646 <LL_ADC_REG_IsConversionOngoing>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f040 8384 	bne.w	80091a0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	6859      	ldr	r1, [r3, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f7ff fcc9 	bl	800843c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff fdc9 	bl	8008646 <LL_ADC_REG_IsConversionOngoing>
 8008ab4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff fdd5 	bl	800866c <LL_ADC_INJ_IsConversionOngoing>
 8008ac2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008ac6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f040 81a6 	bne.w	8008e1c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008ad0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f040 81a1 	bne.w	8008e1c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6819      	ldr	r1, [r3, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f7ff fcd4 	bl	8008494 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	695a      	ldr	r2, [r3, #20]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	08db      	lsrs	r3, r3, #3
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	fa02 f303 	lsl.w	r3, r2, r3
 8008b02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	d00a      	beq.n	8008b24 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	6919      	ldr	r1, [r3, #16]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b1e:	f7ff fc25 	bl	800836c <LL_ADC_SetOffset>
 8008b22:	e17b      	b.n	8008e1c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff fc42 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <HAL_ADC_ConfigChannel+0xf4>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2100      	movs	r1, #0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff fc37 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008b46:	4603      	mov	r3, r0
 8008b48:	0e9b      	lsrs	r3, r3, #26
 8008b4a:	f003 021f 	and.w	r2, r3, #31
 8008b4e:	e01e      	b.n	8008b8e <HAL_ADC_ConfigChannel+0x132>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff fc2c 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b66:	fa93 f3a3 	rbit	r3, r3
 8008b6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8008b6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8008b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8008b7e:	2320      	movs	r3, #32
 8008b80:	e004      	b.n	8008b8c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8008b82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b86:	fab3 f383 	clz	r3, r3
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <HAL_ADC_ConfigChannel+0x14a>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	0e9b      	lsrs	r3, r3, #26
 8008ba0:	f003 031f 	and.w	r3, r3, #31
 8008ba4:	e018      	b.n	8008bd8 <HAL_ADC_ConfigChannel+0x17c>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008bb2:	fa93 f3a3 	rbit	r3, r3
 8008bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8008bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8008bc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8008bca:	2320      	movs	r3, #32
 8008bcc:	e004      	b.n	8008bd8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8008bce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008bd2:	fab3 f383 	clz	r3, r3
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d106      	bne.n	8008bea <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2200      	movs	r2, #0
 8008be2:	2100      	movs	r1, #0
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7ff fbfb 	bl	80083e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2101      	movs	r1, #1
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff fbdf 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <HAL_ADC_ConfigChannel+0x1ba>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2101      	movs	r1, #1
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff fbd4 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	0e9b      	lsrs	r3, r3, #26
 8008c10:	f003 021f 	and.w	r2, r3, #31
 8008c14:	e01e      	b.n	8008c54 <HAL_ADC_ConfigChannel+0x1f8>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff fbc9 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008c22:	4603      	mov	r3, r0
 8008c24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c2c:	fa93 f3a3 	rbit	r3, r3
 8008c30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8008c34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8008c3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8008c44:	2320      	movs	r3, #32
 8008c46:	e004      	b.n	8008c52 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8008c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c4c:	fab3 f383 	clz	r3, r3
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	461a      	mov	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d105      	bne.n	8008c6c <HAL_ADC_ConfigChannel+0x210>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	0e9b      	lsrs	r3, r3, #26
 8008c66:	f003 031f 	and.w	r3, r3, #31
 8008c6a:	e018      	b.n	8008c9e <HAL_ADC_ConfigChannel+0x242>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c78:	fa93 f3a3 	rbit	r3, r3
 8008c7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8008c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8008c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8008c90:	2320      	movs	r3, #32
 8008c92:	e004      	b.n	8008c9e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8008c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c98:	fab3 f383 	clz	r3, r3
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d106      	bne.n	8008cb0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2101      	movs	r1, #1
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff fb98 	bl	80083e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2102      	movs	r1, #2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fb7c 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10a      	bne.n	8008cdc <HAL_ADC_ConfigChannel+0x280>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2102      	movs	r1, #2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fb71 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	0e9b      	lsrs	r3, r3, #26
 8008cd6:	f003 021f 	and.w	r2, r3, #31
 8008cda:	e01e      	b.n	8008d1a <HAL_ADC_ConfigChannel+0x2be>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2102      	movs	r1, #2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff fb66 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cf2:	fa93 f3a3 	rbit	r3, r3
 8008cf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8008cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8008d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8008d0a:	2320      	movs	r3, #32
 8008d0c:	e004      	b.n	8008d18 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8008d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d12:	fab3 f383 	clz	r3, r3
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <HAL_ADC_ConfigChannel+0x2d6>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	0e9b      	lsrs	r3, r3, #26
 8008d2c:	f003 031f 	and.w	r3, r3, #31
 8008d30:	e016      	b.n	8008d60 <HAL_ADC_ConfigChannel+0x304>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008d3e:	fa93 f3a3 	rbit	r3, r3
 8008d42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8008d44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8008d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8008d52:	2320      	movs	r3, #32
 8008d54:	e004      	b.n	8008d60 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8008d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d5a:	fab3 f383 	clz	r3, r3
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d106      	bne.n	8008d72 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff fb37 	bl	80083e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2103      	movs	r1, #3
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7ff fb1b 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <HAL_ADC_ConfigChannel+0x342>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2103      	movs	r1, #3
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fb10 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008d94:	4603      	mov	r3, r0
 8008d96:	0e9b      	lsrs	r3, r3, #26
 8008d98:	f003 021f 	and.w	r2, r3, #31
 8008d9c:	e017      	b.n	8008dce <HAL_ADC_ConfigChannel+0x372>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2103      	movs	r1, #3
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff fb05 	bl	80083b4 <LL_ADC_GetOffsetChannel>
 8008daa:	4603      	mov	r3, r0
 8008dac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008db0:	fa93 f3a3 	rbit	r3, r3
 8008db4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8008db6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008db8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8008dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	e003      	b.n	8008dcc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8008dc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dc6:	fab3 f383 	clz	r3, r3
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d105      	bne.n	8008de6 <HAL_ADC_ConfigChannel+0x38a>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	0e9b      	lsrs	r3, r3, #26
 8008de0:	f003 031f 	and.w	r3, r3, #31
 8008de4:	e011      	b.n	8008e0a <HAL_ADC_ConfigChannel+0x3ae>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dee:	fa93 f3a3 	rbit	r3, r3
 8008df2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008df4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8008dfe:	2320      	movs	r3, #32
 8008e00:	e003      	b.n	8008e0a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8008e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e04:	fab3 f383 	clz	r3, r3
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d106      	bne.n	8008e1c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2200      	movs	r2, #0
 8008e14:	2103      	movs	r1, #3
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff fae2 	bl	80083e0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff fbe9 	bl	80085f8 <LL_ADC_IsEnabled>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f040 81c2 	bne.w	80091b2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	6819      	ldr	r1, [r3, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f7ff fb56 	bl	80084ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	4a8e      	ldr	r2, [pc, #568]	@ (8009080 <HAL_ADC_ConfigChannel+0x624>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	f040 8130 	bne.w	80090ac <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10b      	bne.n	8008e74 <HAL_ADC_ConfigChannel+0x418>
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	0e9b      	lsrs	r3, r3, #26
 8008e62:	3301      	adds	r3, #1
 8008e64:	f003 031f 	and.w	r3, r3, #31
 8008e68:	2b09      	cmp	r3, #9
 8008e6a:	bf94      	ite	ls
 8008e6c:	2301      	movls	r3, #1
 8008e6e:	2300      	movhi	r3, #0
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	e019      	b.n	8008ea8 <HAL_ADC_ConfigChannel+0x44c>
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e7c:	fa93 f3a3 	rbit	r3, r3
 8008e80:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8008e82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8008e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8008e8c:	2320      	movs	r3, #32
 8008e8e:	e003      	b.n	8008e98 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8008e90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e92:	fab3 f383 	clz	r3, r3
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	3301      	adds	r3, #1
 8008e9a:	f003 031f 	and.w	r3, r3, #31
 8008e9e:	2b09      	cmp	r3, #9
 8008ea0:	bf94      	ite	ls
 8008ea2:	2301      	movls	r3, #1
 8008ea4:	2300      	movhi	r3, #0
 8008ea6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d079      	beq.n	8008fa0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d107      	bne.n	8008ec8 <HAL_ADC_ConfigChannel+0x46c>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	0e9b      	lsrs	r3, r3, #26
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	069b      	lsls	r3, r3, #26
 8008ec2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008ec6:	e015      	b.n	8008ef4 <HAL_ADC_ConfigChannel+0x498>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ed0:	fa93 f3a3 	rbit	r3, r3
 8008ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8008ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ed8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	e003      	b.n	8008eec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ee6:	fab3 f383 	clz	r3, r3
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	3301      	adds	r3, #1
 8008eee:	069b      	lsls	r3, r3, #26
 8008ef0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <HAL_ADC_ConfigChannel+0x4b8>
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	0e9b      	lsrs	r3, r3, #26
 8008f06:	3301      	adds	r3, #1
 8008f08:	f003 031f 	and.w	r3, r3, #31
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f12:	e017      	b.n	8008f44 <HAL_ADC_ConfigChannel+0x4e8>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f1c:	fa93 f3a3 	rbit	r3, r3
 8008f20:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8008f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8008f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8008f2c:	2320      	movs	r3, #32
 8008f2e:	e003      	b.n	8008f38 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8008f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f32:	fab3 f383 	clz	r3, r3
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	3301      	adds	r3, #1
 8008f3a:	f003 031f 	and.w	r3, r3, #31
 8008f3e:	2101      	movs	r1, #1
 8008f40:	fa01 f303 	lsl.w	r3, r1, r3
 8008f44:	ea42 0103 	orr.w	r1, r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <HAL_ADC_ConfigChannel+0x50e>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	0e9b      	lsrs	r3, r3, #26
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	f003 021f 	and.w	r2, r3, #31
 8008f60:	4613      	mov	r3, r2
 8008f62:	005b      	lsls	r3, r3, #1
 8008f64:	4413      	add	r3, r2
 8008f66:	051b      	lsls	r3, r3, #20
 8008f68:	e018      	b.n	8008f9c <HAL_ADC_ConfigChannel+0x540>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f72:	fa93 f3a3 	rbit	r3, r3
 8008f76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8008f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8008f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d101      	bne.n	8008f86 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8008f82:	2320      	movs	r3, #32
 8008f84:	e003      	b.n	8008f8e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8008f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f88:	fab3 f383 	clz	r3, r3
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	3301      	adds	r3, #1
 8008f90:	f003 021f 	and.w	r2, r3, #31
 8008f94:	4613      	mov	r3, r2
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	4413      	add	r3, r2
 8008f9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	e080      	b.n	80090a2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d107      	bne.n	8008fbc <HAL_ADC_ConfigChannel+0x560>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	0e9b      	lsrs	r3, r3, #26
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	069b      	lsls	r3, r3, #26
 8008fb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008fba:	e015      	b.n	8008fe8 <HAL_ADC_ConfigChannel+0x58c>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc4:	fa93 f3a3 	rbit	r3, r3
 8008fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8008fd4:	2320      	movs	r3, #32
 8008fd6:	e003      	b.n	8008fe0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fda:	fab3 f383 	clz	r3, r3
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	069b      	lsls	r3, r3, #26
 8008fe4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d109      	bne.n	8009008 <HAL_ADC_ConfigChannel+0x5ac>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	0e9b      	lsrs	r3, r3, #26
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	f003 031f 	and.w	r3, r3, #31
 8009000:	2101      	movs	r1, #1
 8009002:	fa01 f303 	lsl.w	r3, r1, r3
 8009006:	e017      	b.n	8009038 <HAL_ADC_ConfigChannel+0x5dc>
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	fa93 f3a3 	rbit	r3, r3
 8009014:	61fb      	str	r3, [r7, #28]
  return result;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8009020:	2320      	movs	r3, #32
 8009022:	e003      	b.n	800902c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	fab3 f383 	clz	r3, r3
 800902a:	b2db      	uxtb	r3, r3
 800902c:	3301      	adds	r3, #1
 800902e:	f003 031f 	and.w	r3, r3, #31
 8009032:	2101      	movs	r1, #1
 8009034:	fa01 f303 	lsl.w	r3, r1, r3
 8009038:	ea42 0103 	orr.w	r1, r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10d      	bne.n	8009064 <HAL_ADC_ConfigChannel+0x608>
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	0e9b      	lsrs	r3, r3, #26
 800904e:	3301      	adds	r3, #1
 8009050:	f003 021f 	and.w	r2, r3, #31
 8009054:	4613      	mov	r3, r2
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	4413      	add	r3, r2
 800905a:	3b1e      	subs	r3, #30
 800905c:	051b      	lsls	r3, r3, #20
 800905e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009062:	e01d      	b.n	80090a0 <HAL_ADC_ConfigChannel+0x644>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	fa93 f3a3 	rbit	r3, r3
 8009070:	613b      	str	r3, [r7, #16]
  return result;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d103      	bne.n	8009084 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800907c:	2320      	movs	r3, #32
 800907e:	e005      	b.n	800908c <HAL_ADC_ConfigChannel+0x630>
 8009080:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	fab3 f383 	clz	r3, r3
 800908a:	b2db      	uxtb	r3, r3
 800908c:	3301      	adds	r3, #1
 800908e:	f003 021f 	and.w	r2, r3, #31
 8009092:	4613      	mov	r3, r2
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	4413      	add	r3, r2
 8009098:	3b1e      	subs	r3, #30
 800909a:	051b      	lsls	r3, r3, #20
 800909c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80090a0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80090a6:	4619      	mov	r1, r3
 80090a8:	f7ff f9f4 	bl	8008494 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	4b45      	ldr	r3, [pc, #276]	@ (80091c8 <HAL_ADC_ConfigChannel+0x76c>)
 80090b2:	4013      	ands	r3, r2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d07c      	beq.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80090b8:	4844      	ldr	r0, [pc, #272]	@ (80091cc <HAL_ADC_ConfigChannel+0x770>)
 80090ba:	f7ff f949 	bl	8008350 <LL_ADC_GetCommonPathInternalCh>
 80090be:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090c2:	4843      	ldr	r0, [pc, #268]	@ (80091d0 <HAL_ADC_ConfigChannel+0x774>)
 80090c4:	f7ff fa98 	bl	80085f8 <LL_ADC_IsEnabled>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d15e      	bne.n	800918c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a40      	ldr	r2, [pc, #256]	@ (80091d4 <HAL_ADC_ConfigChannel+0x778>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d127      	bne.n	8009128 <HAL_ADC_ConfigChannel+0x6cc>
 80090d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80090dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d121      	bne.n	8009128 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a39      	ldr	r2, [pc, #228]	@ (80091d0 <HAL_ADC_ConfigChannel+0x774>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d161      	bne.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80090ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80090f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090f6:	4619      	mov	r1, r3
 80090f8:	4834      	ldr	r0, [pc, #208]	@ (80091cc <HAL_ADC_ConfigChannel+0x770>)
 80090fa:	f7ff f916 	bl	800832a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80090fe:	4b36      	ldr	r3, [pc, #216]	@ (80091d8 <HAL_ADC_ConfigChannel+0x77c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	099b      	lsrs	r3, r3, #6
 8009104:	4a35      	ldr	r2, [pc, #212]	@ (80091dc <HAL_ADC_ConfigChannel+0x780>)
 8009106:	fba2 2303 	umull	r2, r3, r2, r3
 800910a:	099b      	lsrs	r3, r3, #6
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	4613      	mov	r3, r2
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8009118:	e002      	b.n	8009120 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3b01      	subs	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1f9      	bne.n	800911a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009126:	e044      	b.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a2c      	ldr	r2, [pc, #176]	@ (80091e0 <HAL_ADC_ConfigChannel+0x784>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d113      	bne.n	800915a <HAL_ADC_ConfigChannel+0x6fe>
 8009132:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009136:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10d      	bne.n	800915a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a23      	ldr	r2, [pc, #140]	@ (80091d0 <HAL_ADC_ConfigChannel+0x774>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d134      	bne.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800914c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009150:	4619      	mov	r1, r3
 8009152:	481e      	ldr	r0, [pc, #120]	@ (80091cc <HAL_ADC_ConfigChannel+0x770>)
 8009154:	f7ff f8e9 	bl	800832a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009158:	e02b      	b.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a21      	ldr	r2, [pc, #132]	@ (80091e4 <HAL_ADC_ConfigChannel+0x788>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d126      	bne.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
 8009164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d120      	bne.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a16      	ldr	r2, [pc, #88]	@ (80091d0 <HAL_ADC_ConfigChannel+0x774>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d11b      	bne.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800917a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800917e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009182:	4619      	mov	r1, r3
 8009184:	4811      	ldr	r0, [pc, #68]	@ (80091cc <HAL_ADC_ConfigChannel+0x770>)
 8009186:	f7ff f8d0 	bl	800832a <LL_ADC_SetCommonPathInternalCh>
 800918a:	e012      	b.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009190:	f043 0220 	orr.w	r2, r3, #32
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800919e:	e008      	b.n	80091b2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a4:	f043 0220 	orr.w	r2, r3, #32
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80091ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80091be:	4618      	mov	r0, r3
 80091c0:	37d8      	adds	r7, #216	@ 0xd8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	80080000 	.word	0x80080000
 80091cc:	50040300 	.word	0x50040300
 80091d0:	50040000 	.word	0x50040000
 80091d4:	c7520000 	.word	0xc7520000
 80091d8:	2000002c 	.word	0x2000002c
 80091dc:	053e2d63 	.word	0x053e2d63
 80091e0:	cb840000 	.word	0xcb840000
 80091e4:	80000001 	.word	0x80000001

080091e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff f9fd 	bl	80085f8 <LL_ADC_IsEnabled>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d15e      	bne.n	80092c2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689a      	ldr	r2, [r3, #8]
 800920a:	4b30      	ldr	r3, [pc, #192]	@ (80092cc <ADC_Enable+0xe4>)
 800920c:	4013      	ands	r3, r2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00d      	beq.n	800922e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009216:	f043 0210 	orr.w	r2, r3, #16
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009222:	f043 0201 	orr.w	r2, r3, #1
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e04a      	b.n	80092c4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4618      	mov	r0, r3
 8009234:	f7ff f9cc 	bl	80085d0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8009238:	4825      	ldr	r0, [pc, #148]	@ (80092d0 <ADC_Enable+0xe8>)
 800923a:	f7ff f889 	bl	8008350 <LL_ADC_GetCommonPathInternalCh>
 800923e:	4603      	mov	r3, r0
 8009240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00f      	beq.n	8009268 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009248:	4b22      	ldr	r3, [pc, #136]	@ (80092d4 <ADC_Enable+0xec>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	099b      	lsrs	r3, r3, #6
 800924e:	4a22      	ldr	r2, [pc, #136]	@ (80092d8 <ADC_Enable+0xf0>)
 8009250:	fba2 2303 	umull	r2, r3, r2, r3
 8009254:	099b      	lsrs	r3, r3, #6
 8009256:	3301      	adds	r3, #1
 8009258:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800925a:	e002      	b.n	8009262 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	3b01      	subs	r3, #1
 8009260:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1f9      	bne.n	800925c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8009268:	f7ff f828 	bl	80082bc <HAL_GetTick>
 800926c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800926e:	e021      	b.n	80092b4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff f9bf 	bl	80085f8 <LL_ADC_IsEnabled>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d104      	bne.n	800928a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff f9a3 	bl	80085d0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800928a:	f7ff f817 	bl	80082bc <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	2b02      	cmp	r3, #2
 8009296:	d90d      	bls.n	80092b4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800929c:	f043 0210 	orr.w	r2, r3, #16
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a8:	f043 0201 	orr.w	r2, r3, #1
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e007      	b.n	80092c4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d1d6      	bne.n	8009270 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	8000003f 	.word	0x8000003f
 80092d0:	50040300 	.word	0x50040300
 80092d4:	2000002c 	.word	0x2000002c
 80092d8:	053e2d63 	.word	0x053e2d63

080092dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d14b      	bne.n	800938e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0308 	and.w	r3, r3, #8
 800930c:	2b00      	cmp	r3, #0
 800930e:	d021      	beq.n	8009354 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4618      	mov	r0, r3
 8009316:	f7ff f87e 	bl	8008416 <LL_ADC_REG_IsTriggerSourceSWStart>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d032      	beq.n	8009386 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d12b      	bne.n	8009386 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009332:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800933e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d11f      	bne.n	8009386 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800934a:	f043 0201 	orr.w	r2, r3, #1
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	655a      	str	r2, [r3, #84]	@ 0x54
 8009352:	e018      	b.n	8009386 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d111      	bne.n	8009386 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009366:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d105      	bne.n	8009386 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800937e:	f043 0201 	orr.w	r2, r3, #1
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7f8 f8d6 	bl	8001538 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800938c:	e00e      	b.n	80093ac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009392:	f003 0310 	and.w	r3, r3, #16
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7ff fb54 	bl	8008a48 <HAL_ADC_ErrorCallback>
}
 80093a0:	e004      	b.n	80093ac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	4798      	blx	r3
}
 80093ac:	bf00      	nop
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7ff fb36 	bl	8008a34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80093c8:	bf00      	nop
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093dc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ee:	f043 0204 	orr.w	r2, r3, #4
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f7ff fb26 	bl	8008a48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80093fc:	bf00      	nop
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009414:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <__NVIC_SetPriorityGrouping+0x44>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009420:	4013      	ands	r3, r2
 8009422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800942c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009436:	4a04      	ldr	r2, [pc, #16]	@ (8009448 <__NVIC_SetPriorityGrouping+0x44>)
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	60d3      	str	r3, [r2, #12]
}
 800943c:	bf00      	nop
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	e000ed00 	.word	0xe000ed00

0800944c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800944c:	b480      	push	{r7}
 800944e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009450:	4b04      	ldr	r3, [pc, #16]	@ (8009464 <__NVIC_GetPriorityGrouping+0x18>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	0a1b      	lsrs	r3, r3, #8
 8009456:	f003 0307 	and.w	r3, r3, #7
}
 800945a:	4618      	mov	r0, r3
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	e000ed00 	.word	0xe000ed00

08009468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009476:	2b00      	cmp	r3, #0
 8009478:	db0b      	blt.n	8009492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	f003 021f 	and.w	r2, r3, #31
 8009480:	4907      	ldr	r1, [pc, #28]	@ (80094a0 <__NVIC_EnableIRQ+0x38>)
 8009482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	2001      	movs	r0, #1
 800948a:	fa00 f202 	lsl.w	r2, r0, r2
 800948e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	e000e100 	.word	0xe000e100

080094a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	db12      	blt.n	80094dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	f003 021f 	and.w	r2, r3, #31
 80094bc:	490a      	ldr	r1, [pc, #40]	@ (80094e8 <__NVIC_DisableIRQ+0x44>)
 80094be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094c2:	095b      	lsrs	r3, r3, #5
 80094c4:	2001      	movs	r0, #1
 80094c6:	fa00 f202 	lsl.w	r2, r0, r2
 80094ca:	3320      	adds	r3, #32
 80094cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80094d0:	f3bf 8f4f 	dsb	sy
}
 80094d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80094d6:	f3bf 8f6f 	isb	sy
}
 80094da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	e000e100 	.word	0xe000e100

080094ec <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	db0c      	blt.n	8009518 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	f003 021f 	and.w	r2, r3, #31
 8009504:	4907      	ldr	r1, [pc, #28]	@ (8009524 <__NVIC_SetPendingIRQ+0x38>)
 8009506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800950a:	095b      	lsrs	r3, r3, #5
 800950c:	2001      	movs	r0, #1
 800950e:	fa00 f202 	lsl.w	r2, r0, r2
 8009512:	3340      	adds	r3, #64	@ 0x40
 8009514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	e000e100 	.word	0xe000e100

08009528 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009536:	2b00      	cmp	r3, #0
 8009538:	db0c      	blt.n	8009554 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	f003 021f 	and.w	r2, r3, #31
 8009540:	4907      	ldr	r1, [pc, #28]	@ (8009560 <__NVIC_ClearPendingIRQ+0x38>)
 8009542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009546:	095b      	lsrs	r3, r3, #5
 8009548:	2001      	movs	r0, #1
 800954a:	fa00 f202 	lsl.w	r2, r0, r2
 800954e:	3360      	adds	r3, #96	@ 0x60
 8009550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	e000e100 	.word	0xe000e100

08009564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009574:	2b00      	cmp	r3, #0
 8009576:	db0a      	blt.n	800958e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	b2da      	uxtb	r2, r3
 800957c:	490c      	ldr	r1, [pc, #48]	@ (80095b0 <__NVIC_SetPriority+0x4c>)
 800957e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009582:	0112      	lsls	r2, r2, #4
 8009584:	b2d2      	uxtb	r2, r2
 8009586:	440b      	add	r3, r1
 8009588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800958c:	e00a      	b.n	80095a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	b2da      	uxtb	r2, r3
 8009592:	4908      	ldr	r1, [pc, #32]	@ (80095b4 <__NVIC_SetPriority+0x50>)
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	f003 030f 	and.w	r3, r3, #15
 800959a:	3b04      	subs	r3, #4
 800959c:	0112      	lsls	r2, r2, #4
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	440b      	add	r3, r1
 80095a2:	761a      	strb	r2, [r3, #24]
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	e000e100 	.word	0xe000e100
 80095b4:	e000ed00 	.word	0xe000ed00

080095b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b089      	sub	sp, #36	@ 0x24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	f1c3 0307 	rsb	r3, r3, #7
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	bf28      	it	cs
 80095d6:	2304      	movcs	r3, #4
 80095d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	3304      	adds	r3, #4
 80095de:	2b06      	cmp	r3, #6
 80095e0:	d902      	bls.n	80095e8 <NVIC_EncodePriority+0x30>
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	3b03      	subs	r3, #3
 80095e6:	e000      	b.n	80095ea <NVIC_EncodePriority+0x32>
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	fa02 f303 	lsl.w	r3, r2, r3
 80095f6:	43da      	mvns	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	401a      	ands	r2, r3
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009600:	f04f 31ff 	mov.w	r1, #4294967295
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	fa01 f303 	lsl.w	r3, r1, r3
 800960a:	43d9      	mvns	r1, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009610:	4313      	orrs	r3, r2
         );
}
 8009612:	4618      	mov	r0, r3
 8009614:	3724      	adds	r7, #36	@ 0x24
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
	...

08009620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3b01      	subs	r3, #1
 800962c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009630:	d301      	bcc.n	8009636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009632:	2301      	movs	r3, #1
 8009634:	e00f      	b.n	8009656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009636:	4a0a      	ldr	r2, [pc, #40]	@ (8009660 <SysTick_Config+0x40>)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3b01      	subs	r3, #1
 800963c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800963e:	210f      	movs	r1, #15
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	f7ff ff8e 	bl	8009564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009648:	4b05      	ldr	r3, [pc, #20]	@ (8009660 <SysTick_Config+0x40>)
 800964a:	2200      	movs	r2, #0
 800964c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800964e:	4b04      	ldr	r3, [pc, #16]	@ (8009660 <SysTick_Config+0x40>)
 8009650:	2207      	movs	r2, #7
 8009652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	e000e010 	.word	0xe000e010

08009664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff fec9 	bl	8009404 <__NVIC_SetPriorityGrouping>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b086      	sub	sp, #24
 800967e:	af00      	add	r7, sp, #0
 8009680:	4603      	mov	r3, r0
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	607a      	str	r2, [r7, #4]
 8009686:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009688:	f7ff fee0 	bl	800944c <__NVIC_GetPriorityGrouping>
 800968c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	68b9      	ldr	r1, [r7, #8]
 8009692:	6978      	ldr	r0, [r7, #20]
 8009694:	f7ff ff90 	bl	80095b8 <NVIC_EncodePriority>
 8009698:	4602      	mov	r2, r0
 800969a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800969e:	4611      	mov	r1, r2
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff ff5f 	bl	8009564 <__NVIC_SetPriority>
}
 80096a6:	bf00      	nop
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	4603      	mov	r3, r0
 80096b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff fed3 	bl	8009468 <__NVIC_EnableIRQ>
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	4603      	mov	r3, r0
 80096d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80096d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff fee3 	bl	80094a4 <__NVIC_DisableIRQ>
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff ff96 	bl	8009620 <SysTick_Config>
 80096f4:	4603      	mov	r3, r0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	4603      	mov	r3, r0
 8009706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8009708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff feed 	bl	80094ec <__NVIC_SetPendingIRQ>
}
 8009712:	bf00      	nop
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	4603      	mov	r3, r0
 8009722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fefd 	bl	8009528 <__NVIC_ClearPendingIRQ>
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e08e      	b.n	8009868 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	4b47      	ldr	r3, [pc, #284]	@ (8009870 <HAL_DMA_Init+0x138>)
 8009752:	429a      	cmp	r2, r3
 8009754:	d80f      	bhi.n	8009776 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	4b45      	ldr	r3, [pc, #276]	@ (8009874 <HAL_DMA_Init+0x13c>)
 800975e:	4413      	add	r3, r2
 8009760:	4a45      	ldr	r2, [pc, #276]	@ (8009878 <HAL_DMA_Init+0x140>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	091b      	lsrs	r3, r3, #4
 8009768:	009a      	lsls	r2, r3, #2
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a42      	ldr	r2, [pc, #264]	@ (800987c <HAL_DMA_Init+0x144>)
 8009772:	641a      	str	r2, [r3, #64]	@ 0x40
 8009774:	e00e      	b.n	8009794 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	4b40      	ldr	r3, [pc, #256]	@ (8009880 <HAL_DMA_Init+0x148>)
 800977e:	4413      	add	r3, r2
 8009780:	4a3d      	ldr	r2, [pc, #244]	@ (8009878 <HAL_DMA_Init+0x140>)
 8009782:	fba2 2303 	umull	r2, r3, r2, r3
 8009786:	091b      	lsrs	r3, r3, #4
 8009788:	009a      	lsls	r2, r3, #2
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a3c      	ldr	r2, [pc, #240]	@ (8009884 <HAL_DMA_Init+0x14c>)
 8009792:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80097aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80097b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	4313      	orrs	r3, r2
 80097dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fb16 	bl	8009e18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097f4:	d102      	bne.n	80097fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009804:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009808:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009812:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d010      	beq.n	800983e <HAL_DMA_Init+0x106>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2b04      	cmp	r3, #4
 8009822:	d80c      	bhi.n	800983e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fb35 	bl	8009e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800983a:	605a      	str	r2, [r3, #4]
 800983c:	e008      	b.n	8009850 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	40020407 	.word	0x40020407
 8009874:	bffdfff8 	.word	0xbffdfff8
 8009878:	cccccccd 	.word	0xcccccccd
 800987c:	40020000 	.word	0x40020000
 8009880:	bffdfbf8 	.word	0xbffdfbf8
 8009884:	40020400 	.word	0x40020400

08009888 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e07b      	b.n	8009992 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f022 0201 	bic.w	r2, r2, #1
 80098a8:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	4b3a      	ldr	r3, [pc, #232]	@ (800999c <HAL_DMA_DeInit+0x114>)
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d80f      	bhi.n	80098d6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	4b38      	ldr	r3, [pc, #224]	@ (80099a0 <HAL_DMA_DeInit+0x118>)
 80098be:	4413      	add	r3, r2
 80098c0:	4a38      	ldr	r2, [pc, #224]	@ (80099a4 <HAL_DMA_DeInit+0x11c>)
 80098c2:	fba2 2303 	umull	r2, r3, r2, r3
 80098c6:	091b      	lsrs	r3, r3, #4
 80098c8:	009a      	lsls	r2, r3, #2
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a35      	ldr	r2, [pc, #212]	@ (80099a8 <HAL_DMA_DeInit+0x120>)
 80098d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80098d4:	e00e      	b.n	80098f4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	4b33      	ldr	r3, [pc, #204]	@ (80099ac <HAL_DMA_DeInit+0x124>)
 80098de:	4413      	add	r3, r2
 80098e0:	4a30      	ldr	r2, [pc, #192]	@ (80099a4 <HAL_DMA_DeInit+0x11c>)
 80098e2:	fba2 2303 	umull	r2, r3, r2, r3
 80098e6:	091b      	lsrs	r3, r3, #4
 80098e8:	009a      	lsls	r2, r3, #2
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a2f      	ldr	r2, [pc, #188]	@ (80099b0 <HAL_DMA_DeInit+0x128>)
 80098f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009900:	f003 021c 	and.w	r2, r3, #28
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009908:	2101      	movs	r1, #1
 800990a:	fa01 f202 	lsl.w	r2, r1, r2
 800990e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fa81 	bl	8009e18 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009926:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00f      	beq.n	8009950 <HAL_DMA_DeInit+0xc8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	2b04      	cmp	r3, #4
 8009936:	d80b      	bhi.n	8009950 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 faab 	bl	8009e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800994e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	40020407 	.word	0x40020407
 80099a0:	bffdfff8 	.word	0xbffdfff8
 80099a4:	cccccccd 	.word	0xcccccccd
 80099a8:	40020000 	.word	0x40020000
 80099ac:	bffdfbf8 	.word	0xbffdfbf8
 80099b0:	40020400 	.word	0x40020400

080099b4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d101      	bne.n	80099d4 <HAL_DMA_Start_IT+0x20>
 80099d0:	2302      	movs	r3, #2
 80099d2:	e066      	b.n	8009aa2 <HAL_DMA_Start_IT+0xee>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d155      	bne.n	8009a94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2202      	movs	r2, #2
 80099ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 0201 	bic.w	r2, r2, #1
 8009a04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 f9c5 	bl	8009d9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d008      	beq.n	8009a2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 020e 	orr.w	r2, r2, #14
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e00f      	b.n	8009a4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f022 0204 	bic.w	r2, r2, #4
 8009a3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 020a 	orr.w	r2, r2, #10
 8009a4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d007      	beq.n	8009a6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d007      	beq.n	8009a82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f042 0201 	orr.w	r2, r2, #1
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	e005      	b.n	8009aa0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3718      	adds	r7, #24
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e04f      	b.n	8009b5c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d008      	beq.n	8009ada <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2204      	movs	r2, #4
 8009acc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e040      	b.n	8009b5c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 020e 	bic.w	r2, r2, #14
 8009ae8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009af8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0201 	bic.w	r2, r2, #1
 8009b08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0e:	f003 021c 	and.w	r2, r3, #28
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b16:	2101      	movs	r1, #1
 8009b18:	fa01 f202 	lsl.w	r2, r1, r2
 8009b1c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009b26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00c      	beq.n	8009b4a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009b48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d005      	beq.n	8009b8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2204      	movs	r2, #4
 8009b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	73fb      	strb	r3, [r7, #15]
 8009b8a:	e047      	b.n	8009c1c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 020e 	bic.w	r2, r2, #14
 8009b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f022 0201 	bic.w	r2, r2, #1
 8009baa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bc0:	f003 021c 	and.w	r2, r3, #28
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc8:	2101      	movs	r1, #1
 8009bca:	fa01 f202 	lsl.w	r2, r1, r2
 8009bce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009bd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00c      	beq.n	8009bfc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009bfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d003      	beq.n	8009c1c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	4798      	blx	r3
    }
  }
  return status;
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c42:	f003 031c 	and.w	r3, r3, #28
 8009c46:	2204      	movs	r2, #4
 8009c48:	409a      	lsls	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d026      	beq.n	8009ca0 <HAL_DMA_IRQHandler+0x7a>
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d021      	beq.n	8009ca0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d107      	bne.n	8009c7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f022 0204 	bic.w	r2, r2, #4
 8009c78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c7e:	f003 021c 	and.w	r2, r3, #28
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c86:	2104      	movs	r1, #4
 8009c88:	fa01 f202 	lsl.w	r2, r1, r2
 8009c8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d071      	beq.n	8009d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009c9e:	e06c      	b.n	8009d7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ca4:	f003 031c 	and.w	r3, r3, #28
 8009ca8:	2202      	movs	r2, #2
 8009caa:	409a      	lsls	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4013      	ands	r3, r2
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d02e      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xec>
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d029      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0320 	and.w	r3, r3, #32
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10b      	bne.n	8009ce4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f022 020a 	bic.w	r2, r2, #10
 8009cda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ce8:	f003 021c 	and.w	r2, r3, #28
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf0:	2102      	movs	r1, #2
 8009cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8009cf6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d038      	beq.n	8009d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009d10:	e033      	b.n	8009d7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d16:	f003 031c 	and.w	r3, r3, #28
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	409a      	lsls	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4013      	ands	r3, r2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d02a      	beq.n	8009d7c <HAL_DMA_IRQHandler+0x156>
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	f003 0308 	and.w	r3, r3, #8
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d025      	beq.n	8009d7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f022 020e 	bic.w	r2, r2, #14
 8009d3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d44:	f003 021c 	and.w	r2, r3, #28
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8009d52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d004      	beq.n	8009d7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009d7a:	bf00      	nop
 8009d7c:	bf00      	nop
}
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009db2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009dc4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dca:	f003 021c 	and.w	r2, r3, #28
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8009dd8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	2b10      	cmp	r3, #16
 8009de8:	d108      	bne.n	8009dfc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009dfa:	e007      	b.n	8009e0c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	60da      	str	r2, [r3, #12]
}
 8009e0c:	bf00      	nop
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	461a      	mov	r2, r3
 8009e26:	4b17      	ldr	r3, [pc, #92]	@ (8009e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d80a      	bhi.n	8009e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e30:	089b      	lsrs	r3, r3, #2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e38:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	6493      	str	r3, [r2, #72]	@ 0x48
 8009e40:	e007      	b.n	8009e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e46:	089b      	lsrs	r3, r3, #2
 8009e48:	009a      	lsls	r2, r3, #2
 8009e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009e4c:	4413      	add	r3, r2
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	3b08      	subs	r3, #8
 8009e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8009e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e60:	091b      	lsrs	r3, r3, #4
 8009e62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a0a      	ldr	r2, [pc, #40]	@ (8009e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009e68:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f003 031f 	and.w	r3, r3, #31
 8009e70:	2201      	movs	r2, #1
 8009e72:	409a      	lsls	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009e78:	bf00      	nop
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	40020407 	.word	0x40020407
 8009e88:	4002081c 	.word	0x4002081c
 8009e8c:	cccccccd 	.word	0xcccccccd
 8009e90:	40020880 	.word	0x40020880

08009e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ea4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	461a      	mov	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a09      	ldr	r2, [pc, #36]	@ (8009edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8009eb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	f003 0303 	and.w	r3, r3, #3
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	409a      	lsls	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	1000823f 	.word	0x1000823f
 8009edc:	40020940 	.word	0x40020940

08009ee0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009eea:	2300      	movs	r3, #0
 8009eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009eee:	e14c      	b.n	800a18a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8009efc:	4013      	ands	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 813e 	beq.w	800a184 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f003 0303 	and.w	r3, r3, #3
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d005      	beq.n	8009f20 <HAL_GPIO_Init+0x40>
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f003 0303 	and.w	r3, r3, #3
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d130      	bne.n	8009f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f30:	43db      	mvns	r3, r3
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	4013      	ands	r3, r2
 8009f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	fa02 f303 	lsl.w	r3, r2, r3
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009f56:	2201      	movs	r2, #1
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5e:	43db      	mvns	r3, r3
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	4013      	ands	r3, r2
 8009f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	091b      	lsrs	r3, r3, #4
 8009f6c:	f003 0201 	and.w	r2, r3, #1
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	fa02 f303 	lsl.w	r3, r2, r3
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f003 0303 	and.w	r3, r3, #3
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d017      	beq.n	8009fbe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	2203      	movs	r2, #3
 8009f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9e:	43db      	mvns	r3, r3
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d123      	bne.n	800a012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	08da      	lsrs	r2, r3, #3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3208      	adds	r2, #8
 8009fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f003 0307 	and.w	r3, r3, #7
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	220f      	movs	r2, #15
 8009fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe6:	43db      	mvns	r3, r3
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	4013      	ands	r3, r2
 8009fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	691a      	ldr	r2, [r3, #16]
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f003 0307 	and.w	r3, r3, #7
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	4313      	orrs	r3, r2
 800a002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	08da      	lsrs	r2, r3, #3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3208      	adds	r2, #8
 800a00c:	6939      	ldr	r1, [r7, #16]
 800a00e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	2203      	movs	r2, #3
 800a01e:	fa02 f303 	lsl.w	r3, r2, r3
 800a022:	43db      	mvns	r3, r3
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4013      	ands	r3, r2
 800a028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f003 0203 	and.w	r2, r3, #3
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	fa02 f303 	lsl.w	r3, r2, r3
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 8098 	beq.w	800a184 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800a054:	4a54      	ldr	r2, [pc, #336]	@ (800a1a8 <HAL_GPIO_Init+0x2c8>)
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	089b      	lsrs	r3, r3, #2
 800a05a:	3302      	adds	r3, #2
 800a05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	220f      	movs	r2, #15
 800a06c:	fa02 f303 	lsl.w	r3, r2, r3
 800a070:	43db      	mvns	r3, r3
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	4013      	ands	r3, r2
 800a076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a07e:	d019      	beq.n	800a0b4 <HAL_GPIO_Init+0x1d4>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a4a      	ldr	r2, [pc, #296]	@ (800a1ac <HAL_GPIO_Init+0x2cc>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d013      	beq.n	800a0b0 <HAL_GPIO_Init+0x1d0>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a49      	ldr	r2, [pc, #292]	@ (800a1b0 <HAL_GPIO_Init+0x2d0>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d00d      	beq.n	800a0ac <HAL_GPIO_Init+0x1cc>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a48      	ldr	r2, [pc, #288]	@ (800a1b4 <HAL_GPIO_Init+0x2d4>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d007      	beq.n	800a0a8 <HAL_GPIO_Init+0x1c8>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a47      	ldr	r2, [pc, #284]	@ (800a1b8 <HAL_GPIO_Init+0x2d8>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d101      	bne.n	800a0a4 <HAL_GPIO_Init+0x1c4>
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	e008      	b.n	800a0b6 <HAL_GPIO_Init+0x1d6>
 800a0a4:	2307      	movs	r3, #7
 800a0a6:	e006      	b.n	800a0b6 <HAL_GPIO_Init+0x1d6>
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e004      	b.n	800a0b6 <HAL_GPIO_Init+0x1d6>
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	e002      	b.n	800a0b6 <HAL_GPIO_Init+0x1d6>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e000      	b.n	800a0b6 <HAL_GPIO_Init+0x1d6>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	f002 0203 	and.w	r2, r2, #3
 800a0bc:	0092      	lsls	r2, r2, #2
 800a0be:	4093      	lsls	r3, r2
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a0c6:	4938      	ldr	r1, [pc, #224]	@ (800a1a8 <HAL_GPIO_Init+0x2c8>)
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	089b      	lsrs	r3, r3, #2
 800a0cc:	3302      	adds	r3, #2
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a0d4:	4b39      	ldr	r3, [pc, #228]	@ (800a1bc <HAL_GPIO_Init+0x2dc>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	43db      	mvns	r3, r3
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a0f8:	4a30      	ldr	r2, [pc, #192]	@ (800a1bc <HAL_GPIO_Init+0x2dc>)
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a0fe:	4b2f      	ldr	r3, [pc, #188]	@ (800a1bc <HAL_GPIO_Init+0x2dc>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	43db      	mvns	r3, r3
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	4013      	ands	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4313      	orrs	r3, r2
 800a120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a122:	4a26      	ldr	r2, [pc, #152]	@ (800a1bc <HAL_GPIO_Init+0x2dc>)
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a128:	4b24      	ldr	r3, [pc, #144]	@ (800a1bc <HAL_GPIO_Init+0x2dc>)
 800a12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	43db      	mvns	r3, r3
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4013      	ands	r3, r2
 800a138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a14e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1bc <HAL_GPIO_Init+0x2dc>)
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800a156:	4b19      	ldr	r3, [pc, #100]	@ (800a1bc <HAL_GPIO_Init+0x2dc>)
 800a158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a15c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	43db      	mvns	r3, r3
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	4013      	ands	r3, r2
 800a166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	4313      	orrs	r3, r2
 800a17a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a17c:	4a0f      	ldr	r2, [pc, #60]	@ (800a1bc <HAL_GPIO_Init+0x2dc>)
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	3301      	adds	r3, #1
 800a188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	fa22 f303 	lsr.w	r3, r2, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	f47f aeab 	bne.w	8009ef0 <HAL_GPIO_Init+0x10>
  }
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	371c      	adds	r7, #28
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	40010000 	.word	0x40010000
 800a1ac:	48000400 	.word	0x48000400
 800a1b0:	48000800 	.word	0x48000800
 800a1b4:	48000c00 	.word	0x48000c00
 800a1b8:	48001000 	.word	0x48001000
 800a1bc:	58000800 	.word	0x58000800

0800a1c0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a1ce:	e0bb      	b.n	800a348 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	4013      	ands	r3, r2
 800a1dc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 80ae 	beq.w	800a342 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a1e6:	4a5f      	ldr	r2, [pc, #380]	@ (800a364 <HAL_GPIO_DeInit+0x1a4>)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	089b      	lsrs	r3, r3, #2
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1f2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f003 0303 	and.w	r3, r3, #3
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	220f      	movs	r2, #15
 800a1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	4013      	ands	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a20e:	d019      	beq.n	800a244 <HAL_GPIO_DeInit+0x84>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a55      	ldr	r2, [pc, #340]	@ (800a368 <HAL_GPIO_DeInit+0x1a8>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d013      	beq.n	800a240 <HAL_GPIO_DeInit+0x80>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a54      	ldr	r2, [pc, #336]	@ (800a36c <HAL_GPIO_DeInit+0x1ac>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00d      	beq.n	800a23c <HAL_GPIO_DeInit+0x7c>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a53      	ldr	r2, [pc, #332]	@ (800a370 <HAL_GPIO_DeInit+0x1b0>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d007      	beq.n	800a238 <HAL_GPIO_DeInit+0x78>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a52      	ldr	r2, [pc, #328]	@ (800a374 <HAL_GPIO_DeInit+0x1b4>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d101      	bne.n	800a234 <HAL_GPIO_DeInit+0x74>
 800a230:	2304      	movs	r3, #4
 800a232:	e008      	b.n	800a246 <HAL_GPIO_DeInit+0x86>
 800a234:	2307      	movs	r3, #7
 800a236:	e006      	b.n	800a246 <HAL_GPIO_DeInit+0x86>
 800a238:	2303      	movs	r3, #3
 800a23a:	e004      	b.n	800a246 <HAL_GPIO_DeInit+0x86>
 800a23c:	2302      	movs	r3, #2
 800a23e:	e002      	b.n	800a246 <HAL_GPIO_DeInit+0x86>
 800a240:	2301      	movs	r3, #1
 800a242:	e000      	b.n	800a246 <HAL_GPIO_DeInit+0x86>
 800a244:	2300      	movs	r3, #0
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	f002 0203 	and.w	r2, r2, #3
 800a24c:	0092      	lsls	r2, r2, #2
 800a24e:	4093      	lsls	r3, r2
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	429a      	cmp	r2, r3
 800a254:	d136      	bne.n	800a2c4 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a256:	4b48      	ldr	r3, [pc, #288]	@ (800a378 <HAL_GPIO_DeInit+0x1b8>)
 800a258:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	43db      	mvns	r3, r3
 800a260:	4945      	ldr	r1, [pc, #276]	@ (800a378 <HAL_GPIO_DeInit+0x1b8>)
 800a262:	4013      	ands	r3, r2
 800a264:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800a268:	4b43      	ldr	r3, [pc, #268]	@ (800a378 <HAL_GPIO_DeInit+0x1b8>)
 800a26a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	43db      	mvns	r3, r3
 800a272:	4941      	ldr	r1, [pc, #260]	@ (800a378 <HAL_GPIO_DeInit+0x1b8>)
 800a274:	4013      	ands	r3, r2
 800a276:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a27a:	4b3f      	ldr	r3, [pc, #252]	@ (800a378 <HAL_GPIO_DeInit+0x1b8>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	43db      	mvns	r3, r3
 800a282:	493d      	ldr	r1, [pc, #244]	@ (800a378 <HAL_GPIO_DeInit+0x1b8>)
 800a284:	4013      	ands	r3, r2
 800a286:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800a288:	4b3b      	ldr	r3, [pc, #236]	@ (800a378 <HAL_GPIO_DeInit+0x1b8>)
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	43db      	mvns	r3, r3
 800a290:	4939      	ldr	r1, [pc, #228]	@ (800a378 <HAL_GPIO_DeInit+0x1b8>)
 800a292:	4013      	ands	r3, r2
 800a294:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f003 0303 	and.w	r3, r3, #3
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	220f      	movs	r2, #15
 800a2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a2a6:	4a2f      	ldr	r2, [pc, #188]	@ (800a364 <HAL_GPIO_DeInit+0x1a4>)
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	089b      	lsrs	r3, r3, #2
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	43da      	mvns	r2, r3
 800a2b6:	482b      	ldr	r0, [pc, #172]	@ (800a364 <HAL_GPIO_DeInit+0x1a4>)
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	089b      	lsrs	r3, r3, #2
 800a2bc:	400a      	ands	r2, r1
 800a2be:	3302      	adds	r3, #2
 800a2c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	2103      	movs	r1, #3
 800a2ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	08da      	lsrs	r2, r3, #3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3208      	adds	r2, #8
 800a2e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	220f      	movs	r2, #15
 800a2ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f2:	43db      	mvns	r3, r3
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	08d2      	lsrs	r2, r2, #3
 800a2f8:	4019      	ands	r1, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	3208      	adds	r2, #8
 800a2fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	2103      	movs	r1, #3
 800a30c:	fa01 f303 	lsl.w	r3, r1, r3
 800a310:	43db      	mvns	r3, r3
 800a312:	401a      	ands	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	2101      	movs	r1, #1
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	fa01 f303 	lsl.w	r3, r1, r3
 800a324:	43db      	mvns	r3, r3
 800a326:	401a      	ands	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689a      	ldr	r2, [r3, #8]
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	2103      	movs	r1, #3
 800a336:	fa01 f303 	lsl.w	r3, r1, r3
 800a33a:	43db      	mvns	r3, r3
 800a33c:	401a      	ands	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	3301      	adds	r3, #1
 800a346:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	fa22 f303 	lsr.w	r3, r2, r3
 800a350:	2b00      	cmp	r3, #0
 800a352:	f47f af3d 	bne.w	800a1d0 <HAL_GPIO_DeInit+0x10>
  }
}
 800a356:	bf00      	nop
 800a358:	bf00      	nop
 800a35a:	371c      	adds	r7, #28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr
 800a364:	40010000 	.word	0x40010000
 800a368:	48000400 	.word	0x48000400
 800a36c:	48000800 	.word	0x48000800
 800a370:	48000c00 	.word	0x48000c00
 800a374:	48001000 	.word	0x48001000
 800a378:	58000800 	.word	0x58000800

0800a37c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691a      	ldr	r2, [r3, #16]
 800a38c:	887b      	ldrh	r3, [r7, #2]
 800a38e:	4013      	ands	r3, r2
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a394:	2301      	movs	r3, #1
 800a396:	73fb      	strb	r3, [r7, #15]
 800a398:	e001      	b.n	800a39e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a39a:	2300      	movs	r3, #0
 800a39c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	807b      	strh	r3, [r7, #2]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3bc:	787b      	ldrb	r3, [r7, #1]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a3c2:	887a      	ldrh	r2, [r7, #2]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a3c8:	e002      	b.n	800a3d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a3ca:	887a      	ldrh	r2, [r7, #2]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a3e6:	4b08      	ldr	r3, [pc, #32]	@ (800a408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	88fb      	ldrh	r3, [r7, #6]
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a3f2:	4a05      	ldr	r2, [pc, #20]	@ (800a408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a3f4:	88fb      	ldrh	r3, [r7, #6]
 800a3f6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a3f8:	88fb      	ldrh	r3, [r7, #6]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f8 fc62 	bl	8002cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	58000800 	.word	0x58000800

0800a40c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800a412:	4b0a      	ldr	r3, [pc, #40]	@ (800a43c <HAL_HSEM_IRQHandler+0x30>)
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800a418:	4b08      	ldr	r3, [pc, #32]	@ (800a43c <HAL_HSEM_IRQHandler+0x30>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	43db      	mvns	r3, r3
 800a420:	4906      	ldr	r1, [pc, #24]	@ (800a43c <HAL_HSEM_IRQHandler+0x30>)
 800a422:	4013      	ands	r3, r2
 800a424:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800a426:	4a05      	ldr	r2, [pc, #20]	@ (800a43c <HAL_HSEM_IRQHandler+0x30>)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f807 	bl	800a440 <HAL_HSEM_FreeCallback>
}
 800a432:	bf00      	nop
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	58001500 	.word	0x58001500

0800a440 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e08d      	b.n	800a582 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d106      	bne.n	800a480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7f8 fb12 	bl	8002aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2224      	movs	r2, #36	@ 0x24
 800a484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f022 0201 	bic.w	r2, r2, #1
 800a496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a4a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a4b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d107      	bne.n	800a4ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4ca:	609a      	str	r2, [r3, #8]
 800a4cc:	e006      	b.n	800a4dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a4da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d108      	bne.n	800a4f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4f2:	605a      	str	r2, [r3, #4]
 800a4f4:	e007      	b.n	800a506 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a504:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	6812      	ldr	r2, [r2, #0]
 800a510:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a518:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68da      	ldr	r2, [r3, #12]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a528:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691a      	ldr	r2, [r3, #16]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	69d9      	ldr	r1, [r3, #28]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a1a      	ldr	r2, [r3, #32]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	430a      	orrs	r2, r1
 800a552:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 0201 	orr.w	r2, r2, #1
 800a562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b082      	sub	sp, #8
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d101      	bne.n	800a59c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e021      	b.n	800a5e0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2224      	movs	r2, #36	@ 0x24
 800a5a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f022 0201 	bic.w	r2, r2, #1
 800a5b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7f8 faff 	bl	8002bb8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	817b      	strh	r3, [r7, #10]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	813b      	strh	r3, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	f040 80f9 	bne.w	800a802 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <HAL_I2C_Mem_Write+0x34>
 800a616:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d105      	bne.n	800a628 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a622:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e0ed      	b.n	800a804 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <HAL_I2C_Mem_Write+0x4e>
 800a632:	2302      	movs	r3, #2
 800a634:	e0e6      	b.n	800a804 <HAL_I2C_Mem_Write+0x21c>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a63e:	f7fd fe3d 	bl	80082bc <HAL_GetTick>
 800a642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	2319      	movs	r3, #25
 800a64a:	2201      	movs	r2, #1
 800a64c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 fac3 	bl	800abdc <I2C_WaitOnFlagUntilTimeout>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e0d1      	b.n	800a804 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2221      	movs	r2, #33	@ 0x21
 800a664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2240      	movs	r2, #64	@ 0x40
 800a66c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a3a      	ldr	r2, [r7, #32]
 800a67a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a688:	88f8      	ldrh	r0, [r7, #6]
 800a68a:	893a      	ldrh	r2, [r7, #8]
 800a68c:	8979      	ldrh	r1, [r7, #10]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	4603      	mov	r3, r0
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 f9d3 	bl	800aa44 <I2C_RequestMemoryWrite>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e0a9      	b.n	800a804 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	2bff      	cmp	r3, #255	@ 0xff
 800a6b8:	d90e      	bls.n	800a6d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	22ff      	movs	r2, #255	@ 0xff
 800a6be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	8979      	ldrh	r1, [r7, #10]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 fc47 	bl	800af64 <I2C_TransferConfig>
 800a6d6:	e00f      	b.n	800a6f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	8979      	ldrh	r1, [r7, #10]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fc36 	bl	800af64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 fac6 	bl	800ac8e <I2C_WaitOnTXISFlagUntilTimeout>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e07b      	b.n	800a804 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	781a      	ldrb	r2, [r3, #0]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a726:	b29b      	uxth	r3, r3
 800a728:	3b01      	subs	r3, #1
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a734:	3b01      	subs	r3, #1
 800a736:	b29a      	uxth	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a740:	b29b      	uxth	r3, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d034      	beq.n	800a7b0 <HAL_I2C_Mem_Write+0x1c8>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d130      	bne.n	800a7b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a754:	2200      	movs	r2, #0
 800a756:	2180      	movs	r1, #128	@ 0x80
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f000 fa3f 	bl	800abdc <I2C_WaitOnFlagUntilTimeout>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e04d      	b.n	800a804 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	2bff      	cmp	r3, #255	@ 0xff
 800a770:	d90e      	bls.n	800a790 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	22ff      	movs	r2, #255	@ 0xff
 800a776:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	8979      	ldrh	r1, [r7, #10]
 800a780:	2300      	movs	r3, #0
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 fbeb 	bl	800af64 <I2C_TransferConfig>
 800a78e:	e00f      	b.n	800a7b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a794:	b29a      	uxth	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	8979      	ldrh	r1, [r7, #10]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f000 fbda 	bl	800af64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d19e      	bne.n	800a6f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 faac 	bl	800ad1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e01a      	b.n	800a804 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6859      	ldr	r1, [r3, #4]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a80c <HAL_I2C_Mem_Write+0x224>)
 800a7e2:	400b      	ands	r3, r1
 800a7e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	e000      	b.n	800a804 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a802:	2302      	movs	r3, #2
  }
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	fe00e800 	.word	0xfe00e800

0800a810 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af02      	add	r7, sp, #8
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	4608      	mov	r0, r1
 800a81a:	4611      	mov	r1, r2
 800a81c:	461a      	mov	r2, r3
 800a81e:	4603      	mov	r3, r0
 800a820:	817b      	strh	r3, [r7, #10]
 800a822:	460b      	mov	r3, r1
 800a824:	813b      	strh	r3, [r7, #8]
 800a826:	4613      	mov	r3, r2
 800a828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b20      	cmp	r3, #32
 800a834:	f040 80fd 	bne.w	800aa32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a838:	6a3b      	ldr	r3, [r7, #32]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d002      	beq.n	800a844 <HAL_I2C_Mem_Read+0x34>
 800a83e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a840:	2b00      	cmp	r3, #0
 800a842:	d105      	bne.n	800a850 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a84a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e0f1      	b.n	800aa34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a856:	2b01      	cmp	r3, #1
 800a858:	d101      	bne.n	800a85e <HAL_I2C_Mem_Read+0x4e>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e0ea      	b.n	800aa34 <HAL_I2C_Mem_Read+0x224>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a866:	f7fd fd29 	bl	80082bc <HAL_GetTick>
 800a86a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	2319      	movs	r3, #25
 800a872:	2201      	movs	r2, #1
 800a874:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f000 f9af 	bl	800abdc <I2C_WaitOnFlagUntilTimeout>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e0d5      	b.n	800aa34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2222      	movs	r2, #34	@ 0x22
 800a88c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2240      	movs	r2, #64	@ 0x40
 800a894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a3a      	ldr	r2, [r7, #32]
 800a8a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a8a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8b0:	88f8      	ldrh	r0, [r7, #6]
 800a8b2:	893a      	ldrh	r2, [r7, #8]
 800a8b4:	8979      	ldrh	r1, [r7, #10]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	9301      	str	r3, [sp, #4]
 800a8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	4603      	mov	r3, r0
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f000 f913 	bl	800aaec <I2C_RequestMemoryRead>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e0ad      	b.n	800aa34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	2bff      	cmp	r3, #255	@ 0xff
 800a8e0:	d90e      	bls.n	800a900 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	22ff      	movs	r2, #255	@ 0xff
 800a8e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	8979      	ldrh	r1, [r7, #10]
 800a8f0:	4b52      	ldr	r3, [pc, #328]	@ (800aa3c <HAL_I2C_Mem_Read+0x22c>)
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 fb33 	bl	800af64 <I2C_TransferConfig>
 800a8fe:	e00f      	b.n	800a920 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a904:	b29a      	uxth	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	8979      	ldrh	r1, [r7, #10]
 800a912:	4b4a      	ldr	r3, [pc, #296]	@ (800aa3c <HAL_I2C_Mem_Read+0x22c>)
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 fb22 	bl	800af64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a926:	2200      	movs	r2, #0
 800a928:	2104      	movs	r1, #4
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f000 f956 	bl	800abdc <I2C_WaitOnFlagUntilTimeout>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e07c      	b.n	800aa34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a944:	b2d2      	uxtb	r2, r2
 800a946:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a956:	3b01      	subs	r3, #1
 800a958:	b29a      	uxth	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a962:	b29b      	uxth	r3, r3
 800a964:	3b01      	subs	r3, #1
 800a966:	b29a      	uxth	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a970:	b29b      	uxth	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	d034      	beq.n	800a9e0 <HAL_I2C_Mem_Read+0x1d0>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d130      	bne.n	800a9e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	2200      	movs	r2, #0
 800a986:	2180      	movs	r1, #128	@ 0x80
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f927 	bl	800abdc <I2C_WaitOnFlagUntilTimeout>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	e04d      	b.n	800aa34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	2bff      	cmp	r3, #255	@ 0xff
 800a9a0:	d90e      	bls.n	800a9c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	22ff      	movs	r2, #255	@ 0xff
 800a9a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	8979      	ldrh	r1, [r7, #10]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 fad3 	bl	800af64 <I2C_TransferConfig>
 800a9be:	e00f      	b.n	800a9e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	8979      	ldrh	r1, [r7, #10]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 fac2 	bl	800af64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d19a      	bne.n	800a920 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f000 f994 	bl	800ad1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e01a      	b.n	800aa34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2220      	movs	r2, #32
 800aa04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6859      	ldr	r1, [r3, #4]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	4b0b      	ldr	r3, [pc, #44]	@ (800aa40 <HAL_I2C_Mem_Read+0x230>)
 800aa12:	400b      	ands	r3, r1
 800aa14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e000      	b.n	800aa34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800aa32:	2302      	movs	r3, #2
  }
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	80002400 	.word	0x80002400
 800aa40:	fe00e800 	.word	0xfe00e800

0800aa44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af02      	add	r7, sp, #8
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	4611      	mov	r1, r2
 800aa50:	461a      	mov	r2, r3
 800aa52:	4603      	mov	r3, r0
 800aa54:	817b      	strh	r3, [r7, #10]
 800aa56:	460b      	mov	r3, r1
 800aa58:	813b      	strh	r3, [r7, #8]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aa5e:	88fb      	ldrh	r3, [r7, #6]
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	8979      	ldrh	r1, [r7, #10]
 800aa64:	4b20      	ldr	r3, [pc, #128]	@ (800aae8 <I2C_RequestMemoryWrite+0xa4>)
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 fa79 	bl	800af64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa72:	69fa      	ldr	r2, [r7, #28]
 800aa74:	69b9      	ldr	r1, [r7, #24]
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f000 f909 	bl	800ac8e <I2C_WaitOnTXISFlagUntilTimeout>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e02c      	b.n	800aae0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d105      	bne.n	800aa98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aa8c:	893b      	ldrh	r3, [r7, #8]
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	629a      	str	r2, [r3, #40]	@ 0x28
 800aa96:	e015      	b.n	800aac4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aa98:	893b      	ldrh	r3, [r7, #8]
 800aa9a:	0a1b      	lsrs	r3, r3, #8
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	69b9      	ldr	r1, [r7, #24]
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f000 f8ef 	bl	800ac8e <I2C_WaitOnTXISFlagUntilTimeout>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d001      	beq.n	800aaba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e012      	b.n	800aae0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aaba:	893b      	ldrh	r3, [r7, #8]
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	2200      	movs	r2, #0
 800aacc:	2180      	movs	r1, #128	@ 0x80
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f000 f884 	bl	800abdc <I2C_WaitOnFlagUntilTimeout>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e000      	b.n	800aae0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	80002000 	.word	0x80002000

0800aaec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af02      	add	r7, sp, #8
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	817b      	strh	r3, [r7, #10]
 800aafe:	460b      	mov	r3, r1
 800ab00:	813b      	strh	r3, [r7, #8]
 800ab02:	4613      	mov	r3, r2
 800ab04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ab06:	88fb      	ldrh	r3, [r7, #6]
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	8979      	ldrh	r1, [r7, #10]
 800ab0c:	4b20      	ldr	r3, [pc, #128]	@ (800ab90 <I2C_RequestMemoryRead+0xa4>)
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	2300      	movs	r3, #0
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f000 fa26 	bl	800af64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	69b9      	ldr	r1, [r7, #24]
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f000 f8b6 	bl	800ac8e <I2C_WaitOnTXISFlagUntilTimeout>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e02c      	b.n	800ab86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab2c:	88fb      	ldrh	r3, [r7, #6]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d105      	bne.n	800ab3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab32:	893b      	ldrh	r3, [r7, #8]
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	629a      	str	r2, [r3, #40]	@ 0x28
 800ab3c:	e015      	b.n	800ab6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ab3e:	893b      	ldrh	r3, [r7, #8]
 800ab40:	0a1b      	lsrs	r3, r3, #8
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	69b9      	ldr	r1, [r7, #24]
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 f89c 	bl	800ac8e <I2C_WaitOnTXISFlagUntilTimeout>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e012      	b.n	800ab86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab60:	893b      	ldrh	r3, [r7, #8]
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	2200      	movs	r2, #0
 800ab72:	2140      	movs	r1, #64	@ 0x40
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f000 f831 	bl	800abdc <I2C_WaitOnFlagUntilTimeout>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e000      	b.n	800ab86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	80002000 	.word	0x80002000

0800ab94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	f003 0302 	and.w	r3, r3, #2
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d103      	bne.n	800abb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2200      	movs	r2, #0
 800abb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d007      	beq.n	800abd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	699a      	ldr	r2, [r3, #24]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f042 0201 	orr.w	r2, r2, #1
 800abce:	619a      	str	r2, [r3, #24]
  }
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	4613      	mov	r3, r2
 800abea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800abec:	e03b      	b.n	800ac66 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800abee:	69ba      	ldr	r2, [r7, #24]
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 f8d6 	bl	800ada4 <I2C_IsErrorOccurred>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d001      	beq.n	800ac02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e041      	b.n	800ac86 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d02d      	beq.n	800ac66 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac0a:	f7fd fb57 	bl	80082bc <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d302      	bcc.n	800ac20 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d122      	bne.n	800ac66 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	699a      	ldr	r2, [r3, #24]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	4013      	ands	r3, r2
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	bf0c      	ite	eq
 800ac30:	2301      	moveq	r3, #1
 800ac32:	2300      	movne	r3, #0
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	461a      	mov	r2, r3
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d113      	bne.n	800ac66 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac42:	f043 0220 	orr.w	r2, r3, #32
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2220      	movs	r2, #32
 800ac4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e00f      	b.n	800ac86 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	699a      	ldr	r2, [r3, #24]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4013      	ands	r3, r2
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	bf0c      	ite	eq
 800ac76:	2301      	moveq	r3, #1
 800ac78:	2300      	movne	r3, #0
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d0b4      	beq.n	800abee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	60f8      	str	r0, [r7, #12]
 800ac96:	60b9      	str	r1, [r7, #8]
 800ac98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ac9a:	e033      	b.n	800ad04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f87f 	bl	800ada4 <I2C_IsErrorOccurred>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d001      	beq.n	800acb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e031      	b.n	800ad14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d025      	beq.n	800ad04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acb8:	f7fd fb00 	bl	80082bc <HAL_GetTick>
 800acbc:	4602      	mov	r2, r0
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d302      	bcc.n	800acce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d11a      	bne.n	800ad04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	f003 0302 	and.w	r3, r3, #2
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d013      	beq.n	800ad04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ace0:	f043 0220 	orr.w	r2, r3, #32
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e007      	b.n	800ad14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	f003 0302 	and.w	r3, r3, #2
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d1c4      	bne.n	800ac9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad28:	e02f      	b.n	800ad8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 f838 	bl	800ada4 <I2C_IsErrorOccurred>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e02d      	b.n	800ad9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad3e:	f7fd fabd 	bl	80082bc <HAL_GetTick>
 800ad42:	4602      	mov	r2, r0
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d302      	bcc.n	800ad54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d11a      	bne.n	800ad8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	f003 0320 	and.w	r3, r3, #32
 800ad5e:	2b20      	cmp	r3, #32
 800ad60:	d013      	beq.n	800ad8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad66:	f043 0220 	orr.w	r2, r3, #32
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2220      	movs	r2, #32
 800ad72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e007      	b.n	800ad9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	f003 0320 	and.w	r3, r3, #32
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	d1c8      	bne.n	800ad2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
	...

0800ada4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b08a      	sub	sp, #40	@ 0x28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	f003 0310 	and.w	r3, r3, #16
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d068      	beq.n	800aea2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2210      	movs	r2, #16
 800add6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800add8:	e049      	b.n	800ae6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade0:	d045      	beq.n	800ae6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ade2:	f7fd fa6b 	bl	80082bc <HAL_GetTick>
 800ade6:	4602      	mov	r2, r0
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d302      	bcc.n	800adf8 <I2C_IsErrorOccurred+0x54>
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d13a      	bne.n	800ae6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae1a:	d121      	bne.n	800ae60 <I2C_IsErrorOccurred+0xbc>
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae22:	d01d      	beq.n	800ae60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ae24:	7cfb      	ldrb	r3, [r7, #19]
 800ae26:	2b20      	cmp	r3, #32
 800ae28:	d01a      	beq.n	800ae60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ae3a:	f7fd fa3f 	bl	80082bc <HAL_GetTick>
 800ae3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae40:	e00e      	b.n	800ae60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ae42:	f7fd fa3b 	bl	80082bc <HAL_GetTick>
 800ae46:	4602      	mov	r2, r0
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	2b19      	cmp	r3, #25
 800ae4e:	d907      	bls.n	800ae60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	f043 0320 	orr.w	r3, r3, #32
 800ae56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ae5e:	e006      	b.n	800ae6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	d1e9      	bne.n	800ae42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	f003 0320 	and.w	r3, r3, #32
 800ae78:	2b20      	cmp	r3, #32
 800ae7a:	d003      	beq.n	800ae84 <I2C_IsErrorOccurred+0xe0>
 800ae7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d0aa      	beq.n	800adda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ae84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d103      	bne.n	800ae94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2220      	movs	r2, #32
 800ae92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	f043 0304 	orr.w	r3, r3, #4
 800ae9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	f043 0301 	orr.w	r3, r3, #1
 800aeba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aec4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00b      	beq.n	800aeee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	f043 0308 	orr.w	r3, r3, #8
 800aedc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800aee6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00b      	beq.n	800af10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800aef8:	6a3b      	ldr	r3, [r7, #32]
 800aefa:	f043 0302 	orr.w	r3, r3, #2
 800aefe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800af10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af14:	2b00      	cmp	r3, #0
 800af16:	d01c      	beq.n	800af52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7ff fe3b 	bl	800ab94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6859      	ldr	r1, [r3, #4]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	4b0d      	ldr	r3, [pc, #52]	@ (800af60 <I2C_IsErrorOccurred+0x1bc>)
 800af2a:	400b      	ands	r3, r1
 800af2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	431a      	orrs	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2220      	movs	r2, #32
 800af3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800af52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800af56:	4618      	mov	r0, r3
 800af58:	3728      	adds	r7, #40	@ 0x28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	fe00e800 	.word	0xfe00e800

0800af64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	607b      	str	r3, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	817b      	strh	r3, [r7, #10]
 800af72:	4613      	mov	r3, r2
 800af74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af76:	897b      	ldrh	r3, [r7, #10]
 800af78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af7c:	7a7b      	ldrb	r3, [r7, #9]
 800af7e:	041b      	lsls	r3, r3, #16
 800af80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685a      	ldr	r2, [r3, #4]
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	0d5b      	lsrs	r3, r3, #21
 800af9e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800afa2:	4b08      	ldr	r3, [pc, #32]	@ (800afc4 <I2C_TransferConfig+0x60>)
 800afa4:	430b      	orrs	r3, r1
 800afa6:	43db      	mvns	r3, r3
 800afa8:	ea02 0103 	and.w	r1, r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800afb6:	bf00      	nop
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	03ff63ff 	.word	0x03ff63ff

0800afc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d138      	bne.n	800b050 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d101      	bne.n	800afec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800afe8:	2302      	movs	r3, #2
 800afea:	e032      	b.n	800b052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2224      	movs	r2, #36	@ 0x24
 800aff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0201 	bic.w	r2, r2, #1
 800b00a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b01a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6819      	ldr	r1, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	430a      	orrs	r2, r1
 800b02a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f042 0201 	orr.w	r2, r2, #1
 800b03a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	e000      	b.n	800b052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b050:	2302      	movs	r3, #2
  }
}
 800b052:	4618      	mov	r0, r3
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b05e:	b480      	push	{r7}
 800b060:	b085      	sub	sp, #20
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b20      	cmp	r3, #32
 800b072:	d139      	bne.n	800b0e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d101      	bne.n	800b082 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b07e:	2302      	movs	r3, #2
 800b080:	e033      	b.n	800b0ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2201      	movs	r2, #1
 800b086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2224      	movs	r2, #36	@ 0x24
 800b08e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f022 0201 	bic.w	r2, r2, #1
 800b0a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b0b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	021b      	lsls	r3, r3, #8
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f042 0201 	orr.w	r2, r2, #1
 800b0d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	e000      	b.n	800b0ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b0e8:	2302      	movs	r3, #2
  }
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
	...

0800b0f8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800b100:	4b05      	ldr	r3, [pc, #20]	@ (800b118 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	4904      	ldr	r1, [pc, #16]	@ (800b118 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4313      	orrs	r3, r2
 800b10a:	604b      	str	r3, [r1, #4]
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	40010000 	.word	0x40010000

0800b11c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800b124:	2300      	movs	r3, #0
 800b126:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d01e      	beq.n	800b16c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800b12e:	4b13      	ldr	r3, [pc, #76]	@ (800b17c <HAL_IPCC_Init+0x60>)
 800b130:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d102      	bne.n	800b144 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7f7 fd9c 	bl	8002c7c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800b144:	68b8      	ldr	r0, [r7, #8]
 800b146:	f000 f85b 	bl	800b200 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f82c 	bl	800b1b4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b16a:	e001      	b.n	800b170 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800b170:	7bfb      	ldrb	r3, [r7, #15]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	58000c00 	.word	0x58000c00

0800b180 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	4613      	mov	r3, r2
 800b18c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800b18e:	bf00      	nop
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b19a:	b480      	push	{r7}
 800b19c:	b085      	sub	sp, #20
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	60f8      	str	r0, [r7, #12]
 800b1a2:	60b9      	str	r1, [r7, #8]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]
 800b1c0:	e00f      	b.n	800b1e2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	4a0b      	ldr	r2, [pc, #44]	@ (800b1f8 <IPCC_SetDefaultCallbacks+0x44>)
 800b1cc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	3306      	adds	r3, #6
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4413      	add	r3, r2
 800b1d8:	4a08      	ldr	r2, [pc, #32]	@ (800b1fc <IPCC_SetDefaultCallbacks+0x48>)
 800b1da:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b05      	cmp	r3, #5
 800b1e6:	d9ec      	bls.n	800b1c2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	0800b181 	.word	0x0800b181
 800b1fc:	0800b19b 	.word	0x0800b19b

0800b200 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800b214:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	223f      	movs	r2, #63	@ 0x3f
 800b21a:	609a      	str	r2, [r3, #8]
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e0c0      	b.n	800b3bc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f00e fe78 	bl	8019f44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2203      	movs	r2, #3
 800b258:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4618      	mov	r0, r3
 800b262:	f007 f91c 	bl	801249e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b266:	2300      	movs	r3, #0
 800b268:	73fb      	strb	r3, [r7, #15]
 800b26a:	e03e      	b.n	800b2ea <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b26c:	7bfa      	ldrb	r2, [r7, #15]
 800b26e:	6879      	ldr	r1, [r7, #4]
 800b270:	4613      	mov	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	440b      	add	r3, r1
 800b27a:	3311      	adds	r3, #17
 800b27c:	2201      	movs	r2, #1
 800b27e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b280:	7bfa      	ldrb	r2, [r7, #15]
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	4613      	mov	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	00db      	lsls	r3, r3, #3
 800b28c:	440b      	add	r3, r1
 800b28e:	3310      	adds	r3, #16
 800b290:	7bfa      	ldrb	r2, [r7, #15]
 800b292:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b294:	7bfa      	ldrb	r2, [r7, #15]
 800b296:	6879      	ldr	r1, [r7, #4]
 800b298:	4613      	mov	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4413      	add	r3, r2
 800b29e:	00db      	lsls	r3, r3, #3
 800b2a0:	440b      	add	r3, r1
 800b2a2:	3313      	adds	r3, #19
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b2a8:	7bfa      	ldrb	r2, [r7, #15]
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	00db      	lsls	r3, r3, #3
 800b2b4:	440b      	add	r3, r1
 800b2b6:	3320      	adds	r3, #32
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b2bc:	7bfa      	ldrb	r2, [r7, #15]
 800b2be:	6879      	ldr	r1, [r7, #4]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	00db      	lsls	r3, r3, #3
 800b2c8:	440b      	add	r3, r1
 800b2ca:	3324      	adds	r3, #36	@ 0x24
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
 800b2d2:	6879      	ldr	r1, [r7, #4]
 800b2d4:	1c5a      	adds	r2, r3, #1
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	00db      	lsls	r3, r3, #3
 800b2de:	440b      	add	r3, r1
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	73fb      	strb	r3, [r7, #15]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	791b      	ldrb	r3, [r3, #4]
 800b2ee:	7bfa      	ldrb	r2, [r7, #15]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d3bb      	bcc.n	800b26c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73fb      	strb	r3, [r7, #15]
 800b2f8:	e044      	b.n	800b384 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b2fa:	7bfa      	ldrb	r2, [r7, #15]
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	00db      	lsls	r3, r3, #3
 800b306:	440b      	add	r3, r1
 800b308:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800b30c:	2200      	movs	r2, #0
 800b30e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b310:	7bfa      	ldrb	r2, [r7, #15]
 800b312:	6879      	ldr	r1, [r7, #4]
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	440b      	add	r3, r1
 800b31e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b322:	7bfa      	ldrb	r2, [r7, #15]
 800b324:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b326:	7bfa      	ldrb	r2, [r7, #15]
 800b328:	6879      	ldr	r1, [r7, #4]
 800b32a:	4613      	mov	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	4413      	add	r3, r2
 800b330:	00db      	lsls	r3, r3, #3
 800b332:	440b      	add	r3, r1
 800b334:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800b338:	2200      	movs	r2, #0
 800b33a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b33c:	7bfa      	ldrb	r2, [r7, #15]
 800b33e:	6879      	ldr	r1, [r7, #4]
 800b340:	4613      	mov	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	4413      	add	r3, r2
 800b346:	00db      	lsls	r3, r3, #3
 800b348:	440b      	add	r3, r1
 800b34a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b34e:	2200      	movs	r2, #0
 800b350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b352:	7bfa      	ldrb	r2, [r7, #15]
 800b354:	6879      	ldr	r1, [r7, #4]
 800b356:	4613      	mov	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	00db      	lsls	r3, r3, #3
 800b35e:	440b      	add	r3, r1
 800b360:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b364:	2200      	movs	r2, #0
 800b366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b368:	7bfa      	ldrb	r2, [r7, #15]
 800b36a:	6879      	ldr	r1, [r7, #4]
 800b36c:	4613      	mov	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	00db      	lsls	r3, r3, #3
 800b374:	440b      	add	r3, r1
 800b376:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	3301      	adds	r3, #1
 800b382:	73fb      	strb	r3, [r7, #15]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	791b      	ldrb	r3, [r3, #4]
 800b388:	7bfa      	ldrb	r2, [r7, #15]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d3b5      	bcc.n	800b2fa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6818      	ldr	r0, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3304      	adds	r3, #4
 800b396:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b39a:	f007 f89b 	bl	80124d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	7a9b      	ldrb	r3, [r3, #10]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d102      	bne.n	800b3ba <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f001 fc0e 	bl	800cbd6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d101      	bne.n	800b3da <HAL_PCD_Start+0x16>
 800b3d6:	2302      	movs	r3, #2
 800b3d8:	e012      	b.n	800b400 <HAL_PCD_Start+0x3c>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f007 f842 	bl	8012470 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f008 fe1f 	bl	8014034 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4618      	mov	r0, r3
 800b416:	f008 fe24 	bl	8014062 <USB_ReadInterrupts>
 800b41a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b422:	2b00      	cmp	r3, #0
 800b424:	d003      	beq.n	800b42e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fb06 	bl	800ba38 <PCD_EP_ISR_Handler>

    return;
 800b42c:	e110      	b.n	800b650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b434:	2b00      	cmp	r3, #0
 800b436:	d013      	beq.n	800b460 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b440:	b29a      	uxth	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b44a:	b292      	uxth	r2, r2
 800b44c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f00e fe04 	bl	801a05e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b456:	2100      	movs	r1, #0
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f8fc 	bl	800b656 <HAL_PCD_SetAddress>

    return;
 800b45e:	e0f7      	b.n	800b650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00c      	beq.n	800b484 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b472:	b29a      	uxth	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b47c:	b292      	uxth	r2, r2
 800b47e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b482:	e0e5      	b.n	800b650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00c      	beq.n	800b4a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b496:	b29a      	uxth	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b4a0:	b292      	uxth	r2, r2
 800b4a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b4a6:	e0d3      	b.n	800b650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d034      	beq.n	800b51c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f022 0204 	bic.w	r2, r2, #4
 800b4c4:	b292      	uxth	r2, r2
 800b4c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f022 0208 	bic.w	r2, r2, #8
 800b4dc:	b292      	uxth	r2, r2
 800b4de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d107      	bne.n	800b4fc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f00e ffa6 	bl	801a448 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f00e fde7 	bl	801a0d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b514:	b292      	uxth	r2, r2
 800b516:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b51a:	e099      	b.n	800b650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b522:	2b00      	cmp	r3, #0
 800b524:	d027      	beq.n	800b576 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b52e:	b29a      	uxth	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f042 0208 	orr.w	r2, r2, #8
 800b538:	b292      	uxth	r2, r2
 800b53a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b546:	b29a      	uxth	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b550:	b292      	uxth	r2, r2
 800b552:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b55e:	b29a      	uxth	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f042 0204 	orr.w	r2, r2, #4
 800b568:	b292      	uxth	r2, r2
 800b56a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f00e fd94 	bl	801a09c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b574:	e06c      	b.n	800b650 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d040      	beq.n	800b602 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b588:	b29a      	uxth	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b592:	b292      	uxth	r2, r2
 800b594:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d12b      	bne.n	800b5fa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f042 0204 	orr.w	r2, r2, #4
 800b5b4:	b292      	uxth	r2, r2
 800b5b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f042 0208 	orr.w	r2, r2, #8
 800b5cc:	b292      	uxth	r2, r2
 800b5ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	089b      	lsrs	r3, r3, #2
 800b5e6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f00e ff28 	bl	801a448 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b5f8:	e02a      	b.n	800b650 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f00e fd4e 	bl	801a09c <HAL_PCD_SuspendCallback>
    return;
 800b600:	e026      	b.n	800b650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00f      	beq.n	800b62c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b614:	b29a      	uxth	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b61e:	b292      	uxth	r2, r2
 800b620:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f00e fd0c 	bl	801a042 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b62a:	e011      	b.n	800b650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00c      	beq.n	800b650 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b63e:	b29a      	uxth	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b648:	b292      	uxth	r2, r2
 800b64a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b64e:	bf00      	nop
  }
}
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b082      	sub	sp, #8
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	460b      	mov	r3, r1
 800b660:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d101      	bne.n	800b670 <HAL_PCD_SetAddress+0x1a>
 800b66c:	2302      	movs	r3, #2
 800b66e:	e012      	b.n	800b696 <HAL_PCD_SetAddress+0x40>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	78fa      	ldrb	r2, [r7, #3]
 800b67c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	78fa      	ldrb	r2, [r7, #3]
 800b684:	4611      	mov	r1, r2
 800b686:	4618      	mov	r0, r3
 800b688:	f008 fcc0 	bl	801400c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	4608      	mov	r0, r1
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	70fb      	strb	r3, [r7, #3]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	803b      	strh	r3, [r7, #0]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b6bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	da0e      	bge.n	800b6e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6c4:	78fb      	ldrb	r3, [r7, #3]
 800b6c6:	f003 0207 	and.w	r2, r3, #7
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	3310      	adds	r3, #16
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	705a      	strb	r2, [r3, #1]
 800b6e0:	e00e      	b.n	800b700 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6e2:	78fb      	ldrb	r3, [r7, #3]
 800b6e4:	f003 0207 	and.w	r2, r3, #7
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4413      	add	r3, r2
 800b6ee:	00db      	lsls	r3, r3, #3
 800b6f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	b2da      	uxtb	r2, r3
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b70c:	883b      	ldrh	r3, [r7, #0]
 800b70e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	78ba      	ldrb	r2, [r7, #2]
 800b71a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b71c:	78bb      	ldrb	r3, [r7, #2]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d102      	bne.n	800b728 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d101      	bne.n	800b736 <HAL_PCD_EP_Open+0x98>
 800b732:	2302      	movs	r3, #2
 800b734:	e00e      	b.n	800b754 <HAL_PCD_EP_Open+0xb6>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68f9      	ldr	r1, [r7, #12]
 800b744:	4618      	mov	r0, r3
 800b746:	f006 fee3 	bl	8012510 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800b752:	7afb      	ldrb	r3, [r7, #11]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	da0e      	bge.n	800b78e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b770:	78fb      	ldrb	r3, [r7, #3]
 800b772:	f003 0207 	and.w	r2, r3, #7
 800b776:	4613      	mov	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	00db      	lsls	r3, r3, #3
 800b77e:	3310      	adds	r3, #16
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	4413      	add	r3, r2
 800b784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2201      	movs	r2, #1
 800b78a:	705a      	strb	r2, [r3, #1]
 800b78c:	e00e      	b.n	800b7ac <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b78e:	78fb      	ldrb	r3, [r7, #3]
 800b790:	f003 0207 	and.w	r2, r3, #7
 800b794:	4613      	mov	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4413      	add	r3, r2
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7ac:	78fb      	ldrb	r3, [r7, #3]
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d101      	bne.n	800b7c6 <HAL_PCD_EP_Close+0x6a>
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	e00e      	b.n	800b7e4 <HAL_PCD_EP_Close+0x88>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68f9      	ldr	r1, [r7, #12]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f007 fb83 	bl	8012ee0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	607a      	str	r2, [r7, #4]
 800b7f6:	603b      	str	r3, [r7, #0]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7fc:	7afb      	ldrb	r3, [r7, #11]
 800b7fe:	f003 0207 	and.w	r2, r3, #7
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	00db      	lsls	r3, r3, #3
 800b80a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	4413      	add	r3, r2
 800b812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	2200      	movs	r2, #0
 800b824:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2200      	movs	r2, #0
 800b82a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b82c:	7afb      	ldrb	r3, [r7, #11]
 800b82e:	f003 0307 	and.w	r3, r3, #7
 800b832:	b2da      	uxtb	r2, r3
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6979      	ldr	r1, [r7, #20]
 800b83e:	4618      	mov	r0, r3
 800b840:	f007 fd3b 	bl	80132ba <USB_EPStartXfer>

  return HAL_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3718      	adds	r7, #24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	460b      	mov	r3, r1
 800b858:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b85a:	78fb      	ldrb	r3, [r7, #3]
 800b85c:	f003 0207 	and.w	r2, r3, #7
 800b860:	6879      	ldr	r1, [r7, #4]
 800b862:	4613      	mov	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	00db      	lsls	r3, r3, #3
 800b86a:	440b      	add	r3, r1
 800b86c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800b870:	681b      	ldr	r3, [r3, #0]
}
 800b872:	4618      	mov	r0, r3
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b086      	sub	sp, #24
 800b882:	af00      	add	r7, sp, #0
 800b884:	60f8      	str	r0, [r7, #12]
 800b886:	607a      	str	r2, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]
 800b88a:	460b      	mov	r3, r1
 800b88c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b88e:	7afb      	ldrb	r3, [r7, #11]
 800b890:	f003 0207 	and.w	r2, r3, #7
 800b894:	4613      	mov	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	3310      	adds	r3, #16
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8ca:	7afb      	ldrb	r3, [r7, #11]
 800b8cc:	f003 0307 	and.w	r3, r3, #7
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	6979      	ldr	r1, [r7, #20]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f007 fcec 	bl	80132ba <USB_EPStartXfer>

  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	f003 0307 	and.w	r3, r3, #7
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	7912      	ldrb	r2, [r2, #4]
 800b902:	4293      	cmp	r3, r2
 800b904:	d901      	bls.n	800b90a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e03e      	b.n	800b988 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b90a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	da0e      	bge.n	800b930 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b912:	78fb      	ldrb	r3, [r7, #3]
 800b914:	f003 0207 	and.w	r2, r3, #7
 800b918:	4613      	mov	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	00db      	lsls	r3, r3, #3
 800b920:	3310      	adds	r3, #16
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	4413      	add	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2201      	movs	r2, #1
 800b92c:	705a      	strb	r2, [r3, #1]
 800b92e:	e00c      	b.n	800b94a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b930:	78fa      	ldrb	r2, [r7, #3]
 800b932:	4613      	mov	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	4413      	add	r3, r2
 800b942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2201      	movs	r2, #1
 800b94e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b950:	78fb      	ldrb	r3, [r7, #3]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	b2da      	uxtb	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b962:	2b01      	cmp	r3, #1
 800b964:	d101      	bne.n	800b96a <HAL_PCD_EP_SetStall+0x7e>
 800b966:	2302      	movs	r3, #2
 800b968:	e00e      	b.n	800b988 <HAL_PCD_EP_SetStall+0x9c>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68f9      	ldr	r1, [r7, #12]
 800b978:	4618      	mov	r0, r3
 800b97a:	f008 fa4d 	bl	8013e18 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	460b      	mov	r3, r1
 800b99a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b99c:	78fb      	ldrb	r3, [r7, #3]
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	7912      	ldrb	r2, [r2, #4]
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d901      	bls.n	800b9ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e040      	b.n	800ba30 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b9ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	da0e      	bge.n	800b9d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9b6:	78fb      	ldrb	r3, [r7, #3]
 800b9b8:	f003 0207 	and.w	r2, r3, #7
 800b9bc:	4613      	mov	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	3310      	adds	r3, #16
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	705a      	strb	r2, [r3, #1]
 800b9d2:	e00e      	b.n	800b9f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9d4:	78fb      	ldrb	r3, [r7, #3]
 800b9d6:	f003 0207 	and.w	r2, r3, #7
 800b9da:	4613      	mov	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4413      	add	r3, r2
 800b9e0:	00db      	lsls	r3, r3, #3
 800b9e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9f8:	78fb      	ldrb	r3, [r7, #3]
 800b9fa:	f003 0307 	and.w	r3, r3, #7
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d101      	bne.n	800ba12 <HAL_PCD_EP_ClrStall+0x82>
 800ba0e:	2302      	movs	r3, #2
 800ba10:	e00e      	b.n	800ba30 <HAL_PCD_EP_ClrStall+0xa0>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68f9      	ldr	r1, [r7, #12]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f008 fa4a 	bl	8013eba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b092      	sub	sp, #72	@ 0x48
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ba40:	e333      	b.n	800c0aa <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ba4a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800ba4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	f003 030f 	and.w	r3, r3, #15
 800ba54:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800ba58:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f040 8108 	bne.w	800bc72 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800ba62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ba64:	f003 0310 	and.w	r3, r3, #16
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d14c      	bne.n	800bb06 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	881b      	ldrh	r3, [r3, #0]
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800ba78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba7c:	813b      	strh	r3, [r7, #8]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	893b      	ldrh	r3, [r7, #8]
 800ba84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	3310      	adds	r3, #16
 800ba94:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	461a      	mov	r2, r3
 800baa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	4413      	add	r3, r2
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	6812      	ldr	r2, [r2, #0]
 800baae:	4413      	add	r3, r2
 800bab0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800baba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800babc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800babe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bac0:	695a      	ldr	r2, [r3, #20]
 800bac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	441a      	add	r2, r3
 800bac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800bacc:	2100      	movs	r1, #0
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f00e fa9d 	bl	801a00e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	7b1b      	ldrb	r3, [r3, #12]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 82e5 	beq.w	800c0aa <PCD_EP_ISR_Handler+0x672>
 800bae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f040 82e0 	bne.w	800c0aa <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	7b1b      	ldrb	r3, [r3, #12]
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	731a      	strb	r2, [r3, #12]
 800bb04:	e2d1      	b.n	800c0aa <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb0c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800bb16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d032      	beq.n	800bb86 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	00db      	lsls	r3, r3, #3
 800bb32:	4413      	add	r3, r2
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	6812      	ldr	r2, [r2, #0]
 800bb38:	4413      	add	r3, r2
 800bb3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bb44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb46:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6818      	ldr	r0, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800bb52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb54:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800bb56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb58:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	f008 fad3 	bl	8014106 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	881b      	ldrh	r3, [r3, #0]
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	817b      	strh	r3, [r7, #10]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	897a      	ldrh	r2, [r7, #10]
 800bb76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bb7a:	b292      	uxth	r2, r2
 800bb7c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f00e fa18 	bl	8019fb4 <HAL_PCD_SetupStageCallback>
 800bb84:	e291      	b.n	800c0aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bb86:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f280 828d 	bge.w	800c0aa <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	81fb      	strh	r3, [r7, #14]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	89fa      	ldrh	r2, [r7, #14]
 800bba6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bbaa:	b292      	uxth	r2, r2
 800bbac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	461a      	mov	r2, r3
 800bbba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	00db      	lsls	r3, r3, #3
 800bbc0:	4413      	add	r3, r2
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6812      	ldr	r2, [r2, #0]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bbcc:	881b      	ldrh	r3, [r3, #0]
 800bbce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bbd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbd4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800bbd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d019      	beq.n	800bc12 <PCD_EP_ISR_Handler+0x1da>
 800bbde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d015      	beq.n	800bc12 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6818      	ldr	r0, [r3, #0]
 800bbea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbec:	6959      	ldr	r1, [r3, #20]
 800bbee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbf0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800bbf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbf4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	f008 fa85 	bl	8014106 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800bbfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbfe:	695a      	ldr	r2, [r3, #20]
 800bc00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc02:	69db      	ldr	r3, [r3, #28]
 800bc04:	441a      	add	r2, r3
 800bc06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f00e f9e3 	bl	8019fd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800bc1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f040 8242 	bne.w	800c0aa <PCD_EP_ISR_Handler+0x672>
 800bc26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc28:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bc2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bc30:	f000 823b 	beq.w	800c0aa <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	881b      	ldrh	r3, [r3, #0]
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc44:	81bb      	strh	r3, [r7, #12]
 800bc46:	89bb      	ldrh	r3, [r7, #12]
 800bc48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bc4c:	81bb      	strh	r3, [r7, #12]
 800bc4e:	89bb      	ldrh	r3, [r7, #12]
 800bc50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bc54:	81bb      	strh	r3, [r7, #12]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	89bb      	ldrh	r3, [r7, #12]
 800bc5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	8013      	strh	r3, [r2, #0]
 800bc70:	e21b      	b.n	800c0aa <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bc84:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f280 80f1 	bge.w	800be70 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800bca4:	4013      	ands	r3, r2
 800bca6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	461a      	mov	r2, r3
 800bcae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800bcb8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bcbc:	b292      	uxth	r2, r2
 800bcbe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800bcc0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800bcd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcd8:	7b1b      	ldrb	r3, [r3, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d123      	bne.n	800bd26 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	4413      	add	r3, r2
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	6812      	ldr	r2, [r2, #0]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bcfc:	881b      	ldrh	r3, [r3, #0]
 800bcfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800bd06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 808b 	beq.w	800be26 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd16:	6959      	ldr	r1, [r3, #20]
 800bd18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd1a:	88da      	ldrh	r2, [r3, #6]
 800bd1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bd20:	f008 f9f1 	bl	8014106 <USB_ReadPMA>
 800bd24:	e07f      	b.n	800be26 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800bd26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd28:	78db      	ldrb	r3, [r3, #3]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d109      	bne.n	800bd42 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800bd2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bd30:	461a      	mov	r2, r3
 800bd32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f9c6 	bl	800c0c6 <HAL_PCD_EP_DB_Receive>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bd40:	e071      	b.n	800be26 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	441a      	add	r2, r3
 800bd6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bd6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d022      	beq.n	800bde2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	461a      	mov	r2, r3
 800bda8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	00db      	lsls	r3, r3, #3
 800bdae:	4413      	add	r3, r2
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	6812      	ldr	r2, [r2, #0]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bdba:	881b      	ldrh	r3, [r3, #0]
 800bdbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdc0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800bdc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d02c      	beq.n	800be26 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6818      	ldr	r0, [r3, #0]
 800bdd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdd2:	6959      	ldr	r1, [r3, #20]
 800bdd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdd6:	891a      	ldrh	r2, [r3, #8]
 800bdd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bddc:	f008 f993 	bl	8014106 <USB_ReadPMA>
 800bde0:	e021      	b.n	800be26 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	461a      	mov	r2, r3
 800bdee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	4413      	add	r3, r2
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	6812      	ldr	r2, [r2, #0]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be00:	881b      	ldrh	r3, [r3, #0]
 800be02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800be0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d009      	beq.n	800be26 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6818      	ldr	r0, [r3, #0]
 800be16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be18:	6959      	ldr	r1, [r3, #20]
 800be1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be1c:	895a      	ldrh	r2, [r3, #10]
 800be1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be22:	f008 f970 	bl	8014106 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800be26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be28:	69da      	ldr	r2, [r3, #28]
 800be2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be2e:	441a      	add	r2, r3
 800be30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800be34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be36:	695a      	ldr	r2, [r3, #20]
 800be38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be3c:	441a      	add	r2, r3
 800be3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800be42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d005      	beq.n	800be56 <PCD_EP_ISR_Handler+0x41e>
 800be4a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800be4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	429a      	cmp	r2, r3
 800be54:	d206      	bcs.n	800be64 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800be56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	4619      	mov	r1, r3
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f00e f8bb 	bl	8019fd8 <HAL_PCD_DataOutStageCallback>
 800be62:	e005      	b.n	800be70 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be6a:	4618      	mov	r0, r3
 800be6c:	f007 fa25 	bl	80132ba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800be70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be76:	2b00      	cmp	r3, #0
 800be78:	f000 8117 	beq.w	800c0aa <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800be7c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800be80:	4613      	mov	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	3310      	adds	r3, #16
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	4413      	add	r3, r2
 800be8e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	461a      	mov	r2, r3
 800be96:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	881b      	ldrh	r3, [r3, #0]
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800bea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beaa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	461a      	mov	r2, r3
 800beb2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	441a      	add	r2, r3
 800beba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800bec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beca:	78db      	ldrb	r3, [r3, #3]
 800becc:	2b01      	cmp	r3, #1
 800bece:	f040 80a1 	bne.w	800c014 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800bed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bed4:	2200      	movs	r2, #0
 800bed6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beda:	7b1b      	ldrb	r3, [r3, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 8092 	beq.w	800c006 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bee2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d046      	beq.n	800bf7a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800beec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beee:	785b      	ldrb	r3, [r3, #1]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d126      	bne.n	800bf42 <PCD_EP_ISR_Handler+0x50a>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	617b      	str	r3, [r7, #20]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	461a      	mov	r2, r3
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	4413      	add	r3, r2
 800bf0a:	617b      	str	r3, [r7, #20]
 800bf0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	00da      	lsls	r2, r3, #3
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	4413      	add	r3, r2
 800bf16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf1a:	613b      	str	r3, [r7, #16]
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	801a      	strh	r2, [r3, #0]
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	801a      	strh	r2, [r3, #0]
 800bf40:	e061      	b.n	800c006 <PCD_EP_ISR_Handler+0x5ce>
 800bf42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf44:	785b      	ldrb	r3, [r3, #1]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d15d      	bne.n	800c006 <PCD_EP_ISR_Handler+0x5ce>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	61fb      	str	r3, [r7, #28]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	4413      	add	r3, r2
 800bf60:	61fb      	str	r3, [r7, #28]
 800bf62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	00da      	lsls	r2, r3, #3
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf70:	61bb      	str	r3, [r7, #24]
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	2200      	movs	r2, #0
 800bf76:	801a      	strh	r2, [r3, #0]
 800bf78:	e045      	b.n	800c006 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf82:	785b      	ldrb	r3, [r3, #1]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d126      	bne.n	800bfd6 <PCD_EP_ISR_Handler+0x59e>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	461a      	mov	r2, r3
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9c:	4413      	add	r3, r2
 800bf9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	00da      	lsls	r2, r3, #3
 800bfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bfae:	623b      	str	r3, [r7, #32]
 800bfb0:	6a3b      	ldr	r3, [r7, #32]
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	801a      	strh	r2, [r3, #0]
 800bfc0:	6a3b      	ldr	r3, [r7, #32]
 800bfc2:	881b      	ldrh	r3, [r3, #0]
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	801a      	strh	r2, [r3, #0]
 800bfd4:	e017      	b.n	800c006 <PCD_EP_ISR_Handler+0x5ce>
 800bfd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfd8:	785b      	ldrb	r3, [r3, #1]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d113      	bne.n	800c006 <PCD_EP_ISR_Handler+0x5ce>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	461a      	mov	r2, r3
 800bfea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfec:	4413      	add	r3, r2
 800bfee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	00da      	lsls	r2, r3, #3
 800bff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff8:	4413      	add	r3, r2
 800bffa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c002:	2200      	movs	r2, #0
 800c004:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f00d fffe 	bl	801a00e <HAL_PCD_DataInStageCallback>
 800c012:	e04a      	b.n	800c0aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800c014:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d13f      	bne.n	800c09e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c026:	b29b      	uxth	r3, r3
 800c028:	461a      	mov	r2, r3
 800c02a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	4413      	add	r3, r2
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6812      	ldr	r2, [r2, #0]
 800c036:	4413      	add	r3, r2
 800c038:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c042:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800c044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c046:	699a      	ldr	r2, [r3, #24]
 800c048:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d906      	bls.n	800c05c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800c04e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c050:	699a      	ldr	r2, [r3, #24]
 800c052:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c054:	1ad2      	subs	r2, r2, r3
 800c056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c058:	619a      	str	r2, [r3, #24]
 800c05a:	e002      	b.n	800c062 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800c05c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c05e:	2200      	movs	r2, #0
 800c060:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800c062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d106      	bne.n	800c078 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c06a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f00d ffcc 	bl	801a00e <HAL_PCD_DataInStageCallback>
 800c076:	e018      	b.n	800c0aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800c078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c07a:	695a      	ldr	r2, [r3, #20]
 800c07c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c07e:	441a      	add	r2, r3
 800c080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c082:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800c084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c086:	69da      	ldr	r2, [r3, #28]
 800c088:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c08a:	441a      	add	r2, r3
 800c08c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c08e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c096:	4618      	mov	r0, r3
 800c098:	f007 f90f 	bl	80132ba <USB_EPStartXfer>
 800c09c:	e005      	b.n	800c0aa <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800c09e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f917 	bl	800c2d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	b21b      	sxth	r3, r3
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f6ff acc3 	blt.w	800ba42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3748      	adds	r7, #72	@ 0x48
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b088      	sub	sp, #32
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
 800c0d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d07c      	beq.n	800c1d8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	00db      	lsls	r3, r3, #3
 800c0f0:	4413      	add	r3, r2
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	6812      	ldr	r2, [r2, #0]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c102:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	699a      	ldr	r2, [r3, #24]
 800c108:	8b7b      	ldrh	r3, [r7, #26]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d306      	bcc.n	800c11c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	699a      	ldr	r2, [r3, #24]
 800c112:	8b7b      	ldrh	r3, [r7, #26]
 800c114:	1ad2      	subs	r2, r2, r3
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	619a      	str	r2, [r3, #24]
 800c11a:	e002      	b.n	800c122 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	2200      	movs	r2, #0
 800c120:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d123      	bne.n	800c172 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	461a      	mov	r2, r3
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	4413      	add	r3, r2
 800c138:	881b      	ldrh	r3, [r3, #0]
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c144:	833b      	strh	r3, [r7, #24]
 800c146:	8b3b      	ldrh	r3, [r7, #24]
 800c148:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c14c:	833b      	strh	r3, [r7, #24]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	461a      	mov	r2, r3
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	441a      	add	r2, r3
 800c15c:	8b3b      	ldrh	r3, [r7, #24]
 800c15e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c16a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c16e:	b29b      	uxth	r3, r3
 800c170:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c172:	88fb      	ldrh	r3, [r7, #6]
 800c174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d01f      	beq.n	800c1bc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	461a      	mov	r2, r3
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	4413      	add	r3, r2
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c196:	82fb      	strh	r3, [r7, #22]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	461a      	mov	r2, r3
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	441a      	add	r2, r3
 800c1a6:	8afb      	ldrh	r3, [r7, #22]
 800c1a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c1bc:	8b7b      	ldrh	r3, [r7, #26]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 8085 	beq.w	800c2ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6818      	ldr	r0, [r3, #0]
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	6959      	ldr	r1, [r3, #20]
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	891a      	ldrh	r2, [r3, #8]
 800c1d0:	8b7b      	ldrh	r3, [r7, #26]
 800c1d2:	f007 ff98 	bl	8014106 <USB_ReadPMA>
 800c1d6:	e07a      	b.n	800c2ce <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	00db      	lsls	r3, r3, #3
 800c1ea:	4413      	add	r3, r2
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	6812      	ldr	r2, [r2, #0]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	8b7b      	ldrh	r3, [r7, #26]
 800c204:	429a      	cmp	r2, r3
 800c206:	d306      	bcc.n	800c216 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	699a      	ldr	r2, [r3, #24]
 800c20c:	8b7b      	ldrh	r3, [r7, #26]
 800c20e:	1ad2      	subs	r2, r2, r3
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	619a      	str	r2, [r3, #24]
 800c214:	e002      	b.n	800c21c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2200      	movs	r2, #0
 800c21a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d123      	bne.n	800c26c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	461a      	mov	r2, r3
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	b29b      	uxth	r3, r3
 800c236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c23a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c23e:	83fb      	strh	r3, [r7, #30]
 800c240:	8bfb      	ldrh	r3, [r7, #30]
 800c242:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c246:	83fb      	strh	r3, [r7, #30]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	461a      	mov	r2, r3
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	441a      	add	r2, r3
 800c256:	8bfb      	ldrh	r3, [r7, #30]
 800c258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c25c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c268:	b29b      	uxth	r3, r3
 800c26a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c26c:	88fb      	ldrh	r3, [r7, #6]
 800c26e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c272:	2b00      	cmp	r3, #0
 800c274:	d11f      	bne.n	800c2b6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	881b      	ldrh	r3, [r3, #0]
 800c286:	b29b      	uxth	r3, r3
 800c288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c28c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c290:	83bb      	strh	r3, [r7, #28]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	441a      	add	r2, r3
 800c2a0:	8bbb      	ldrh	r3, [r7, #28]
 800c2a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c2b6:	8b7b      	ldrh	r3, [r7, #26]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d008      	beq.n	800c2ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6818      	ldr	r0, [r3, #0]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	6959      	ldr	r1, [r3, #20]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	895a      	ldrh	r2, [r3, #10]
 800c2c8:	8b7b      	ldrh	r3, [r7, #26]
 800c2ca:	f007 ff1c 	bl	8014106 <USB_ReadPMA>
    }
  }

  return count;
 800c2ce:	8b7b      	ldrh	r3, [r7, #26]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3720      	adds	r7, #32
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b0a6      	sub	sp, #152	@ 0x98
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c2e6:	88fb      	ldrh	r3, [r7, #6]
 800c2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 81f7 	beq.w	800c6e0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	4413      	add	r3, r2
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	6812      	ldr	r2, [r2, #0]
 800c30a:	4413      	add	r3, r2
 800c30c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c316:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	699a      	ldr	r2, [r3, #24]
 800c31e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c322:	429a      	cmp	r2, r3
 800c324:	d907      	bls.n	800c336 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	699a      	ldr	r2, [r3, #24]
 800c32a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	619a      	str	r2, [r3, #24]
 800c334:	e002      	b.n	800c33c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2200      	movs	r2, #0
 800c33a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	2b00      	cmp	r3, #0
 800c342:	f040 80e1 	bne.w	800c508 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	785b      	ldrb	r3, [r3, #1]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d126      	bne.n	800c39c <HAL_PCD_EP_DB_Transmit+0xc4>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	633b      	str	r3, [r7, #48]	@ 0x30
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	461a      	mov	r2, r3
 800c360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c362:	4413      	add	r3, r2
 800c364:	633b      	str	r3, [r7, #48]	@ 0x30
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	00da      	lsls	r2, r3, #3
 800c36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c36e:	4413      	add	r3, r2
 800c370:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c380:	b29a      	uxth	r2, r3
 800c382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c384:	801a      	strh	r2, [r3, #0]
 800c386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c388:	881b      	ldrh	r3, [r3, #0]
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c394:	b29a      	uxth	r2, r3
 800c396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c398:	801a      	strh	r2, [r3, #0]
 800c39a:	e01a      	b.n	800c3d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	785b      	ldrb	r3, [r3, #1]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d116      	bne.n	800c3d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b8:	4413      	add	r3, r2
 800c3ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	00da      	lsls	r2, r3, #3
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c3ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	785b      	ldrb	r3, [r3, #1]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d126      	bne.n	800c42e <HAL_PCD_EP_DB_Transmit+0x156>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	623b      	str	r3, [r7, #32]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	623b      	str	r3, [r7, #32]
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	00da      	lsls	r2, r3, #3
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	4413      	add	r3, r2
 800c402:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c406:	61fb      	str	r3, [r7, #28]
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	881b      	ldrh	r3, [r3, #0]
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c412:	b29a      	uxth	r2, r3
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	801a      	strh	r2, [r3, #0]
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c426:	b29a      	uxth	r2, r3
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	801a      	strh	r2, [r3, #0]
 800c42c:	e017      	b.n	800c45e <HAL_PCD_EP_DB_Transmit+0x186>
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	785b      	ldrb	r3, [r3, #1]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d113      	bne.n	800c45e <HAL_PCD_EP_DB_Transmit+0x186>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c43e:	b29b      	uxth	r3, r3
 800c440:	461a      	mov	r2, r3
 800c442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c444:	4413      	add	r3, r2
 800c446:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	00da      	lsls	r2, r3, #3
 800c44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c450:	4413      	add	r3, r2
 800c452:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c456:	627b      	str	r3, [r7, #36]	@ 0x24
 800c458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45a:	2200      	movs	r2, #0
 800c45c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	78db      	ldrb	r3, [r3, #3]
 800c462:	2b02      	cmp	r3, #2
 800c464:	d123      	bne.n	800c4ae <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	b29b      	uxth	r3, r3
 800c478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c47c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c480:	837b      	strh	r3, [r7, #26]
 800c482:	8b7b      	ldrh	r3, [r7, #26]
 800c484:	f083 0320 	eor.w	r3, r3, #32
 800c488:	837b      	strh	r3, [r7, #26]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	441a      	add	r2, r3
 800c498:	8b7b      	ldrh	r3, [r7, #26]
 800c49a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c49e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f00d fdaa 	bl	801a00e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c4ba:	88fb      	ldrh	r3, [r7, #6]
 800c4bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d01f      	beq.n	800c504 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	881b      	ldrh	r3, [r3, #0]
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4de:	833b      	strh	r3, [r7, #24]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	441a      	add	r2, r3
 800c4ee:	8b3b      	ldrh	r3, [r7, #24]
 800c4f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c4fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c500:	b29b      	uxth	r3, r3
 800c502:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	e31f      	b.n	800cb48 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c508:	88fb      	ldrh	r3, [r7, #6]
 800c50a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d021      	beq.n	800c556 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	b29b      	uxth	r3, r3
 800c524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c52c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	461a      	mov	r2, r3
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	441a      	add	r2, r3
 800c53e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c54a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c54e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c552:	b29b      	uxth	r3, r3
 800c554:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	f040 82ca 	bne.w	800caf6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	695a      	ldr	r2, [r3, #20]
 800c566:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c56a:	441a      	add	r2, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	69da      	ldr	r2, [r3, #28]
 800c574:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c578:	441a      	add	r2, r3
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	6a1a      	ldr	r2, [r3, #32]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	429a      	cmp	r2, r3
 800c588:	d309      	bcc.n	800c59e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	6a1a      	ldr	r2, [r3, #32]
 800c594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c596:	1ad2      	subs	r2, r2, r3
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	621a      	str	r2, [r3, #32]
 800c59c:	e015      	b.n	800c5ca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	6a1b      	ldr	r3, [r3, #32]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d107      	bne.n	800c5b6 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800c5a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c5aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800c5b4:	e009      	b.n	800c5ca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	785b      	ldrb	r3, [r3, #1]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d15f      	bne.n	800c692 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5e6:	4413      	add	r3, r2
 800c5e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	00da      	lsls	r2, r3, #3
 800c5f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5fc:	881b      	ldrh	r3, [r3, #0]
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c604:	b29a      	uxth	r2, r3
 800c606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c608:	801a      	strh	r2, [r3, #0]
 800c60a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <HAL_PCD_EP_DB_Transmit+0x34e>
 800c610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	b29b      	uxth	r3, r3
 800c616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c61a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c61e:	b29a      	uxth	r2, r3
 800c620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c622:	801a      	strh	r2, [r3, #0]
 800c624:	e051      	b.n	800c6ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c628:	2b3e      	cmp	r3, #62	@ 0x3e
 800c62a:	d816      	bhi.n	800c65a <HAL_PCD_EP_DB_Transmit+0x382>
 800c62c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c62e:	085b      	lsrs	r3, r3, #1
 800c630:	653b      	str	r3, [r7, #80]	@ 0x50
 800c632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d002      	beq.n	800c642 <HAL_PCD_EP_DB_Transmit+0x36a>
 800c63c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c63e:	3301      	adds	r3, #1
 800c640:	653b      	str	r3, [r7, #80]	@ 0x50
 800c642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	b29a      	uxth	r2, r3
 800c648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	029b      	lsls	r3, r3, #10
 800c64e:	b29b      	uxth	r3, r3
 800c650:	4313      	orrs	r3, r2
 800c652:	b29a      	uxth	r2, r3
 800c654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c656:	801a      	strh	r2, [r3, #0]
 800c658:	e037      	b.n	800c6ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c65a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c65c:	095b      	lsrs	r3, r3, #5
 800c65e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c660:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c662:	f003 031f 	and.w	r3, r3, #31
 800c666:	2b00      	cmp	r3, #0
 800c668:	d102      	bne.n	800c670 <HAL_PCD_EP_DB_Transmit+0x398>
 800c66a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c66c:	3b01      	subs	r3, #1
 800c66e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c672:	881b      	ldrh	r3, [r3, #0]
 800c674:	b29a      	uxth	r2, r3
 800c676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c678:	b29b      	uxth	r3, r3
 800c67a:	029b      	lsls	r3, r3, #10
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	4313      	orrs	r3, r2
 800c680:	b29b      	uxth	r3, r3
 800c682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c68e:	801a      	strh	r2, [r3, #0]
 800c690:	e01b      	b.n	800c6ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	785b      	ldrb	r3, [r3, #1]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d117      	bne.n	800c6ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6ae:	4413      	add	r3, r2
 800c6b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	00da      	lsls	r2, r3, #3
 800c6b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6ba:	4413      	add	r3, r2
 800c6bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c6c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	6959      	ldr	r1, [r3, #20]
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	891a      	ldrh	r2, [r3, #8]
 800c6d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	f007 fcd2 	bl	8014082 <USB_WritePMA>
 800c6de:	e20a      	b.n	800caf6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	4413      	add	r3, r2
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	6812      	ldr	r2, [r2, #0]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c704:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	699a      	ldr	r2, [r3, #24]
 800c70c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c710:	429a      	cmp	r2, r3
 800c712:	d307      	bcc.n	800c724 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	699a      	ldr	r2, [r3, #24]
 800c718:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c71c:	1ad2      	subs	r2, r2, r3
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	619a      	str	r2, [r3, #24]
 800c722:	e002      	b.n	800c72a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2200      	movs	r2, #0
 800c728:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f040 80f6 	bne.w	800c920 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	785b      	ldrb	r3, [r3, #1]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d126      	bne.n	800c78a <HAL_PCD_EP_DB_Transmit+0x4b2>
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	677b      	str	r3, [r7, #116]	@ 0x74
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	461a      	mov	r2, r3
 800c74e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c750:	4413      	add	r3, r2
 800c752:	677b      	str	r3, [r7, #116]	@ 0x74
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	00da      	lsls	r2, r3, #3
 800c75a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c75c:	4413      	add	r3, r2
 800c75e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c762:	673b      	str	r3, [r7, #112]	@ 0x70
 800c764:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	b29b      	uxth	r3, r3
 800c76a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c76e:	b29a      	uxth	r2, r3
 800c770:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c772:	801a      	strh	r2, [r3, #0]
 800c774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c776:	881b      	ldrh	r3, [r3, #0]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c77e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c782:	b29a      	uxth	r2, r3
 800c784:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c786:	801a      	strh	r2, [r3, #0]
 800c788:	e01a      	b.n	800c7c0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	785b      	ldrb	r3, [r3, #1]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d116      	bne.n	800c7c0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7a6:	4413      	add	r3, r2
 800c7a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	00da      	lsls	r2, r3, #3
 800c7b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7b2:	4413      	add	r3, r2
 800c7b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c7b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c7ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7bc:	2200      	movs	r2, #0
 800c7be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	785b      	ldrb	r3, [r3, #1]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d12f      	bne.n	800c830 <HAL_PCD_EP_DB_Transmit+0x558>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	00da      	lsls	r2, r3, #3
 800c7f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7f8:	4413      	add	r3, r2
 800c7fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c7fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c802:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c806:	881b      	ldrh	r3, [r3, #0]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c80e:	b29a      	uxth	r2, r3
 800c810:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c814:	801a      	strh	r2, [r3, #0]
 800c816:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c826:	b29a      	uxth	r2, r3
 800c828:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c82c:	801a      	strh	r2, [r3, #0]
 800c82e:	e01c      	b.n	800c86a <HAL_PCD_EP_DB_Transmit+0x592>
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	785b      	ldrb	r3, [r3, #1]
 800c834:	2b01      	cmp	r3, #1
 800c836:	d118      	bne.n	800c86a <HAL_PCD_EP_DB_Transmit+0x592>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c840:	b29b      	uxth	r3, r3
 800c842:	461a      	mov	r2, r3
 800c844:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c848:	4413      	add	r3, r2
 800c84a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	00da      	lsls	r2, r3, #3
 800c854:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c858:	4413      	add	r3, r2
 800c85a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c85e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c862:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c866:	2200      	movs	r2, #0
 800c868:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	78db      	ldrb	r3, [r3, #3]
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d127      	bne.n	800c8c2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4413      	add	r3, r2
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	b29b      	uxth	r3, r3
 800c884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c88c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c890:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c894:	f083 0320 	eor.w	r3, r3, #32
 800c898:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	441a      	add	r2, r3
 800c8aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c8ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f00d fba0 	bl	801a00e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c8ce:	88fb      	ldrh	r3, [r7, #6]
 800c8d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d121      	bne.n	800c91c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	461a      	mov	r2, r3
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4413      	add	r3, r2
 800c8e6:	881b      	ldrh	r3, [r3, #0]
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8f2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	441a      	add	r2, r3
 800c904:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c90c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c910:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c918:	b29b      	uxth	r3, r3
 800c91a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	e113      	b.n	800cb48 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c920:	88fb      	ldrh	r3, [r7, #6]
 800c922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c926:	2b00      	cmp	r3, #0
 800c928:	d121      	bne.n	800c96e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c944:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	461a      	mov	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	441a      	add	r2, r3
 800c956:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c95a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c95e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c974:	2b01      	cmp	r3, #1
 800c976:	f040 80be 	bne.w	800caf6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	695a      	ldr	r2, [r3, #20]
 800c97e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c982:	441a      	add	r2, r3
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	69da      	ldr	r2, [r3, #28]
 800c98c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c990:	441a      	add	r2, r3
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	6a1a      	ldr	r2, [r3, #32]
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d309      	bcc.n	800c9b6 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	6a1a      	ldr	r2, [r3, #32]
 800c9ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9ae:	1ad2      	subs	r2, r2, r3
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	621a      	str	r2, [r3, #32]
 800c9b4:	e015      	b.n	800c9e2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d107      	bne.n	800c9ce <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800c9be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c9c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800c9cc:	e009      	b.n	800c9e2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	785b      	ldrb	r3, [r3, #1]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d15f      	bne.n	800cab0 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	461a      	mov	r2, r3
 800ca02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca04:	4413      	add	r3, r2
 800ca06:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	00da      	lsls	r2, r3, #3
 800ca0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca10:	4413      	add	r3, r2
 800ca12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca16:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca1a:	881b      	ldrh	r3, [r3, #0]
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca26:	801a      	strh	r2, [r3, #0]
 800ca28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10a      	bne.n	800ca44 <HAL_PCD_EP_DB_Transmit+0x76c>
 800ca2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca30:	881b      	ldrh	r3, [r3, #0]
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca40:	801a      	strh	r2, [r3, #0]
 800ca42:	e04e      	b.n	800cae2 <HAL_PCD_EP_DB_Transmit+0x80a>
 800ca44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca46:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca48:	d816      	bhi.n	800ca78 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800ca4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca4c:	085b      	lsrs	r3, r3, #1
 800ca4e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <HAL_PCD_EP_DB_Transmit+0x788>
 800ca5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	029b      	lsls	r3, r3, #10
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca74:	801a      	strh	r2, [r3, #0]
 800ca76:	e034      	b.n	800cae2 <HAL_PCD_EP_DB_Transmit+0x80a>
 800ca78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca7a:	095b      	lsrs	r3, r3, #5
 800ca7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca80:	f003 031f 	and.w	r3, r3, #31
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d102      	bne.n	800ca8e <HAL_PCD_EP_DB_Transmit+0x7b6>
 800ca88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	029b      	lsls	r3, r3, #10
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caac:	801a      	strh	r2, [r3, #0]
 800caae:	e018      	b.n	800cae2 <HAL_PCD_EP_DB_Transmit+0x80a>
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	785b      	ldrb	r3, [r3, #1]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d114      	bne.n	800cae2 <HAL_PCD_EP_DB_Transmit+0x80a>
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	461a      	mov	r2, r3
 800cac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cac6:	4413      	add	r3, r2
 800cac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	00da      	lsls	r2, r3, #3
 800cad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cad2:	4413      	add	r3, r2
 800cad4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cadc:	b29a      	uxth	r2, r3
 800cade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cae0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6818      	ldr	r0, [r3, #0]
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	6959      	ldr	r1, [r3, #20]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	895a      	ldrh	r2, [r3, #10]
 800caee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	f007 fac6 	bl	8014082 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	461a      	mov	r2, r3
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	4413      	add	r3, r2
 800cb04:	881b      	ldrh	r3, [r3, #0]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb10:	82fb      	strh	r3, [r7, #22]
 800cb12:	8afb      	ldrh	r3, [r7, #22]
 800cb14:	f083 0310 	eor.w	r3, r3, #16
 800cb18:	82fb      	strh	r3, [r7, #22]
 800cb1a:	8afb      	ldrh	r3, [r7, #22]
 800cb1c:	f083 0320 	eor.w	r3, r3, #32
 800cb20:	82fb      	strh	r3, [r7, #22]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	441a      	add	r2, r3
 800cb30:	8afb      	ldrh	r3, [r7, #22]
 800cb32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3798      	adds	r7, #152	@ 0x98
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b087      	sub	sp, #28
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	607b      	str	r3, [r7, #4]
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	817b      	strh	r3, [r7, #10]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800cb62:	897b      	ldrh	r3, [r7, #10]
 800cb64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00b      	beq.n	800cb86 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb6e:	897b      	ldrh	r3, [r7, #10]
 800cb70:	f003 0207 	and.w	r2, r3, #7
 800cb74:	4613      	mov	r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	3310      	adds	r3, #16
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	4413      	add	r3, r2
 800cb82:	617b      	str	r3, [r7, #20]
 800cb84:	e009      	b.n	800cb9a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cb86:	897a      	ldrh	r2, [r7, #10]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4413      	add	r3, r2
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4413      	add	r3, r2
 800cb98:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800cb9a:	893b      	ldrh	r3, [r7, #8]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d107      	bne.n	800cbb0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	2200      	movs	r2, #0
 800cba4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	80da      	strh	r2, [r3, #6]
 800cbae:	e00b      	b.n	800cbc8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	0c1b      	lsrs	r3, r3, #16
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	371c      	adds	r7, #28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b085      	sub	sp, #20
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	f043 0301 	orr.w	r3, r3, #1
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	f043 0302 	orr.w	r3, r3, #2
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
	...

0800cc2c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc30:	4b05      	ldr	r3, [pc, #20]	@ (800cc48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a04      	ldr	r2, [pc, #16]	@ (800cc48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cc36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc3a:	6013      	str	r3, [r2, #0]
}
 800cc3c:	bf00      	nop
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop
 800cc48:	58000400 	.word	0x58000400

0800cc4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800cc50:	4b04      	ldr	r3, [pc, #16]	@ (800cc64 <HAL_PWREx_GetVoltageRange+0x18>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	58000400 	.word	0x58000400

0800cc68 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800cc6c:	4b05      	ldr	r3, [pc, #20]	@ (800cc84 <HAL_PWREx_EnableVddUSB+0x1c>)
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	4a04      	ldr	r2, [pc, #16]	@ (800cc84 <HAL_PWREx_EnableVddUSB+0x1c>)
 800cc72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cc76:	6053      	str	r3, [r2, #4]
}
 800cc78:	bf00      	nop
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	58000400 	.word	0x58000400

0800cc88 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800cc88:	b480      	push	{r7}
 800cc8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800cc8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cc96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc9a:	d101      	bne.n	800cca0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e000      	b.n	800cca2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <LL_RCC_HSE_Enable>:
{
 800ccac:	b480      	push	{r7}
 800ccae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ccb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ccba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ccbe:	6013      	str	r3, [r2, #0]
}
 800ccc0:	bf00      	nop
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <LL_RCC_HSE_Disable>:
{
 800ccca:	b480      	push	{r7}
 800cccc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ccce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ccd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ccdc:	6013      	str	r3, [r2, #0]
}
 800ccde:	bf00      	nop
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <LL_RCC_HSE_IsReady>:
{
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ccec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccfa:	d101      	bne.n	800cd00 <LL_RCC_HSE_IsReady+0x18>
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e000      	b.n	800cd02 <LL_RCC_HSE_IsReady+0x1a>
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <LL_RCC_HSI_Enable>:
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800cd10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd1e:	6013      	str	r3, [r2, #0]
}
 800cd20:	bf00      	nop
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <LL_RCC_HSI_Disable>:
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800cd2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd3c:	6013      	str	r3, [r2, #0]
}
 800cd3e:	bf00      	nop
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <LL_RCC_HSI_IsReady>:
{
 800cd48:	b480      	push	{r7}
 800cd4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800cd4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd5a:	d101      	bne.n	800cd60 <LL_RCC_HSI_IsReady+0x18>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e000      	b.n	800cd62 <LL_RCC_HSI_IsReady+0x1a>
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <LL_RCC_HSI_SetCalibTrimming>:
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800cd74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	061b      	lsls	r3, r3, #24
 800cd82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd86:	4313      	orrs	r3, r2
 800cd88:	604b      	str	r3, [r1, #4]
}
 800cd8a:	bf00      	nop
 800cd8c:	370c      	adds	r7, #12
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <LL_RCC_HSI48_Enable>:
{
 800cd96:	b480      	push	{r7}
 800cd98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800cd9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cda2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cda6:	f043 0301 	orr.w	r3, r3, #1
 800cdaa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800cdae:	bf00      	nop
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <LL_RCC_HSI48_Disable>:
{
 800cdb8:	b480      	push	{r7}
 800cdba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800cdbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cdc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cdc8:	f023 0301 	bic.w	r3, r3, #1
 800cdcc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800cdd0:	bf00      	nop
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <LL_RCC_HSI48_IsReady>:
{
 800cdda:	b480      	push	{r7}
 800cddc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800cdde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cde2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cde6:	f003 0302 	and.w	r3, r3, #2
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d101      	bne.n	800cdf2 <LL_RCC_HSI48_IsReady+0x18>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e000      	b.n	800cdf4 <LL_RCC_HSI48_IsReady+0x1a>
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <LL_RCC_LSE_Enable>:
{
 800cdfe:	b480      	push	{r7}
 800ce00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ce02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ce0e:	f043 0301 	orr.w	r3, r3, #1
 800ce12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ce16:	bf00      	nop
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <LL_RCC_LSE_Disable>:
{
 800ce20:	b480      	push	{r7}
 800ce22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ce24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ce30:	f023 0301 	bic.w	r3, r3, #1
 800ce34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ce38:	bf00      	nop
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <LL_RCC_LSE_EnableBypass>:
{
 800ce42:	b480      	push	{r7}
 800ce44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ce46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ce52:	f043 0304 	orr.w	r3, r3, #4
 800ce56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ce5a:	bf00      	nop
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <LL_RCC_LSE_DisableBypass>:
{
 800ce64:	b480      	push	{r7}
 800ce66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ce68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ce74:	f023 0304 	bic.w	r3, r3, #4
 800ce78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ce7c:	bf00      	nop
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr

0800ce86 <LL_RCC_LSE_IsReady>:
{
 800ce86:	b480      	push	{r7}
 800ce88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ce8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce92:	f003 0302 	and.w	r3, r3, #2
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d101      	bne.n	800ce9e <LL_RCC_LSE_IsReady+0x18>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e000      	b.n	800cea0 <LL_RCC_LSE_IsReady+0x1a>
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <LL_RCC_LSI1_Enable>:
{
 800ceaa:	b480      	push	{r7}
 800ceac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ceae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ceb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ceb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ceba:	f043 0301 	orr.w	r3, r3, #1
 800cebe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800cec2:	bf00      	nop
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <LL_RCC_LSI1_Disable>:
{
 800cecc:	b480      	push	{r7}
 800cece:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ced0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ced4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ced8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cedc:	f023 0301 	bic.w	r3, r3, #1
 800cee0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800cee4:	bf00      	nop
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <LL_RCC_LSI1_IsReady>:
{
 800ceee:	b480      	push	{r7}
 800cef0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800cef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cefa:	f003 0302 	and.w	r3, r3, #2
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d101      	bne.n	800cf06 <LL_RCC_LSI1_IsReady+0x18>
 800cf02:	2301      	movs	r3, #1
 800cf04:	e000      	b.n	800cf08 <LL_RCC_LSI1_IsReady+0x1a>
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <LL_RCC_LSI2_Enable>:
{
 800cf12:	b480      	push	{r7}
 800cf14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800cf16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf22:	f043 0304 	orr.w	r3, r3, #4
 800cf26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800cf2a:	bf00      	nop
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <LL_RCC_LSI2_Disable>:
{
 800cf34:	b480      	push	{r7}
 800cf36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800cf38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf44:	f023 0304 	bic.w	r3, r3, #4
 800cf48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800cf4c:	bf00      	nop
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr

0800cf56 <LL_RCC_LSI2_IsReady>:
{
 800cf56:	b480      	push	{r7}
 800cf58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800cf5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf62:	f003 0308 	and.w	r3, r3, #8
 800cf66:	2b08      	cmp	r3, #8
 800cf68:	d101      	bne.n	800cf6e <LL_RCC_LSI2_IsReady+0x18>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e000      	b.n	800cf70 <LL_RCC_LSI2_IsReady+0x1a>
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr

0800cf7a <LL_RCC_LSI2_SetTrimming>:
{
 800cf7a:	b480      	push	{r7}
 800cf7c:	b083      	sub	sp, #12
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800cf82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	021b      	lsls	r3, r3, #8
 800cf92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf96:	4313      	orrs	r3, r2
 800cf98:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <LL_RCC_MSI_Enable>:
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800cfac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cfb6:	f043 0301 	orr.w	r3, r3, #1
 800cfba:	6013      	str	r3, [r2, #0]
}
 800cfbc:	bf00      	nop
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr

0800cfc6 <LL_RCC_MSI_Disable>:
{
 800cfc6:	b480      	push	{r7}
 800cfc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800cfca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cfd4:	f023 0301 	bic.w	r3, r3, #1
 800cfd8:	6013      	str	r3, [r2, #0]
}
 800cfda:	bf00      	nop
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <LL_RCC_MSI_IsReady>:
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800cfe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f003 0302 	and.w	r3, r3, #2
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	d101      	bne.n	800cffa <LL_RCC_MSI_IsReady+0x16>
 800cff6:	2301      	movs	r3, #1
 800cff8:	e000      	b.n	800cffc <LL_RCC_MSI_IsReady+0x18>
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <LL_RCC_MSI_SetRange>:
{
 800d006:	b480      	push	{r7}
 800d008:	b083      	sub	sp, #12
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800d00e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d018:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4313      	orrs	r3, r2
 800d020:	600b      	str	r3, [r1, #0]
}
 800d022:	bf00      	nop
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <LL_RCC_MSI_GetRange>:
{
 800d02e:	b480      	push	{r7}
 800d030:	b083      	sub	sp, #12
 800d032:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800d034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d03e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2bb0      	cmp	r3, #176	@ 0xb0
 800d044:	d901      	bls.n	800d04a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800d046:	23b0      	movs	r3, #176	@ 0xb0
 800d048:	607b      	str	r3, [r7, #4]
  return msiRange;
 800d04a:	687b      	ldr	r3, [r7, #4]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <LL_RCC_MSI_SetCalibTrimming>:
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800d060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	021b      	lsls	r3, r3, #8
 800d06e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d072:	4313      	orrs	r3, r2
 800d074:	604b      	str	r3, [r1, #4]
}
 800d076:	bf00      	nop
 800d078:	370c      	adds	r7, #12
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <LL_RCC_SetSysClkSource>:
{
 800d082:	b480      	push	{r7}
 800d084:	b083      	sub	sp, #12
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800d08a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	f023 0203 	bic.w	r2, r3, #3
 800d094:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	608b      	str	r3, [r1, #8]
}
 800d09e:	bf00      	nop
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <LL_RCC_GetSysClkSource>:
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d0ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	f003 030c 	and.w	r3, r3, #12
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr

0800d0c2 <LL_RCC_SetAHBPrescaler>:
{
 800d0c2:	b480      	push	{r7}
 800d0c4:	b083      	sub	sp, #12
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800d0ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d0d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	608b      	str	r3, [r1, #8]
}
 800d0de:	bf00      	nop
 800d0e0:	370c      	adds	r7, #12
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr

0800d0ea <LL_C2_RCC_SetAHBPrescaler>:
{
 800d0ea:	b480      	push	{r7}
 800d0ec:	b083      	sub	sp, #12
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800d0f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d0fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d0fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4313      	orrs	r3, r2
 800d106:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800d10a:	bf00      	nop
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <LL_RCC_SetAHB4Prescaler>:
{
 800d116:	b480      	push	{r7}
 800d118:	b083      	sub	sp, #12
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800d11e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d122:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d126:	f023 020f 	bic.w	r2, r3, #15
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	091b      	lsrs	r3, r3, #4
 800d12e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d132:	4313      	orrs	r3, r2
 800d134:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <LL_RCC_SetAPB1Prescaler>:
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800d14c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	608b      	str	r3, [r1, #8]
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <LL_RCC_SetAPB2Prescaler>:
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800d174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d17e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4313      	orrs	r3, r2
 800d186:	608b      	str	r3, [r1, #8]
}
 800d188:	bf00      	nop
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <LL_RCC_GetAHBPrescaler>:
{
 800d194:	b480      	push	{r7}
 800d196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800d198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <LL_RCC_GetAHB4Prescaler>:
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800d1b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d1b8:	011b      	lsls	r3, r3, #4
 800d1ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <LL_RCC_GetAPB1Prescaler>:
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800d1cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <LL_RCC_GetAPB2Prescaler>:
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800d1e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800d1fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d20a:	6013      	str	r3, [r2, #0]
}
 800d20c:	bf00      	nop
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr

0800d216 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800d216:	b480      	push	{r7}
 800d218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800d21a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d224:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d228:	6013      	str	r3, [r2, #0]
}
 800d22a:	bf00      	nop
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800d234:	b480      	push	{r7}
 800d236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800d238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d246:	d101      	bne.n	800d24c <LL_RCC_PLL_IsReady+0x18>
 800d248:	2301      	movs	r3, #1
 800d24a:	e000      	b.n	800d24e <LL_RCC_PLL_IsReady+0x1a>
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800d258:	b480      	push	{r7}
 800d25a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800d25c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	0a1b      	lsrs	r3, r3, #8
 800d264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800d268:	4618      	mov	r0, r3
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800d272:	b480      	push	{r7}
 800d274:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800d276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800d280:	4618      	mov	r0, r3
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800d28a:	b480      	push	{r7}
 800d28c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800d28e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800d298:	4618      	mov	r0, r3
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800d2a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	f003 0303 	and.w	r3, r3, #3
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800d2ba:	b480      	push	{r7}
 800d2bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800d2be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d2c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2cc:	d101      	bne.n	800d2d2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800d2de:	b480      	push	{r7}
 800d2e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800d2e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d2ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2f2:	d101      	bne.n	800d2f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	e000      	b.n	800d2fa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800d304:	b480      	push	{r7}
 800d306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800d308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d30c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d318:	d101      	bne.n	800d31e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800d31a:	2301      	movs	r3, #1
 800d31c:	e000      	b.n	800d320 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800d32a:	b480      	push	{r7}
 800d32c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800d32e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d33c:	d101      	bne.n	800d342 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800d33e:	2301      	movs	r3, #1
 800d340:	e000      	b.n	800d344 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr

0800d34e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800d34e:	b480      	push	{r7}
 800d350:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800d352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d35c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d360:	d101      	bne.n	800d366 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800d362:	2301      	movs	r3, #1
 800d364:	e000      	b.n	800d368 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
	...

0800d374 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d374:	b590      	push	{r4, r7, lr}
 800d376:	b08d      	sub	sp, #52	@ 0x34
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d101      	bne.n	800d386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	e363      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f003 0320 	and.w	r3, r3, #32
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f000 808d 	beq.w	800d4ae <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d394:	f7ff fe89 	bl	800d0aa <LL_RCC_GetSysClkSource>
 800d398:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d39a:	f7ff ff82 	bl	800d2a2 <LL_RCC_PLL_GetMainSource>
 800d39e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d005      	beq.n	800d3b2 <HAL_RCC_OscConfig+0x3e>
 800d3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a8:	2b0c      	cmp	r3, #12
 800d3aa:	d147      	bne.n	800d43c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800d3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d144      	bne.n	800d43c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	69db      	ldr	r3, [r3, #28]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d101      	bne.n	800d3be <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e347      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d3c2:	f7ff fe34 	bl	800d02e <LL_RCC_MSI_GetRange>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	429c      	cmp	r4, r3
 800d3ca:	d914      	bls.n	800d3f6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f000 fd2f 	bl	800de34 <RCC_SetFlashLatencyFromMSIRange>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e336      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff fe0e 	bl	800d006 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7ff fe32 	bl	800d058 <LL_RCC_MSI_SetCalibTrimming>
 800d3f4:	e013      	b.n	800d41e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff fe03 	bl	800d006 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a1b      	ldr	r3, [r3, #32]
 800d404:	4618      	mov	r0, r3
 800d406:	f7ff fe27 	bl	800d058 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 fd10 	bl	800de34 <RCC_SetFlashLatencyFromMSIRange>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e317      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d41e:	f000 fcc9 	bl	800ddb4 <HAL_RCC_GetHCLKFreq>
 800d422:	4603      	mov	r3, r0
 800d424:	4aa4      	ldr	r2, [pc, #656]	@ (800d6b8 <HAL_RCC_OscConfig+0x344>)
 800d426:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d428:	4ba4      	ldr	r3, [pc, #656]	@ (800d6bc <HAL_RCC_OscConfig+0x348>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fa fef7 	bl	8008220 <HAL_InitTick>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d039      	beq.n	800d4ac <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	e308      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	69db      	ldr	r3, [r3, #28]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d01e      	beq.n	800d482 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d444:	f7ff fdb0 	bl	800cfa8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d448:	f7fa ff38 	bl	80082bc <HAL_GetTick>
 800d44c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800d44e:	e008      	b.n	800d462 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d450:	f7fa ff34 	bl	80082bc <HAL_GetTick>
 800d454:	4602      	mov	r2, r0
 800d456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d901      	bls.n	800d462 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800d45e:	2303      	movs	r3, #3
 800d460:	e2f5      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800d462:	f7ff fdbf 	bl	800cfe4 <LL_RCC_MSI_IsReady>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d0f1      	beq.n	800d450 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff fdc8 	bl	800d006 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a1b      	ldr	r3, [r3, #32]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff fdec 	bl	800d058 <LL_RCC_MSI_SetCalibTrimming>
 800d480:	e015      	b.n	800d4ae <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d482:	f7ff fda0 	bl	800cfc6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d486:	f7fa ff19 	bl	80082bc <HAL_GetTick>
 800d48a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800d48c:	e008      	b.n	800d4a0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d48e:	f7fa ff15 	bl	80082bc <HAL_GetTick>
 800d492:	4602      	mov	r2, r0
 800d494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d901      	bls.n	800d4a0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800d49c:	2303      	movs	r3, #3
 800d49e:	e2d6      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800d4a0:	f7ff fda0 	bl	800cfe4 <LL_RCC_MSI_IsReady>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1f1      	bne.n	800d48e <HAL_RCC_OscConfig+0x11a>
 800d4aa:	e000      	b.n	800d4ae <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d4ac:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d047      	beq.n	800d54a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d4ba:	f7ff fdf6 	bl	800d0aa <LL_RCC_GetSysClkSource>
 800d4be:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d4c0:	f7ff feef 	bl	800d2a2 <LL_RCC_PLL_GetMainSource>
 800d4c4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	2b08      	cmp	r3, #8
 800d4ca:	d005      	beq.n	800d4d8 <HAL_RCC_OscConfig+0x164>
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
 800d4ce:	2b0c      	cmp	r3, #12
 800d4d0:	d108      	bne.n	800d4e4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	2b03      	cmp	r3, #3
 800d4d6:	d105      	bne.n	800d4e4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d134      	bne.n	800d54a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e2b4      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4ec:	d102      	bne.n	800d4f4 <HAL_RCC_OscConfig+0x180>
 800d4ee:	f7ff fbdd 	bl	800ccac <LL_RCC_HSE_Enable>
 800d4f2:	e001      	b.n	800d4f8 <HAL_RCC_OscConfig+0x184>
 800d4f4:	f7ff fbe9 	bl	800ccca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d012      	beq.n	800d526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d500:	f7fa fedc 	bl	80082bc <HAL_GetTick>
 800d504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800d506:	e008      	b.n	800d51a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d508:	f7fa fed8 	bl	80082bc <HAL_GetTick>
 800d50c:	4602      	mov	r2, r0
 800d50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d510:	1ad3      	subs	r3, r2, r3
 800d512:	2b64      	cmp	r3, #100	@ 0x64
 800d514:	d901      	bls.n	800d51a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d516:	2303      	movs	r3, #3
 800d518:	e299      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800d51a:	f7ff fbe5 	bl	800cce8 <LL_RCC_HSE_IsReady>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d0f1      	beq.n	800d508 <HAL_RCC_OscConfig+0x194>
 800d524:	e011      	b.n	800d54a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d526:	f7fa fec9 	bl	80082bc <HAL_GetTick>
 800d52a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800d52c:	e008      	b.n	800d540 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d52e:	f7fa fec5 	bl	80082bc <HAL_GetTick>
 800d532:	4602      	mov	r2, r0
 800d534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	2b64      	cmp	r3, #100	@ 0x64
 800d53a:	d901      	bls.n	800d540 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800d53c:	2303      	movs	r3, #3
 800d53e:	e286      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800d540:	f7ff fbd2 	bl	800cce8 <LL_RCC_HSE_IsReady>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1f1      	bne.n	800d52e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f003 0302 	and.w	r3, r3, #2
 800d552:	2b00      	cmp	r3, #0
 800d554:	d04c      	beq.n	800d5f0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d556:	f7ff fda8 	bl	800d0aa <LL_RCC_GetSysClkSource>
 800d55a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d55c:	f7ff fea1 	bl	800d2a2 <LL_RCC_PLL_GetMainSource>
 800d560:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	2b04      	cmp	r3, #4
 800d566:	d005      	beq.n	800d574 <HAL_RCC_OscConfig+0x200>
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	2b0c      	cmp	r3, #12
 800d56c:	d10e      	bne.n	800d58c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2b02      	cmp	r3, #2
 800d572:	d10b      	bne.n	800d58c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d101      	bne.n	800d580 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800d57c:	2301      	movs	r3, #1
 800d57e:	e266      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff fbf1 	bl	800cd6c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d58a:	e031      	b.n	800d5f0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d019      	beq.n	800d5c8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d594:	f7ff fbba 	bl	800cd0c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d598:	f7fa fe90 	bl	80082bc <HAL_GetTick>
 800d59c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800d59e:	e008      	b.n	800d5b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d5a0:	f7fa fe8c 	bl	80082bc <HAL_GetTick>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d901      	bls.n	800d5b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d5ae:	2303      	movs	r3, #3
 800d5b0:	e24d      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800d5b2:	f7ff fbc9 	bl	800cd48 <LL_RCC_HSI_IsReady>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d0f1      	beq.n	800d5a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7ff fbd3 	bl	800cd6c <LL_RCC_HSI_SetCalibTrimming>
 800d5c6:	e013      	b.n	800d5f0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d5c8:	f7ff fbaf 	bl	800cd2a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5cc:	f7fa fe76 	bl	80082bc <HAL_GetTick>
 800d5d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800d5d2:	e008      	b.n	800d5e6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d5d4:	f7fa fe72 	bl	80082bc <HAL_GetTick>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d901      	bls.n	800d5e6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	e233      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800d5e6:	f7ff fbaf 	bl	800cd48 <LL_RCC_HSI_IsReady>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1f1      	bne.n	800d5d4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 0308 	and.w	r3, r3, #8
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d106      	bne.n	800d60a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 80a3 	beq.w	800d750 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d076      	beq.n	800d700 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f003 0310 	and.w	r3, r3, #16
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d046      	beq.n	800d6ac <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800d61e:	f7ff fc66 	bl	800ceee <LL_RCC_LSI1_IsReady>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d113      	bne.n	800d650 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800d628:	f7ff fc3f 	bl	800ceaa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d62c:	f7fa fe46 	bl	80082bc <HAL_GetTick>
 800d630:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d632:	e008      	b.n	800d646 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d634:	f7fa fe42 	bl	80082bc <HAL_GetTick>
 800d638:	4602      	mov	r2, r0
 800d63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d63c:	1ad3      	subs	r3, r2, r3
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d901      	bls.n	800d646 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800d642:	2303      	movs	r3, #3
 800d644:	e203      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d646:	f7ff fc52 	bl	800ceee <LL_RCC_LSI1_IsReady>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d0f1      	beq.n	800d634 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800d650:	f7ff fc5f 	bl	800cf12 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d654:	f7fa fe32 	bl	80082bc <HAL_GetTick>
 800d658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d65a:	e008      	b.n	800d66e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d65c:	f7fa fe2e 	bl	80082bc <HAL_GetTick>
 800d660:	4602      	mov	r2, r0
 800d662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	2b03      	cmp	r3, #3
 800d668:	d901      	bls.n	800d66e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800d66a:	2303      	movs	r3, #3
 800d66c:	e1ef      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d66e:	f7ff fc72 	bl	800cf56 <LL_RCC_LSI2_IsReady>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d0f1      	beq.n	800d65c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7ff fc7c 	bl	800cf7a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800d682:	f7ff fc23 	bl	800cecc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d686:	f7fa fe19 	bl	80082bc <HAL_GetTick>
 800d68a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d68c:	e008      	b.n	800d6a0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d68e:	f7fa fe15 	bl	80082bc <HAL_GetTick>
 800d692:	4602      	mov	r2, r0
 800d694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d696:	1ad3      	subs	r3, r2, r3
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d901      	bls.n	800d6a0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800d69c:	2303      	movs	r3, #3
 800d69e:	e1d6      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d6a0:	f7ff fc25 	bl	800ceee <LL_RCC_LSI1_IsReady>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1f1      	bne.n	800d68e <HAL_RCC_OscConfig+0x31a>
 800d6aa:	e051      	b.n	800d750 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800d6ac:	f7ff fbfd 	bl	800ceaa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6b0:	f7fa fe04 	bl	80082bc <HAL_GetTick>
 800d6b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d6b6:	e00c      	b.n	800d6d2 <HAL_RCC_OscConfig+0x35e>
 800d6b8:	2000002c 	.word	0x2000002c
 800d6bc:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d6c0:	f7fa fdfc 	bl	80082bc <HAL_GetTick>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d901      	bls.n	800d6d2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	e1bd      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d6d2:	f7ff fc0c 	bl	800ceee <LL_RCC_LSI1_IsReady>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d0f1      	beq.n	800d6c0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800d6dc:	f7ff fc2a 	bl	800cf34 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d6e0:	e008      	b.n	800d6f4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d6e2:	f7fa fdeb 	bl	80082bc <HAL_GetTick>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d901      	bls.n	800d6f4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e1ac      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d6f4:	f7ff fc2f 	bl	800cf56 <LL_RCC_LSI2_IsReady>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1f1      	bne.n	800d6e2 <HAL_RCC_OscConfig+0x36e>
 800d6fe:	e027      	b.n	800d750 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800d700:	f7ff fc18 	bl	800cf34 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d704:	f7fa fdda 	bl	80082bc <HAL_GetTick>
 800d708:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d70a:	e008      	b.n	800d71e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d70c:	f7fa fdd6 	bl	80082bc <HAL_GetTick>
 800d710:	4602      	mov	r2, r0
 800d712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	2b03      	cmp	r3, #3
 800d718:	d901      	bls.n	800d71e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800d71a:	2303      	movs	r3, #3
 800d71c:	e197      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d71e:	f7ff fc1a 	bl	800cf56 <LL_RCC_LSI2_IsReady>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1f1      	bne.n	800d70c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800d728:	f7ff fbd0 	bl	800cecc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d72c:	f7fa fdc6 	bl	80082bc <HAL_GetTick>
 800d730:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d732:	e008      	b.n	800d746 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d734:	f7fa fdc2 	bl	80082bc <HAL_GetTick>
 800d738:	4602      	mov	r2, r0
 800d73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d901      	bls.n	800d746 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800d742:	2303      	movs	r3, #3
 800d744:	e183      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d746:	f7ff fbd2 	bl	800ceee <LL_RCC_LSI1_IsReady>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1f1      	bne.n	800d734 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f003 0304 	and.w	r3, r3, #4
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d05b      	beq.n	800d814 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d75c:	4ba7      	ldr	r3, [pc, #668]	@ (800d9fc <HAL_RCC_OscConfig+0x688>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d764:	2b00      	cmp	r3, #0
 800d766:	d114      	bne.n	800d792 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d768:	f7ff fa60 	bl	800cc2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d76c:	f7fa fda6 	bl	80082bc <HAL_GetTick>
 800d770:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d772:	e008      	b.n	800d786 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d774:	f7fa fda2 	bl	80082bc <HAL_GetTick>
 800d778:	4602      	mov	r2, r0
 800d77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	2b02      	cmp	r3, #2
 800d780:	d901      	bls.n	800d786 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800d782:	2303      	movs	r3, #3
 800d784:	e163      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d786:	4b9d      	ldr	r3, [pc, #628]	@ (800d9fc <HAL_RCC_OscConfig+0x688>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0f0      	beq.n	800d774 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	2b01      	cmp	r3, #1
 800d798:	d102      	bne.n	800d7a0 <HAL_RCC_OscConfig+0x42c>
 800d79a:	f7ff fb30 	bl	800cdfe <LL_RCC_LSE_Enable>
 800d79e:	e00c      	b.n	800d7ba <HAL_RCC_OscConfig+0x446>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	2b05      	cmp	r3, #5
 800d7a6:	d104      	bne.n	800d7b2 <HAL_RCC_OscConfig+0x43e>
 800d7a8:	f7ff fb4b 	bl	800ce42 <LL_RCC_LSE_EnableBypass>
 800d7ac:	f7ff fb27 	bl	800cdfe <LL_RCC_LSE_Enable>
 800d7b0:	e003      	b.n	800d7ba <HAL_RCC_OscConfig+0x446>
 800d7b2:	f7ff fb35 	bl	800ce20 <LL_RCC_LSE_Disable>
 800d7b6:	f7ff fb55 	bl	800ce64 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d014      	beq.n	800d7ec <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7c2:	f7fa fd7b 	bl	80082bc <HAL_GetTick>
 800d7c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800d7c8:	e00a      	b.n	800d7e0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7ca:	f7fa fd77 	bl	80082bc <HAL_GetTick>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d901      	bls.n	800d7e0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800d7dc:	2303      	movs	r3, #3
 800d7de:	e136      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800d7e0:	f7ff fb51 	bl	800ce86 <LL_RCC_LSE_IsReady>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d0ef      	beq.n	800d7ca <HAL_RCC_OscConfig+0x456>
 800d7ea:	e013      	b.n	800d814 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7ec:	f7fa fd66 	bl	80082bc <HAL_GetTick>
 800d7f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800d7f2:	e00a      	b.n	800d80a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7f4:	f7fa fd62 	bl	80082bc <HAL_GetTick>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d802:	4293      	cmp	r3, r2
 800d804:	d901      	bls.n	800d80a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800d806:	2303      	movs	r3, #3
 800d808:	e121      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800d80a:	f7ff fb3c 	bl	800ce86 <LL_RCC_LSE_IsReady>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1ef      	bne.n	800d7f4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d02c      	beq.n	800d87a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d824:	2b00      	cmp	r3, #0
 800d826:	d014      	beq.n	800d852 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d828:	f7ff fab5 	bl	800cd96 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d82c:	f7fa fd46 	bl	80082bc <HAL_GetTick>
 800d830:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d832:	e008      	b.n	800d846 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d834:	f7fa fd42 	bl	80082bc <HAL_GetTick>
 800d838:	4602      	mov	r2, r0
 800d83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d901      	bls.n	800d846 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800d842:	2303      	movs	r3, #3
 800d844:	e103      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d846:	f7ff fac8 	bl	800cdda <LL_RCC_HSI48_IsReady>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d0f1      	beq.n	800d834 <HAL_RCC_OscConfig+0x4c0>
 800d850:	e013      	b.n	800d87a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d852:	f7ff fab1 	bl	800cdb8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d856:	f7fa fd31 	bl	80082bc <HAL_GetTick>
 800d85a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d85c:	e008      	b.n	800d870 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d85e:	f7fa fd2d 	bl	80082bc <HAL_GetTick>
 800d862:	4602      	mov	r2, r0
 800d864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d866:	1ad3      	subs	r3, r2, r3
 800d868:	2b02      	cmp	r3, #2
 800d86a:	d901      	bls.n	800d870 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800d86c:	2303      	movs	r3, #3
 800d86e:	e0ee      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d870:	f7ff fab3 	bl	800cdda <LL_RCC_HSI48_IsReady>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d1f1      	bne.n	800d85e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f000 80e4 	beq.w	800da4c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d884:	f7ff fc11 	bl	800d0aa <LL_RCC_GetSysClkSource>
 800d888:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800d88a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d896:	2b02      	cmp	r3, #2
 800d898:	f040 80b4 	bne.w	800da04 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f003 0203 	and.w	r2, r3, #3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d123      	bne.n	800d8f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d11c      	bne.n	800d8f2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	0a1b      	lsrs	r3, r3, #8
 800d8bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d114      	bne.n	800d8f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d10d      	bne.n	800d8f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d106      	bne.n	800d8f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d05d      	beq.n	800d9ae <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	2b0c      	cmp	r3, #12
 800d8f6:	d058      	beq.n	800d9aa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d8f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800d906:	2301      	movs	r3, #1
 800d908:	e0a1      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d90a:	f7ff fc84 	bl	800d216 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d90e:	f7fa fcd5 	bl	80082bc <HAL_GetTick>
 800d912:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d914:	e008      	b.n	800d928 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d916:	f7fa fcd1 	bl	80082bc <HAL_GetTick>
 800d91a:	4602      	mov	r2, r0
 800d91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	2b02      	cmp	r3, #2
 800d922:	d901      	bls.n	800d928 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800d924:	2303      	movs	r3, #3
 800d926:	e092      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1ef      	bne.n	800d916 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d93a:	68da      	ldr	r2, [r3, #12]
 800d93c:	4b30      	ldr	r3, [pc, #192]	@ (800da00 <HAL_RCC_OscConfig+0x68c>)
 800d93e:	4013      	ands	r3, r2
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d948:	4311      	orrs	r1, r2
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d94e:	0212      	lsls	r2, r2, #8
 800d950:	4311      	orrs	r1, r2
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d956:	4311      	orrs	r1, r2
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800d95c:	4311      	orrs	r1, r2
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800d962:	430a      	orrs	r2, r1
 800d964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d968:	4313      	orrs	r3, r2
 800d96a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d96c:	f7ff fc44 	bl	800d1f8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d97a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d97e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d980:	f7fa fc9c 	bl	80082bc <HAL_GetTick>
 800d984:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d986:	e008      	b.n	800d99a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d988:	f7fa fc98 	bl	80082bc <HAL_GetTick>
 800d98c:	4602      	mov	r2, r0
 800d98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	2b02      	cmp	r3, #2
 800d994:	d901      	bls.n	800d99a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800d996:	2303      	movs	r3, #3
 800d998:	e059      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d99a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d0ef      	beq.n	800d988 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d9a8:	e050      	b.n	800da4c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e04f      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d147      	bne.n	800da4c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d9bc:	f7ff fc1c 	bl	800d1f8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d9c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d9ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d9ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d9d0:	f7fa fc74 	bl	80082bc <HAL_GetTick>
 800d9d4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9d6:	e008      	b.n	800d9ea <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d9d8:	f7fa fc70 	bl	80082bc <HAL_GetTick>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	2b02      	cmp	r3, #2
 800d9e4:	d901      	bls.n	800d9ea <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800d9e6:	2303      	movs	r3, #3
 800d9e8:	e031      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d0ef      	beq.n	800d9d8 <HAL_RCC_OscConfig+0x664>
 800d9f8:	e028      	b.n	800da4c <HAL_RCC_OscConfig+0x6d8>
 800d9fa:	bf00      	nop
 800d9fc:	58000400 	.word	0x58000400
 800da00:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	2b0c      	cmp	r3, #12
 800da08:	d01e      	beq.n	800da48 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da0a:	f7ff fc04 	bl	800d216 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da0e:	f7fa fc55 	bl	80082bc <HAL_GetTick>
 800da12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800da14:	e008      	b.n	800da28 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800da16:	f7fa fc51 	bl	80082bc <HAL_GetTick>
 800da1a:	4602      	mov	r2, r0
 800da1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	2b02      	cmp	r3, #2
 800da22:	d901      	bls.n	800da28 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800da24:	2303      	movs	r3, #3
 800da26:	e012      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800da28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1ef      	bne.n	800da16 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800da36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800da3a:	68da      	ldr	r2, [r3, #12]
 800da3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800da40:	4b05      	ldr	r3, [pc, #20]	@ (800da58 <HAL_RCC_OscConfig+0x6e4>)
 800da42:	4013      	ands	r3, r2
 800da44:	60cb      	str	r3, [r1, #12]
 800da46:	e001      	b.n	800da4c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800da48:	2301      	movs	r3, #1
 800da4a:	e000      	b.n	800da4e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3734      	adds	r7, #52	@ 0x34
 800da52:	46bd      	mov	sp, r7
 800da54:	bd90      	pop	{r4, r7, pc}
 800da56:	bf00      	nop
 800da58:	eefefffc 	.word	0xeefefffc

0800da5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da6c:	2301      	movs	r3, #1
 800da6e:	e12d      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800da70:	4b98      	ldr	r3, [pc, #608]	@ (800dcd4 <HAL_RCC_ClockConfig+0x278>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f003 0307 	and.w	r3, r3, #7
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d91b      	bls.n	800dab6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da7e:	4b95      	ldr	r3, [pc, #596]	@ (800dcd4 <HAL_RCC_ClockConfig+0x278>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f023 0207 	bic.w	r2, r3, #7
 800da86:	4993      	ldr	r1, [pc, #588]	@ (800dcd4 <HAL_RCC_ClockConfig+0x278>)
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da8e:	f7fa fc15 	bl	80082bc <HAL_GetTick>
 800da92:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da94:	e008      	b.n	800daa8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800da96:	f7fa fc11 	bl	80082bc <HAL_GetTick>
 800da9a:	4602      	mov	r2, r0
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	1ad3      	subs	r3, r2, r3
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d901      	bls.n	800daa8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800daa4:	2303      	movs	r3, #3
 800daa6:	e111      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800daa8:	4b8a      	ldr	r3, [pc, #552]	@ (800dcd4 <HAL_RCC_ClockConfig+0x278>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f003 0307 	and.w	r3, r3, #7
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d1ef      	bne.n	800da96 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f003 0302 	and.w	r3, r3, #2
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d016      	beq.n	800daf0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7ff fafb 	bl	800d0c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800dacc:	f7fa fbf6 	bl	80082bc <HAL_GetTick>
 800dad0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800dad2:	e008      	b.n	800dae6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dad4:	f7fa fbf2 	bl	80082bc <HAL_GetTick>
 800dad8:	4602      	mov	r2, r0
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	1ad3      	subs	r3, r2, r3
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d901      	bls.n	800dae6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800dae2:	2303      	movs	r3, #3
 800dae4:	e0f2      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800dae6:	f7ff fbe8 	bl	800d2ba <LL_RCC_IsActiveFlag_HPRE>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d0f1      	beq.n	800dad4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f003 0320 	and.w	r3, r3, #32
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d016      	beq.n	800db2a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	4618      	mov	r0, r3
 800db02:	f7ff faf2 	bl	800d0ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800db06:	f7fa fbd9 	bl	80082bc <HAL_GetTick>
 800db0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800db0c:	e008      	b.n	800db20 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800db0e:	f7fa fbd5 	bl	80082bc <HAL_GetTick>
 800db12:	4602      	mov	r2, r0
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	1ad3      	subs	r3, r2, r3
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d901      	bls.n	800db20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800db1c:	2303      	movs	r3, #3
 800db1e:	e0d5      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800db20:	f7ff fbdd 	bl	800d2de <LL_RCC_IsActiveFlag_C2HPRE>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d0f1      	beq.n	800db0e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db32:	2b00      	cmp	r3, #0
 800db34:	d016      	beq.n	800db64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	699b      	ldr	r3, [r3, #24]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7ff faeb 	bl	800d116 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800db40:	f7fa fbbc 	bl	80082bc <HAL_GetTick>
 800db44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800db46:	e008      	b.n	800db5a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800db48:	f7fa fbb8 	bl	80082bc <HAL_GetTick>
 800db4c:	4602      	mov	r2, r0
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	1ad3      	subs	r3, r2, r3
 800db52:	2b02      	cmp	r3, #2
 800db54:	d901      	bls.n	800db5a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800db56:	2303      	movs	r3, #3
 800db58:	e0b8      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800db5a:	f7ff fbd3 	bl	800d304 <LL_RCC_IsActiveFlag_SHDHPRE>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d0f1      	beq.n	800db48 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f003 0304 	and.w	r3, r3, #4
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d016      	beq.n	800db9e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	4618      	mov	r0, r3
 800db76:	f7ff fae5 	bl	800d144 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800db7a:	f7fa fb9f 	bl	80082bc <HAL_GetTick>
 800db7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800db80:	e008      	b.n	800db94 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800db82:	f7fa fb9b 	bl	80082bc <HAL_GetTick>
 800db86:	4602      	mov	r2, r0
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	1ad3      	subs	r3, r2, r3
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d901      	bls.n	800db94 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800db90:	2303      	movs	r3, #3
 800db92:	e09b      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800db94:	f7ff fbc9 	bl	800d32a <LL_RCC_IsActiveFlag_PPRE1>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d0f1      	beq.n	800db82 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 0308 	and.w	r3, r3, #8
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d017      	beq.n	800dbda <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	00db      	lsls	r3, r3, #3
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff fadb 	bl	800d16c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800dbb6:	f7fa fb81 	bl	80082bc <HAL_GetTick>
 800dbba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800dbbc:	e008      	b.n	800dbd0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dbbe:	f7fa fb7d 	bl	80082bc <HAL_GetTick>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d901      	bls.n	800dbd0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800dbcc:	2303      	movs	r3, #3
 800dbce:	e07d      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800dbd0:	f7ff fbbd 	bl	800d34e <LL_RCC_IsActiveFlag_PPRE2>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d0f1      	beq.n	800dbbe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f003 0301 	and.w	r3, r3, #1
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d043      	beq.n	800dc6e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d106      	bne.n	800dbfc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800dbee:	f7ff f87b 	bl	800cce8 <LL_RCC_HSE_IsReady>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d11e      	bne.n	800dc36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e067      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	2b03      	cmp	r3, #3
 800dc02:	d106      	bne.n	800dc12 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800dc04:	f7ff fb16 	bl	800d234 <LL_RCC_PLL_IsReady>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d113      	bne.n	800dc36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e05c      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d106      	bne.n	800dc28 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800dc1a:	f7ff f9e3 	bl	800cfe4 <LL_RCC_MSI_IsReady>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d108      	bne.n	800dc36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e051      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800dc28:	f7ff f88e 	bl	800cd48 <LL_RCC_HSI_IsReady>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d101      	bne.n	800dc36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e04a      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7ff fa21 	bl	800d082 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc40:	f7fa fb3c 	bl	80082bc <HAL_GetTick>
 800dc44:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc46:	e00a      	b.n	800dc5e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc48:	f7fa fb38 	bl	80082bc <HAL_GetTick>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d901      	bls.n	800dc5e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	e036      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc5e:	f7ff fa24 	bl	800d0aa <LL_RCC_GetSysClkSource>
 800dc62:	4602      	mov	r2, r0
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d1ec      	bne.n	800dc48 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dc6e:	4b19      	ldr	r3, [pc, #100]	@ (800dcd4 <HAL_RCC_ClockConfig+0x278>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f003 0307 	and.w	r3, r3, #7
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d21b      	bcs.n	800dcb4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc7c:	4b15      	ldr	r3, [pc, #84]	@ (800dcd4 <HAL_RCC_ClockConfig+0x278>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f023 0207 	bic.w	r2, r3, #7
 800dc84:	4913      	ldr	r1, [pc, #76]	@ (800dcd4 <HAL_RCC_ClockConfig+0x278>)
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc8c:	f7fa fb16 	bl	80082bc <HAL_GetTick>
 800dc90:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc92:	e008      	b.n	800dca6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800dc94:	f7fa fb12 	bl	80082bc <HAL_GetTick>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d901      	bls.n	800dca6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800dca2:	2303      	movs	r3, #3
 800dca4:	e012      	b.n	800dccc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dca6:	4b0b      	ldr	r3, [pc, #44]	@ (800dcd4 <HAL_RCC_ClockConfig+0x278>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f003 0307 	and.w	r3, r3, #7
 800dcae:	683a      	ldr	r2, [r7, #0]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d1ef      	bne.n	800dc94 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800dcb4:	f000 f87e 	bl	800ddb4 <HAL_RCC_GetHCLKFreq>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	4a07      	ldr	r2, [pc, #28]	@ (800dcd8 <HAL_RCC_ClockConfig+0x27c>)
 800dcbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800dcbe:	f7fa fb09 	bl	80082d4 <HAL_GetTickPrio>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fa faab 	bl	8008220 <HAL_InitTick>
 800dcca:	4603      	mov	r3, r0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3710      	adds	r7, #16
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	58004000 	.word	0x58004000
 800dcd8:	2000002c 	.word	0x2000002c

0800dcdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dcdc:	b590      	push	{r4, r7, lr}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dce2:	f7ff f9e2 	bl	800d0aa <LL_RCC_GetSysClkSource>
 800dce6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d10a      	bne.n	800dd04 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800dcee:	f7ff f99e 	bl	800d02e <LL_RCC_MSI_GetRange>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	091b      	lsrs	r3, r3, #4
 800dcf6:	f003 030f 	and.w	r3, r3, #15
 800dcfa:	4a2b      	ldr	r2, [pc, #172]	@ (800dda8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800dcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd00:	60fb      	str	r3, [r7, #12]
 800dd02:	e04b      	b.n	800dd9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2b04      	cmp	r3, #4
 800dd08:	d102      	bne.n	800dd10 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dd0a:	4b28      	ldr	r3, [pc, #160]	@ (800ddac <HAL_RCC_GetSysClockFreq+0xd0>)
 800dd0c:	60fb      	str	r3, [r7, #12]
 800dd0e:	e045      	b.n	800dd9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b08      	cmp	r3, #8
 800dd14:	d10a      	bne.n	800dd2c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800dd16:	f7fe ffb7 	bl	800cc88 <LL_RCC_HSE_IsEnabledDiv2>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d102      	bne.n	800dd26 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800dd20:	4b22      	ldr	r3, [pc, #136]	@ (800ddac <HAL_RCC_GetSysClockFreq+0xd0>)
 800dd22:	60fb      	str	r3, [r7, #12]
 800dd24:	e03a      	b.n	800dd9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800dd26:	4b22      	ldr	r3, [pc, #136]	@ (800ddb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800dd28:	60fb      	str	r3, [r7, #12]
 800dd2a:	e037      	b.n	800dd9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800dd2c:	f7ff fab9 	bl	800d2a2 <LL_RCC_PLL_GetMainSource>
 800dd30:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d003      	beq.n	800dd40 <HAL_RCC_GetSysClockFreq+0x64>
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d003      	beq.n	800dd46 <HAL_RCC_GetSysClockFreq+0x6a>
 800dd3e:	e00d      	b.n	800dd5c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800dd40:	4b1a      	ldr	r3, [pc, #104]	@ (800ddac <HAL_RCC_GetSysClockFreq+0xd0>)
 800dd42:	60bb      	str	r3, [r7, #8]
        break;
 800dd44:	e015      	b.n	800dd72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800dd46:	f7fe ff9f 	bl	800cc88 <LL_RCC_HSE_IsEnabledDiv2>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d102      	bne.n	800dd56 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800dd50:	4b16      	ldr	r3, [pc, #88]	@ (800ddac <HAL_RCC_GetSysClockFreq+0xd0>)
 800dd52:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800dd54:	e00d      	b.n	800dd72 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800dd56:	4b16      	ldr	r3, [pc, #88]	@ (800ddb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800dd58:	60bb      	str	r3, [r7, #8]
        break;
 800dd5a:	e00a      	b.n	800dd72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800dd5c:	f7ff f967 	bl	800d02e <LL_RCC_MSI_GetRange>
 800dd60:	4603      	mov	r3, r0
 800dd62:	091b      	lsrs	r3, r3, #4
 800dd64:	f003 030f 	and.w	r3, r3, #15
 800dd68:	4a0f      	ldr	r2, [pc, #60]	@ (800dda8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800dd6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd6e:	60bb      	str	r3, [r7, #8]
        break;
 800dd70:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800dd72:	f7ff fa71 	bl	800d258 <LL_RCC_PLL_GetN>
 800dd76:	4602      	mov	r2, r0
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	fb03 f402 	mul.w	r4, r3, r2
 800dd7e:	f7ff fa84 	bl	800d28a <LL_RCC_PLL_GetDivider>
 800dd82:	4603      	mov	r3, r0
 800dd84:	091b      	lsrs	r3, r3, #4
 800dd86:	3301      	adds	r3, #1
 800dd88:	fbb4 f4f3 	udiv	r4, r4, r3
 800dd8c:	f7ff fa71 	bl	800d272 <LL_RCC_PLL_GetR>
 800dd90:	4603      	mov	r3, r0
 800dd92:	0f5b      	lsrs	r3, r3, #29
 800dd94:	3301      	adds	r3, #1
 800dd96:	fbb4 f3f3 	udiv	r3, r4, r3
 800dd9a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd90      	pop	{r4, r7, pc}
 800dda6:	bf00      	nop
 800dda8:	080231c8 	.word	0x080231c8
 800ddac:	00f42400 	.word	0x00f42400
 800ddb0:	01e84800 	.word	0x01e84800

0800ddb4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ddb4:	b598      	push	{r3, r4, r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ddb8:	f7ff ff90 	bl	800dcdc <HAL_RCC_GetSysClockFreq>
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	f7ff f9e9 	bl	800d194 <LL_RCC_GetAHBPrescaler>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	091b      	lsrs	r3, r3, #4
 800ddc6:	f003 030f 	and.w	r3, r3, #15
 800ddca:	4a03      	ldr	r2, [pc, #12]	@ (800ddd8 <HAL_RCC_GetHCLKFreq+0x24>)
 800ddcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddd0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	bd98      	pop	{r3, r4, r7, pc}
 800ddd8:	08023168 	.word	0x08023168

0800dddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dddc:	b598      	push	{r3, r4, r7, lr}
 800ddde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800dde0:	f7ff ffe8 	bl	800ddb4 <HAL_RCC_GetHCLKFreq>
 800dde4:	4604      	mov	r4, r0
 800dde6:	f7ff f9ef 	bl	800d1c8 <LL_RCC_GetAPB1Prescaler>
 800ddea:	4603      	mov	r3, r0
 800ddec:	0a1b      	lsrs	r3, r3, #8
 800ddee:	f003 0307 	and.w	r3, r3, #7
 800ddf2:	4a04      	ldr	r2, [pc, #16]	@ (800de04 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ddf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddf8:	f003 031f 	and.w	r3, r3, #31
 800ddfc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800de00:	4618      	mov	r0, r3
 800de02:	bd98      	pop	{r3, r4, r7, pc}
 800de04:	080231a8 	.word	0x080231a8

0800de08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de08:	b598      	push	{r3, r4, r7, lr}
 800de0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800de0c:	f7ff ffd2 	bl	800ddb4 <HAL_RCC_GetHCLKFreq>
 800de10:	4604      	mov	r4, r0
 800de12:	f7ff f9e5 	bl	800d1e0 <LL_RCC_GetAPB2Prescaler>
 800de16:	4603      	mov	r3, r0
 800de18:	0adb      	lsrs	r3, r3, #11
 800de1a:	f003 0307 	and.w	r3, r3, #7
 800de1e:	4a04      	ldr	r2, [pc, #16]	@ (800de30 <HAL_RCC_GetPCLK2Freq+0x28>)
 800de20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de24:	f003 031f 	and.w	r3, r3, #31
 800de28:	fa24 f303 	lsr.w	r3, r4, r3
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	bd98      	pop	{r3, r4, r7, pc}
 800de30:	080231a8 	.word	0x080231a8

0800de34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800de34:	b590      	push	{r4, r7, lr}
 800de36:	b085      	sub	sp, #20
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2bb0      	cmp	r3, #176	@ 0xb0
 800de40:	d903      	bls.n	800de4a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800de42:	4b15      	ldr	r3, [pc, #84]	@ (800de98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800de44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	e007      	b.n	800de5a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	091b      	lsrs	r3, r3, #4
 800de4e:	f003 030f 	and.w	r3, r3, #15
 800de52:	4a11      	ldr	r2, [pc, #68]	@ (800de98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800de54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de58:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800de5a:	f7ff f9a7 	bl	800d1ac <LL_RCC_GetAHB4Prescaler>
 800de5e:	4603      	mov	r3, r0
 800de60:	091b      	lsrs	r3, r3, #4
 800de62:	f003 030f 	and.w	r3, r3, #15
 800de66:	4a0d      	ldr	r2, [pc, #52]	@ (800de9c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800de68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800de72:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	4a0a      	ldr	r2, [pc, #40]	@ (800dea0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800de78:	fba2 2303 	umull	r2, r3, r2, r3
 800de7c:	0c9c      	lsrs	r4, r3, #18
 800de7e:	f7fe fee5 	bl	800cc4c <HAL_PWREx_GetVoltageRange>
 800de82:	4603      	mov	r3, r0
 800de84:	4619      	mov	r1, r3
 800de86:	4620      	mov	r0, r4
 800de88:	f000 f80c 	bl	800dea4 <RCC_SetFlashLatency>
 800de8c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	bd90      	pop	{r4, r7, pc}
 800de96:	bf00      	nop
 800de98:	080231c8 	.word	0x080231c8
 800de9c:	08023168 	.word	0x08023168
 800dea0:	431bde83 	.word	0x431bde83

0800dea4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800dea4:	b590      	push	{r4, r7, lr}
 800dea6:	b093      	sub	sp, #76	@ 0x4c
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800deae:	4b37      	ldr	r3, [pc, #220]	@ (800df8c <RCC_SetFlashLatency+0xe8>)
 800deb0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800deb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800deb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800deba:	4a35      	ldr	r2, [pc, #212]	@ (800df90 <RCC_SetFlashLatency+0xec>)
 800debc:	f107 031c 	add.w	r3, r7, #28
 800dec0:	ca07      	ldmia	r2, {r0, r1, r2}
 800dec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800dec6:	4b33      	ldr	r3, [pc, #204]	@ (800df94 <RCC_SetFlashLatency+0xf0>)
 800dec8:	f107 040c 	add.w	r4, r7, #12
 800decc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ded2:	2300      	movs	r3, #0
 800ded4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dedc:	d11a      	bne.n	800df14 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800dede:	2300      	movs	r3, #0
 800dee0:	643b      	str	r3, [r7, #64]	@ 0x40
 800dee2:	e013      	b.n	800df0c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800dee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	3348      	adds	r3, #72	@ 0x48
 800deea:	443b      	add	r3, r7
 800deec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	429a      	cmp	r2, r3
 800def4:	d807      	bhi.n	800df06 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800def6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	3348      	adds	r3, #72	@ 0x48
 800defc:	443b      	add	r3, r7
 800defe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800df02:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800df04:	e020      	b.n	800df48 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800df06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df08:	3301      	adds	r3, #1
 800df0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800df0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df0e:	2b03      	cmp	r3, #3
 800df10:	d9e8      	bls.n	800dee4 <RCC_SetFlashLatency+0x40>
 800df12:	e019      	b.n	800df48 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800df14:	2300      	movs	r3, #0
 800df16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df18:	e013      	b.n	800df42 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800df1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	3348      	adds	r3, #72	@ 0x48
 800df20:	443b      	add	r3, r7
 800df22:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d807      	bhi.n	800df3c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800df2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	3348      	adds	r3, #72	@ 0x48
 800df32:	443b      	add	r3, r7
 800df34:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800df38:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800df3a:	e005      	b.n	800df48 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800df3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df3e:	3301      	adds	r3, #1
 800df40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df44:	2b02      	cmp	r3, #2
 800df46:	d9e8      	bls.n	800df1a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800df48:	4b13      	ldr	r3, [pc, #76]	@ (800df98 <RCC_SetFlashLatency+0xf4>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f023 0207 	bic.w	r2, r3, #7
 800df50:	4911      	ldr	r1, [pc, #68]	@ (800df98 <RCC_SetFlashLatency+0xf4>)
 800df52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df54:	4313      	orrs	r3, r2
 800df56:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800df58:	f7fa f9b0 	bl	80082bc <HAL_GetTick>
 800df5c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800df5e:	e008      	b.n	800df72 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800df60:	f7fa f9ac 	bl	80082bc <HAL_GetTick>
 800df64:	4602      	mov	r2, r0
 800df66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df68:	1ad3      	subs	r3, r2, r3
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	d901      	bls.n	800df72 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800df6e:	2303      	movs	r3, #3
 800df70:	e007      	b.n	800df82 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800df72:	4b09      	ldr	r3, [pc, #36]	@ (800df98 <RCC_SetFlashLatency+0xf4>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f003 0307 	and.w	r3, r3, #7
 800df7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d1ef      	bne.n	800df60 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	374c      	adds	r7, #76	@ 0x4c
 800df86:	46bd      	mov	sp, r7
 800df88:	bd90      	pop	{r4, r7, pc}
 800df8a:	bf00      	nop
 800df8c:	080213c8 	.word	0x080213c8
 800df90:	080213d8 	.word	0x080213d8
 800df94:	080213e4 	.word	0x080213e4
 800df98:	58004000 	.word	0x58004000

0800df9c <LL_RCC_LSE_IsEnabled>:
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800dfa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfa8:	f003 0301 	and.w	r3, r3, #1
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d101      	bne.n	800dfb4 <LL_RCC_LSE_IsEnabled+0x18>
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e000      	b.n	800dfb6 <LL_RCC_LSE_IsEnabled+0x1a>
 800dfb4:	2300      	movs	r3, #0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <LL_RCC_LSE_IsReady>:
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800dfc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfcc:	f003 0302 	and.w	r3, r3, #2
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d101      	bne.n	800dfd8 <LL_RCC_LSE_IsReady+0x18>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e000      	b.n	800dfda <LL_RCC_LSE_IsReady+0x1a>
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <LL_RCC_SetRFWKPClockSource>:
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800dfec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dff4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800dff8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4313      	orrs	r3, r2
 800e000:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e004:	bf00      	nop
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <LL_RCC_SetSMPSClockSource>:
{
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800e018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e01e:	f023 0203 	bic.w	r2, r3, #3
 800e022:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4313      	orrs	r3, r2
 800e02a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800e02c:	bf00      	nop
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <LL_RCC_SetSMPSPrescaler>:
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800e040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e046:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e04a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4313      	orrs	r3, r2
 800e052:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <LL_RCC_SetUSARTClockSource>:
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800e068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e070:	f023 0203 	bic.w	r2, r3, #3
 800e074:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e080:	bf00      	nop
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <LL_RCC_SetLPUARTClockSource>:
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800e094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e09c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e0a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e0ac:	bf00      	nop
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <LL_RCC_SetI2CClockSource>:
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800e0c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	091b      	lsrs	r3, r3, #4
 800e0cc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800e0d0:	43db      	mvns	r3, r3
 800e0d2:	401a      	ands	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	011b      	lsls	r3, r3, #4
 800e0d8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800e0dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e0e6:	bf00      	nop
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <LL_RCC_SetLPTIMClockSource>:
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	b083      	sub	sp, #12
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800e0fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	0c1b      	lsrs	r3, r3, #16
 800e106:	041b      	lsls	r3, r3, #16
 800e108:	43db      	mvns	r3, r3
 800e10a:	401a      	ands	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	041b      	lsls	r3, r3, #16
 800e110:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e114:	4313      	orrs	r3, r2
 800e116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e11a:	bf00      	nop
 800e11c:	370c      	adds	r7, #12
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr

0800e126 <LL_RCC_SetSAIClockSource>:
{
 800e126:	b480      	push	{r7}
 800e128:	b083      	sub	sp, #12
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800e12e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e136:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e13a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4313      	orrs	r3, r2
 800e142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e146:	bf00      	nop
 800e148:	370c      	adds	r7, #12
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr

0800e152 <LL_RCC_SetRNGClockSource>:
{
 800e152:	b480      	push	{r7}
 800e154:	b083      	sub	sp, #12
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800e15a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e162:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	4313      	orrs	r3, r2
 800e16e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e172:	bf00      	nop
 800e174:	370c      	adds	r7, #12
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr

0800e17e <LL_RCC_SetCLK48ClockSource>:
{
 800e17e:	b480      	push	{r7}
 800e180:	b083      	sub	sp, #12
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800e186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e18e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4313      	orrs	r3, r2
 800e19a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e19e:	bf00      	nop
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr

0800e1aa <LL_RCC_SetUSBClockSource>:
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b082      	sub	sp, #8
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff ffe3 	bl	800e17e <LL_RCC_SetCLK48ClockSource>
}
 800e1b8:	bf00      	nop
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <LL_RCC_SetADCClockSource>:
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800e1c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e1d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <LL_RCC_SetRTCClockSource>:
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800e1f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e200:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4313      	orrs	r3, r2
 800e208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <LL_RCC_GetRTCClockSource>:
{
 800e218:	b480      	push	{r7}
 800e21a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800e21c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e224:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800e228:	4618      	mov	r0, r3
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr

0800e232 <LL_RCC_ForceBackupDomainReset>:
{
 800e232:	b480      	push	{r7}
 800e234:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e23e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e24a:	bf00      	nop
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <LL_RCC_ReleaseBackupDomainReset>:
{
 800e254:	b480      	push	{r7}
 800e256:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e260:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e26c:	bf00      	nop
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr

0800e276 <LL_RCC_PLLSAI1_Enable>:
{
 800e276:	b480      	push	{r7}
 800e278:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e27a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e284:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e288:	6013      	str	r3, [r2, #0]
}
 800e28a:	bf00      	nop
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <LL_RCC_PLLSAI1_Disable>:
{
 800e294:	b480      	push	{r7}
 800e296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e2a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e2a6:	6013      	str	r3, [r2, #0]
}
 800e2a8:	bf00      	nop
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr

0800e2b2 <LL_RCC_PLLSAI1_IsReady>:
{
 800e2b2:	b480      	push	{r7}
 800e2b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800e2b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e2c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e2c4:	d101      	bne.n	800e2ca <LL_RCC_PLLSAI1_IsReady+0x18>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e000      	b.n	800e2cc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800e2ca:	2300      	movs	r3, #0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b088      	sub	sp, #32
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800e2de:	2300      	movs	r3, #0
 800e2e0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d034      	beq.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e2fa:	d021      	beq.n	800e340 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800e2fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e300:	d81b      	bhi.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e306:	d01d      	beq.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800e308:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e30c:	d815      	bhi.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00b      	beq.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x54>
 800e312:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e316:	d110      	bne.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800e318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e326:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800e328:	e00d      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	3304      	adds	r3, #4
 800e32e:	4618      	mov	r0, r3
 800e330:	f000 f947 	bl	800e5c2 <RCCEx_PLLSAI1_ConfigNP>
 800e334:	4603      	mov	r3, r0
 800e336:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e338:	e005      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	77fb      	strb	r3, [r7, #31]
        break;
 800e33e:	e002      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e340:	bf00      	nop
 800e342:	e000      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e344:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e346:	7ffb      	ldrb	r3, [r7, #31]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d105      	bne.n	800e358 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e350:	4618      	mov	r0, r3
 800e352:	f7ff fee8 	bl	800e126 <LL_RCC_SetSAIClockSource>
 800e356:	e001      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e358:	7ffb      	ldrb	r3, [r7, #31]
 800e35a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e364:	2b00      	cmp	r3, #0
 800e366:	d046      	beq.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800e368:	f7ff ff56 	bl	800e218 <LL_RCC_GetRTCClockSource>
 800e36c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e372:	69ba      	ldr	r2, [r7, #24]
 800e374:	429a      	cmp	r2, r3
 800e376:	d03c      	beq.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e378:	f7fe fc58 	bl	800cc2c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d105      	bne.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e386:	4618      	mov	r0, r3
 800e388:	f7ff ff30 	bl	800e1ec <LL_RCC_SetRTCClockSource>
 800e38c:	e02e      	b.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800e38e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e396:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800e398:	f7ff ff4b 	bl	800e232 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800e39c:	f7ff ff5a 	bl	800e254 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800e3ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800e3b8:	f7ff fdf0 	bl	800df9c <LL_RCC_LSE_IsEnabled>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d114      	bne.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e3c2:	f7f9 ff7b 	bl	80082bc <HAL_GetTick>
 800e3c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800e3c8:	e00b      	b.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3ca:	f7f9 ff77 	bl	80082bc <HAL_GetTick>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	1ad3      	subs	r3, r2, r3
 800e3d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d902      	bls.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800e3dc:	2303      	movs	r3, #3
 800e3de:	77fb      	strb	r3, [r7, #31]
              break;
 800e3e0:	e004      	b.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800e3e2:	f7ff fded 	bl	800dfc0 <LL_RCC_LSE_IsReady>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d1ee      	bne.n	800e3ca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800e3ec:	7ffb      	ldrb	r3, [r7, #31]
 800e3ee:	77bb      	strb	r3, [r7, #30]
 800e3f0:	e001      	b.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3f2:	7ffb      	ldrb	r3, [r7, #31]
 800e3f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f003 0301 	and.w	r3, r3, #1
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d004      	beq.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	4618      	mov	r0, r3
 800e408:	f7ff fe2a 	bl	800e060 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f003 0302 	and.w	r3, r3, #2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d004      	beq.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	69db      	ldr	r3, [r3, #28]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff fe35 	bl	800e08c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f003 0310 	and.w	r3, r3, #16
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d004      	beq.n	800e438 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e432:	4618      	mov	r0, r3
 800e434:	f7ff fe5d 	bl	800e0f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f003 0320 	and.w	r3, r3, #32
 800e440:	2b00      	cmp	r3, #0
 800e442:	d004      	beq.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e448:	4618      	mov	r0, r3
 800e44a:	f7ff fe52 	bl	800e0f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 0304 	and.w	r3, r3, #4
 800e456:	2b00      	cmp	r3, #0
 800e458:	d004      	beq.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6a1b      	ldr	r3, [r3, #32]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff fe2a 	bl	800e0b8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f003 0308 	and.w	r3, r3, #8
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d004      	beq.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e474:	4618      	mov	r0, r3
 800e476:	f7ff fe1f 	bl	800e0b8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e482:	2b00      	cmp	r3, #0
 800e484:	d022      	beq.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7ff fe8d 	bl	800e1aa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e498:	d107      	bne.n	800e4aa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800e49a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e4a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e4a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e4b2:	d10b      	bne.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	3304      	adds	r3, #4
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f000 f8dd 	bl	800e678 <RCCEx_PLLSAI1_ConfigNQ>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e4c2:	7ffb      	ldrb	r3, [r7, #31]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800e4c8:	7ffb      	ldrb	r3, [r7, #31]
 800e4ca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d02b      	beq.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4e0:	d008      	beq.n	800e4f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e4ea:	d003      	beq.n	800e4f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d105      	bne.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7ff fe2a 	bl	800e152 <LL_RCC_SetRNGClockSource>
 800e4fe:	e00a      	b.n	800e516 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	2000      	movs	r0, #0
 800e50c:	f7ff fe21 	bl	800e152 <LL_RCC_SetRNGClockSource>
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f7ff fe34 	bl	800e17e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e51a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800e51e:	d107      	bne.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800e520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e52a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e52e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d022      	beq.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e540:	4618      	mov	r0, r3
 800e542:	f7ff fe3d 	bl	800e1c0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e54a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e54e:	d107      	bne.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e55a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e55e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e564:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e568:	d10b      	bne.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	3304      	adds	r3, #4
 800e56e:	4618      	mov	r0, r3
 800e570:	f000 f8dd 	bl	800e72e <RCCEx_PLLSAI1_ConfigNR>
 800e574:	4603      	mov	r3, r0
 800e576:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e578:	7ffb      	ldrb	r3, [r7, #31]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d001      	beq.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800e57e:	7ffb      	ldrb	r3, [r7, #31]
 800e580:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d004      	beq.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e592:	4618      	mov	r0, r3
 800e594:	f7ff fd26 	bl	800dfe4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d009      	beq.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fd45 	bl	800e038 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7ff fd2c 	bl	800e010 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800e5b8:	7fbb      	ldrb	r3, [r7, #30]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3720      	adds	r7, #32
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e5ce:	f7ff fe61 	bl	800e294 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e5d2:	f7f9 fe73 	bl	80082bc <HAL_GetTick>
 800e5d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e5d8:	e009      	b.n	800e5ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e5da:	f7f9 fe6f 	bl	80082bc <HAL_GetTick>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	1ad3      	subs	r3, r2, r3
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d902      	bls.n	800e5ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	73fb      	strb	r3, [r7, #15]
      break;
 800e5ec:	e004      	b.n	800e5f8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e5ee:	f7ff fe60 	bl	800e2b2 <LL_RCC_PLLSAI1_IsReady>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1f0      	bne.n	800e5da <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d137      	bne.n	800e66e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e5fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	021b      	lsls	r3, r3, #8
 800e60e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e612:	4313      	orrs	r3, r2
 800e614:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800e616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e628:	4313      	orrs	r3, r2
 800e62a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e62c:	f7ff fe23 	bl	800e276 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e630:	f7f9 fe44 	bl	80082bc <HAL_GetTick>
 800e634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e636:	e009      	b.n	800e64c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e638:	f7f9 fe40 	bl	80082bc <HAL_GetTick>
 800e63c:	4602      	mov	r2, r0
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	2b02      	cmp	r3, #2
 800e644:	d902      	bls.n	800e64c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800e646:	2303      	movs	r3, #3
 800e648:	73fb      	strb	r3, [r7, #15]
        break;
 800e64a:	e004      	b.n	800e656 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e64c:	f7ff fe31 	bl	800e2b2 <LL_RCC_PLLSAI1_IsReady>
 800e650:	4603      	mov	r3, r0
 800e652:	2b01      	cmp	r3, #1
 800e654:	d1f0      	bne.n	800e638 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800e656:	7bfb      	ldrb	r3, [r7, #15]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d108      	bne.n	800e66e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e65c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e660:	691a      	ldr	r2, [r3, #16]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e66a:	4313      	orrs	r3, r2
 800e66c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e680:	2300      	movs	r3, #0
 800e682:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e684:	f7ff fe06 	bl	800e294 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e688:	f7f9 fe18 	bl	80082bc <HAL_GetTick>
 800e68c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e68e:	e009      	b.n	800e6a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e690:	f7f9 fe14 	bl	80082bc <HAL_GetTick>
 800e694:	4602      	mov	r2, r0
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	1ad3      	subs	r3, r2, r3
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	d902      	bls.n	800e6a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	73fb      	strb	r3, [r7, #15]
      break;
 800e6a2:	e004      	b.n	800e6ae <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e6a4:	f7ff fe05 	bl	800e2b2 <LL_RCC_PLLSAI1_IsReady>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1f0      	bne.n	800e690 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d137      	bne.n	800e724 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e6b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6b8:	691b      	ldr	r3, [r3, #16]
 800e6ba:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	021b      	lsls	r3, r3, #8
 800e6c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800e6cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6d0:	691b      	ldr	r3, [r3, #16]
 800e6d2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e6e2:	f7ff fdc8 	bl	800e276 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6e6:	f7f9 fde9 	bl	80082bc <HAL_GetTick>
 800e6ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e6ec:	e009      	b.n	800e702 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e6ee:	f7f9 fde5 	bl	80082bc <HAL_GetTick>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d902      	bls.n	800e702 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800e6fc:	2303      	movs	r3, #3
 800e6fe:	73fb      	strb	r3, [r7, #15]
        break;
 800e700:	e004      	b.n	800e70c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e702:	f7ff fdd6 	bl	800e2b2 <LL_RCC_PLLSAI1_IsReady>
 800e706:	4603      	mov	r3, r0
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d1f0      	bne.n	800e6ee <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800e70c:	7bfb      	ldrb	r3, [r7, #15]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d108      	bne.n	800e724 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e716:	691a      	ldr	r2, [r3, #16]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e720:	4313      	orrs	r3, r2
 800e722:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e724:	7bfb      	ldrb	r3, [r7, #15]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3710      	adds	r7, #16
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b084      	sub	sp, #16
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e736:	2300      	movs	r3, #0
 800e738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e73a:	f7ff fdab 	bl	800e294 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e73e:	f7f9 fdbd 	bl	80082bc <HAL_GetTick>
 800e742:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e744:	e009      	b.n	800e75a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e746:	f7f9 fdb9 	bl	80082bc <HAL_GetTick>
 800e74a:	4602      	mov	r2, r0
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	1ad3      	subs	r3, r2, r3
 800e750:	2b02      	cmp	r3, #2
 800e752:	d902      	bls.n	800e75a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800e754:	2303      	movs	r3, #3
 800e756:	73fb      	strb	r3, [r7, #15]
      break;
 800e758:	e004      	b.n	800e764 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e75a:	f7ff fdaa 	bl	800e2b2 <LL_RCC_PLLSAI1_IsReady>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1f0      	bne.n	800e746 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d137      	bne.n	800e7da <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e76a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e76e:	691b      	ldr	r3, [r3, #16]
 800e770:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	021b      	lsls	r3, r3, #8
 800e77a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e77e:	4313      	orrs	r3, r2
 800e780:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800e782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e786:	691b      	ldr	r3, [r3, #16]
 800e788:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e794:	4313      	orrs	r3, r2
 800e796:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e798:	f7ff fd6d 	bl	800e276 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e79c:	f7f9 fd8e 	bl	80082bc <HAL_GetTick>
 800e7a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e7a2:	e009      	b.n	800e7b8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e7a4:	f7f9 fd8a 	bl	80082bc <HAL_GetTick>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	1ad3      	subs	r3, r2, r3
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d902      	bls.n	800e7b8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	73fb      	strb	r3, [r7, #15]
        break;
 800e7b6:	e004      	b.n	800e7c2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e7b8:	f7ff fd7b 	bl	800e2b2 <LL_RCC_PLLSAI1_IsReady>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d1f0      	bne.n	800e7a4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800e7c2:	7bfb      	ldrb	r3, [r7, #15]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d108      	bne.n	800e7da <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e7c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7cc:	691a      	ldr	r2, [r3, #16]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	691b      	ldr	r3, [r3, #16]
 800e7d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3710      	adds	r7, #16
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e09f      	b.n	800e936 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d106      	bne.n	800e810 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7f5 f95c 	bl	8003ac8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2202      	movs	r2, #2
 800e814:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e818:	4b49      	ldr	r3, [pc, #292]	@ (800e940 <HAL_RTC_Init+0x15c>)
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	f003 0310 	and.w	r3, r3, #16
 800e820:	2b10      	cmp	r3, #16
 800e822:	d07e      	beq.n	800e922 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	22ca      	movs	r2, #202	@ 0xca
 800e82a:	625a      	str	r2, [r3, #36]	@ 0x24
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2253      	movs	r2, #83	@ 0x53
 800e832:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 fa1d 	bl	800ec74 <RTC_EnterInitMode>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00a      	beq.n	800e856 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	22ff      	movs	r2, #255	@ 0xff
 800e846:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2204      	movs	r2, #4
 800e84c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800e850:	2301      	movs	r3, #1
 800e852:	73fb      	strb	r3, [r7, #15]
 800e854:	e067      	b.n	800e926 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	6812      	ldr	r2, [r2, #0]
 800e860:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e868:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	6899      	ldr	r1, [r3, #8]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	685a      	ldr	r2, [r3, #4]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	691b      	ldr	r3, [r3, #16]
 800e878:	431a      	orrs	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	431a      	orrs	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	430a      	orrs	r2, r1
 800e886:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	68d2      	ldr	r2, [r2, #12]
 800e890:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	6919      	ldr	r1, [r3, #16]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	041a      	lsls	r2, r3, #16
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	430a      	orrs	r2, r1
 800e8a4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	68da      	ldr	r2, [r3, #12]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e8b4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f022 0203 	bic.w	r2, r2, #3
 800e8c4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	69da      	ldr	r2, [r3, #28]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	695b      	ldr	r3, [r3, #20]
 800e8d4:	431a      	orrs	r2, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	430a      	orrs	r2, r1
 800e8dc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f003 0320 	and.w	r3, r3, #32
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d113      	bne.n	800e914 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 f99b 	bl	800ec28 <HAL_RTC_WaitForSynchro>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00d      	beq.n	800e914 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	22ff      	movs	r2, #255	@ 0xff
 800e8fe:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2204      	movs	r2, #4
 800e904:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800e910:	2301      	movs	r3, #1
 800e912:	e010      	b.n	800e936 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	22ff      	movs	r2, #255	@ 0xff
 800e91a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	73fb      	strb	r3, [r7, #15]
 800e920:	e001      	b.n	800e926 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800e922:	2300      	movs	r3, #0
 800e924:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800e926:	7bfb      	ldrb	r3, [r7, #15]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d103      	bne.n	800e934 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800e934:	7bfb      	ldrb	r3, [r7, #15]
}
 800e936:	4618      	mov	r0, r3
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	40002800 	.word	0x40002800

0800e944 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e944:	b590      	push	{r4, r7, lr}
 800e946:	b087      	sub	sp, #28
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e956:	2b01      	cmp	r3, #1
 800e958:	d101      	bne.n	800e95e <HAL_RTC_SetTime+0x1a>
 800e95a:	2302      	movs	r3, #2
 800e95c:	e0b2      	b.n	800eac4 <HAL_RTC_SetTime+0x180>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2201      	movs	r2, #1
 800e962:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2202      	movs	r2, #2
 800e96a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d126      	bne.n	800e9c2 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d102      	bne.n	800e988 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	2200      	movs	r2, #0
 800e986:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f000 f99b 	bl	800ecc8 <RTC_ByteToBcd2>
 800e992:	4603      	mov	r3, r0
 800e994:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	785b      	ldrb	r3, [r3, #1]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 f994 	bl	800ecc8 <RTC_ByteToBcd2>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800e9a4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	789b      	ldrb	r3, [r3, #2]
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f000 f98c 	bl	800ecc8 <RTC_ByteToBcd2>
 800e9b0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800e9b2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	78db      	ldrb	r3, [r3, #3]
 800e9ba:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	617b      	str	r3, [r7, #20]
 800e9c0:	e018      	b.n	800e9f4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d102      	bne.n	800e9d6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	785b      	ldrb	r3, [r3, #1]
 800e9e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800e9e2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800e9e4:	68ba      	ldr	r2, [r7, #8]
 800e9e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800e9e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	78db      	ldrb	r3, [r3, #3]
 800e9ee:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	22ca      	movs	r2, #202	@ 0xca
 800e9fa:	625a      	str	r2, [r3, #36]	@ 0x24
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2253      	movs	r2, #83	@ 0x53
 800ea02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f000 f935 	bl	800ec74 <RTC_EnterInitMode>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d00d      	beq.n	800ea2c <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	22ff      	movs	r2, #255	@ 0xff
 800ea16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2204      	movs	r2, #4
 800ea1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2200      	movs	r2, #0
 800ea24:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	e04b      	b.n	800eac4 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ea36:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ea3a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	689a      	ldr	r2, [r3, #8]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ea4a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	6899      	ldr	r1, [r3, #8]
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	68da      	ldr	r2, [r3, #12]
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	431a      	orrs	r2, r3
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	430a      	orrs	r2, r1
 800ea62:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	68da      	ldr	r2, [r3, #12]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ea72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f003 0320 	and.w	r3, r3, #32
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d113      	bne.n	800eaaa <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f000 f8d0 	bl	800ec28 <HAL_RTC_WaitForSynchro>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00d      	beq.n	800eaaa <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	22ff      	movs	r2, #255	@ 0xff
 800ea94:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2204      	movs	r2, #4
 800ea9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e00c      	b.n	800eac4 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	22ff      	movs	r2, #255	@ 0xff
 800eab0:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2201      	movs	r2, #1
 800eab6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800eac2:	2300      	movs	r3, #0
  }
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	371c      	adds	r7, #28
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd90      	pop	{r4, r7, pc}

0800eacc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800eacc:	b590      	push	{r4, r7, lr}
 800eace:	b087      	sub	sp, #28
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d101      	bne.n	800eae6 <HAL_RTC_SetDate+0x1a>
 800eae2:	2302      	movs	r3, #2
 800eae4:	e09c      	b.n	800ec20 <HAL_RTC_SetDate+0x154>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2201      	movs	r2, #1
 800eaea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2202      	movs	r2, #2
 800eaf2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10e      	bne.n	800eb1a <HAL_RTC_SetDate+0x4e>
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	785b      	ldrb	r3, [r3, #1]
 800eb00:	f003 0310 	and.w	r3, r3, #16
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d008      	beq.n	800eb1a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	785b      	ldrb	r3, [r3, #1]
 800eb0c:	f023 0310 	bic.w	r3, r3, #16
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	330a      	adds	r3, #10
 800eb14:	b2da      	uxtb	r2, r3
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d11c      	bne.n	800eb5a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	78db      	ldrb	r3, [r3, #3]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 f8cf 	bl	800ecc8 <RTC_ByteToBcd2>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	785b      	ldrb	r3, [r3, #1]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f000 f8c8 	bl	800ecc8 <RTC_ByteToBcd2>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800eb3c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	789b      	ldrb	r3, [r3, #2]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f000 f8c0 	bl	800ecc8 <RTC_ByteToBcd2>
 800eb48:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800eb4a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800eb54:	4313      	orrs	r3, r2
 800eb56:	617b      	str	r3, [r7, #20]
 800eb58:	e00e      	b.n	800eb78 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	78db      	ldrb	r3, [r3, #3]
 800eb5e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	785b      	ldrb	r3, [r3, #1]
 800eb64:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800eb66:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800eb6c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800eb74:	4313      	orrs	r3, r2
 800eb76:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	22ca      	movs	r2, #202	@ 0xca
 800eb7e:	625a      	str	r2, [r3, #36]	@ 0x24
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2253      	movs	r2, #83	@ 0x53
 800eb86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800eb88:	68f8      	ldr	r0, [r7, #12]
 800eb8a:	f000 f873 	bl	800ec74 <RTC_EnterInitMode>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00d      	beq.n	800ebb0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	22ff      	movs	r2, #255	@ 0xff
 800eb9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2204      	movs	r2, #4
 800eba0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800ebac:	2301      	movs	r3, #1
 800ebae:	e037      	b.n	800ec20 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ebba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ebbe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	68da      	ldr	r2, [r3, #12]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ebce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	f003 0320 	and.w	r3, r3, #32
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d113      	bne.n	800ec06 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f000 f822 	bl	800ec28 <HAL_RTC_WaitForSynchro>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00d      	beq.n	800ec06 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	22ff      	movs	r2, #255	@ 0xff
 800ebf0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2204      	movs	r2, #4
 800ebf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ec02:	2301      	movs	r3, #1
 800ec04:	e00c      	b.n	800ec20 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	22ff      	movs	r2, #255	@ 0xff
 800ec0c:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2201      	movs	r2, #1
 800ec12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800ec1e:	2300      	movs	r3, #0
  }
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	371c      	adds	r7, #28
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd90      	pop	{r4, r7, pc}

0800ec28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	68da      	ldr	r2, [r3, #12]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ec3e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ec40:	f7f9 fb3c 	bl	80082bc <HAL_GetTick>
 800ec44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ec46:	e009      	b.n	800ec5c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ec48:	f7f9 fb38 	bl	80082bc <HAL_GetTick>
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	1ad3      	subs	r3, r2, r3
 800ec52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ec56:	d901      	bls.n	800ec5c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	e007      	b.n	800ec6c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	f003 0320 	and.w	r3, r3, #32
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d0ee      	beq.n	800ec48 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3710      	adds	r7, #16
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d119      	bne.n	800ecbe <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ec94:	f7f9 fb12 	bl	80082bc <HAL_GetTick>
 800ec98:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ec9a:	e009      	b.n	800ecb0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ec9c:	f7f9 fb0e 	bl	80082bc <HAL_GetTick>
 800eca0:	4602      	mov	r2, r0
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ecaa:	d901      	bls.n	800ecb0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800ecac:	2303      	movs	r3, #3
 800ecae:	e007      	b.n	800ecc0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d0ee      	beq.n	800ec9c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	4603      	mov	r3, r0
 800ecd0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800ecd6:	79fb      	ldrb	r3, [r7, #7]
 800ecd8:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800ecda:	e005      	b.n	800ece8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	3301      	adds	r3, #1
 800ece0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800ece2:	7afb      	ldrb	r3, [r7, #11]
 800ece4:	3b0a      	subs	r3, #10
 800ece6:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800ece8:	7afb      	ldrb	r3, [r7, #11]
 800ecea:	2b09      	cmp	r3, #9
 800ecec:	d8f6      	bhi.n	800ecdc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	011b      	lsls	r3, r3, #4
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	7afb      	ldrb	r3, [r7, #11]
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	b2db      	uxtb	r3, r3
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3714      	adds	r7, #20
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d101      	bne.n	800ed22 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800ed1e:	2302      	movs	r3, #2
 800ed20:	e0a8      	b.n	800ee74 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2201      	movs	r2, #1
 800ed26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2202      	movs	r2, #2
 800ed2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	22ca      	movs	r2, #202	@ 0xca
 800ed38:	625a      	str	r2, [r3, #36]	@ 0x24
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2253      	movs	r2, #83	@ 0x53
 800ed40:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	689b      	ldr	r3, [r3, #8]
 800ed48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d020      	beq.n	800ed92 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800ed50:	f7f9 fab4 	bl	80082bc <HAL_GetTick>
 800ed54:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ed56:	e015      	b.n	800ed84 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ed58:	f7f9 fab0 	bl	80082bc <HAL_GetTick>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	1ad3      	subs	r3, r2, r3
 800ed62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ed66:	d90d      	bls.n	800ed84 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	22ff      	movs	r2, #255	@ 0xff
 800ed6e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2203      	movs	r2, #3
 800ed74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ed80:	2303      	movs	r3, #3
 800ed82:	e077      	b.n	800ee74 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	f003 0304 	and.w	r3, r3, #4
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d1e2      	bne.n	800ed58 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	689a      	ldr	r2, [r3, #8]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eda0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800edb2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800edb4:	f7f9 fa82 	bl	80082bc <HAL_GetTick>
 800edb8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800edba:	e015      	b.n	800ede8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800edbc:	f7f9 fa7e 	bl	80082bc <HAL_GetTick>
 800edc0:	4602      	mov	r2, r0
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800edca:	d90d      	bls.n	800ede8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	22ff      	movs	r2, #255	@ 0xff
 800edd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2203      	movs	r2, #3
 800edd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800ede4:	2303      	movs	r3, #3
 800ede6:	e045      	b.n	800ee74 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	f003 0304 	and.w	r3, r3, #4
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d0e2      	beq.n	800edbc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	68ba      	ldr	r2, [r7, #8]
 800edfc:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	689a      	ldr	r2, [r3, #8]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f022 0207 	bic.w	r2, r2, #7
 800ee0c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	6899      	ldr	r1, [r3, #8]
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	430a      	orrs	r2, r1
 800ee1c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ee1e:	4b17      	ldr	r3, [pc, #92]	@ (800ee7c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ee20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee24:	4a15      	ldr	r2, [pc, #84]	@ (800ee7c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ee26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ee2a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800ee2e:	4b13      	ldr	r3, [pc, #76]	@ (800ee7c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4a12      	ldr	r2, [pc, #72]	@ (800ee7c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ee34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ee38:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	689a      	ldr	r2, [r3, #8]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ee48:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	689a      	ldr	r2, [r3, #8]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ee58:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	22ff      	movs	r2, #255	@ 0xff
 800ee60:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2201      	movs	r2, #1
 800ee66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800ee72:	2300      	movs	r3, #0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3718      	adds	r7, #24
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	58000800 	.word	0x58000800

0800ee80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d101      	bne.n	800ee92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e095      	b.n	800efbe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d108      	bne.n	800eeac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eea2:	d009      	beq.n	800eeb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	61da      	str	r2, [r3, #28]
 800eeaa:	e005      	b.n	800eeb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2200      	movs	r2, #0
 800eebc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d106      	bne.n	800eed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7f4 fea0 	bl	8003c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2202      	movs	r2, #2
 800eedc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eeee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eef8:	d902      	bls.n	800ef00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800eefa:	2300      	movs	r3, #0
 800eefc:	60fb      	str	r3, [r7, #12]
 800eefe:	e002      	b.n	800ef06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ef00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ef0e:	d007      	beq.n	800ef20 <HAL_SPI_Init+0xa0>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ef18:	d002      	beq.n	800ef20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ef30:	431a      	orrs	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	f003 0302 	and.w	r3, r3, #2
 800ef3a:	431a      	orrs	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	695b      	ldr	r3, [r3, #20]
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	431a      	orrs	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ef4e:	431a      	orrs	r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	69db      	ldr	r3, [r3, #28]
 800ef54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ef58:	431a      	orrs	r2, r3
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a1b      	ldr	r3, [r3, #32]
 800ef5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef62:	ea42 0103 	orr.w	r1, r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef6a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	430a      	orrs	r2, r1
 800ef74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	699b      	ldr	r3, [r3, #24]
 800ef7a:	0c1b      	lsrs	r3, r3, #16
 800ef7c:	f003 0204 	and.w	r2, r3, #4
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef84:	f003 0310 	and.w	r3, r3, #16
 800ef88:	431a      	orrs	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef8e:	f003 0308 	and.w	r3, r3, #8
 800ef92:	431a      	orrs	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ef9c:	ea42 0103 	orr.w	r1, r2, r3
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	430a      	orrs	r2, r1
 800efac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2200      	movs	r2, #0
 800efb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
	...

0800efc8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	4613      	mov	r3, r2
 800efd4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800efdc:	b2db      	uxtb	r3, r3
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d001      	beq.n	800efe6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800efe2:	2302      	movs	r3, #2
 800efe4:	e0d4      	b.n	800f190 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <HAL_SPI_Transmit_DMA+0x2a>
 800efec:	88fb      	ldrh	r3, [r7, #6]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e0cc      	b.n	800f190 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800effc:	2b01      	cmp	r3, #1
 800effe:	d101      	bne.n	800f004 <HAL_SPI_Transmit_DMA+0x3c>
 800f000:	2302      	movs	r3, #2
 800f002:	e0c5      	b.n	800f190 <HAL_SPI_Transmit_DMA+0x1c8>
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2203      	movs	r2, #3
 800f010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	68ba      	ldr	r2, [r7, #8]
 800f01e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	88fa      	ldrh	r2, [r7, #6]
 800f024:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	88fa      	ldrh	r2, [r7, #6]
 800f02a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2200      	movs	r2, #0
 800f030:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2200      	movs	r2, #0
 800f036:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2200      	movs	r2, #0
 800f03c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2200      	movs	r2, #0
 800f04a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f056:	d10f      	bne.n	800f078 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f066:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f076:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f07c:	4a46      	ldr	r2, [pc, #280]	@ (800f198 <HAL_SPI_Transmit_DMA+0x1d0>)
 800f07e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f084:	4a45      	ldr	r2, [pc, #276]	@ (800f19c <HAL_SPI_Transmit_DMA+0x1d4>)
 800f086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f08c:	4a44      	ldr	r2, [pc, #272]	@ (800f1a0 <HAL_SPI_Transmit_DMA+0x1d8>)
 800f08e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f094:	2200      	movs	r2, #0
 800f096:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	685a      	ldr	r2, [r3, #4]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f0a6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f0b0:	d82d      	bhi.n	800f10e <HAL_SPI_Transmit_DMA+0x146>
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0bc:	d127      	bne.n	800f10e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	f003 0301 	and.w	r3, r3, #1
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10f      	bne.n	800f0ec <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	685a      	ldr	r2, [r3, #4]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f0da:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	085b      	lsrs	r3, r3, #1
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f0ea:	e010      	b.n	800f10e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	685a      	ldr	r2, [r3, #4]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f0fa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f100:	b29b      	uxth	r3, r3
 800f102:	085b      	lsrs	r3, r3, #1
 800f104:	b29b      	uxth	r3, r3
 800f106:	3301      	adds	r3, #1
 800f108:	b29a      	uxth	r2, r3
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f116:	4619      	mov	r1, r3
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	330c      	adds	r3, #12
 800f11e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f124:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f126:	f7fa fc45 	bl	80099b4 <HAL_DMA_Start_IT>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00b      	beq.n	800f148 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f134:	f043 0210 	orr.w	r2, r3, #16
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2200      	movs	r2, #0
 800f140:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800f144:	2301      	movs	r3, #1
 800f146:	e023      	b.n	800f190 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f152:	2b40      	cmp	r3, #64	@ 0x40
 800f154:	d007      	beq.n	800f166 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f164:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2200      	movs	r2, #0
 800f16a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	685a      	ldr	r2, [r3, #4]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f042 0220 	orr.w	r2, r2, #32
 800f17c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	685a      	ldr	r2, [r3, #4]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f042 0202 	orr.w	r2, r2, #2
 800f18c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	0800fbdf 	.word	0x0800fbdf
 800f19c:	0800fa01 	.word	0x0800fa01
 800f1a0:	0800fc33 	.word	0x0800fc33

0800f1a4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d001      	beq.n	800f1c2 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800f1be:	2302      	movs	r3, #2
 800f1c0:	e105      	b.n	800f3ce <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d002      	beq.n	800f1ce <HAL_SPI_Receive_DMA+0x2a>
 800f1c8:	88fb      	ldrh	r3, [r7, #6]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d101      	bne.n	800f1d2 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e0fd      	b.n	800f3ce <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	689b      	ldr	r3, [r3, #8]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d110      	bne.n	800f1fc <HAL_SPI_Receive_DMA+0x58>
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f1e2:	d10b      	bne.n	800f1fc <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2204      	movs	r2, #4
 800f1e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800f1ec:	88fb      	ldrh	r3, [r7, #6]
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	68b9      	ldr	r1, [r7, #8]
 800f1f2:	68f8      	ldr	r0, [r7, #12]
 800f1f4:	f000 f8f6 	bl	800f3e4 <HAL_SPI_TransmitReceive_DMA>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	e0e8      	b.n	800f3ce <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f202:	2b01      	cmp	r3, #1
 800f204:	d101      	bne.n	800f20a <HAL_SPI_Receive_DMA+0x66>
 800f206:	2302      	movs	r3, #2
 800f208:	e0e1      	b.n	800f3ce <HAL_SPI_Receive_DMA+0x22a>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2201      	movs	r2, #1
 800f20e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2204      	movs	r2, #4
 800f216:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2200      	movs	r2, #0
 800f21e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	88fa      	ldrh	r2, [r7, #6]
 800f22a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	88fa      	ldrh	r2, [r7, #6]
 800f232:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2200      	movs	r2, #0
 800f240:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2200      	movs	r2, #0
 800f246:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2200      	movs	r2, #0
 800f24c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	689b      	ldr	r3, [r3, #8]
 800f252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f256:	d10f      	bne.n	800f278 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f266:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f276:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	685a      	ldr	r2, [r3, #4]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f286:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f290:	d908      	bls.n	800f2a4 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	685a      	ldr	r2, [r3, #4]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f2a0:	605a      	str	r2, [r3, #4]
 800f2a2:	e042      	b.n	800f32a <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	685a      	ldr	r2, [r3, #4]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f2b2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2b8:	699b      	ldr	r3, [r3, #24]
 800f2ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2be:	d134      	bne.n	800f32a <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	685a      	ldr	r2, [r3, #4]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f2ce:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	f003 0301 	and.w	r3, r3, #1
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d111      	bne.n	800f304 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f2ee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	085b      	lsrs	r3, r3, #1
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800f302:	e012      	b.n	800f32a <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685a      	ldr	r2, [r3, #4]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f312:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	085b      	lsrs	r3, r3, #1
 800f31e:	b29b      	uxth	r3, r3
 800f320:	3301      	adds	r3, #1
 800f322:	b29a      	uxth	r2, r3
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f32e:	4a2a      	ldr	r2, [pc, #168]	@ (800f3d8 <HAL_SPI_Receive_DMA+0x234>)
 800f330:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f336:	4a29      	ldr	r2, [pc, #164]	@ (800f3dc <HAL_SPI_Receive_DMA+0x238>)
 800f338:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f33e:	4a28      	ldr	r2, [pc, #160]	@ (800f3e0 <HAL_SPI_Receive_DMA+0x23c>)
 800f340:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f346:	2200      	movs	r2, #0
 800f348:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	330c      	adds	r3, #12
 800f354:	4619      	mov	r1, r3
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f35a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f362:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800f364:	f7fa fb26 	bl	80099b4 <HAL_DMA_Start_IT>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00b      	beq.n	800f386 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f372:	f043 0210 	orr.w	r2, r3, #16
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800f382:	2301      	movs	r3, #1
 800f384:	e023      	b.n	800f3ce <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f390:	2b40      	cmp	r3, #64	@ 0x40
 800f392:	d007      	beq.n	800f3a4 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f3a2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	685a      	ldr	r2, [r3, #4]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f042 0220 	orr.w	r2, r2, #32
 800f3ba:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f042 0201 	orr.w	r2, r2, #1
 800f3ca:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f3cc:	2300      	movs	r3, #0
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	0800fbfb 	.word	0x0800fbfb
 800f3dc:	0800faa7 	.word	0x0800faa7
 800f3e0:	0800fc33 	.word	0x0800fc33

0800f3e4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f3f8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800f400:	7dfb      	ldrb	r3, [r7, #23]
 800f402:	2b01      	cmp	r3, #1
 800f404:	d00c      	beq.n	800f420 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f40c:	d106      	bne.n	800f41c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	689b      	ldr	r3, [r3, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d102      	bne.n	800f41c <HAL_SPI_TransmitReceive_DMA+0x38>
 800f416:	7dfb      	ldrb	r3, [r7, #23]
 800f418:	2b04      	cmp	r3, #4
 800f41a:	d001      	beq.n	800f420 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f41c:	2302      	movs	r3, #2
 800f41e:	e158      	b.n	800f6d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d005      	beq.n	800f432 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800f42c:	887b      	ldrh	r3, [r7, #2]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800f432:	2301      	movs	r3, #1
 800f434:	e14d      	b.n	800f6d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d101      	bne.n	800f444 <HAL_SPI_TransmitReceive_DMA+0x60>
 800f440:	2302      	movs	r3, #2
 800f442:	e146      	b.n	800f6d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2201      	movs	r2, #1
 800f448:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b04      	cmp	r3, #4
 800f456:	d003      	beq.n	800f460 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2205      	movs	r2, #5
 800f45c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2200      	movs	r2, #0
 800f464:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	887a      	ldrh	r2, [r7, #2]
 800f470:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	887a      	ldrh	r2, [r7, #2]
 800f476:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	887a      	ldrh	r2, [r7, #2]
 800f482:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	887a      	ldrh	r2, [r7, #2]
 800f48a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2200      	movs	r2, #0
 800f498:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	685a      	ldr	r2, [r3, #4]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800f4a8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f4b2:	d908      	bls.n	800f4c6 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	685a      	ldr	r2, [r3, #4]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f4c2:	605a      	str	r2, [r3, #4]
 800f4c4:	e06f      	b.n	800f5a6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	685a      	ldr	r2, [r3, #4]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f4d4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4e0:	d126      	bne.n	800f530 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800f4e6:	f003 0301 	and.w	r3, r3, #1
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d10f      	bne.n	800f50e <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	685a      	ldr	r2, [r3, #4]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f4fc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f502:	b29b      	uxth	r3, r3
 800f504:	085b      	lsrs	r3, r3, #1
 800f506:	b29a      	uxth	r2, r3
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f50c:	e010      	b.n	800f530 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	685a      	ldr	r2, [r3, #4]
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f51c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f522:	b29b      	uxth	r3, r3
 800f524:	085b      	lsrs	r3, r3, #1
 800f526:	b29b      	uxth	r3, r3
 800f528:	3301      	adds	r3, #1
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f534:	699b      	ldr	r3, [r3, #24]
 800f536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f53a:	d134      	bne.n	800f5a6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	685a      	ldr	r2, [r3, #4]
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f54a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f552:	b29b      	uxth	r3, r3
 800f554:	f003 0301 	and.w	r3, r3, #1
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d111      	bne.n	800f580 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	685a      	ldr	r2, [r3, #4]
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f56a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f572:	b29b      	uxth	r3, r3
 800f574:	085b      	lsrs	r3, r3, #1
 800f576:	b29a      	uxth	r2, r3
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800f57e:	e012      	b.n	800f5a6 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f58e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f596:	b29b      	uxth	r3, r3
 800f598:	085b      	lsrs	r3, r3, #1
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	3301      	adds	r3, #1
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	2b04      	cmp	r3, #4
 800f5b0:	d108      	bne.n	800f5c4 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5b6:	4a49      	ldr	r2, [pc, #292]	@ (800f6dc <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800f5b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5be:	4a48      	ldr	r2, [pc, #288]	@ (800f6e0 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800f5c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f5c2:	e007      	b.n	800f5d4 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5c8:	4a46      	ldr	r2, [pc, #280]	@ (800f6e4 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800f5ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5d0:	4a45      	ldr	r2, [pc, #276]	@ (800f6e8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800f5d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5d8:	4a44      	ldr	r2, [pc, #272]	@ (800f6ec <HAL_SPI_TransmitReceive_DMA+0x308>)
 800f5da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	330c      	adds	r3, #12
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5f4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f5fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800f5fe:	f7fa f9d9 	bl	80099b4 <HAL_DMA_Start_IT>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00b      	beq.n	800f620 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f60c:	f043 0210 	orr.w	r2, r3, #16
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2200      	movs	r2, #0
 800f618:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800f61c:	2301      	movs	r3, #1
 800f61e:	e058      	b.n	800f6d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	685a      	ldr	r2, [r3, #4]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f042 0201 	orr.w	r2, r2, #1
 800f62e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f634:	2200      	movs	r2, #0
 800f636:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f63c:	2200      	movs	r2, #0
 800f63e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f644:	2200      	movs	r2, #0
 800f646:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f64c:	2200      	movs	r2, #0
 800f64e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f658:	4619      	mov	r1, r3
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	330c      	adds	r3, #12
 800f660:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f666:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f668:	f7fa f9a4 	bl	80099b4 <HAL_DMA_Start_IT>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00b      	beq.n	800f68a <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f676:	f043 0210 	orr.w	r2, r3, #16
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2200      	movs	r2, #0
 800f682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800f686:	2301      	movs	r3, #1
 800f688:	e023      	b.n	800f6d2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f694:	2b40      	cmp	r3, #64	@ 0x40
 800f696:	d007      	beq.n	800f6a8 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f6a6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	685a      	ldr	r2, [r3, #4]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f042 0220 	orr.w	r2, r2, #32
 800f6be:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	685a      	ldr	r2, [r3, #4]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f042 0202 	orr.w	r2, r2, #2
 800f6ce:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f6d0:	2300      	movs	r3, #0
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3718      	adds	r7, #24
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	0800fbfb 	.word	0x0800fbfb
 800f6e0:	0800faa7 	.word	0x0800faa7
 800f6e4:	0800fc17 	.word	0x0800fc17
 800f6e8:	0800fb4f 	.word	0x0800fb4f
 800f6ec:	0800fc33 	.word	0x0800fc33

0800f6f0 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00f      	beq.n	800f724 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fa f9ce 	bl	8009aaa <HAL_DMA_Abort>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d007      	beq.n	800f724 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f718:	f043 0210 	orr.w	r2, r3, #16
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800f720:	2301      	movs	r3, #1
 800f722:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00f      	beq.n	800f74c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f730:	4618      	mov	r0, r3
 800f732:	f7fa f9ba 	bl	8009aaa <HAL_DMA_Abort>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d007      	beq.n	800f74c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f740:	f043 0210 	orr.w	r2, r3, #16
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800f748:	2301      	movs	r3, #1
 800f74a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	685a      	ldr	r2, [r3, #4]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f022 0203 	bic.w	r2, r2, #3
 800f75a:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2201      	movs	r2, #1
 800f760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 800f764:	7bfb      	ldrb	r3, [r7, #15]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d10e      	bne.n	800f7b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d009      	beq.n	800f7b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d004      	beq.n	800f7b0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	4798      	blx	r3
    return;
 800f7ae:	e0ce      	b.n	800f94e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	f003 0302 	and.w	r3, r3, #2
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d009      	beq.n	800f7ce <HAL_SPI_IRQHandler+0x5e>
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d004      	beq.n	800f7ce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	4798      	blx	r3
    return;
 800f7cc:	e0bf      	b.n	800f94e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	f003 0320 	and.w	r3, r3, #32
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d10a      	bne.n	800f7ee <HAL_SPI_IRQHandler+0x7e>
 800f7d8:	69bb      	ldr	r3, [r7, #24]
 800f7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d105      	bne.n	800f7ee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f7e2:	69bb      	ldr	r3, [r7, #24]
 800f7e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f000 80b0 	beq.w	800f94e <HAL_SPI_IRQHandler+0x1de>
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	f003 0320 	and.w	r3, r3, #32
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f000 80aa 	beq.w	800f94e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f800:	2b00      	cmp	r3, #0
 800f802:	d023      	beq.n	800f84c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	2b03      	cmp	r3, #3
 800f80e:	d011      	beq.n	800f834 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f814:	f043 0204 	orr.w	r2, r3, #4
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f81c:	2300      	movs	r3, #0
 800f81e:	617b      	str	r3, [r7, #20]
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	617b      	str	r3, [r7, #20]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	617b      	str	r3, [r7, #20]
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	e00b      	b.n	800f84c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f834:	2300      	movs	r3, #0
 800f836:	613b      	str	r3, [r7, #16]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	613b      	str	r3, [r7, #16]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	689b      	ldr	r3, [r3, #8]
 800f846:	613b      	str	r3, [r7, #16]
 800f848:	693b      	ldr	r3, [r7, #16]
        return;
 800f84a:	e080      	b.n	800f94e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f84c:	69bb      	ldr	r3, [r7, #24]
 800f84e:	f003 0320 	and.w	r3, r3, #32
 800f852:	2b00      	cmp	r3, #0
 800f854:	d014      	beq.n	800f880 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f85a:	f043 0201 	orr.w	r2, r3, #1
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f862:	2300      	movs	r3, #0
 800f864:	60fb      	str	r3, [r7, #12]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	60fb      	str	r3, [r7, #12]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00c      	beq.n	800f8a4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f88e:	f043 0208 	orr.w	r2, r3, #8
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f896:	2300      	movs	r3, #0
 800f898:	60bb      	str	r3, [r7, #8]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	60bb      	str	r3, [r7, #8]
 800f8a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d04f      	beq.n	800f94c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	685a      	ldr	r2, [r3, #4]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f8ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2201      	movs	r2, #1
 800f8c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	f003 0302 	and.w	r3, r3, #2
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d104      	bne.n	800f8d8 <HAL_SPI_IRQHandler+0x168>
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	f003 0301 	and.w	r3, r3, #1
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d034      	beq.n	800f942 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	685a      	ldr	r2, [r3, #4]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f022 0203 	bic.w	r2, r2, #3
 800f8e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d011      	beq.n	800f914 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8f4:	4a17      	ldr	r2, [pc, #92]	@ (800f954 <HAL_SPI_IRQHandler+0x1e4>)
 800f8f6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fa f933 	bl	8009b68 <HAL_DMA_Abort_IT>
 800f902:	4603      	mov	r3, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d005      	beq.n	800f914 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f90c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d016      	beq.n	800f94a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f920:	4a0c      	ldr	r2, [pc, #48]	@ (800f954 <HAL_SPI_IRQHandler+0x1e4>)
 800f922:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fa f91d 	bl	8009b68 <HAL_DMA_Abort_IT>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00a      	beq.n	800f94a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f938:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800f940:	e003      	b.n	800f94a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 f844 	bl	800f9d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f948:	e000      	b.n	800f94c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800f94a:	bf00      	nop
    return;
 800f94c:	bf00      	nop
  }
}
 800f94e:	3720      	adds	r7, #32
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	0800fc73 	.word	0x0800fc73

0800f958 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800f974:	bf00      	nop
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800f988:	bf00      	nop
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f99c:	bf00      	nop
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800f9b0:	bf00      	nop
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800f9c4:	bf00      	nop
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr

0800f9d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f9f2:	b2db      	uxtb	r3, r3
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	370c      	adds	r7, #12
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr

0800fa00 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fa0e:	f7f8 fc55 	bl	80082bc <HAL_GetTick>
 800fa12:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f003 0320 	and.w	r3, r3, #32
 800fa1e:	2b20      	cmp	r3, #32
 800fa20:	d03b      	beq.n	800fa9a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	685a      	ldr	r2, [r3, #4]
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f022 0220 	bic.w	r2, r2, #32
 800fa30:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	685a      	ldr	r2, [r3, #4]
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f022 0202 	bic.w	r2, r2, #2
 800fa40:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fa42:	693a      	ldr	r2, [r7, #16]
 800fa44:	2164      	movs	r1, #100	@ 0x64
 800fa46:	6978      	ldr	r0, [r7, #20]
 800fa48:	f000 fa9e 	bl	800ff88 <SPI_EndRxTxTransaction>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d005      	beq.n	800fa5e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa56:	f043 0220 	orr.w	r2, r3, #32
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	689b      	ldr	r3, [r3, #8]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d10a      	bne.n	800fa7c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fa66:	2300      	movs	r3, #0
 800fa68:	60fb      	str	r3, [r7, #12]
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	60fb      	str	r3, [r7, #12]
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	60fb      	str	r3, [r7, #12]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2201      	movs	r2, #1
 800fa86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d003      	beq.n	800fa9a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800fa92:	6978      	ldr	r0, [r7, #20]
 800fa94:	f7ff ff9c 	bl	800f9d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800fa98:	e002      	b.n	800faa0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800fa9a:	6978      	ldr	r0, [r7, #20]
 800fa9c:	f7ff ff5c 	bl	800f958 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800faa0:	3718      	adds	r7, #24
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b084      	sub	sp, #16
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fab2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fab4:	f7f8 fc02 	bl	80082bc <HAL_GetTick>
 800fab8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f003 0320 	and.w	r3, r3, #32
 800fac4:	2b20      	cmp	r3, #32
 800fac6:	d03c      	beq.n	800fb42 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	685a      	ldr	r2, [r3, #4]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f022 0220 	bic.w	r2, r2, #32
 800fad6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d10d      	bne.n	800fafc <SPI_DMAReceiveCplt+0x56>
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fae8:	d108      	bne.n	800fafc <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	685a      	ldr	r2, [r3, #4]
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f022 0203 	bic.w	r2, r2, #3
 800faf8:	605a      	str	r2, [r3, #4]
 800fafa:	e007      	b.n	800fb0c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	685a      	ldr	r2, [r3, #4]
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f022 0201 	bic.w	r2, r2, #1
 800fb0a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fb0c:	68ba      	ldr	r2, [r7, #8]
 800fb0e:	2164      	movs	r1, #100	@ 0x64
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f000 f9e1 	bl	800fed8 <SPI_EndRxTransaction>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d002      	beq.n	800fb22 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	2220      	movs	r2, #32
 800fb20:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2200      	movs	r2, #0
 800fb26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d003      	beq.n	800fb42 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	f7ff ff48 	bl	800f9d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800fb40:	e002      	b.n	800fb48 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f7ff ff12 	bl	800f96c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fb48:	3710      	adds	r7, #16
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b084      	sub	sp, #16
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb5a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb5c:	f7f8 fbae 	bl	80082bc <HAL_GetTick>
 800fb60:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f003 0320 	and.w	r3, r3, #32
 800fb6c:	2b20      	cmp	r3, #32
 800fb6e:	d030      	beq.n	800fbd2 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	685a      	ldr	r2, [r3, #4]
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f022 0220 	bic.w	r2, r2, #32
 800fb7e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	2164      	movs	r1, #100	@ 0x64
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	f000 f9ff 	bl	800ff88 <SPI_EndRxTxTransaction>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d005      	beq.n	800fb9c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb94:	f043 0220 	orr.w	r2, r3, #32
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	685a      	ldr	r2, [r3, #4]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f022 0203 	bic.w	r2, r2, #3
 800fbaa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d003      	beq.n	800fbd2 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f7ff ff00 	bl	800f9d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800fbd0:	e002      	b.n	800fbd8 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f7ff fed4 	bl	800f980 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b084      	sub	sp, #16
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbea:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f7ff fed1 	bl	800f994 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fbf2:	bf00      	nop
 800fbf4:	3710      	adds	r7, #16
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}

0800fbfa <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fbfa:	b580      	push	{r7, lr}
 800fbfc:	b084      	sub	sp, #16
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc06:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff fecd 	bl	800f9a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fc0e:	bf00      	nop
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}

0800fc16 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fc16:	b580      	push	{r7, lr}
 800fc18:	b084      	sub	sp, #16
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc22:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800fc24:	68f8      	ldr	r0, [r7, #12]
 800fc26:	f7ff fec9 	bl	800f9bc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fc2a:	bf00      	nop
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b084      	sub	sp, #16
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc3e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	685a      	ldr	r2, [r3, #4]
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f022 0203 	bic.w	r2, r2, #3
 800fc4e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fc54:	f043 0210 	orr.w	r2, r3, #16
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f7ff feb3 	bl	800f9d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fc6a:	bf00      	nop
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}

0800fc72 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc72:	b580      	push	{r7, lr}
 800fc74:	b084      	sub	sp, #16
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc7e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2200      	movs	r2, #0
 800fc84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f7ff fe9e 	bl	800f9d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fc94:	bf00      	nop
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b088      	sub	sp, #32
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	603b      	str	r3, [r7, #0]
 800fca8:	4613      	mov	r3, r2
 800fcaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fcac:	f7f8 fb06 	bl	80082bc <HAL_GetTick>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb4:	1a9b      	subs	r3, r3, r2
 800fcb6:	683a      	ldr	r2, [r7, #0]
 800fcb8:	4413      	add	r3, r2
 800fcba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fcbc:	f7f8 fafe 	bl	80082bc <HAL_GetTick>
 800fcc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fcc2:	4b39      	ldr	r3, [pc, #228]	@ (800fda8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	015b      	lsls	r3, r3, #5
 800fcc8:	0d1b      	lsrs	r3, r3, #20
 800fcca:	69fa      	ldr	r2, [r7, #28]
 800fccc:	fb02 f303 	mul.w	r3, r2, r3
 800fcd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fcd2:	e054      	b.n	800fd7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcda:	d050      	beq.n	800fd7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fcdc:	f7f8 faee 	bl	80082bc <HAL_GetTick>
 800fce0:	4602      	mov	r2, r0
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	69fa      	ldr	r2, [r7, #28]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d902      	bls.n	800fcf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d13d      	bne.n	800fd6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	685a      	ldr	r2, [r3, #4]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fd00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fd0a:	d111      	bne.n	800fd30 <SPI_WaitFlagStateUntilTimeout+0x94>
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fd14:	d004      	beq.n	800fd20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fd1e:	d107      	bne.n	800fd30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fd2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd38:	d10f      	bne.n	800fd5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fd48:	601a      	str	r2, [r3, #0]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fd58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2200      	movs	r2, #0
 800fd66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800fd6a:	2303      	movs	r3, #3
 800fd6c:	e017      	b.n	800fd9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d101      	bne.n	800fd78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fd74:	2300      	movs	r3, #0
 800fd76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	689a      	ldr	r2, [r3, #8]
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	4013      	ands	r3, r2
 800fd88:	68ba      	ldr	r2, [r7, #8]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	bf0c      	ite	eq
 800fd8e:	2301      	moveq	r3, #1
 800fd90:	2300      	movne	r3, #0
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	461a      	mov	r2, r3
 800fd96:	79fb      	ldrb	r3, [r7, #7]
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d19b      	bne.n	800fcd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fd9c:	2300      	movs	r3, #0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3720      	adds	r7, #32
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	2000002c 	.word	0x2000002c

0800fdac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08a      	sub	sp, #40	@ 0x28
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
 800fdb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fdbe:	f7f8 fa7d 	bl	80082bc <HAL_GetTick>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdc6:	1a9b      	subs	r3, r3, r2
 800fdc8:	683a      	ldr	r2, [r7, #0]
 800fdca:	4413      	add	r3, r2
 800fdcc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800fdce:	f7f8 fa75 	bl	80082bc <HAL_GetTick>
 800fdd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	330c      	adds	r3, #12
 800fdda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fddc:	4b3d      	ldr	r3, [pc, #244]	@ (800fed4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	4613      	mov	r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	4413      	add	r3, r2
 800fde6:	00da      	lsls	r2, r3, #3
 800fde8:	1ad3      	subs	r3, r2, r3
 800fdea:	0d1b      	lsrs	r3, r3, #20
 800fdec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdee:	fb02 f303 	mul.w	r3, r2, r3
 800fdf2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800fdf4:	e060      	b.n	800feb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800fdfc:	d107      	bne.n	800fe0e <SPI_WaitFifoStateUntilTimeout+0x62>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d104      	bne.n	800fe0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe14:	d050      	beq.n	800feb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fe16:	f7f8 fa51 	bl	80082bc <HAL_GetTick>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	6a3b      	ldr	r3, [r7, #32]
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d902      	bls.n	800fe2c <SPI_WaitFifoStateUntilTimeout+0x80>
 800fe26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d13d      	bne.n	800fea8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	685a      	ldr	r2, [r3, #4]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fe3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fe44:	d111      	bne.n	800fe6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	689b      	ldr	r3, [r3, #8]
 800fe4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fe4e:	d004      	beq.n	800fe5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	689b      	ldr	r3, [r3, #8]
 800fe54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fe58:	d107      	bne.n	800fe6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fe68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe72:	d10f      	bne.n	800fe94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	681a      	ldr	r2, [r3, #0]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fe82:	601a      	str	r2, [r3, #0]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	681a      	ldr	r2, [r3, #0]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fe92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2201      	movs	r2, #1
 800fe98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800fea4:	2303      	movs	r3, #3
 800fea6:	e010      	b.n	800feca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d101      	bne.n	800feb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800feae:	2300      	movs	r3, #0
 800feb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	3b01      	subs	r3, #1
 800feb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	689a      	ldr	r2, [r3, #8]
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	4013      	ands	r3, r2
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d196      	bne.n	800fdf6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3728      	adds	r7, #40	@ 0x28
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	2000002c 	.word	0x2000002c

0800fed8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af02      	add	r7, sp, #8
 800fede:	60f8      	str	r0, [r7, #12]
 800fee0:	60b9      	str	r1, [r7, #8]
 800fee2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800feec:	d111      	bne.n	800ff12 <SPI_EndRxTransaction+0x3a>
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	689b      	ldr	r3, [r3, #8]
 800fef2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fef6:	d004      	beq.n	800ff02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ff00:	d107      	bne.n	800ff12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ff10:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	2180      	movs	r1, #128	@ 0x80
 800ff1c:	68f8      	ldr	r0, [r7, #12]
 800ff1e:	f7ff febd 	bl	800fc9c <SPI_WaitFlagStateUntilTimeout>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d007      	beq.n	800ff38 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ff2c:	f043 0220 	orr.w	r2, r3, #32
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ff34:	2303      	movs	r3, #3
 800ff36:	e023      	b.n	800ff80 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ff40:	d11d      	bne.n	800ff7e <SPI_EndRxTransaction+0xa6>
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	689b      	ldr	r3, [r3, #8]
 800ff46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff4a:	d004      	beq.n	800ff56 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	689b      	ldr	r3, [r3, #8]
 800ff50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ff54:	d113      	bne.n	800ff7e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	9300      	str	r3, [sp, #0]
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f7ff ff22 	bl	800fdac <SPI_WaitFifoStateUntilTimeout>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d007      	beq.n	800ff7e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ff72:	f043 0220 	orr.w	r2, r3, #32
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ff7a:	2303      	movs	r3, #3
 800ff7c:	e000      	b.n	800ff80 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3710      	adds	r7, #16
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af02      	add	r7, sp, #8
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ffa0:	68f8      	ldr	r0, [r7, #12]
 800ffa2:	f7ff ff03 	bl	800fdac <SPI_WaitFifoStateUntilTimeout>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d007      	beq.n	800ffbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ffb0:	f043 0220 	orr.w	r2, r3, #32
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ffb8:	2303      	movs	r3, #3
 800ffba:	e027      	b.n	801000c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	2180      	movs	r1, #128	@ 0x80
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f7ff fe68 	bl	800fc9c <SPI_WaitFlagStateUntilTimeout>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d007      	beq.n	800ffe2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ffd6:	f043 0220 	orr.w	r2, r3, #32
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ffde:	2303      	movs	r3, #3
 800ffe0:	e014      	b.n	801000c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	f7ff fedc 	bl	800fdac <SPI_WaitFifoStateUntilTimeout>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d007      	beq.n	801000a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fffe:	f043 0220 	orr.w	r2, r3, #32
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8010006:	2303      	movs	r3, #3
 8010008:	e000      	b.n	801000c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801000a:	2300      	movs	r3, #0
}
 801000c:	4618      	mov	r0, r3
 801000e:	3710      	adds	r7, #16
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d101      	bne.n	8010026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010022:	2301      	movs	r3, #1
 8010024:	e049      	b.n	80100ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801002c:	b2db      	uxtb	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d106      	bne.n	8010040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f7f7 fc24 	bl	8007888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2202      	movs	r2, #2
 8010044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	3304      	adds	r3, #4
 8010050:	4619      	mov	r1, r3
 8010052:	4610      	mov	r0, r2
 8010054:	f000 fafc 	bl	8010650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2201      	movs	r2, #1
 801005c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2201      	movs	r2, #1
 8010064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2201      	movs	r2, #1
 801006c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2201      	movs	r2, #1
 8010074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2201      	movs	r2, #1
 801007c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2201      	movs	r2, #1
 8010084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2201      	movs	r2, #1
 8010094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2201      	movs	r2, #1
 80100b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80100b8:	2300      	movs	r3, #0
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
	...

080100c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d001      	beq.n	80100dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80100d8:	2301      	movs	r3, #1
 80100da:	e02e      	b.n	801013a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2202      	movs	r2, #2
 80100e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	4a17      	ldr	r2, [pc, #92]	@ (8010148 <HAL_TIM_Base_Start+0x84>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d004      	beq.n	80100f8 <HAL_TIM_Base_Start+0x34>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80100f6:	d115      	bne.n	8010124 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	689a      	ldr	r2, [r3, #8]
 80100fe:	4b13      	ldr	r3, [pc, #76]	@ (801014c <HAL_TIM_Base_Start+0x88>)
 8010100:	4013      	ands	r3, r2
 8010102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b06      	cmp	r3, #6
 8010108:	d015      	beq.n	8010136 <HAL_TIM_Base_Start+0x72>
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010110:	d011      	beq.n	8010136 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f042 0201 	orr.w	r2, r2, #1
 8010120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010122:	e008      	b.n	8010136 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	681a      	ldr	r2, [r3, #0]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f042 0201 	orr.w	r2, r2, #1
 8010132:	601a      	str	r2, [r3, #0]
 8010134:	e000      	b.n	8010138 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010136:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3714      	adds	r7, #20
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr
 8010146:	bf00      	nop
 8010148:	40012c00 	.word	0x40012c00
 801014c:	00010007 	.word	0x00010007

08010150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010150:	b480      	push	{r7}
 8010152:	b085      	sub	sp, #20
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801015e:	b2db      	uxtb	r3, r3
 8010160:	2b01      	cmp	r3, #1
 8010162:	d001      	beq.n	8010168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	e036      	b.n	80101d6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2202      	movs	r2, #2
 801016c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	68da      	ldr	r2, [r3, #12]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f042 0201 	orr.w	r2, r2, #1
 801017e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4a17      	ldr	r2, [pc, #92]	@ (80101e4 <HAL_TIM_Base_Start_IT+0x94>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d004      	beq.n	8010194 <HAL_TIM_Base_Start_IT+0x44>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010192:	d115      	bne.n	80101c0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	689a      	ldr	r2, [r3, #8]
 801019a:	4b13      	ldr	r3, [pc, #76]	@ (80101e8 <HAL_TIM_Base_Start_IT+0x98>)
 801019c:	4013      	ands	r3, r2
 801019e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2b06      	cmp	r3, #6
 80101a4:	d015      	beq.n	80101d2 <HAL_TIM_Base_Start_IT+0x82>
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80101ac:	d011      	beq.n	80101d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f042 0201 	orr.w	r2, r2, #1
 80101bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101be:	e008      	b.n	80101d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f042 0201 	orr.w	r2, r2, #1
 80101ce:	601a      	str	r2, [r3, #0]
 80101d0:	e000      	b.n	80101d4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80101d4:	2300      	movs	r3, #0
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3714      	adds	r7, #20
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	40012c00 	.word	0x40012c00
 80101e8:	00010007 	.word	0x00010007

080101ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	68da      	ldr	r2, [r3, #12]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f022 0201 	bic.w	r2, r2, #1
 8010202:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	6a1a      	ldr	r2, [r3, #32]
 801020a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801020e:	4013      	ands	r3, r2
 8010210:	2b00      	cmp	r3, #0
 8010212:	d10f      	bne.n	8010234 <HAL_TIM_Base_Stop_IT+0x48>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	6a1a      	ldr	r2, [r3, #32]
 801021a:	f240 4344 	movw	r3, #1092	@ 0x444
 801021e:	4013      	ands	r3, r2
 8010220:	2b00      	cmp	r3, #0
 8010222:	d107      	bne.n	8010234 <HAL_TIM_Base_Stop_IT+0x48>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f022 0201 	bic.w	r2, r2, #1
 8010232:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2201      	movs	r2, #1
 8010238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 801023c:	2300      	movs	r3, #0
}
 801023e:	4618      	mov	r0, r3
 8010240:	370c      	adds	r7, #12
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr

0801024a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b084      	sub	sp, #16
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	691b      	ldr	r3, [r3, #16]
 8010260:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	f003 0302 	and.w	r3, r3, #2
 8010268:	2b00      	cmp	r3, #0
 801026a:	d020      	beq.n	80102ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f003 0302 	and.w	r3, r3, #2
 8010272:	2b00      	cmp	r3, #0
 8010274:	d01b      	beq.n	80102ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f06f 0202 	mvn.w	r2, #2
 801027e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2201      	movs	r2, #1
 8010284:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	699b      	ldr	r3, [r3, #24]
 801028c:	f003 0303 	and.w	r3, r3, #3
 8010290:	2b00      	cmp	r3, #0
 8010292:	d003      	beq.n	801029c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 f9bc 	bl	8010612 <HAL_TIM_IC_CaptureCallback>
 801029a:	e005      	b.n	80102a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f000 f9ae 	bl	80105fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 f9bf 	bl	8010626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	f003 0304 	and.w	r3, r3, #4
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d020      	beq.n	80102fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f003 0304 	and.w	r3, r3, #4
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d01b      	beq.n	80102fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	f06f 0204 	mvn.w	r2, #4
 80102ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2202      	movs	r2, #2
 80102d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	699b      	ldr	r3, [r3, #24]
 80102d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d003      	beq.n	80102e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f000 f996 	bl	8010612 <HAL_TIM_IC_CaptureCallback>
 80102e6:	e005      	b.n	80102f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f000 f988 	bl	80105fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f000 f999 	bl	8010626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	f003 0308 	and.w	r3, r3, #8
 8010300:	2b00      	cmp	r3, #0
 8010302:	d020      	beq.n	8010346 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f003 0308 	and.w	r3, r3, #8
 801030a:	2b00      	cmp	r3, #0
 801030c:	d01b      	beq.n	8010346 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f06f 0208 	mvn.w	r2, #8
 8010316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2204      	movs	r2, #4
 801031c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	69db      	ldr	r3, [r3, #28]
 8010324:	f003 0303 	and.w	r3, r3, #3
 8010328:	2b00      	cmp	r3, #0
 801032a:	d003      	beq.n	8010334 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 f970 	bl	8010612 <HAL_TIM_IC_CaptureCallback>
 8010332:	e005      	b.n	8010340 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 f962 	bl	80105fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 f973 	bl	8010626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	f003 0310 	and.w	r3, r3, #16
 801034c:	2b00      	cmp	r3, #0
 801034e:	d020      	beq.n	8010392 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f003 0310 	and.w	r3, r3, #16
 8010356:	2b00      	cmp	r3, #0
 8010358:	d01b      	beq.n	8010392 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f06f 0210 	mvn.w	r2, #16
 8010362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2208      	movs	r2, #8
 8010368:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	69db      	ldr	r3, [r3, #28]
 8010370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010374:	2b00      	cmp	r3, #0
 8010376:	d003      	beq.n	8010380 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 f94a 	bl	8010612 <HAL_TIM_IC_CaptureCallback>
 801037e:	e005      	b.n	801038c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f93c 	bl	80105fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 f94d 	bl	8010626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2200      	movs	r2, #0
 8010390:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	f003 0301 	and.w	r3, r3, #1
 8010398:	2b00      	cmp	r3, #0
 801039a:	d00c      	beq.n	80103b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	f003 0301 	and.w	r3, r3, #1
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d007      	beq.n	80103b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f06f 0201 	mvn.w	r2, #1
 80103ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f000 f91a 	bl	80105ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d104      	bne.n	80103ca <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00c      	beq.n	80103e4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d007      	beq.n	80103e4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80103dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 faac 	bl	801093c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00c      	beq.n	8010408 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d007      	beq.n	8010408 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 faa4 	bl	8010950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801040e:	2b00      	cmp	r3, #0
 8010410:	d00c      	beq.n	801042c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010418:	2b00      	cmp	r3, #0
 801041a:	d007      	beq.n	801042c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 f907 	bl	801063a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	f003 0320 	and.w	r3, r3, #32
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00c      	beq.n	8010450 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f003 0320 	and.w	r3, r3, #32
 801043c:	2b00      	cmp	r3, #0
 801043e:	d007      	beq.n	8010450 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f06f 0220 	mvn.w	r2, #32
 8010448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f000 fa6c 	bl	8010928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010450:	bf00      	nop
 8010452:	3710      	adds	r7, #16
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010462:	2300      	movs	r3, #0
 8010464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801046c:	2b01      	cmp	r3, #1
 801046e:	d101      	bne.n	8010474 <HAL_TIM_ConfigClockSource+0x1c>
 8010470:	2302      	movs	r3, #2
 8010472:	e0b6      	b.n	80105e2 <HAL_TIM_ConfigClockSource+0x18a>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2201      	movs	r2, #1
 8010478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2202      	movs	r2, #2
 8010480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	689b      	ldr	r3, [r3, #8]
 801048a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8010492:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801049e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	68ba      	ldr	r2, [r7, #8]
 80104a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80104b0:	d03e      	beq.n	8010530 <HAL_TIM_ConfigClockSource+0xd8>
 80104b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80104b6:	f200 8087 	bhi.w	80105c8 <HAL_TIM_ConfigClockSource+0x170>
 80104ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80104be:	f000 8086 	beq.w	80105ce <HAL_TIM_ConfigClockSource+0x176>
 80104c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80104c6:	d87f      	bhi.n	80105c8 <HAL_TIM_ConfigClockSource+0x170>
 80104c8:	2b70      	cmp	r3, #112	@ 0x70
 80104ca:	d01a      	beq.n	8010502 <HAL_TIM_ConfigClockSource+0xaa>
 80104cc:	2b70      	cmp	r3, #112	@ 0x70
 80104ce:	d87b      	bhi.n	80105c8 <HAL_TIM_ConfigClockSource+0x170>
 80104d0:	2b60      	cmp	r3, #96	@ 0x60
 80104d2:	d050      	beq.n	8010576 <HAL_TIM_ConfigClockSource+0x11e>
 80104d4:	2b60      	cmp	r3, #96	@ 0x60
 80104d6:	d877      	bhi.n	80105c8 <HAL_TIM_ConfigClockSource+0x170>
 80104d8:	2b50      	cmp	r3, #80	@ 0x50
 80104da:	d03c      	beq.n	8010556 <HAL_TIM_ConfigClockSource+0xfe>
 80104dc:	2b50      	cmp	r3, #80	@ 0x50
 80104de:	d873      	bhi.n	80105c8 <HAL_TIM_ConfigClockSource+0x170>
 80104e0:	2b40      	cmp	r3, #64	@ 0x40
 80104e2:	d058      	beq.n	8010596 <HAL_TIM_ConfigClockSource+0x13e>
 80104e4:	2b40      	cmp	r3, #64	@ 0x40
 80104e6:	d86f      	bhi.n	80105c8 <HAL_TIM_ConfigClockSource+0x170>
 80104e8:	2b30      	cmp	r3, #48	@ 0x30
 80104ea:	d064      	beq.n	80105b6 <HAL_TIM_ConfigClockSource+0x15e>
 80104ec:	2b30      	cmp	r3, #48	@ 0x30
 80104ee:	d86b      	bhi.n	80105c8 <HAL_TIM_ConfigClockSource+0x170>
 80104f0:	2b20      	cmp	r3, #32
 80104f2:	d060      	beq.n	80105b6 <HAL_TIM_ConfigClockSource+0x15e>
 80104f4:	2b20      	cmp	r3, #32
 80104f6:	d867      	bhi.n	80105c8 <HAL_TIM_ConfigClockSource+0x170>
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d05c      	beq.n	80105b6 <HAL_TIM_ConfigClockSource+0x15e>
 80104fc:	2b10      	cmp	r3, #16
 80104fe:	d05a      	beq.n	80105b6 <HAL_TIM_ConfigClockSource+0x15e>
 8010500:	e062      	b.n	80105c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010512:	f000 f989 	bl	8010828 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	609a      	str	r2, [r3, #8]
      break;
 801052e:	e04f      	b.n	80105d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010540:	f000 f972 	bl	8010828 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	689a      	ldr	r2, [r3, #8]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010552:	609a      	str	r2, [r3, #8]
      break;
 8010554:	e03c      	b.n	80105d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010562:	461a      	mov	r2, r3
 8010564:	f000 f8e4 	bl	8010730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2150      	movs	r1, #80	@ 0x50
 801056e:	4618      	mov	r0, r3
 8010570:	f000 f93d 	bl	80107ee <TIM_ITRx_SetConfig>
      break;
 8010574:	e02c      	b.n	80105d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010582:	461a      	mov	r2, r3
 8010584:	f000 f903 	bl	801078e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2160      	movs	r1, #96	@ 0x60
 801058e:	4618      	mov	r0, r3
 8010590:	f000 f92d 	bl	80107ee <TIM_ITRx_SetConfig>
      break;
 8010594:	e01c      	b.n	80105d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80105a2:	461a      	mov	r2, r3
 80105a4:	f000 f8c4 	bl	8010730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2140      	movs	r1, #64	@ 0x40
 80105ae:	4618      	mov	r0, r3
 80105b0:	f000 f91d 	bl	80107ee <TIM_ITRx_SetConfig>
      break;
 80105b4:	e00c      	b.n	80105d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4619      	mov	r1, r3
 80105c0:	4610      	mov	r0, r2
 80105c2:	f000 f914 	bl	80107ee <TIM_ITRx_SetConfig>
      break;
 80105c6:	e003      	b.n	80105d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80105c8:	2301      	movs	r3, #1
 80105ca:	73fb      	strb	r3, [r7, #15]
      break;
 80105cc:	e000      	b.n	80105d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80105ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80105ea:	b480      	push	{r7}
 80105ec:	b083      	sub	sp, #12
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80105f2:	bf00      	nop
 80105f4:	370c      	adds	r7, #12
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr

080105fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80105fe:	b480      	push	{r7}
 8010600:	b083      	sub	sp, #12
 8010602:	af00      	add	r7, sp, #0
 8010604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010606:	bf00      	nop
 8010608:	370c      	adds	r7, #12
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr

08010612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010612:	b480      	push	{r7}
 8010614:	b083      	sub	sp, #12
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801061a:	bf00      	nop
 801061c:	370c      	adds	r7, #12
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr

08010626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010626:	b480      	push	{r7}
 8010628:	b083      	sub	sp, #12
 801062a:	af00      	add	r7, sp, #0
 801062c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801062e:	bf00      	nop
 8010630:	370c      	adds	r7, #12
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr

0801063a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801063a:	b480      	push	{r7}
 801063c:	b083      	sub	sp, #12
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010642:	bf00      	nop
 8010644:	370c      	adds	r7, #12
 8010646:	46bd      	mov	sp, r7
 8010648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064c:	4770      	bx	lr
	...

08010650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010650:	b480      	push	{r7}
 8010652:	b085      	sub	sp, #20
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4a30      	ldr	r2, [pc, #192]	@ (8010724 <TIM_Base_SetConfig+0xd4>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d003      	beq.n	8010670 <TIM_Base_SetConfig+0x20>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801066e:	d108      	bne.n	8010682 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	4313      	orrs	r3, r2
 8010680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4a27      	ldr	r2, [pc, #156]	@ (8010724 <TIM_Base_SetConfig+0xd4>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d00b      	beq.n	80106a2 <TIM_Base_SetConfig+0x52>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010690:	d007      	beq.n	80106a2 <TIM_Base_SetConfig+0x52>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4a24      	ldr	r2, [pc, #144]	@ (8010728 <TIM_Base_SetConfig+0xd8>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d003      	beq.n	80106a2 <TIM_Base_SetConfig+0x52>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4a23      	ldr	r2, [pc, #140]	@ (801072c <TIM_Base_SetConfig+0xdc>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d108      	bne.n	80106b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80106a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	68fa      	ldr	r2, [r7, #12]
 80106b0:	4313      	orrs	r3, r2
 80106b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	695b      	ldr	r3, [r3, #20]
 80106be:	4313      	orrs	r3, r2
 80106c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	689a      	ldr	r2, [r3, #8]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4a12      	ldr	r2, [pc, #72]	@ (8010724 <TIM_Base_SetConfig+0xd4>)
 80106dc:	4293      	cmp	r3, r2
 80106de:	d007      	beq.n	80106f0 <TIM_Base_SetConfig+0xa0>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	4a11      	ldr	r2, [pc, #68]	@ (8010728 <TIM_Base_SetConfig+0xd8>)
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d003      	beq.n	80106f0 <TIM_Base_SetConfig+0xa0>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	4a10      	ldr	r2, [pc, #64]	@ (801072c <TIM_Base_SetConfig+0xdc>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d103      	bne.n	80106f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	691a      	ldr	r2, [r3, #16]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2201      	movs	r2, #1
 80106fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	691b      	ldr	r3, [r3, #16]
 8010702:	f003 0301 	and.w	r3, r3, #1
 8010706:	2b01      	cmp	r3, #1
 8010708:	d105      	bne.n	8010716 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	691b      	ldr	r3, [r3, #16]
 801070e:	f023 0201 	bic.w	r2, r3, #1
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	611a      	str	r2, [r3, #16]
  }
}
 8010716:	bf00      	nop
 8010718:	3714      	adds	r7, #20
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	40012c00 	.word	0x40012c00
 8010728:	40014400 	.word	0x40014400
 801072c:	40014800 	.word	0x40014800

08010730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010730:	b480      	push	{r7}
 8010732:	b087      	sub	sp, #28
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	6a1b      	ldr	r3, [r3, #32]
 8010740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6a1b      	ldr	r3, [r3, #32]
 8010746:	f023 0201 	bic.w	r2, r3, #1
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	699b      	ldr	r3, [r3, #24]
 8010752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801075a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	011b      	lsls	r3, r3, #4
 8010760:	693a      	ldr	r2, [r7, #16]
 8010762:	4313      	orrs	r3, r2
 8010764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	f023 030a 	bic.w	r3, r3, #10
 801076c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801076e:	697a      	ldr	r2, [r7, #20]
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	4313      	orrs	r3, r2
 8010774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	693a      	ldr	r2, [r7, #16]
 801077a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	697a      	ldr	r2, [r7, #20]
 8010780:	621a      	str	r2, [r3, #32]
}
 8010782:	bf00      	nop
 8010784:	371c      	adds	r7, #28
 8010786:	46bd      	mov	sp, r7
 8010788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078c:	4770      	bx	lr

0801078e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801078e:	b480      	push	{r7}
 8010790:	b087      	sub	sp, #28
 8010792:	af00      	add	r7, sp, #0
 8010794:	60f8      	str	r0, [r7, #12]
 8010796:	60b9      	str	r1, [r7, #8]
 8010798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	6a1b      	ldr	r3, [r3, #32]
 801079e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6a1b      	ldr	r3, [r3, #32]
 80107a4:	f023 0210 	bic.w	r2, r3, #16
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	699b      	ldr	r3, [r3, #24]
 80107b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80107b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	031b      	lsls	r3, r3, #12
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	4313      	orrs	r3, r2
 80107c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80107ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	011b      	lsls	r3, r3, #4
 80107d0:	697a      	ldr	r2, [r7, #20]
 80107d2:	4313      	orrs	r3, r2
 80107d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	693a      	ldr	r2, [r7, #16]
 80107da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	697a      	ldr	r2, [r7, #20]
 80107e0:	621a      	str	r2, [r3, #32]
}
 80107e2:	bf00      	nop
 80107e4:	371c      	adds	r7, #28
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr

080107ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80107ee:	b480      	push	{r7}
 80107f0:	b085      	sub	sp, #20
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	689b      	ldr	r3, [r3, #8]
 80107fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801080a:	683a      	ldr	r2, [r7, #0]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	4313      	orrs	r3, r2
 8010810:	f043 0307 	orr.w	r3, r3, #7
 8010814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68fa      	ldr	r2, [r7, #12]
 801081a:	609a      	str	r2, [r3, #8]
}
 801081c:	bf00      	nop
 801081e:	3714      	adds	r7, #20
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010828:	b480      	push	{r7}
 801082a:	b087      	sub	sp, #28
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
 8010834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	021a      	lsls	r2, r3, #8
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	431a      	orrs	r2, r3
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	4313      	orrs	r3, r2
 8010850:	697a      	ldr	r2, [r7, #20]
 8010852:	4313      	orrs	r3, r2
 8010854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	697a      	ldr	r2, [r7, #20]
 801085a:	609a      	str	r2, [r3, #8]
}
 801085c:	bf00      	nop
 801085e:	371c      	adds	r7, #28
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr

08010868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010868:	b480      	push	{r7}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010878:	2b01      	cmp	r3, #1
 801087a:	d101      	bne.n	8010880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801087c:	2302      	movs	r3, #2
 801087e:	e04a      	b.n	8010916 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2201      	movs	r2, #1
 8010884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2202      	movs	r2, #2
 801088c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	689b      	ldr	r3, [r3, #8]
 801089e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a1f      	ldr	r2, [pc, #124]	@ (8010924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d108      	bne.n	80108bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80108b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	68fa      	ldr	r2, [r7, #12]
 80108b8:	4313      	orrs	r3, r2
 80108ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80108c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	4313      	orrs	r3, r2
 80108cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	68fa      	ldr	r2, [r7, #12]
 80108d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4a12      	ldr	r2, [pc, #72]	@ (8010924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d004      	beq.n	80108ea <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108e8:	d10c      	bne.n	8010904 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80108f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	68ba      	ldr	r2, [r7, #8]
 80108f8:	4313      	orrs	r3, r2
 80108fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68ba      	ldr	r2, [r7, #8]
 8010902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2201      	movs	r2, #1
 8010908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010914:	2300      	movs	r3, #0
}
 8010916:	4618      	mov	r0, r3
 8010918:	3714      	adds	r7, #20
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	40012c00 	.word	0x40012c00

08010928 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010930:	bf00      	nop
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010944:	bf00      	nop
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010958:	bf00      	nop
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <LL_RCC_GetUSARTClockSource>:
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 801096c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010970:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	4013      	ands	r3, r2
}
 8010978:	4618      	mov	r0, r3
 801097a:	370c      	adds	r7, #12
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <LL_RCC_GetLPUARTClockSource>:
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801098c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010990:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4013      	ands	r3, r2
}
 8010998:	4618      	mov	r0, r3
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d101      	bne.n	80109b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109b2:	2301      	movs	r3, #1
 80109b4:	e042      	b.n	8010a3c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d106      	bne.n	80109ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f7f7 fa27 	bl	8007e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2224      	movs	r2, #36	@ 0x24
 80109d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f022 0201 	bic.w	r2, r2, #1
 80109e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d002      	beq.n	80109f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 ffe4 	bl	80119bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fdb9 	bl	801156c <UART_SetConfig>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b01      	cmp	r3, #1
 80109fe:	d101      	bne.n	8010a04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010a00:	2301      	movs	r3, #1
 8010a02:	e01b      	b.n	8010a3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	685a      	ldr	r2, [r3, #4]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010a12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	689a      	ldr	r2, [r3, #8]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010a22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	681a      	ldr	r2, [r3, #0]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f042 0201 	orr.w	r2, r2, #1
 8010a32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f001 f863 	bl	8011b00 <UART_CheckIdleState>
 8010a3a:	4603      	mov	r3, r0
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3708      	adds	r7, #8
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d101      	bne.n	8010a56 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	e031      	b.n	8010aba <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2224      	movs	r2, #36	@ 0x24
 8010a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f022 0201 	bic.w	r2, r2, #1
 8010a6c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2200      	movs	r2, #0
 8010a74:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2200      	movs	r2, #0
 8010a84:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f7f7 fa72 	bl	8007f70 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2200      	movs	r2, #0
 8010a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2200      	movs	r2, #0
 8010aae:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b08a      	sub	sp, #40	@ 0x28
 8010ac6:	af02      	add	r7, sp, #8
 8010ac8:	60f8      	str	r0, [r7, #12]
 8010aca:	60b9      	str	r1, [r7, #8]
 8010acc:	603b      	str	r3, [r7, #0]
 8010ace:	4613      	mov	r3, r2
 8010ad0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ad8:	2b20      	cmp	r3, #32
 8010ada:	d17b      	bne.n	8010bd4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d002      	beq.n	8010ae8 <HAL_UART_Transmit+0x26>
 8010ae2:	88fb      	ldrh	r3, [r7, #6]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d101      	bne.n	8010aec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010ae8:	2301      	movs	r3, #1
 8010aea:	e074      	b.n	8010bd6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2221      	movs	r2, #33	@ 0x21
 8010af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010afc:	f7f7 fbde 	bl	80082bc <HAL_GetTick>
 8010b00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	88fa      	ldrh	r2, [r7, #6]
 8010b06:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	88fa      	ldrh	r2, [r7, #6]
 8010b0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	689b      	ldr	r3, [r3, #8]
 8010b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b1a:	d108      	bne.n	8010b2e <HAL_UART_Transmit+0x6c>
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	691b      	ldr	r3, [r3, #16]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d104      	bne.n	8010b2e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010b24:	2300      	movs	r3, #0
 8010b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	61bb      	str	r3, [r7, #24]
 8010b2c:	e003      	b.n	8010b36 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010b32:	2300      	movs	r3, #0
 8010b34:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010b36:	e030      	b.n	8010b9a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	2180      	movs	r1, #128	@ 0x80
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f001 f886 	bl	8011c54 <UART_WaitOnFlagUntilTimeout>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d005      	beq.n	8010b5a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2220      	movs	r2, #32
 8010b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010b56:	2303      	movs	r3, #3
 8010b58:	e03d      	b.n	8010bd6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d10b      	bne.n	8010b78 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	881b      	ldrh	r3, [r3, #0]
 8010b64:	461a      	mov	r2, r3
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010b6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	3302      	adds	r3, #2
 8010b74:	61bb      	str	r3, [r7, #24]
 8010b76:	e007      	b.n	8010b88 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	781a      	ldrb	r2, [r3, #0]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	3301      	adds	r3, #1
 8010b86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	3b01      	subs	r3, #1
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d1c8      	bne.n	8010b38 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	9300      	str	r3, [sp, #0]
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	2200      	movs	r2, #0
 8010bae:	2140      	movs	r1, #64	@ 0x40
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	f001 f84f 	bl	8011c54 <UART_WaitOnFlagUntilTimeout>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d005      	beq.n	8010bc8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2220      	movs	r2, #32
 8010bc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010bc4:	2303      	movs	r3, #3
 8010bc6:	e006      	b.n	8010bd6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2220      	movs	r2, #32
 8010bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	e000      	b.n	8010bd6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010bd4:	2302      	movs	r3, #2
  }
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3720      	adds	r7, #32
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
	...

08010be0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b08a      	sub	sp, #40	@ 0x28
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	4613      	mov	r3, r2
 8010bec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010bf4:	2b20      	cmp	r3, #32
 8010bf6:	d137      	bne.n	8010c68 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d002      	beq.n	8010c04 <HAL_UART_Receive_DMA+0x24>
 8010bfe:	88fb      	ldrh	r3, [r7, #6]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d101      	bne.n	8010c08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010c04:	2301      	movs	r3, #1
 8010c06:	e030      	b.n	8010c6a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	4a18      	ldr	r2, [pc, #96]	@ (8010c74 <HAL_UART_Receive_DMA+0x94>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d01f      	beq.n	8010c58 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d018      	beq.n	8010c58 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	e853 3f00 	ldrex	r3, [r3]
 8010c32:	613b      	str	r3, [r7, #16]
   return(result);
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	461a      	mov	r2, r3
 8010c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c44:	623b      	str	r3, [r7, #32]
 8010c46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c48:	69f9      	ldr	r1, [r7, #28]
 8010c4a:	6a3a      	ldr	r2, [r7, #32]
 8010c4c:	e841 2300 	strex	r3, r2, [r1]
 8010c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d1e6      	bne.n	8010c26 <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010c58:	88fb      	ldrh	r3, [r7, #6]
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	68b9      	ldr	r1, [r7, #8]
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f001 f866 	bl	8011d30 <UART_Start_Receive_DMA>
 8010c64:	4603      	mov	r3, r0
 8010c66:	e000      	b.n	8010c6a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010c68:	2302      	movs	r3, #2
  }
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3728      	adds	r7, #40	@ 0x28
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	40008000 	.word	0x40008000

08010c78 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b0a0      	sub	sp, #128	@ 0x80
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010c88:	e853 3f00 	ldrex	r3, [r3]
 8010c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8010c8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010c90:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8010c94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010ca0:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8010ca4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010ca6:	e841 2300 	strex	r3, r2, [r1]
 8010caa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010cac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1e6      	bne.n	8010c80 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	3308      	adds	r3, #8
 8010cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010cbc:	e853 3f00 	ldrex	r3, [r3]
 8010cc0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cc4:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 8010cc8:	f023 0301 	bic.w	r3, r3, #1
 8010ccc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	3308      	adds	r3, #8
 8010cd4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010cd6:	657a      	str	r2, [r7, #84]	@ 0x54
 8010cd8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010cdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010cde:	e841 2300 	strex	r3, r2, [r1]
 8010ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d1e3      	bne.n	8010cb2 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d118      	bne.n	8010d24 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cfa:	e853 3f00 	ldrex	r3, [r3]
 8010cfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d02:	f023 0310 	bic.w	r3, r3, #16
 8010d06:	677b      	str	r3, [r7, #116]	@ 0x74
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010d16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010d18:	e841 2300 	strex	r3, r2, [r1]
 8010d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1e6      	bne.n	8010cf2 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d2e:	2b80      	cmp	r3, #128	@ 0x80
 8010d30:	d137      	bne.n	8010da2 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	3308      	adds	r3, #8
 8010d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d3a:	6a3b      	ldr	r3, [r7, #32]
 8010d3c:	e853 3f00 	ldrex	r3, [r3]
 8010d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d42:	69fb      	ldr	r3, [r7, #28]
 8010d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	3308      	adds	r3, #8
 8010d50:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d5a:	e841 2300 	strex	r3, r2, [r1]
 8010d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d1e5      	bne.n	8010d32 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d019      	beq.n	8010da2 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010d72:	2200      	movs	r2, #0
 8010d74:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7f8 fe95 	bl	8009aaa <HAL_DMA_Abort>
 8010d80:	4603      	mov	r3, r0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00d      	beq.n	8010da2 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7f8 fffa 	bl	8009d84 <HAL_DMA_GetError>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b20      	cmp	r3, #32
 8010d94:	d105      	bne.n	8010da2 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2210      	movs	r2, #16
 8010d9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8010d9e:	2303      	movs	r3, #3
 8010da0:	e073      	b.n	8010e8a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010dac:	2b40      	cmp	r3, #64	@ 0x40
 8010dae:	d13b      	bne.n	8010e28 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	3308      	adds	r3, #8
 8010db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	e853 3f00 	ldrex	r3, [r3]
 8010dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3308      	adds	r3, #8
 8010dce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010dd0:	61ba      	str	r2, [r7, #24]
 8010dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd4:	6979      	ldr	r1, [r7, #20]
 8010dd6:	69ba      	ldr	r2, [r7, #24]
 8010dd8:	e841 2300 	strex	r3, r2, [r1]
 8010ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1e5      	bne.n	8010db0 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d01c      	beq.n	8010e28 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010df4:	2200      	movs	r2, #0
 8010df6:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7f8 fe53 	bl	8009aaa <HAL_DMA_Abort>
 8010e04:	4603      	mov	r3, r0
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00e      	beq.n	8010e28 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7f8 ffb7 	bl	8009d84 <HAL_DMA_GetError>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b20      	cmp	r3, #32
 8010e1a:	d105      	bne.n	8010e28 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2210      	movs	r2, #16
 8010e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8010e24:	2303      	movs	r3, #3
 8010e26:	e030      	b.n	8010e8a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	220f      	movs	r2, #15
 8010e3e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010e48:	d107      	bne.n	8010e5a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	699a      	ldr	r2, [r3, #24]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f042 0210 	orr.w	r2, r2, #16
 8010e58:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	699a      	ldr	r2, [r3, #24]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f042 0208 	orr.w	r2, r2, #8
 8010e68:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2220      	movs	r2, #32
 8010e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2220      	movs	r2, #32
 8010e76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2200      	movs	r2, #0
 8010e84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8010e88:	2300      	movs	r3, #0
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3780      	adds	r7, #128	@ 0x80
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
	...

08010e94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b0ba      	sub	sp, #232	@ 0xe8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	69db      	ldr	r3, [r3, #28]
 8010ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	689b      	ldr	r3, [r3, #8]
 8010eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010eba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010ebe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010ec2:	4013      	ands	r3, r2
 8010ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d11b      	bne.n	8010f08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ed4:	f003 0320 	and.w	r3, r3, #32
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d015      	beq.n	8010f08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ee0:	f003 0320 	and.w	r3, r3, #32
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d105      	bne.n	8010ef4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d009      	beq.n	8010f08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f000 8300 	beq.w	80114fe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	4798      	blx	r3
      }
      return;
 8010f06:	e2fa      	b.n	80114fe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	f000 8123 	beq.w	8011158 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010f12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010f16:	4b8d      	ldr	r3, [pc, #564]	@ (801114c <HAL_UART_IRQHandler+0x2b8>)
 8010f18:	4013      	ands	r3, r2
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d106      	bne.n	8010f2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010f1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010f22:	4b8b      	ldr	r3, [pc, #556]	@ (8011150 <HAL_UART_IRQHandler+0x2bc>)
 8010f24:	4013      	ands	r3, r2
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	f000 8116 	beq.w	8011158 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f30:	f003 0301 	and.w	r3, r3, #1
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d011      	beq.n	8010f5c <HAL_UART_IRQHandler+0xc8>
 8010f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00b      	beq.n	8010f5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f52:	f043 0201 	orr.w	r2, r3, #1
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f60:	f003 0302 	and.w	r3, r3, #2
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d011      	beq.n	8010f8c <HAL_UART_IRQHandler+0xf8>
 8010f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f6c:	f003 0301 	and.w	r3, r3, #1
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d00b      	beq.n	8010f8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	2202      	movs	r2, #2
 8010f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f82:	f043 0204 	orr.w	r2, r3, #4
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f90:	f003 0304 	and.w	r3, r3, #4
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d011      	beq.n	8010fbc <HAL_UART_IRQHandler+0x128>
 8010f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f9c:	f003 0301 	and.w	r3, r3, #1
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d00b      	beq.n	8010fbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2204      	movs	r2, #4
 8010faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fb2:	f043 0202 	orr.w	r2, r3, #2
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010fc0:	f003 0308 	and.w	r3, r3, #8
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d017      	beq.n	8010ff8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010fcc:	f003 0320 	and.w	r3, r3, #32
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d105      	bne.n	8010fe0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010fd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010fd8:	4b5c      	ldr	r3, [pc, #368]	@ (801114c <HAL_UART_IRQHandler+0x2b8>)
 8010fda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00b      	beq.n	8010ff8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2208      	movs	r2, #8
 8010fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fee:	f043 0208 	orr.w	r2, r3, #8
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011000:	2b00      	cmp	r3, #0
 8011002:	d012      	beq.n	801102a <HAL_UART_IRQHandler+0x196>
 8011004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011008:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801100c:	2b00      	cmp	r3, #0
 801100e:	d00c      	beq.n	801102a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011018:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011020:	f043 0220 	orr.w	r2, r3, #32
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011030:	2b00      	cmp	r3, #0
 8011032:	f000 8266 	beq.w	8011502 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801103a:	f003 0320 	and.w	r3, r3, #32
 801103e:	2b00      	cmp	r3, #0
 8011040:	d013      	beq.n	801106a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011046:	f003 0320 	and.w	r3, r3, #32
 801104a:	2b00      	cmp	r3, #0
 801104c:	d105      	bne.n	801105a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801104e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011056:	2b00      	cmp	r3, #0
 8011058:	d007      	beq.n	801106a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801105e:	2b00      	cmp	r3, #0
 8011060:	d003      	beq.n	801106a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011070:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	689b      	ldr	r3, [r3, #8]
 801107a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801107e:	2b40      	cmp	r3, #64	@ 0x40
 8011080:	d005      	beq.n	801108e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011086:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801108a:	2b00      	cmp	r3, #0
 801108c:	d054      	beq.n	8011138 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f000 ff35 	bl	8011efe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	689b      	ldr	r3, [r3, #8]
 801109a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801109e:	2b40      	cmp	r3, #64	@ 0x40
 80110a0:	d146      	bne.n	8011130 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	3308      	adds	r3, #8
 80110a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80110b0:	e853 3f00 	ldrex	r3, [r3]
 80110b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80110b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80110bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80110c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	3308      	adds	r3, #8
 80110ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80110ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80110d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80110da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80110de:	e841 2300 	strex	r3, r2, [r1]
 80110e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80110e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d1d9      	bne.n	80110a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d017      	beq.n	8011128 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110fe:	4a15      	ldr	r2, [pc, #84]	@ (8011154 <HAL_UART_IRQHandler+0x2c0>)
 8011100:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011108:	4618      	mov	r0, r3
 801110a:	f7f8 fd2d 	bl	8009b68 <HAL_DMA_Abort_IT>
 801110e:	4603      	mov	r3, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d019      	beq.n	8011148 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801111a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8011122:	4610      	mov	r0, r2
 8011124:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011126:	e00f      	b.n	8011148 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 fa09 	bl	8011540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801112e:	e00b      	b.n	8011148 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f000 fa05 	bl	8011540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011136:	e007      	b.n	8011148 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f000 fa01 	bl	8011540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2200      	movs	r2, #0
 8011142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8011146:	e1dc      	b.n	8011502 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011148:	bf00      	nop
    return;
 801114a:	e1da      	b.n	8011502 <HAL_UART_IRQHandler+0x66e>
 801114c:	10000001 	.word	0x10000001
 8011150:	04000120 	.word	0x04000120
 8011154:	080121b5 	.word	0x080121b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801115c:	2b01      	cmp	r3, #1
 801115e:	f040 8170 	bne.w	8011442 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011166:	f003 0310 	and.w	r3, r3, #16
 801116a:	2b00      	cmp	r3, #0
 801116c:	f000 8169 	beq.w	8011442 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011174:	f003 0310 	and.w	r3, r3, #16
 8011178:	2b00      	cmp	r3, #0
 801117a:	f000 8162 	beq.w	8011442 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2210      	movs	r2, #16
 8011184:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	689b      	ldr	r3, [r3, #8]
 801118c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011190:	2b40      	cmp	r3, #64	@ 0x40
 8011192:	f040 80d8 	bne.w	8011346 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80111a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	f000 80af 	beq.w	801130c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80111b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80111b8:	429a      	cmp	r2, r3
 80111ba:	f080 80a7 	bcs.w	801130c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80111c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f003 0320 	and.w	r3, r3, #32
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	f040 8087 	bne.w	80112ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80111e8:	e853 3f00 	ldrex	r3, [r3]
 80111ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80111f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80111f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80111f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	461a      	mov	r2, r3
 8011202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011206:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801120a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801120e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011212:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011216:	e841 2300 	strex	r3, r2, [r1]
 801121a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801121e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011222:	2b00      	cmp	r3, #0
 8011224:	d1da      	bne.n	80111dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	3308      	adds	r3, #8
 801122c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801122e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011230:	e853 3f00 	ldrex	r3, [r3]
 8011234:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011238:	f023 0301 	bic.w	r3, r3, #1
 801123c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	3308      	adds	r3, #8
 8011246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801124a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801124e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011250:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011252:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011256:	e841 2300 	strex	r3, r2, [r1]
 801125a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801125c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1e1      	bne.n	8011226 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	3308      	adds	r3, #8
 8011268:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801126a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801126c:	e853 3f00 	ldrex	r3, [r3]
 8011270:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	3308      	adds	r3, #8
 8011282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011286:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011288:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801128a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801128c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801128e:	e841 2300 	strex	r3, r2, [r1]
 8011292:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011296:	2b00      	cmp	r3, #0
 8011298:	d1e3      	bne.n	8011262 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2220      	movs	r2, #32
 801129e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2200      	movs	r2, #0
 80112a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112b0:	e853 3f00 	ldrex	r3, [r3]
 80112b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80112b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80112b8:	f023 0310 	bic.w	r3, r3, #16
 80112bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	461a      	mov	r2, r3
 80112c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80112cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80112d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80112d2:	e841 2300 	strex	r3, r2, [r1]
 80112d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80112d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d1e4      	bne.n	80112a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7f8 fbe0 	bl	8009aaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2202      	movs	r2, #2
 80112ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	1ad3      	subs	r3, r2, r3
 8011300:	b29b      	uxth	r3, r3
 8011302:	4619      	mov	r1, r3
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f000 f925 	bl	8011554 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801130a:	e0fc      	b.n	8011506 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011316:	429a      	cmp	r2, r3
 8011318:	f040 80f5 	bne.w	8011506 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f003 0320 	and.w	r3, r3, #32
 801132a:	2b20      	cmp	r3, #32
 801132c:	f040 80eb 	bne.w	8011506 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2202      	movs	r2, #2
 8011334:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801133c:	4619      	mov	r1, r3
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 f908 	bl	8011554 <HAL_UARTEx_RxEventCallback>
      return;
 8011344:	e0df      	b.n	8011506 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011352:	b29b      	uxth	r3, r3
 8011354:	1ad3      	subs	r3, r2, r3
 8011356:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011360:	b29b      	uxth	r3, r3
 8011362:	2b00      	cmp	r3, #0
 8011364:	f000 80d1 	beq.w	801150a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8011368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801136c:	2b00      	cmp	r3, #0
 801136e:	f000 80cc 	beq.w	801150a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801137a:	e853 3f00 	ldrex	r3, [r3]
 801137e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011386:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	461a      	mov	r2, r3
 8011390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011394:	647b      	str	r3, [r7, #68]	@ 0x44
 8011396:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801139a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801139c:	e841 2300 	strex	r3, r2, [r1]
 80113a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80113a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d1e4      	bne.n	8011372 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	3308      	adds	r3, #8
 80113ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113b2:	e853 3f00 	ldrex	r3, [r3]
 80113b6:	623b      	str	r3, [r7, #32]
   return(result);
 80113b8:	6a3b      	ldr	r3, [r7, #32]
 80113ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80113be:	f023 0301 	bic.w	r3, r3, #1
 80113c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	3308      	adds	r3, #8
 80113cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80113d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80113d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80113d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113d8:	e841 2300 	strex	r3, r2, [r1]
 80113dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80113de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d1e1      	bne.n	80113a8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2220      	movs	r2, #32
 80113e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2200      	movs	r2, #0
 80113f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	e853 3f00 	ldrex	r3, [r3]
 8011404:	60fb      	str	r3, [r7, #12]
   return(result);
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	f023 0310 	bic.w	r3, r3, #16
 801140c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	461a      	mov	r2, r3
 8011416:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801141a:	61fb      	str	r3, [r7, #28]
 801141c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801141e:	69b9      	ldr	r1, [r7, #24]
 8011420:	69fa      	ldr	r2, [r7, #28]
 8011422:	e841 2300 	strex	r3, r2, [r1]
 8011426:	617b      	str	r3, [r7, #20]
   return(result);
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d1e4      	bne.n	80113f8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2202      	movs	r2, #2
 8011432:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011438:	4619      	mov	r1, r3
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 f88a 	bl	8011554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011440:	e063      	b.n	801150a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801144a:	2b00      	cmp	r3, #0
 801144c:	d00e      	beq.n	801146c <HAL_UART_IRQHandler+0x5d8>
 801144e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011456:	2b00      	cmp	r3, #0
 8011458:	d008      	beq.n	801146c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011462:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 fee2 	bl	801222e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801146a:	e051      	b.n	8011510 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801146c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011474:	2b00      	cmp	r3, #0
 8011476:	d014      	beq.n	80114a2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801147c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011480:	2b00      	cmp	r3, #0
 8011482:	d105      	bne.n	8011490 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011488:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801148c:	2b00      	cmp	r3, #0
 801148e:	d008      	beq.n	80114a2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011494:	2b00      	cmp	r3, #0
 8011496:	d03a      	beq.n	801150e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	4798      	blx	r3
    }
    return;
 80114a0:	e035      	b.n	801150e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80114a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d009      	beq.n	80114c2 <HAL_UART_IRQHandler+0x62e>
 80114ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80114b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d003      	beq.n	80114c2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 fe8c 	bl	80121d8 <UART_EndTransmit_IT>
    return;
 80114c0:	e026      	b.n	8011510 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80114c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d009      	beq.n	80114e2 <HAL_UART_IRQHandler+0x64e>
 80114ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80114d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d003      	beq.n	80114e2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 febb 	bl	8012256 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80114e0:	e016      	b.n	8011510 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80114e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d010      	beq.n	8011510 <HAL_UART_IRQHandler+0x67c>
 80114ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	da0c      	bge.n	8011510 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f000 fea3 	bl	8012242 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80114fc:	e008      	b.n	8011510 <HAL_UART_IRQHandler+0x67c>
      return;
 80114fe:	bf00      	nop
 8011500:	e006      	b.n	8011510 <HAL_UART_IRQHandler+0x67c>
    return;
 8011502:	bf00      	nop
 8011504:	e004      	b.n	8011510 <HAL_UART_IRQHandler+0x67c>
      return;
 8011506:	bf00      	nop
 8011508:	e002      	b.n	8011510 <HAL_UART_IRQHandler+0x67c>
      return;
 801150a:	bf00      	nop
 801150c:	e000      	b.n	8011510 <HAL_UART_IRQHandler+0x67c>
    return;
 801150e:	bf00      	nop
  }
}
 8011510:	37e8      	adds	r7, #232	@ 0xe8
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop

08011518 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011520:	bf00      	nop
 8011522:	370c      	adds	r7, #12
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr

0801152c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801152c:	b480      	push	{r7}
 801152e:	b083      	sub	sp, #12
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011534:	bf00      	nop
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011548:	bf00      	nop
 801154a:	370c      	adds	r7, #12
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr

08011554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	460b      	mov	r3, r1
 801155e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011560:	bf00      	nop
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801156c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011570:	b08c      	sub	sp, #48	@ 0x30
 8011572:	af00      	add	r7, sp, #0
 8011574:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011576:	2300      	movs	r3, #0
 8011578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	689a      	ldr	r2, [r3, #8]
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	431a      	orrs	r2, r3
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	695b      	ldr	r3, [r3, #20]
 801158a:	431a      	orrs	r2, r3
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	69db      	ldr	r3, [r3, #28]
 8011590:	4313      	orrs	r3, r2
 8011592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	4baf      	ldr	r3, [pc, #700]	@ (8011858 <UART_SetConfig+0x2ec>)
 801159c:	4013      	ands	r3, r2
 801159e:	697a      	ldr	r2, [r7, #20]
 80115a0:	6812      	ldr	r2, [r2, #0]
 80115a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115a4:	430b      	orrs	r3, r1
 80115a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	68da      	ldr	r2, [r3, #12]
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	430a      	orrs	r2, r1
 80115bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	699b      	ldr	r3, [r3, #24]
 80115c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4aa4      	ldr	r2, [pc, #656]	@ (801185c <UART_SetConfig+0x2f0>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d004      	beq.n	80115d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	6a1b      	ldr	r3, [r3, #32]
 80115d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80115d4:	4313      	orrs	r3, r2
 80115d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80115e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80115e6:	697a      	ldr	r2, [r7, #20]
 80115e8:	6812      	ldr	r2, [r2, #0]
 80115ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115ec:	430b      	orrs	r3, r1
 80115ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115f6:	f023 010f 	bic.w	r1, r3, #15
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	430a      	orrs	r2, r1
 8011604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	4a95      	ldr	r2, [pc, #596]	@ (8011860 <UART_SetConfig+0x2f4>)
 801160c:	4293      	cmp	r3, r2
 801160e:	d125      	bne.n	801165c <UART_SetConfig+0xf0>
 8011610:	2003      	movs	r0, #3
 8011612:	f7ff f9a7 	bl	8010964 <LL_RCC_GetUSARTClockSource>
 8011616:	4603      	mov	r3, r0
 8011618:	2b03      	cmp	r3, #3
 801161a:	d81b      	bhi.n	8011654 <UART_SetConfig+0xe8>
 801161c:	a201      	add	r2, pc, #4	@ (adr r2, 8011624 <UART_SetConfig+0xb8>)
 801161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011622:	bf00      	nop
 8011624:	08011635 	.word	0x08011635
 8011628:	08011645 	.word	0x08011645
 801162c:	0801163d 	.word	0x0801163d
 8011630:	0801164d 	.word	0x0801164d
 8011634:	2301      	movs	r3, #1
 8011636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801163a:	e042      	b.n	80116c2 <UART_SetConfig+0x156>
 801163c:	2302      	movs	r3, #2
 801163e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011642:	e03e      	b.n	80116c2 <UART_SetConfig+0x156>
 8011644:	2304      	movs	r3, #4
 8011646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801164a:	e03a      	b.n	80116c2 <UART_SetConfig+0x156>
 801164c:	2308      	movs	r3, #8
 801164e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011652:	e036      	b.n	80116c2 <UART_SetConfig+0x156>
 8011654:	2310      	movs	r3, #16
 8011656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801165a:	e032      	b.n	80116c2 <UART_SetConfig+0x156>
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4a7e      	ldr	r2, [pc, #504]	@ (801185c <UART_SetConfig+0x2f0>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d12a      	bne.n	80116bc <UART_SetConfig+0x150>
 8011666:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801166a:	f7ff f98b 	bl	8010984 <LL_RCC_GetLPUARTClockSource>
 801166e:	4603      	mov	r3, r0
 8011670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011674:	d01a      	beq.n	80116ac <UART_SetConfig+0x140>
 8011676:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801167a:	d81b      	bhi.n	80116b4 <UART_SetConfig+0x148>
 801167c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011680:	d00c      	beq.n	801169c <UART_SetConfig+0x130>
 8011682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011686:	d815      	bhi.n	80116b4 <UART_SetConfig+0x148>
 8011688:	2b00      	cmp	r3, #0
 801168a:	d003      	beq.n	8011694 <UART_SetConfig+0x128>
 801168c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011690:	d008      	beq.n	80116a4 <UART_SetConfig+0x138>
 8011692:	e00f      	b.n	80116b4 <UART_SetConfig+0x148>
 8011694:	2300      	movs	r3, #0
 8011696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801169a:	e012      	b.n	80116c2 <UART_SetConfig+0x156>
 801169c:	2302      	movs	r3, #2
 801169e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116a2:	e00e      	b.n	80116c2 <UART_SetConfig+0x156>
 80116a4:	2304      	movs	r3, #4
 80116a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116aa:	e00a      	b.n	80116c2 <UART_SetConfig+0x156>
 80116ac:	2308      	movs	r3, #8
 80116ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116b2:	e006      	b.n	80116c2 <UART_SetConfig+0x156>
 80116b4:	2310      	movs	r3, #16
 80116b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116ba:	e002      	b.n	80116c2 <UART_SetConfig+0x156>
 80116bc:	2310      	movs	r3, #16
 80116be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	4a65      	ldr	r2, [pc, #404]	@ (801185c <UART_SetConfig+0x2f0>)
 80116c8:	4293      	cmp	r3, r2
 80116ca:	f040 8097 	bne.w	80117fc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80116ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80116d2:	2b08      	cmp	r3, #8
 80116d4:	d823      	bhi.n	801171e <UART_SetConfig+0x1b2>
 80116d6:	a201      	add	r2, pc, #4	@ (adr r2, 80116dc <UART_SetConfig+0x170>)
 80116d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116dc:	08011701 	.word	0x08011701
 80116e0:	0801171f 	.word	0x0801171f
 80116e4:	08011709 	.word	0x08011709
 80116e8:	0801171f 	.word	0x0801171f
 80116ec:	0801170f 	.word	0x0801170f
 80116f0:	0801171f 	.word	0x0801171f
 80116f4:	0801171f 	.word	0x0801171f
 80116f8:	0801171f 	.word	0x0801171f
 80116fc:	08011717 	.word	0x08011717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011700:	f7fc fb6c 	bl	800dddc <HAL_RCC_GetPCLK1Freq>
 8011704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011706:	e010      	b.n	801172a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011708:	4b56      	ldr	r3, [pc, #344]	@ (8011864 <UART_SetConfig+0x2f8>)
 801170a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801170c:	e00d      	b.n	801172a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801170e:	f7fc fae5 	bl	800dcdc <HAL_RCC_GetSysClockFreq>
 8011712:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011714:	e009      	b.n	801172a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801171a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801171c:	e005      	b.n	801172a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801171e:	2300      	movs	r3, #0
 8011720:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011722:	2301      	movs	r3, #1
 8011724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801172c:	2b00      	cmp	r3, #0
 801172e:	f000 812b 	beq.w	8011988 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011736:	4a4c      	ldr	r2, [pc, #304]	@ (8011868 <UART_SetConfig+0x2fc>)
 8011738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801173c:	461a      	mov	r2, r3
 801173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011740:	fbb3 f3f2 	udiv	r3, r3, r2
 8011744:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	685a      	ldr	r2, [r3, #4]
 801174a:	4613      	mov	r3, r2
 801174c:	005b      	lsls	r3, r3, #1
 801174e:	4413      	add	r3, r2
 8011750:	69ba      	ldr	r2, [r7, #24]
 8011752:	429a      	cmp	r2, r3
 8011754:	d305      	bcc.n	8011762 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801175c:	69ba      	ldr	r2, [r7, #24]
 801175e:	429a      	cmp	r2, r3
 8011760:	d903      	bls.n	801176a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8011762:	2301      	movs	r3, #1
 8011764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011768:	e10e      	b.n	8011988 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801176c:	2200      	movs	r2, #0
 801176e:	60bb      	str	r3, [r7, #8]
 8011770:	60fa      	str	r2, [r7, #12]
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011776:	4a3c      	ldr	r2, [pc, #240]	@ (8011868 <UART_SetConfig+0x2fc>)
 8011778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801177c:	b29b      	uxth	r3, r3
 801177e:	2200      	movs	r2, #0
 8011780:	603b      	str	r3, [r7, #0]
 8011782:	607a      	str	r2, [r7, #4]
 8011784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801178c:	f7ef fa54 	bl	8000c38 <__aeabi_uldivmod>
 8011790:	4602      	mov	r2, r0
 8011792:	460b      	mov	r3, r1
 8011794:	4610      	mov	r0, r2
 8011796:	4619      	mov	r1, r3
 8011798:	f04f 0200 	mov.w	r2, #0
 801179c:	f04f 0300 	mov.w	r3, #0
 80117a0:	020b      	lsls	r3, r1, #8
 80117a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80117a6:	0202      	lsls	r2, r0, #8
 80117a8:	6979      	ldr	r1, [r7, #20]
 80117aa:	6849      	ldr	r1, [r1, #4]
 80117ac:	0849      	lsrs	r1, r1, #1
 80117ae:	2000      	movs	r0, #0
 80117b0:	460c      	mov	r4, r1
 80117b2:	4605      	mov	r5, r0
 80117b4:	eb12 0804 	adds.w	r8, r2, r4
 80117b8:	eb43 0905 	adc.w	r9, r3, r5
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	469a      	mov	sl, r3
 80117c4:	4693      	mov	fp, r2
 80117c6:	4652      	mov	r2, sl
 80117c8:	465b      	mov	r3, fp
 80117ca:	4640      	mov	r0, r8
 80117cc:	4649      	mov	r1, r9
 80117ce:	f7ef fa33 	bl	8000c38 <__aeabi_uldivmod>
 80117d2:	4602      	mov	r2, r0
 80117d4:	460b      	mov	r3, r1
 80117d6:	4613      	mov	r3, r2
 80117d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80117da:	6a3b      	ldr	r3, [r7, #32]
 80117dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80117e0:	d308      	bcc.n	80117f4 <UART_SetConfig+0x288>
 80117e2:	6a3b      	ldr	r3, [r7, #32]
 80117e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80117e8:	d204      	bcs.n	80117f4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	6a3a      	ldr	r2, [r7, #32]
 80117f0:	60da      	str	r2, [r3, #12]
 80117f2:	e0c9      	b.n	8011988 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80117f4:	2301      	movs	r3, #1
 80117f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80117fa:	e0c5      	b.n	8011988 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	69db      	ldr	r3, [r3, #28]
 8011800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011804:	d16d      	bne.n	80118e2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8011806:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801180a:	3b01      	subs	r3, #1
 801180c:	2b07      	cmp	r3, #7
 801180e:	d82d      	bhi.n	801186c <UART_SetConfig+0x300>
 8011810:	a201      	add	r2, pc, #4	@ (adr r2, 8011818 <UART_SetConfig+0x2ac>)
 8011812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011816:	bf00      	nop
 8011818:	08011839 	.word	0x08011839
 801181c:	08011841 	.word	0x08011841
 8011820:	0801186d 	.word	0x0801186d
 8011824:	08011847 	.word	0x08011847
 8011828:	0801186d 	.word	0x0801186d
 801182c:	0801186d 	.word	0x0801186d
 8011830:	0801186d 	.word	0x0801186d
 8011834:	0801184f 	.word	0x0801184f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011838:	f7fc fae6 	bl	800de08 <HAL_RCC_GetPCLK2Freq>
 801183c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801183e:	e01b      	b.n	8011878 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011840:	4b08      	ldr	r3, [pc, #32]	@ (8011864 <UART_SetConfig+0x2f8>)
 8011842:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011844:	e018      	b.n	8011878 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011846:	f7fc fa49 	bl	800dcdc <HAL_RCC_GetSysClockFreq>
 801184a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801184c:	e014      	b.n	8011878 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801184e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011854:	e010      	b.n	8011878 <UART_SetConfig+0x30c>
 8011856:	bf00      	nop
 8011858:	cfff69f3 	.word	0xcfff69f3
 801185c:	40008000 	.word	0x40008000
 8011860:	40013800 	.word	0x40013800
 8011864:	00f42400 	.word	0x00f42400
 8011868:	08023208 	.word	0x08023208
      default:
        pclk = 0U;
 801186c:	2300      	movs	r3, #0
 801186e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011870:	2301      	movs	r3, #1
 8011872:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011876:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187a:	2b00      	cmp	r3, #0
 801187c:	f000 8084 	beq.w	8011988 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011884:	4a4b      	ldr	r2, [pc, #300]	@ (80119b4 <UART_SetConfig+0x448>)
 8011886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801188a:	461a      	mov	r2, r3
 801188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801188e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011892:	005a      	lsls	r2, r3, #1
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	085b      	lsrs	r3, r3, #1
 801189a:	441a      	add	r2, r3
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80118a4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118a6:	6a3b      	ldr	r3, [r7, #32]
 80118a8:	2b0f      	cmp	r3, #15
 80118aa:	d916      	bls.n	80118da <UART_SetConfig+0x36e>
 80118ac:	6a3b      	ldr	r3, [r7, #32]
 80118ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80118b2:	d212      	bcs.n	80118da <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	f023 030f 	bic.w	r3, r3, #15
 80118bc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80118be:	6a3b      	ldr	r3, [r7, #32]
 80118c0:	085b      	lsrs	r3, r3, #1
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	f003 0307 	and.w	r3, r3, #7
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	8bfb      	ldrh	r3, [r7, #30]
 80118cc:	4313      	orrs	r3, r2
 80118ce:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	8bfa      	ldrh	r2, [r7, #30]
 80118d6:	60da      	str	r2, [r3, #12]
 80118d8:	e056      	b.n	8011988 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80118da:	2301      	movs	r3, #1
 80118dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80118e0:	e052      	b.n	8011988 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80118e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80118e6:	3b01      	subs	r3, #1
 80118e8:	2b07      	cmp	r3, #7
 80118ea:	d822      	bhi.n	8011932 <UART_SetConfig+0x3c6>
 80118ec:	a201      	add	r2, pc, #4	@ (adr r2, 80118f4 <UART_SetConfig+0x388>)
 80118ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118f2:	bf00      	nop
 80118f4:	08011915 	.word	0x08011915
 80118f8:	0801191d 	.word	0x0801191d
 80118fc:	08011933 	.word	0x08011933
 8011900:	08011923 	.word	0x08011923
 8011904:	08011933 	.word	0x08011933
 8011908:	08011933 	.word	0x08011933
 801190c:	08011933 	.word	0x08011933
 8011910:	0801192b 	.word	0x0801192b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011914:	f7fc fa78 	bl	800de08 <HAL_RCC_GetPCLK2Freq>
 8011918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801191a:	e010      	b.n	801193e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801191c:	4b26      	ldr	r3, [pc, #152]	@ (80119b8 <UART_SetConfig+0x44c>)
 801191e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011920:	e00d      	b.n	801193e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011922:	f7fc f9db 	bl	800dcdc <HAL_RCC_GetSysClockFreq>
 8011926:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011928:	e009      	b.n	801193e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801192a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801192e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011930:	e005      	b.n	801193e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8011932:	2300      	movs	r3, #0
 8011934:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011936:	2301      	movs	r3, #1
 8011938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801193c:	bf00      	nop
    }

    if (pclk != 0U)
 801193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011940:	2b00      	cmp	r3, #0
 8011942:	d021      	beq.n	8011988 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011948:	4a1a      	ldr	r2, [pc, #104]	@ (80119b4 <UART_SetConfig+0x448>)
 801194a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801194e:	461a      	mov	r2, r3
 8011950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011952:	fbb3 f2f2 	udiv	r2, r3, r2
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	085b      	lsrs	r3, r3, #1
 801195c:	441a      	add	r2, r3
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	fbb2 f3f3 	udiv	r3, r2, r3
 8011966:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011968:	6a3b      	ldr	r3, [r7, #32]
 801196a:	2b0f      	cmp	r3, #15
 801196c:	d909      	bls.n	8011982 <UART_SetConfig+0x416>
 801196e:	6a3b      	ldr	r3, [r7, #32]
 8011970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011974:	d205      	bcs.n	8011982 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	b29a      	uxth	r2, r3
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	60da      	str	r2, [r3, #12]
 8011980:	e002      	b.n	8011988 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8011982:	2301      	movs	r3, #1
 8011984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	2201      	movs	r2, #1
 801198c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	2201      	movs	r2, #1
 8011994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	2200      	movs	r2, #0
 801199c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	2200      	movs	r2, #0
 80119a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80119a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	3730      	adds	r7, #48	@ 0x30
 80119ac:	46bd      	mov	sp, r7
 80119ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80119b2:	bf00      	nop
 80119b4:	08023208 	.word	0x08023208
 80119b8:	00f42400 	.word	0x00f42400

080119bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119c8:	f003 0308 	and.w	r3, r3, #8
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d00a      	beq.n	80119e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	430a      	orrs	r2, r1
 80119e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119ea:	f003 0301 	and.w	r3, r3, #1
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00a      	beq.n	8011a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	430a      	orrs	r2, r1
 8011a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a0c:	f003 0302 	and.w	r3, r3, #2
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d00a      	beq.n	8011a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	430a      	orrs	r2, r1
 8011a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a2e:	f003 0304 	and.w	r3, r3, #4
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d00a      	beq.n	8011a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	430a      	orrs	r2, r1
 8011a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a50:	f003 0310 	and.w	r3, r3, #16
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00a      	beq.n	8011a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	689b      	ldr	r3, [r3, #8]
 8011a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	430a      	orrs	r2, r1
 8011a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a72:	f003 0320 	and.w	r3, r3, #32
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00a      	beq.n	8011a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	689b      	ldr	r3, [r3, #8]
 8011a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	430a      	orrs	r2, r1
 8011a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d01a      	beq.n	8011ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	430a      	orrs	r2, r1
 8011ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011aba:	d10a      	bne.n	8011ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	430a      	orrs	r2, r1
 8011ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d00a      	beq.n	8011af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	430a      	orrs	r2, r1
 8011af2:	605a      	str	r2, [r3, #4]
  }
}
 8011af4:	bf00      	nop
 8011af6:	370c      	adds	r7, #12
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr

08011b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b098      	sub	sp, #96	@ 0x60
 8011b04:	af02      	add	r7, sp, #8
 8011b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011b10:	f7f6 fbd4 	bl	80082bc <HAL_GetTick>
 8011b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f003 0308 	and.w	r3, r3, #8
 8011b20:	2b08      	cmp	r3, #8
 8011b22:	d12f      	bne.n	8011b84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011b28:	9300      	str	r3, [sp, #0]
 8011b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 f88e 	bl	8011c54 <UART_WaitOnFlagUntilTimeout>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d022      	beq.n	8011b84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b46:	e853 3f00 	ldrex	r3, [r3]
 8011b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	461a      	mov	r2, r3
 8011b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b64:	e841 2300 	strex	r3, r2, [r1]
 8011b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d1e6      	bne.n	8011b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2220      	movs	r2, #32
 8011b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b80:	2303      	movs	r3, #3
 8011b82:	e063      	b.n	8011c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	f003 0304 	and.w	r3, r3, #4
 8011b8e:	2b04      	cmp	r3, #4
 8011b90:	d149      	bne.n	8011c26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011b96:	9300      	str	r3, [sp, #0]
 8011b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f000 f857 	bl	8011c54 <UART_WaitOnFlagUntilTimeout>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d03c      	beq.n	8011c26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb4:	e853 3f00 	ldrex	r3, [r3]
 8011bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8011bba:	6a3b      	ldr	r3, [r7, #32]
 8011bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8011bcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bd2:	e841 2300 	strex	r3, r2, [r1]
 8011bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d1e6      	bne.n	8011bac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	3308      	adds	r3, #8
 8011be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	e853 3f00 	ldrex	r3, [r3]
 8011bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	f023 0301 	bic.w	r3, r3, #1
 8011bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	3308      	adds	r3, #8
 8011bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011bfe:	61fa      	str	r2, [r7, #28]
 8011c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c02:	69b9      	ldr	r1, [r7, #24]
 8011c04:	69fa      	ldr	r2, [r7, #28]
 8011c06:	e841 2300 	strex	r3, r2, [r1]
 8011c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d1e5      	bne.n	8011bde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2220      	movs	r2, #32
 8011c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c22:	2303      	movs	r3, #3
 8011c24:	e012      	b.n	8011c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2220      	movs	r2, #32
 8011c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2220      	movs	r2, #32
 8011c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2200      	movs	r2, #0
 8011c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3758      	adds	r7, #88	@ 0x58
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	60b9      	str	r1, [r7, #8]
 8011c5e:	603b      	str	r3, [r7, #0]
 8011c60:	4613      	mov	r3, r2
 8011c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c64:	e04f      	b.n	8011d06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c66:	69bb      	ldr	r3, [r7, #24]
 8011c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c6c:	d04b      	beq.n	8011d06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c6e:	f7f6 fb25 	bl	80082bc <HAL_GetTick>
 8011c72:	4602      	mov	r2, r0
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	1ad3      	subs	r3, r2, r3
 8011c78:	69ba      	ldr	r2, [r7, #24]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d302      	bcc.n	8011c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8011c7e:	69bb      	ldr	r3, [r7, #24]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d101      	bne.n	8011c88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011c84:	2303      	movs	r3, #3
 8011c86:	e04e      	b.n	8011d26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f003 0304 	and.w	r3, r3, #4
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d037      	beq.n	8011d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	2b80      	cmp	r3, #128	@ 0x80
 8011c9a:	d034      	beq.n	8011d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	2b40      	cmp	r3, #64	@ 0x40
 8011ca0:	d031      	beq.n	8011d06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	69db      	ldr	r3, [r3, #28]
 8011ca8:	f003 0308 	and.w	r3, r3, #8
 8011cac:	2b08      	cmp	r3, #8
 8011cae:	d110      	bne.n	8011cd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2208      	movs	r2, #8
 8011cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f000 f920 	bl	8011efe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	2208      	movs	r2, #8
 8011cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011cce:	2301      	movs	r3, #1
 8011cd0:	e029      	b.n	8011d26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	69db      	ldr	r3, [r3, #28]
 8011cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011ce0:	d111      	bne.n	8011d06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cec:	68f8      	ldr	r0, [r7, #12]
 8011cee:	f000 f906 	bl	8011efe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	2220      	movs	r2, #32
 8011cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011d02:	2303      	movs	r3, #3
 8011d04:	e00f      	b.n	8011d26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	69da      	ldr	r2, [r3, #28]
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	4013      	ands	r3, r2
 8011d10:	68ba      	ldr	r2, [r7, #8]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	bf0c      	ite	eq
 8011d16:	2301      	moveq	r3, #1
 8011d18:	2300      	movne	r3, #0
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	79fb      	ldrb	r3, [r7, #7]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d0a0      	beq.n	8011c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d24:	2300      	movs	r3, #0
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
	...

08011d30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b096      	sub	sp, #88	@ 0x58
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	4613      	mov	r3, r2
 8011d3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	68ba      	ldr	r2, [r7, #8]
 8011d42:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	88fa      	ldrh	r2, [r7, #6]
 8011d48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	2222      	movs	r2, #34	@ 0x22
 8011d58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d02d      	beq.n	8011dc2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d6c:	4a40      	ldr	r2, [pc, #256]	@ (8011e70 <UART_Start_Receive_DMA+0x140>)
 8011d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d76:	4a3f      	ldr	r2, [pc, #252]	@ (8011e74 <UART_Start_Receive_DMA+0x144>)
 8011d78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d80:	4a3d      	ldr	r2, [pc, #244]	@ (8011e78 <UART_Start_Receive_DMA+0x148>)
 8011d82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	3324      	adds	r3, #36	@ 0x24
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011da0:	461a      	mov	r2, r3
 8011da2:	88fb      	ldrh	r3, [r7, #6]
 8011da4:	f7f7 fe06 	bl	80099b4 <HAL_DMA_Start_IT>
 8011da8:	4603      	mov	r3, r0
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d009      	beq.n	8011dc2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	2210      	movs	r2, #16
 8011db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2220      	movs	r2, #32
 8011dba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	e051      	b.n	8011e66 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	691b      	ldr	r3, [r3, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d018      	beq.n	8011dfc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011dd2:	e853 3f00 	ldrex	r3, [r3]
 8011dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011dde:	657b      	str	r3, [r7, #84]	@ 0x54
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	461a      	mov	r2, r3
 8011de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011de8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011dea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011dee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011df0:	e841 2300 	strex	r3, r2, [r1]
 8011df4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d1e6      	bne.n	8011dca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	3308      	adds	r3, #8
 8011e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e06:	e853 3f00 	ldrex	r3, [r3]
 8011e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e0e:	f043 0301 	orr.w	r3, r3, #1
 8011e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	3308      	adds	r3, #8
 8011e1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e1c:	637a      	str	r2, [r7, #52]	@ 0x34
 8011e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011e22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e24:	e841 2300 	strex	r3, r2, [r1]
 8011e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d1e5      	bne.n	8011dfc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	3308      	adds	r3, #8
 8011e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	e853 3f00 	ldrex	r3, [r3]
 8011e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	3308      	adds	r3, #8
 8011e4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011e50:	623a      	str	r2, [r7, #32]
 8011e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e54:	69f9      	ldr	r1, [r7, #28]
 8011e56:	6a3a      	ldr	r2, [r7, #32]
 8011e58:	e841 2300 	strex	r3, r2, [r1]
 8011e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e5e:	69bb      	ldr	r3, [r7, #24]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d1e5      	bne.n	8011e30 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3758      	adds	r7, #88	@ 0x58
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	08011fcb 	.word	0x08011fcb
 8011e74:	080120f7 	.word	0x080120f7
 8011e78:	08012135 	.word	0x08012135

08011e7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b08f      	sub	sp, #60	@ 0x3c
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e8a:	6a3b      	ldr	r3, [r7, #32]
 8011e8c:	e853 3f00 	ldrex	r3, [r3]
 8011e90:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e92:	69fb      	ldr	r3, [r7, #28]
 8011e94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ea4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011eaa:	e841 2300 	strex	r3, r2, [r1]
 8011eae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d1e6      	bne.n	8011e84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	3308      	adds	r3, #8
 8011ebc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	e853 3f00 	ldrex	r3, [r3]
 8011ec4:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	3308      	adds	r3, #8
 8011ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ed6:	61ba      	str	r2, [r7, #24]
 8011ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eda:	6979      	ldr	r1, [r7, #20]
 8011edc:	69ba      	ldr	r2, [r7, #24]
 8011ede:	e841 2300 	strex	r3, r2, [r1]
 8011ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d1e5      	bne.n	8011eb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2220      	movs	r2, #32
 8011eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011ef2:	bf00      	nop
 8011ef4:	373c      	adds	r7, #60	@ 0x3c
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011efe:	b480      	push	{r7}
 8011f00:	b095      	sub	sp, #84	@ 0x54
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f0e:	e853 3f00 	ldrex	r3, [r3]
 8011f12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	461a      	mov	r2, r3
 8011f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8011f26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011f2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011f2c:	e841 2300 	strex	r3, r2, [r1]
 8011f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d1e6      	bne.n	8011f06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	3308      	adds	r3, #8
 8011f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f40:	6a3b      	ldr	r3, [r7, #32]
 8011f42:	e853 3f00 	ldrex	r3, [r3]
 8011f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011f4e:	f023 0301 	bic.w	r3, r3, #1
 8011f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	3308      	adds	r3, #8
 8011f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f64:	e841 2300 	strex	r3, r2, [r1]
 8011f68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1e3      	bne.n	8011f38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d118      	bne.n	8011faa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	e853 3f00 	ldrex	r3, [r3]
 8011f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	f023 0310 	bic.w	r3, r3, #16
 8011f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	461a      	mov	r2, r3
 8011f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f96:	61bb      	str	r3, [r7, #24]
 8011f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f9a:	6979      	ldr	r1, [r7, #20]
 8011f9c:	69ba      	ldr	r2, [r7, #24]
 8011f9e:	e841 2300 	strex	r3, r2, [r1]
 8011fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1e6      	bne.n	8011f78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2220      	movs	r2, #32
 8011fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011fbe:	bf00      	nop
 8011fc0:	3754      	adds	r7, #84	@ 0x54
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr

08011fca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b09c      	sub	sp, #112	@ 0x70
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f003 0320 	and.w	r3, r3, #32
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d171      	bne.n	80120ca <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8011fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011fe8:	2200      	movs	r2, #0
 8011fea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ff6:	e853 3f00 	ldrex	r3, [r3]
 8011ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011ffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011ffe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012002:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	461a      	mov	r2, r3
 801200a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801200c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801200e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012010:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012012:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012014:	e841 2300 	strex	r3, r2, [r1]
 8012018:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801201a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801201c:	2b00      	cmp	r3, #0
 801201e:	d1e6      	bne.n	8011fee <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	3308      	adds	r3, #8
 8012026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801202a:	e853 3f00 	ldrex	r3, [r3]
 801202e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012032:	f023 0301 	bic.w	r3, r3, #1
 8012036:	667b      	str	r3, [r7, #100]	@ 0x64
 8012038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	3308      	adds	r3, #8
 801203e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012040:	647a      	str	r2, [r7, #68]	@ 0x44
 8012042:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012044:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012048:	e841 2300 	strex	r3, r2, [r1]
 801204c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801204e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012050:	2b00      	cmp	r3, #0
 8012052:	d1e5      	bne.n	8012020 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	3308      	adds	r3, #8
 801205a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801205e:	e853 3f00 	ldrex	r3, [r3]
 8012062:	623b      	str	r3, [r7, #32]
   return(result);
 8012064:	6a3b      	ldr	r3, [r7, #32]
 8012066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801206a:	663b      	str	r3, [r7, #96]	@ 0x60
 801206c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	3308      	adds	r3, #8
 8012072:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012074:	633a      	str	r2, [r7, #48]	@ 0x30
 8012076:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012078:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801207a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801207c:	e841 2300 	strex	r3, r2, [r1]
 8012080:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012084:	2b00      	cmp	r3, #0
 8012086:	d1e5      	bne.n	8012054 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801208a:	2220      	movs	r2, #32
 801208c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012094:	2b01      	cmp	r3, #1
 8012096:	d118      	bne.n	80120ca <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	e853 3f00 	ldrex	r3, [r3]
 80120a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	f023 0310 	bic.w	r3, r3, #16
 80120ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80120ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	461a      	mov	r2, r3
 80120b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80120b6:	61fb      	str	r3, [r7, #28]
 80120b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ba:	69b9      	ldr	r1, [r7, #24]
 80120bc:	69fa      	ldr	r2, [r7, #28]
 80120be:	e841 2300 	strex	r3, r2, [r1]
 80120c2:	617b      	str	r3, [r7, #20]
   return(result);
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d1e6      	bne.n	8012098 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80120ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120cc:	2200      	movs	r2, #0
 80120ce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d107      	bne.n	80120e8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80120d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80120de:	4619      	mov	r1, r3
 80120e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80120e2:	f7ff fa37 	bl	8011554 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80120e6:	e002      	b.n	80120ee <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80120e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80120ea:	f7f5 ff73 	bl	8007fd4 <HAL_UART_RxCpltCallback>
}
 80120ee:	bf00      	nop
 80120f0:	3770      	adds	r7, #112	@ 0x70
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}

080120f6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80120f6:	b580      	push	{r7, lr}
 80120f8:	b084      	sub	sp, #16
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012102:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2201      	movs	r2, #1
 8012108:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801210e:	2b01      	cmp	r3, #1
 8012110:	d109      	bne.n	8012126 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012118:	085b      	lsrs	r3, r3, #1
 801211a:	b29b      	uxth	r3, r3
 801211c:	4619      	mov	r1, r3
 801211e:	68f8      	ldr	r0, [r7, #12]
 8012120:	f7ff fa18 	bl	8011554 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012124:	e002      	b.n	801212c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	f7ff fa00 	bl	801152c <HAL_UART_RxHalfCpltCallback>
}
 801212c:	bf00      	nop
 801212e:	3710      	adds	r7, #16
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}

08012134 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b086      	sub	sp, #24
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012140:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012148:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012150:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	689b      	ldr	r3, [r3, #8]
 8012158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801215c:	2b80      	cmp	r3, #128	@ 0x80
 801215e:	d109      	bne.n	8012174 <UART_DMAError+0x40>
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	2b21      	cmp	r3, #33	@ 0x21
 8012164:	d106      	bne.n	8012174 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	2200      	movs	r2, #0
 801216a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 801216e:	6978      	ldr	r0, [r7, #20]
 8012170:	f7ff fe84 	bl	8011e7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	689b      	ldr	r3, [r3, #8]
 801217a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801217e:	2b40      	cmp	r3, #64	@ 0x40
 8012180:	d109      	bne.n	8012196 <UART_DMAError+0x62>
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	2b22      	cmp	r3, #34	@ 0x22
 8012186:	d106      	bne.n	8012196 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	2200      	movs	r2, #0
 801218c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8012190:	6978      	ldr	r0, [r7, #20]
 8012192:	f7ff feb4 	bl	8011efe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801219c:	f043 0210 	orr.w	r2, r3, #16
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80121a6:	6978      	ldr	r0, [r7, #20]
 80121a8:	f7ff f9ca 	bl	8011540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121ac:	bf00      	nop
 80121ae:	3718      	adds	r7, #24
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b084      	sub	sp, #16
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2200      	movs	r2, #0
 80121c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f7ff f9b8 	bl	8011540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121d0:	bf00      	nop
 80121d2:	3710      	adds	r7, #16
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b088      	sub	sp, #32
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	e853 3f00 	ldrex	r3, [r3]
 80121ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80121f4:	61fb      	str	r3, [r7, #28]
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	461a      	mov	r2, r3
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	61bb      	str	r3, [r7, #24]
 8012200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012202:	6979      	ldr	r1, [r7, #20]
 8012204:	69ba      	ldr	r2, [r7, #24]
 8012206:	e841 2300 	strex	r3, r2, [r1]
 801220a:	613b      	str	r3, [r7, #16]
   return(result);
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d1e6      	bne.n	80121e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2220      	movs	r2, #32
 8012216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2200      	movs	r2, #0
 801221e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7ff f979 	bl	8011518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012226:	bf00      	nop
 8012228:	3720      	adds	r7, #32
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801222e:	b480      	push	{r7}
 8012230:	b083      	sub	sp, #12
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012236:	bf00      	nop
 8012238:	370c      	adds	r7, #12
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr

08012242 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012242:	b480      	push	{r7}
 8012244:	b083      	sub	sp, #12
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801224a:	bf00      	nop
 801224c:	370c      	adds	r7, #12
 801224e:	46bd      	mov	sp, r7
 8012250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012254:	4770      	bx	lr

08012256 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012256:	b480      	push	{r7}
 8012258:	b083      	sub	sp, #12
 801225a:	af00      	add	r7, sp, #0
 801225c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801225e:	bf00      	nop
 8012260:	370c      	adds	r7, #12
 8012262:	46bd      	mov	sp, r7
 8012264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012268:	4770      	bx	lr

0801226a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801226a:	b480      	push	{r7}
 801226c:	b085      	sub	sp, #20
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012278:	2b01      	cmp	r3, #1
 801227a:	d101      	bne.n	8012280 <HAL_UARTEx_DisableFifoMode+0x16>
 801227c:	2302      	movs	r3, #2
 801227e:	e027      	b.n	80122d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2201      	movs	r2, #1
 8012284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2224      	movs	r2, #36	@ 0x24
 801228c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	f022 0201 	bic.w	r2, r2, #1
 80122a6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80122ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2200      	movs	r2, #0
 80122b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	68fa      	ldr	r2, [r7, #12]
 80122bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2220      	movs	r2, #32
 80122c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2200      	movs	r2, #0
 80122ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80122ce:	2300      	movs	r3, #0
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3714      	adds	r7, #20
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr

080122dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b084      	sub	sp, #16
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d101      	bne.n	80122f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80122f0:	2302      	movs	r3, #2
 80122f2:	e02d      	b.n	8012350 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2201      	movs	r2, #1
 80122f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2224      	movs	r2, #36	@ 0x24
 8012300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	681a      	ldr	r2, [r3, #0]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f022 0201 	bic.w	r2, r2, #1
 801231a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	689b      	ldr	r3, [r3, #8]
 8012322:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	683a      	ldr	r2, [r7, #0]
 801232c:	430a      	orrs	r2, r1
 801232e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 f84f 	bl	80123d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	68fa      	ldr	r2, [r7, #12]
 801233c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2220      	movs	r2, #32
 8012342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2200      	movs	r2, #0
 801234a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3710      	adds	r7, #16
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b084      	sub	sp, #16
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012368:	2b01      	cmp	r3, #1
 801236a:	d101      	bne.n	8012370 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801236c:	2302      	movs	r3, #2
 801236e:	e02d      	b.n	80123cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2201      	movs	r2, #1
 8012374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2224      	movs	r2, #36	@ 0x24
 801237c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	681a      	ldr	r2, [r3, #0]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f022 0201 	bic.w	r2, r2, #1
 8012396:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	683a      	ldr	r2, [r7, #0]
 80123a8:	430a      	orrs	r2, r1
 80123aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f000 f811 	bl	80123d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	68fa      	ldr	r2, [r7, #12]
 80123b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2220      	movs	r2, #32
 80123be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2200      	movs	r2, #0
 80123c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80123ca:	2300      	movs	r3, #0
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3710      	adds	r7, #16
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80123d4:	b480      	push	{r7}
 80123d6:	b085      	sub	sp, #20
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d108      	bne.n	80123f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2201      	movs	r2, #1
 80123e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2201      	movs	r2, #1
 80123f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80123f4:	e031      	b.n	801245a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80123f6:	2308      	movs	r3, #8
 80123f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80123fa:	2308      	movs	r3, #8
 80123fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	689b      	ldr	r3, [r3, #8]
 8012404:	0e5b      	lsrs	r3, r3, #25
 8012406:	b2db      	uxtb	r3, r3
 8012408:	f003 0307 	and.w	r3, r3, #7
 801240c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	689b      	ldr	r3, [r3, #8]
 8012414:	0f5b      	lsrs	r3, r3, #29
 8012416:	b2db      	uxtb	r3, r3
 8012418:	f003 0307 	and.w	r3, r3, #7
 801241c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801241e:	7bbb      	ldrb	r3, [r7, #14]
 8012420:	7b3a      	ldrb	r2, [r7, #12]
 8012422:	4911      	ldr	r1, [pc, #68]	@ (8012468 <UARTEx_SetNbDataToProcess+0x94>)
 8012424:	5c8a      	ldrb	r2, [r1, r2]
 8012426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801242a:	7b3a      	ldrb	r2, [r7, #12]
 801242c:	490f      	ldr	r1, [pc, #60]	@ (801246c <UARTEx_SetNbDataToProcess+0x98>)
 801242e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012430:	fb93 f3f2 	sdiv	r3, r3, r2
 8012434:	b29a      	uxth	r2, r3
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801243c:	7bfb      	ldrb	r3, [r7, #15]
 801243e:	7b7a      	ldrb	r2, [r7, #13]
 8012440:	4909      	ldr	r1, [pc, #36]	@ (8012468 <UARTEx_SetNbDataToProcess+0x94>)
 8012442:	5c8a      	ldrb	r2, [r1, r2]
 8012444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012448:	7b7a      	ldrb	r2, [r7, #13]
 801244a:	4908      	ldr	r1, [pc, #32]	@ (801246c <UARTEx_SetNbDataToProcess+0x98>)
 801244c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801244e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012452:	b29a      	uxth	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801245a:	bf00      	nop
 801245c:	3714      	adds	r7, #20
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr
 8012466:	bf00      	nop
 8012468:	08023220 	.word	0x08023220
 801246c:	08023228 	.word	0x08023228

08012470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012470:	b480      	push	{r7}
 8012472:	b085      	sub	sp, #20
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2200      	movs	r2, #0
 801247c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012480:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8012484:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	b29a      	uxth	r2, r3
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8012490:	2300      	movs	r3, #0
}
 8012492:	4618      	mov	r0, r3
 8012494:	3714      	adds	r7, #20
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr

0801249e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801249e:	b480      	push	{r7}
 80124a0:	b085      	sub	sp, #20
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80124a6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80124aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	43db      	mvns	r3, r3
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	4013      	ands	r3, r2
 80124be:	b29a      	uxth	r2, r3
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80124c6:	2300      	movs	r3, #0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3714      	adds	r7, #20
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b085      	sub	sp, #20
 80124d8:	af00      	add	r7, sp, #0
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	1d3b      	adds	r3, r7, #4
 80124de:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	2201      	movs	r2, #1
 80124e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	2200      	movs	r2, #0
 80124ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2200      	movs	r2, #0
 80124f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	2200      	movs	r2, #0
 80124fe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8012502:	2300      	movs	r3, #0
}
 8012504:	4618      	mov	r0, r3
 8012506:	3714      	adds	r7, #20
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr

08012510 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012510:	b480      	push	{r7}
 8012512:	b0a7      	sub	sp, #156	@ 0x9c
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801251a:	2300      	movs	r3, #0
 801251c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	4413      	add	r3, r2
 801252a:	881b      	ldrh	r3, [r3, #0]
 801252c:	b29b      	uxth	r3, r3
 801252e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8012532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012536:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	78db      	ldrb	r3, [r3, #3]
 801253e:	2b03      	cmp	r3, #3
 8012540:	d81f      	bhi.n	8012582 <USB_ActivateEndpoint+0x72>
 8012542:	a201      	add	r2, pc, #4	@ (adr r2, 8012548 <USB_ActivateEndpoint+0x38>)
 8012544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012548:	08012559 	.word	0x08012559
 801254c:	08012575 	.word	0x08012575
 8012550:	0801258b 	.word	0x0801258b
 8012554:	08012567 	.word	0x08012567
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012558:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801255c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012560:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8012564:	e012      	b.n	801258c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012566:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801256a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 801256e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8012572:	e00b      	b.n	801258c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012574:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8012578:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801257c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8012580:	e004      	b.n	801258c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8012582:	2301      	movs	r3, #1
 8012584:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8012588:	e000      	b.n	801258c <USB_ActivateEndpoint+0x7c>
      break;
 801258a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	441a      	add	r2, r3
 8012596:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801259a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801259e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80125a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80125a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	009b      	lsls	r3, r3, #2
 80125b6:	4413      	add	r3, r2
 80125b8:	881b      	ldrh	r3, [r3, #0]
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	b21b      	sxth	r3, r3
 80125be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80125c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80125c6:	b21a      	sxth	r2, r3
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	b21b      	sxth	r3, r3
 80125ce:	4313      	orrs	r3, r2
 80125d0:	b21b      	sxth	r3, r3
 80125d2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	009b      	lsls	r3, r3, #2
 80125de:	441a      	add	r2, r3
 80125e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80125e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80125e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80125ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80125f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	7b1b      	ldrb	r3, [r3, #12]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	f040 8180 	bne.w	8012902 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	785b      	ldrb	r3, [r3, #1]
 8012606:	2b00      	cmp	r3, #0
 8012608:	f000 8084 	beq.w	8012714 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	61bb      	str	r3, [r7, #24]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012616:	b29b      	uxth	r3, r3
 8012618:	461a      	mov	r2, r3
 801261a:	69bb      	ldr	r3, [r7, #24]
 801261c:	4413      	add	r3, r2
 801261e:	61bb      	str	r3, [r7, #24]
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	00da      	lsls	r2, r3, #3
 8012626:	69bb      	ldr	r3, [r7, #24]
 8012628:	4413      	add	r3, r2
 801262a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801262e:	617b      	str	r3, [r7, #20]
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	88db      	ldrh	r3, [r3, #6]
 8012634:	085b      	lsrs	r3, r3, #1
 8012636:	b29b      	uxth	r3, r3
 8012638:	005b      	lsls	r3, r3, #1
 801263a:	b29a      	uxth	r2, r3
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	4413      	add	r3, r2
 801264a:	881b      	ldrh	r3, [r3, #0]
 801264c:	827b      	strh	r3, [r7, #18]
 801264e:	8a7b      	ldrh	r3, [r7, #18]
 8012650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012654:	2b00      	cmp	r3, #0
 8012656:	d01b      	beq.n	8012690 <USB_ActivateEndpoint+0x180>
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	4413      	add	r3, r2
 8012662:	881b      	ldrh	r3, [r3, #0]
 8012664:	b29b      	uxth	r3, r3
 8012666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801266a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801266e:	823b      	strh	r3, [r7, #16]
 8012670:	687a      	ldr	r2, [r7, #4]
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	009b      	lsls	r3, r3, #2
 8012678:	441a      	add	r2, r3
 801267a:	8a3b      	ldrh	r3, [r7, #16]
 801267c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012688:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801268c:	b29b      	uxth	r3, r3
 801268e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	78db      	ldrb	r3, [r3, #3]
 8012694:	2b01      	cmp	r3, #1
 8012696:	d020      	beq.n	80126da <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012698:	687a      	ldr	r2, [r7, #4]
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	009b      	lsls	r3, r3, #2
 80126a0:	4413      	add	r3, r2
 80126a2:	881b      	ldrh	r3, [r3, #0]
 80126a4:	b29b      	uxth	r3, r3
 80126a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80126aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80126ae:	81bb      	strh	r3, [r7, #12]
 80126b0:	89bb      	ldrh	r3, [r7, #12]
 80126b2:	f083 0320 	eor.w	r3, r3, #32
 80126b6:	81bb      	strh	r3, [r7, #12]
 80126b8:	687a      	ldr	r2, [r7, #4]
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	781b      	ldrb	r3, [r3, #0]
 80126be:	009b      	lsls	r3, r3, #2
 80126c0:	441a      	add	r2, r3
 80126c2:	89bb      	ldrh	r3, [r7, #12]
 80126c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80126c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80126cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80126d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	8013      	strh	r3, [r2, #0]
 80126d8:	e3f9      	b.n	8012ece <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	009b      	lsls	r3, r3, #2
 80126e2:	4413      	add	r3, r2
 80126e4:	881b      	ldrh	r3, [r3, #0]
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80126ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80126f0:	81fb      	strh	r3, [r7, #14]
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	441a      	add	r2, r3
 80126fc:	89fb      	ldrh	r3, [r7, #14]
 80126fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801270a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801270e:	b29b      	uxth	r3, r3
 8012710:	8013      	strh	r3, [r2, #0]
 8012712:	e3dc      	b.n	8012ece <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	633b      	str	r3, [r7, #48]	@ 0x30
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801271e:	b29b      	uxth	r3, r3
 8012720:	461a      	mov	r2, r3
 8012722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012724:	4413      	add	r3, r2
 8012726:	633b      	str	r3, [r7, #48]	@ 0x30
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	00da      	lsls	r2, r3, #3
 801272e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012730:	4413      	add	r3, r2
 8012732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8012736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	88db      	ldrh	r3, [r3, #6]
 801273c:	085b      	lsrs	r3, r3, #1
 801273e:	b29b      	uxth	r3, r3
 8012740:	005b      	lsls	r3, r3, #1
 8012742:	b29a      	uxth	r2, r3
 8012744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012746:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012752:	b29b      	uxth	r3, r3
 8012754:	461a      	mov	r2, r3
 8012756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012758:	4413      	add	r3, r2
 801275a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	00da      	lsls	r2, r3, #3
 8012762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012764:	4413      	add	r3, r2
 8012766:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801276a:	627b      	str	r3, [r7, #36]	@ 0x24
 801276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276e:	881b      	ldrh	r3, [r3, #0]
 8012770:	b29b      	uxth	r3, r3
 8012772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012776:	b29a      	uxth	r2, r3
 8012778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277a:	801a      	strh	r2, [r3, #0]
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	691b      	ldr	r3, [r3, #16]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d10a      	bne.n	801279a <USB_ActivateEndpoint+0x28a>
 8012784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012786:	881b      	ldrh	r3, [r3, #0]
 8012788:	b29b      	uxth	r3, r3
 801278a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801278e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012792:	b29a      	uxth	r2, r3
 8012794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012796:	801a      	strh	r2, [r3, #0]
 8012798:	e041      	b.n	801281e <USB_ActivateEndpoint+0x30e>
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	691b      	ldr	r3, [r3, #16]
 801279e:	2b3e      	cmp	r3, #62	@ 0x3e
 80127a0:	d81c      	bhi.n	80127dc <USB_ActivateEndpoint+0x2cc>
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	691b      	ldr	r3, [r3, #16]
 80127a6:	085b      	lsrs	r3, r3, #1
 80127a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	691b      	ldr	r3, [r3, #16]
 80127b0:	f003 0301 	and.w	r3, r3, #1
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d004      	beq.n	80127c2 <USB_ActivateEndpoint+0x2b2>
 80127b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80127bc:	3301      	adds	r3, #1
 80127be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80127c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127c4:	881b      	ldrh	r3, [r3, #0]
 80127c6:	b29a      	uxth	r2, r3
 80127c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	029b      	lsls	r3, r3, #10
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	4313      	orrs	r3, r2
 80127d4:	b29a      	uxth	r2, r3
 80127d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127d8:	801a      	strh	r2, [r3, #0]
 80127da:	e020      	b.n	801281e <USB_ActivateEndpoint+0x30e>
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	691b      	ldr	r3, [r3, #16]
 80127e0:	095b      	lsrs	r3, r3, #5
 80127e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	691b      	ldr	r3, [r3, #16]
 80127ea:	f003 031f 	and.w	r3, r3, #31
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d104      	bne.n	80127fc <USB_ActivateEndpoint+0x2ec>
 80127f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80127f6:	3b01      	subs	r3, #1
 80127f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80127fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127fe:	881b      	ldrh	r3, [r3, #0]
 8012800:	b29a      	uxth	r2, r3
 8012802:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012806:	b29b      	uxth	r3, r3
 8012808:	029b      	lsls	r3, r3, #10
 801280a:	b29b      	uxth	r3, r3
 801280c:	4313      	orrs	r3, r2
 801280e:	b29b      	uxth	r3, r3
 8012810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012818:	b29a      	uxth	r2, r3
 801281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801281c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	4413      	add	r3, r2
 8012828:	881b      	ldrh	r3, [r3, #0]
 801282a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801282c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801282e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012832:	2b00      	cmp	r3, #0
 8012834:	d01b      	beq.n	801286e <USB_ActivateEndpoint+0x35e>
 8012836:	687a      	ldr	r2, [r7, #4]
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	4413      	add	r3, r2
 8012840:	881b      	ldrh	r3, [r3, #0]
 8012842:	b29b      	uxth	r3, r3
 8012844:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012848:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801284c:	843b      	strh	r3, [r7, #32]
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	441a      	add	r2, r3
 8012858:	8c3b      	ldrh	r3, [r7, #32]
 801285a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801285e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012862:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801286a:	b29b      	uxth	r3, r3
 801286c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d124      	bne.n	80128c0 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	009b      	lsls	r3, r3, #2
 801287e:	4413      	add	r3, r2
 8012880:	881b      	ldrh	r3, [r3, #0]
 8012882:	b29b      	uxth	r3, r3
 8012884:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801288c:	83bb      	strh	r3, [r7, #28]
 801288e:	8bbb      	ldrh	r3, [r7, #28]
 8012890:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012894:	83bb      	strh	r3, [r7, #28]
 8012896:	8bbb      	ldrh	r3, [r7, #28]
 8012898:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801289c:	83bb      	strh	r3, [r7, #28]
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	441a      	add	r2, r3
 80128a8:	8bbb      	ldrh	r3, [r7, #28]
 80128aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80128ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80128b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80128b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	8013      	strh	r3, [r2, #0]
 80128be:	e306      	b.n	8012ece <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80128c0:	687a      	ldr	r2, [r7, #4]
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	781b      	ldrb	r3, [r3, #0]
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	4413      	add	r3, r2
 80128ca:	881b      	ldrh	r3, [r3, #0]
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80128d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80128d6:	83fb      	strh	r3, [r7, #30]
 80128d8:	8bfb      	ldrh	r3, [r7, #30]
 80128da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80128de:	83fb      	strh	r3, [r7, #30]
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	009b      	lsls	r3, r3, #2
 80128e8:	441a      	add	r2, r3
 80128ea:	8bfb      	ldrh	r3, [r7, #30]
 80128ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80128f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80128f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80128f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	8013      	strh	r3, [r2, #0]
 8012900:	e2e5      	b.n	8012ece <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	78db      	ldrb	r3, [r3, #3]
 8012906:	2b02      	cmp	r3, #2
 8012908:	d11e      	bne.n	8012948 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801290a:	687a      	ldr	r2, [r7, #4]
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	009b      	lsls	r3, r3, #2
 8012912:	4413      	add	r3, r2
 8012914:	881b      	ldrh	r3, [r3, #0]
 8012916:	b29b      	uxth	r3, r3
 8012918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801291c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012920:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8012924:	687a      	ldr	r2, [r7, #4]
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	009b      	lsls	r3, r3, #2
 801292c:	441a      	add	r2, r3
 801292e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8012932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801293a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801293e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012942:	b29b      	uxth	r3, r3
 8012944:	8013      	strh	r3, [r2, #0]
 8012946:	e01d      	b.n	8012984 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	009b      	lsls	r3, r3, #2
 8012950:	4413      	add	r3, r2
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	b29b      	uxth	r3, r3
 8012956:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801295a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801295e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	009b      	lsls	r3, r3, #2
 801296a:	441a      	add	r2, r3
 801296c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8012970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801297c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012980:	b29b      	uxth	r3, r3
 8012982:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801298e:	b29b      	uxth	r3, r3
 8012990:	461a      	mov	r2, r3
 8012992:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012994:	4413      	add	r3, r2
 8012996:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	00da      	lsls	r2, r3, #3
 801299e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80129a0:	4413      	add	r3, r2
 80129a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80129a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	891b      	ldrh	r3, [r3, #8]
 80129ac:	085b      	lsrs	r3, r3, #1
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	005b      	lsls	r3, r3, #1
 80129b2:	b29a      	uxth	r2, r3
 80129b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129b6:	801a      	strh	r2, [r3, #0]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	461a      	mov	r2, r3
 80129c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80129c8:	4413      	add	r3, r2
 80129ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	00da      	lsls	r2, r3, #3
 80129d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80129d4:	4413      	add	r3, r2
 80129d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80129da:	673b      	str	r3, [r7, #112]	@ 0x70
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	895b      	ldrh	r3, [r3, #10]
 80129e0:	085b      	lsrs	r3, r3, #1
 80129e2:	b29b      	uxth	r3, r3
 80129e4:	005b      	lsls	r3, r3, #1
 80129e6:	b29a      	uxth	r2, r3
 80129e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80129ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	785b      	ldrb	r3, [r3, #1]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f040 81af 	bne.w	8012d54 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	009b      	lsls	r3, r3, #2
 80129fe:	4413      	add	r3, r2
 8012a00:	881b      	ldrh	r3, [r3, #0]
 8012a02:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8012a06:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8012a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d01d      	beq.n	8012a4e <USB_ActivateEndpoint+0x53e>
 8012a12:	687a      	ldr	r2, [r7, #4]
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	4413      	add	r3, r2
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a28:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	441a      	add	r2, r3
 8012a36:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8012a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	4413      	add	r3, r2
 8012a58:	881b      	ldrh	r3, [r3, #0]
 8012a5a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8012a5e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8012a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d01d      	beq.n	8012aa6 <USB_ActivateEndpoint+0x596>
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	009b      	lsls	r3, r3, #2
 8012a72:	4413      	add	r3, r2
 8012a74:	881b      	ldrh	r3, [r3, #0]
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a80:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	441a      	add	r2, r3
 8012a8e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8012a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	785b      	ldrb	r3, [r3, #1]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d16b      	bne.n	8012b86 <USB_ActivateEndpoint+0x676>
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	461a      	mov	r2, r3
 8012abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012abe:	4413      	add	r3, r2
 8012ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	00da      	lsls	r2, r3, #3
 8012ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012aca:	4413      	add	r3, r2
 8012acc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ad4:	881b      	ldrh	r3, [r3, #0]
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012adc:	b29a      	uxth	r2, r3
 8012ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ae0:	801a      	strh	r2, [r3, #0]
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	691b      	ldr	r3, [r3, #16]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d10a      	bne.n	8012b00 <USB_ActivateEndpoint+0x5f0>
 8012aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012aec:	881b      	ldrh	r3, [r3, #0]
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012af8:	b29a      	uxth	r2, r3
 8012afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012afc:	801a      	strh	r2, [r3, #0]
 8012afe:	e05d      	b.n	8012bbc <USB_ActivateEndpoint+0x6ac>
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	691b      	ldr	r3, [r3, #16]
 8012b04:	2b3e      	cmp	r3, #62	@ 0x3e
 8012b06:	d81c      	bhi.n	8012b42 <USB_ActivateEndpoint+0x632>
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	691b      	ldr	r3, [r3, #16]
 8012b0c:	085b      	lsrs	r3, r3, #1
 8012b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	691b      	ldr	r3, [r3, #16]
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d004      	beq.n	8012b28 <USB_ActivateEndpoint+0x618>
 8012b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012b22:	3301      	adds	r3, #1
 8012b24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b2a:	881b      	ldrh	r3, [r3, #0]
 8012b2c:	b29a      	uxth	r2, r3
 8012b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	029b      	lsls	r3, r3, #10
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b3e:	801a      	strh	r2, [r3, #0]
 8012b40:	e03c      	b.n	8012bbc <USB_ActivateEndpoint+0x6ac>
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	691b      	ldr	r3, [r3, #16]
 8012b46:	095b      	lsrs	r3, r3, #5
 8012b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	691b      	ldr	r3, [r3, #16]
 8012b50:	f003 031f 	and.w	r3, r3, #31
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d104      	bne.n	8012b62 <USB_ActivateEndpoint+0x652>
 8012b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012b5c:	3b01      	subs	r3, #1
 8012b5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b64:	881b      	ldrh	r3, [r3, #0]
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	029b      	lsls	r3, r3, #10
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	4313      	orrs	r3, r2
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012b7e:	b29a      	uxth	r2, r3
 8012b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b82:	801a      	strh	r2, [r3, #0]
 8012b84:	e01a      	b.n	8012bbc <USB_ActivateEndpoint+0x6ac>
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	785b      	ldrb	r3, [r3, #1]
 8012b8a:	2b01      	cmp	r3, #1
 8012b8c:	d116      	bne.n	8012bbc <USB_ActivateEndpoint+0x6ac>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	657b      	str	r3, [r7, #84]	@ 0x54
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b9e:	4413      	add	r3, r2
 8012ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	00da      	lsls	r2, r3, #3
 8012ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012baa:	4413      	add	r3, r2
 8012bac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012bb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	691b      	ldr	r3, [r3, #16]
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bba:	801a      	strh	r2, [r3, #0]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	785b      	ldrb	r3, [r3, #1]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d16b      	bne.n	8012ca0 <USB_ActivateEndpoint+0x790>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bd8:	4413      	add	r3, r2
 8012bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	00da      	lsls	r2, r3, #3
 8012be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012be4:	4413      	add	r3, r2
 8012be6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012bea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bee:	881b      	ldrh	r3, [r3, #0]
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012bf6:	b29a      	uxth	r2, r3
 8012bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bfa:	801a      	strh	r2, [r3, #0]
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	691b      	ldr	r3, [r3, #16]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d10a      	bne.n	8012c1a <USB_ActivateEndpoint+0x70a>
 8012c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	b29b      	uxth	r3, r3
 8012c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c16:	801a      	strh	r2, [r3, #0]
 8012c18:	e05b      	b.n	8012cd2 <USB_ActivateEndpoint+0x7c2>
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	691b      	ldr	r3, [r3, #16]
 8012c1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012c20:	d81c      	bhi.n	8012c5c <USB_ActivateEndpoint+0x74c>
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	691b      	ldr	r3, [r3, #16]
 8012c26:	085b      	lsrs	r3, r3, #1
 8012c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	691b      	ldr	r3, [r3, #16]
 8012c30:	f003 0301 	and.w	r3, r3, #1
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d004      	beq.n	8012c42 <USB_ActivateEndpoint+0x732>
 8012c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c44:	881b      	ldrh	r3, [r3, #0]
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	029b      	lsls	r3, r3, #10
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	4313      	orrs	r3, r2
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c58:	801a      	strh	r2, [r3, #0]
 8012c5a:	e03a      	b.n	8012cd2 <USB_ActivateEndpoint+0x7c2>
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	691b      	ldr	r3, [r3, #16]
 8012c60:	095b      	lsrs	r3, r3, #5
 8012c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	691b      	ldr	r3, [r3, #16]
 8012c6a:	f003 031f 	and.w	r3, r3, #31
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d104      	bne.n	8012c7c <USB_ActivateEndpoint+0x76c>
 8012c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012c76:	3b01      	subs	r3, #1
 8012c78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c7e:	881b      	ldrh	r3, [r3, #0]
 8012c80:	b29a      	uxth	r2, r3
 8012c82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	029b      	lsls	r3, r3, #10
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	4313      	orrs	r3, r2
 8012c8e:	b29b      	uxth	r3, r3
 8012c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c98:	b29a      	uxth	r2, r3
 8012c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c9c:	801a      	strh	r2, [r3, #0]
 8012c9e:	e018      	b.n	8012cd2 <USB_ActivateEndpoint+0x7c2>
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	785b      	ldrb	r3, [r3, #1]
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	d114      	bne.n	8012cd2 <USB_ActivateEndpoint+0x7c2>
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012cb4:	4413      	add	r3, r2
 8012cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	00da      	lsls	r2, r3, #3
 8012cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012cc0:	4413      	add	r3, r2
 8012cc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012cc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	691b      	ldr	r3, [r3, #16]
 8012ccc:	b29a      	uxth	r2, r3
 8012cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012cd0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012cd2:	687a      	ldr	r2, [r7, #4]
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	009b      	lsls	r3, r3, #2
 8012cda:	4413      	add	r3, r2
 8012cdc:	881b      	ldrh	r3, [r3, #0]
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ce8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012cea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012cec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012cf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012cf2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012cf4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012cf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	441a      	add	r2, r3
 8012d04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012d1a:	687a      	ldr	r2, [r7, #4]
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	009b      	lsls	r3, r3, #2
 8012d22:	4413      	add	r3, r2
 8012d24:	881b      	ldrh	r3, [r3, #0]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d30:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	441a      	add	r2, r3
 8012d3c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	8013      	strh	r3, [r2, #0]
 8012d52:	e0bc      	b.n	8012ece <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	4413      	add	r3, r2
 8012d5e:	881b      	ldrh	r3, [r3, #0]
 8012d60:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8012d64:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8012d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d01d      	beq.n	8012dac <USB_ActivateEndpoint+0x89c>
 8012d70:	687a      	ldr	r2, [r7, #4]
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	4413      	add	r3, r2
 8012d7a:	881b      	ldrh	r3, [r3, #0]
 8012d7c:	b29b      	uxth	r3, r3
 8012d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012d86:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	009b      	lsls	r3, r3, #2
 8012d92:	441a      	add	r2, r3
 8012d94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8012d98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	4413      	add	r3, r2
 8012db6:	881b      	ldrh	r3, [r3, #0]
 8012db8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8012dbc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8012dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d01d      	beq.n	8012e04 <USB_ActivateEndpoint+0x8f4>
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	4413      	add	r3, r2
 8012dd2:	881b      	ldrh	r3, [r3, #0]
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012dde:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	441a      	add	r2, r3
 8012dec:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8012df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012dfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	78db      	ldrb	r3, [r3, #3]
 8012e08:	2b01      	cmp	r3, #1
 8012e0a:	d024      	beq.n	8012e56 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	4413      	add	r3, r2
 8012e16:	881b      	ldrh	r3, [r3, #0]
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012e22:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8012e26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8012e2a:	f083 0320 	eor.w	r3, r3, #32
 8012e2e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	441a      	add	r2, r3
 8012e3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8012e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	8013      	strh	r3, [r2, #0]
 8012e54:	e01d      	b.n	8012e92 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	4413      	add	r3, r2
 8012e60:	881b      	ldrh	r3, [r3, #0]
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012e6c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	009b      	lsls	r3, r3, #2
 8012e78:	441a      	add	r2, r3
 8012e7a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8012e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	4413      	add	r3, r2
 8012e9c:	881b      	ldrh	r3, [r3, #0]
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ea8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8012eac:	687a      	ldr	r2, [r7, #4]
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	441a      	add	r2, r3
 8012eb6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8012eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8012ece:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	379c      	adds	r7, #156	@ 0x9c
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr
 8012ede:	bf00      	nop

08012ee0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b08d      	sub	sp, #52	@ 0x34
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	7b1b      	ldrb	r3, [r3, #12]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f040 808e 	bne.w	8013010 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	785b      	ldrb	r3, [r3, #1]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d044      	beq.n	8012f86 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012efc:	687a      	ldr	r2, [r7, #4]
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	009b      	lsls	r3, r3, #2
 8012f04:	4413      	add	r3, r2
 8012f06:	881b      	ldrh	r3, [r3, #0]
 8012f08:	81bb      	strh	r3, [r7, #12]
 8012f0a:	89bb      	ldrh	r3, [r7, #12]
 8012f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d01b      	beq.n	8012f4c <USB_DeactivateEndpoint+0x6c>
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	009b      	lsls	r3, r3, #2
 8012f1c:	4413      	add	r3, r2
 8012f1e:	881b      	ldrh	r3, [r3, #0]
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012f2a:	817b      	strh	r3, [r7, #10]
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	781b      	ldrb	r3, [r3, #0]
 8012f32:	009b      	lsls	r3, r3, #2
 8012f34:	441a      	add	r2, r3
 8012f36:	897b      	ldrh	r3, [r7, #10]
 8012f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012f44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012f48:	b29b      	uxth	r3, r3
 8012f4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012f4c:	687a      	ldr	r2, [r7, #4]
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	009b      	lsls	r3, r3, #2
 8012f54:	4413      	add	r3, r2
 8012f56:	881b      	ldrh	r3, [r3, #0]
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012f62:	813b      	strh	r3, [r7, #8]
 8012f64:	687a      	ldr	r2, [r7, #4]
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	009b      	lsls	r3, r3, #2
 8012f6c:	441a      	add	r2, r3
 8012f6e:	893b      	ldrh	r3, [r7, #8]
 8012f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	8013      	strh	r3, [r2, #0]
 8012f84:	e192      	b.n	80132ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	4413      	add	r3, r2
 8012f90:	881b      	ldrh	r3, [r3, #0]
 8012f92:	827b      	strh	r3, [r7, #18]
 8012f94:	8a7b      	ldrh	r3, [r7, #18]
 8012f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d01b      	beq.n	8012fd6 <USB_DeactivateEndpoint+0xf6>
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	009b      	lsls	r3, r3, #2
 8012fa6:	4413      	add	r3, r2
 8012fa8:	881b      	ldrh	r3, [r3, #0]
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012fb4:	823b      	strh	r3, [r7, #16]
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	009b      	lsls	r3, r3, #2
 8012fbe:	441a      	add	r2, r3
 8012fc0:	8a3b      	ldrh	r3, [r7, #16]
 8012fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012fca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	009b      	lsls	r3, r3, #2
 8012fde:	4413      	add	r3, r2
 8012fe0:	881b      	ldrh	r3, [r3, #0]
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012fec:	81fb      	strh	r3, [r7, #14]
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	009b      	lsls	r3, r3, #2
 8012ff6:	441a      	add	r2, r3
 8012ff8:	89fb      	ldrh	r3, [r7, #14]
 8012ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801300a:	b29b      	uxth	r3, r3
 801300c:	8013      	strh	r3, [r2, #0]
 801300e:	e14d      	b.n	80132ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	785b      	ldrb	r3, [r3, #1]
 8013014:	2b00      	cmp	r3, #0
 8013016:	f040 80a5 	bne.w	8013164 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801301a:	687a      	ldr	r2, [r7, #4]
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	009b      	lsls	r3, r3, #2
 8013022:	4413      	add	r3, r2
 8013024:	881b      	ldrh	r3, [r3, #0]
 8013026:	843b      	strh	r3, [r7, #32]
 8013028:	8c3b      	ldrh	r3, [r7, #32]
 801302a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801302e:	2b00      	cmp	r3, #0
 8013030:	d01b      	beq.n	801306a <USB_DeactivateEndpoint+0x18a>
 8013032:	687a      	ldr	r2, [r7, #4]
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	4413      	add	r3, r2
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	b29b      	uxth	r3, r3
 8013040:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013048:	83fb      	strh	r3, [r7, #30]
 801304a:	687a      	ldr	r2, [r7, #4]
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	009b      	lsls	r3, r3, #2
 8013052:	441a      	add	r2, r3
 8013054:	8bfb      	ldrh	r3, [r7, #30]
 8013056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801305a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801305e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8013062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013066:	b29b      	uxth	r3, r3
 8013068:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801306a:	687a      	ldr	r2, [r7, #4]
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	4413      	add	r3, r2
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	83bb      	strh	r3, [r7, #28]
 8013078:	8bbb      	ldrh	r3, [r7, #28]
 801307a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801307e:	2b00      	cmp	r3, #0
 8013080:	d01b      	beq.n	80130ba <USB_DeactivateEndpoint+0x1da>
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	4413      	add	r3, r2
 801308c:	881b      	ldrh	r3, [r3, #0]
 801308e:	b29b      	uxth	r3, r3
 8013090:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013098:	837b      	strh	r3, [r7, #26]
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	009b      	lsls	r3, r3, #2
 80130a2:	441a      	add	r2, r3
 80130a4:	8b7b      	ldrh	r3, [r7, #26]
 80130a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80130aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80130ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80130b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	009b      	lsls	r3, r3, #2
 80130c2:	4413      	add	r3, r2
 80130c4:	881b      	ldrh	r3, [r3, #0]
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80130cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80130d0:	833b      	strh	r3, [r7, #24]
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	441a      	add	r2, r3
 80130dc:	8b3b      	ldrh	r3, [r7, #24]
 80130de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80130e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80130e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80130ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	4413      	add	r3, r2
 80130fc:	881b      	ldrh	r3, [r3, #0]
 80130fe:	b29b      	uxth	r3, r3
 8013100:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013108:	82fb      	strh	r3, [r7, #22]
 801310a:	687a      	ldr	r2, [r7, #4]
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	009b      	lsls	r3, r3, #2
 8013112:	441a      	add	r2, r3
 8013114:	8afb      	ldrh	r3, [r7, #22]
 8013116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801311a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801311e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013126:	b29b      	uxth	r3, r3
 8013128:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	009b      	lsls	r3, r3, #2
 8013132:	4413      	add	r3, r2
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	b29b      	uxth	r3, r3
 8013138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801313c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013140:	82bb      	strh	r3, [r7, #20]
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	009b      	lsls	r3, r3, #2
 801314a:	441a      	add	r2, r3
 801314c:	8abb      	ldrh	r3, [r7, #20]
 801314e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801315a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801315e:	b29b      	uxth	r3, r3
 8013160:	8013      	strh	r3, [r2, #0]
 8013162:	e0a3      	b.n	80132ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	009b      	lsls	r3, r3, #2
 801316c:	4413      	add	r3, r2
 801316e:	881b      	ldrh	r3, [r3, #0]
 8013170:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8013172:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013178:	2b00      	cmp	r3, #0
 801317a:	d01b      	beq.n	80131b4 <USB_DeactivateEndpoint+0x2d4>
 801317c:	687a      	ldr	r2, [r7, #4]
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	009b      	lsls	r3, r3, #2
 8013184:	4413      	add	r3, r2
 8013186:	881b      	ldrh	r3, [r3, #0]
 8013188:	b29b      	uxth	r3, r3
 801318a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801318e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013192:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	009b      	lsls	r3, r3, #2
 801319c:	441a      	add	r2, r3
 801319e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80131a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80131a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80131a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80131ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	4413      	add	r3, r2
 80131be:	881b      	ldrh	r3, [r3, #0]
 80131c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80131c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80131c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d01b      	beq.n	8013204 <USB_DeactivateEndpoint+0x324>
 80131cc:	687a      	ldr	r2, [r7, #4]
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	009b      	lsls	r3, r3, #2
 80131d4:	4413      	add	r3, r2
 80131d6:	881b      	ldrh	r3, [r3, #0]
 80131d8:	b29b      	uxth	r3, r3
 80131da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80131de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80131e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80131e4:	687a      	ldr	r2, [r7, #4]
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	009b      	lsls	r3, r3, #2
 80131ec:	441a      	add	r2, r3
 80131ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80131f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80131f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80131f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80131fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8013200:	b29b      	uxth	r3, r3
 8013202:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013204:	687a      	ldr	r2, [r7, #4]
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	4413      	add	r3, r2
 801320e:	881b      	ldrh	r3, [r3, #0]
 8013210:	b29b      	uxth	r3, r3
 8013212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801321a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801321c:	687a      	ldr	r2, [r7, #4]
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	009b      	lsls	r3, r3, #2
 8013224:	441a      	add	r2, r3
 8013226:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801322c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8013234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013238:	b29b      	uxth	r3, r3
 801323a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	009b      	lsls	r3, r3, #2
 8013244:	4413      	add	r3, r2
 8013246:	881b      	ldrh	r3, [r3, #0]
 8013248:	b29b      	uxth	r3, r3
 801324a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801324e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013252:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	009b      	lsls	r3, r3, #2
 801325c:	441a      	add	r2, r3
 801325e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801326c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013270:	b29b      	uxth	r3, r3
 8013272:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	009b      	lsls	r3, r3, #2
 801327c:	4413      	add	r3, r2
 801327e:	881b      	ldrh	r3, [r3, #0]
 8013280:	b29b      	uxth	r3, r3
 8013282:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801328a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	441a      	add	r2, r3
 8013296:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801329c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80132a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80132a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80132ac:	2300      	movs	r3, #0
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3734      	adds	r7, #52	@ 0x34
 80132b2:	46bd      	mov	sp, r7
 80132b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b8:	4770      	bx	lr

080132ba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80132ba:	b580      	push	{r7, lr}
 80132bc:	b0ac      	sub	sp, #176	@ 0xb0
 80132be:	af00      	add	r7, sp, #0
 80132c0:	6078      	str	r0, [r7, #4]
 80132c2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	785b      	ldrb	r3, [r3, #1]
 80132c8:	2b01      	cmp	r3, #1
 80132ca:	f040 84ca 	bne.w	8013c62 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	699a      	ldr	r2, [r3, #24]
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	691b      	ldr	r3, [r3, #16]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d904      	bls.n	80132e4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	691b      	ldr	r3, [r3, #16]
 80132de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80132e2:	e003      	b.n	80132ec <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	699b      	ldr	r3, [r3, #24]
 80132e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	7b1b      	ldrb	r3, [r3, #12]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d122      	bne.n	801333a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	6959      	ldr	r1, [r3, #20]
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	88da      	ldrh	r2, [r3, #6]
 80132fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013300:	b29b      	uxth	r3, r3
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f000 febd 	bl	8014082 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	613b      	str	r3, [r7, #16]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013312:	b29b      	uxth	r3, r3
 8013314:	461a      	mov	r2, r3
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	4413      	add	r3, r2
 801331a:	613b      	str	r3, [r7, #16]
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	00da      	lsls	r2, r3, #3
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	4413      	add	r3, r2
 8013326:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801332a:	60fb      	str	r3, [r7, #12]
 801332c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013330:	b29a      	uxth	r2, r3
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	801a      	strh	r2, [r3, #0]
 8013336:	f000 bc6f 	b.w	8013c18 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	78db      	ldrb	r3, [r3, #3]
 801333e:	2b02      	cmp	r3, #2
 8013340:	f040 831e 	bne.w	8013980 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	6a1a      	ldr	r2, [r3, #32]
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	691b      	ldr	r3, [r3, #16]
 801334c:	429a      	cmp	r2, r3
 801334e:	f240 82cf 	bls.w	80138f0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	009b      	lsls	r3, r3, #2
 801335a:	4413      	add	r3, r2
 801335c:	881b      	ldrh	r3, [r3, #0]
 801335e:	b29b      	uxth	r3, r3
 8013360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013368:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	441a      	add	r2, r3
 8013376:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 801337a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801337e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013382:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8013386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801338a:	b29b      	uxth	r3, r3
 801338c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	6a1a      	ldr	r2, [r3, #32]
 8013392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013396:	1ad2      	subs	r2, r2, r3
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	009b      	lsls	r3, r3, #2
 80133a4:	4413      	add	r3, r2
 80133a6:	881b      	ldrh	r3, [r3, #0]
 80133a8:	b29b      	uxth	r3, r3
 80133aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f000 814f 	beq.w	8013652 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	785b      	ldrb	r3, [r3, #1]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d16b      	bne.n	8013498 <USB_EPStartXfer+0x1de>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	461a      	mov	r2, r3
 80133ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133d0:	4413      	add	r3, r2
 80133d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	00da      	lsls	r2, r3, #3
 80133da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133dc:	4413      	add	r3, r2
 80133de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80133e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80133e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133e6:	881b      	ldrh	r3, [r3, #0]
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f2:	801a      	strh	r2, [r3, #0]
 80133f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d10a      	bne.n	8013412 <USB_EPStartXfer+0x158>
 80133fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133fe:	881b      	ldrh	r3, [r3, #0]
 8013400:	b29b      	uxth	r3, r3
 8013402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801340a:	b29a      	uxth	r2, r3
 801340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801340e:	801a      	strh	r2, [r3, #0]
 8013410:	e05b      	b.n	80134ca <USB_EPStartXfer+0x210>
 8013412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013416:	2b3e      	cmp	r3, #62	@ 0x3e
 8013418:	d81c      	bhi.n	8013454 <USB_EPStartXfer+0x19a>
 801341a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801341e:	085b      	lsrs	r3, r3, #1
 8013420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8013424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013428:	f003 0301 	and.w	r3, r3, #1
 801342c:	2b00      	cmp	r3, #0
 801342e:	d004      	beq.n	801343a <USB_EPStartXfer+0x180>
 8013430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013434:	3301      	adds	r3, #1
 8013436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801343c:	881b      	ldrh	r3, [r3, #0]
 801343e:	b29a      	uxth	r2, r3
 8013440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013444:	b29b      	uxth	r3, r3
 8013446:	029b      	lsls	r3, r3, #10
 8013448:	b29b      	uxth	r3, r3
 801344a:	4313      	orrs	r3, r2
 801344c:	b29a      	uxth	r2, r3
 801344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013450:	801a      	strh	r2, [r3, #0]
 8013452:	e03a      	b.n	80134ca <USB_EPStartXfer+0x210>
 8013454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013458:	095b      	lsrs	r3, r3, #5
 801345a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801345e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013462:	f003 031f 	and.w	r3, r3, #31
 8013466:	2b00      	cmp	r3, #0
 8013468:	d104      	bne.n	8013474 <USB_EPStartXfer+0x1ba>
 801346a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801346e:	3b01      	subs	r3, #1
 8013470:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8013474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013476:	881b      	ldrh	r3, [r3, #0]
 8013478:	b29a      	uxth	r2, r3
 801347a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801347e:	b29b      	uxth	r3, r3
 8013480:	029b      	lsls	r3, r3, #10
 8013482:	b29b      	uxth	r3, r3
 8013484:	4313      	orrs	r3, r2
 8013486:	b29b      	uxth	r3, r3
 8013488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801348c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013490:	b29a      	uxth	r2, r3
 8013492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013494:	801a      	strh	r2, [r3, #0]
 8013496:	e018      	b.n	80134ca <USB_EPStartXfer+0x210>
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	785b      	ldrb	r3, [r3, #1]
 801349c:	2b01      	cmp	r3, #1
 801349e:	d114      	bne.n	80134ca <USB_EPStartXfer+0x210>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	461a      	mov	r2, r3
 80134aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ac:	4413      	add	r3, r2
 80134ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	00da      	lsls	r2, r3, #3
 80134b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b8:	4413      	add	r3, r2
 80134ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80134be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80134c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80134c4:	b29a      	uxth	r2, r3
 80134c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	895b      	ldrh	r3, [r3, #10]
 80134ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	6959      	ldr	r1, [r3, #20]
 80134d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80134da:	b29b      	uxth	r3, r3
 80134dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f000 fdce 	bl	8014082 <USB_WritePMA>
            ep->xfer_buff += len;
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	695a      	ldr	r2, [r3, #20]
 80134ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80134ee:	441a      	add	r2, r3
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	6a1a      	ldr	r2, [r3, #32]
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	691b      	ldr	r3, [r3, #16]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d907      	bls.n	8013510 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	6a1a      	ldr	r2, [r3, #32]
 8013504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013508:	1ad2      	subs	r2, r2, r3
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	621a      	str	r2, [r3, #32]
 801350e:	e006      	b.n	801351e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	6a1b      	ldr	r3, [r3, #32]
 8013514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	2200      	movs	r2, #0
 801351c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	785b      	ldrb	r3, [r3, #1]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d16b      	bne.n	80135fe <USB_EPStartXfer+0x344>
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	61bb      	str	r3, [r7, #24]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013530:	b29b      	uxth	r3, r3
 8013532:	461a      	mov	r2, r3
 8013534:	69bb      	ldr	r3, [r7, #24]
 8013536:	4413      	add	r3, r2
 8013538:	61bb      	str	r3, [r7, #24]
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	00da      	lsls	r2, r3, #3
 8013540:	69bb      	ldr	r3, [r7, #24]
 8013542:	4413      	add	r3, r2
 8013544:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8013548:	617b      	str	r3, [r7, #20]
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	881b      	ldrh	r3, [r3, #0]
 801354e:	b29b      	uxth	r3, r3
 8013550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013554:	b29a      	uxth	r2, r3
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	801a      	strh	r2, [r3, #0]
 801355a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801355e:	2b00      	cmp	r3, #0
 8013560:	d10a      	bne.n	8013578 <USB_EPStartXfer+0x2be>
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	b29b      	uxth	r3, r3
 8013568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801356c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013570:	b29a      	uxth	r2, r3
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	801a      	strh	r2, [r3, #0]
 8013576:	e05d      	b.n	8013634 <USB_EPStartXfer+0x37a>
 8013578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801357c:	2b3e      	cmp	r3, #62	@ 0x3e
 801357e:	d81c      	bhi.n	80135ba <USB_EPStartXfer+0x300>
 8013580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013584:	085b      	lsrs	r3, r3, #1
 8013586:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801358a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801358e:	f003 0301 	and.w	r3, r3, #1
 8013592:	2b00      	cmp	r3, #0
 8013594:	d004      	beq.n	80135a0 <USB_EPStartXfer+0x2e6>
 8013596:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801359a:	3301      	adds	r3, #1
 801359c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	881b      	ldrh	r3, [r3, #0]
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	029b      	lsls	r3, r3, #10
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	4313      	orrs	r3, r2
 80135b2:	b29a      	uxth	r2, r3
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	801a      	strh	r2, [r3, #0]
 80135b8:	e03c      	b.n	8013634 <USB_EPStartXfer+0x37a>
 80135ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80135be:	095b      	lsrs	r3, r3, #5
 80135c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80135c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80135c8:	f003 031f 	and.w	r3, r3, #31
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d104      	bne.n	80135da <USB_EPStartXfer+0x320>
 80135d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80135d4:	3b01      	subs	r3, #1
 80135d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	881b      	ldrh	r3, [r3, #0]
 80135de:	b29a      	uxth	r2, r3
 80135e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80135e4:	b29b      	uxth	r3, r3
 80135e6:	029b      	lsls	r3, r3, #10
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	4313      	orrs	r3, r2
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80135f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	801a      	strh	r2, [r3, #0]
 80135fc:	e01a      	b.n	8013634 <USB_EPStartXfer+0x37a>
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	785b      	ldrb	r3, [r3, #1]
 8013602:	2b01      	cmp	r3, #1
 8013604:	d116      	bne.n	8013634 <USB_EPStartXfer+0x37a>
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	623b      	str	r3, [r7, #32]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013610:	b29b      	uxth	r3, r3
 8013612:	461a      	mov	r2, r3
 8013614:	6a3b      	ldr	r3, [r7, #32]
 8013616:	4413      	add	r3, r2
 8013618:	623b      	str	r3, [r7, #32]
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	00da      	lsls	r2, r3, #3
 8013620:	6a3b      	ldr	r3, [r7, #32]
 8013622:	4413      	add	r3, r2
 8013624:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8013628:	61fb      	str	r3, [r7, #28]
 801362a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801362e:	b29a      	uxth	r2, r3
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	891b      	ldrh	r3, [r3, #8]
 8013638:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	6959      	ldr	r1, [r3, #20]
 8013640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013644:	b29b      	uxth	r3, r3
 8013646:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f000 fd19 	bl	8014082 <USB_WritePMA>
 8013650:	e2e2      	b.n	8013c18 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	785b      	ldrb	r3, [r3, #1]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d16b      	bne.n	8013732 <USB_EPStartXfer+0x478>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013664:	b29b      	uxth	r3, r3
 8013666:	461a      	mov	r2, r3
 8013668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801366a:	4413      	add	r3, r2
 801366c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	00da      	lsls	r2, r3, #3
 8013674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013676:	4413      	add	r3, r2
 8013678:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801367c:	647b      	str	r3, [r7, #68]	@ 0x44
 801367e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013680:	881b      	ldrh	r3, [r3, #0]
 8013682:	b29b      	uxth	r3, r3
 8013684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013688:	b29a      	uxth	r2, r3
 801368a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801368c:	801a      	strh	r2, [r3, #0]
 801368e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013692:	2b00      	cmp	r3, #0
 8013694:	d10a      	bne.n	80136ac <USB_EPStartXfer+0x3f2>
 8013696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013698:	881b      	ldrh	r3, [r3, #0]
 801369a:	b29b      	uxth	r3, r3
 801369c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80136a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136a8:	801a      	strh	r2, [r3, #0]
 80136aa:	e05d      	b.n	8013768 <USB_EPStartXfer+0x4ae>
 80136ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80136b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80136b2:	d81c      	bhi.n	80136ee <USB_EPStartXfer+0x434>
 80136b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80136b8:	085b      	lsrs	r3, r3, #1
 80136ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80136be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80136c2:	f003 0301 	and.w	r3, r3, #1
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d004      	beq.n	80136d4 <USB_EPStartXfer+0x41a>
 80136ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80136ce:	3301      	adds	r3, #1
 80136d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80136d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136d6:	881b      	ldrh	r3, [r3, #0]
 80136d8:	b29a      	uxth	r2, r3
 80136da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80136de:	b29b      	uxth	r3, r3
 80136e0:	029b      	lsls	r3, r3, #10
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	4313      	orrs	r3, r2
 80136e6:	b29a      	uxth	r2, r3
 80136e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136ea:	801a      	strh	r2, [r3, #0]
 80136ec:	e03c      	b.n	8013768 <USB_EPStartXfer+0x4ae>
 80136ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80136f2:	095b      	lsrs	r3, r3, #5
 80136f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80136f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80136fc:	f003 031f 	and.w	r3, r3, #31
 8013700:	2b00      	cmp	r3, #0
 8013702:	d104      	bne.n	801370e <USB_EPStartXfer+0x454>
 8013704:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013708:	3b01      	subs	r3, #1
 801370a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801370e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013710:	881b      	ldrh	r3, [r3, #0]
 8013712:	b29a      	uxth	r2, r3
 8013714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013718:	b29b      	uxth	r3, r3
 801371a:	029b      	lsls	r3, r3, #10
 801371c:	b29b      	uxth	r3, r3
 801371e:	4313      	orrs	r3, r2
 8013720:	b29b      	uxth	r3, r3
 8013722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801372a:	b29a      	uxth	r2, r3
 801372c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801372e:	801a      	strh	r2, [r3, #0]
 8013730:	e01a      	b.n	8013768 <USB_EPStartXfer+0x4ae>
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	785b      	ldrb	r3, [r3, #1]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d116      	bne.n	8013768 <USB_EPStartXfer+0x4ae>
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	653b      	str	r3, [r7, #80]	@ 0x50
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013744:	b29b      	uxth	r3, r3
 8013746:	461a      	mov	r2, r3
 8013748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801374a:	4413      	add	r3, r2
 801374c:	653b      	str	r3, [r7, #80]	@ 0x50
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	00da      	lsls	r2, r3, #3
 8013754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013756:	4413      	add	r3, r2
 8013758:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801375c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801375e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013762:	b29a      	uxth	r2, r3
 8013764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013766:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	891b      	ldrh	r3, [r3, #8]
 801376c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	6959      	ldr	r1, [r3, #20]
 8013774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013778:	b29b      	uxth	r3, r3
 801377a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801377e:	6878      	ldr	r0, [r7, #4]
 8013780:	f000 fc7f 	bl	8014082 <USB_WritePMA>
            ep->xfer_buff += len;
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	695a      	ldr	r2, [r3, #20]
 8013788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801378c:	441a      	add	r2, r3
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	6a1a      	ldr	r2, [r3, #32]
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	691b      	ldr	r3, [r3, #16]
 801379a:	429a      	cmp	r2, r3
 801379c:	d907      	bls.n	80137ae <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	6a1a      	ldr	r2, [r3, #32]
 80137a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80137a6:	1ad2      	subs	r2, r2, r3
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	621a      	str	r2, [r3, #32]
 80137ac:	e006      	b.n	80137bc <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	6a1b      	ldr	r3, [r3, #32]
 80137b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	2200      	movs	r2, #0
 80137ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	643b      	str	r3, [r7, #64]	@ 0x40
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	785b      	ldrb	r3, [r3, #1]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d16b      	bne.n	80138a0 <USB_EPStartXfer+0x5e6>
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	461a      	mov	r2, r3
 80137d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137d8:	4413      	add	r3, r2
 80137da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	00da      	lsls	r2, r3, #3
 80137e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e4:	4413      	add	r3, r2
 80137e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80137ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80137ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137ee:	881b      	ldrh	r3, [r3, #0]
 80137f0:	b29b      	uxth	r3, r3
 80137f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80137f6:	b29a      	uxth	r2, r3
 80137f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137fa:	801a      	strh	r2, [r3, #0]
 80137fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10a      	bne.n	801381a <USB_EPStartXfer+0x560>
 8013804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013806:	881b      	ldrh	r3, [r3, #0]
 8013808:	b29b      	uxth	r3, r3
 801380a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801380e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013812:	b29a      	uxth	r2, r3
 8013814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013816:	801a      	strh	r2, [r3, #0]
 8013818:	e05b      	b.n	80138d2 <USB_EPStartXfer+0x618>
 801381a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801381e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013820:	d81c      	bhi.n	801385c <USB_EPStartXfer+0x5a2>
 8013822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013826:	085b      	lsrs	r3, r3, #1
 8013828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801382c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013830:	f003 0301 	and.w	r3, r3, #1
 8013834:	2b00      	cmp	r3, #0
 8013836:	d004      	beq.n	8013842 <USB_EPStartXfer+0x588>
 8013838:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801383c:	3301      	adds	r3, #1
 801383e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013844:	881b      	ldrh	r3, [r3, #0]
 8013846:	b29a      	uxth	r2, r3
 8013848:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801384c:	b29b      	uxth	r3, r3
 801384e:	029b      	lsls	r3, r3, #10
 8013850:	b29b      	uxth	r3, r3
 8013852:	4313      	orrs	r3, r2
 8013854:	b29a      	uxth	r2, r3
 8013856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013858:	801a      	strh	r2, [r3, #0]
 801385a:	e03a      	b.n	80138d2 <USB_EPStartXfer+0x618>
 801385c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013860:	095b      	lsrs	r3, r3, #5
 8013862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801386a:	f003 031f 	and.w	r3, r3, #31
 801386e:	2b00      	cmp	r3, #0
 8013870:	d104      	bne.n	801387c <USB_EPStartXfer+0x5c2>
 8013872:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013876:	3b01      	subs	r3, #1
 8013878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801387c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801387e:	881b      	ldrh	r3, [r3, #0]
 8013880:	b29a      	uxth	r2, r3
 8013882:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013886:	b29b      	uxth	r3, r3
 8013888:	029b      	lsls	r3, r3, #10
 801388a:	b29b      	uxth	r3, r3
 801388c:	4313      	orrs	r3, r2
 801388e:	b29b      	uxth	r3, r3
 8013890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013898:	b29a      	uxth	r2, r3
 801389a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801389c:	801a      	strh	r2, [r3, #0]
 801389e:	e018      	b.n	80138d2 <USB_EPStartXfer+0x618>
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	785b      	ldrb	r3, [r3, #1]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d114      	bne.n	80138d2 <USB_EPStartXfer+0x618>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	461a      	mov	r2, r3
 80138b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138b4:	4413      	add	r3, r2
 80138b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80138b8:	683b      	ldr	r3, [r7, #0]
 80138ba:	781b      	ldrb	r3, [r3, #0]
 80138bc:	00da      	lsls	r2, r3, #3
 80138be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138c0:	4413      	add	r3, r2
 80138c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80138c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80138cc:	b29a      	uxth	r2, r3
 80138ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	895b      	ldrh	r3, [r3, #10]
 80138d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	6959      	ldr	r1, [r3, #20]
 80138de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f000 fbca 	bl	8014082 <USB_WritePMA>
 80138ee:	e193      	b.n	8013c18 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	6a1b      	ldr	r3, [r3, #32]
 80138f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	009b      	lsls	r3, r3, #2
 8013900:	4413      	add	r3, r2
 8013902:	881b      	ldrh	r3, [r3, #0]
 8013904:	b29b      	uxth	r3, r3
 8013906:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801390a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801390e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	009b      	lsls	r3, r3, #2
 801391a:	441a      	add	r2, r3
 801391c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8013920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801392c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013930:	b29b      	uxth	r3, r3
 8013932:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801393e:	b29b      	uxth	r3, r3
 8013940:	461a      	mov	r2, r3
 8013942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013944:	4413      	add	r3, r2
 8013946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	00da      	lsls	r2, r3, #3
 801394e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013950:	4413      	add	r3, r2
 8013952:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8013956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801395c:	b29a      	uxth	r2, r3
 801395e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013960:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	891b      	ldrh	r3, [r3, #8]
 8013966:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	6959      	ldr	r1, [r3, #20]
 801396e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013972:	b29b      	uxth	r3, r3
 8013974:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f000 fb82 	bl	8014082 <USB_WritePMA>
 801397e:	e14b      	b.n	8013c18 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	6a1a      	ldr	r2, [r3, #32]
 8013984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013988:	1ad2      	subs	r2, r2, r3
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801398e:	687a      	ldr	r2, [r7, #4]
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	009b      	lsls	r3, r3, #2
 8013996:	4413      	add	r3, r2
 8013998:	881b      	ldrh	r3, [r3, #0]
 801399a:	b29b      	uxth	r3, r3
 801399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	f000 809a 	beq.w	8013ada <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	785b      	ldrb	r3, [r3, #1]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d16b      	bne.n	8013a8a <USB_EPStartXfer+0x7d0>
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80139bc:	b29b      	uxth	r3, r3
 80139be:	461a      	mov	r2, r3
 80139c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80139c2:	4413      	add	r3, r2
 80139c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	00da      	lsls	r2, r3, #3
 80139cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80139ce:	4413      	add	r3, r2
 80139d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80139d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80139d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80139d8:	881b      	ldrh	r3, [r3, #0]
 80139da:	b29b      	uxth	r3, r3
 80139dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80139e0:	b29a      	uxth	r2, r3
 80139e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80139e4:	801a      	strh	r2, [r3, #0]
 80139e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d10a      	bne.n	8013a04 <USB_EPStartXfer+0x74a>
 80139ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80139f0:	881b      	ldrh	r3, [r3, #0]
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80139f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80139fc:	b29a      	uxth	r2, r3
 80139fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a00:	801a      	strh	r2, [r3, #0]
 8013a02:	e05b      	b.n	8013abc <USB_EPStartXfer+0x802>
 8013a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013a08:	2b3e      	cmp	r3, #62	@ 0x3e
 8013a0a:	d81c      	bhi.n	8013a46 <USB_EPStartXfer+0x78c>
 8013a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013a10:	085b      	lsrs	r3, r3, #1
 8013a12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013a1a:	f003 0301 	and.w	r3, r3, #1
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d004      	beq.n	8013a2c <USB_EPStartXfer+0x772>
 8013a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013a26:	3301      	adds	r3, #1
 8013a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a2e:	881b      	ldrh	r3, [r3, #0]
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013a36:	b29b      	uxth	r3, r3
 8013a38:	029b      	lsls	r3, r3, #10
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	b29a      	uxth	r2, r3
 8013a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a42:	801a      	strh	r2, [r3, #0]
 8013a44:	e03a      	b.n	8013abc <USB_EPStartXfer+0x802>
 8013a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013a4a:	095b      	lsrs	r3, r3, #5
 8013a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013a50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013a54:	f003 031f 	and.w	r3, r3, #31
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d104      	bne.n	8013a66 <USB_EPStartXfer+0x7ac>
 8013a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013a60:	3b01      	subs	r3, #1
 8013a62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013a66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a68:	881b      	ldrh	r3, [r3, #0]
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	029b      	lsls	r3, r3, #10
 8013a74:	b29b      	uxth	r3, r3
 8013a76:	4313      	orrs	r3, r2
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013a82:	b29a      	uxth	r2, r3
 8013a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a86:	801a      	strh	r2, [r3, #0]
 8013a88:	e018      	b.n	8013abc <USB_EPStartXfer+0x802>
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	785b      	ldrb	r3, [r3, #1]
 8013a8e:	2b01      	cmp	r3, #1
 8013a90:	d114      	bne.n	8013abc <USB_EPStartXfer+0x802>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013a9e:	4413      	add	r3, r2
 8013aa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	00da      	lsls	r2, r3, #3
 8013aa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013aaa:	4413      	add	r3, r2
 8013aac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8013ab0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013ab6:	b29a      	uxth	r2, r3
 8013ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013aba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	895b      	ldrh	r3, [r3, #10]
 8013ac0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	6959      	ldr	r1, [r3, #20]
 8013ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013acc:	b29b      	uxth	r3, r3
 8013ace:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f000 fad5 	bl	8014082 <USB_WritePMA>
 8013ad8:	e09e      	b.n	8013c18 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	785b      	ldrb	r3, [r3, #1]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d16b      	bne.n	8013bba <USB_EPStartXfer+0x900>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	461a      	mov	r2, r3
 8013af0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013af2:	4413      	add	r3, r2
 8013af4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	00da      	lsls	r2, r3, #3
 8013afc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013afe:	4413      	add	r3, r2
 8013b00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8013b04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013b06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b08:	881b      	ldrh	r3, [r3, #0]
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013b10:	b29a      	uxth	r2, r3
 8013b12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b14:	801a      	strh	r2, [r3, #0]
 8013b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d10a      	bne.n	8013b34 <USB_EPStartXfer+0x87a>
 8013b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b20:	881b      	ldrh	r3, [r3, #0]
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013b2c:	b29a      	uxth	r2, r3
 8013b2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b30:	801a      	strh	r2, [r3, #0]
 8013b32:	e063      	b.n	8013bfc <USB_EPStartXfer+0x942>
 8013b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b38:	2b3e      	cmp	r3, #62	@ 0x3e
 8013b3a:	d81c      	bhi.n	8013b76 <USB_EPStartXfer+0x8bc>
 8013b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b40:	085b      	lsrs	r3, r3, #1
 8013b42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b4a:	f003 0301 	and.w	r3, r3, #1
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d004      	beq.n	8013b5c <USB_EPStartXfer+0x8a2>
 8013b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013b56:	3301      	adds	r3, #1
 8013b58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b5e:	881b      	ldrh	r3, [r3, #0]
 8013b60:	b29a      	uxth	r2, r3
 8013b62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	029b      	lsls	r3, r3, #10
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	4313      	orrs	r3, r2
 8013b6e:	b29a      	uxth	r2, r3
 8013b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b72:	801a      	strh	r2, [r3, #0]
 8013b74:	e042      	b.n	8013bfc <USB_EPStartXfer+0x942>
 8013b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b7a:	095b      	lsrs	r3, r3, #5
 8013b7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013b84:	f003 031f 	and.w	r3, r3, #31
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d104      	bne.n	8013b96 <USB_EPStartXfer+0x8dc>
 8013b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013b90:	3b01      	subs	r3, #1
 8013b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013b96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b98:	881b      	ldrh	r3, [r3, #0]
 8013b9a:	b29a      	uxth	r2, r3
 8013b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	029b      	lsls	r3, r3, #10
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	4313      	orrs	r3, r2
 8013ba8:	b29b      	uxth	r3, r3
 8013baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013bb6:	801a      	strh	r2, [r3, #0]
 8013bb8:	e020      	b.n	8013bfc <USB_EPStartXfer+0x942>
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	785b      	ldrb	r3, [r3, #1]
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d11c      	bne.n	8013bfc <USB_EPStartXfer+0x942>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013bce:	b29b      	uxth	r3, r3
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013bd6:	4413      	add	r3, r2
 8013bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	00da      	lsls	r2, r3, #3
 8013be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013be6:	4413      	add	r3, r2
 8013be8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8013bec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013bfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	891b      	ldrh	r3, [r3, #8]
 8013c00:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	6959      	ldr	r1, [r3, #20]
 8013c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f000 fa35 	bl	8014082 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8013c18:	687a      	ldr	r2, [r7, #4]
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	009b      	lsls	r3, r3, #2
 8013c20:	4413      	add	r3, r2
 8013c22:	881b      	ldrh	r3, [r3, #0]
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013c2e:	817b      	strh	r3, [r7, #10]
 8013c30:	897b      	ldrh	r3, [r7, #10]
 8013c32:	f083 0310 	eor.w	r3, r3, #16
 8013c36:	817b      	strh	r3, [r7, #10]
 8013c38:	897b      	ldrh	r3, [r7, #10]
 8013c3a:	f083 0320 	eor.w	r3, r3, #32
 8013c3e:	817b      	strh	r3, [r7, #10]
 8013c40:	687a      	ldr	r2, [r7, #4]
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	009b      	lsls	r3, r3, #2
 8013c48:	441a      	add	r2, r3
 8013c4a:	897b      	ldrh	r3, [r7, #10]
 8013c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	8013      	strh	r3, [r2, #0]
 8013c60:	e0d5      	b.n	8013e0e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	7b1b      	ldrb	r3, [r3, #12]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d156      	bne.n	8013d18 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	699b      	ldr	r3, [r3, #24]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d122      	bne.n	8013cb8 <USB_EPStartXfer+0x9fe>
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	78db      	ldrb	r3, [r3, #3]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d11e      	bne.n	8013cb8 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8013c7a:	687a      	ldr	r2, [r7, #4]
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4413      	add	r3, r2
 8013c84:	881b      	ldrh	r3, [r3, #0]
 8013c86:	b29b      	uxth	r3, r3
 8013c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013c90:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8013c94:	687a      	ldr	r2, [r7, #4]
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	781b      	ldrb	r3, [r3, #0]
 8013c9a:	009b      	lsls	r3, r3, #2
 8013c9c:	441a      	add	r2, r3
 8013c9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8013ca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013ca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013caa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8013cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	8013      	strh	r3, [r2, #0]
 8013cb6:	e01d      	b.n	8013cf4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8013cb8:	687a      	ldr	r2, [r7, #4]
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	009b      	lsls	r3, r3, #2
 8013cc0:	4413      	add	r3, r2
 8013cc2:	881b      	ldrh	r3, [r3, #0]
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8013cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013cce:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	009b      	lsls	r3, r3, #2
 8013cda:	441a      	add	r2, r3
 8013cdc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8013ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	699a      	ldr	r2, [r3, #24]
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	691b      	ldr	r3, [r3, #16]
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d907      	bls.n	8013d10 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	699a      	ldr	r2, [r3, #24]
 8013d04:	683b      	ldr	r3, [r7, #0]
 8013d06:	691b      	ldr	r3, [r3, #16]
 8013d08:	1ad2      	subs	r2, r2, r3
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	619a      	str	r2, [r3, #24]
 8013d0e:	e054      	b.n	8013dba <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	2200      	movs	r2, #0
 8013d14:	619a      	str	r2, [r3, #24]
 8013d16:	e050      	b.n	8013dba <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	78db      	ldrb	r3, [r3, #3]
 8013d1c:	2b02      	cmp	r3, #2
 8013d1e:	d142      	bne.n	8013da6 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	69db      	ldr	r3, [r3, #28]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d048      	beq.n	8013dba <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	4413      	add	r3, r2
 8013d32:	881b      	ldrh	r3, [r3, #0]
 8013d34:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013d38:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8013d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d005      	beq.n	8013d50 <USB_EPStartXfer+0xa96>
 8013d44:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8013d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d10b      	bne.n	8013d68 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013d50:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8013d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d12e      	bne.n	8013dba <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013d5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8013d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d128      	bne.n	8013dba <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	009b      	lsls	r3, r3, #2
 8013d70:	4413      	add	r3, r2
 8013d72:	881b      	ldrh	r3, [r3, #0]
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013d7e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	781b      	ldrb	r3, [r3, #0]
 8013d88:	009b      	lsls	r3, r3, #2
 8013d8a:	441a      	add	r2, r3
 8013d8c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8013d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013d9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	8013      	strh	r3, [r2, #0]
 8013da4:	e009      	b.n	8013dba <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	78db      	ldrb	r3, [r3, #3]
 8013daa:	2b01      	cmp	r3, #1
 8013dac:	d103      	bne.n	8013db6 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	2200      	movs	r2, #0
 8013db2:	619a      	str	r2, [r3, #24]
 8013db4:	e001      	b.n	8013dba <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8013db6:	2301      	movs	r3, #1
 8013db8:	e02a      	b.n	8013e10 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013dba:	687a      	ldr	r2, [r7, #4]
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	009b      	lsls	r3, r3, #2
 8013dc2:	4413      	add	r3, r2
 8013dc4:	881b      	ldrh	r3, [r3, #0]
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013dd0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8013dd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8013dd8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8013ddc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8013de0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8013de4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8013de8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	009b      	lsls	r3, r3, #2
 8013df4:	441a      	add	r2, r3
 8013df6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8013dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	37b0      	adds	r7, #176	@ 0xb0
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b085      	sub	sp, #20
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
 8013e20:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	785b      	ldrb	r3, [r3, #1]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d020      	beq.n	8013e6c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	009b      	lsls	r3, r3, #2
 8013e32:	4413      	add	r3, r2
 8013e34:	881b      	ldrh	r3, [r3, #0]
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e40:	81bb      	strh	r3, [r7, #12]
 8013e42:	89bb      	ldrh	r3, [r7, #12]
 8013e44:	f083 0310 	eor.w	r3, r3, #16
 8013e48:	81bb      	strh	r3, [r7, #12]
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	009b      	lsls	r3, r3, #2
 8013e52:	441a      	add	r2, r3
 8013e54:	89bb      	ldrh	r3, [r7, #12]
 8013e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	8013      	strh	r3, [r2, #0]
 8013e6a:	e01f      	b.n	8013eac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013e6c:	687a      	ldr	r2, [r7, #4]
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	781b      	ldrb	r3, [r3, #0]
 8013e72:	009b      	lsls	r3, r3, #2
 8013e74:	4413      	add	r3, r2
 8013e76:	881b      	ldrh	r3, [r3, #0]
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013e82:	81fb      	strh	r3, [r7, #14]
 8013e84:	89fb      	ldrh	r3, [r7, #14]
 8013e86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8013e8a:	81fb      	strh	r3, [r7, #14]
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	441a      	add	r2, r3
 8013e96:	89fb      	ldrh	r3, [r7, #14]
 8013e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8013eac:	2300      	movs	r3, #0
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3714      	adds	r7, #20
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb8:	4770      	bx	lr

08013eba <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013eba:	b480      	push	{r7}
 8013ebc:	b087      	sub	sp, #28
 8013ebe:	af00      	add	r7, sp, #0
 8013ec0:	6078      	str	r0, [r7, #4]
 8013ec2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	785b      	ldrb	r3, [r3, #1]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d04c      	beq.n	8013f66 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	4413      	add	r3, r2
 8013ed6:	881b      	ldrh	r3, [r3, #0]
 8013ed8:	823b      	strh	r3, [r7, #16]
 8013eda:	8a3b      	ldrh	r3, [r7, #16]
 8013edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d01b      	beq.n	8013f1c <USB_EPClearStall+0x62>
 8013ee4:	687a      	ldr	r2, [r7, #4]
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	781b      	ldrb	r3, [r3, #0]
 8013eea:	009b      	lsls	r3, r3, #2
 8013eec:	4413      	add	r3, r2
 8013eee:	881b      	ldrh	r3, [r3, #0]
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013efa:	81fb      	strh	r3, [r7, #14]
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	009b      	lsls	r3, r3, #2
 8013f04:	441a      	add	r2, r3
 8013f06:	89fb      	ldrh	r3, [r7, #14]
 8013f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013f14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	78db      	ldrb	r3, [r3, #3]
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d06c      	beq.n	8013ffe <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	4413      	add	r3, r2
 8013f2e:	881b      	ldrh	r3, [r3, #0]
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013f3a:	81bb      	strh	r3, [r7, #12]
 8013f3c:	89bb      	ldrh	r3, [r7, #12]
 8013f3e:	f083 0320 	eor.w	r3, r3, #32
 8013f42:	81bb      	strh	r3, [r7, #12]
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	441a      	add	r2, r3
 8013f4e:	89bb      	ldrh	r3, [r7, #12]
 8013f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	8013      	strh	r3, [r2, #0]
 8013f64:	e04b      	b.n	8013ffe <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	4413      	add	r3, r2
 8013f70:	881b      	ldrh	r3, [r3, #0]
 8013f72:	82fb      	strh	r3, [r7, #22]
 8013f74:	8afb      	ldrh	r3, [r7, #22]
 8013f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d01b      	beq.n	8013fb6 <USB_EPClearStall+0xfc>
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	009b      	lsls	r3, r3, #2
 8013f86:	4413      	add	r3, r2
 8013f88:	881b      	ldrh	r3, [r3, #0]
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013f94:	82bb      	strh	r3, [r7, #20]
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	009b      	lsls	r3, r3, #2
 8013f9e:	441a      	add	r2, r3
 8013fa0:	8abb      	ldrh	r3, [r7, #20]
 8013fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013faa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8013fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013fb6:	687a      	ldr	r2, [r7, #4]
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	781b      	ldrb	r3, [r3, #0]
 8013fbc:	009b      	lsls	r3, r3, #2
 8013fbe:	4413      	add	r3, r2
 8013fc0:	881b      	ldrh	r3, [r3, #0]
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013fcc:	827b      	strh	r3, [r7, #18]
 8013fce:	8a7b      	ldrh	r3, [r7, #18]
 8013fd0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8013fd4:	827b      	strh	r3, [r7, #18]
 8013fd6:	8a7b      	ldrh	r3, [r7, #18]
 8013fd8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8013fdc:	827b      	strh	r3, [r7, #18]
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	781b      	ldrb	r3, [r3, #0]
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	441a      	add	r2, r3
 8013fe8:	8a7b      	ldrh	r3, [r7, #18]
 8013fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ffa:	b29b      	uxth	r3, r3
 8013ffc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8013ffe:	2300      	movs	r3, #0
}
 8014000:	4618      	mov	r0, r3
 8014002:	371c      	adds	r7, #28
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr

0801400c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801400c:	b480      	push	{r7}
 801400e:	b083      	sub	sp, #12
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	460b      	mov	r3, r1
 8014016:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8014018:	78fb      	ldrb	r3, [r7, #3]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d103      	bne.n	8014026 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2280      	movs	r2, #128	@ 0x80
 8014022:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8014026:	2300      	movs	r3, #0
}
 8014028:	4618      	mov	r0, r3
 801402a:	370c      	adds	r7, #12
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr

08014034 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8014034:	b480      	push	{r7}
 8014036:	b083      	sub	sp, #12
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8014042:	b29b      	uxth	r3, r3
 8014044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801404c:	b29a      	uxth	r2, r3
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8014054:	2300      	movs	r3, #0
}
 8014056:	4618      	mov	r0, r3
 8014058:	370c      	adds	r7, #12
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr

08014062 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8014062:	b480      	push	{r7}
 8014064:	b085      	sub	sp, #20
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8014070:	b29b      	uxth	r3, r3
 8014072:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8014074:	68fb      	ldr	r3, [r7, #12]
}
 8014076:	4618      	mov	r0, r3
 8014078:	3714      	adds	r7, #20
 801407a:	46bd      	mov	sp, r7
 801407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014080:	4770      	bx	lr

08014082 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014082:	b480      	push	{r7}
 8014084:	b08b      	sub	sp, #44	@ 0x2c
 8014086:	af00      	add	r7, sp, #0
 8014088:	60f8      	str	r0, [r7, #12]
 801408a:	60b9      	str	r1, [r7, #8]
 801408c:	4611      	mov	r1, r2
 801408e:	461a      	mov	r2, r3
 8014090:	460b      	mov	r3, r1
 8014092:	80fb      	strh	r3, [r7, #6]
 8014094:	4613      	mov	r3, r2
 8014096:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8014098:	88bb      	ldrh	r3, [r7, #4]
 801409a:	3301      	adds	r3, #1
 801409c:	085b      	lsrs	r3, r3, #1
 801409e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80140a8:	88fa      	ldrh	r2, [r7, #6]
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	4413      	add	r3, r2
 80140ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80140b2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80140b8:	e01b      	b.n	80140f2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80140ba:	69fb      	ldr	r3, [r7, #28]
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80140c0:	69fb      	ldr	r3, [r7, #28]
 80140c2:	3301      	adds	r3, #1
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	021b      	lsls	r3, r3, #8
 80140c8:	b21a      	sxth	r2, r3
 80140ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80140ce:	4313      	orrs	r3, r2
 80140d0:	b21b      	sxth	r3, r3
 80140d2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80140d4:	6a3b      	ldr	r3, [r7, #32]
 80140d6:	8a7a      	ldrh	r2, [r7, #18]
 80140d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80140da:	6a3b      	ldr	r3, [r7, #32]
 80140dc:	3302      	adds	r3, #2
 80140de:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	3301      	adds	r3, #1
 80140e4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80140e6:	69fb      	ldr	r3, [r7, #28]
 80140e8:	3301      	adds	r3, #1
 80140ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80140ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140ee:	3b01      	subs	r3, #1
 80140f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80140f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d1e0      	bne.n	80140ba <USB_WritePMA+0x38>
  }
}
 80140f8:	bf00      	nop
 80140fa:	bf00      	nop
 80140fc:	372c      	adds	r7, #44	@ 0x2c
 80140fe:	46bd      	mov	sp, r7
 8014100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014104:	4770      	bx	lr

08014106 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014106:	b480      	push	{r7}
 8014108:	b08b      	sub	sp, #44	@ 0x2c
 801410a:	af00      	add	r7, sp, #0
 801410c:	60f8      	str	r0, [r7, #12]
 801410e:	60b9      	str	r1, [r7, #8]
 8014110:	4611      	mov	r1, r2
 8014112:	461a      	mov	r2, r3
 8014114:	460b      	mov	r3, r1
 8014116:	80fb      	strh	r3, [r7, #6]
 8014118:	4613      	mov	r3, r2
 801411a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801411c:	88bb      	ldrh	r3, [r7, #4]
 801411e:	085b      	lsrs	r3, r3, #1
 8014120:	b29b      	uxth	r3, r3
 8014122:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801412c:	88fa      	ldrh	r2, [r7, #6]
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	4413      	add	r3, r2
 8014132:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8014136:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	627b      	str	r3, [r7, #36]	@ 0x24
 801413c:	e018      	b.n	8014170 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801413e:	6a3b      	ldr	r3, [r7, #32]
 8014140:	881b      	ldrh	r3, [r3, #0]
 8014142:	b29b      	uxth	r3, r3
 8014144:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8014146:	6a3b      	ldr	r3, [r7, #32]
 8014148:	3302      	adds	r3, #2
 801414a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	b2da      	uxtb	r2, r3
 8014150:	69fb      	ldr	r3, [r7, #28]
 8014152:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	3301      	adds	r3, #1
 8014158:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	0a1b      	lsrs	r3, r3, #8
 801415e:	b2da      	uxtb	r2, r3
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014164:	69fb      	ldr	r3, [r7, #28]
 8014166:	3301      	adds	r3, #1
 8014168:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801416c:	3b01      	subs	r3, #1
 801416e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014172:	2b00      	cmp	r3, #0
 8014174:	d1e3      	bne.n	801413e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8014176:	88bb      	ldrh	r3, [r7, #4]
 8014178:	f003 0301 	and.w	r3, r3, #1
 801417c:	b29b      	uxth	r3, r3
 801417e:	2b00      	cmp	r3, #0
 8014180:	d007      	beq.n	8014192 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8014182:	6a3b      	ldr	r3, [r7, #32]
 8014184:	881b      	ldrh	r3, [r3, #0]
 8014186:	b29b      	uxth	r3, r3
 8014188:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801418a:	693b      	ldr	r3, [r7, #16]
 801418c:	b2da      	uxtb	r2, r3
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	701a      	strb	r2, [r3, #0]
  }
}
 8014192:	bf00      	nop
 8014194:	372c      	adds	r7, #44	@ 0x2c
 8014196:	46bd      	mov	sp, r7
 8014198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419c:	4770      	bx	lr
	...

080141a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b084      	sub	sp, #16
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	460b      	mov	r3, r1
 80141aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80141ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80141b0:	f006 f980 	bl	801a4b4 <USBD_static_malloc>
 80141b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d109      	bne.n	80141d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	32b0      	adds	r2, #176	@ 0xb0
 80141c6:	2100      	movs	r1, #0
 80141c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80141cc:	2302      	movs	r3, #2
 80141ce:	e0d4      	b.n	801437a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80141d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80141d4:	2100      	movs	r1, #0
 80141d6:	68f8      	ldr	r0, [r7, #12]
 80141d8:	f008 fb8b 	bl	801c8f2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	32b0      	adds	r2, #176	@ 0xb0
 80141e6:	68f9      	ldr	r1, [r7, #12]
 80141e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	32b0      	adds	r2, #176	@ 0xb0
 80141f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	7c1b      	ldrb	r3, [r3, #16]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d138      	bne.n	801427a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014208:	4b5e      	ldr	r3, [pc, #376]	@ (8014384 <USBD_CDC_Init+0x1e4>)
 801420a:	7819      	ldrb	r1, [r3, #0]
 801420c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014210:	2202      	movs	r2, #2
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f005 fff5 	bl	801a202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014218:	4b5a      	ldr	r3, [pc, #360]	@ (8014384 <USBD_CDC_Init+0x1e4>)
 801421a:	781b      	ldrb	r3, [r3, #0]
 801421c:	f003 020f 	and.w	r2, r3, #15
 8014220:	6879      	ldr	r1, [r7, #4]
 8014222:	4613      	mov	r3, r2
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	4413      	add	r3, r2
 8014228:	009b      	lsls	r3, r3, #2
 801422a:	440b      	add	r3, r1
 801422c:	3324      	adds	r3, #36	@ 0x24
 801422e:	2201      	movs	r2, #1
 8014230:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014232:	4b55      	ldr	r3, [pc, #340]	@ (8014388 <USBD_CDC_Init+0x1e8>)
 8014234:	7819      	ldrb	r1, [r3, #0]
 8014236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801423a:	2202      	movs	r2, #2
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f005 ffe0 	bl	801a202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014242:	4b51      	ldr	r3, [pc, #324]	@ (8014388 <USBD_CDC_Init+0x1e8>)
 8014244:	781b      	ldrb	r3, [r3, #0]
 8014246:	f003 020f 	and.w	r2, r3, #15
 801424a:	6879      	ldr	r1, [r7, #4]
 801424c:	4613      	mov	r3, r2
 801424e:	009b      	lsls	r3, r3, #2
 8014250:	4413      	add	r3, r2
 8014252:	009b      	lsls	r3, r3, #2
 8014254:	440b      	add	r3, r1
 8014256:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801425a:	2201      	movs	r2, #1
 801425c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801425e:	4b4b      	ldr	r3, [pc, #300]	@ (801438c <USBD_CDC_Init+0x1ec>)
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	f003 020f 	and.w	r2, r3, #15
 8014266:	6879      	ldr	r1, [r7, #4]
 8014268:	4613      	mov	r3, r2
 801426a:	009b      	lsls	r3, r3, #2
 801426c:	4413      	add	r3, r2
 801426e:	009b      	lsls	r3, r3, #2
 8014270:	440b      	add	r3, r1
 8014272:	3326      	adds	r3, #38	@ 0x26
 8014274:	2210      	movs	r2, #16
 8014276:	801a      	strh	r2, [r3, #0]
 8014278:	e035      	b.n	80142e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801427a:	4b42      	ldr	r3, [pc, #264]	@ (8014384 <USBD_CDC_Init+0x1e4>)
 801427c:	7819      	ldrb	r1, [r3, #0]
 801427e:	2340      	movs	r3, #64	@ 0x40
 8014280:	2202      	movs	r2, #2
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f005 ffbd 	bl	801a202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014288:	4b3e      	ldr	r3, [pc, #248]	@ (8014384 <USBD_CDC_Init+0x1e4>)
 801428a:	781b      	ldrb	r3, [r3, #0]
 801428c:	f003 020f 	and.w	r2, r3, #15
 8014290:	6879      	ldr	r1, [r7, #4]
 8014292:	4613      	mov	r3, r2
 8014294:	009b      	lsls	r3, r3, #2
 8014296:	4413      	add	r3, r2
 8014298:	009b      	lsls	r3, r3, #2
 801429a:	440b      	add	r3, r1
 801429c:	3324      	adds	r3, #36	@ 0x24
 801429e:	2201      	movs	r2, #1
 80142a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80142a2:	4b39      	ldr	r3, [pc, #228]	@ (8014388 <USBD_CDC_Init+0x1e8>)
 80142a4:	7819      	ldrb	r1, [r3, #0]
 80142a6:	2340      	movs	r3, #64	@ 0x40
 80142a8:	2202      	movs	r2, #2
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	f005 ffa9 	bl	801a202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80142b0:	4b35      	ldr	r3, [pc, #212]	@ (8014388 <USBD_CDC_Init+0x1e8>)
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	f003 020f 	and.w	r2, r3, #15
 80142b8:	6879      	ldr	r1, [r7, #4]
 80142ba:	4613      	mov	r3, r2
 80142bc:	009b      	lsls	r3, r3, #2
 80142be:	4413      	add	r3, r2
 80142c0:	009b      	lsls	r3, r3, #2
 80142c2:	440b      	add	r3, r1
 80142c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80142c8:	2201      	movs	r2, #1
 80142ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80142cc:	4b2f      	ldr	r3, [pc, #188]	@ (801438c <USBD_CDC_Init+0x1ec>)
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	f003 020f 	and.w	r2, r3, #15
 80142d4:	6879      	ldr	r1, [r7, #4]
 80142d6:	4613      	mov	r3, r2
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	4413      	add	r3, r2
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	440b      	add	r3, r1
 80142e0:	3326      	adds	r3, #38	@ 0x26
 80142e2:	2210      	movs	r2, #16
 80142e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80142e6:	4b29      	ldr	r3, [pc, #164]	@ (801438c <USBD_CDC_Init+0x1ec>)
 80142e8:	7819      	ldrb	r1, [r3, #0]
 80142ea:	2308      	movs	r3, #8
 80142ec:	2203      	movs	r2, #3
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f005 ff87 	bl	801a202 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80142f4:	4b25      	ldr	r3, [pc, #148]	@ (801438c <USBD_CDC_Init+0x1ec>)
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	f003 020f 	and.w	r2, r3, #15
 80142fc:	6879      	ldr	r1, [r7, #4]
 80142fe:	4613      	mov	r3, r2
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	4413      	add	r3, r2
 8014304:	009b      	lsls	r3, r3, #2
 8014306:	440b      	add	r3, r1
 8014308:	3324      	adds	r3, #36	@ 0x24
 801430a:	2201      	movs	r2, #1
 801430c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	2200      	movs	r2, #0
 8014312:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	33b0      	adds	r3, #176	@ 0xb0
 8014320:	009b      	lsls	r3, r3, #2
 8014322:	4413      	add	r3, r2
 8014324:	685b      	ldr	r3, [r3, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	2200      	movs	r2, #0
 801432e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	2200      	movs	r2, #0
 8014336:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8014340:	2b00      	cmp	r3, #0
 8014342:	d101      	bne.n	8014348 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014344:	2302      	movs	r3, #2
 8014346:	e018      	b.n	801437a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	7c1b      	ldrb	r3, [r3, #16]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d10a      	bne.n	8014366 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014350:	4b0d      	ldr	r3, [pc, #52]	@ (8014388 <USBD_CDC_Init+0x1e8>)
 8014352:	7819      	ldrb	r1, [r3, #0]
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801435a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f006 f83e 	bl	801a3e0 <USBD_LL_PrepareReceive>
 8014364:	e008      	b.n	8014378 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014366:	4b08      	ldr	r3, [pc, #32]	@ (8014388 <USBD_CDC_Init+0x1e8>)
 8014368:	7819      	ldrb	r1, [r3, #0]
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014370:	2340      	movs	r3, #64	@ 0x40
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f006 f834 	bl	801a3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014378:	2300      	movs	r3, #0
}
 801437a:	4618      	mov	r0, r3
 801437c:	3710      	adds	r7, #16
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
 8014382:	bf00      	nop
 8014384:	200000bf 	.word	0x200000bf
 8014388:	200000c0 	.word	0x200000c0
 801438c:	200000c1 	.word	0x200000c1

08014390 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	460b      	mov	r3, r1
 801439a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801439c:	4b3a      	ldr	r3, [pc, #232]	@ (8014488 <USBD_CDC_DeInit+0xf8>)
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	4619      	mov	r1, r3
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f005 ff53 	bl	801a24e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80143a8:	4b37      	ldr	r3, [pc, #220]	@ (8014488 <USBD_CDC_DeInit+0xf8>)
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	f003 020f 	and.w	r2, r3, #15
 80143b0:	6879      	ldr	r1, [r7, #4]
 80143b2:	4613      	mov	r3, r2
 80143b4:	009b      	lsls	r3, r3, #2
 80143b6:	4413      	add	r3, r2
 80143b8:	009b      	lsls	r3, r3, #2
 80143ba:	440b      	add	r3, r1
 80143bc:	3324      	adds	r3, #36	@ 0x24
 80143be:	2200      	movs	r2, #0
 80143c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80143c2:	4b32      	ldr	r3, [pc, #200]	@ (801448c <USBD_CDC_DeInit+0xfc>)
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	4619      	mov	r1, r3
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f005 ff40 	bl	801a24e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80143ce:	4b2f      	ldr	r3, [pc, #188]	@ (801448c <USBD_CDC_DeInit+0xfc>)
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	f003 020f 	and.w	r2, r3, #15
 80143d6:	6879      	ldr	r1, [r7, #4]
 80143d8:	4613      	mov	r3, r2
 80143da:	009b      	lsls	r3, r3, #2
 80143dc:	4413      	add	r3, r2
 80143de:	009b      	lsls	r3, r3, #2
 80143e0:	440b      	add	r3, r1
 80143e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80143e6:	2200      	movs	r2, #0
 80143e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80143ea:	4b29      	ldr	r3, [pc, #164]	@ (8014490 <USBD_CDC_DeInit+0x100>)
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	4619      	mov	r1, r3
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f005 ff2c 	bl	801a24e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80143f6:	4b26      	ldr	r3, [pc, #152]	@ (8014490 <USBD_CDC_DeInit+0x100>)
 80143f8:	781b      	ldrb	r3, [r3, #0]
 80143fa:	f003 020f 	and.w	r2, r3, #15
 80143fe:	6879      	ldr	r1, [r7, #4]
 8014400:	4613      	mov	r3, r2
 8014402:	009b      	lsls	r3, r3, #2
 8014404:	4413      	add	r3, r2
 8014406:	009b      	lsls	r3, r3, #2
 8014408:	440b      	add	r3, r1
 801440a:	3324      	adds	r3, #36	@ 0x24
 801440c:	2200      	movs	r2, #0
 801440e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014410:	4b1f      	ldr	r3, [pc, #124]	@ (8014490 <USBD_CDC_DeInit+0x100>)
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	f003 020f 	and.w	r2, r3, #15
 8014418:	6879      	ldr	r1, [r7, #4]
 801441a:	4613      	mov	r3, r2
 801441c:	009b      	lsls	r3, r3, #2
 801441e:	4413      	add	r3, r2
 8014420:	009b      	lsls	r3, r3, #2
 8014422:	440b      	add	r3, r1
 8014424:	3326      	adds	r3, #38	@ 0x26
 8014426:	2200      	movs	r2, #0
 8014428:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	32b0      	adds	r2, #176	@ 0xb0
 8014434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d01f      	beq.n	801447c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	33b0      	adds	r3, #176	@ 0xb0
 8014446:	009b      	lsls	r3, r3, #2
 8014448:	4413      	add	r3, r2
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	32b0      	adds	r2, #176	@ 0xb0
 801445a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801445e:	4618      	mov	r0, r3
 8014460:	f006 f836 	bl	801a4d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	32b0      	adds	r2, #176	@ 0xb0
 801446e:	2100      	movs	r1, #0
 8014470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2200      	movs	r2, #0
 8014478:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801447c:	2300      	movs	r3, #0
}
 801447e:	4618      	mov	r0, r3
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	200000bf 	.word	0x200000bf
 801448c:	200000c0 	.word	0x200000c0
 8014490:	200000c1 	.word	0x200000c1

08014494 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b086      	sub	sp, #24
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	32b0      	adds	r2, #176	@ 0xb0
 80144a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80144ae:	2300      	movs	r3, #0
 80144b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80144b2:	2300      	movs	r3, #0
 80144b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80144b6:	2300      	movs	r3, #0
 80144b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d101      	bne.n	80144c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80144c0:	2303      	movs	r3, #3
 80144c2:	e0bf      	b.n	8014644 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d050      	beq.n	8014572 <USBD_CDC_Setup+0xde>
 80144d0:	2b20      	cmp	r3, #32
 80144d2:	f040 80af 	bne.w	8014634 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	88db      	ldrh	r3, [r3, #6]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d03a      	beq.n	8014554 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	b25b      	sxtb	r3, r3
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	da1b      	bge.n	8014520 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	33b0      	adds	r3, #176	@ 0xb0
 80144f2:	009b      	lsls	r3, r3, #2
 80144f4:	4413      	add	r3, r2
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	689b      	ldr	r3, [r3, #8]
 80144fa:	683a      	ldr	r2, [r7, #0]
 80144fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80144fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014500:	683a      	ldr	r2, [r7, #0]
 8014502:	88d2      	ldrh	r2, [r2, #6]
 8014504:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	88db      	ldrh	r3, [r3, #6]
 801450a:	2b07      	cmp	r3, #7
 801450c:	bf28      	it	cs
 801450e:	2307      	movcs	r3, #7
 8014510:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	89fa      	ldrh	r2, [r7, #14]
 8014516:	4619      	mov	r1, r3
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f001 fd2b 	bl	8015f74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801451e:	e090      	b.n	8014642 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	785a      	ldrb	r2, [r3, #1]
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	88db      	ldrh	r3, [r3, #6]
 801452e:	2b3f      	cmp	r3, #63	@ 0x3f
 8014530:	d803      	bhi.n	801453a <USBD_CDC_Setup+0xa6>
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	88db      	ldrh	r3, [r3, #6]
 8014536:	b2da      	uxtb	r2, r3
 8014538:	e000      	b.n	801453c <USBD_CDC_Setup+0xa8>
 801453a:	2240      	movs	r2, #64	@ 0x40
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014542:	6939      	ldr	r1, [r7, #16]
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801454a:	461a      	mov	r2, r3
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f001 fd3d 	bl	8015fcc <USBD_CtlPrepareRx>
      break;
 8014552:	e076      	b.n	8014642 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	33b0      	adds	r3, #176	@ 0xb0
 801455e:	009b      	lsls	r3, r3, #2
 8014560:	4413      	add	r3, r2
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	689b      	ldr	r3, [r3, #8]
 8014566:	683a      	ldr	r2, [r7, #0]
 8014568:	7850      	ldrb	r0, [r2, #1]
 801456a:	2200      	movs	r2, #0
 801456c:	6839      	ldr	r1, [r7, #0]
 801456e:	4798      	blx	r3
      break;
 8014570:	e067      	b.n	8014642 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	785b      	ldrb	r3, [r3, #1]
 8014576:	2b0b      	cmp	r3, #11
 8014578:	d851      	bhi.n	801461e <USBD_CDC_Setup+0x18a>
 801457a:	a201      	add	r2, pc, #4	@ (adr r2, 8014580 <USBD_CDC_Setup+0xec>)
 801457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014580:	080145b1 	.word	0x080145b1
 8014584:	0801462d 	.word	0x0801462d
 8014588:	0801461f 	.word	0x0801461f
 801458c:	0801461f 	.word	0x0801461f
 8014590:	0801461f 	.word	0x0801461f
 8014594:	0801461f 	.word	0x0801461f
 8014598:	0801461f 	.word	0x0801461f
 801459c:	0801461f 	.word	0x0801461f
 80145a0:	0801461f 	.word	0x0801461f
 80145a4:	0801461f 	.word	0x0801461f
 80145a8:	080145db 	.word	0x080145db
 80145ac:	08014605 	.word	0x08014605
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80145b6:	b2db      	uxtb	r3, r3
 80145b8:	2b03      	cmp	r3, #3
 80145ba:	d107      	bne.n	80145cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80145bc:	f107 030a 	add.w	r3, r7, #10
 80145c0:	2202      	movs	r2, #2
 80145c2:	4619      	mov	r1, r3
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f001 fcd5 	bl	8015f74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145ca:	e032      	b.n	8014632 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80145cc:	6839      	ldr	r1, [r7, #0]
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f001 fc53 	bl	8015e7a <USBD_CtlError>
            ret = USBD_FAIL;
 80145d4:	2303      	movs	r3, #3
 80145d6:	75fb      	strb	r3, [r7, #23]
          break;
 80145d8:	e02b      	b.n	8014632 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80145e0:	b2db      	uxtb	r3, r3
 80145e2:	2b03      	cmp	r3, #3
 80145e4:	d107      	bne.n	80145f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80145e6:	f107 030d 	add.w	r3, r7, #13
 80145ea:	2201      	movs	r2, #1
 80145ec:	4619      	mov	r1, r3
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f001 fcc0 	bl	8015f74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145f4:	e01d      	b.n	8014632 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80145f6:	6839      	ldr	r1, [r7, #0]
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f001 fc3e 	bl	8015e7a <USBD_CtlError>
            ret = USBD_FAIL;
 80145fe:	2303      	movs	r3, #3
 8014600:	75fb      	strb	r3, [r7, #23]
          break;
 8014602:	e016      	b.n	8014632 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801460a:	b2db      	uxtb	r3, r3
 801460c:	2b03      	cmp	r3, #3
 801460e:	d00f      	beq.n	8014630 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014610:	6839      	ldr	r1, [r7, #0]
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f001 fc31 	bl	8015e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8014618:	2303      	movs	r3, #3
 801461a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801461c:	e008      	b.n	8014630 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801461e:	6839      	ldr	r1, [r7, #0]
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f001 fc2a 	bl	8015e7a <USBD_CtlError>
          ret = USBD_FAIL;
 8014626:	2303      	movs	r3, #3
 8014628:	75fb      	strb	r3, [r7, #23]
          break;
 801462a:	e002      	b.n	8014632 <USBD_CDC_Setup+0x19e>
          break;
 801462c:	bf00      	nop
 801462e:	e008      	b.n	8014642 <USBD_CDC_Setup+0x1ae>
          break;
 8014630:	bf00      	nop
      }
      break;
 8014632:	e006      	b.n	8014642 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014634:	6839      	ldr	r1, [r7, #0]
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f001 fc1f 	bl	8015e7a <USBD_CtlError>
      ret = USBD_FAIL;
 801463c:	2303      	movs	r3, #3
 801463e:	75fb      	strb	r3, [r7, #23]
      break;
 8014640:	bf00      	nop
  }

  return (uint8_t)ret;
 8014642:	7dfb      	ldrb	r3, [r7, #23]
}
 8014644:	4618      	mov	r0, r3
 8014646:	3718      	adds	r7, #24
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b084      	sub	sp, #16
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	460b      	mov	r3, r1
 8014656:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801465e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	32b0      	adds	r2, #176	@ 0xb0
 801466a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d101      	bne.n	8014676 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014672:	2303      	movs	r3, #3
 8014674:	e065      	b.n	8014742 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	32b0      	adds	r2, #176	@ 0xb0
 8014680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014684:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014686:	78fb      	ldrb	r3, [r7, #3]
 8014688:	f003 020f 	and.w	r2, r3, #15
 801468c:	6879      	ldr	r1, [r7, #4]
 801468e:	4613      	mov	r3, r2
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	4413      	add	r3, r2
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	440b      	add	r3, r1
 8014698:	3318      	adds	r3, #24
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d02f      	beq.n	8014700 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80146a0:	78fb      	ldrb	r3, [r7, #3]
 80146a2:	f003 020f 	and.w	r2, r3, #15
 80146a6:	6879      	ldr	r1, [r7, #4]
 80146a8:	4613      	mov	r3, r2
 80146aa:	009b      	lsls	r3, r3, #2
 80146ac:	4413      	add	r3, r2
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	440b      	add	r3, r1
 80146b2:	3318      	adds	r3, #24
 80146b4:	681a      	ldr	r2, [r3, #0]
 80146b6:	78fb      	ldrb	r3, [r7, #3]
 80146b8:	f003 010f 	and.w	r1, r3, #15
 80146bc:	68f8      	ldr	r0, [r7, #12]
 80146be:	460b      	mov	r3, r1
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	440b      	add	r3, r1
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	4403      	add	r3, r0
 80146c8:	3320      	adds	r3, #32
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80146d0:	fb01 f303 	mul.w	r3, r1, r3
 80146d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d112      	bne.n	8014700 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80146da:	78fb      	ldrb	r3, [r7, #3]
 80146dc:	f003 020f 	and.w	r2, r3, #15
 80146e0:	6879      	ldr	r1, [r7, #4]
 80146e2:	4613      	mov	r3, r2
 80146e4:	009b      	lsls	r3, r3, #2
 80146e6:	4413      	add	r3, r2
 80146e8:	009b      	lsls	r3, r3, #2
 80146ea:	440b      	add	r3, r1
 80146ec:	3318      	adds	r3, #24
 80146ee:	2200      	movs	r2, #0
 80146f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80146f2:	78f9      	ldrb	r1, [r7, #3]
 80146f4:	2300      	movs	r3, #0
 80146f6:	2200      	movs	r2, #0
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f005 fe50 	bl	801a39e <USBD_LL_Transmit>
 80146fe:	e01f      	b.n	8014740 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	2200      	movs	r2, #0
 8014704:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	33b0      	adds	r3, #176	@ 0xb0
 8014712:	009b      	lsls	r3, r3, #2
 8014714:	4413      	add	r3, r2
 8014716:	685b      	ldr	r3, [r3, #4]
 8014718:	691b      	ldr	r3, [r3, #16]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d010      	beq.n	8014740 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	33b0      	adds	r3, #176	@ 0xb0
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	4413      	add	r3, r2
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	691b      	ldr	r3, [r3, #16]
 8014730:	68ba      	ldr	r2, [r7, #8]
 8014732:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8014736:	68ba      	ldr	r2, [r7, #8]
 8014738:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801473c:	78fa      	ldrb	r2, [r7, #3]
 801473e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014740:	2300      	movs	r3, #0
}
 8014742:	4618      	mov	r0, r3
 8014744:	3710      	adds	r7, #16
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}

0801474a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801474a:	b580      	push	{r7, lr}
 801474c:	b084      	sub	sp, #16
 801474e:	af00      	add	r7, sp, #0
 8014750:	6078      	str	r0, [r7, #4]
 8014752:	460b      	mov	r3, r1
 8014754:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	32b0      	adds	r2, #176	@ 0xb0
 8014760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014764:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	32b0      	adds	r2, #176	@ 0xb0
 8014770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d101      	bne.n	801477c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014778:	2303      	movs	r3, #3
 801477a:	e01a      	b.n	80147b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801477c:	78fb      	ldrb	r3, [r7, #3]
 801477e:	4619      	mov	r1, r3
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f005 fe4e 	bl	801a422 <USBD_LL_GetRxDataSize>
 8014786:	4602      	mov	r2, r0
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	33b0      	adds	r3, #176	@ 0xb0
 8014798:	009b      	lsls	r3, r3, #2
 801479a:	4413      	add	r3, r2
 801479c:	685b      	ldr	r3, [r3, #4]
 801479e:	68db      	ldr	r3, [r3, #12]
 80147a0:	68fa      	ldr	r2, [r7, #12]
 80147a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80147a6:	68fa      	ldr	r2, [r7, #12]
 80147a8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80147ac:	4611      	mov	r1, r2
 80147ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80147b0:	2300      	movs	r3, #0
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3710      	adds	r7, #16
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}

080147ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80147ba:	b580      	push	{r7, lr}
 80147bc:	b084      	sub	sp, #16
 80147be:	af00      	add	r7, sp, #0
 80147c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	32b0      	adds	r2, #176	@ 0xb0
 80147cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d101      	bne.n	80147dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80147d8:	2303      	movs	r3, #3
 80147da:	e024      	b.n	8014826 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80147e2:	687a      	ldr	r2, [r7, #4]
 80147e4:	33b0      	adds	r3, #176	@ 0xb0
 80147e6:	009b      	lsls	r3, r3, #2
 80147e8:	4413      	add	r3, r2
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d019      	beq.n	8014824 <USBD_CDC_EP0_RxReady+0x6a>
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80147f6:	2bff      	cmp	r3, #255	@ 0xff
 80147f8:	d014      	beq.n	8014824 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014800:	687a      	ldr	r2, [r7, #4]
 8014802:	33b0      	adds	r3, #176	@ 0xb0
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	4413      	add	r3, r2
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	689b      	ldr	r3, [r3, #8]
 801480c:	68fa      	ldr	r2, [r7, #12]
 801480e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8014812:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014814:	68fa      	ldr	r2, [r7, #12]
 8014816:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801481a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	22ff      	movs	r2, #255	@ 0xff
 8014820:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8014824:	2300      	movs	r3, #0
}
 8014826:	4618      	mov	r0, r3
 8014828:	3710      	adds	r7, #16
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
	...

08014830 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b086      	sub	sp, #24
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014838:	2182      	movs	r1, #130	@ 0x82
 801483a:	4818      	ldr	r0, [pc, #96]	@ (801489c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801483c:	f000 fcbd 	bl	80151ba <USBD_GetEpDesc>
 8014840:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014842:	2101      	movs	r1, #1
 8014844:	4815      	ldr	r0, [pc, #84]	@ (801489c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014846:	f000 fcb8 	bl	80151ba <USBD_GetEpDesc>
 801484a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801484c:	2181      	movs	r1, #129	@ 0x81
 801484e:	4813      	ldr	r0, [pc, #76]	@ (801489c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014850:	f000 fcb3 	bl	80151ba <USBD_GetEpDesc>
 8014854:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d002      	beq.n	8014862 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	2210      	movs	r2, #16
 8014860:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d006      	beq.n	8014876 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	2200      	movs	r2, #0
 801486c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014870:	711a      	strb	r2, [r3, #4]
 8014872:	2200      	movs	r2, #0
 8014874:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d006      	beq.n	801488a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2200      	movs	r2, #0
 8014880:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014884:	711a      	strb	r2, [r3, #4]
 8014886:	2200      	movs	r2, #0
 8014888:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2243      	movs	r2, #67	@ 0x43
 801488e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014890:	4b02      	ldr	r3, [pc, #8]	@ (801489c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014892:	4618      	mov	r0, r3
 8014894:	3718      	adds	r7, #24
 8014896:	46bd      	mov	sp, r7
 8014898:	bd80      	pop	{r7, pc}
 801489a:	bf00      	nop
 801489c:	2000007c 	.word	0x2000007c

080148a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b086      	sub	sp, #24
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80148a8:	2182      	movs	r1, #130	@ 0x82
 80148aa:	4818      	ldr	r0, [pc, #96]	@ (801490c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148ac:	f000 fc85 	bl	80151ba <USBD_GetEpDesc>
 80148b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80148b2:	2101      	movs	r1, #1
 80148b4:	4815      	ldr	r0, [pc, #84]	@ (801490c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148b6:	f000 fc80 	bl	80151ba <USBD_GetEpDesc>
 80148ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80148bc:	2181      	movs	r1, #129	@ 0x81
 80148be:	4813      	ldr	r0, [pc, #76]	@ (801490c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148c0:	f000 fc7b 	bl	80151ba <USBD_GetEpDesc>
 80148c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d002      	beq.n	80148d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	2210      	movs	r2, #16
 80148d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d006      	beq.n	80148e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	2200      	movs	r2, #0
 80148dc:	711a      	strb	r2, [r3, #4]
 80148de:	2200      	movs	r2, #0
 80148e0:	f042 0202 	orr.w	r2, r2, #2
 80148e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d006      	beq.n	80148fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2200      	movs	r2, #0
 80148f0:	711a      	strb	r2, [r3, #4]
 80148f2:	2200      	movs	r2, #0
 80148f4:	f042 0202 	orr.w	r2, r2, #2
 80148f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2243      	movs	r2, #67	@ 0x43
 80148fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014900:	4b02      	ldr	r3, [pc, #8]	@ (801490c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014902:	4618      	mov	r0, r3
 8014904:	3718      	adds	r7, #24
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}
 801490a:	bf00      	nop
 801490c:	2000007c 	.word	0x2000007c

08014910 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b086      	sub	sp, #24
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014918:	2182      	movs	r1, #130	@ 0x82
 801491a:	4818      	ldr	r0, [pc, #96]	@ (801497c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801491c:	f000 fc4d 	bl	80151ba <USBD_GetEpDesc>
 8014920:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014922:	2101      	movs	r1, #1
 8014924:	4815      	ldr	r0, [pc, #84]	@ (801497c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014926:	f000 fc48 	bl	80151ba <USBD_GetEpDesc>
 801492a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801492c:	2181      	movs	r1, #129	@ 0x81
 801492e:	4813      	ldr	r0, [pc, #76]	@ (801497c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014930:	f000 fc43 	bl	80151ba <USBD_GetEpDesc>
 8014934:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d002      	beq.n	8014942 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	2210      	movs	r2, #16
 8014940:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d006      	beq.n	8014956 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	2200      	movs	r2, #0
 801494c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014950:	711a      	strb	r2, [r3, #4]
 8014952:	2200      	movs	r2, #0
 8014954:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d006      	beq.n	801496a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	2200      	movs	r2, #0
 8014960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014964:	711a      	strb	r2, [r3, #4]
 8014966:	2200      	movs	r2, #0
 8014968:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2243      	movs	r2, #67	@ 0x43
 801496e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014970:	4b02      	ldr	r3, [pc, #8]	@ (801497c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014972:	4618      	mov	r0, r3
 8014974:	3718      	adds	r7, #24
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	2000007c 	.word	0x2000007c

08014980 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014980:	b480      	push	{r7}
 8014982:	b083      	sub	sp, #12
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	220a      	movs	r2, #10
 801498c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801498e:	4b03      	ldr	r3, [pc, #12]	@ (801499c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014990:	4618      	mov	r0, r3
 8014992:	370c      	adds	r7, #12
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr
 801499c:	20000038 	.word	0x20000038

080149a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80149a0:	b480      	push	{r7}
 80149a2:	b083      	sub	sp, #12
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d101      	bne.n	80149b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80149b0:	2303      	movs	r3, #3
 80149b2:	e009      	b.n	80149c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80149ba:	687a      	ldr	r2, [r7, #4]
 80149bc:	33b0      	adds	r3, #176	@ 0xb0
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	4413      	add	r3, r2
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80149c6:	2300      	movs	r3, #0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	370c      	adds	r7, #12
 80149cc:	46bd      	mov	sp, r7
 80149ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d2:	4770      	bx	lr

080149d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80149d4:	b480      	push	{r7}
 80149d6:	b087      	sub	sp, #28
 80149d8:	af00      	add	r7, sp, #0
 80149da:	60f8      	str	r0, [r7, #12]
 80149dc:	60b9      	str	r1, [r7, #8]
 80149de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	32b0      	adds	r2, #176	@ 0xb0
 80149ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d101      	bne.n	80149fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80149f6:	2303      	movs	r3, #3
 80149f8:	e008      	b.n	8014a0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	68ba      	ldr	r2, [r7, #8]
 80149fe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8014a0a:	2300      	movs	r3, #0
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	371c      	adds	r7, #28
 8014a10:	46bd      	mov	sp, r7
 8014a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a16:	4770      	bx	lr

08014a18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014a18:	b480      	push	{r7}
 8014a1a:	b085      	sub	sp, #20
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	32b0      	adds	r2, #176	@ 0xb0
 8014a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d101      	bne.n	8014a3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014a38:	2303      	movs	r3, #3
 8014a3a:	e004      	b.n	8014a46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	683a      	ldr	r2, [r7, #0]
 8014a40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8014a44:	2300      	movs	r3, #0
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3714      	adds	r7, #20
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a50:	4770      	bx	lr
	...

08014a54 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b084      	sub	sp, #16
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	32b0      	adds	r2, #176	@ 0xb0
 8014a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a6a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d101      	bne.n	8014a7a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014a76:	2303      	movs	r3, #3
 8014a78:	e025      	b.n	8014ac6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d11f      	bne.n	8014ac4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	2201      	movs	r2, #1
 8014a88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014a8c:	4b10      	ldr	r3, [pc, #64]	@ (8014ad0 <USBD_CDC_TransmitPacket+0x7c>)
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	f003 020f 	and.w	r2, r3, #15
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	009b      	lsls	r3, r3, #2
 8014aa0:	4413      	add	r3, r2
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	4403      	add	r3, r0
 8014aa6:	3318      	adds	r3, #24
 8014aa8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014aaa:	4b09      	ldr	r3, [pc, #36]	@ (8014ad0 <USBD_CDC_TransmitPacket+0x7c>)
 8014aac:	7819      	ldrb	r1, [r3, #0]
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f005 fc6f 	bl	801a39e <USBD_LL_Transmit>

    ret = USBD_OK;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	200000bf 	.word	0x200000bf

08014ad4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b084      	sub	sp, #16
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	32b0      	adds	r2, #176	@ 0xb0
 8014ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	32b0      	adds	r2, #176	@ 0xb0
 8014af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d101      	bne.n	8014b02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014afe:	2303      	movs	r3, #3
 8014b00:	e018      	b.n	8014b34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	7c1b      	ldrb	r3, [r3, #16]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d10a      	bne.n	8014b20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8014b3c <USBD_CDC_ReceivePacket+0x68>)
 8014b0c:	7819      	ldrb	r1, [r3, #0]
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f005 fc61 	bl	801a3e0 <USBD_LL_PrepareReceive>
 8014b1e:	e008      	b.n	8014b32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014b20:	4b06      	ldr	r3, [pc, #24]	@ (8014b3c <USBD_CDC_ReceivePacket+0x68>)
 8014b22:	7819      	ldrb	r1, [r3, #0]
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014b2a:	2340      	movs	r3, #64	@ 0x40
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	f005 fc57 	bl	801a3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014b32:	2300      	movs	r3, #0
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3710      	adds	r7, #16
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}
 8014b3c:	200000c0 	.word	0x200000c0

08014b40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b086      	sub	sp, #24
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	4613      	mov	r3, r2
 8014b4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d101      	bne.n	8014b58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014b54:	2303      	movs	r3, #3
 8014b56:	e01f      	b.n	8014b98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	2200      	movs	r2, #0
 8014b64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d003      	beq.n	8014b7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	68ba      	ldr	r2, [r7, #8]
 8014b7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2201      	movs	r2, #1
 8014b82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	79fa      	ldrb	r2, [r7, #7]
 8014b8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014b8c:	68f8      	ldr	r0, [r7, #12]
 8014b8e:	f005 fabb 	bl	801a108 <USBD_LL_Init>
 8014b92:	4603      	mov	r3, r0
 8014b94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3718      	adds	r7, #24
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b084      	sub	sp, #16
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014baa:	2300      	movs	r3, #0
 8014bac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d101      	bne.n	8014bb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014bb4:	2303      	movs	r3, #3
 8014bb6:	e025      	b.n	8014c04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	683a      	ldr	r2, [r7, #0]
 8014bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	32ae      	adds	r2, #174	@ 0xae
 8014bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d00f      	beq.n	8014bf4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	32ae      	adds	r2, #174	@ 0xae
 8014bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014be4:	f107 020e 	add.w	r2, r7, #14
 8014be8:	4610      	mov	r0, r2
 8014bea:	4798      	blx	r3
 8014bec:	4602      	mov	r2, r0
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014bfa:	1c5a      	adds	r2, r3, #1
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8014c02:	2300      	movs	r3, #0
}
 8014c04:	4618      	mov	r0, r3
 8014c06:	3710      	adds	r7, #16
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}

08014c0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b082      	sub	sp, #8
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f005 fad9 	bl	801a1cc <USBD_LL_Start>
 8014c1a:	4603      	mov	r3, r0
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3708      	adds	r7, #8
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014c24:	b480      	push	{r7}
 8014c26:	b083      	sub	sp, #12
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014c2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	370c      	adds	r7, #12
 8014c32:	46bd      	mov	sp, r7
 8014c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c38:	4770      	bx	lr

08014c3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c3a:	b580      	push	{r7, lr}
 8014c3c:	b084      	sub	sp, #16
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	6078      	str	r0, [r7, #4]
 8014c42:	460b      	mov	r3, r1
 8014c44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c46:	2300      	movs	r3, #0
 8014c48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d009      	beq.n	8014c68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	78fa      	ldrb	r2, [r7, #3]
 8014c5e:	4611      	mov	r1, r2
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	4798      	blx	r3
 8014c64:	4603      	mov	r3, r0
 8014c66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}

08014c72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c72:	b580      	push	{r7, lr}
 8014c74:	b084      	sub	sp, #16
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	6078      	str	r0, [r7, #4]
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c88:	685b      	ldr	r3, [r3, #4]
 8014c8a:	78fa      	ldrb	r2, [r7, #3]
 8014c8c:	4611      	mov	r1, r2
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	4798      	blx	r3
 8014c92:	4603      	mov	r3, r0
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d001      	beq.n	8014c9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014c98:	2303      	movs	r3, #3
 8014c9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3710      	adds	r7, #16
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}

08014ca6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014ca6:	b580      	push	{r7, lr}
 8014ca8:	b084      	sub	sp, #16
 8014caa:	af00      	add	r7, sp, #0
 8014cac:	6078      	str	r0, [r7, #4]
 8014cae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014cb6:	6839      	ldr	r1, [r7, #0]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f001 f8a4 	bl	8015e06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2201      	movs	r2, #1
 8014cc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014ccc:	461a      	mov	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014cda:	f003 031f 	and.w	r3, r3, #31
 8014cde:	2b02      	cmp	r3, #2
 8014ce0:	d01a      	beq.n	8014d18 <USBD_LL_SetupStage+0x72>
 8014ce2:	2b02      	cmp	r3, #2
 8014ce4:	d822      	bhi.n	8014d2c <USBD_LL_SetupStage+0x86>
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d002      	beq.n	8014cf0 <USBD_LL_SetupStage+0x4a>
 8014cea:	2b01      	cmp	r3, #1
 8014cec:	d00a      	beq.n	8014d04 <USBD_LL_SetupStage+0x5e>
 8014cee:	e01d      	b.n	8014d2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f000 fad1 	bl	80152a0 <USBD_StdDevReq>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	73fb      	strb	r3, [r7, #15]
      break;
 8014d02:	e020      	b.n	8014d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f000 fb39 	bl	8015384 <USBD_StdItfReq>
 8014d12:	4603      	mov	r3, r0
 8014d14:	73fb      	strb	r3, [r7, #15]
      break;
 8014d16:	e016      	b.n	8014d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014d1e:	4619      	mov	r1, r3
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f000 fb9b 	bl	801545c <USBD_StdEPReq>
 8014d26:	4603      	mov	r3, r0
 8014d28:	73fb      	strb	r3, [r7, #15]
      break;
 8014d2a:	e00c      	b.n	8014d46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014d32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	4619      	mov	r1, r3
 8014d3a:	6878      	ldr	r0, [r7, #4]
 8014d3c:	f005 faa6 	bl	801a28c <USBD_LL_StallEP>
 8014d40:	4603      	mov	r3, r0
 8014d42:	73fb      	strb	r3, [r7, #15]
      break;
 8014d44:	bf00      	nop
  }

  return ret;
 8014d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3710      	adds	r7, #16
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	460b      	mov	r3, r1
 8014d5a:	607a      	str	r2, [r7, #4]
 8014d5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014d62:	7afb      	ldrb	r3, [r7, #11]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d16e      	bne.n	8014e46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8014d6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014d76:	2b03      	cmp	r3, #3
 8014d78:	f040 8098 	bne.w	8014eac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	689a      	ldr	r2, [r3, #8]
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	429a      	cmp	r2, r3
 8014d86:	d913      	bls.n	8014db0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	689a      	ldr	r2, [r3, #8]
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	1ad2      	subs	r2, r2, r3
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	68da      	ldr	r2, [r3, #12]
 8014d9a:	693b      	ldr	r3, [r7, #16]
 8014d9c:	689b      	ldr	r3, [r3, #8]
 8014d9e:	4293      	cmp	r3, r2
 8014da0:	bf28      	it	cs
 8014da2:	4613      	movcs	r3, r2
 8014da4:	461a      	mov	r2, r3
 8014da6:	6879      	ldr	r1, [r7, #4]
 8014da8:	68f8      	ldr	r0, [r7, #12]
 8014daa:	f001 f92c 	bl	8016006 <USBD_CtlContinueRx>
 8014dae:	e07d      	b.n	8014eac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014db6:	f003 031f 	and.w	r3, r3, #31
 8014dba:	2b02      	cmp	r3, #2
 8014dbc:	d014      	beq.n	8014de8 <USBD_LL_DataOutStage+0x98>
 8014dbe:	2b02      	cmp	r3, #2
 8014dc0:	d81d      	bhi.n	8014dfe <USBD_LL_DataOutStage+0xae>
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d002      	beq.n	8014dcc <USBD_LL_DataOutStage+0x7c>
 8014dc6:	2b01      	cmp	r3, #1
 8014dc8:	d003      	beq.n	8014dd2 <USBD_LL_DataOutStage+0x82>
 8014dca:	e018      	b.n	8014dfe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014dcc:	2300      	movs	r3, #0
 8014dce:	75bb      	strb	r3, [r7, #22]
            break;
 8014dd0:	e018      	b.n	8014e04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	4619      	mov	r1, r3
 8014ddc:	68f8      	ldr	r0, [r7, #12]
 8014dde:	f000 f9d2 	bl	8015186 <USBD_CoreFindIF>
 8014de2:	4603      	mov	r3, r0
 8014de4:	75bb      	strb	r3, [r7, #22]
            break;
 8014de6:	e00d      	b.n	8014e04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014dee:	b2db      	uxtb	r3, r3
 8014df0:	4619      	mov	r1, r3
 8014df2:	68f8      	ldr	r0, [r7, #12]
 8014df4:	f000 f9d4 	bl	80151a0 <USBD_CoreFindEP>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	75bb      	strb	r3, [r7, #22]
            break;
 8014dfc:	e002      	b.n	8014e04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	75bb      	strb	r3, [r7, #22]
            break;
 8014e02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014e04:	7dbb      	ldrb	r3, [r7, #22]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d119      	bne.n	8014e3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	2b03      	cmp	r3, #3
 8014e14:	d113      	bne.n	8014e3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014e16:	7dba      	ldrb	r2, [r7, #22]
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	32ae      	adds	r2, #174	@ 0xae
 8014e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e20:	691b      	ldr	r3, [r3, #16]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d00b      	beq.n	8014e3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014e26:	7dba      	ldrb	r2, [r7, #22]
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014e2e:	7dba      	ldrb	r2, [r7, #22]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	32ae      	adds	r2, #174	@ 0xae
 8014e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e38:	691b      	ldr	r3, [r3, #16]
 8014e3a:	68f8      	ldr	r0, [r7, #12]
 8014e3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014e3e:	68f8      	ldr	r0, [r7, #12]
 8014e40:	f001 f8f2 	bl	8016028 <USBD_CtlSendStatus>
 8014e44:	e032      	b.n	8014eac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014e46:	7afb      	ldrb	r3, [r7, #11]
 8014e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014e4c:	b2db      	uxtb	r3, r3
 8014e4e:	4619      	mov	r1, r3
 8014e50:	68f8      	ldr	r0, [r7, #12]
 8014e52:	f000 f9a5 	bl	80151a0 <USBD_CoreFindEP>
 8014e56:	4603      	mov	r3, r0
 8014e58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014e5a:	7dbb      	ldrb	r3, [r7, #22]
 8014e5c:	2bff      	cmp	r3, #255	@ 0xff
 8014e5e:	d025      	beq.n	8014eac <USBD_LL_DataOutStage+0x15c>
 8014e60:	7dbb      	ldrb	r3, [r7, #22]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d122      	bne.n	8014eac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e6c:	b2db      	uxtb	r3, r3
 8014e6e:	2b03      	cmp	r3, #3
 8014e70:	d117      	bne.n	8014ea2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014e72:	7dba      	ldrb	r2, [r7, #22]
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	32ae      	adds	r2, #174	@ 0xae
 8014e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e7c:	699b      	ldr	r3, [r3, #24]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d00f      	beq.n	8014ea2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014e82:	7dba      	ldrb	r2, [r7, #22]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014e8a:	7dba      	ldrb	r2, [r7, #22]
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	32ae      	adds	r2, #174	@ 0xae
 8014e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e94:	699b      	ldr	r3, [r3, #24]
 8014e96:	7afa      	ldrb	r2, [r7, #11]
 8014e98:	4611      	mov	r1, r2
 8014e9a:	68f8      	ldr	r0, [r7, #12]
 8014e9c:	4798      	blx	r3
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014ea2:	7dfb      	ldrb	r3, [r7, #23]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d001      	beq.n	8014eac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014ea8:	7dfb      	ldrb	r3, [r7, #23]
 8014eaa:	e000      	b.n	8014eae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014eac:	2300      	movs	r3, #0
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3718      	adds	r7, #24
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}

08014eb6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014eb6:	b580      	push	{r7, lr}
 8014eb8:	b086      	sub	sp, #24
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	60f8      	str	r0, [r7, #12]
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	607a      	str	r2, [r7, #4]
 8014ec2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014ec4:	7afb      	ldrb	r3, [r7, #11]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d16f      	bne.n	8014faa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	3314      	adds	r3, #20
 8014ece:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014ed6:	2b02      	cmp	r3, #2
 8014ed8:	d15a      	bne.n	8014f90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	689a      	ldr	r2, [r3, #8]
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	68db      	ldr	r3, [r3, #12]
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	d914      	bls.n	8014f10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	689a      	ldr	r2, [r3, #8]
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	1ad2      	subs	r2, r2, r3
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014ef4:	693b      	ldr	r3, [r7, #16]
 8014ef6:	689b      	ldr	r3, [r3, #8]
 8014ef8:	461a      	mov	r2, r3
 8014efa:	6879      	ldr	r1, [r7, #4]
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f001 f854 	bl	8015faa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014f02:	2300      	movs	r3, #0
 8014f04:	2200      	movs	r2, #0
 8014f06:	2100      	movs	r1, #0
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f005 fa69 	bl	801a3e0 <USBD_LL_PrepareReceive>
 8014f0e:	e03f      	b.n	8014f90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014f10:	693b      	ldr	r3, [r7, #16]
 8014f12:	68da      	ldr	r2, [r3, #12]
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	689b      	ldr	r3, [r3, #8]
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d11c      	bne.n	8014f56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	685a      	ldr	r2, [r3, #4]
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014f24:	429a      	cmp	r2, r3
 8014f26:	d316      	bcc.n	8014f56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	685a      	ldr	r2, [r3, #4]
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014f32:	429a      	cmp	r2, r3
 8014f34:	d20f      	bcs.n	8014f56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014f36:	2200      	movs	r2, #0
 8014f38:	2100      	movs	r1, #0
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f001 f835 	bl	8015faa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	2200      	movs	r2, #0
 8014f44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014f48:	2300      	movs	r3, #0
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	2100      	movs	r1, #0
 8014f4e:	68f8      	ldr	r0, [r7, #12]
 8014f50:	f005 fa46 	bl	801a3e0 <USBD_LL_PrepareReceive>
 8014f54:	e01c      	b.n	8014f90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f5c:	b2db      	uxtb	r3, r3
 8014f5e:	2b03      	cmp	r3, #3
 8014f60:	d10f      	bne.n	8014f82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014f68:	68db      	ldr	r3, [r3, #12]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d009      	beq.n	8014f82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	2200      	movs	r2, #0
 8014f72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014f7c:	68db      	ldr	r3, [r3, #12]
 8014f7e:	68f8      	ldr	r0, [r7, #12]
 8014f80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014f82:	2180      	movs	r1, #128	@ 0x80
 8014f84:	68f8      	ldr	r0, [r7, #12]
 8014f86:	f005 f981 	bl	801a28c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014f8a:	68f8      	ldr	r0, [r7, #12]
 8014f8c:	f001 f85f 	bl	801604e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d03a      	beq.n	8015010 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014f9a:	68f8      	ldr	r0, [r7, #12]
 8014f9c:	f7ff fe42 	bl	8014c24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8014fa8:	e032      	b.n	8015010 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014faa:	7afb      	ldrb	r3, [r7, #11]
 8014fac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	4619      	mov	r1, r3
 8014fb4:	68f8      	ldr	r0, [r7, #12]
 8014fb6:	f000 f8f3 	bl	80151a0 <USBD_CoreFindEP>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014fbe:	7dfb      	ldrb	r3, [r7, #23]
 8014fc0:	2bff      	cmp	r3, #255	@ 0xff
 8014fc2:	d025      	beq.n	8015010 <USBD_LL_DataInStage+0x15a>
 8014fc4:	7dfb      	ldrb	r3, [r7, #23]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d122      	bne.n	8015010 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fd0:	b2db      	uxtb	r3, r3
 8014fd2:	2b03      	cmp	r3, #3
 8014fd4:	d11c      	bne.n	8015010 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014fd6:	7dfa      	ldrb	r2, [r7, #23]
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	32ae      	adds	r2, #174	@ 0xae
 8014fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fe0:	695b      	ldr	r3, [r3, #20]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d014      	beq.n	8015010 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014fe6:	7dfa      	ldrb	r2, [r7, #23]
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014fee:	7dfa      	ldrb	r2, [r7, #23]
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	32ae      	adds	r2, #174	@ 0xae
 8014ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ff8:	695b      	ldr	r3, [r3, #20]
 8014ffa:	7afa      	ldrb	r2, [r7, #11]
 8014ffc:	4611      	mov	r1, r2
 8014ffe:	68f8      	ldr	r0, [r7, #12]
 8015000:	4798      	blx	r3
 8015002:	4603      	mov	r3, r0
 8015004:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015006:	7dbb      	ldrb	r3, [r7, #22]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d001      	beq.n	8015010 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801500c:	7dbb      	ldrb	r3, [r7, #22]
 801500e:	e000      	b.n	8015012 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015010:	2300      	movs	r3, #0
}
 8015012:	4618      	mov	r0, r3
 8015014:	3718      	adds	r7, #24
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}

0801501a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801501a:	b580      	push	{r7, lr}
 801501c:	b084      	sub	sp, #16
 801501e:	af00      	add	r7, sp, #0
 8015020:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015022:	2300      	movs	r3, #0
 8015024:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2201      	movs	r2, #1
 801502a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2200      	movs	r2, #0
 8015032:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	2200      	movs	r2, #0
 801503a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2200      	movs	r2, #0
 8015040:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2200      	movs	r2, #0
 8015048:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015052:	2b00      	cmp	r3, #0
 8015054:	d014      	beq.n	8015080 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801505c:	685b      	ldr	r3, [r3, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d00e      	beq.n	8015080 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	687a      	ldr	r2, [r7, #4]
 801506c:	6852      	ldr	r2, [r2, #4]
 801506e:	b2d2      	uxtb	r2, r2
 8015070:	4611      	mov	r1, r2
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	4798      	blx	r3
 8015076:	4603      	mov	r3, r0
 8015078:	2b00      	cmp	r3, #0
 801507a:	d001      	beq.n	8015080 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801507c:	2303      	movs	r3, #3
 801507e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015080:	2340      	movs	r3, #64	@ 0x40
 8015082:	2200      	movs	r2, #0
 8015084:	2100      	movs	r1, #0
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f005 f8bb 	bl	801a202 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2201      	movs	r2, #1
 8015090:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2240      	movs	r2, #64	@ 0x40
 8015098:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801509c:	2340      	movs	r3, #64	@ 0x40
 801509e:	2200      	movs	r2, #0
 80150a0:	2180      	movs	r1, #128	@ 0x80
 80150a2:	6878      	ldr	r0, [r7, #4]
 80150a4:	f005 f8ad 	bl	801a202 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2201      	movs	r2, #1
 80150ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2240      	movs	r2, #64	@ 0x40
 80150b2:	621a      	str	r2, [r3, #32]

  return ret;
 80150b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3710      	adds	r7, #16
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}

080150be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80150be:	b480      	push	{r7}
 80150c0:	b083      	sub	sp, #12
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
 80150c6:	460b      	mov	r3, r1
 80150c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	78fa      	ldrb	r2, [r7, #3]
 80150ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80150d0:	2300      	movs	r3, #0
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	370c      	adds	r7, #12
 80150d6:	46bd      	mov	sp, r7
 80150d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150dc:	4770      	bx	lr

080150de <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80150de:	b480      	push	{r7}
 80150e0:	b083      	sub	sp, #12
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80150ec:	b2db      	uxtb	r3, r3
 80150ee:	2b04      	cmp	r3, #4
 80150f0:	d006      	beq.n	8015100 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80150f8:	b2da      	uxtb	r2, r3
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2204      	movs	r2, #4
 8015104:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8015108:	2300      	movs	r3, #0
}
 801510a:	4618      	mov	r0, r3
 801510c:	370c      	adds	r7, #12
 801510e:	46bd      	mov	sp, r7
 8015110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015114:	4770      	bx	lr

08015116 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015116:	b480      	push	{r7}
 8015118:	b083      	sub	sp, #12
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015124:	b2db      	uxtb	r3, r3
 8015126:	2b04      	cmp	r3, #4
 8015128:	d106      	bne.n	8015138 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8015130:	b2da      	uxtb	r2, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8015138:	2300      	movs	r3, #0
}
 801513a:	4618      	mov	r0, r3
 801513c:	370c      	adds	r7, #12
 801513e:	46bd      	mov	sp, r7
 8015140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015144:	4770      	bx	lr

08015146 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015146:	b580      	push	{r7, lr}
 8015148:	b082      	sub	sp, #8
 801514a:	af00      	add	r7, sp, #0
 801514c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015154:	b2db      	uxtb	r3, r3
 8015156:	2b03      	cmp	r3, #3
 8015158:	d110      	bne.n	801517c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015160:	2b00      	cmp	r3, #0
 8015162:	d00b      	beq.n	801517c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801516a:	69db      	ldr	r3, [r3, #28]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d005      	beq.n	801517c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015176:	69db      	ldr	r3, [r3, #28]
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801517c:	2300      	movs	r3, #0
}
 801517e:	4618      	mov	r0, r3
 8015180:	3708      	adds	r7, #8
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}

08015186 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015186:	b480      	push	{r7}
 8015188:	b083      	sub	sp, #12
 801518a:	af00      	add	r7, sp, #0
 801518c:	6078      	str	r0, [r7, #4]
 801518e:	460b      	mov	r3, r1
 8015190:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015192:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015194:	4618      	mov	r0, r3
 8015196:	370c      	adds	r7, #12
 8015198:	46bd      	mov	sp, r7
 801519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519e:	4770      	bx	lr

080151a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80151a0:	b480      	push	{r7}
 80151a2:	b083      	sub	sp, #12
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	460b      	mov	r3, r1
 80151aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80151ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	370c      	adds	r7, #12
 80151b2:	46bd      	mov	sp, r7
 80151b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b8:	4770      	bx	lr

080151ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80151ba:	b580      	push	{r7, lr}
 80151bc:	b086      	sub	sp, #24
 80151be:	af00      	add	r7, sp, #0
 80151c0:	6078      	str	r0, [r7, #4]
 80151c2:	460b      	mov	r3, r1
 80151c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80151ce:	2300      	movs	r3, #0
 80151d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	885b      	ldrh	r3, [r3, #2]
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	68fa      	ldr	r2, [r7, #12]
 80151da:	7812      	ldrb	r2, [r2, #0]
 80151dc:	4293      	cmp	r3, r2
 80151de:	d91f      	bls.n	8015220 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80151e6:	e013      	b.n	8015210 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80151e8:	f107 030a 	add.w	r3, r7, #10
 80151ec:	4619      	mov	r1, r3
 80151ee:	6978      	ldr	r0, [r7, #20]
 80151f0:	f000 f81b 	bl	801522a <USBD_GetNextDesc>
 80151f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	785b      	ldrb	r3, [r3, #1]
 80151fa:	2b05      	cmp	r3, #5
 80151fc:	d108      	bne.n	8015210 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	789b      	ldrb	r3, [r3, #2]
 8015206:	78fa      	ldrb	r2, [r7, #3]
 8015208:	429a      	cmp	r2, r3
 801520a:	d008      	beq.n	801521e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801520c:	2300      	movs	r3, #0
 801520e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	885b      	ldrh	r3, [r3, #2]
 8015214:	b29a      	uxth	r2, r3
 8015216:	897b      	ldrh	r3, [r7, #10]
 8015218:	429a      	cmp	r2, r3
 801521a:	d8e5      	bhi.n	80151e8 <USBD_GetEpDesc+0x2e>
 801521c:	e000      	b.n	8015220 <USBD_GetEpDesc+0x66>
          break;
 801521e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015220:	693b      	ldr	r3, [r7, #16]
}
 8015222:	4618      	mov	r0, r3
 8015224:	3718      	adds	r7, #24
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}

0801522a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801522a:	b480      	push	{r7}
 801522c:	b085      	sub	sp, #20
 801522e:	af00      	add	r7, sp, #0
 8015230:	6078      	str	r0, [r7, #4]
 8015232:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	881b      	ldrh	r3, [r3, #0]
 801523c:	68fa      	ldr	r2, [r7, #12]
 801523e:	7812      	ldrb	r2, [r2, #0]
 8015240:	4413      	add	r3, r2
 8015242:	b29a      	uxth	r2, r3
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	781b      	ldrb	r3, [r3, #0]
 801524c:	461a      	mov	r2, r3
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	4413      	add	r3, r2
 8015252:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015254:	68fb      	ldr	r3, [r7, #12]
}
 8015256:	4618      	mov	r0, r3
 8015258:	3714      	adds	r7, #20
 801525a:	46bd      	mov	sp, r7
 801525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015260:	4770      	bx	lr

08015262 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015262:	b480      	push	{r7}
 8015264:	b087      	sub	sp, #28
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801526e:	697b      	ldr	r3, [r7, #20]
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	3301      	adds	r3, #1
 8015278:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015280:	8a3b      	ldrh	r3, [r7, #16]
 8015282:	021b      	lsls	r3, r3, #8
 8015284:	b21a      	sxth	r2, r3
 8015286:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801528a:	4313      	orrs	r3, r2
 801528c:	b21b      	sxth	r3, r3
 801528e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015290:	89fb      	ldrh	r3, [r7, #14]
}
 8015292:	4618      	mov	r0, r3
 8015294:	371c      	adds	r7, #28
 8015296:	46bd      	mov	sp, r7
 8015298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529c:	4770      	bx	lr
	...

080152a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b084      	sub	sp, #16
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80152aa:	2300      	movs	r3, #0
 80152ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	781b      	ldrb	r3, [r3, #0]
 80152b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80152b6:	2b40      	cmp	r3, #64	@ 0x40
 80152b8:	d005      	beq.n	80152c6 <USBD_StdDevReq+0x26>
 80152ba:	2b40      	cmp	r3, #64	@ 0x40
 80152bc:	d857      	bhi.n	801536e <USBD_StdDevReq+0xce>
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d00f      	beq.n	80152e2 <USBD_StdDevReq+0x42>
 80152c2:	2b20      	cmp	r3, #32
 80152c4:	d153      	bne.n	801536e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	32ae      	adds	r2, #174	@ 0xae
 80152d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d4:	689b      	ldr	r3, [r3, #8]
 80152d6:	6839      	ldr	r1, [r7, #0]
 80152d8:	6878      	ldr	r0, [r7, #4]
 80152da:	4798      	blx	r3
 80152dc:	4603      	mov	r3, r0
 80152de:	73fb      	strb	r3, [r7, #15]
      break;
 80152e0:	e04a      	b.n	8015378 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	785b      	ldrb	r3, [r3, #1]
 80152e6:	2b09      	cmp	r3, #9
 80152e8:	d83b      	bhi.n	8015362 <USBD_StdDevReq+0xc2>
 80152ea:	a201      	add	r2, pc, #4	@ (adr r2, 80152f0 <USBD_StdDevReq+0x50>)
 80152ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152f0:	08015345 	.word	0x08015345
 80152f4:	08015359 	.word	0x08015359
 80152f8:	08015363 	.word	0x08015363
 80152fc:	0801534f 	.word	0x0801534f
 8015300:	08015363 	.word	0x08015363
 8015304:	08015323 	.word	0x08015323
 8015308:	08015319 	.word	0x08015319
 801530c:	08015363 	.word	0x08015363
 8015310:	0801533b 	.word	0x0801533b
 8015314:	0801532d 	.word	0x0801532d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015318:	6839      	ldr	r1, [r7, #0]
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f000 fa3c 	bl	8015798 <USBD_GetDescriptor>
          break;
 8015320:	e024      	b.n	801536c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015322:	6839      	ldr	r1, [r7, #0]
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	f000 fbcb 	bl	8015ac0 <USBD_SetAddress>
          break;
 801532a:	e01f      	b.n	801536c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801532c:	6839      	ldr	r1, [r7, #0]
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f000 fc0a 	bl	8015b48 <USBD_SetConfig>
 8015334:	4603      	mov	r3, r0
 8015336:	73fb      	strb	r3, [r7, #15]
          break;
 8015338:	e018      	b.n	801536c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801533a:	6839      	ldr	r1, [r7, #0]
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	f000 fcad 	bl	8015c9c <USBD_GetConfig>
          break;
 8015342:	e013      	b.n	801536c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015344:	6839      	ldr	r1, [r7, #0]
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f000 fcde 	bl	8015d08 <USBD_GetStatus>
          break;
 801534c:	e00e      	b.n	801536c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801534e:	6839      	ldr	r1, [r7, #0]
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f000 fd0d 	bl	8015d70 <USBD_SetFeature>
          break;
 8015356:	e009      	b.n	801536c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015358:	6839      	ldr	r1, [r7, #0]
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f000 fd31 	bl	8015dc2 <USBD_ClrFeature>
          break;
 8015360:	e004      	b.n	801536c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015362:	6839      	ldr	r1, [r7, #0]
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f000 fd88 	bl	8015e7a <USBD_CtlError>
          break;
 801536a:	bf00      	nop
      }
      break;
 801536c:	e004      	b.n	8015378 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801536e:	6839      	ldr	r1, [r7, #0]
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f000 fd82 	bl	8015e7a <USBD_CtlError>
      break;
 8015376:	bf00      	nop
  }

  return ret;
 8015378:	7bfb      	ldrb	r3, [r7, #15]
}
 801537a:	4618      	mov	r0, r3
 801537c:	3710      	adds	r7, #16
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}
 8015382:	bf00      	nop

08015384 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b084      	sub	sp, #16
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801538e:	2300      	movs	r3, #0
 8015390:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	781b      	ldrb	r3, [r3, #0]
 8015396:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801539a:	2b40      	cmp	r3, #64	@ 0x40
 801539c:	d005      	beq.n	80153aa <USBD_StdItfReq+0x26>
 801539e:	2b40      	cmp	r3, #64	@ 0x40
 80153a0:	d852      	bhi.n	8015448 <USBD_StdItfReq+0xc4>
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d001      	beq.n	80153aa <USBD_StdItfReq+0x26>
 80153a6:	2b20      	cmp	r3, #32
 80153a8:	d14e      	bne.n	8015448 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80153b0:	b2db      	uxtb	r3, r3
 80153b2:	3b01      	subs	r3, #1
 80153b4:	2b02      	cmp	r3, #2
 80153b6:	d840      	bhi.n	801543a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	889b      	ldrh	r3, [r3, #4]
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	2b01      	cmp	r3, #1
 80153c0:	d836      	bhi.n	8015430 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	889b      	ldrh	r3, [r3, #4]
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	4619      	mov	r1, r3
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f7ff fedb 	bl	8015186 <USBD_CoreFindIF>
 80153d0:	4603      	mov	r3, r0
 80153d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80153d4:	7bbb      	ldrb	r3, [r7, #14]
 80153d6:	2bff      	cmp	r3, #255	@ 0xff
 80153d8:	d01d      	beq.n	8015416 <USBD_StdItfReq+0x92>
 80153da:	7bbb      	ldrb	r3, [r7, #14]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d11a      	bne.n	8015416 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80153e0:	7bba      	ldrb	r2, [r7, #14]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	32ae      	adds	r2, #174	@ 0xae
 80153e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153ea:	689b      	ldr	r3, [r3, #8]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d00f      	beq.n	8015410 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80153f0:	7bba      	ldrb	r2, [r7, #14]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80153f8:	7bba      	ldrb	r2, [r7, #14]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	32ae      	adds	r2, #174	@ 0xae
 80153fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015402:	689b      	ldr	r3, [r3, #8]
 8015404:	6839      	ldr	r1, [r7, #0]
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	4798      	blx	r3
 801540a:	4603      	mov	r3, r0
 801540c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801540e:	e004      	b.n	801541a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015410:	2303      	movs	r3, #3
 8015412:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015414:	e001      	b.n	801541a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015416:	2303      	movs	r3, #3
 8015418:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	88db      	ldrh	r3, [r3, #6]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d110      	bne.n	8015444 <USBD_StdItfReq+0xc0>
 8015422:	7bfb      	ldrb	r3, [r7, #15]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d10d      	bne.n	8015444 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f000 fdfd 	bl	8016028 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801542e:	e009      	b.n	8015444 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015430:	6839      	ldr	r1, [r7, #0]
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	f000 fd21 	bl	8015e7a <USBD_CtlError>
          break;
 8015438:	e004      	b.n	8015444 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801543a:	6839      	ldr	r1, [r7, #0]
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f000 fd1c 	bl	8015e7a <USBD_CtlError>
          break;
 8015442:	e000      	b.n	8015446 <USBD_StdItfReq+0xc2>
          break;
 8015444:	bf00      	nop
      }
      break;
 8015446:	e004      	b.n	8015452 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015448:	6839      	ldr	r1, [r7, #0]
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f000 fd15 	bl	8015e7a <USBD_CtlError>
      break;
 8015450:	bf00      	nop
  }

  return ret;
 8015452:	7bfb      	ldrb	r3, [r7, #15]
}
 8015454:	4618      	mov	r0, r3
 8015456:	3710      	adds	r7, #16
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}

0801545c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015466:	2300      	movs	r3, #0
 8015468:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	889b      	ldrh	r3, [r3, #4]
 801546e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015478:	2b40      	cmp	r3, #64	@ 0x40
 801547a:	d007      	beq.n	801548c <USBD_StdEPReq+0x30>
 801547c:	2b40      	cmp	r3, #64	@ 0x40
 801547e:	f200 817f 	bhi.w	8015780 <USBD_StdEPReq+0x324>
 8015482:	2b00      	cmp	r3, #0
 8015484:	d02a      	beq.n	80154dc <USBD_StdEPReq+0x80>
 8015486:	2b20      	cmp	r3, #32
 8015488:	f040 817a 	bne.w	8015780 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801548c:	7bbb      	ldrb	r3, [r7, #14]
 801548e:	4619      	mov	r1, r3
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f7ff fe85 	bl	80151a0 <USBD_CoreFindEP>
 8015496:	4603      	mov	r3, r0
 8015498:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801549a:	7b7b      	ldrb	r3, [r7, #13]
 801549c:	2bff      	cmp	r3, #255	@ 0xff
 801549e:	f000 8174 	beq.w	801578a <USBD_StdEPReq+0x32e>
 80154a2:	7b7b      	ldrb	r3, [r7, #13]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f040 8170 	bne.w	801578a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80154aa:	7b7a      	ldrb	r2, [r7, #13]
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80154b2:	7b7a      	ldrb	r2, [r7, #13]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	32ae      	adds	r2, #174	@ 0xae
 80154b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154bc:	689b      	ldr	r3, [r3, #8]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	f000 8163 	beq.w	801578a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80154c4:	7b7a      	ldrb	r2, [r7, #13]
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	32ae      	adds	r2, #174	@ 0xae
 80154ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ce:	689b      	ldr	r3, [r3, #8]
 80154d0:	6839      	ldr	r1, [r7, #0]
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	4798      	blx	r3
 80154d6:	4603      	mov	r3, r0
 80154d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80154da:	e156      	b.n	801578a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	785b      	ldrb	r3, [r3, #1]
 80154e0:	2b03      	cmp	r3, #3
 80154e2:	d008      	beq.n	80154f6 <USBD_StdEPReq+0x9a>
 80154e4:	2b03      	cmp	r3, #3
 80154e6:	f300 8145 	bgt.w	8015774 <USBD_StdEPReq+0x318>
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	f000 809b 	beq.w	8015626 <USBD_StdEPReq+0x1ca>
 80154f0:	2b01      	cmp	r3, #1
 80154f2:	d03c      	beq.n	801556e <USBD_StdEPReq+0x112>
 80154f4:	e13e      	b.n	8015774 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	2b02      	cmp	r3, #2
 8015500:	d002      	beq.n	8015508 <USBD_StdEPReq+0xac>
 8015502:	2b03      	cmp	r3, #3
 8015504:	d016      	beq.n	8015534 <USBD_StdEPReq+0xd8>
 8015506:	e02c      	b.n	8015562 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015508:	7bbb      	ldrb	r3, [r7, #14]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d00d      	beq.n	801552a <USBD_StdEPReq+0xce>
 801550e:	7bbb      	ldrb	r3, [r7, #14]
 8015510:	2b80      	cmp	r3, #128	@ 0x80
 8015512:	d00a      	beq.n	801552a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015514:	7bbb      	ldrb	r3, [r7, #14]
 8015516:	4619      	mov	r1, r3
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	f004 feb7 	bl	801a28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801551e:	2180      	movs	r1, #128	@ 0x80
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f004 feb3 	bl	801a28c <USBD_LL_StallEP>
 8015526:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015528:	e020      	b.n	801556c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801552a:	6839      	ldr	r1, [r7, #0]
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f000 fca4 	bl	8015e7a <USBD_CtlError>
              break;
 8015532:	e01b      	b.n	801556c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015534:	683b      	ldr	r3, [r7, #0]
 8015536:	885b      	ldrh	r3, [r3, #2]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d10e      	bne.n	801555a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801553c:	7bbb      	ldrb	r3, [r7, #14]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d00b      	beq.n	801555a <USBD_StdEPReq+0xfe>
 8015542:	7bbb      	ldrb	r3, [r7, #14]
 8015544:	2b80      	cmp	r3, #128	@ 0x80
 8015546:	d008      	beq.n	801555a <USBD_StdEPReq+0xfe>
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	88db      	ldrh	r3, [r3, #6]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d104      	bne.n	801555a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015550:	7bbb      	ldrb	r3, [r7, #14]
 8015552:	4619      	mov	r1, r3
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f004 fe99 	bl	801a28c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f000 fd64 	bl	8016028 <USBD_CtlSendStatus>

              break;
 8015560:	e004      	b.n	801556c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015562:	6839      	ldr	r1, [r7, #0]
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f000 fc88 	bl	8015e7a <USBD_CtlError>
              break;
 801556a:	bf00      	nop
          }
          break;
 801556c:	e107      	b.n	801577e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015574:	b2db      	uxtb	r3, r3
 8015576:	2b02      	cmp	r3, #2
 8015578:	d002      	beq.n	8015580 <USBD_StdEPReq+0x124>
 801557a:	2b03      	cmp	r3, #3
 801557c:	d016      	beq.n	80155ac <USBD_StdEPReq+0x150>
 801557e:	e04b      	b.n	8015618 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015580:	7bbb      	ldrb	r3, [r7, #14]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d00d      	beq.n	80155a2 <USBD_StdEPReq+0x146>
 8015586:	7bbb      	ldrb	r3, [r7, #14]
 8015588:	2b80      	cmp	r3, #128	@ 0x80
 801558a:	d00a      	beq.n	80155a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801558c:	7bbb      	ldrb	r3, [r7, #14]
 801558e:	4619      	mov	r1, r3
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f004 fe7b 	bl	801a28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015596:	2180      	movs	r1, #128	@ 0x80
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	f004 fe77 	bl	801a28c <USBD_LL_StallEP>
 801559e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80155a0:	e040      	b.n	8015624 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80155a2:	6839      	ldr	r1, [r7, #0]
 80155a4:	6878      	ldr	r0, [r7, #4]
 80155a6:	f000 fc68 	bl	8015e7a <USBD_CtlError>
              break;
 80155aa:	e03b      	b.n	8015624 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	885b      	ldrh	r3, [r3, #2]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d136      	bne.n	8015622 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80155b4:	7bbb      	ldrb	r3, [r7, #14]
 80155b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d004      	beq.n	80155c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80155be:	7bbb      	ldrb	r3, [r7, #14]
 80155c0:	4619      	mov	r1, r3
 80155c2:	6878      	ldr	r0, [r7, #4]
 80155c4:	f004 fe81 	bl	801a2ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f000 fd2d 	bl	8016028 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80155ce:	7bbb      	ldrb	r3, [r7, #14]
 80155d0:	4619      	mov	r1, r3
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f7ff fde4 	bl	80151a0 <USBD_CoreFindEP>
 80155d8:	4603      	mov	r3, r0
 80155da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80155dc:	7b7b      	ldrb	r3, [r7, #13]
 80155de:	2bff      	cmp	r3, #255	@ 0xff
 80155e0:	d01f      	beq.n	8015622 <USBD_StdEPReq+0x1c6>
 80155e2:	7b7b      	ldrb	r3, [r7, #13]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d11c      	bne.n	8015622 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80155e8:	7b7a      	ldrb	r2, [r7, #13]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80155f0:	7b7a      	ldrb	r2, [r7, #13]
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	32ae      	adds	r2, #174	@ 0xae
 80155f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155fa:	689b      	ldr	r3, [r3, #8]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d010      	beq.n	8015622 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015600:	7b7a      	ldrb	r2, [r7, #13]
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	32ae      	adds	r2, #174	@ 0xae
 8015606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801560a:	689b      	ldr	r3, [r3, #8]
 801560c:	6839      	ldr	r1, [r7, #0]
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	4798      	blx	r3
 8015612:	4603      	mov	r3, r0
 8015614:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015616:	e004      	b.n	8015622 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015618:	6839      	ldr	r1, [r7, #0]
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f000 fc2d 	bl	8015e7a <USBD_CtlError>
              break;
 8015620:	e000      	b.n	8015624 <USBD_StdEPReq+0x1c8>
              break;
 8015622:	bf00      	nop
          }
          break;
 8015624:	e0ab      	b.n	801577e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801562c:	b2db      	uxtb	r3, r3
 801562e:	2b02      	cmp	r3, #2
 8015630:	d002      	beq.n	8015638 <USBD_StdEPReq+0x1dc>
 8015632:	2b03      	cmp	r3, #3
 8015634:	d032      	beq.n	801569c <USBD_StdEPReq+0x240>
 8015636:	e097      	b.n	8015768 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015638:	7bbb      	ldrb	r3, [r7, #14]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d007      	beq.n	801564e <USBD_StdEPReq+0x1f2>
 801563e:	7bbb      	ldrb	r3, [r7, #14]
 8015640:	2b80      	cmp	r3, #128	@ 0x80
 8015642:	d004      	beq.n	801564e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015644:	6839      	ldr	r1, [r7, #0]
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f000 fc17 	bl	8015e7a <USBD_CtlError>
                break;
 801564c:	e091      	b.n	8015772 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801564e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015652:	2b00      	cmp	r3, #0
 8015654:	da0b      	bge.n	801566e <USBD_StdEPReq+0x212>
 8015656:	7bbb      	ldrb	r3, [r7, #14]
 8015658:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801565c:	4613      	mov	r3, r2
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	4413      	add	r3, r2
 8015662:	009b      	lsls	r3, r3, #2
 8015664:	3310      	adds	r3, #16
 8015666:	687a      	ldr	r2, [r7, #4]
 8015668:	4413      	add	r3, r2
 801566a:	3304      	adds	r3, #4
 801566c:	e00b      	b.n	8015686 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801566e:	7bbb      	ldrb	r3, [r7, #14]
 8015670:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015674:	4613      	mov	r3, r2
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	4413      	add	r3, r2
 801567a:	009b      	lsls	r3, r3, #2
 801567c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015680:	687a      	ldr	r2, [r7, #4]
 8015682:	4413      	add	r3, r2
 8015684:	3304      	adds	r3, #4
 8015686:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	2200      	movs	r2, #0
 801568c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801568e:	68bb      	ldr	r3, [r7, #8]
 8015690:	2202      	movs	r2, #2
 8015692:	4619      	mov	r1, r3
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f000 fc6d 	bl	8015f74 <USBD_CtlSendData>
              break;
 801569a:	e06a      	b.n	8015772 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801569c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	da11      	bge.n	80156c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80156a4:	7bbb      	ldrb	r3, [r7, #14]
 80156a6:	f003 020f 	and.w	r2, r3, #15
 80156aa:	6879      	ldr	r1, [r7, #4]
 80156ac:	4613      	mov	r3, r2
 80156ae:	009b      	lsls	r3, r3, #2
 80156b0:	4413      	add	r3, r2
 80156b2:	009b      	lsls	r3, r3, #2
 80156b4:	440b      	add	r3, r1
 80156b6:	3324      	adds	r3, #36	@ 0x24
 80156b8:	881b      	ldrh	r3, [r3, #0]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d117      	bne.n	80156ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80156be:	6839      	ldr	r1, [r7, #0]
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f000 fbda 	bl	8015e7a <USBD_CtlError>
                  break;
 80156c6:	e054      	b.n	8015772 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80156c8:	7bbb      	ldrb	r3, [r7, #14]
 80156ca:	f003 020f 	and.w	r2, r3, #15
 80156ce:	6879      	ldr	r1, [r7, #4]
 80156d0:	4613      	mov	r3, r2
 80156d2:	009b      	lsls	r3, r3, #2
 80156d4:	4413      	add	r3, r2
 80156d6:	009b      	lsls	r3, r3, #2
 80156d8:	440b      	add	r3, r1
 80156da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80156de:	881b      	ldrh	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d104      	bne.n	80156ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80156e4:	6839      	ldr	r1, [r7, #0]
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	f000 fbc7 	bl	8015e7a <USBD_CtlError>
                  break;
 80156ec:	e041      	b.n	8015772 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80156ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	da0b      	bge.n	801570e <USBD_StdEPReq+0x2b2>
 80156f6:	7bbb      	ldrb	r3, [r7, #14]
 80156f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80156fc:	4613      	mov	r3, r2
 80156fe:	009b      	lsls	r3, r3, #2
 8015700:	4413      	add	r3, r2
 8015702:	009b      	lsls	r3, r3, #2
 8015704:	3310      	adds	r3, #16
 8015706:	687a      	ldr	r2, [r7, #4]
 8015708:	4413      	add	r3, r2
 801570a:	3304      	adds	r3, #4
 801570c:	e00b      	b.n	8015726 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801570e:	7bbb      	ldrb	r3, [r7, #14]
 8015710:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015714:	4613      	mov	r3, r2
 8015716:	009b      	lsls	r3, r3, #2
 8015718:	4413      	add	r3, r2
 801571a:	009b      	lsls	r3, r3, #2
 801571c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015720:	687a      	ldr	r2, [r7, #4]
 8015722:	4413      	add	r3, r2
 8015724:	3304      	adds	r3, #4
 8015726:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015728:	7bbb      	ldrb	r3, [r7, #14]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d002      	beq.n	8015734 <USBD_StdEPReq+0x2d8>
 801572e:	7bbb      	ldrb	r3, [r7, #14]
 8015730:	2b80      	cmp	r3, #128	@ 0x80
 8015732:	d103      	bne.n	801573c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	2200      	movs	r2, #0
 8015738:	601a      	str	r2, [r3, #0]
 801573a:	e00e      	b.n	801575a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801573c:	7bbb      	ldrb	r3, [r7, #14]
 801573e:	4619      	mov	r1, r3
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f004 fde1 	bl	801a308 <USBD_LL_IsStallEP>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d003      	beq.n	8015754 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	2201      	movs	r2, #1
 8015750:	601a      	str	r2, [r3, #0]
 8015752:	e002      	b.n	801575a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	2200      	movs	r2, #0
 8015758:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801575a:	68bb      	ldr	r3, [r7, #8]
 801575c:	2202      	movs	r2, #2
 801575e:	4619      	mov	r1, r3
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f000 fc07 	bl	8015f74 <USBD_CtlSendData>
              break;
 8015766:	e004      	b.n	8015772 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015768:	6839      	ldr	r1, [r7, #0]
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f000 fb85 	bl	8015e7a <USBD_CtlError>
              break;
 8015770:	bf00      	nop
          }
          break;
 8015772:	e004      	b.n	801577e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015774:	6839      	ldr	r1, [r7, #0]
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f000 fb7f 	bl	8015e7a <USBD_CtlError>
          break;
 801577c:	bf00      	nop
      }
      break;
 801577e:	e005      	b.n	801578c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015780:	6839      	ldr	r1, [r7, #0]
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f000 fb79 	bl	8015e7a <USBD_CtlError>
      break;
 8015788:	e000      	b.n	801578c <USBD_StdEPReq+0x330>
      break;
 801578a:	bf00      	nop
  }

  return ret;
 801578c:	7bfb      	ldrb	r3, [r7, #15]
}
 801578e:	4618      	mov	r0, r3
 8015790:	3710      	adds	r7, #16
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}
	...

08015798 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b084      	sub	sp, #16
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80157a2:	2300      	movs	r3, #0
 80157a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80157a6:	2300      	movs	r3, #0
 80157a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80157aa:	2300      	movs	r3, #0
 80157ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	885b      	ldrh	r3, [r3, #2]
 80157b2:	0a1b      	lsrs	r3, r3, #8
 80157b4:	b29b      	uxth	r3, r3
 80157b6:	3b01      	subs	r3, #1
 80157b8:	2b0e      	cmp	r3, #14
 80157ba:	f200 8152 	bhi.w	8015a62 <USBD_GetDescriptor+0x2ca>
 80157be:	a201      	add	r2, pc, #4	@ (adr r2, 80157c4 <USBD_GetDescriptor+0x2c>)
 80157c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157c4:	08015835 	.word	0x08015835
 80157c8:	0801584d 	.word	0x0801584d
 80157cc:	0801588d 	.word	0x0801588d
 80157d0:	08015a63 	.word	0x08015a63
 80157d4:	08015a63 	.word	0x08015a63
 80157d8:	08015a03 	.word	0x08015a03
 80157dc:	08015a2f 	.word	0x08015a2f
 80157e0:	08015a63 	.word	0x08015a63
 80157e4:	08015a63 	.word	0x08015a63
 80157e8:	08015a63 	.word	0x08015a63
 80157ec:	08015a63 	.word	0x08015a63
 80157f0:	08015a63 	.word	0x08015a63
 80157f4:	08015a63 	.word	0x08015a63
 80157f8:	08015a63 	.word	0x08015a63
 80157fc:	08015801 	.word	0x08015801
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015806:	69db      	ldr	r3, [r3, #28]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d00b      	beq.n	8015824 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015812:	69db      	ldr	r3, [r3, #28]
 8015814:	687a      	ldr	r2, [r7, #4]
 8015816:	7c12      	ldrb	r2, [r2, #16]
 8015818:	f107 0108 	add.w	r1, r7, #8
 801581c:	4610      	mov	r0, r2
 801581e:	4798      	blx	r3
 8015820:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015822:	e126      	b.n	8015a72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015824:	6839      	ldr	r1, [r7, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f000 fb27 	bl	8015e7a <USBD_CtlError>
        err++;
 801582c:	7afb      	ldrb	r3, [r7, #11]
 801582e:	3301      	adds	r3, #1
 8015830:	72fb      	strb	r3, [r7, #11]
      break;
 8015832:	e11e      	b.n	8015a72 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	687a      	ldr	r2, [r7, #4]
 801583e:	7c12      	ldrb	r2, [r2, #16]
 8015840:	f107 0108 	add.w	r1, r7, #8
 8015844:	4610      	mov	r0, r2
 8015846:	4798      	blx	r3
 8015848:	60f8      	str	r0, [r7, #12]
      break;
 801584a:	e112      	b.n	8015a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	7c1b      	ldrb	r3, [r3, #16]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d10d      	bne.n	8015870 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801585a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801585c:	f107 0208 	add.w	r2, r7, #8
 8015860:	4610      	mov	r0, r2
 8015862:	4798      	blx	r3
 8015864:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	3301      	adds	r3, #1
 801586a:	2202      	movs	r2, #2
 801586c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801586e:	e100      	b.n	8015a72 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015878:	f107 0208 	add.w	r2, r7, #8
 801587c:	4610      	mov	r0, r2
 801587e:	4798      	blx	r3
 8015880:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	3301      	adds	r3, #1
 8015886:	2202      	movs	r2, #2
 8015888:	701a      	strb	r2, [r3, #0]
      break;
 801588a:	e0f2      	b.n	8015a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	885b      	ldrh	r3, [r3, #2]
 8015890:	b2db      	uxtb	r3, r3
 8015892:	2b05      	cmp	r3, #5
 8015894:	f200 80ac 	bhi.w	80159f0 <USBD_GetDescriptor+0x258>
 8015898:	a201      	add	r2, pc, #4	@ (adr r2, 80158a0 <USBD_GetDescriptor+0x108>)
 801589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801589e:	bf00      	nop
 80158a0:	080158b9 	.word	0x080158b9
 80158a4:	080158ed 	.word	0x080158ed
 80158a8:	08015921 	.word	0x08015921
 80158ac:	08015955 	.word	0x08015955
 80158b0:	08015989 	.word	0x08015989
 80158b4:	080159bd 	.word	0x080159bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d00b      	beq.n	80158dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80158ca:	685b      	ldr	r3, [r3, #4]
 80158cc:	687a      	ldr	r2, [r7, #4]
 80158ce:	7c12      	ldrb	r2, [r2, #16]
 80158d0:	f107 0108 	add.w	r1, r7, #8
 80158d4:	4610      	mov	r0, r2
 80158d6:	4798      	blx	r3
 80158d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80158da:	e091      	b.n	8015a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80158dc:	6839      	ldr	r1, [r7, #0]
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	f000 facb 	bl	8015e7a <USBD_CtlError>
            err++;
 80158e4:	7afb      	ldrb	r3, [r7, #11]
 80158e6:	3301      	adds	r3, #1
 80158e8:	72fb      	strb	r3, [r7, #11]
          break;
 80158ea:	e089      	b.n	8015a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80158f2:	689b      	ldr	r3, [r3, #8]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d00b      	beq.n	8015910 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80158fe:	689b      	ldr	r3, [r3, #8]
 8015900:	687a      	ldr	r2, [r7, #4]
 8015902:	7c12      	ldrb	r2, [r2, #16]
 8015904:	f107 0108 	add.w	r1, r7, #8
 8015908:	4610      	mov	r0, r2
 801590a:	4798      	blx	r3
 801590c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801590e:	e077      	b.n	8015a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015910:	6839      	ldr	r1, [r7, #0]
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f000 fab1 	bl	8015e7a <USBD_CtlError>
            err++;
 8015918:	7afb      	ldrb	r3, [r7, #11]
 801591a:	3301      	adds	r3, #1
 801591c:	72fb      	strb	r3, [r7, #11]
          break;
 801591e:	e06f      	b.n	8015a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015926:	68db      	ldr	r3, [r3, #12]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d00b      	beq.n	8015944 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	687a      	ldr	r2, [r7, #4]
 8015936:	7c12      	ldrb	r2, [r2, #16]
 8015938:	f107 0108 	add.w	r1, r7, #8
 801593c:	4610      	mov	r0, r2
 801593e:	4798      	blx	r3
 8015940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015942:	e05d      	b.n	8015a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015944:	6839      	ldr	r1, [r7, #0]
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f000 fa97 	bl	8015e7a <USBD_CtlError>
            err++;
 801594c:	7afb      	ldrb	r3, [r7, #11]
 801594e:	3301      	adds	r3, #1
 8015950:	72fb      	strb	r3, [r7, #11]
          break;
 8015952:	e055      	b.n	8015a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801595a:	691b      	ldr	r3, [r3, #16]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d00b      	beq.n	8015978 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015966:	691b      	ldr	r3, [r3, #16]
 8015968:	687a      	ldr	r2, [r7, #4]
 801596a:	7c12      	ldrb	r2, [r2, #16]
 801596c:	f107 0108 	add.w	r1, r7, #8
 8015970:	4610      	mov	r0, r2
 8015972:	4798      	blx	r3
 8015974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015976:	e043      	b.n	8015a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015978:	6839      	ldr	r1, [r7, #0]
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f000 fa7d 	bl	8015e7a <USBD_CtlError>
            err++;
 8015980:	7afb      	ldrb	r3, [r7, #11]
 8015982:	3301      	adds	r3, #1
 8015984:	72fb      	strb	r3, [r7, #11]
          break;
 8015986:	e03b      	b.n	8015a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801598e:	695b      	ldr	r3, [r3, #20]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d00b      	beq.n	80159ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801599a:	695b      	ldr	r3, [r3, #20]
 801599c:	687a      	ldr	r2, [r7, #4]
 801599e:	7c12      	ldrb	r2, [r2, #16]
 80159a0:	f107 0108 	add.w	r1, r7, #8
 80159a4:	4610      	mov	r0, r2
 80159a6:	4798      	blx	r3
 80159a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159aa:	e029      	b.n	8015a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f000 fa63 	bl	8015e7a <USBD_CtlError>
            err++;
 80159b4:	7afb      	ldrb	r3, [r7, #11]
 80159b6:	3301      	adds	r3, #1
 80159b8:	72fb      	strb	r3, [r7, #11]
          break;
 80159ba:	e021      	b.n	8015a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80159c2:	699b      	ldr	r3, [r3, #24]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d00b      	beq.n	80159e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80159ce:	699b      	ldr	r3, [r3, #24]
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	7c12      	ldrb	r2, [r2, #16]
 80159d4:	f107 0108 	add.w	r1, r7, #8
 80159d8:	4610      	mov	r0, r2
 80159da:	4798      	blx	r3
 80159dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159de:	e00f      	b.n	8015a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80159e0:	6839      	ldr	r1, [r7, #0]
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f000 fa49 	bl	8015e7a <USBD_CtlError>
            err++;
 80159e8:	7afb      	ldrb	r3, [r7, #11]
 80159ea:	3301      	adds	r3, #1
 80159ec:	72fb      	strb	r3, [r7, #11]
          break;
 80159ee:	e007      	b.n	8015a00 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80159f0:	6839      	ldr	r1, [r7, #0]
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f000 fa41 	bl	8015e7a <USBD_CtlError>
          err++;
 80159f8:	7afb      	ldrb	r3, [r7, #11]
 80159fa:	3301      	adds	r3, #1
 80159fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80159fe:	bf00      	nop
      }
      break;
 8015a00:	e037      	b.n	8015a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	7c1b      	ldrb	r3, [r3, #16]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d109      	bne.n	8015a1e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a12:	f107 0208 	add.w	r2, r7, #8
 8015a16:	4610      	mov	r0, r2
 8015a18:	4798      	blx	r3
 8015a1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a1c:	e029      	b.n	8015a72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015a1e:	6839      	ldr	r1, [r7, #0]
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f000 fa2a 	bl	8015e7a <USBD_CtlError>
        err++;
 8015a26:	7afb      	ldrb	r3, [r7, #11]
 8015a28:	3301      	adds	r3, #1
 8015a2a:	72fb      	strb	r3, [r7, #11]
      break;
 8015a2c:	e021      	b.n	8015a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	7c1b      	ldrb	r3, [r3, #16]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d10d      	bne.n	8015a52 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a3e:	f107 0208 	add.w	r2, r7, #8
 8015a42:	4610      	mov	r0, r2
 8015a44:	4798      	blx	r3
 8015a46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	2207      	movs	r2, #7
 8015a4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a50:	e00f      	b.n	8015a72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015a52:	6839      	ldr	r1, [r7, #0]
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f000 fa10 	bl	8015e7a <USBD_CtlError>
        err++;
 8015a5a:	7afb      	ldrb	r3, [r7, #11]
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	72fb      	strb	r3, [r7, #11]
      break;
 8015a60:	e007      	b.n	8015a72 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015a62:	6839      	ldr	r1, [r7, #0]
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	f000 fa08 	bl	8015e7a <USBD_CtlError>
      err++;
 8015a6a:	7afb      	ldrb	r3, [r7, #11]
 8015a6c:	3301      	adds	r3, #1
 8015a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8015a70:	bf00      	nop
  }

  if (err != 0U)
 8015a72:	7afb      	ldrb	r3, [r7, #11]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d11e      	bne.n	8015ab6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	88db      	ldrh	r3, [r3, #6]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d016      	beq.n	8015aae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015a80:	893b      	ldrh	r3, [r7, #8]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d00e      	beq.n	8015aa4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	88da      	ldrh	r2, [r3, #6]
 8015a8a:	893b      	ldrh	r3, [r7, #8]
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	bf28      	it	cs
 8015a90:	4613      	movcs	r3, r2
 8015a92:	b29b      	uxth	r3, r3
 8015a94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015a96:	893b      	ldrh	r3, [r7, #8]
 8015a98:	461a      	mov	r2, r3
 8015a9a:	68f9      	ldr	r1, [r7, #12]
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f000 fa69 	bl	8015f74 <USBD_CtlSendData>
 8015aa2:	e009      	b.n	8015ab8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015aa4:	6839      	ldr	r1, [r7, #0]
 8015aa6:	6878      	ldr	r0, [r7, #4]
 8015aa8:	f000 f9e7 	bl	8015e7a <USBD_CtlError>
 8015aac:	e004      	b.n	8015ab8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f000 faba 	bl	8016028 <USBD_CtlSendStatus>
 8015ab4:	e000      	b.n	8015ab8 <USBD_GetDescriptor+0x320>
    return;
 8015ab6:	bf00      	nop
  }
}
 8015ab8:	3710      	adds	r7, #16
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
 8015abe:	bf00      	nop

08015ac0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b084      	sub	sp, #16
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	889b      	ldrh	r3, [r3, #4]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d131      	bne.n	8015b36 <USBD_SetAddress+0x76>
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	88db      	ldrh	r3, [r3, #6]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d12d      	bne.n	8015b36 <USBD_SetAddress+0x76>
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	885b      	ldrh	r3, [r3, #2]
 8015ade:	2b7f      	cmp	r3, #127	@ 0x7f
 8015ae0:	d829      	bhi.n	8015b36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	885b      	ldrh	r3, [r3, #2]
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015aec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015af4:	b2db      	uxtb	r3, r3
 8015af6:	2b03      	cmp	r3, #3
 8015af8:	d104      	bne.n	8015b04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015afa:	6839      	ldr	r1, [r7, #0]
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f000 f9bc 	bl	8015e7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b02:	e01d      	b.n	8015b40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	7bfa      	ldrb	r2, [r7, #15]
 8015b08:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015b0c:	7bfb      	ldrb	r3, [r7, #15]
 8015b0e:	4619      	mov	r1, r3
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f004 fc25 	bl	801a360 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f000 fa86 	bl	8016028 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015b1c:	7bfb      	ldrb	r3, [r7, #15]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d004      	beq.n	8015b2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	2202      	movs	r2, #2
 8015b26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b2a:	e009      	b.n	8015b40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2201      	movs	r2, #1
 8015b30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b34:	e004      	b.n	8015b40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015b36:	6839      	ldr	r1, [r7, #0]
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f000 f99e 	bl	8015e7a <USBD_CtlError>
  }
}
 8015b3e:	bf00      	nop
 8015b40:	bf00      	nop
 8015b42:	3710      	adds	r7, #16
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}

08015b48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b084      	sub	sp, #16
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b52:	2300      	movs	r3, #0
 8015b54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	885b      	ldrh	r3, [r3, #2]
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015b5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015b60:	4b4d      	ldr	r3, [pc, #308]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	2b01      	cmp	r3, #1
 8015b66:	d905      	bls.n	8015b74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015b68:	6839      	ldr	r1, [r7, #0]
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f000 f985 	bl	8015e7a <USBD_CtlError>
    return USBD_FAIL;
 8015b70:	2303      	movs	r3, #3
 8015b72:	e08c      	b.n	8015c8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b7a:	b2db      	uxtb	r3, r3
 8015b7c:	2b02      	cmp	r3, #2
 8015b7e:	d002      	beq.n	8015b86 <USBD_SetConfig+0x3e>
 8015b80:	2b03      	cmp	r3, #3
 8015b82:	d029      	beq.n	8015bd8 <USBD_SetConfig+0x90>
 8015b84:	e075      	b.n	8015c72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015b86:	4b44      	ldr	r3, [pc, #272]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015b88:	781b      	ldrb	r3, [r3, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d020      	beq.n	8015bd0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015b8e:	4b42      	ldr	r3, [pc, #264]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	461a      	mov	r2, r3
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015b98:	4b3f      	ldr	r3, [pc, #252]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	4619      	mov	r1, r3
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f7ff f84b 	bl	8014c3a <USBD_SetClassConfig>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015ba8:	7bfb      	ldrb	r3, [r7, #15]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d008      	beq.n	8015bc0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015bae:	6839      	ldr	r1, [r7, #0]
 8015bb0:	6878      	ldr	r0, [r7, #4]
 8015bb2:	f000 f962 	bl	8015e7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2202      	movs	r2, #2
 8015bba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015bbe:	e065      	b.n	8015c8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f000 fa31 	bl	8016028 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	2203      	movs	r2, #3
 8015bca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015bce:	e05d      	b.n	8015c8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f000 fa29 	bl	8016028 <USBD_CtlSendStatus>
      break;
 8015bd6:	e059      	b.n	8015c8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d112      	bne.n	8015c06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2202      	movs	r2, #2
 8015be4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8015be8:	4b2b      	ldr	r3, [pc, #172]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	461a      	mov	r2, r3
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015bf2:	4b29      	ldr	r3, [pc, #164]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	4619      	mov	r1, r3
 8015bf8:	6878      	ldr	r0, [r7, #4]
 8015bfa:	f7ff f83a 	bl	8014c72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f000 fa12 	bl	8016028 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015c04:	e042      	b.n	8015c8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015c06:	4b24      	ldr	r3, [pc, #144]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015c08:	781b      	ldrb	r3, [r3, #0]
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d02a      	beq.n	8015c6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	b2db      	uxtb	r3, r3
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f7ff f828 	bl	8014c72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015c22:	4b1d      	ldr	r3, [pc, #116]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	461a      	mov	r2, r3
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	4619      	mov	r1, r3
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f7ff f801 	bl	8014c3a <USBD_SetClassConfig>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015c3c:	7bfb      	ldrb	r3, [r7, #15]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d00f      	beq.n	8015c62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015c42:	6839      	ldr	r1, [r7, #0]
 8015c44:	6878      	ldr	r0, [r7, #4]
 8015c46:	f000 f918 	bl	8015e7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	685b      	ldr	r3, [r3, #4]
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	4619      	mov	r1, r3
 8015c52:	6878      	ldr	r0, [r7, #4]
 8015c54:	f7ff f80d 	bl	8014c72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	2202      	movs	r2, #2
 8015c5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015c60:	e014      	b.n	8015c8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 f9e0 	bl	8016028 <USBD_CtlSendStatus>
      break;
 8015c68:	e010      	b.n	8015c8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f000 f9dc 	bl	8016028 <USBD_CtlSendStatus>
      break;
 8015c70:	e00c      	b.n	8015c8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015c72:	6839      	ldr	r1, [r7, #0]
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f000 f900 	bl	8015e7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015c7a:	4b07      	ldr	r3, [pc, #28]	@ (8015c98 <USBD_SetConfig+0x150>)
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	4619      	mov	r1, r3
 8015c80:	6878      	ldr	r0, [r7, #4]
 8015c82:	f7fe fff6 	bl	8014c72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015c86:	2303      	movs	r3, #3
 8015c88:	73fb      	strb	r3, [r7, #15]
      break;
 8015c8a:	bf00      	nop
  }

  return ret;
 8015c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3710      	adds	r7, #16
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}
 8015c96:	bf00      	nop
 8015c98:	20001554 	.word	0x20001554

08015c9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b082      	sub	sp, #8
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
 8015ca4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015ca6:	683b      	ldr	r3, [r7, #0]
 8015ca8:	88db      	ldrh	r3, [r3, #6]
 8015caa:	2b01      	cmp	r3, #1
 8015cac:	d004      	beq.n	8015cb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015cae:	6839      	ldr	r1, [r7, #0]
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f000 f8e2 	bl	8015e7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015cb6:	e023      	b.n	8015d00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	2b02      	cmp	r3, #2
 8015cc2:	dc02      	bgt.n	8015cca <USBD_GetConfig+0x2e>
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	dc03      	bgt.n	8015cd0 <USBD_GetConfig+0x34>
 8015cc8:	e015      	b.n	8015cf6 <USBD_GetConfig+0x5a>
 8015cca:	2b03      	cmp	r3, #3
 8015ccc:	d00b      	beq.n	8015ce6 <USBD_GetConfig+0x4a>
 8015cce:	e012      	b.n	8015cf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	3308      	adds	r3, #8
 8015cda:	2201      	movs	r2, #1
 8015cdc:	4619      	mov	r1, r3
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f000 f948 	bl	8015f74 <USBD_CtlSendData>
        break;
 8015ce4:	e00c      	b.n	8015d00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	3304      	adds	r3, #4
 8015cea:	2201      	movs	r2, #1
 8015cec:	4619      	mov	r1, r3
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	f000 f940 	bl	8015f74 <USBD_CtlSendData>
        break;
 8015cf4:	e004      	b.n	8015d00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015cf6:	6839      	ldr	r1, [r7, #0]
 8015cf8:	6878      	ldr	r0, [r7, #4]
 8015cfa:	f000 f8be 	bl	8015e7a <USBD_CtlError>
        break;
 8015cfe:	bf00      	nop
}
 8015d00:	bf00      	nop
 8015d02:	3708      	adds	r7, #8
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b082      	sub	sp, #8
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
 8015d10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	3b01      	subs	r3, #1
 8015d1c:	2b02      	cmp	r3, #2
 8015d1e:	d81e      	bhi.n	8015d5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	88db      	ldrh	r3, [r3, #6]
 8015d24:	2b02      	cmp	r3, #2
 8015d26:	d004      	beq.n	8015d32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015d28:	6839      	ldr	r1, [r7, #0]
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f000 f8a5 	bl	8015e7a <USBD_CtlError>
        break;
 8015d30:	e01a      	b.n	8015d68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	2201      	movs	r2, #1
 8015d36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d005      	beq.n	8015d4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	68db      	ldr	r3, [r3, #12]
 8015d46:	f043 0202 	orr.w	r2, r3, #2
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	330c      	adds	r3, #12
 8015d52:	2202      	movs	r2, #2
 8015d54:	4619      	mov	r1, r3
 8015d56:	6878      	ldr	r0, [r7, #4]
 8015d58:	f000 f90c 	bl	8015f74 <USBD_CtlSendData>
      break;
 8015d5c:	e004      	b.n	8015d68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015d5e:	6839      	ldr	r1, [r7, #0]
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f000 f88a 	bl	8015e7a <USBD_CtlError>
      break;
 8015d66:	bf00      	nop
  }
}
 8015d68:	bf00      	nop
 8015d6a:	3708      	adds	r7, #8
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}

08015d70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	885b      	ldrh	r3, [r3, #2]
 8015d7e:	2b01      	cmp	r3, #1
 8015d80:	d107      	bne.n	8015d92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	2201      	movs	r2, #1
 8015d86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f000 f94c 	bl	8016028 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015d90:	e013      	b.n	8015dba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	885b      	ldrh	r3, [r3, #2]
 8015d96:	2b02      	cmp	r3, #2
 8015d98:	d10b      	bne.n	8015db2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	889b      	ldrh	r3, [r3, #4]
 8015d9e:	0a1b      	lsrs	r3, r3, #8
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	b2da      	uxtb	r2, r3
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f000 f93c 	bl	8016028 <USBD_CtlSendStatus>
}
 8015db0:	e003      	b.n	8015dba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015db2:	6839      	ldr	r1, [r7, #0]
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f000 f860 	bl	8015e7a <USBD_CtlError>
}
 8015dba:	bf00      	nop
 8015dbc:	3708      	adds	r7, #8
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}

08015dc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dc2:	b580      	push	{r7, lr}
 8015dc4:	b082      	sub	sp, #8
 8015dc6:	af00      	add	r7, sp, #0
 8015dc8:	6078      	str	r0, [r7, #4]
 8015dca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015dd2:	b2db      	uxtb	r3, r3
 8015dd4:	3b01      	subs	r3, #1
 8015dd6:	2b02      	cmp	r3, #2
 8015dd8:	d80b      	bhi.n	8015df2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	885b      	ldrh	r3, [r3, #2]
 8015dde:	2b01      	cmp	r3, #1
 8015de0:	d10c      	bne.n	8015dfc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2200      	movs	r2, #0
 8015de6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 f91c 	bl	8016028 <USBD_CtlSendStatus>
      }
      break;
 8015df0:	e004      	b.n	8015dfc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015df2:	6839      	ldr	r1, [r7, #0]
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f000 f840 	bl	8015e7a <USBD_CtlError>
      break;
 8015dfa:	e000      	b.n	8015dfe <USBD_ClrFeature+0x3c>
      break;
 8015dfc:	bf00      	nop
  }
}
 8015dfe:	bf00      	nop
 8015e00:	3708      	adds	r7, #8
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}

08015e06 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015e06:	b580      	push	{r7, lr}
 8015e08:	b084      	sub	sp, #16
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	6078      	str	r0, [r7, #4]
 8015e0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	781a      	ldrb	r2, [r3, #0]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	3301      	adds	r3, #1
 8015e20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	781a      	ldrb	r2, [r3, #0]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015e30:	68f8      	ldr	r0, [r7, #12]
 8015e32:	f7ff fa16 	bl	8015262 <SWAPBYTE>
 8015e36:	4603      	mov	r3, r0
 8015e38:	461a      	mov	r2, r3
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	3301      	adds	r3, #1
 8015e42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	3301      	adds	r3, #1
 8015e48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	f7ff fa09 	bl	8015262 <SWAPBYTE>
 8015e50:	4603      	mov	r3, r0
 8015e52:	461a      	mov	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	3301      	adds	r3, #1
 8015e62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015e64:	68f8      	ldr	r0, [r7, #12]
 8015e66:	f7ff f9fc 	bl	8015262 <SWAPBYTE>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	461a      	mov	r2, r3
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	80da      	strh	r2, [r3, #6]
}
 8015e72:	bf00      	nop
 8015e74:	3710      	adds	r7, #16
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}

08015e7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e7a:	b580      	push	{r7, lr}
 8015e7c:	b082      	sub	sp, #8
 8015e7e:	af00      	add	r7, sp, #0
 8015e80:	6078      	str	r0, [r7, #4]
 8015e82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e84:	2180      	movs	r1, #128	@ 0x80
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f004 fa00 	bl	801a28c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015e8c:	2100      	movs	r1, #0
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f004 f9fc 	bl	801a28c <USBD_LL_StallEP>
}
 8015e94:	bf00      	nop
 8015e96:	3708      	adds	r7, #8
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b086      	sub	sp, #24
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	60f8      	str	r0, [r7, #12]
 8015ea4:	60b9      	str	r1, [r7, #8]
 8015ea6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d042      	beq.n	8015f38 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8015eb6:	6938      	ldr	r0, [r7, #16]
 8015eb8:	f000 f842 	bl	8015f40 <USBD_GetLen>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	3301      	adds	r3, #1
 8015ec0:	005b      	lsls	r3, r3, #1
 8015ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ec6:	d808      	bhi.n	8015eda <USBD_GetString+0x3e>
 8015ec8:	6938      	ldr	r0, [r7, #16]
 8015eca:	f000 f839 	bl	8015f40 <USBD_GetLen>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	3301      	adds	r3, #1
 8015ed2:	b29b      	uxth	r3, r3
 8015ed4:	005b      	lsls	r3, r3, #1
 8015ed6:	b29a      	uxth	r2, r3
 8015ed8:	e001      	b.n	8015ede <USBD_GetString+0x42>
 8015eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015ee2:	7dfb      	ldrb	r3, [r7, #23]
 8015ee4:	68ba      	ldr	r2, [r7, #8]
 8015ee6:	4413      	add	r3, r2
 8015ee8:	687a      	ldr	r2, [r7, #4]
 8015eea:	7812      	ldrb	r2, [r2, #0]
 8015eec:	701a      	strb	r2, [r3, #0]
  idx++;
 8015eee:	7dfb      	ldrb	r3, [r7, #23]
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015ef4:	7dfb      	ldrb	r3, [r7, #23]
 8015ef6:	68ba      	ldr	r2, [r7, #8]
 8015ef8:	4413      	add	r3, r2
 8015efa:	2203      	movs	r2, #3
 8015efc:	701a      	strb	r2, [r3, #0]
  idx++;
 8015efe:	7dfb      	ldrb	r3, [r7, #23]
 8015f00:	3301      	adds	r3, #1
 8015f02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015f04:	e013      	b.n	8015f2e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8015f06:	7dfb      	ldrb	r3, [r7, #23]
 8015f08:	68ba      	ldr	r2, [r7, #8]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	693a      	ldr	r2, [r7, #16]
 8015f0e:	7812      	ldrb	r2, [r2, #0]
 8015f10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	3301      	adds	r3, #1
 8015f16:	613b      	str	r3, [r7, #16]
    idx++;
 8015f18:	7dfb      	ldrb	r3, [r7, #23]
 8015f1a:	3301      	adds	r3, #1
 8015f1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015f1e:	7dfb      	ldrb	r3, [r7, #23]
 8015f20:	68ba      	ldr	r2, [r7, #8]
 8015f22:	4413      	add	r3, r2
 8015f24:	2200      	movs	r2, #0
 8015f26:	701a      	strb	r2, [r3, #0]
    idx++;
 8015f28:	7dfb      	ldrb	r3, [r7, #23]
 8015f2a:	3301      	adds	r3, #1
 8015f2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015f2e:	693b      	ldr	r3, [r7, #16]
 8015f30:	781b      	ldrb	r3, [r3, #0]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d1e7      	bne.n	8015f06 <USBD_GetString+0x6a>
 8015f36:	e000      	b.n	8015f3a <USBD_GetString+0x9e>
    return;
 8015f38:	bf00      	nop
  }
}
 8015f3a:	3718      	adds	r7, #24
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}

08015f40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015f40:	b480      	push	{r7}
 8015f42:	b085      	sub	sp, #20
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015f50:	e005      	b.n	8015f5e <USBD_GetLen+0x1e>
  {
    len++;
 8015f52:	7bfb      	ldrb	r3, [r7, #15]
 8015f54:	3301      	adds	r3, #1
 8015f56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015f58:	68bb      	ldr	r3, [r7, #8]
 8015f5a:	3301      	adds	r3, #1
 8015f5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	781b      	ldrb	r3, [r3, #0]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d1f5      	bne.n	8015f52 <USBD_GetLen+0x12>
  }

  return len;
 8015f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3714      	adds	r7, #20
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f72:	4770      	bx	lr

08015f74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b084      	sub	sp, #16
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	2202      	movs	r2, #2
 8015f84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	687a      	ldr	r2, [r7, #4]
 8015f8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	687a      	ldr	r2, [r7, #4]
 8015f92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	68ba      	ldr	r2, [r7, #8]
 8015f98:	2100      	movs	r1, #0
 8015f9a:	68f8      	ldr	r0, [r7, #12]
 8015f9c:	f004 f9ff 	bl	801a39e <USBD_LL_Transmit>

  return USBD_OK;
 8015fa0:	2300      	movs	r3, #0
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	3710      	adds	r7, #16
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bd80      	pop	{r7, pc}

08015faa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015faa:	b580      	push	{r7, lr}
 8015fac:	b084      	sub	sp, #16
 8015fae:	af00      	add	r7, sp, #0
 8015fb0:	60f8      	str	r0, [r7, #12]
 8015fb2:	60b9      	str	r1, [r7, #8]
 8015fb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	68ba      	ldr	r2, [r7, #8]
 8015fba:	2100      	movs	r1, #0
 8015fbc:	68f8      	ldr	r0, [r7, #12]
 8015fbe:	f004 f9ee 	bl	801a39e <USBD_LL_Transmit>

  return USBD_OK;
 8015fc2:	2300      	movs	r3, #0
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3710      	adds	r7, #16
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b084      	sub	sp, #16
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	60f8      	str	r0, [r7, #12]
 8015fd4:	60b9      	str	r1, [r7, #8]
 8015fd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	2203      	movs	r2, #3
 8015fdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	687a      	ldr	r2, [r7, #4]
 8015fe4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	68ba      	ldr	r2, [r7, #8]
 8015ff4:	2100      	movs	r1, #0
 8015ff6:	68f8      	ldr	r0, [r7, #12]
 8015ff8:	f004 f9f2 	bl	801a3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015ffc:	2300      	movs	r3, #0
}
 8015ffe:	4618      	mov	r0, r3
 8016000:	3710      	adds	r7, #16
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}

08016006 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016006:	b580      	push	{r7, lr}
 8016008:	b084      	sub	sp, #16
 801600a:	af00      	add	r7, sp, #0
 801600c:	60f8      	str	r0, [r7, #12]
 801600e:	60b9      	str	r1, [r7, #8]
 8016010:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	68ba      	ldr	r2, [r7, #8]
 8016016:	2100      	movs	r1, #0
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	f004 f9e1 	bl	801a3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801601e:	2300      	movs	r3, #0
}
 8016020:	4618      	mov	r0, r3
 8016022:	3710      	adds	r7, #16
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}

08016028 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b082      	sub	sp, #8
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2204      	movs	r2, #4
 8016034:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016038:	2300      	movs	r3, #0
 801603a:	2200      	movs	r2, #0
 801603c:	2100      	movs	r1, #0
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f004 f9ad 	bl	801a39e <USBD_LL_Transmit>

  return USBD_OK;
 8016044:	2300      	movs	r3, #0
}
 8016046:	4618      	mov	r0, r3
 8016048:	3708      	adds	r7, #8
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}

0801604e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801604e:	b580      	push	{r7, lr}
 8016050:	b082      	sub	sp, #8
 8016052:	af00      	add	r7, sp, #0
 8016054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2205      	movs	r2, #5
 801605a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801605e:	2300      	movs	r3, #0
 8016060:	2200      	movs	r2, #0
 8016062:	2100      	movs	r1, #0
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f004 f9bb 	bl	801a3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801606a:	2300      	movs	r3, #0
}
 801606c:	4618      	mov	r0, r3
 801606e:	3708      	adds	r7, #8
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}

08016074 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b088      	sub	sp, #32
 8016078:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801607a:	2300      	movs	r3, #0
 801607c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801607e:	f107 0308 	add.w	r3, r7, #8
 8016082:	2218      	movs	r2, #24
 8016084:	2100      	movs	r1, #0
 8016086:	4618      	mov	r0, r3
 8016088:	f001 f92d 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801608c:	233f      	movs	r3, #63	@ 0x3f
 801608e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8016090:	2381      	movs	r3, #129	@ 0x81
 8016092:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8016094:	1dfb      	adds	r3, r7, #7
 8016096:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8016098:	2301      	movs	r3, #1
 801609a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801609c:	f107 0308 	add.w	r3, r7, #8
 80160a0:	2100      	movs	r1, #0
 80160a2:	4618      	mov	r0, r3
 80160a4:	f001 fba8 	bl	80177f8 <hci_send_req>
 80160a8:	4603      	mov	r3, r0
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	da01      	bge.n	80160b2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80160ae:	23ff      	movs	r3, #255	@ 0xff
 80160b0:	e000      	b.n	80160b4 <aci_gap_set_non_discoverable+0x40>
  return status;
 80160b2:	79fb      	ldrb	r3, [r7, #7]
}
 80160b4:	4618      	mov	r0, r3
 80160b6:	3720      	adds	r7, #32
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}

080160bc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80160bc:	b5b0      	push	{r4, r5, r7, lr}
 80160be:	b0ce      	sub	sp, #312	@ 0x138
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	4605      	mov	r5, r0
 80160c4:	460c      	mov	r4, r1
 80160c6:	4610      	mov	r0, r2
 80160c8:	4619      	mov	r1, r3
 80160ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80160ce:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80160d2:	462a      	mov	r2, r5
 80160d4:	701a      	strb	r2, [r3, #0]
 80160d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80160da:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80160de:	4622      	mov	r2, r4
 80160e0:	801a      	strh	r2, [r3, #0]
 80160e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80160e6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80160ea:	4602      	mov	r2, r0
 80160ec:	801a      	strh	r2, [r3, #0]
 80160ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80160f2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80160f6:	460a      	mov	r2, r1
 80160f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80160fa:	f107 0310 	add.w	r3, r7, #16
 80160fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8016102:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8016106:	3308      	adds	r3, #8
 8016108:	f107 0210 	add.w	r2, r7, #16
 801610c:	4413      	add	r3, r2
 801610e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8016112:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8016116:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 801611a:	4413      	add	r3, r2
 801611c:	3309      	adds	r3, #9
 801611e:	f107 0210 	add.w	r2, r7, #16
 8016122:	4413      	add	r3, r2
 8016124:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016128:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801612c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016130:	2200      	movs	r2, #0
 8016132:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016134:	2300      	movs	r3, #0
 8016136:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 801613a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801613e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016142:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8016146:	7812      	ldrb	r2, [r2, #0]
 8016148:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801614a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801614e:	3301      	adds	r3, #1
 8016150:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8016154:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016158:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801615c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8016160:	8812      	ldrh	r2, [r2, #0]
 8016162:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8016166:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801616a:	3302      	adds	r3, #2
 801616c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8016170:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016174:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016178:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 801617c:	8812      	ldrh	r2, [r2, #0]
 801617e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8016182:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016186:	3302      	adds	r3, #2
 8016188:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 801618c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016190:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016194:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8016198:	7812      	ldrb	r2, [r2, #0]
 801619a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801619c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80161a0:	3301      	adds	r3, #1
 80161a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80161a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80161aa:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80161ae:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80161b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80161b4:	3301      	adds	r3, #1
 80161b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80161ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80161be:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80161c2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80161c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80161c8:	3301      	adds	r3, #1
 80161ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80161ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80161d2:	3308      	adds	r3, #8
 80161d4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80161d8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80161dc:	4618      	mov	r0, r3
 80161de:	f001 f872 	bl	80172c6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80161e2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80161e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80161ea:	4413      	add	r3, r2
 80161ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80161f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80161f4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80161f8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80161fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80161fe:	3301      	adds	r3, #1
 8016200:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8016204:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016208:	3301      	adds	r3, #1
 801620a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 801620e:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8016212:	4618      	mov	r0, r3
 8016214:	f001 f857 	bl	80172c6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8016218:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 801621c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8016220:	4413      	add	r3, r2
 8016222:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8016226:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801622a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 801622e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8016230:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016234:	3302      	adds	r3, #2
 8016236:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 801623a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801623e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8016242:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8016244:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016248:	3302      	adds	r3, #2
 801624a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801624e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016252:	2218      	movs	r2, #24
 8016254:	2100      	movs	r1, #0
 8016256:	4618      	mov	r0, r3
 8016258:	f001 f845 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801625c:	233f      	movs	r3, #63	@ 0x3f
 801625e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8016262:	2383      	movs	r3, #131	@ 0x83
 8016264:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016268:	f107 0310 	add.w	r3, r7, #16
 801626c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016270:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016274:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016278:	f107 030f 	add.w	r3, r7, #15
 801627c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016280:	2301      	movs	r3, #1
 8016282:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016286:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801628a:	2100      	movs	r1, #0
 801628c:	4618      	mov	r0, r3
 801628e:	f001 fab3 	bl	80177f8 <hci_send_req>
 8016292:	4603      	mov	r3, r0
 8016294:	2b00      	cmp	r3, #0
 8016296:	da01      	bge.n	801629c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8016298:	23ff      	movs	r3, #255	@ 0xff
 801629a:	e004      	b.n	80162a6 <aci_gap_set_discoverable+0x1ea>
  return status;
 801629c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80162a0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80162a4:	781b      	ldrb	r3, [r3, #0]
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bdb0      	pop	{r4, r5, r7, pc}

080162b0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b0cc      	sub	sp, #304	@ 0x130
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	4602      	mov	r2, r0
 80162b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80162bc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80162c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80162c2:	f107 0310 	add.w	r3, r7, #16
 80162c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80162ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80162ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80162d2:	2200      	movs	r2, #0
 80162d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80162d6:	2300      	movs	r3, #0
 80162d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80162dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80162e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80162e4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80162e8:	7812      	ldrb	r2, [r2, #0]
 80162ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80162ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80162f0:	3301      	adds	r3, #1
 80162f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80162f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80162fa:	2218      	movs	r2, #24
 80162fc:	2100      	movs	r1, #0
 80162fe:	4618      	mov	r0, r3
 8016300:	f000 fff1 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016304:	233f      	movs	r3, #63	@ 0x3f
 8016306:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 801630a:	2385      	movs	r3, #133	@ 0x85
 801630c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016310:	f107 0310 	add.w	r3, r7, #16
 8016314:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016318:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801631c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016320:	f107 030f 	add.w	r3, r7, #15
 8016324:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016328:	2301      	movs	r3, #1
 801632a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801632e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016332:	2100      	movs	r1, #0
 8016334:	4618      	mov	r0, r3
 8016336:	f001 fa5f 	bl	80177f8 <hci_send_req>
 801633a:	4603      	mov	r3, r0
 801633c:	2b00      	cmp	r3, #0
 801633e:	da01      	bge.n	8016344 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8016340:	23ff      	movs	r3, #255	@ 0xff
 8016342:	e004      	b.n	801634e <aci_gap_set_io_capability+0x9e>
  return status;
 8016344:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016348:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801634c:	781b      	ldrb	r3, [r3, #0]
}
 801634e:	4618      	mov	r0, r3
 8016350:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}

08016358 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8016358:	b5b0      	push	{r4, r5, r7, lr}
 801635a:	b0cc      	sub	sp, #304	@ 0x130
 801635c:	af00      	add	r7, sp, #0
 801635e:	4605      	mov	r5, r0
 8016360:	460c      	mov	r4, r1
 8016362:	4610      	mov	r0, r2
 8016364:	4619      	mov	r1, r3
 8016366:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801636a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801636e:	462a      	mov	r2, r5
 8016370:	701a      	strb	r2, [r3, #0]
 8016372:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016376:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801637a:	4622      	mov	r2, r4
 801637c:	701a      	strb	r2, [r3, #0]
 801637e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016382:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8016386:	4602      	mov	r2, r0
 8016388:	701a      	strb	r2, [r3, #0]
 801638a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801638e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016392:	460a      	mov	r2, r1
 8016394:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8016396:	f107 0310 	add.w	r3, r7, #16
 801639a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801639e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80163a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80163a6:	2200      	movs	r2, #0
 80163a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80163aa:	2300      	movs	r3, #0
 80163ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80163b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80163b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80163b8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80163bc:	7812      	ldrb	r2, [r2, #0]
 80163be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80163c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80163c4:	3301      	adds	r3, #1
 80163c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80163ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80163ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80163d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80163d6:	7812      	ldrb	r2, [r2, #0]
 80163d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80163da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80163de:	3301      	adds	r3, #1
 80163e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80163e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80163e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80163ec:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80163f0:	7812      	ldrb	r2, [r2, #0]
 80163f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80163f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80163f8:	3301      	adds	r3, #1
 80163fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80163fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016402:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016406:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801640a:	7812      	ldrb	r2, [r2, #0]
 801640c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 801640e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016412:	3301      	adds	r3, #1
 8016414:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8016418:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801641c:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8016420:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8016422:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016426:	3301      	adds	r3, #1
 8016428:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 801642c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016430:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8016434:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8016436:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801643a:	3301      	adds	r3, #1
 801643c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8016440:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016444:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8016448:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 801644a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801644e:	3301      	adds	r3, #1
 8016450:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8016454:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016458:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801645c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8016460:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016464:	3304      	adds	r3, #4
 8016466:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 801646a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801646e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8016472:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8016474:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016478:	3301      	adds	r3, #1
 801647a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801647e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016482:	2218      	movs	r2, #24
 8016484:	2100      	movs	r1, #0
 8016486:	4618      	mov	r0, r3
 8016488:	f000 ff2d 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801648c:	233f      	movs	r3, #63	@ 0x3f
 801648e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8016492:	2386      	movs	r3, #134	@ 0x86
 8016494:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016498:	f107 0310 	add.w	r3, r7, #16
 801649c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80164a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80164a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80164a8:	f107 030f 	add.w	r3, r7, #15
 80164ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80164b0:	2301      	movs	r3, #1
 80164b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80164b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80164ba:	2100      	movs	r1, #0
 80164bc:	4618      	mov	r0, r3
 80164be:	f001 f99b 	bl	80177f8 <hci_send_req>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	da01      	bge.n	80164cc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80164c8:	23ff      	movs	r3, #255	@ 0xff
 80164ca:	e004      	b.n	80164d6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80164cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80164d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80164d4:	781b      	ldrb	r3, [r3, #0]
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80164dc:	46bd      	mov	sp, r7
 80164de:	bdb0      	pop	{r4, r5, r7, pc}

080164e0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b0cc      	sub	sp, #304	@ 0x130
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	4602      	mov	r2, r0
 80164e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80164ec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80164f0:	6019      	str	r1, [r3, #0]
 80164f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80164f6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80164fa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80164fc:	f107 0310 	add.w	r3, r7, #16
 8016500:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016504:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016508:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801650c:	2200      	movs	r2, #0
 801650e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016510:	2300      	movs	r3, #0
 8016512:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8016516:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801651a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801651e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8016522:	8812      	ldrh	r2, [r2, #0]
 8016524:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016526:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801652a:	3302      	adds	r3, #2
 801652c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8016530:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016534:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016538:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801653c:	6812      	ldr	r2, [r2, #0]
 801653e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8016542:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016546:	3304      	adds	r3, #4
 8016548:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801654c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016550:	2218      	movs	r2, #24
 8016552:	2100      	movs	r1, #0
 8016554:	4618      	mov	r0, r3
 8016556:	f000 fec6 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801655a:	233f      	movs	r3, #63	@ 0x3f
 801655c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8016560:	2388      	movs	r3, #136	@ 0x88
 8016562:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016566:	f107 0310 	add.w	r3, r7, #16
 801656a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801656e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016572:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016576:	f107 030f 	add.w	r3, r7, #15
 801657a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801657e:	2301      	movs	r3, #1
 8016580:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016584:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016588:	2100      	movs	r1, #0
 801658a:	4618      	mov	r0, r3
 801658c:	f001 f934 	bl	80177f8 <hci_send_req>
 8016590:	4603      	mov	r3, r0
 8016592:	2b00      	cmp	r3, #0
 8016594:	da01      	bge.n	801659a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8016596:	23ff      	movs	r3, #255	@ 0xff
 8016598:	e004      	b.n	80165a4 <aci_gap_pass_key_resp+0xc4>
  return status;
 801659a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801659e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80165a2:	781b      	ldrb	r3, [r3, #0]
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}

080165ae <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80165ae:	b590      	push	{r4, r7, lr}
 80165b0:	b0cd      	sub	sp, #308	@ 0x134
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	4604      	mov	r4, r0
 80165b6:	4608      	mov	r0, r1
 80165b8:	4611      	mov	r1, r2
 80165ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80165be:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80165c2:	6013      	str	r3, [r2, #0]
 80165c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80165c8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80165cc:	4622      	mov	r2, r4
 80165ce:	701a      	strb	r2, [r3, #0]
 80165d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80165d4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80165d8:	4602      	mov	r2, r0
 80165da:	701a      	strb	r2, [r3, #0]
 80165dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80165e0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80165e4:	460a      	mov	r2, r1
 80165e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80165e8:	f107 0310 	add.w	r3, r7, #16
 80165ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80165f0:	f107 0308 	add.w	r3, r7, #8
 80165f4:	2207      	movs	r2, #7
 80165f6:	2100      	movs	r1, #0
 80165f8:	4618      	mov	r0, r3
 80165fa:	f000 fe74 	bl	80172e6 <Osal_MemSet>
  int index_input = 0;
 80165fe:	2300      	movs	r3, #0
 8016600:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8016604:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016608:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801660c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8016610:	7812      	ldrb	r2, [r2, #0]
 8016612:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016614:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016618:	3301      	adds	r3, #1
 801661a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 801661e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016622:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016626:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801662a:	7812      	ldrb	r2, [r2, #0]
 801662c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801662e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016632:	3301      	adds	r3, #1
 8016634:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8016638:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801663c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016640:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8016644:	7812      	ldrb	r2, [r2, #0]
 8016646:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016648:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801664c:	3301      	adds	r3, #1
 801664e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016656:	2218      	movs	r2, #24
 8016658:	2100      	movs	r1, #0
 801665a:	4618      	mov	r0, r3
 801665c:	f000 fe43 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016660:	233f      	movs	r3, #63	@ 0x3f
 8016662:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8016666:	238a      	movs	r3, #138	@ 0x8a
 8016668:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801666c:	f107 0310 	add.w	r3, r7, #16
 8016670:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016674:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016678:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801667c:	f107 0308 	add.w	r3, r7, #8
 8016680:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8016684:	2307      	movs	r3, #7
 8016686:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801668a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801668e:	2100      	movs	r1, #0
 8016690:	4618      	mov	r0, r3
 8016692:	f001 f8b1 	bl	80177f8 <hci_send_req>
 8016696:	4603      	mov	r3, r0
 8016698:	2b00      	cmp	r3, #0
 801669a:	da01      	bge.n	80166a0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 801669c:	23ff      	movs	r3, #255	@ 0xff
 801669e:	e02e      	b.n	80166fe <aci_gap_init+0x150>
  if ( resp.Status )
 80166a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80166a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80166a8:	781b      	ldrb	r3, [r3, #0]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d005      	beq.n	80166ba <aci_gap_init+0x10c>
    return resp.Status;
 80166ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80166b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80166b6:	781b      	ldrb	r3, [r3, #0]
 80166b8:	e021      	b.n	80166fe <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80166ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80166be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80166c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80166c6:	b29a      	uxth	r2, r3
 80166c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80166cc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80166d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80166d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80166dc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80166e0:	b29a      	uxth	r2, r3
 80166e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80166e6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80166e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80166ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80166f0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80166f4:	b29a      	uxth	r2, r3
 80166f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80166fa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80166fc:	2300      	movs	r3, #0
}
 80166fe:	4618      	mov	r0, r3
 8016700:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8016704:	46bd      	mov	sp, r7
 8016706:	bd90      	pop	{r4, r7, pc}

08016708 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b0cc      	sub	sp, #304	@ 0x130
 801670c:	af00      	add	r7, sp, #0
 801670e:	4602      	mov	r2, r0
 8016710:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016714:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016718:	6019      	str	r1, [r3, #0]
 801671a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801671e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016722:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8016724:	f107 0310 	add.w	r3, r7, #16
 8016728:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801672c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016730:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016734:	2200      	movs	r2, #0
 8016736:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016738:	2300      	movs	r3, #0
 801673a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 801673e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016742:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016746:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801674a:	7812      	ldrb	r2, [r2, #0]
 801674c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801674e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016752:	3301      	adds	r3, #1
 8016754:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8016758:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801675c:	1c58      	adds	r0, r3, #1
 801675e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016762:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016766:	781a      	ldrb	r2, [r3, #0]
 8016768:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801676c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016770:	6819      	ldr	r1, [r3, #0]
 8016772:	f000 fda8 	bl	80172c6 <Osal_MemCpy>
  index_input += AdvDataLen;
 8016776:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801677a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801677e:	781b      	ldrb	r3, [r3, #0]
 8016780:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8016784:	4413      	add	r3, r2
 8016786:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801678a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801678e:	2218      	movs	r2, #24
 8016790:	2100      	movs	r1, #0
 8016792:	4618      	mov	r0, r3
 8016794:	f000 fda7 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016798:	233f      	movs	r3, #63	@ 0x3f
 801679a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 801679e:	238e      	movs	r3, #142	@ 0x8e
 80167a0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80167a4:	f107 0310 	add.w	r3, r7, #16
 80167a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80167ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80167b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80167b4:	f107 030f 	add.w	r3, r7, #15
 80167b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80167bc:	2301      	movs	r3, #1
 80167be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80167c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80167c6:	2100      	movs	r1, #0
 80167c8:	4618      	mov	r0, r3
 80167ca:	f001 f815 	bl	80177f8 <hci_send_req>
 80167ce:	4603      	mov	r3, r0
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	da01      	bge.n	80167d8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80167d4:	23ff      	movs	r3, #255	@ 0xff
 80167d6:	e004      	b.n	80167e2 <aci_gap_update_adv_data+0xda>
  return status;
 80167d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80167dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80167e0:	781b      	ldrb	r3, [r3, #0]
}
 80167e2:	4618      	mov	r0, r3
 80167e4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}

080167ec <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b088      	sub	sp, #32
 80167f0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80167f2:	2300      	movs	r3, #0
 80167f4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80167f6:	f107 0308 	add.w	r3, r7, #8
 80167fa:	2218      	movs	r2, #24
 80167fc:	2100      	movs	r1, #0
 80167fe:	4618      	mov	r0, r3
 8016800:	f000 fd71 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016804:	233f      	movs	r3, #63	@ 0x3f
 8016806:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8016808:	2392      	movs	r3, #146	@ 0x92
 801680a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801680c:	1dfb      	adds	r3, r7, #7
 801680e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8016810:	2301      	movs	r3, #1
 8016812:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016814:	f107 0308 	add.w	r3, r7, #8
 8016818:	2100      	movs	r1, #0
 801681a:	4618      	mov	r0, r3
 801681c:	f000 ffec 	bl	80177f8 <hci_send_req>
 8016820:	4603      	mov	r3, r0
 8016822:	2b00      	cmp	r3, #0
 8016824:	da01      	bge.n	801682a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8016826:	23ff      	movs	r3, #255	@ 0xff
 8016828:	e000      	b.n	801682c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 801682a:	79fb      	ldrb	r3, [r7, #7]
}
 801682c:	4618      	mov	r0, r3
 801682e:	3720      	adds	r7, #32
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}

08016834 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b0cc      	sub	sp, #304	@ 0x130
 8016838:	af00      	add	r7, sp, #0
 801683a:	4602      	mov	r2, r0
 801683c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016840:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016844:	801a      	strh	r2, [r3, #0]
 8016846:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801684a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801684e:	460a      	mov	r2, r1
 8016850:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8016852:	f107 0310 	add.w	r3, r7, #16
 8016856:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801685a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801685e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016862:	2200      	movs	r2, #0
 8016864:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016866:	2300      	movs	r3, #0
 8016868:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801686c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016870:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016874:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8016878:	8812      	ldrh	r2, [r2, #0]
 801687a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801687c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016880:	3302      	adds	r3, #2
 8016882:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8016886:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801688a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801688e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8016892:	7812      	ldrb	r2, [r2, #0]
 8016894:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016896:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801689a:	3301      	adds	r3, #1
 801689c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80168a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80168a4:	2218      	movs	r2, #24
 80168a6:	2100      	movs	r1, #0
 80168a8:	4618      	mov	r0, r3
 80168aa:	f000 fd1c 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80168ae:	233f      	movs	r3, #63	@ 0x3f
 80168b0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80168b4:	23a5      	movs	r3, #165	@ 0xa5
 80168b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80168ba:	f107 0310 	add.w	r3, r7, #16
 80168be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80168c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80168c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80168ca:	f107 030f 	add.w	r3, r7, #15
 80168ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80168d2:	2301      	movs	r3, #1
 80168d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80168d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80168dc:	2100      	movs	r1, #0
 80168de:	4618      	mov	r0, r3
 80168e0:	f000 ff8a 	bl	80177f8 <hci_send_req>
 80168e4:	4603      	mov	r3, r0
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	da01      	bge.n	80168ee <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80168ea:	23ff      	movs	r3, #255	@ 0xff
 80168ec:	e004      	b.n	80168f8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80168ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80168f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80168f6:	781b      	ldrb	r3, [r3, #0]
}
 80168f8:	4618      	mov	r0, r3
 80168fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80168fe:	46bd      	mov	sp, r7
 8016900:	bd80      	pop	{r7, pc}

08016902 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8016902:	b580      	push	{r7, lr}
 8016904:	b088      	sub	sp, #32
 8016906:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8016908:	2300      	movs	r3, #0
 801690a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801690c:	f107 0308 	add.w	r3, r7, #8
 8016910:	2218      	movs	r2, #24
 8016912:	2100      	movs	r1, #0
 8016914:	4618      	mov	r0, r3
 8016916:	f000 fce6 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801691a:	233f      	movs	r3, #63	@ 0x3f
 801691c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 801691e:	f240 1301 	movw	r3, #257	@ 0x101
 8016922:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8016924:	1dfb      	adds	r3, r7, #7
 8016926:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8016928:	2301      	movs	r3, #1
 801692a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801692c:	f107 0308 	add.w	r3, r7, #8
 8016930:	2100      	movs	r1, #0
 8016932:	4618      	mov	r0, r3
 8016934:	f000 ff60 	bl	80177f8 <hci_send_req>
 8016938:	4603      	mov	r3, r0
 801693a:	2b00      	cmp	r3, #0
 801693c:	da01      	bge.n	8016942 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 801693e:	23ff      	movs	r3, #255	@ 0xff
 8016940:	e000      	b.n	8016944 <aci_gatt_init+0x42>
  return status;
 8016942:	79fb      	ldrb	r3, [r7, #7]
}
 8016944:	4618      	mov	r0, r3
 8016946:	3720      	adds	r7, #32
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}

0801694c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 801694c:	b590      	push	{r4, r7, lr}
 801694e:	b0cf      	sub	sp, #316	@ 0x13c
 8016950:	af00      	add	r7, sp, #0
 8016952:	4604      	mov	r4, r0
 8016954:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8016958:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 801695c:	6001      	str	r1, [r0, #0]
 801695e:	4610      	mov	r0, r2
 8016960:	4619      	mov	r1, r3
 8016962:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016966:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801696a:	4622      	mov	r2, r4
 801696c:	701a      	strb	r2, [r3, #0]
 801696e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016972:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8016976:	4602      	mov	r2, r0
 8016978:	701a      	strb	r2, [r3, #0]
 801697a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801697e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8016982:	460a      	mov	r2, r1
 8016984:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8016986:	f107 0310 	add.w	r3, r7, #16
 801698a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 801698e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016992:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8016996:	781b      	ldrb	r3, [r3, #0]
 8016998:	2b01      	cmp	r3, #1
 801699a:	d00a      	beq.n	80169b2 <aci_gatt_add_service+0x66>
 801699c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80169a0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80169a4:	781b      	ldrb	r3, [r3, #0]
 80169a6:	2b02      	cmp	r3, #2
 80169a8:	d101      	bne.n	80169ae <aci_gatt_add_service+0x62>
 80169aa:	2311      	movs	r3, #17
 80169ac:	e002      	b.n	80169b4 <aci_gatt_add_service+0x68>
 80169ae:	2301      	movs	r3, #1
 80169b0:	e000      	b.n	80169b4 <aci_gatt_add_service+0x68>
 80169b2:	2303      	movs	r3, #3
 80169b4:	f107 0210 	add.w	r2, r7, #16
 80169b8:	4413      	add	r3, r2
 80169ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80169be:	f107 030c 	add.w	r3, r7, #12
 80169c2:	2203      	movs	r2, #3
 80169c4:	2100      	movs	r1, #0
 80169c6:	4618      	mov	r0, r3
 80169c8:	f000 fc8d 	bl	80172e6 <Osal_MemSet>
  int index_input = 0;
 80169cc:	2300      	movs	r3, #0
 80169ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80169d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80169d6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80169da:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80169de:	7812      	ldrb	r2, [r2, #0]
 80169e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80169e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80169e6:	3301      	adds	r3, #1
 80169e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80169ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80169f0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80169f4:	781b      	ldrb	r3, [r3, #0]
 80169f6:	2b01      	cmp	r3, #1
 80169f8:	d002      	beq.n	8016a00 <aci_gatt_add_service+0xb4>
 80169fa:	2b02      	cmp	r3, #2
 80169fc:	d004      	beq.n	8016a08 <aci_gatt_add_service+0xbc>
 80169fe:	e007      	b.n	8016a10 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8016a00:	2302      	movs	r3, #2
 8016a02:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8016a06:	e005      	b.n	8016a14 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8016a08:	2310      	movs	r3, #16
 8016a0a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8016a0e:	e001      	b.n	8016a14 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8016a10:	2397      	movs	r3, #151	@ 0x97
 8016a12:	e06c      	b.n	8016aee <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8016a14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016a18:	1c58      	adds	r0, r3, #1
 8016a1a:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8016a1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016a22:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8016a26:	6819      	ldr	r1, [r3, #0]
 8016a28:	f000 fc4d 	bl	80172c6 <Osal_MemCpy>
    index_input += size;
 8016a2c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8016a30:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8016a34:	4413      	add	r3, r2
 8016a36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8016a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016a3e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016a42:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8016a46:	7812      	ldrb	r2, [r2, #0]
 8016a48:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8016a4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016a4e:	3301      	adds	r3, #1
 8016a50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8016a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016a58:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016a5c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8016a60:	7812      	ldrb	r2, [r2, #0]
 8016a62:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8016a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016a68:	3301      	adds	r3, #1
 8016a6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016a6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016a72:	2218      	movs	r2, #24
 8016a74:	2100      	movs	r1, #0
 8016a76:	4618      	mov	r0, r3
 8016a78:	f000 fc35 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016a7c:	233f      	movs	r3, #63	@ 0x3f
 8016a7e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8016a82:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8016a86:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016a8a:	f107 0310 	add.w	r3, r7, #16
 8016a8e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016a96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8016a9a:	f107 030c 	add.w	r3, r7, #12
 8016a9e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8016aa2:	2303      	movs	r3, #3
 8016aa4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016aa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016aac:	2100      	movs	r1, #0
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f000 fea2 	bl	80177f8 <hci_send_req>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	da01      	bge.n	8016abe <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8016aba:	23ff      	movs	r3, #255	@ 0xff
 8016abc:	e017      	b.n	8016aee <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8016abe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016ac2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d005      	beq.n	8016ad8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8016acc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016ad0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	e00a      	b.n	8016aee <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8016ad8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016adc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016ae0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016ae4:	b29a      	uxth	r2, r3
 8016ae6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016aea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8016aec:	2300      	movs	r3, #0
}
 8016aee:	4618      	mov	r0, r3
 8016af0:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd90      	pop	{r4, r7, pc}

08016af8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8016af8:	b590      	push	{r4, r7, lr}
 8016afa:	b0d1      	sub	sp, #324	@ 0x144
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	4604      	mov	r4, r0
 8016b00:	4608      	mov	r0, r1
 8016b02:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8016b06:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8016b0a:	600a      	str	r2, [r1, #0]
 8016b0c:	4619      	mov	r1, r3
 8016b0e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016b12:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8016b16:	4622      	mov	r2, r4
 8016b18:	801a      	strh	r2, [r3, #0]
 8016b1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016b1e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8016b22:	4602      	mov	r2, r0
 8016b24:	701a      	strb	r2, [r3, #0]
 8016b26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016b2a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8016b2e:	460a      	mov	r2, r1
 8016b30:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8016b32:	f107 0318 	add.w	r3, r7, #24
 8016b36:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8016b3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016b3e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8016b42:	781b      	ldrb	r3, [r3, #0]
 8016b44:	2b01      	cmp	r3, #1
 8016b46:	d00a      	beq.n	8016b5e <aci_gatt_add_char+0x66>
 8016b48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016b4c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	2b02      	cmp	r3, #2
 8016b54:	d101      	bne.n	8016b5a <aci_gatt_add_char+0x62>
 8016b56:	2313      	movs	r3, #19
 8016b58:	e002      	b.n	8016b60 <aci_gatt_add_char+0x68>
 8016b5a:	2303      	movs	r3, #3
 8016b5c:	e000      	b.n	8016b60 <aci_gatt_add_char+0x68>
 8016b5e:	2305      	movs	r3, #5
 8016b60:	f107 0218 	add.w	r2, r7, #24
 8016b64:	4413      	add	r3, r2
 8016b66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8016b6a:	f107 0314 	add.w	r3, r7, #20
 8016b6e:	2203      	movs	r2, #3
 8016b70:	2100      	movs	r1, #0
 8016b72:	4618      	mov	r0, r3
 8016b74:	f000 fbb7 	bl	80172e6 <Osal_MemSet>
  int index_input = 0;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8016b7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016b82:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016b86:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8016b8a:	8812      	ldrh	r2, [r2, #0]
 8016b8c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016b8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016b92:	3302      	adds	r3, #2
 8016b94:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8016b98:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016b9c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016ba0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8016ba4:	7812      	ldrb	r2, [r2, #0]
 8016ba6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8016ba8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016bac:	3301      	adds	r3, #1
 8016bae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8016bb2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016bb6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8016bba:	781b      	ldrb	r3, [r3, #0]
 8016bbc:	2b01      	cmp	r3, #1
 8016bbe:	d002      	beq.n	8016bc6 <aci_gatt_add_char+0xce>
 8016bc0:	2b02      	cmp	r3, #2
 8016bc2:	d004      	beq.n	8016bce <aci_gatt_add_char+0xd6>
 8016bc4:	e007      	b.n	8016bd6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8016bc6:	2302      	movs	r3, #2
 8016bc8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8016bcc:	e005      	b.n	8016bda <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8016bce:	2310      	movs	r3, #16
 8016bd0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8016bd4:	e001      	b.n	8016bda <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8016bd6:	2397      	movs	r3, #151	@ 0x97
 8016bd8:	e091      	b.n	8016cfe <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8016bda:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8016bde:	1cd8      	adds	r0, r3, #3
 8016be0:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8016be4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016be8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8016bec:	6819      	ldr	r1, [r3, #0]
 8016bee:	f000 fb6a 	bl	80172c6 <Osal_MemCpy>
    index_input += size;
 8016bf2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8016bf6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8016bfa:	4413      	add	r3, r2
 8016bfc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8016c00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016c04:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016c08:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8016c0c:	8812      	ldrh	r2, [r2, #0]
 8016c0e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8016c10:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016c14:	3302      	adds	r3, #2
 8016c16:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8016c1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016c1e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8016c22:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8016c24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016c28:	3301      	adds	r3, #1
 8016c2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8016c2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016c32:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8016c36:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8016c38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016c3c:	3301      	adds	r3, #1
 8016c3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8016c42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016c46:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8016c4a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8016c4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016c50:	3301      	adds	r3, #1
 8016c52:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8016c56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016c5a:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8016c5e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8016c60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016c64:	3301      	adds	r3, #1
 8016c66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8016c6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016c6e:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8016c72:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8016c74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016c78:	3301      	adds	r3, #1
 8016c7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016c7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016c82:	2218      	movs	r2, #24
 8016c84:	2100      	movs	r1, #0
 8016c86:	4618      	mov	r0, r3
 8016c88:	f000 fb2d 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016c8c:	233f      	movs	r3, #63	@ 0x3f
 8016c8e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8016c92:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8016c96:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8016c9a:	f107 0318 	add.w	r3, r7, #24
 8016c9e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8016ca2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8016ca6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8016caa:	f107 0314 	add.w	r3, r7, #20
 8016cae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8016cb2:	2303      	movs	r3, #3
 8016cb4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016cb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016cbc:	2100      	movs	r1, #0
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f000 fd9a 	bl	80177f8 <hci_send_req>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	da01      	bge.n	8016cce <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8016cca:	23ff      	movs	r3, #255	@ 0xff
 8016ccc:	e017      	b.n	8016cfe <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8016cce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016cd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016cd6:	781b      	ldrb	r3, [r3, #0]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d005      	beq.n	8016ce8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8016cdc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016ce0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016ce4:	781b      	ldrb	r3, [r3, #0]
 8016ce6:	e00a      	b.n	8016cfe <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8016ce8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016cec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016cf0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8016cfa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8016cfc:	2300      	movs	r3, #0
}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd90      	pop	{r4, r7, pc}

08016d08 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8016d08:	b5b0      	push	{r4, r5, r7, lr}
 8016d0a:	b0cc      	sub	sp, #304	@ 0x130
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	4605      	mov	r5, r0
 8016d10:	460c      	mov	r4, r1
 8016d12:	4610      	mov	r0, r2
 8016d14:	4619      	mov	r1, r3
 8016d16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d1a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016d1e:	462a      	mov	r2, r5
 8016d20:	801a      	strh	r2, [r3, #0]
 8016d22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016d2a:	4622      	mov	r2, r4
 8016d2c:	801a      	strh	r2, [r3, #0]
 8016d2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d32:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8016d36:	4602      	mov	r2, r0
 8016d38:	701a      	strb	r2, [r3, #0]
 8016d3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d3e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8016d42:	460a      	mov	r2, r1
 8016d44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8016d46:	f107 0310 	add.w	r3, r7, #16
 8016d4a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016d4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d52:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016d56:	2200      	movs	r2, #0
 8016d58:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8016d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016d64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016d68:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8016d6c:	8812      	ldrh	r2, [r2, #0]
 8016d6e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016d74:	3302      	adds	r3, #2
 8016d76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8016d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016d7e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016d82:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8016d86:	8812      	ldrh	r2, [r2, #0]
 8016d88:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8016d8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016d8e:	3302      	adds	r3, #2
 8016d90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8016d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016d98:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016d9c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8016da0:	7812      	ldrb	r2, [r2, #0]
 8016da2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8016da4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016da8:	3301      	adds	r3, #1
 8016daa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8016dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016db2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016db6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8016dba:	7812      	ldrb	r2, [r2, #0]
 8016dbc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8016dbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016dc2:	3301      	adds	r3, #1
 8016dc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8016dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016dcc:	1d98      	adds	r0, r3, #6
 8016dce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016dd2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8016dd6:	781b      	ldrb	r3, [r3, #0]
 8016dd8:	461a      	mov	r2, r3
 8016dda:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8016dde:	f000 fa72 	bl	80172c6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8016de2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016de6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8016dea:	781b      	ldrb	r3, [r3, #0]
 8016dec:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8016df0:	4413      	add	r3, r2
 8016df2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016dfa:	2218      	movs	r2, #24
 8016dfc:	2100      	movs	r1, #0
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f000 fa71 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016e04:	233f      	movs	r3, #63	@ 0x3f
 8016e06:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8016e0a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8016e0e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016e12:	f107 0310 	add.w	r3, r7, #16
 8016e16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016e1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016e22:	f107 030f 	add.w	r3, r7, #15
 8016e26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016e30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016e34:	2100      	movs	r1, #0
 8016e36:	4618      	mov	r0, r3
 8016e38:	f000 fcde 	bl	80177f8 <hci_send_req>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	da01      	bge.n	8016e46 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8016e42:	23ff      	movs	r3, #255	@ 0xff
 8016e44:	e004      	b.n	8016e50 <aci_gatt_update_char_value+0x148>
  return status;
 8016e46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016e4a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016e4e:	781b      	ldrb	r3, [r3, #0]
}
 8016e50:	4618      	mov	r0, r3
 8016e52:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8016e56:	46bd      	mov	sp, r7
 8016e58:	bdb0      	pop	{r4, r5, r7, pc}

08016e5a <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8016e5a:	b580      	push	{r7, lr}
 8016e5c:	b0cc      	sub	sp, #304	@ 0x130
 8016e5e:	af00      	add	r7, sp, #0
 8016e60:	4602      	mov	r2, r0
 8016e62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016e66:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016e6a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8016e6c:	f107 0310 	add.w	r3, r7, #16
 8016e70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016e74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016e78:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016e80:	2300      	movs	r3, #0
 8016e82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8016e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016e8a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016e8e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8016e92:	8812      	ldrh	r2, [r2, #0]
 8016e94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8016e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e9a:	3302      	adds	r3, #2
 8016e9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016ea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016ea4:	2218      	movs	r2, #24
 8016ea6:	2100      	movs	r1, #0
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f000 fa1c 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016eae:	233f      	movs	r3, #63	@ 0x3f
 8016eb0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8016eb4:	f240 1325 	movw	r3, #293	@ 0x125
 8016eb8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016ebc:	f107 0310 	add.w	r3, r7, #16
 8016ec0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016ec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ec8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016ecc:	f107 030f 	add.w	r3, r7, #15
 8016ed0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016eda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016ede:	2100      	movs	r1, #0
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f000 fc89 	bl	80177f8 <hci_send_req>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	da01      	bge.n	8016ef0 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8016eec:	23ff      	movs	r3, #255	@ 0xff
 8016eee:	e004      	b.n	8016efa <aci_gatt_confirm_indication+0xa0>
  return status;
 8016ef0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016ef4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016ef8:	781b      	ldrb	r3, [r3, #0]
}
 8016efa:	4618      	mov	r0, r3
 8016efc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8016f00:	46bd      	mov	sp, r7
 8016f02:	bd80      	pop	{r7, pc}

08016f04 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b0cc      	sub	sp, #304	@ 0x130
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016f12:	601a      	str	r2, [r3, #0]
 8016f14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f18:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	701a      	strb	r2, [r3, #0]
 8016f20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f24:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016f28:	460a      	mov	r2, r1
 8016f2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8016f2c:	f107 0310 	add.w	r3, r7, #16
 8016f30:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8016f34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8016f40:	2300      	movs	r3, #0
 8016f42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8016f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016f4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016f4e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8016f52:	7812      	ldrb	r2, [r2, #0]
 8016f54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8016f56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f5a:	3301      	adds	r3, #1
 8016f5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8016f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016f64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016f68:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8016f6c:	7812      	ldrb	r2, [r2, #0]
 8016f6e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8016f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f74:	3301      	adds	r3, #1
 8016f76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8016f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016f7e:	1c98      	adds	r0, r3, #2
 8016f80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f84:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016f88:	781a      	ldrb	r2, [r3, #0]
 8016f8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016f92:	6819      	ldr	r1, [r3, #0]
 8016f94:	f000 f997 	bl	80172c6 <Osal_MemCpy>
  index_input += Length;
 8016f98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016f9c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8016fa6:	4413      	add	r3, r2
 8016fa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8016fac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016fb0:	2218      	movs	r2, #24
 8016fb2:	2100      	movs	r1, #0
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f000 f996 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8016fba:	233f      	movs	r3, #63	@ 0x3f
 8016fbc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8016fc0:	230c      	movs	r3, #12
 8016fc2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8016fc6:	f107 0310 	add.w	r3, r7, #16
 8016fca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8016fce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016fd2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8016fd6:	f107 030f 	add.w	r3, r7, #15
 8016fda:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8016fde:	2301      	movs	r3, #1
 8016fe0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8016fe4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016fe8:	2100      	movs	r1, #0
 8016fea:	4618      	mov	r0, r3
 8016fec:	f000 fc04 	bl	80177f8 <hci_send_req>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	da01      	bge.n	8016ffa <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8016ff6:	23ff      	movs	r3, #255	@ 0xff
 8016ff8:	e004      	b.n	8017004 <aci_hal_write_config_data+0x100>
  return status;
 8016ffa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016ffe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017002:	781b      	ldrb	r3, [r3, #0]
}
 8017004:	4618      	mov	r0, r3
 8017006:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}

0801700e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 801700e:	b580      	push	{r7, lr}
 8017010:	b0cc      	sub	sp, #304	@ 0x130
 8017012:	af00      	add	r7, sp, #0
 8017014:	4602      	mov	r2, r0
 8017016:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801701a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801701e:	701a      	strb	r2, [r3, #0]
 8017020:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017024:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017028:	460a      	mov	r2, r1
 801702a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 801702c:	f107 0310 	add.w	r3, r7, #16
 8017030:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8017034:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017038:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801703c:	2200      	movs	r2, #0
 801703e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017040:	2300      	movs	r3, #0
 8017042:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8017046:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801704a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801704e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8017052:	7812      	ldrb	r2, [r2, #0]
 8017054:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8017056:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801705a:	3301      	adds	r3, #1
 801705c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8017060:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017064:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017068:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801706c:	7812      	ldrb	r2, [r2, #0]
 801706e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017070:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017074:	3301      	adds	r3, #1
 8017076:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801707a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801707e:	2218      	movs	r2, #24
 8017080:	2100      	movs	r1, #0
 8017082:	4618      	mov	r0, r3
 8017084:	f000 f92f 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8017088:	233f      	movs	r3, #63	@ 0x3f
 801708a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 801708e:	230f      	movs	r3, #15
 8017090:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8017094:	f107 0310 	add.w	r3, r7, #16
 8017098:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801709c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80170a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80170a4:	f107 030f 	add.w	r3, r7, #15
 80170a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80170ac:	2301      	movs	r3, #1
 80170ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80170b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80170b6:	2100      	movs	r1, #0
 80170b8:	4618      	mov	r0, r3
 80170ba:	f000 fb9d 	bl	80177f8 <hci_send_req>
 80170be:	4603      	mov	r3, r0
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	da01      	bge.n	80170c8 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80170c4:	23ff      	movs	r3, #255	@ 0xff
 80170c6:	e004      	b.n	80170d2 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80170c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80170cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80170d0:	781b      	ldrb	r3, [r3, #0]
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}

080170dc <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b0cc      	sub	sp, #304	@ 0x130
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	4602      	mov	r2, r0
 80170e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80170e8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80170ec:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80170ee:	f107 0310 	add.w	r3, r7, #16
 80170f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80170f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80170fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80170fe:	2200      	movs	r2, #0
 8017100:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017102:	2300      	movs	r3, #0
 8017104:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8017108:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801710c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017110:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8017114:	8812      	ldrh	r2, [r2, #0]
 8017116:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8017118:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801711c:	3302      	adds	r3, #2
 801711e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017122:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017126:	2218      	movs	r2, #24
 8017128:	2100      	movs	r1, #0
 801712a:	4618      	mov	r0, r3
 801712c:	f000 f8db 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8017130:	233f      	movs	r3, #63	@ 0x3f
 8017132:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8017136:	2318      	movs	r3, #24
 8017138:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801713c:	f107 0310 	add.w	r3, r7, #16
 8017140:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8017144:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017148:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801714c:	f107 030f 	add.w	r3, r7, #15
 8017150:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8017154:	2301      	movs	r3, #1
 8017156:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801715a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801715e:	2100      	movs	r1, #0
 8017160:	4618      	mov	r0, r3
 8017162:	f000 fb49 	bl	80177f8 <hci_send_req>
 8017166:	4603      	mov	r3, r0
 8017168:	2b00      	cmp	r3, #0
 801716a:	da01      	bge.n	8017170 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 801716c:	23ff      	movs	r3, #255	@ 0xff
 801716e:	e004      	b.n	801717a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8017170:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017174:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8017178:	781b      	ldrb	r3, [r3, #0]
}
 801717a:	4618      	mov	r0, r3
 801717c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8017180:	46bd      	mov	sp, r7
 8017182:	bd80      	pop	{r7, pc}

08017184 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b088      	sub	sp, #32
 8017188:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801718a:	2300      	movs	r3, #0
 801718c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801718e:	f107 0308 	add.w	r3, r7, #8
 8017192:	2218      	movs	r2, #24
 8017194:	2100      	movs	r1, #0
 8017196:	4618      	mov	r0, r3
 8017198:	f000 f8a5 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x03;
 801719c:	2303      	movs	r3, #3
 801719e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80171a0:	2303      	movs	r3, #3
 80171a2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80171a4:	1dfb      	adds	r3, r7, #7
 80171a6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80171a8:	2301      	movs	r3, #1
 80171aa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80171ac:	f107 0308 	add.w	r3, r7, #8
 80171b0:	2100      	movs	r1, #0
 80171b2:	4618      	mov	r0, r3
 80171b4:	f000 fb20 	bl	80177f8 <hci_send_req>
 80171b8:	4603      	mov	r3, r0
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	da01      	bge.n	80171c2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80171be:	23ff      	movs	r3, #255	@ 0xff
 80171c0:	e000      	b.n	80171c4 <hci_reset+0x40>
  return status;
 80171c2:	79fb      	ldrb	r3, [r7, #7]
}
 80171c4:	4618      	mov	r0, r3
 80171c6:	3720      	adds	r7, #32
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}

080171cc <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80171cc:	b590      	push	{r4, r7, lr}
 80171ce:	b0cd      	sub	sp, #308	@ 0x134
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	4604      	mov	r4, r0
 80171d4:	4608      	mov	r0, r1
 80171d6:	4611      	mov	r1, r2
 80171d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80171dc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80171e0:	4622      	mov	r2, r4
 80171e2:	701a      	strb	r2, [r3, #0]
 80171e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80171e8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80171ec:	4602      	mov	r2, r0
 80171ee:	701a      	strb	r2, [r3, #0]
 80171f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80171f4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80171f8:	460a      	mov	r2, r1
 80171fa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80171fc:	f107 0310 	add.w	r3, r7, #16
 8017200:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8017204:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017208:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801720c:	2200      	movs	r2, #0
 801720e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8017210:	2300      	movs	r3, #0
 8017212:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8017216:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801721a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801721e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8017222:	7812      	ldrb	r2, [r2, #0]
 8017224:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8017226:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801722a:	3301      	adds	r3, #1
 801722c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8017230:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8017234:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017238:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801723c:	7812      	ldrb	r2, [r2, #0]
 801723e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8017240:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017244:	3301      	adds	r3, #1
 8017246:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 801724a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801724e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8017252:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8017256:	7812      	ldrb	r2, [r2, #0]
 8017258:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801725a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801725e:	3301      	adds	r3, #1
 8017260:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8017264:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8017268:	2218      	movs	r2, #24
 801726a:	2100      	movs	r1, #0
 801726c:	4618      	mov	r0, r3
 801726e:	f000 f83a 	bl	80172e6 <Osal_MemSet>
  rq.ogf = 0x08;
 8017272:	2308      	movs	r3, #8
 8017274:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8017278:	2331      	movs	r3, #49	@ 0x31
 801727a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801727e:	f107 0310 	add.w	r3, r7, #16
 8017282:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8017286:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801728a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801728e:	f107 030f 	add.w	r3, r7, #15
 8017292:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8017296:	2301      	movs	r3, #1
 8017298:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801729c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80172a0:	2100      	movs	r1, #0
 80172a2:	4618      	mov	r0, r3
 80172a4:	f000 faa8 	bl	80177f8 <hci_send_req>
 80172a8:	4603      	mov	r3, r0
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	da01      	bge.n	80172b2 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80172ae:	23ff      	movs	r3, #255	@ 0xff
 80172b0:	e004      	b.n	80172bc <hci_le_set_default_phy+0xf0>
  return status;
 80172b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80172ba:	781b      	ldrb	r3, [r3, #0]
}
 80172bc:	4618      	mov	r0, r3
 80172be:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd90      	pop	{r4, r7, pc}

080172c6 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80172c6:	b580      	push	{r7, lr}
 80172c8:	b084      	sub	sp, #16
 80172ca:	af00      	add	r7, sp, #0
 80172cc:	60f8      	str	r0, [r7, #12]
 80172ce:	60b9      	str	r1, [r7, #8]
 80172d0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80172d2:	687a      	ldr	r2, [r7, #4]
 80172d4:	68b9      	ldr	r1, [r7, #8]
 80172d6:	68f8      	ldr	r0, [r7, #12]
 80172d8:	f005 fc27 	bl	801cb2a <memcpy>
 80172dc:	4603      	mov	r3, r0
}
 80172de:	4618      	mov	r0, r3
 80172e0:	3710      	adds	r7, #16
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}

080172e6 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80172e6:	b580      	push	{r7, lr}
 80172e8:	b084      	sub	sp, #16
 80172ea:	af00      	add	r7, sp, #0
 80172ec:	60f8      	str	r0, [r7, #12]
 80172ee:	60b9      	str	r1, [r7, #8]
 80172f0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80172f2:	687a      	ldr	r2, [r7, #4]
 80172f4:	68b9      	ldr	r1, [r7, #8]
 80172f6:	68f8      	ldr	r0, [r7, #12]
 80172f8:	f005 fafb 	bl	801c8f2 <memset>
 80172fc:	4603      	mov	r3, r0
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3710      	adds	r7, #16
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}

08017306 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8017306:	b480      	push	{r7}
 8017308:	af00      	add	r7, sp, #0
  return;
 801730a:	bf00      	nop
}
 801730c:	46bd      	mov	sp, r7
 801730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017312:	4770      	bx	lr

08017314 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8017314:	b480      	push	{r7}
 8017316:	af00      	add	r7, sp, #0
  return;
 8017318:	bf00      	nop
}
 801731a:	46bd      	mov	sp, r7
 801731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017320:	4770      	bx	lr

08017322 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8017322:	b480      	push	{r7}
 8017324:	af00      	add	r7, sp, #0
  return;
 8017326:	bf00      	nop
}
 8017328:	46bd      	mov	sp, r7
 801732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732e:	4770      	bx	lr

08017330 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8017330:	b480      	push	{r7}
 8017332:	af00      	add	r7, sp, #0
  return;
 8017334:	bf00      	nop
}
 8017336:	46bd      	mov	sp, r7
 8017338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801733c:	4770      	bx	lr

0801733e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 801733e:	b480      	push	{r7}
 8017340:	af00      	add	r7, sp, #0
  return;
 8017342:	bf00      	nop
}
 8017344:	46bd      	mov	sp, r7
 8017346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734a:	4770      	bx	lr

0801734c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 801734c:	b480      	push	{r7}
 801734e:	af00      	add	r7, sp, #0
  return;
 8017350:	bf00      	nop
}
 8017352:	46bd      	mov	sp, r7
 8017354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017358:	4770      	bx	lr

0801735a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 801735a:	b480      	push	{r7}
 801735c:	af00      	add	r7, sp, #0
  return;
 801735e:	bf00      	nop
}
 8017360:	46bd      	mov	sp, r7
 8017362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017366:	4770      	bx	lr

08017368 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8017368:	b480      	push	{r7}
 801736a:	af00      	add	r7, sp, #0
  return;
 801736c:	bf00      	nop
}
 801736e:	46bd      	mov	sp, r7
 8017370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017374:	4770      	bx	lr

08017376 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8017376:	b480      	push	{r7}
 8017378:	af00      	add	r7, sp, #0
  return;
 801737a:	bf00      	nop
}
 801737c:	46bd      	mov	sp, r7
 801737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017382:	4770      	bx	lr

08017384 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8017384:	b480      	push	{r7}
 8017386:	af00      	add	r7, sp, #0
  return;
 8017388:	bf00      	nop
}
 801738a:	46bd      	mov	sp, r7
 801738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017390:	4770      	bx	lr

08017392 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8017392:	b480      	push	{r7}
 8017394:	af00      	add	r7, sp, #0
  return;
 8017396:	bf00      	nop
}
 8017398:	46bd      	mov	sp, r7
 801739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739e:	4770      	bx	lr

080173a0 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80173a0:	b480      	push	{r7}
 80173a2:	af00      	add	r7, sp, #0
  return;
 80173a4:	bf00      	nop
}
 80173a6:	46bd      	mov	sp, r7
 80173a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ac:	4770      	bx	lr

080173ae <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80173ae:	b480      	push	{r7}
 80173b0:	af00      	add	r7, sp, #0
  return;
 80173b2:	bf00      	nop
}
 80173b4:	46bd      	mov	sp, r7
 80173b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ba:	4770      	bx	lr

080173bc <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80173bc:	b480      	push	{r7}
 80173be:	af00      	add	r7, sp, #0
  return;
 80173c0:	bf00      	nop
}
 80173c2:	46bd      	mov	sp, r7
 80173c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c8:	4770      	bx	lr

080173ca <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80173ca:	b480      	push	{r7}
 80173cc:	af00      	add	r7, sp, #0
  return;
 80173ce:	bf00      	nop
}
 80173d0:	46bd      	mov	sp, r7
 80173d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d6:	4770      	bx	lr

080173d8 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80173d8:	b480      	push	{r7}
 80173da:	af00      	add	r7, sp, #0
  return;
 80173dc:	bf00      	nop
}
 80173de:	46bd      	mov	sp, r7
 80173e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e4:	4770      	bx	lr

080173e6 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80173e6:	b480      	push	{r7}
 80173e8:	af00      	add	r7, sp, #0
  return;
 80173ea:	bf00      	nop
}
 80173ec:	46bd      	mov	sp, r7
 80173ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f2:	4770      	bx	lr

080173f4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80173f8:	4b04      	ldr	r3, [pc, #16]	@ (801740c <SVCCTL_Init+0x18>)
 80173fa:	2200      	movs	r2, #0
 80173fc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80173fe:	4b04      	ldr	r3, [pc, #16]	@ (8017410 <SVCCTL_Init+0x1c>)
 8017400:	2200      	movs	r2, #0
 8017402:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8017404:	f000 f806 	bl	8017414 <SVCCTL_SvcInit>

  return;
 8017408:	bf00      	nop
}
 801740a:	bd80      	pop	{r7, pc}
 801740c:	20000320 	.word	0x20000320
 8017410:	20000340 	.word	0x20000340

08017414 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8017414:	b580      	push	{r7, lr}
 8017416:	af00      	add	r7, sp, #0
  BAS_Init();
 8017418:	f7ff ff75 	bl	8017306 <BAS_Init>

  BLS_Init();
 801741c:	f7ff ff7a 	bl	8017314 <BLS_Init>

  CRS_STM_Init();
 8017420:	f7ff ff7f 	bl	8017322 <CRS_STM_Init>

  DIS_Init();
 8017424:	f7ff ff84 	bl	8017330 <DIS_Init>

  EDS_STM_Init();
 8017428:	f7ff ff89 	bl	801733e <EDS_STM_Init>

  HIDS_Init();
 801742c:	f7ff ff8e 	bl	801734c <HIDS_Init>

  HRS_Init();
 8017430:	f7ff ff93 	bl	801735a <HRS_Init>

  HTS_Init();
 8017434:	f7ff ff98 	bl	8017368 <HTS_Init>

  IAS_Init();
 8017438:	f7ff ff9d 	bl	8017376 <IAS_Init>

  LLS_Init();
 801743c:	f7ff ffa2 	bl	8017384 <LLS_Init>

  TPS_Init();
 8017440:	f7ff ffa7 	bl	8017392 <TPS_Init>

  MOTENV_STM_Init();
 8017444:	f7ff ffac 	bl	80173a0 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8017448:	f7ff ffb1 	bl	80173ae <P2PS_STM_Init>

  ZDD_STM_Init();
 801744c:	f7ff ffb6 	bl	80173bc <ZDD_STM_Init>

  OTAS_STM_Init();
 8017450:	f7ff ffbb 	bl	80173ca <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8017454:	f7ff ffc7 	bl	80173e6 <BVOPUS_STM_Init>

  MESH_Init();
 8017458:	f7ff ffbe 	bl	80173d8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 801745c:	f002 f866 	bl	801952c <SVCCTL_InitCustomSvc>
  
  return;
 8017460:	bf00      	nop
}
 8017462:	bd80      	pop	{r7, pc}

08017464 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8017464:	b480      	push	{r7}
 8017466:	b083      	sub	sp, #12
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 801746c:	4b09      	ldr	r3, [pc, #36]	@ (8017494 <SVCCTL_RegisterSvcHandler+0x30>)
 801746e:	7f1b      	ldrb	r3, [r3, #28]
 8017470:	4619      	mov	r1, r3
 8017472:	4a08      	ldr	r2, [pc, #32]	@ (8017494 <SVCCTL_RegisterSvcHandler+0x30>)
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 801747a:	4b06      	ldr	r3, [pc, #24]	@ (8017494 <SVCCTL_RegisterSvcHandler+0x30>)
 801747c:	7f1b      	ldrb	r3, [r3, #28]
 801747e:	3301      	adds	r3, #1
 8017480:	b2da      	uxtb	r2, r3
 8017482:	4b04      	ldr	r3, [pc, #16]	@ (8017494 <SVCCTL_RegisterSvcHandler+0x30>)
 8017484:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8017486:	bf00      	nop
}
 8017488:	370c      	adds	r7, #12
 801748a:	46bd      	mov	sp, r7
 801748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017490:	4770      	bx	lr
 8017492:	bf00      	nop
 8017494:	20000320 	.word	0x20000320

08017498 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b086      	sub	sp, #24
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	3301      	adds	r3, #1
 80174a4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80174a6:	2300      	movs	r3, #0
 80174a8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	781b      	ldrb	r3, [r3, #0]
 80174ae:	2bff      	cmp	r3, #255	@ 0xff
 80174b0:	d125      	bne.n	80174fe <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	3302      	adds	r3, #2
 80174b6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	881b      	ldrh	r3, [r3, #0]
 80174bc:	b29b      	uxth	r3, r3
 80174be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80174c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80174c6:	d118      	bne.n	80174fa <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80174c8:	2300      	movs	r3, #0
 80174ca:	757b      	strb	r3, [r7, #21]
 80174cc:	e00d      	b.n	80174ea <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80174ce:	7d7b      	ldrb	r3, [r7, #21]
 80174d0:	4a1a      	ldr	r2, [pc, #104]	@ (801753c <SVCCTL_UserEvtRx+0xa4>)
 80174d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80174d6:	6878      	ldr	r0, [r7, #4]
 80174d8:	4798      	blx	r3
 80174da:	4603      	mov	r3, r0
 80174dc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80174de:	7dfb      	ldrb	r3, [r7, #23]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d108      	bne.n	80174f6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80174e4:	7d7b      	ldrb	r3, [r7, #21]
 80174e6:	3301      	adds	r3, #1
 80174e8:	757b      	strb	r3, [r7, #21]
 80174ea:	4b14      	ldr	r3, [pc, #80]	@ (801753c <SVCCTL_UserEvtRx+0xa4>)
 80174ec:	7f1b      	ldrb	r3, [r3, #28]
 80174ee:	7d7a      	ldrb	r2, [r7, #21]
 80174f0:	429a      	cmp	r2, r3
 80174f2:	d3ec      	bcc.n	80174ce <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80174f4:	e002      	b.n	80174fc <SVCCTL_UserEvtRx+0x64>
              break;
 80174f6:	bf00      	nop
          break;
 80174f8:	e000      	b.n	80174fc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80174fa:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80174fc:	e000      	b.n	8017500 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80174fe:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8017500:	7dfb      	ldrb	r3, [r7, #23]
 8017502:	2b02      	cmp	r3, #2
 8017504:	d00f      	beq.n	8017526 <SVCCTL_UserEvtRx+0x8e>
 8017506:	2b02      	cmp	r3, #2
 8017508:	dc10      	bgt.n	801752c <SVCCTL_UserEvtRx+0x94>
 801750a:	2b00      	cmp	r3, #0
 801750c:	d002      	beq.n	8017514 <SVCCTL_UserEvtRx+0x7c>
 801750e:	2b01      	cmp	r3, #1
 8017510:	d006      	beq.n	8017520 <SVCCTL_UserEvtRx+0x88>
 8017512:	e00b      	b.n	801752c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8017514:	6878      	ldr	r0, [r7, #4]
 8017516:	f001 fccf 	bl	8018eb8 <SVCCTL_App_Notification>
 801751a:	4603      	mov	r3, r0
 801751c:	75bb      	strb	r3, [r7, #22]
      break;
 801751e:	e008      	b.n	8017532 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8017520:	2301      	movs	r3, #1
 8017522:	75bb      	strb	r3, [r7, #22]
      break;
 8017524:	e005      	b.n	8017532 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8017526:	2300      	movs	r3, #0
 8017528:	75bb      	strb	r3, [r7, #22]
      break;
 801752a:	e002      	b.n	8017532 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 801752c:	2301      	movs	r3, #1
 801752e:	75bb      	strb	r3, [r7, #22]
      break;
 8017530:	bf00      	nop
  }

  return (return_status);
 8017532:	7dbb      	ldrb	r3, [r7, #22]
}
 8017534:	4618      	mov	r0, r3
 8017536:	3718      	adds	r7, #24
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	20000320 	.word	0x20000320

08017540 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b088      	sub	sp, #32
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8017548:	f107 030c 	add.w	r3, r7, #12
 801754c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8017554:	69fb      	ldr	r3, [r7, #28]
 8017556:	212e      	movs	r1, #46	@ 0x2e
 8017558:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 801755c:	f000 fae8 	bl	8017b30 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8017560:	69fb      	ldr	r3, [r7, #28]
 8017562:	330b      	adds	r3, #11
 8017564:	78db      	ldrb	r3, [r3, #3]
}
 8017566:	4618      	mov	r0, r3
 8017568:	3720      	adds	r7, #32
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}

0801756e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 801756e:	b580      	push	{r7, lr}
 8017570:	b088      	sub	sp, #32
 8017572:	af00      	add	r7, sp, #0
 8017574:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8017576:	f107 030c 	add.w	r3, r7, #12
 801757a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8017582:	69fb      	ldr	r3, [r7, #28]
 8017584:	210f      	movs	r1, #15
 8017586:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 801758a:	f000 fad1 	bl	8017b30 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801758e:	69fb      	ldr	r3, [r7, #28]
 8017590:	330b      	adds	r3, #11
 8017592:	78db      	ldrb	r3, [r3, #3]
}
 8017594:	4618      	mov	r0, r3
 8017596:	3720      	adds	r7, #32
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}

0801759c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b088      	sub	sp, #32
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80175a4:	f107 030c 	add.w	r3, r7, #12
 80175a8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80175aa:	69fb      	ldr	r3, [r7, #28]
 80175ac:	687a      	ldr	r2, [r7, #4]
 80175ae:	2110      	movs	r1, #16
 80175b0:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80175b4:	f000 fabc 	bl	8017b30 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80175b8:	69fb      	ldr	r3, [r7, #28]
 80175ba:	330b      	adds	r3, #11
 80175bc:	78db      	ldrb	r3, [r3, #3]
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3720      	adds	r7, #32
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}
	...

080175c8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80175c8:	b480      	push	{r7}
 80175ca:	b08b      	sub	sp, #44	@ 0x2c
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80175d0:	2300      	movs	r3, #0
 80175d2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80175d4:	2300      	movs	r3, #0
 80175d6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80175d8:	2300      	movs	r3, #0
 80175da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80175dc:	2300      	movs	r3, #0
 80175de:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80175e0:	2300      	movs	r3, #0
 80175e2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80175e4:	2300      	movs	r3, #0
 80175e6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80175e8:	2300      	movs	r3, #0
 80175ea:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80175ec:	2300      	movs	r3, #0
 80175ee:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80175f0:	4b4a      	ldr	r3, [pc, #296]	@ (801771c <SHCI_GetWirelessFwInfo+0x154>)
 80175f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80175f8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	009b      	lsls	r3, r3, #2
 80175fe:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8017602:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	4a44      	ldr	r2, [pc, #272]	@ (8017720 <SHCI_GetWirelessFwInfo+0x158>)
 8017610:	4293      	cmp	r3, r2
 8017612:	d10f      	bne.n	8017634 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8017614:	68bb      	ldr	r3, [r7, #8]
 8017616:	695b      	ldr	r3, [r3, #20]
 8017618:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801761a:	68bb      	ldr	r3, [r7, #8]
 801761c:	699b      	ldr	r3, [r3, #24]
 801761e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	69db      	ldr	r3, [r3, #28]
 8017624:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8017626:	68bb      	ldr	r3, [r7, #8]
 8017628:	68db      	ldr	r3, [r3, #12]
 801762a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	691b      	ldr	r3, [r3, #16]
 8017630:	617b      	str	r3, [r7, #20]
 8017632:	e01a      	b.n	801766a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8017634:	693b      	ldr	r3, [r7, #16]
 8017636:	009b      	lsls	r3, r3, #2
 8017638:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801763c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8017640:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	691b      	ldr	r3, [r3, #16]
 8017648:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	695b      	ldr	r3, [r3, #20]
 8017650:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	699b      	ldr	r3, [r3, #24]
 8017658:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	685b      	ldr	r3, [r3, #4]
 8017660:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	689b      	ldr	r3, [r3, #8]
 8017668:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801766c:	0e1b      	lsrs	r3, r3, #24
 801766e:	b2da      	uxtb	r2, r3
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8017674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017676:	0c1b      	lsrs	r3, r3, #16
 8017678:	b2da      	uxtb	r2, r3
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017680:	0a1b      	lsrs	r3, r3, #8
 8017682:	b2da      	uxtb	r2, r3
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8017688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801768a:	091b      	lsrs	r3, r3, #4
 801768c:	b2db      	uxtb	r3, r3
 801768e:	f003 030f 	and.w	r3, r3, #15
 8017692:	b2da      	uxtb	r2, r3
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8017698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801769a:	b2db      	uxtb	r3, r3
 801769c:	f003 030f 	and.w	r3, r3, #15
 80176a0:	b2da      	uxtb	r2, r3
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80176a6:	6a3b      	ldr	r3, [r7, #32]
 80176a8:	0e1b      	lsrs	r3, r3, #24
 80176aa:	b2da      	uxtb	r2, r3
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80176b0:	6a3b      	ldr	r3, [r7, #32]
 80176b2:	0c1b      	lsrs	r3, r3, #16
 80176b4:	b2da      	uxtb	r2, r3
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80176ba:	6a3b      	ldr	r3, [r7, #32]
 80176bc:	0a1b      	lsrs	r3, r3, #8
 80176be:	b2da      	uxtb	r2, r3
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80176c4:	6a3b      	ldr	r3, [r7, #32]
 80176c6:	b2da      	uxtb	r2, r3
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80176cc:	69fb      	ldr	r3, [r7, #28]
 80176ce:	b2da      	uxtb	r2, r3
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80176d4:	69bb      	ldr	r3, [r7, #24]
 80176d6:	0e1b      	lsrs	r3, r3, #24
 80176d8:	b2da      	uxtb	r2, r3
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80176de:	69bb      	ldr	r3, [r7, #24]
 80176e0:	0c1b      	lsrs	r3, r3, #16
 80176e2:	b2da      	uxtb	r2, r3
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80176e8:	69bb      	ldr	r3, [r7, #24]
 80176ea:	0a1b      	lsrs	r3, r3, #8
 80176ec:	b2da      	uxtb	r2, r3
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80176f2:	697b      	ldr	r3, [r7, #20]
 80176f4:	0e1b      	lsrs	r3, r3, #24
 80176f6:	b2da      	uxtb	r2, r3
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80176fc:	697b      	ldr	r3, [r7, #20]
 80176fe:	0c1b      	lsrs	r3, r3, #16
 8017700:	b2da      	uxtb	r2, r3
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8017706:	697b      	ldr	r3, [r7, #20]
 8017708:	b2da      	uxtb	r2, r3
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801770e:	2300      	movs	r3, #0
}
 8017710:	4618      	mov	r0, r3
 8017712:	372c      	adds	r7, #44	@ 0x2c
 8017714:	46bd      	mov	sp, r7
 8017716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771a:	4770      	bx	lr
 801771c:	58004000 	.word	0x58004000
 8017720:	a94656b9 	.word	0xa94656b9

08017724 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8017724:	b580      	push	{r7, lr}
 8017726:	b082      	sub	sp, #8
 8017728:	af00      	add	r7, sp, #0
 801772a:	6078      	str	r0, [r7, #4]
 801772c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801772e:	683b      	ldr	r3, [r7, #0]
 8017730:	685b      	ldr	r3, [r3, #4]
 8017732:	4a08      	ldr	r2, [pc, #32]	@ (8017754 <hci_init+0x30>)
 8017734:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8017736:	4a08      	ldr	r2, [pc, #32]	@ (8017758 <hci_init+0x34>)
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 801773c:	4806      	ldr	r0, [pc, #24]	@ (8017758 <hci_init+0x34>)
 801773e:	f000 f979 	bl	8017a34 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	4618      	mov	r0, r3
 8017748:	f000 f8da 	bl	8017900 <TlInit>

  return;
 801774c:	bf00      	nop
}
 801774e:	3708      	adds	r7, #8
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}
 8017754:	20001580 	.word	0x20001580
 8017758:	20001558 	.word	0x20001558

0801775c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b084      	sub	sp, #16
 8017760:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8017762:	4822      	ldr	r0, [pc, #136]	@ (80177ec <hci_user_evt_proc+0x90>)
 8017764:	f000 fd32 	bl	80181cc <LST_is_empty>
 8017768:	4603      	mov	r3, r0
 801776a:	2b00      	cmp	r3, #0
 801776c:	d12b      	bne.n	80177c6 <hci_user_evt_proc+0x6a>
 801776e:	4b20      	ldr	r3, [pc, #128]	@ (80177f0 <hci_user_evt_proc+0x94>)
 8017770:	781b      	ldrb	r3, [r3, #0]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d027      	beq.n	80177c6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8017776:	f107 030c 	add.w	r3, r7, #12
 801777a:	4619      	mov	r1, r3
 801777c:	481b      	ldr	r0, [pc, #108]	@ (80177ec <hci_user_evt_proc+0x90>)
 801777e:	f000 fdb4 	bl	80182ea <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8017782:	4b1c      	ldr	r3, [pc, #112]	@ (80177f4 <hci_user_evt_proc+0x98>)
 8017784:	69db      	ldr	r3, [r3, #28]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d00c      	beq.n	80177a4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801778e:	2301      	movs	r3, #1
 8017790:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8017792:	4b18      	ldr	r3, [pc, #96]	@ (80177f4 <hci_user_evt_proc+0x98>)
 8017794:	69db      	ldr	r3, [r3, #28]
 8017796:	1d3a      	adds	r2, r7, #4
 8017798:	4610      	mov	r0, r2
 801779a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 801779c:	793a      	ldrb	r2, [r7, #4]
 801779e:	4b14      	ldr	r3, [pc, #80]	@ (80177f0 <hci_user_evt_proc+0x94>)
 80177a0:	701a      	strb	r2, [r3, #0]
 80177a2:	e002      	b.n	80177aa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80177a4:	4b12      	ldr	r3, [pc, #72]	@ (80177f0 <hci_user_evt_proc+0x94>)
 80177a6:	2201      	movs	r2, #1
 80177a8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80177aa:	4b11      	ldr	r3, [pc, #68]	@ (80177f0 <hci_user_evt_proc+0x94>)
 80177ac:	781b      	ldrb	r3, [r3, #0]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d004      	beq.n	80177bc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	4618      	mov	r0, r3
 80177b6:	f000 fc0d 	bl	8017fd4 <TL_MM_EvtDone>
 80177ba:	e004      	b.n	80177c6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	4619      	mov	r1, r3
 80177c0:	480a      	ldr	r0, [pc, #40]	@ (80177ec <hci_user_evt_proc+0x90>)
 80177c2:	f000 fd25 	bl	8018210 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80177c6:	4809      	ldr	r0, [pc, #36]	@ (80177ec <hci_user_evt_proc+0x90>)
 80177c8:	f000 fd00 	bl	80181cc <LST_is_empty>
 80177cc:	4603      	mov	r3, r0
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d107      	bne.n	80177e2 <hci_user_evt_proc+0x86>
 80177d2:	4b07      	ldr	r3, [pc, #28]	@ (80177f0 <hci_user_evt_proc+0x94>)
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d003      	beq.n	80177e2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80177da:	4804      	ldr	r0, [pc, #16]	@ (80177ec <hci_user_evt_proc+0x90>)
 80177dc:	f001 fda0 	bl	8019320 <hci_notify_asynch_evt>
  }


  return;
 80177e0:	bf00      	nop
 80177e2:	bf00      	nop
}
 80177e4:	3710      	adds	r7, #16
 80177e6:	46bd      	mov	sp, r7
 80177e8:	bd80      	pop	{r7, pc}
 80177ea:	bf00      	nop
 80177ec:	20000348 	.word	0x20000348
 80177f0:	20000354 	.word	0x20000354
 80177f4:	20001558 	.word	0x20001558

080177f8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b088      	sub	sp, #32
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
 8017800:	460b      	mov	r3, r1
 8017802:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8017804:	2000      	movs	r0, #0
 8017806:	f000 f8d1 	bl	80179ac <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 801780a:	2300      	movs	r3, #0
 801780c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	885b      	ldrh	r3, [r3, #2]
 8017812:	b21b      	sxth	r3, r3
 8017814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017818:	b21a      	sxth	r2, r3
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	881b      	ldrh	r3, [r3, #0]
 801781e:	029b      	lsls	r3, r3, #10
 8017820:	b21b      	sxth	r3, r3
 8017822:	4313      	orrs	r3, r2
 8017824:	b21b      	sxth	r3, r3
 8017826:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8017828:	4b33      	ldr	r3, [pc, #204]	@ (80178f8 <hci_send_req+0x100>)
 801782a:	2201      	movs	r2, #1
 801782c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	68db      	ldr	r3, [r3, #12]
 8017832:	b2d9      	uxtb	r1, r3
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	689a      	ldr	r2, [r3, #8]
 8017838:	8bbb      	ldrh	r3, [r7, #28]
 801783a:	4618      	mov	r0, r3
 801783c:	f000 f890 	bl	8017960 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8017840:	e04e      	b.n	80178e0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8017842:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8017846:	f001 fd82 	bl	801934e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801784a:	e043      	b.n	80178d4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 801784c:	f107 030c 	add.w	r3, r7, #12
 8017850:	4619      	mov	r1, r3
 8017852:	482a      	ldr	r0, [pc, #168]	@ (80178fc <hci_send_req+0x104>)
 8017854:	f000 fd49 	bl	80182ea <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	7a5b      	ldrb	r3, [r3, #9]
 801785c:	2b0f      	cmp	r3, #15
 801785e:	d114      	bne.n	801788a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	330b      	adds	r3, #11
 8017864:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8017866:	693b      	ldr	r3, [r7, #16]
 8017868:	885b      	ldrh	r3, [r3, #2]
 801786a:	b29b      	uxth	r3, r3
 801786c:	8bba      	ldrh	r2, [r7, #28]
 801786e:	429a      	cmp	r2, r3
 8017870:	d104      	bne.n	801787c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	691b      	ldr	r3, [r3, #16]
 8017876:	693a      	ldr	r2, [r7, #16]
 8017878:	7812      	ldrb	r2, [r2, #0]
 801787a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 801787c:	693b      	ldr	r3, [r7, #16]
 801787e:	785b      	ldrb	r3, [r3, #1]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d027      	beq.n	80178d4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8017884:	2301      	movs	r3, #1
 8017886:	77fb      	strb	r3, [r7, #31]
 8017888:	e024      	b.n	80178d4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	330b      	adds	r3, #11
 801788e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017896:	b29b      	uxth	r3, r3
 8017898:	8bba      	ldrh	r2, [r7, #28]
 801789a:	429a      	cmp	r2, r3
 801789c:	d114      	bne.n	80178c8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	7a9b      	ldrb	r3, [r3, #10]
 80178a2:	3b03      	subs	r3, #3
 80178a4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	695a      	ldr	r2, [r3, #20]
 80178aa:	7dfb      	ldrb	r3, [r7, #23]
 80178ac:	429a      	cmp	r2, r3
 80178ae:	bfa8      	it	ge
 80178b0:	461a      	movge	r2, r3
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	6918      	ldr	r0, [r3, #16]
 80178ba:	69bb      	ldr	r3, [r7, #24]
 80178bc:	1cd9      	adds	r1, r3, #3
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	695b      	ldr	r3, [r3, #20]
 80178c2:	461a      	mov	r2, r3
 80178c4:	f005 f931 	bl	801cb2a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80178c8:	69bb      	ldr	r3, [r7, #24]
 80178ca:	781b      	ldrb	r3, [r3, #0]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d001      	beq.n	80178d4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80178d0:	2301      	movs	r3, #1
 80178d2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80178d4:	4809      	ldr	r0, [pc, #36]	@ (80178fc <hci_send_req+0x104>)
 80178d6:	f000 fc79 	bl	80181cc <LST_is_empty>
 80178da:	4603      	mov	r3, r0
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d0b5      	beq.n	801784c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80178e0:	7ffb      	ldrb	r3, [r7, #31]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d0ad      	beq.n	8017842 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80178e6:	2001      	movs	r0, #1
 80178e8:	f000 f860 	bl	80179ac <NotifyCmdStatus>

  return 0;
 80178ec:	2300      	movs	r3, #0
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	3720      	adds	r7, #32
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	bf00      	nop
 80178f8:	20001584 	.word	0x20001584
 80178fc:	20001578 	.word	0x20001578

08017900 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b086      	sub	sp, #24
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8017908:	480f      	ldr	r0, [pc, #60]	@ (8017948 <TlInit+0x48>)
 801790a:	f000 fc4f 	bl	80181ac <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801790e:	4a0f      	ldr	r2, [pc, #60]	@ (801794c <TlInit+0x4c>)
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8017914:	480e      	ldr	r0, [pc, #56]	@ (8017950 <TlInit+0x50>)
 8017916:	f000 fc49 	bl	80181ac <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801791a:	4b0e      	ldr	r3, [pc, #56]	@ (8017954 <TlInit+0x54>)
 801791c:	2201      	movs	r2, #1
 801791e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8017920:	4b0d      	ldr	r3, [pc, #52]	@ (8017958 <TlInit+0x58>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d00a      	beq.n	801793e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 801792c:	4b0b      	ldr	r3, [pc, #44]	@ (801795c <TlInit+0x5c>)
 801792e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8017930:	4b09      	ldr	r3, [pc, #36]	@ (8017958 <TlInit+0x58>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	f107 0208 	add.w	r2, r7, #8
 8017938:	4610      	mov	r0, r2
 801793a:	4798      	blx	r3
  }

  return;
 801793c:	bf00      	nop
 801793e:	bf00      	nop
}
 8017940:	3718      	adds	r7, #24
 8017942:	46bd      	mov	sp, r7
 8017944:	bd80      	pop	{r7, pc}
 8017946:	bf00      	nop
 8017948:	20001578 	.word	0x20001578
 801794c:	20000350 	.word	0x20000350
 8017950:	20000348 	.word	0x20000348
 8017954:	20000354 	.word	0x20000354
 8017958:	20001558 	.word	0x20001558
 801795c:	080179ed 	.word	0x080179ed

08017960 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b082      	sub	sp, #8
 8017964:	af00      	add	r7, sp, #0
 8017966:	4603      	mov	r3, r0
 8017968:	603a      	str	r2, [r7, #0]
 801796a:	80fb      	strh	r3, [r7, #6]
 801796c:	460b      	mov	r3, r1
 801796e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8017970:	4b0c      	ldr	r3, [pc, #48]	@ (80179a4 <SendCmd+0x44>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	88fa      	ldrh	r2, [r7, #6]
 8017976:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801797a:	4b0a      	ldr	r3, [pc, #40]	@ (80179a4 <SendCmd+0x44>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	797a      	ldrb	r2, [r7, #5]
 8017980:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8017982:	4b08      	ldr	r3, [pc, #32]	@ (80179a4 <SendCmd+0x44>)
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	330c      	adds	r3, #12
 8017988:	797a      	ldrb	r2, [r7, #5]
 801798a:	6839      	ldr	r1, [r7, #0]
 801798c:	4618      	mov	r0, r3
 801798e:	f005 f8cc 	bl	801cb2a <memcpy>

  hciContext.io.Send(0,0);
 8017992:	4b05      	ldr	r3, [pc, #20]	@ (80179a8 <SendCmd+0x48>)
 8017994:	691b      	ldr	r3, [r3, #16]
 8017996:	2100      	movs	r1, #0
 8017998:	2000      	movs	r0, #0
 801799a:	4798      	blx	r3

  return;
 801799c:	bf00      	nop
}
 801799e:	3708      	adds	r7, #8
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	20000350 	.word	0x20000350
 80179a8:	20001558 	.word	0x20001558

080179ac <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b082      	sub	sp, #8
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	4603      	mov	r3, r0
 80179b4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80179b6:	79fb      	ldrb	r3, [r7, #7]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d108      	bne.n	80179ce <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80179bc:	4b0a      	ldr	r3, [pc, #40]	@ (80179e8 <NotifyCmdStatus+0x3c>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d00d      	beq.n	80179e0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80179c4:	4b08      	ldr	r3, [pc, #32]	@ (80179e8 <NotifyCmdStatus+0x3c>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	2000      	movs	r0, #0
 80179ca:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80179cc:	e008      	b.n	80179e0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80179ce:	4b06      	ldr	r3, [pc, #24]	@ (80179e8 <NotifyCmdStatus+0x3c>)
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d004      	beq.n	80179e0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80179d6:	4b04      	ldr	r3, [pc, #16]	@ (80179e8 <NotifyCmdStatus+0x3c>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	2001      	movs	r0, #1
 80179dc:	4798      	blx	r3
  return;
 80179de:	bf00      	nop
 80179e0:	bf00      	nop
}
 80179e2:	3708      	adds	r7, #8
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}
 80179e8:	20001580 	.word	0x20001580

080179ec <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b082      	sub	sp, #8
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	7a5b      	ldrb	r3, [r3, #9]
 80179f8:	2b0f      	cmp	r3, #15
 80179fa:	d003      	beq.n	8017a04 <TlEvtReceived+0x18>
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	7a5b      	ldrb	r3, [r3, #9]
 8017a00:	2b0e      	cmp	r3, #14
 8017a02:	d107      	bne.n	8017a14 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8017a04:	6879      	ldr	r1, [r7, #4]
 8017a06:	4809      	ldr	r0, [pc, #36]	@ (8017a2c <TlEvtReceived+0x40>)
 8017a08:	f000 fc28 	bl	801825c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8017a0c:	2000      	movs	r0, #0
 8017a0e:	f001 fc93 	bl	8019338 <hci_cmd_resp_release>
 8017a12:	e006      	b.n	8017a22 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8017a14:	6879      	ldr	r1, [r7, #4]
 8017a16:	4806      	ldr	r0, [pc, #24]	@ (8017a30 <TlEvtReceived+0x44>)
 8017a18:	f000 fc20 	bl	801825c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8017a1c:	4804      	ldr	r0, [pc, #16]	@ (8017a30 <TlEvtReceived+0x44>)
 8017a1e:	f001 fc7f 	bl	8019320 <hci_notify_asynch_evt>
  }

  return;
 8017a22:	bf00      	nop
}
 8017a24:	3708      	adds	r7, #8
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
 8017a2a:	bf00      	nop
 8017a2c:	20001578 	.word	0x20001578
 8017a30:	20000348 	.word	0x20000348

08017a34 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8017a34:	b480      	push	{r7}
 8017a36:	b083      	sub	sp, #12
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	4a05      	ldr	r2, [pc, #20]	@ (8017a54 <hci_register_io_bus+0x20>)
 8017a40:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	4a04      	ldr	r2, [pc, #16]	@ (8017a58 <hci_register_io_bus+0x24>)
 8017a46:	611a      	str	r2, [r3, #16]

  return;
 8017a48:	bf00      	nop
}
 8017a4a:	370c      	adds	r7, #12
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a52:	4770      	bx	lr
 8017a54:	08017d4d 	.word	0x08017d4d
 8017a58:	08017db5 	.word	0x08017db5

08017a5c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	685b      	ldr	r3, [r3, #4]
 8017a6a:	4a08      	ldr	r2, [pc, #32]	@ (8017a8c <shci_init+0x30>)
 8017a6c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8017a6e:	4a08      	ldr	r2, [pc, #32]	@ (8017a90 <shci_init+0x34>)
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8017a74:	4806      	ldr	r0, [pc, #24]	@ (8017a90 <shci_init+0x34>)
 8017a76:	f000 f915 	bl	8017ca4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f000 f898 	bl	8017bb4 <TlInit>

  return;
 8017a84:	bf00      	nop
}
 8017a86:	3708      	adds	r7, #8
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}
 8017a8c:	200015a8 	.word	0x200015a8
 8017a90:	20001588 	.word	0x20001588

08017a94 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b084      	sub	sp, #16
 8017a98:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8017a9a:	4822      	ldr	r0, [pc, #136]	@ (8017b24 <shci_user_evt_proc+0x90>)
 8017a9c:	f000 fb96 	bl	80181cc <LST_is_empty>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d12b      	bne.n	8017afe <shci_user_evt_proc+0x6a>
 8017aa6:	4b20      	ldr	r3, [pc, #128]	@ (8017b28 <shci_user_evt_proc+0x94>)
 8017aa8:	781b      	ldrb	r3, [r3, #0]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d027      	beq.n	8017afe <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8017aae:	f107 030c 	add.w	r3, r7, #12
 8017ab2:	4619      	mov	r1, r3
 8017ab4:	481b      	ldr	r0, [pc, #108]	@ (8017b24 <shci_user_evt_proc+0x90>)
 8017ab6:	f000 fc18 	bl	80182ea <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8017aba:	4b1c      	ldr	r3, [pc, #112]	@ (8017b2c <shci_user_evt_proc+0x98>)
 8017abc:	69db      	ldr	r3, [r3, #28]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d00c      	beq.n	8017adc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8017aca:	4b18      	ldr	r3, [pc, #96]	@ (8017b2c <shci_user_evt_proc+0x98>)
 8017acc:	69db      	ldr	r3, [r3, #28]
 8017ace:	1d3a      	adds	r2, r7, #4
 8017ad0:	4610      	mov	r0, r2
 8017ad2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8017ad4:	793a      	ldrb	r2, [r7, #4]
 8017ad6:	4b14      	ldr	r3, [pc, #80]	@ (8017b28 <shci_user_evt_proc+0x94>)
 8017ad8:	701a      	strb	r2, [r3, #0]
 8017ada:	e002      	b.n	8017ae2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8017adc:	4b12      	ldr	r3, [pc, #72]	@ (8017b28 <shci_user_evt_proc+0x94>)
 8017ade:	2201      	movs	r2, #1
 8017ae0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8017ae2:	4b11      	ldr	r3, [pc, #68]	@ (8017b28 <shci_user_evt_proc+0x94>)
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d004      	beq.n	8017af4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	4618      	mov	r0, r3
 8017aee:	f000 fa71 	bl	8017fd4 <TL_MM_EvtDone>
 8017af2:	e004      	b.n	8017afe <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	4619      	mov	r1, r3
 8017af8:	480a      	ldr	r0, [pc, #40]	@ (8017b24 <shci_user_evt_proc+0x90>)
 8017afa:	f000 fb89 	bl	8018210 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8017afe:	4809      	ldr	r0, [pc, #36]	@ (8017b24 <shci_user_evt_proc+0x90>)
 8017b00:	f000 fb64 	bl	80181cc <LST_is_empty>
 8017b04:	4603      	mov	r3, r0
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d107      	bne.n	8017b1a <shci_user_evt_proc+0x86>
 8017b0a:	4b07      	ldr	r3, [pc, #28]	@ (8017b28 <shci_user_evt_proc+0x94>)
 8017b0c:	781b      	ldrb	r3, [r3, #0]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d003      	beq.n	8017b1a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8017b12:	4804      	ldr	r0, [pc, #16]	@ (8017b24 <shci_user_evt_proc+0x90>)
 8017b14:	f7ea f824 	bl	8001b60 <shci_notify_asynch_evt>
  }


  return;
 8017b18:	bf00      	nop
 8017b1a:	bf00      	nop
}
 8017b1c:	3710      	adds	r7, #16
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	20000358 	.word	0x20000358
 8017b28:	20000368 	.word	0x20000368
 8017b2c:	20001588 	.word	0x20001588

08017b30 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	60ba      	str	r2, [r7, #8]
 8017b38:	607b      	str	r3, [r7, #4]
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	81fb      	strh	r3, [r7, #14]
 8017b3e:	460b      	mov	r3, r1
 8017b40:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8017b42:	2000      	movs	r0, #0
 8017b44:	f000 f868 	bl	8017c18 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8017b48:	4b17      	ldr	r3, [pc, #92]	@ (8017ba8 <shci_send+0x78>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	89fa      	ldrh	r2, [r7, #14]
 8017b4e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8017b52:	4b15      	ldr	r3, [pc, #84]	@ (8017ba8 <shci_send+0x78>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	7b7a      	ldrb	r2, [r7, #13]
 8017b58:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8017b5a:	4b13      	ldr	r3, [pc, #76]	@ (8017ba8 <shci_send+0x78>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	330c      	adds	r3, #12
 8017b60:	7b7a      	ldrb	r2, [r7, #13]
 8017b62:	68b9      	ldr	r1, [r7, #8]
 8017b64:	4618      	mov	r0, r3
 8017b66:	f004 ffe0 	bl	801cb2a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8017b6a:	4b10      	ldr	r3, [pc, #64]	@ (8017bac <shci_send+0x7c>)
 8017b6c:	2201      	movs	r2, #1
 8017b6e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8017b70:	4b0f      	ldr	r3, [pc, #60]	@ (8017bb0 <shci_send+0x80>)
 8017b72:	691b      	ldr	r3, [r3, #16]
 8017b74:	2100      	movs	r1, #0
 8017b76:	2000      	movs	r0, #0
 8017b78:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8017b7a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8017b7e:	f7ea f806 	bl	8001b8e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	f103 0008 	add.w	r0, r3, #8
 8017b88:	4b07      	ldr	r3, [pc, #28]	@ (8017ba8 <shci_send+0x78>)
 8017b8a:	6819      	ldr	r1, [r3, #0]
 8017b8c:	4b06      	ldr	r3, [pc, #24]	@ (8017ba8 <shci_send+0x78>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	789b      	ldrb	r3, [r3, #2]
 8017b92:	3303      	adds	r3, #3
 8017b94:	461a      	mov	r2, r3
 8017b96:	f004 ffc8 	bl	801cb2a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8017b9a:	2001      	movs	r0, #1
 8017b9c:	f000 f83c 	bl	8017c18 <Cmd_SetStatus>

  return;
 8017ba0:	bf00      	nop
}
 8017ba2:	3710      	adds	r7, #16
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	bd80      	pop	{r7, pc}
 8017ba8:	20000364 	.word	0x20000364
 8017bac:	200015ac 	.word	0x200015ac
 8017bb0:	20001588 	.word	0x20001588

08017bb4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b086      	sub	sp, #24
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8017bbc:	4a10      	ldr	r2, [pc, #64]	@ (8017c00 <TlInit+0x4c>)
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8017bc2:	4810      	ldr	r0, [pc, #64]	@ (8017c04 <TlInit+0x50>)
 8017bc4:	f000 faf2 	bl	80181ac <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8017bc8:	2001      	movs	r0, #1
 8017bca:	f000 f825 	bl	8017c18 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8017bce:	4b0e      	ldr	r3, [pc, #56]	@ (8017c08 <TlInit+0x54>)
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8017bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8017c0c <TlInit+0x58>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d00c      	beq.n	8017bf6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8017be0:	4b0b      	ldr	r3, [pc, #44]	@ (8017c10 <TlInit+0x5c>)
 8017be2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8017be4:	4b0b      	ldr	r3, [pc, #44]	@ (8017c14 <TlInit+0x60>)
 8017be6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8017be8:	4b08      	ldr	r3, [pc, #32]	@ (8017c0c <TlInit+0x58>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	f107 020c 	add.w	r2, r7, #12
 8017bf0:	4610      	mov	r0, r2
 8017bf2:	4798      	blx	r3
  }

  return;
 8017bf4:	bf00      	nop
 8017bf6:	bf00      	nop
}
 8017bf8:	3718      	adds	r7, #24
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}
 8017bfe:	bf00      	nop
 8017c00:	20000364 	.word	0x20000364
 8017c04:	20000358 	.word	0x20000358
 8017c08:	20000368 	.word	0x20000368
 8017c0c:	20001588 	.word	0x20001588
 8017c10:	08017c69 	.word	0x08017c69
 8017c14:	08017c81 	.word	0x08017c81

08017c18 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	4603      	mov	r3, r0
 8017c20:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8017c22:	79fb      	ldrb	r3, [r7, #7]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d10b      	bne.n	8017c40 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8017c28:	4b0d      	ldr	r3, [pc, #52]	@ (8017c60 <Cmd_SetStatus+0x48>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d003      	beq.n	8017c38 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8017c30:	4b0b      	ldr	r3, [pc, #44]	@ (8017c60 <Cmd_SetStatus+0x48>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	2000      	movs	r0, #0
 8017c36:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8017c38:	4b0a      	ldr	r3, [pc, #40]	@ (8017c64 <Cmd_SetStatus+0x4c>)
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8017c3e:	e00b      	b.n	8017c58 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8017c40:	4b08      	ldr	r3, [pc, #32]	@ (8017c64 <Cmd_SetStatus+0x4c>)
 8017c42:	2201      	movs	r2, #1
 8017c44:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8017c46:	4b06      	ldr	r3, [pc, #24]	@ (8017c60 <Cmd_SetStatus+0x48>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d004      	beq.n	8017c58 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8017c4e:	4b04      	ldr	r3, [pc, #16]	@ (8017c60 <Cmd_SetStatus+0x48>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	2001      	movs	r0, #1
 8017c54:	4798      	blx	r3
  return;
 8017c56:	bf00      	nop
 8017c58:	bf00      	nop
}
 8017c5a:	3708      	adds	r7, #8
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	bd80      	pop	{r7, pc}
 8017c60:	200015a8 	.word	0x200015a8
 8017c64:	20000360 	.word	0x20000360

08017c68 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8017c70:	2000      	movs	r0, #0
 8017c72:	f7e9 ff81 	bl	8001b78 <shci_cmd_resp_release>

  return;
 8017c76:	bf00      	nop
}
 8017c78:	3708      	adds	r7, #8
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}
	...

08017c80 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8017c88:	6879      	ldr	r1, [r7, #4]
 8017c8a:	4805      	ldr	r0, [pc, #20]	@ (8017ca0 <TlUserEvtReceived+0x20>)
 8017c8c:	f000 fae6 	bl	801825c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8017c90:	4803      	ldr	r0, [pc, #12]	@ (8017ca0 <TlUserEvtReceived+0x20>)
 8017c92:	f7e9 ff65 	bl	8001b60 <shci_notify_asynch_evt>

  return;
 8017c96:	bf00      	nop
}
 8017c98:	3708      	adds	r7, #8
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	bd80      	pop	{r7, pc}
 8017c9e:	bf00      	nop
 8017ca0:	20000358 	.word	0x20000358

08017ca4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8017ca4:	b480      	push	{r7}
 8017ca6:	b083      	sub	sp, #12
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	4a05      	ldr	r2, [pc, #20]	@ (8017cc4 <shci_register_io_bus+0x20>)
 8017cb0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	4a04      	ldr	r2, [pc, #16]	@ (8017cc8 <shci_register_io_bus+0x24>)
 8017cb6:	611a      	str	r2, [r3, #16]

  return;
 8017cb8:	bf00      	nop
}
 8017cba:	370c      	adds	r7, #12
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc2:	4770      	bx	lr
 8017cc4:	08017e61 	.word	0x08017e61
 8017cc8:	08017eb5 	.word	0x08017eb5

08017ccc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8017cd0:	f001 fe18 	bl	8019904 <HW_IPCC_Enable>

  return;
 8017cd4:	bf00      	nop
}
 8017cd6:	bd80      	pop	{r7, pc}

08017cd8 <TL_Init>:


void TL_Init( void )
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8017cdc:	4b10      	ldr	r3, [pc, #64]	@ (8017d20 <TL_Init+0x48>)
 8017cde:	4a11      	ldr	r2, [pc, #68]	@ (8017d24 <TL_Init+0x4c>)
 8017ce0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8017ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8017d20 <TL_Init+0x48>)
 8017ce4:	4a10      	ldr	r2, [pc, #64]	@ (8017d28 <TL_Init+0x50>)
 8017ce6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8017ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8017d20 <TL_Init+0x48>)
 8017cea:	4a10      	ldr	r2, [pc, #64]	@ (8017d2c <TL_Init+0x54>)
 8017cec:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8017cee:	4b0c      	ldr	r3, [pc, #48]	@ (8017d20 <TL_Init+0x48>)
 8017cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8017d30 <TL_Init+0x58>)
 8017cf2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8017cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8017d20 <TL_Init+0x48>)
 8017cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8017d34 <TL_Init+0x5c>)
 8017cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8017cfa:	4b09      	ldr	r3, [pc, #36]	@ (8017d20 <TL_Init+0x48>)
 8017cfc:	4a0e      	ldr	r2, [pc, #56]	@ (8017d38 <TL_Init+0x60>)
 8017cfe:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8017d00:	4b07      	ldr	r3, [pc, #28]	@ (8017d20 <TL_Init+0x48>)
 8017d02:	4a0e      	ldr	r2, [pc, #56]	@ (8017d3c <TL_Init+0x64>)
 8017d04:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8017d06:	4b06      	ldr	r3, [pc, #24]	@ (8017d20 <TL_Init+0x48>)
 8017d08:	4a0d      	ldr	r2, [pc, #52]	@ (8017d40 <TL_Init+0x68>)
 8017d0a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8017d0c:	4b04      	ldr	r3, [pc, #16]	@ (8017d20 <TL_Init+0x48>)
 8017d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8017d44 <TL_Init+0x6c>)
 8017d10:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8017d12:	4b03      	ldr	r3, [pc, #12]	@ (8017d20 <TL_Init+0x48>)
 8017d14:	4a0c      	ldr	r2, [pc, #48]	@ (8017d48 <TL_Init+0x70>)
 8017d16:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8017d18:	f001 fe08 	bl	801992c <HW_IPCC_Init>

  return;
 8017d1c:	bf00      	nop
}
 8017d1e:	bd80      	pop	{r7, pc}
 8017d20:	20030000 	.word	0x20030000
 8017d24:	20030028 	.word	0x20030028
 8017d28:	20030048 	.word	0x20030048
 8017d2c:	20030058 	.word	0x20030058
 8017d30:	20030068 	.word	0x20030068
 8017d34:	20030070 	.word	0x20030070
 8017d38:	20030078 	.word	0x20030078
 8017d3c:	20030080 	.word	0x20030080
 8017d40:	2003009c 	.word	0x2003009c
 8017d44:	200300a0 	.word	0x200300a0
 8017d48:	200300ac 	.word	0x200300ac

08017d4c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b084      	sub	sp, #16
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8017d58:	4811      	ldr	r0, [pc, #68]	@ (8017da0 <TL_BLE_Init+0x54>)
 8017d5a:	f000 fa27 	bl	80181ac <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8017d5e:	4b11      	ldr	r3, [pc, #68]	@ (8017da4 <TL_BLE_Init+0x58>)
 8017d60:	685b      	ldr	r3, [r3, #4]
 8017d62:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	689a      	ldr	r2, [r3, #8]
 8017d68:	68bb      	ldr	r3, [r7, #8]
 8017d6a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	68da      	ldr	r2, [r3, #12]
 8017d70:	68bb      	ldr	r3, [r7, #8]
 8017d72:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8017d74:	68bb      	ldr	r3, [r7, #8]
 8017d76:	4a0c      	ldr	r2, [pc, #48]	@ (8017da8 <TL_BLE_Init+0x5c>)
 8017d78:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8017d7a:	68bb      	ldr	r3, [r7, #8]
 8017d7c:	4a08      	ldr	r2, [pc, #32]	@ (8017da0 <TL_BLE_Init+0x54>)
 8017d7e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8017d80:	f001 fdea 	bl	8019958 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	4a08      	ldr	r2, [pc, #32]	@ (8017dac <TL_BLE_Init+0x60>)
 8017d8a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	685b      	ldr	r3, [r3, #4]
 8017d90:	4a07      	ldr	r2, [pc, #28]	@ (8017db0 <TL_BLE_Init+0x64>)
 8017d92:	6013      	str	r3, [r2, #0]

  return 0;
 8017d94:	2300      	movs	r3, #0
}
 8017d96:	4618      	mov	r0, r3
 8017d98:	3710      	adds	r7, #16
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}
 8017d9e:	bf00      	nop
 8017da0:	200300c8 	.word	0x200300c8
 8017da4:	20030000 	.word	0x20030000
 8017da8:	20030a58 	.word	0x20030a58
 8017dac:	200015b8 	.word	0x200015b8
 8017db0:	200015bc 	.word	0x200015bc

08017db4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b082      	sub	sp, #8
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
 8017dbc:	460b      	mov	r3, r1
 8017dbe:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8017dc0:	4b09      	ldr	r3, [pc, #36]	@ (8017de8 <TL_BLE_SendCmd+0x34>)
 8017dc2:	685b      	ldr	r3, [r3, #4]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	2201      	movs	r2, #1
 8017dc8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8017dca:	4b07      	ldr	r3, [pc, #28]	@ (8017de8 <TL_BLE_SendCmd+0x34>)
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	2001      	movs	r0, #1
 8017dd4:	f000 f96c 	bl	80180b0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8017dd8:	f001 fdc8 	bl	801996c <HW_IPCC_BLE_SendCmd>

  return 0;
 8017ddc:	2300      	movs	r3, #0
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	3708      	adds	r7, #8
 8017de2:	46bd      	mov	sp, r7
 8017de4:	bd80      	pop	{r7, pc}
 8017de6:	bf00      	nop
 8017de8:	20030000 	.word	0x20030000

08017dec <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b082      	sub	sp, #8
 8017df0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8017df2:	e01c      	b.n	8017e2e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8017df4:	1d3b      	adds	r3, r7, #4
 8017df6:	4619      	mov	r1, r3
 8017df8:	4812      	ldr	r0, [pc, #72]	@ (8017e44 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8017dfa:	f000 fa76 	bl	80182ea <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	7a5b      	ldrb	r3, [r3, #9]
 8017e02:	2b0f      	cmp	r3, #15
 8017e04:	d003      	beq.n	8017e0e <HW_IPCC_BLE_RxEvtNot+0x22>
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	7a5b      	ldrb	r3, [r3, #9]
 8017e0a:	2b0e      	cmp	r3, #14
 8017e0c:	d105      	bne.n	8017e1a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	4619      	mov	r1, r3
 8017e12:	2002      	movs	r0, #2
 8017e14:	f000 f94c 	bl	80180b0 <OutputDbgTrace>
 8017e18:	e004      	b.n	8017e24 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	4619      	mov	r1, r3
 8017e1e:	2003      	movs	r0, #3
 8017e20:	f000 f946 	bl	80180b0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8017e24:	4b08      	ldr	r3, [pc, #32]	@ (8017e48 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	687a      	ldr	r2, [r7, #4]
 8017e2a:	4610      	mov	r0, r2
 8017e2c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8017e2e:	4805      	ldr	r0, [pc, #20]	@ (8017e44 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8017e30:	f000 f9cc 	bl	80181cc <LST_is_empty>
 8017e34:	4603      	mov	r3, r0
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d0dc      	beq.n	8017df4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8017e3a:	bf00      	nop
}
 8017e3c:	3708      	adds	r7, #8
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}
 8017e42:	bf00      	nop
 8017e44:	200300c8 	.word	0x200300c8
 8017e48:	200015b8 	.word	0x200015b8

08017e4c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8017e50:	4b02      	ldr	r3, [pc, #8]	@ (8017e5c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	4798      	blx	r3

  return;
 8017e56:	bf00      	nop
}
 8017e58:	bd80      	pop	{r7, pc}
 8017e5a:	bf00      	nop
 8017e5c:	200015bc 	.word	0x200015bc

08017e60 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b084      	sub	sp, #16
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8017e6c:	480d      	ldr	r0, [pc, #52]	@ (8017ea4 <TL_SYS_Init+0x44>)
 8017e6e:	f000 f99d 	bl	80181ac <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8017e72:	4b0d      	ldr	r3, [pc, #52]	@ (8017ea8 <TL_SYS_Init+0x48>)
 8017e74:	68db      	ldr	r3, [r3, #12]
 8017e76:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	689a      	ldr	r2, [r3, #8]
 8017e7c:	68bb      	ldr	r3, [r7, #8]
 8017e7e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	4a08      	ldr	r2, [pc, #32]	@ (8017ea4 <TL_SYS_Init+0x44>)
 8017e84:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8017e86:	f001 fd93 	bl	80199b0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	4a07      	ldr	r2, [pc, #28]	@ (8017eac <TL_SYS_Init+0x4c>)
 8017e90:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	685b      	ldr	r3, [r3, #4]
 8017e96:	4a06      	ldr	r2, [pc, #24]	@ (8017eb0 <TL_SYS_Init+0x50>)
 8017e98:	6013      	str	r3, [r2, #0]

  return 0;
 8017e9a:	2300      	movs	r3, #0
}
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	3710      	adds	r7, #16
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	bd80      	pop	{r7, pc}
 8017ea4:	200300d0 	.word	0x200300d0
 8017ea8:	20030000 	.word	0x20030000
 8017eac:	200015c0 	.word	0x200015c0
 8017eb0:	200015c4 	.word	0x200015c4

08017eb4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b082      	sub	sp, #8
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	460b      	mov	r3, r1
 8017ebe:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8017ec0:	4b09      	ldr	r3, [pc, #36]	@ (8017ee8 <TL_SYS_SendCmd+0x34>)
 8017ec2:	68db      	ldr	r3, [r3, #12]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	2210      	movs	r2, #16
 8017ec8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8017eca:	4b07      	ldr	r3, [pc, #28]	@ (8017ee8 <TL_SYS_SendCmd+0x34>)
 8017ecc:	68db      	ldr	r3, [r3, #12]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	2004      	movs	r0, #4
 8017ed4:	f000 f8ec 	bl	80180b0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8017ed8:	f001 fd74 	bl	80199c4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8017edc:	2300      	movs	r3, #0
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3708      	adds	r7, #8
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}
 8017ee6:	bf00      	nop
 8017ee8:	20030000 	.word	0x20030000

08017eec <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8017ef0:	4b07      	ldr	r3, [pc, #28]	@ (8017f10 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8017ef2:	68db      	ldr	r3, [r3, #12]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	4619      	mov	r1, r3
 8017ef8:	2005      	movs	r0, #5
 8017efa:	f000 f8d9 	bl	80180b0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8017efe:	4b05      	ldr	r3, [pc, #20]	@ (8017f14 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	4a03      	ldr	r2, [pc, #12]	@ (8017f10 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8017f04:	68d2      	ldr	r2, [r2, #12]
 8017f06:	6812      	ldr	r2, [r2, #0]
 8017f08:	4610      	mov	r0, r2
 8017f0a:	4798      	blx	r3

  return;
 8017f0c:	bf00      	nop
}
 8017f0e:	bd80      	pop	{r7, pc}
 8017f10:	20030000 	.word	0x20030000
 8017f14:	200015c0 	.word	0x200015c0

08017f18 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b082      	sub	sp, #8
 8017f1c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8017f1e:	e00e      	b.n	8017f3e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8017f20:	1d3b      	adds	r3, r7, #4
 8017f22:	4619      	mov	r1, r3
 8017f24:	480b      	ldr	r0, [pc, #44]	@ (8017f54 <HW_IPCC_SYS_EvtNot+0x3c>)
 8017f26:	f000 f9e0 	bl	80182ea <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	4619      	mov	r1, r3
 8017f2e:	2006      	movs	r0, #6
 8017f30:	f000 f8be 	bl	80180b0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8017f34:	4b08      	ldr	r3, [pc, #32]	@ (8017f58 <HW_IPCC_SYS_EvtNot+0x40>)
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	687a      	ldr	r2, [r7, #4]
 8017f3a:	4610      	mov	r0, r2
 8017f3c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8017f3e:	4805      	ldr	r0, [pc, #20]	@ (8017f54 <HW_IPCC_SYS_EvtNot+0x3c>)
 8017f40:	f000 f944 	bl	80181cc <LST_is_empty>
 8017f44:	4603      	mov	r3, r0
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d0ea      	beq.n	8017f20 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8017f4a:	bf00      	nop
}
 8017f4c:	3708      	adds	r7, #8
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
 8017f52:	bf00      	nop
 8017f54:	200300d0 	.word	0x200300d0
 8017f58:	200015c4 	.word	0x200015c4

08017f5c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b082      	sub	sp, #8
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8017f64:	4817      	ldr	r0, [pc, #92]	@ (8017fc4 <TL_MM_Init+0x68>)
 8017f66:	f000 f921 	bl	80181ac <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8017f6a:	4817      	ldr	r0, [pc, #92]	@ (8017fc8 <TL_MM_Init+0x6c>)
 8017f6c:	f000 f91e 	bl	80181ac <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8017f70:	4b16      	ldr	r3, [pc, #88]	@ (8017fcc <TL_MM_Init+0x70>)
 8017f72:	691b      	ldr	r3, [r3, #16]
 8017f74:	4a16      	ldr	r2, [pc, #88]	@ (8017fd0 <TL_MM_Init+0x74>)
 8017f76:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8017f78:	4b15      	ldr	r3, [pc, #84]	@ (8017fd0 <TL_MM_Init+0x74>)
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	687a      	ldr	r2, [r7, #4]
 8017f7e:	6892      	ldr	r2, [r2, #8]
 8017f80:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8017f82:	4b13      	ldr	r3, [pc, #76]	@ (8017fd0 <TL_MM_Init+0x74>)
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	687a      	ldr	r2, [r7, #4]
 8017f88:	68d2      	ldr	r2, [r2, #12]
 8017f8a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8017f8c:	4b10      	ldr	r3, [pc, #64]	@ (8017fd0 <TL_MM_Init+0x74>)
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	4a0c      	ldr	r2, [pc, #48]	@ (8017fc4 <TL_MM_Init+0x68>)
 8017f92:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8017f94:	4b0e      	ldr	r3, [pc, #56]	@ (8017fd0 <TL_MM_Init+0x74>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	687a      	ldr	r2, [r7, #4]
 8017f9a:	6812      	ldr	r2, [r2, #0]
 8017f9c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8017f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8017fd0 <TL_MM_Init+0x74>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	687a      	ldr	r2, [r7, #4]
 8017fa4:	6852      	ldr	r2, [r2, #4]
 8017fa6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8017fa8:	4b09      	ldr	r3, [pc, #36]	@ (8017fd0 <TL_MM_Init+0x74>)
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	687a      	ldr	r2, [r7, #4]
 8017fae:	6912      	ldr	r2, [r2, #16]
 8017fb0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8017fb2:	4b07      	ldr	r3, [pc, #28]	@ (8017fd0 <TL_MM_Init+0x74>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	687a      	ldr	r2, [r7, #4]
 8017fb8:	6952      	ldr	r2, [r2, #20]
 8017fba:	619a      	str	r2, [r3, #24]

  return;
 8017fbc:	bf00      	nop
}
 8017fbe:	3708      	adds	r7, #8
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}
 8017fc4:	200300b8 	.word	0x200300b8
 8017fc8:	200015b0 	.word	0x200015b0
 8017fcc:	20030000 	.word	0x20030000
 8017fd0:	200015c8 	.word	0x200015c8

08017fd4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8017fdc:	6879      	ldr	r1, [r7, #4]
 8017fde:	4807      	ldr	r0, [pc, #28]	@ (8017ffc <TL_MM_EvtDone+0x28>)
 8017fe0:	f000 f93c 	bl	801825c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8017fe4:	6879      	ldr	r1, [r7, #4]
 8017fe6:	2000      	movs	r0, #0
 8017fe8:	f000 f862 	bl	80180b0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8017fec:	4804      	ldr	r0, [pc, #16]	@ (8018000 <TL_MM_EvtDone+0x2c>)
 8017fee:	f001 fd0f 	bl	8019a10 <HW_IPCC_MM_SendFreeBuf>

  return;
 8017ff2:	bf00      	nop
}
 8017ff4:	3708      	adds	r7, #8
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	bd80      	pop	{r7, pc}
 8017ffa:	bf00      	nop
 8017ffc:	200015b0 	.word	0x200015b0
 8018000:	08018005 	.word	0x08018005

08018004 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b082      	sub	sp, #8
 8018008:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801800a:	e00c      	b.n	8018026 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 801800c:	1d3b      	adds	r3, r7, #4
 801800e:	4619      	mov	r1, r3
 8018010:	480a      	ldr	r0, [pc, #40]	@ (801803c <SendFreeBuf+0x38>)
 8018012:	f000 f96a 	bl	80182ea <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8018016:	4b0a      	ldr	r3, [pc, #40]	@ (8018040 <SendFreeBuf+0x3c>)
 8018018:	691b      	ldr	r3, [r3, #16]
 801801a:	691b      	ldr	r3, [r3, #16]
 801801c:	687a      	ldr	r2, [r7, #4]
 801801e:	4611      	mov	r1, r2
 8018020:	4618      	mov	r0, r3
 8018022:	f000 f91b 	bl	801825c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8018026:	4805      	ldr	r0, [pc, #20]	@ (801803c <SendFreeBuf+0x38>)
 8018028:	f000 f8d0 	bl	80181cc <LST_is_empty>
 801802c:	4603      	mov	r3, r0
 801802e:	2b00      	cmp	r3, #0
 8018030:	d0ec      	beq.n	801800c <SendFreeBuf+0x8>
  }

  return;
 8018032:	bf00      	nop
}
 8018034:	3708      	adds	r7, #8
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}
 801803a:	bf00      	nop
 801803c:	200015b0 	.word	0x200015b0
 8018040:	20030000 	.word	0x20030000

08018044 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8018044:	b580      	push	{r7, lr}
 8018046:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8018048:	4805      	ldr	r0, [pc, #20]	@ (8018060 <TL_TRACES_Init+0x1c>)
 801804a:	f000 f8af 	bl	80181ac <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801804e:	4b05      	ldr	r3, [pc, #20]	@ (8018064 <TL_TRACES_Init+0x20>)
 8018050:	695b      	ldr	r3, [r3, #20]
 8018052:	4a03      	ldr	r2, [pc, #12]	@ (8018060 <TL_TRACES_Init+0x1c>)
 8018054:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8018056:	f001 fd11 	bl	8019a7c <HW_IPCC_TRACES_Init>

  return;
 801805a:	bf00      	nop
}
 801805c:	bd80      	pop	{r7, pc}
 801805e:	bf00      	nop
 8018060:	200300c0 	.word	0x200300c0
 8018064:	20030000 	.word	0x20030000

08018068 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b082      	sub	sp, #8
 801806c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801806e:	e008      	b.n	8018082 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8018070:	1d3b      	adds	r3, r7, #4
 8018072:	4619      	mov	r1, r3
 8018074:	4808      	ldr	r0, [pc, #32]	@ (8018098 <HW_IPCC_TRACES_EvtNot+0x30>)
 8018076:	f000 f938 	bl	80182ea <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	4618      	mov	r0, r3
 801807e:	f000 f80d 	bl	801809c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8018082:	4805      	ldr	r0, [pc, #20]	@ (8018098 <HW_IPCC_TRACES_EvtNot+0x30>)
 8018084:	f000 f8a2 	bl	80181cc <LST_is_empty>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d0f0      	beq.n	8018070 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801808e:	bf00      	nop
}
 8018090:	3708      	adds	r7, #8
 8018092:	46bd      	mov	sp, r7
 8018094:	bd80      	pop	{r7, pc}
 8018096:	bf00      	nop
 8018098:	200300c0 	.word	0x200300c0

0801809c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 801809c:	b480      	push	{r7}
 801809e:	b083      	sub	sp, #12
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80180a4:	bf00      	nop
 80180a6:	370c      	adds	r7, #12
 80180a8:	46bd      	mov	sp, r7
 80180aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ae:	4770      	bx	lr

080180b0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80180b0:	b480      	push	{r7}
 80180b2:	b087      	sub	sp, #28
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	4603      	mov	r3, r0
 80180b8:	6039      	str	r1, [r7, #0]
 80180ba:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80180bc:	79fb      	ldrb	r3, [r7, #7]
 80180be:	2b06      	cmp	r3, #6
 80180c0:	d845      	bhi.n	801814e <OutputDbgTrace+0x9e>
 80180c2:	a201      	add	r2, pc, #4	@ (adr r2, 80180c8 <OutputDbgTrace+0x18>)
 80180c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180c8:	080180e5 	.word	0x080180e5
 80180cc:	08018109 	.word	0x08018109
 80180d0:	0801810f 	.word	0x0801810f
 80180d4:	08018123 	.word	0x08018123
 80180d8:	0801812f 	.word	0x0801812f
 80180dc:	08018135 	.word	0x08018135
 80180e0:	08018143 	.word	0x08018143
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	7a5b      	ldrb	r3, [r3, #9]
 80180ec:	2bff      	cmp	r3, #255	@ 0xff
 80180ee:	d005      	beq.n	80180fc <OutputDbgTrace+0x4c>
 80180f0:	2bff      	cmp	r3, #255	@ 0xff
 80180f2:	dc05      	bgt.n	8018100 <OutputDbgTrace+0x50>
 80180f4:	2b0e      	cmp	r3, #14
 80180f6:	d005      	beq.n	8018104 <OutputDbgTrace+0x54>
 80180f8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80180fa:	e001      	b.n	8018100 <OutputDbgTrace+0x50>
          break;
 80180fc:	bf00      	nop
 80180fe:	e027      	b.n	8018150 <OutputDbgTrace+0xa0>
          break;
 8018100:	bf00      	nop
 8018102:	e025      	b.n	8018150 <OutputDbgTrace+0xa0>
          break;
 8018104:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8018106:	e023      	b.n	8018150 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8018108:	683b      	ldr	r3, [r7, #0]
 801810a:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801810c:	e020      	b.n	8018150 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8018112:	697b      	ldr	r3, [r7, #20]
 8018114:	7a5b      	ldrb	r3, [r3, #9]
 8018116:	2b0e      	cmp	r3, #14
 8018118:	d001      	beq.n	801811e <OutputDbgTrace+0x6e>
 801811a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801811c:	e000      	b.n	8018120 <OutputDbgTrace+0x70>
          break;
 801811e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018120:	e016      	b.n	8018150 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8018122:	683b      	ldr	r3, [r7, #0]
 8018124:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8018126:	697b      	ldr	r3, [r7, #20]
 8018128:	7a5b      	ldrb	r3, [r3, #9]
 801812a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801812c:	e010      	b.n	8018150 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801812e:	683b      	ldr	r3, [r7, #0]
 8018130:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8018132:	e00d      	b.n	8018150 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8018134:	683b      	ldr	r3, [r7, #0]
 8018136:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8018138:	693b      	ldr	r3, [r7, #16]
 801813a:	785b      	ldrb	r3, [r3, #1]
 801813c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 801813e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8018140:	e006      	b.n	8018150 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8018142:	683b      	ldr	r3, [r7, #0]
 8018144:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8018146:	697b      	ldr	r3, [r7, #20]
 8018148:	7a5b      	ldrb	r3, [r3, #9]
 801814a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801814c:	e000      	b.n	8018150 <OutputDbgTrace+0xa0>

    default:
      break;
 801814e:	bf00      	nop
  }

  return;
 8018150:	bf00      	nop
}
 8018152:	371c      	adds	r7, #28
 8018154:	46bd      	mov	sp, r7
 8018156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815a:	4770      	bx	lr

0801815c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 801815c:	b480      	push	{r7}
 801815e:	b085      	sub	sp, #20
 8018160:	af00      	add	r7, sp, #0
 8018162:	4603      	mov	r3, r0
 8018164:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8018166:	4b0f      	ldr	r3, [pc, #60]	@ (80181a4 <OTP_Read+0x48>)
 8018168:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801816a:	e002      	b.n	8018172 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	3b08      	subs	r3, #8
 8018170:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	3307      	adds	r3, #7
 8018176:	781b      	ldrb	r3, [r3, #0]
 8018178:	79fa      	ldrb	r2, [r7, #7]
 801817a:	429a      	cmp	r2, r3
 801817c:	d003      	beq.n	8018186 <OTP_Read+0x2a>
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	4a09      	ldr	r2, [pc, #36]	@ (80181a8 <OTP_Read+0x4c>)
 8018182:	4293      	cmp	r3, r2
 8018184:	d1f2      	bne.n	801816c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	3307      	adds	r3, #7
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	79fa      	ldrb	r2, [r7, #7]
 801818e:	429a      	cmp	r2, r3
 8018190:	d001      	beq.n	8018196 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8018192:	2300      	movs	r3, #0
 8018194:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8018196:	68fb      	ldr	r3, [r7, #12]
}
 8018198:	4618      	mov	r0, r3
 801819a:	3714      	adds	r7, #20
 801819c:	46bd      	mov	sp, r7
 801819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a2:	4770      	bx	lr
 80181a4:	1fff73f8 	.word	0x1fff73f8
 80181a8:	1fff7000 	.word	0x1fff7000

080181ac <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80181ac:	b480      	push	{r7}
 80181ae:	b083      	sub	sp, #12
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	687a      	ldr	r2, [r7, #4]
 80181b8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	687a      	ldr	r2, [r7, #4]
 80181be:	605a      	str	r2, [r3, #4]
}
 80181c0:	bf00      	nop
 80181c2:	370c      	adds	r7, #12
 80181c4:	46bd      	mov	sp, r7
 80181c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ca:	4770      	bx	lr

080181cc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80181cc:	b480      	push	{r7}
 80181ce:	b087      	sub	sp, #28
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80181d4:	f3ef 8310 	mrs	r3, PRIMASK
 80181d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80181da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80181dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80181de:	b672      	cpsid	i
}
 80181e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	687a      	ldr	r2, [r7, #4]
 80181e8:	429a      	cmp	r2, r3
 80181ea:	d102      	bne.n	80181f2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80181ec:	2301      	movs	r3, #1
 80181ee:	75fb      	strb	r3, [r7, #23]
 80181f0:	e001      	b.n	80181f6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80181f2:	2300      	movs	r3, #0
 80181f4:	75fb      	strb	r3, [r7, #23]
 80181f6:	693b      	ldr	r3, [r7, #16]
 80181f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181fa:	68bb      	ldr	r3, [r7, #8]
 80181fc:	f383 8810 	msr	PRIMASK, r3
}
 8018200:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8018202:	7dfb      	ldrb	r3, [r7, #23]
}
 8018204:	4618      	mov	r0, r3
 8018206:	371c      	adds	r7, #28
 8018208:	46bd      	mov	sp, r7
 801820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820e:	4770      	bx	lr

08018210 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8018210:	b480      	push	{r7}
 8018212:	b087      	sub	sp, #28
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
 8018218:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801821a:	f3ef 8310 	mrs	r3, PRIMASK
 801821e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018220:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8018222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018224:	b672      	cpsid	i
}
 8018226:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	681a      	ldr	r2, [r3, #0]
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	683a      	ldr	r2, [r7, #0]
 801823a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801823c:	683b      	ldr	r3, [r7, #0]
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	683a      	ldr	r2, [r7, #0]
 8018242:	605a      	str	r2, [r3, #4]
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018248:	693b      	ldr	r3, [r7, #16]
 801824a:	f383 8810 	msr	PRIMASK, r3
}
 801824e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8018250:	bf00      	nop
 8018252:	371c      	adds	r7, #28
 8018254:	46bd      	mov	sp, r7
 8018256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801825a:	4770      	bx	lr

0801825c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 801825c:	b480      	push	{r7}
 801825e:	b087      	sub	sp, #28
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
 8018264:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018266:	f3ef 8310 	mrs	r3, PRIMASK
 801826a:	60fb      	str	r3, [r7, #12]
  return(result);
 801826c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801826e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018270:	b672      	cpsid	i
}
 8018272:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8018274:	683b      	ldr	r3, [r7, #0]
 8018276:	687a      	ldr	r2, [r7, #4]
 8018278:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	685a      	ldr	r2, [r3, #4]
 801827e:	683b      	ldr	r3, [r7, #0]
 8018280:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	683a      	ldr	r2, [r7, #0]
 8018286:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8018288:	683b      	ldr	r3, [r7, #0]
 801828a:	685b      	ldr	r3, [r3, #4]
 801828c:	683a      	ldr	r2, [r7, #0]
 801828e:	601a      	str	r2, [r3, #0]
 8018290:	697b      	ldr	r3, [r7, #20]
 8018292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018294:	693b      	ldr	r3, [r7, #16]
 8018296:	f383 8810 	msr	PRIMASK, r3
}
 801829a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801829c:	bf00      	nop
 801829e:	371c      	adds	r7, #28
 80182a0:	46bd      	mov	sp, r7
 80182a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a6:	4770      	bx	lr

080182a8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80182a8:	b480      	push	{r7}
 80182aa:	b087      	sub	sp, #28
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182b0:	f3ef 8310 	mrs	r3, PRIMASK
 80182b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80182b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80182b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80182ba:	b672      	cpsid	i
}
 80182bc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	685b      	ldr	r3, [r3, #4]
 80182c2:	687a      	ldr	r2, [r7, #4]
 80182c4:	6812      	ldr	r2, [r2, #0]
 80182c6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	687a      	ldr	r2, [r7, #4]
 80182ce:	6852      	ldr	r2, [r2, #4]
 80182d0:	605a      	str	r2, [r3, #4]
 80182d2:	697b      	ldr	r3, [r7, #20]
 80182d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182d6:	693b      	ldr	r3, [r7, #16]
 80182d8:	f383 8810 	msr	PRIMASK, r3
}
 80182dc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80182de:	bf00      	nop
 80182e0:	371c      	adds	r7, #28
 80182e2:	46bd      	mov	sp, r7
 80182e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e8:	4770      	bx	lr

080182ea <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80182ea:	b580      	push	{r7, lr}
 80182ec:	b086      	sub	sp, #24
 80182ee:	af00      	add	r7, sp, #0
 80182f0:	6078      	str	r0, [r7, #4]
 80182f2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182f4:	f3ef 8310 	mrs	r3, PRIMASK
 80182f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80182fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80182fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80182fe:	b672      	cpsid	i
}
 8018300:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681a      	ldr	r2, [r3, #0]
 8018306:	683b      	ldr	r3, [r7, #0]
 8018308:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	4618      	mov	r0, r3
 8018310:	f7ff ffca 	bl	80182a8 <LST_remove_node>
 8018314:	697b      	ldr	r3, [r7, #20]
 8018316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	f383 8810 	msr	PRIMASK, r3
}
 801831e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8018320:	bf00      	nop
 8018322:	3718      	adds	r7, #24
 8018324:	46bd      	mov	sp, r7
 8018326:	bd80      	pop	{r7, pc}

08018328 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b082      	sub	sp, #8
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8018330:	6878      	ldr	r0, [r7, #4]
 8018332:	f7e9 fbd4 	bl	8001ade <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8018336:	bf00      	nop
 8018338:	3708      	adds	r7, #8
 801833a:	46bd      	mov	sp, r7
 801833c:	bd80      	pop	{r7, pc}

0801833e <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 801833e:	b580      	push	{r7, lr}
 8018340:	b082      	sub	sp, #8
 8018342:	af00      	add	r7, sp, #0
 8018344:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8018346:	e002      	b.n	801834e <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8018348:	2001      	movs	r0, #1
 801834a:	f7ff ffed 	bl	8018328 <SPIF_Delay>
  while (Handle->Lock)
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	7b1b      	ldrb	r3, [r3, #12]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d1f8      	bne.n	8018348 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	2201      	movs	r2, #1
 801835a:	731a      	strb	r2, [r3, #12]
}
 801835c:	bf00      	nop
 801835e:	3708      	adds	r7, #8
 8018360:	46bd      	mov	sp, r7
 8018362:	bd80      	pop	{r7, pc}

08018364 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8018364:	b480      	push	{r7}
 8018366:	b083      	sub	sp, #12
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	2200      	movs	r2, #0
 8018370:	731a      	strb	r2, [r3, #12]
}
 8018372:	bf00      	nop
 8018374:	370c      	adds	r7, #12
 8018376:	46bd      	mov	sp, r7
 8018378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837c:	4770      	bx	lr

0801837e <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 801837e:	b580      	push	{r7, lr}
 8018380:	b084      	sub	sp, #16
 8018382:	af00      	add	r7, sp, #0
 8018384:	6078      	str	r0, [r7, #4]
 8018386:	460b      	mov	r3, r1
 8018388:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	6858      	ldr	r0, [r3, #4]
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	691b      	ldr	r3, [r3, #16]
 8018392:	b29b      	uxth	r3, r3
 8018394:	78fa      	ldrb	r2, [r7, #3]
 8018396:	4619      	mov	r1, r3
 8018398:	f7f2 f808 	bl	800a3ac <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 801839c:	2300      	movs	r3, #0
 801839e:	60fb      	str	r3, [r7, #12]
 80183a0:	e002      	b.n	80183a8 <SPIF_CsPin+0x2a>
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	3301      	adds	r3, #1
 80183a6:	60fb      	str	r3, [r7, #12]
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	2b09      	cmp	r3, #9
 80183ac:	ddf9      	ble.n	80183a2 <SPIF_CsPin+0x24>
}
 80183ae:	bf00      	nop
 80183b0:	bf00      	nop
 80183b2:	3710      	adds	r7, #16
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd80      	pop	{r7, pc}

080183b8 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b086      	sub	sp, #24
 80183bc:	af00      	add	r7, sp, #0
 80183be:	60f8      	str	r0, [r7, #12]
 80183c0:	60b9      	str	r1, [r7, #8]
 80183c2:	607a      	str	r2, [r7, #4]
 80183c4:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80183c6:	2300      	movs	r3, #0
 80183c8:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80183ca:	f7ef ff77 	bl	80082bc <HAL_GetTick>
 80183ce:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	6818      	ldr	r0, [r3, #0]
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	687a      	ldr	r2, [r7, #4]
 80183da:	68b9      	ldr	r1, [r7, #8]
 80183dc:	f7f7 f802 	bl	800f3e4 <HAL_SPI_TransmitReceive_DMA>
 80183e0:	4603      	mov	r3, r0
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d11a      	bne.n	801841c <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80183e6:	2001      	movs	r0, #1
 80183e8:	f7ff ff9e 	bl	8018328 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80183ec:	f7ef ff66 	bl	80082bc <HAL_GetTick>
 80183f0:	4602      	mov	r2, r0
 80183f2:	693b      	ldr	r3, [r7, #16]
 80183f4:	1ad3      	subs	r3, r2, r3
 80183f6:	6a3a      	ldr	r2, [r7, #32]
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d805      	bhi.n	8018408 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	4618      	mov	r0, r3
 8018402:	f7f7 f975 	bl	800f6f0 <HAL_SPI_DMAStop>
        break;
 8018406:	e009      	b.n	801841c <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	4618      	mov	r0, r3
 801840e:	f7f7 fae9 	bl	800f9e4 <HAL_SPI_GetState>
 8018412:	4603      	mov	r3, r0
 8018414:	2b01      	cmp	r3, #1
 8018416:	d1e6      	bne.n	80183e6 <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 8018418:	2301      	movs	r3, #1
 801841a:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801841c:	7dfb      	ldrb	r3, [r7, #23]
}
 801841e:	4618      	mov	r0, r3
 8018420:	3718      	adds	r7, #24
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}

08018426 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8018426:	b580      	push	{r7, lr}
 8018428:	b086      	sub	sp, #24
 801842a:	af00      	add	r7, sp, #0
 801842c:	60f8      	str	r0, [r7, #12]
 801842e:	60b9      	str	r1, [r7, #8]
 8018430:	607a      	str	r2, [r7, #4]
 8018432:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8018434:	2300      	movs	r3, #0
 8018436:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8018438:	f7ef ff40 	bl	80082bc <HAL_GetTick>
 801843c:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	687a      	ldr	r2, [r7, #4]
 8018444:	b292      	uxth	r2, r2
 8018446:	68b9      	ldr	r1, [r7, #8]
 8018448:	4618      	mov	r0, r3
 801844a:	f7f6 fdbd 	bl	800efc8 <HAL_SPI_Transmit_DMA>
 801844e:	4603      	mov	r3, r0
 8018450:	2b00      	cmp	r3, #0
 8018452:	d11a      	bne.n	801848a <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8018454:	2001      	movs	r0, #1
 8018456:	f7ff ff67 	bl	8018328 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 801845a:	f7ef ff2f 	bl	80082bc <HAL_GetTick>
 801845e:	4602      	mov	r2, r0
 8018460:	693b      	ldr	r3, [r7, #16]
 8018462:	1ad3      	subs	r3, r2, r3
 8018464:	683a      	ldr	r2, [r7, #0]
 8018466:	429a      	cmp	r2, r3
 8018468:	d805      	bhi.n	8018476 <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	4618      	mov	r0, r3
 8018470:	f7f7 f93e 	bl	800f6f0 <HAL_SPI_DMAStop>
        break;
 8018474:	e009      	b.n	801848a <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	4618      	mov	r0, r3
 801847c:	f7f7 fab2 	bl	800f9e4 <HAL_SPI_GetState>
 8018480:	4603      	mov	r3, r0
 8018482:	2b01      	cmp	r3, #1
 8018484:	d1e6      	bne.n	8018454 <SPIF_Transmit+0x2e>
      {
        retVal = true;
 8018486:	2301      	movs	r3, #1
 8018488:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801848a:	7dfb      	ldrb	r3, [r7, #23]
}
 801848c:	4618      	mov	r0, r3
 801848e:	3718      	adds	r7, #24
 8018490:	46bd      	mov	sp, r7
 8018492:	bd80      	pop	{r7, pc}

08018494 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b086      	sub	sp, #24
 8018498:	af00      	add	r7, sp, #0
 801849a:	60f8      	str	r0, [r7, #12]
 801849c:	60b9      	str	r1, [r7, #8]
 801849e:	607a      	str	r2, [r7, #4]
 80184a0:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80184a2:	2300      	movs	r3, #0
 80184a4:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80184a6:	f7ef ff09 	bl	80082bc <HAL_GetTick>
 80184aa:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	687a      	ldr	r2, [r7, #4]
 80184b2:	b292      	uxth	r2, r2
 80184b4:	68b9      	ldr	r1, [r7, #8]
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7f6 fe74 	bl	800f1a4 <HAL_SPI_Receive_DMA>
 80184bc:	4603      	mov	r3, r0
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d11a      	bne.n	80184f8 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80184c2:	2001      	movs	r0, #1
 80184c4:	f7ff ff30 	bl	8018328 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80184c8:	f7ef fef8 	bl	80082bc <HAL_GetTick>
 80184cc:	4602      	mov	r2, r0
 80184ce:	693b      	ldr	r3, [r7, #16]
 80184d0:	1ad3      	subs	r3, r2, r3
 80184d2:	683a      	ldr	r2, [r7, #0]
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d805      	bhi.n	80184e4 <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	4618      	mov	r0, r3
 80184de:	f7f7 f907 	bl	800f6f0 <HAL_SPI_DMAStop>
        break;
 80184e2:	e009      	b.n	80184f8 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7f7 fa7b 	bl	800f9e4 <HAL_SPI_GetState>
 80184ee:	4603      	mov	r3, r0
 80184f0:	2b01      	cmp	r3, #1
 80184f2:	d1e6      	bne.n	80184c2 <SPIF_Receive+0x2e>
      {
        retVal = true;
 80184f4:	2301      	movs	r3, #1
 80184f6:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80184f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	3718      	adds	r7, #24
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}

08018502 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8018502:	b580      	push	{r7, lr}
 8018504:	b084      	sub	sp, #16
 8018506:	af00      	add	r7, sp, #0
 8018508:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 801850a:	2301      	movs	r3, #1
 801850c:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 801850e:	2306      	movs	r3, #6
 8018510:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8018512:	2100      	movs	r1, #0
 8018514:	6878      	ldr	r0, [r7, #4]
 8018516:	f7ff ff32 	bl	801837e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 801851a:	f107 010c 	add.w	r1, r7, #12
 801851e:	2364      	movs	r3, #100	@ 0x64
 8018520:	2201      	movs	r2, #1
 8018522:	6878      	ldr	r0, [r7, #4]
 8018524:	f7ff ff7f 	bl	8018426 <SPIF_Transmit>
 8018528:	4603      	mov	r3, r0
 801852a:	f083 0301 	eor.w	r3, r3, #1
 801852e:	b2db      	uxtb	r3, r3
 8018530:	2b00      	cmp	r3, #0
 8018532:	d001      	beq.n	8018538 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8018534:	2300      	movs	r3, #0
 8018536:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8018538:	2101      	movs	r1, #1
 801853a:	6878      	ldr	r0, [r7, #4]
 801853c:	f7ff ff1f 	bl	801837e <SPIF_CsPin>
  return retVal;
 8018540:	7bfb      	ldrb	r3, [r7, #15]
}
 8018542:	4618      	mov	r0, r3
 8018544:	3710      	adds	r7, #16
 8018546:	46bd      	mov	sp, r7
 8018548:	bd80      	pop	{r7, pc}

0801854a <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 801854a:	b580      	push	{r7, lr}
 801854c:	b084      	sub	sp, #16
 801854e:	af00      	add	r7, sp, #0
 8018550:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8018552:	2301      	movs	r3, #1
 8018554:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8018556:	2304      	movs	r3, #4
 8018558:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 801855a:	2100      	movs	r1, #0
 801855c:	6878      	ldr	r0, [r7, #4]
 801855e:	f7ff ff0e 	bl	801837e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8018562:	f107 010c 	add.w	r1, r7, #12
 8018566:	2364      	movs	r3, #100	@ 0x64
 8018568:	2201      	movs	r2, #1
 801856a:	6878      	ldr	r0, [r7, #4]
 801856c:	f7ff ff5b 	bl	8018426 <SPIF_Transmit>
 8018570:	4603      	mov	r3, r0
 8018572:	f083 0301 	eor.w	r3, r3, #1
 8018576:	b2db      	uxtb	r3, r3
 8018578:	2b00      	cmp	r3, #0
 801857a:	d001      	beq.n	8018580 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 801857c:	2300      	movs	r3, #0
 801857e:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8018580:	2101      	movs	r1, #1
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f7ff fefb 	bl	801837e <SPIF_CsPin>
  return retVal;
 8018588:	7bfb      	ldrb	r3, [r7, #15]
}
 801858a:	4618      	mov	r0, r3
 801858c:	3710      	adds	r7, #16
 801858e:	46bd      	mov	sp, r7
 8018590:	bd80      	pop	{r7, pc}

08018592 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8018592:	b580      	push	{r7, lr}
 8018594:	b086      	sub	sp, #24
 8018596:	af02      	add	r7, sp, #8
 8018598:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 801859a:	2300      	movs	r3, #0
 801859c:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 801859e:	f24a 5305 	movw	r3, #42245	@ 0xa505
 80185a2:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 80185a4:	2100      	movs	r1, #0
 80185a6:	6878      	ldr	r0, [r7, #4]
 80185a8:	f7ff fee9 	bl	801837e <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 80185ac:	f107 0208 	add.w	r2, r7, #8
 80185b0:	f107 010c 	add.w	r1, r7, #12
 80185b4:	2364      	movs	r3, #100	@ 0x64
 80185b6:	9300      	str	r3, [sp, #0]
 80185b8:	2302      	movs	r3, #2
 80185ba:	6878      	ldr	r0, [r7, #4]
 80185bc:	f7ff fefc 	bl	80183b8 <SPIF_TransmitReceive>
 80185c0:	4603      	mov	r3, r0
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d001      	beq.n	80185ca <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 80185c6:	7a7b      	ldrb	r3, [r7, #9]
 80185c8:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80185ca:	2101      	movs	r1, #1
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f7ff fed6 	bl	801837e <SPIF_CsPin>
  return retVal;
 80185d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80185d4:	4618      	mov	r0, r3
 80185d6:	3710      	adds	r7, #16
 80185d8:	46bd      	mov	sp, r7
 80185da:	bd80      	pop	{r7, pc}

080185dc <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b084      	sub	sp, #16
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
 80185e4:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80185e6:	2300      	movs	r3, #0
 80185e8:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 80185ea:	f7ef fe67 	bl	80082bc <HAL_GetTick>
 80185ee:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80185f0:	2001      	movs	r0, #1
 80185f2:	f7ff fe99 	bl	8018328 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 80185f6:	f7ef fe61 	bl	80082bc <HAL_GetTick>
 80185fa:	4602      	mov	r2, r0
 80185fc:	68bb      	ldr	r3, [r7, #8]
 80185fe:	1ad3      	subs	r3, r2, r3
 8018600:	683a      	ldr	r2, [r7, #0]
 8018602:	429a      	cmp	r2, r3
 8018604:	d90a      	bls.n	801861c <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8018606:	6878      	ldr	r0, [r7, #4]
 8018608:	f7ff ffc3 	bl	8018592 <SPIF_ReadReg1>
 801860c:	4603      	mov	r3, r0
 801860e:	f003 0301 	and.w	r3, r3, #1
 8018612:	2b00      	cmp	r3, #0
 8018614:	d1ec      	bne.n	80185f0 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8018616:	2301      	movs	r3, #1
 8018618:	73fb      	strb	r3, [r7, #15]
      break;
 801861a:	e000      	b.n	801861e <SPIF_WaitForWriting+0x42>
      break;
 801861c:	bf00      	nop
    }
  }
  return retVal;
 801861e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018620:	4618      	mov	r0, r3
 8018622:	3710      	adds	r7, #16
 8018624:	46bd      	mov	sp, r7
 8018626:	bd80      	pop	{r7, pc}

08018628 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b088      	sub	sp, #32
 801862c:	af02      	add	r7, sp, #8
 801862e:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8018630:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 8018634:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8018636:	2300      	movs	r3, #0
 8018638:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 801863a:	2100      	movs	r1, #0
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f7ff fe9e 	bl	801837e <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8018642:	f107 020c 	add.w	r2, r7, #12
 8018646:	f107 0110 	add.w	r1, r7, #16
 801864a:	2364      	movs	r3, #100	@ 0x64
 801864c:	9300      	str	r3, [sp, #0]
 801864e:	2304      	movs	r3, #4
 8018650:	6878      	ldr	r0, [r7, #4]
 8018652:	f7ff feb1 	bl	80183b8 <SPIF_TransmitReceive>
 8018656:	4603      	mov	r3, r0
 8018658:	f083 0301 	eor.w	r3, r3, #1
 801865c:	b2db      	uxtb	r3, r3
 801865e:	2b00      	cmp	r3, #0
 8018660:	d004      	beq.n	801866c <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8018662:	2101      	movs	r1, #1
 8018664:	6878      	ldr	r0, [r7, #4]
 8018666:	f7ff fe8a 	bl	801837e <SPIF_CsPin>
      break;
 801866a:	e16f      	b.n	801894c <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 801866c:	2101      	movs	r1, #1
 801866e:	6878      	ldr	r0, [r7, #4]
 8018670:	f7ff fe85 	bl	801837e <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8018674:	7b7a      	ldrb	r2, [r7, #13]
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 801867a:	7bba      	ldrb	r2, [r7, #14]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8018680:	7bfa      	ldrb	r2, [r7, #15]
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	7a1b      	ldrb	r3, [r3, #8]
 801868a:	2bef      	cmp	r3, #239	@ 0xef
 801868c:	f000 80f0 	beq.w	8018870 <SPIF_FindChip+0x248>
 8018690:	2bef      	cmp	r3, #239	@ 0xef
 8018692:	f300 80e9 	bgt.w	8018868 <SPIF_FindChip+0x240>
 8018696:	2bc8      	cmp	r3, #200	@ 0xc8
 8018698:	f300 80e6 	bgt.w	8018868 <SPIF_FindChip+0x240>
 801869c:	2b85      	cmp	r3, #133	@ 0x85
 801869e:	da0c      	bge.n	80186ba <SPIF_FindChip+0x92>
 80186a0:	2b62      	cmp	r3, #98	@ 0x62
 80186a2:	f000 80e7 	beq.w	8018874 <SPIF_FindChip+0x24c>
 80186a6:	2b62      	cmp	r3, #98	@ 0x62
 80186a8:	f300 80de 	bgt.w	8018868 <SPIF_FindChip+0x240>
 80186ac:	2b20      	cmp	r3, #32
 80186ae:	f300 80d9 	bgt.w	8018864 <SPIF_FindChip+0x23c>
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	f300 8090 	bgt.w	80187d8 <SPIF_FindChip+0x1b0>
 80186b8:	e0d6      	b.n	8018868 <SPIF_FindChip+0x240>
 80186ba:	3b85      	subs	r3, #133	@ 0x85
 80186bc:	2b43      	cmp	r3, #67	@ 0x43
 80186be:	f200 80d3 	bhi.w	8018868 <SPIF_FindChip+0x240>
 80186c2:	a201      	add	r2, pc, #4	@ (adr r2, 80186c8 <SPIF_FindChip+0xa0>)
 80186c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186c8:	08018879 	.word	0x08018879
 80186cc:	08018869 	.word	0x08018869
 80186d0:	08018869 	.word	0x08018869
 80186d4:	08018869 	.word	0x08018869
 80186d8:	08018879 	.word	0x08018879
 80186dc:	08018869 	.word	0x08018869
 80186e0:	08018869 	.word	0x08018869
 80186e4:	08018879 	.word	0x08018879
 80186e8:	08018869 	.word	0x08018869
 80186ec:	08018869 	.word	0x08018869
 80186f0:	08018869 	.word	0x08018869
 80186f4:	08018869 	.word	0x08018869
 80186f8:	08018869 	.word	0x08018869
 80186fc:	08018869 	.word	0x08018869
 8018700:	08018869 	.word	0x08018869
 8018704:	08018869 	.word	0x08018869
 8018708:	08018869 	.word	0x08018869
 801870c:	08018869 	.word	0x08018869
 8018710:	08018869 	.word	0x08018869
 8018714:	08018869 	.word	0x08018869
 8018718:	08018869 	.word	0x08018869
 801871c:	08018869 	.word	0x08018869
 8018720:	08018869 	.word	0x08018869
 8018724:	08018869 	.word	0x08018869
 8018728:	08018879 	.word	0x08018879
 801872c:	08018869 	.word	0x08018869
 8018730:	08018869 	.word	0x08018869
 8018734:	08018869 	.word	0x08018869
 8018738:	08018879 	.word	0x08018879
 801873c:	08018869 	.word	0x08018869
 8018740:	08018869 	.word	0x08018869
 8018744:	08018869 	.word	0x08018869
 8018748:	08018869 	.word	0x08018869
 801874c:	08018869 	.word	0x08018869
 8018750:	08018869 	.word	0x08018869
 8018754:	08018869 	.word	0x08018869
 8018758:	08018869 	.word	0x08018869
 801875c:	08018869 	.word	0x08018869
 8018760:	08018869 	.word	0x08018869
 8018764:	08018869 	.word	0x08018869
 8018768:	08018879 	.word	0x08018879
 801876c:	08018869 	.word	0x08018869
 8018770:	08018869 	.word	0x08018869
 8018774:	08018869 	.word	0x08018869
 8018778:	08018869 	.word	0x08018869
 801877c:	08018869 	.word	0x08018869
 8018780:	08018869 	.word	0x08018869
 8018784:	08018869 	.word	0x08018869
 8018788:	08018869 	.word	0x08018869
 801878c:	08018869 	.word	0x08018869
 8018790:	08018869 	.word	0x08018869
 8018794:	08018869 	.word	0x08018869
 8018798:	08018869 	.word	0x08018869
 801879c:	08018869 	.word	0x08018869
 80187a0:	08018869 	.word	0x08018869
 80187a4:	08018869 	.word	0x08018869
 80187a8:	08018869 	.word	0x08018869
 80187ac:	08018869 	.word	0x08018869
 80187b0:	08018879 	.word	0x08018879
 80187b4:	08018869 	.word	0x08018869
 80187b8:	08018869 	.word	0x08018869
 80187bc:	08018879 	.word	0x08018879
 80187c0:	08018869 	.word	0x08018869
 80187c4:	08018869 	.word	0x08018869
 80187c8:	08018869 	.word	0x08018869
 80187cc:	08018869 	.word	0x08018869
 80187d0:	08018869 	.word	0x08018869
 80187d4:	08018879 	.word	0x08018879
 80187d8:	3b01      	subs	r3, #1
 80187da:	2b1f      	cmp	r3, #31
 80187dc:	d844      	bhi.n	8018868 <SPIF_FindChip+0x240>
 80187de:	a201      	add	r2, pc, #4	@ (adr r2, 80187e4 <SPIF_FindChip+0x1bc>)
 80187e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187e4:	0801887d 	.word	0x0801887d
 80187e8:	08018869 	.word	0x08018869
 80187ec:	08018869 	.word	0x08018869
 80187f0:	0801887d 	.word	0x0801887d
 80187f4:	08018869 	.word	0x08018869
 80187f8:	08018869 	.word	0x08018869
 80187fc:	08018869 	.word	0x08018869
 8018800:	08018869 	.word	0x08018869
 8018804:	08018869 	.word	0x08018869
 8018808:	08018869 	.word	0x08018869
 801880c:	08018869 	.word	0x08018869
 8018810:	08018869 	.word	0x08018869
 8018814:	08018869 	.word	0x08018869
 8018818:	08018869 	.word	0x08018869
 801881c:	08018869 	.word	0x08018869
 8018820:	08018869 	.word	0x08018869
 8018824:	08018869 	.word	0x08018869
 8018828:	08018869 	.word	0x08018869
 801882c:	08018869 	.word	0x08018869
 8018830:	08018869 	.word	0x08018869
 8018834:	08018869 	.word	0x08018869
 8018838:	08018869 	.word	0x08018869
 801883c:	08018869 	.word	0x08018869
 8018840:	08018869 	.word	0x08018869
 8018844:	08018869 	.word	0x08018869
 8018848:	08018869 	.word	0x08018869
 801884c:	08018869 	.word	0x08018869
 8018850:	0801887d 	.word	0x0801887d
 8018854:	08018869 	.word	0x08018869
 8018858:	08018869 	.word	0x08018869
 801885c:	08018869 	.word	0x08018869
 8018860:	0801887d 	.word	0x0801887d
 8018864:	2b37      	cmp	r3, #55	@ 0x37
 8018866:	d00b      	beq.n	8018880 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	2200      	movs	r2, #0
 801886c:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 801886e:	e008      	b.n	8018882 <SPIF_FindChip+0x25a>
      break;
 8018870:	bf00      	nop
 8018872:	e006      	b.n	8018882 <SPIF_FindChip+0x25a>
      break;
 8018874:	bf00      	nop
 8018876:	e004      	b.n	8018882 <SPIF_FindChip+0x25a>
      break;
 8018878:	bf00      	nop
 801887a:	e002      	b.n	8018882 <SPIF_FindChip+0x25a>
      break;
 801887c:	bf00      	nop
 801887e:	e000      	b.n	8018882 <SPIF_FindChip+0x25a>
      break;
 8018880:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	7a5b      	ldrb	r3, [r3, #9]
 8018886:	3b11      	subs	r3, #17
 8018888:	2b0f      	cmp	r3, #15
 801888a:	d84e      	bhi.n	801892a <SPIF_FindChip+0x302>
 801888c:	a201      	add	r2, pc, #4	@ (adr r2, 8018894 <SPIF_FindChip+0x26c>)
 801888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018892:	bf00      	nop
 8018894:	080188d5 	.word	0x080188d5
 8018898:	080188dd 	.word	0x080188dd
 801889c:	080188e5 	.word	0x080188e5
 80188a0:	080188ed 	.word	0x080188ed
 80188a4:	080188f5 	.word	0x080188f5
 80188a8:	080188fd 	.word	0x080188fd
 80188ac:	08018905 	.word	0x08018905
 80188b0:	0801890d 	.word	0x0801890d
 80188b4:	08018917 	.word	0x08018917
 80188b8:	0801892b 	.word	0x0801892b
 80188bc:	0801892b 	.word	0x0801892b
 80188c0:	0801892b 	.word	0x0801892b
 80188c4:	0801892b 	.word	0x0801892b
 80188c8:	0801892b 	.word	0x0801892b
 80188cc:	0801892b 	.word	0x0801892b
 80188d0:	08018921 	.word	0x08018921
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	2202      	movs	r2, #2
 80188d8:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80188da:	e02a      	b.n	8018932 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2204      	movs	r2, #4
 80188e0:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80188e2:	e026      	b.n	8018932 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	2208      	movs	r2, #8
 80188e8:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80188ea:	e022      	b.n	8018932 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2210      	movs	r2, #16
 80188f0:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80188f2:	e01e      	b.n	8018932 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	2220      	movs	r2, #32
 80188f8:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80188fa:	e01a      	b.n	8018932 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	2240      	movs	r2, #64	@ 0x40
 8018900:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 8018902:	e016      	b.n	8018932 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	2280      	movs	r2, #128	@ 0x80
 8018908:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 801890a:	e012      	b.n	8018932 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018912:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8018914:	e00d      	b.n	8018932 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801891c:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 801891e:	e008      	b.n	8018932 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018926:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8018928:	e003      	b.n	8018932 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	2200      	movs	r2, #0
 801892e:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8018930:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	69db      	ldr	r3, [r3, #28]
 8018936:	011a      	lsls	r2, r3, #4
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	699b      	ldr	r3, [r3, #24]
 8018940:	031b      	lsls	r3, r3, #12
 8018942:	0a1a      	lsrs	r2, r3, #8
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8018948:	2301      	movs	r3, #1
 801894a:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 801894c:	7dfb      	ldrb	r3, [r7, #23]
}
 801894e:	4618      	mov	r0, r3
 8018950:	3718      	adds	r7, #24
 8018952:	46bd      	mov	sp, r7
 8018954:	bd80      	pop	{r7, pc}
 8018956:	bf00      	nop

08018958 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b08a      	sub	sp, #40	@ 0x28
 801895c:	af00      	add	r7, sp, #0
 801895e:	60f8      	str	r0, [r7, #12]
 8018960:	60b9      	str	r1, [r7, #8]
 8018962:	607a      	str	r2, [r7, #4]
 8018964:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8018966:	2300      	movs	r3, #0
 8018968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 801896c:	2300      	movs	r3, #0
 801896e:	623b      	str	r3, [r7, #32]
 8018970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018972:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8018976:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	695b      	ldr	r3, [r3, #20]
 801897c:	68ba      	ldr	r2, [r7, #8]
 801897e:	429a      	cmp	r2, r3
 8018980:	f080 8084 	bcs.w	8018a8c <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8018984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018986:	2bff      	cmp	r3, #255	@ 0xff
 8018988:	f200 8082 	bhi.w	8018a90 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 801898c:	683a      	ldr	r2, [r7, #0]
 801898e:	69fb      	ldr	r3, [r7, #28]
 8018990:	429a      	cmp	r2, r3
 8018992:	d901      	bls.n	8018998 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8018994:	69fb      	ldr	r3, [r7, #28]
 8018996:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	021b      	lsls	r3, r3, #8
 801899c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801899e:	4413      	add	r3, r2
 80189a0:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80189a2:	68f8      	ldr	r0, [r7, #12]
 80189a4:	f7ff fdad 	bl	8018502 <SPIF_WriteEnable>
 80189a8:	4603      	mov	r3, r0
 80189aa:	f083 0301 	eor.w	r3, r3, #1
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d16f      	bne.n	8018a94 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80189b4:	2100      	movs	r1, #0
 80189b6:	68f8      	ldr	r0, [r7, #12]
 80189b8:	f7ff fce1 	bl	801837e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	69db      	ldr	r3, [r3, #28]
 80189c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80189c4:	d322      	bcc.n	8018a0c <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80189c6:	2312      	movs	r3, #18
 80189c8:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80189ca:	6a3b      	ldr	r3, [r7, #32]
 80189cc:	0e1b      	lsrs	r3, r3, #24
 80189ce:	b2db      	uxtb	r3, r3
 80189d0:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80189d2:	6a3b      	ldr	r3, [r7, #32]
 80189d4:	0c1b      	lsrs	r3, r3, #16
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80189da:	6a3b      	ldr	r3, [r7, #32]
 80189dc:	0a1b      	lsrs	r3, r3, #8
 80189de:	b2db      	uxtb	r3, r3
 80189e0:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80189e2:	6a3b      	ldr	r3, [r7, #32]
 80189e4:	b2db      	uxtb	r3, r3
 80189e6:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80189e8:	f107 0114 	add.w	r1, r7, #20
 80189ec:	2364      	movs	r3, #100	@ 0x64
 80189ee:	2205      	movs	r2, #5
 80189f0:	68f8      	ldr	r0, [r7, #12]
 80189f2:	f7ff fd18 	bl	8018426 <SPIF_Transmit>
 80189f6:	4603      	mov	r3, r0
 80189f8:	f083 0301 	eor.w	r3, r3, #1
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d023      	beq.n	8018a4a <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8018a02:	2101      	movs	r1, #1
 8018a04:	68f8      	ldr	r0, [r7, #12]
 8018a06:	f7ff fcba 	bl	801837e <SPIF_CsPin>
        break;
 8018a0a:	e044      	b.n	8018a96 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8018a0c:	2302      	movs	r3, #2
 8018a0e:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8018a10:	6a3b      	ldr	r3, [r7, #32]
 8018a12:	0c1b      	lsrs	r3, r3, #16
 8018a14:	b2db      	uxtb	r3, r3
 8018a16:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8018a18:	6a3b      	ldr	r3, [r7, #32]
 8018a1a:	0a1b      	lsrs	r3, r3, #8
 8018a1c:	b2db      	uxtb	r3, r3
 8018a1e:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8018a20:	6a3b      	ldr	r3, [r7, #32]
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8018a26:	f107 0114 	add.w	r1, r7, #20
 8018a2a:	2364      	movs	r3, #100	@ 0x64
 8018a2c:	2204      	movs	r2, #4
 8018a2e:	68f8      	ldr	r0, [r7, #12]
 8018a30:	f7ff fcf9 	bl	8018426 <SPIF_Transmit>
 8018a34:	4603      	mov	r3, r0
 8018a36:	f083 0301 	eor.w	r3, r3, #1
 8018a3a:	b2db      	uxtb	r3, r3
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d004      	beq.n	8018a4a <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8018a40:	2101      	movs	r1, #1
 8018a42:	68f8      	ldr	r0, [r7, #12]
 8018a44:	f7ff fc9b 	bl	801837e <SPIF_CsPin>
        break;
 8018a48:	e025      	b.n	8018a96 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8018a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018a4e:	683a      	ldr	r2, [r7, #0]
 8018a50:	6879      	ldr	r1, [r7, #4]
 8018a52:	68f8      	ldr	r0, [r7, #12]
 8018a54:	f7ff fce7 	bl	8018426 <SPIF_Transmit>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	f083 0301 	eor.w	r3, r3, #1
 8018a5e:	b2db      	uxtb	r3, r3
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d004      	beq.n	8018a6e <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8018a64:	2101      	movs	r1, #1
 8018a66:	68f8      	ldr	r0, [r7, #12]
 8018a68:	f7ff fc89 	bl	801837e <SPIF_CsPin>
      break;
 8018a6c:	e013      	b.n	8018a96 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8018a6e:	2101      	movs	r1, #1
 8018a70:	68f8      	ldr	r0, [r7, #12]
 8018a72:	f7ff fc84 	bl	801837e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8018a76:	2164      	movs	r1, #100	@ 0x64
 8018a78:	68f8      	ldr	r0, [r7, #12]
 8018a7a:	f7ff fdaf 	bl	80185dc <SPIF_WaitForWriting>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d008      	beq.n	8018a96 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8018a84:	2301      	movs	r3, #1
 8018a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018a8a:	e004      	b.n	8018a96 <SPIF_WriteFn+0x13e>
      break;
 8018a8c:	bf00      	nop
 8018a8e:	e002      	b.n	8018a96 <SPIF_WriteFn+0x13e>
      break;
 8018a90:	bf00      	nop
 8018a92:	e000      	b.n	8018a96 <SPIF_WriteFn+0x13e>
      break;
 8018a94:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8018a96:	68f8      	ldr	r0, [r7, #12]
 8018a98:	f7ff fd57 	bl	801854a <SPIF_WriteDisable>
  return retVal;
 8018a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3728      	adds	r7, #40	@ 0x28
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}

08018aa8 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b086      	sub	sp, #24
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	60f8      	str	r0, [r7, #12]
 8018ab0:	60b9      	str	r1, [r7, #8]
 8018ab2:	607a      	str	r2, [r7, #4]
 8018ab4:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8018aba:	2100      	movs	r1, #0
 8018abc:	68f8      	ldr	r0, [r7, #12]
 8018abe:	f7ff fc5e 	bl	801837e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	69db      	ldr	r3, [r3, #28]
 8018ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018aca:	d322      	bcc.n	8018b12 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8018acc:	2313      	movs	r3, #19
 8018ace:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8018ad0:	68bb      	ldr	r3, [r7, #8]
 8018ad2:	0e1b      	lsrs	r3, r3, #24
 8018ad4:	b2db      	uxtb	r3, r3
 8018ad6:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8018ad8:	68bb      	ldr	r3, [r7, #8]
 8018ada:	0c1b      	lsrs	r3, r3, #16
 8018adc:	b2db      	uxtb	r3, r3
 8018ade:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8018ae0:	68bb      	ldr	r3, [r7, #8]
 8018ae2:	0a1b      	lsrs	r3, r3, #8
 8018ae4:	b2db      	uxtb	r3, r3
 8018ae6:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8018ae8:	68bb      	ldr	r3, [r7, #8]
 8018aea:	b2db      	uxtb	r3, r3
 8018aec:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8018aee:	f107 0110 	add.w	r1, r7, #16
 8018af2:	2364      	movs	r3, #100	@ 0x64
 8018af4:	2205      	movs	r2, #5
 8018af6:	68f8      	ldr	r0, [r7, #12]
 8018af8:	f7ff fc95 	bl	8018426 <SPIF_Transmit>
 8018afc:	4603      	mov	r3, r0
 8018afe:	f083 0301 	eor.w	r3, r3, #1
 8018b02:	b2db      	uxtb	r3, r3
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d023      	beq.n	8018b50 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8018b08:	2101      	movs	r1, #1
 8018b0a:	68f8      	ldr	r0, [r7, #12]
 8018b0c:	f7ff fc37 	bl	801837e <SPIF_CsPin>
        break;
 8018b10:	e036      	b.n	8018b80 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8018b12:	2303      	movs	r3, #3
 8018b14:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8018b16:	68bb      	ldr	r3, [r7, #8]
 8018b18:	0c1b      	lsrs	r3, r3, #16
 8018b1a:	b2db      	uxtb	r3, r3
 8018b1c:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8018b1e:	68bb      	ldr	r3, [r7, #8]
 8018b20:	0a1b      	lsrs	r3, r3, #8
 8018b22:	b2db      	uxtb	r3, r3
 8018b24:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	b2db      	uxtb	r3, r3
 8018b2a:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8018b2c:	f107 0110 	add.w	r1, r7, #16
 8018b30:	2364      	movs	r3, #100	@ 0x64
 8018b32:	2204      	movs	r2, #4
 8018b34:	68f8      	ldr	r0, [r7, #12]
 8018b36:	f7ff fc76 	bl	8018426 <SPIF_Transmit>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	f083 0301 	eor.w	r3, r3, #1
 8018b40:	b2db      	uxtb	r3, r3
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d004      	beq.n	8018b50 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8018b46:	2101      	movs	r1, #1
 8018b48:	68f8      	ldr	r0, [r7, #12]
 8018b4a:	f7ff fc18 	bl	801837e <SPIF_CsPin>
        break;
 8018b4e:	e017      	b.n	8018b80 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8018b50:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8018b54:	683a      	ldr	r2, [r7, #0]
 8018b56:	6879      	ldr	r1, [r7, #4]
 8018b58:	68f8      	ldr	r0, [r7, #12]
 8018b5a:	f7ff fc9b 	bl	8018494 <SPIF_Receive>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	f083 0301 	eor.w	r3, r3, #1
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d004      	beq.n	8018b74 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8018b6a:	2101      	movs	r1, #1
 8018b6c:	68f8      	ldr	r0, [r7, #12]
 8018b6e:	f7ff fc06 	bl	801837e <SPIF_CsPin>
      break;
 8018b72:	e005      	b.n	8018b80 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8018b74:	2101      	movs	r1, #1
 8018b76:	68f8      	ldr	r0, [r7, #12]
 8018b78:	f7ff fc01 	bl	801837e <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8018b7c:	2301      	movs	r3, #1
 8018b7e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8018b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8018b82:	4618      	mov	r0, r3
 8018b84:	3718      	adds	r7, #24
 8018b86:	46bd      	mov	sp, r7
 8018b88:	bd80      	pop	{r7, pc}

08018b8a <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8018b8a:	b580      	push	{r7, lr}
 8018b8c:	b086      	sub	sp, #24
 8018b8e:	af00      	add	r7, sp, #0
 8018b90:	60f8      	str	r0, [r7, #12]
 8018b92:	60b9      	str	r1, [r7, #8]
 8018b94:	607a      	str	r2, [r7, #4]
 8018b96:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d03a      	beq.n	8018c18 <SPIF_Init+0x8e>
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d037      	beq.n	8018c18 <SPIF_Init+0x8e>
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d034      	beq.n	8018c18 <SPIF_Init+0x8e>
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	7a9b      	ldrb	r3, [r3, #10]
 8018bb2:	2b01      	cmp	r3, #1
 8018bb4:	d030      	beq.n	8018c18 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8018bb6:	2220      	movs	r2, #32
 8018bb8:	2100      	movs	r1, #0
 8018bba:	68f8      	ldr	r0, [r7, #12]
 8018bbc:	f003 fe99 	bl	801c8f2 <memset>
    Handle->HSpi = HSpi;
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	68ba      	ldr	r2, [r7, #8]
 8018bc4:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	687a      	ldr	r2, [r7, #4]
 8018bca:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8018bcc:	887a      	ldrh	r2, [r7, #2]
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8018bd2:	2101      	movs	r1, #1
 8018bd4:	68f8      	ldr	r0, [r7, #12]
 8018bd6:	f7ff fbd2 	bl	801837e <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8018bda:	e002      	b.n	8018be2 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8018bdc:	2001      	movs	r0, #1
 8018bde:	f7ff fba3 	bl	8018328 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8018be2:	f7ef fb6b 	bl	80082bc <HAL_GetTick>
 8018be6:	4603      	mov	r3, r0
 8018be8:	2b13      	cmp	r3, #19
 8018bea:	d9f7      	bls.n	8018bdc <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8018bec:	68f8      	ldr	r0, [r7, #12]
 8018bee:	f7ff fcac 	bl	801854a <SPIF_WriteDisable>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	f083 0301 	eor.w	r3, r3, #1
 8018bf8:	b2db      	uxtb	r3, r3
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d10b      	bne.n	8018c16 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8018bfe:	68f8      	ldr	r0, [r7, #12]
 8018c00:	f7ff fd12 	bl	8018628 <SPIF_FindChip>
 8018c04:	4603      	mov	r3, r0
 8018c06:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8018c08:	7dfb      	ldrb	r3, [r7, #23]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d004      	beq.n	8018c18 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	2201      	movs	r2, #1
 8018c12:	729a      	strb	r2, [r3, #10]
 8018c14:	e000      	b.n	8018c18 <SPIF_Init+0x8e>
      break;
 8018c16:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8018c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	3718      	adds	r7, #24
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}

08018c22 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8018c22:	b580      	push	{r7, lr}
 8018c24:	b086      	sub	sp, #24
 8018c26:	af00      	add	r7, sp, #0
 8018c28:	6078      	str	r0, [r7, #4]
 8018c2a:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8018c2c:	6878      	ldr	r0, [r7, #4]
 8018c2e:	f7ff fb86 	bl	801833e <SPIF_Lock>
  bool retVal = false;
 8018c32:	2300      	movs	r3, #0
 8018c34:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	031b      	lsls	r3, r3, #12
 8018c3a:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	699b      	ldr	r3, [r3, #24]
 8018c40:	683a      	ldr	r2, [r7, #0]
 8018c42:	429a      	cmp	r2, r3
 8018c44:	d262      	bcs.n	8018d0c <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f7ff fc5b 	bl	8018502 <SPIF_WriteEnable>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	f083 0301 	eor.w	r3, r3, #1
 8018c52:	b2db      	uxtb	r3, r3
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d15b      	bne.n	8018d10 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8018c58:	2100      	movs	r1, #0
 8018c5a:	6878      	ldr	r0, [r7, #4]
 8018c5c:	f7ff fb8f 	bl	801837e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	69db      	ldr	r3, [r3, #28]
 8018c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018c68:	d322      	bcc.n	8018cb0 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8018c6a:	2321      	movs	r3, #33	@ 0x21
 8018c6c:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8018c6e:	693b      	ldr	r3, [r7, #16]
 8018c70:	0e1b      	lsrs	r3, r3, #24
 8018c72:	b2db      	uxtb	r3, r3
 8018c74:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8018c76:	693b      	ldr	r3, [r7, #16]
 8018c78:	0c1b      	lsrs	r3, r3, #16
 8018c7a:	b2db      	uxtb	r3, r3
 8018c7c:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8018c7e:	693b      	ldr	r3, [r7, #16]
 8018c80:	0a1b      	lsrs	r3, r3, #8
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	b2db      	uxtb	r3, r3
 8018c8a:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8018c8c:	f107 0108 	add.w	r1, r7, #8
 8018c90:	2364      	movs	r3, #100	@ 0x64
 8018c92:	2205      	movs	r2, #5
 8018c94:	6878      	ldr	r0, [r7, #4]
 8018c96:	f7ff fbc6 	bl	8018426 <SPIF_Transmit>
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	f083 0301 	eor.w	r3, r3, #1
 8018ca0:	b2db      	uxtb	r3, r3
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d023      	beq.n	8018cee <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8018ca6:	2101      	movs	r1, #1
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	f7ff fb68 	bl	801837e <SPIF_CsPin>
        break;
 8018cae:	e030      	b.n	8018d12 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8018cb0:	2320      	movs	r3, #32
 8018cb2:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	0c1b      	lsrs	r3, r3, #16
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8018cbc:	693b      	ldr	r3, [r7, #16]
 8018cbe:	0a1b      	lsrs	r3, r3, #8
 8018cc0:	b2db      	uxtb	r3, r3
 8018cc2:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8018cc4:	693b      	ldr	r3, [r7, #16]
 8018cc6:	b2db      	uxtb	r3, r3
 8018cc8:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8018cca:	f107 0108 	add.w	r1, r7, #8
 8018cce:	2364      	movs	r3, #100	@ 0x64
 8018cd0:	2204      	movs	r2, #4
 8018cd2:	6878      	ldr	r0, [r7, #4]
 8018cd4:	f7ff fba7 	bl	8018426 <SPIF_Transmit>
 8018cd8:	4603      	mov	r3, r0
 8018cda:	f083 0301 	eor.w	r3, r3, #1
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d004      	beq.n	8018cee <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8018ce4:	2101      	movs	r1, #1
 8018ce6:	6878      	ldr	r0, [r7, #4]
 8018ce8:	f7ff fb49 	bl	801837e <SPIF_CsPin>
        break;
 8018cec:	e011      	b.n	8018d12 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8018cee:	2101      	movs	r1, #1
 8018cf0:	6878      	ldr	r0, [r7, #4]
 8018cf2:	f7ff fb44 	bl	801837e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8018cf6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8018cfa:	6878      	ldr	r0, [r7, #4]
 8018cfc:	f7ff fc6e 	bl	80185dc <SPIF_WaitForWriting>
 8018d00:	4603      	mov	r3, r0
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d005      	beq.n	8018d12 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8018d06:	2301      	movs	r3, #1
 8018d08:	75fb      	strb	r3, [r7, #23]
 8018d0a:	e002      	b.n	8018d12 <SPIF_EraseSector+0xf0>
      break;
 8018d0c:	bf00      	nop
 8018d0e:	e000      	b.n	8018d12 <SPIF_EraseSector+0xf0>
      break;
 8018d10:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8018d12:	6878      	ldr	r0, [r7, #4]
 8018d14:	f7ff fc19 	bl	801854a <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	f7ff fb23 	bl	8018364 <SPIF_UnLock>
  return retVal;
 8018d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d20:	4618      	mov	r0, r3
 8018d22:	3718      	adds	r7, #24
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}

08018d28 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b088      	sub	sp, #32
 8018d2c:	af02      	add	r7, sp, #8
 8018d2e:	60f8      	str	r0, [r7, #12]
 8018d30:	60b9      	str	r1, [r7, #8]
 8018d32:	607a      	str	r2, [r7, #4]
 8018d34:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8018d36:	68f8      	ldr	r0, [r7, #12]
 8018d38:	f7ff fb01 	bl	801833e <SPIF_Lock>
  bool retVal = false;
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8018d40:	6a3b      	ldr	r3, [r7, #32]
 8018d42:	9300      	str	r3, [sp, #0]
 8018d44:	683b      	ldr	r3, [r7, #0]
 8018d46:	687a      	ldr	r2, [r7, #4]
 8018d48:	68b9      	ldr	r1, [r7, #8]
 8018d4a:	68f8      	ldr	r0, [r7, #12]
 8018d4c:	f7ff fe04 	bl	8018958 <SPIF_WriteFn>
 8018d50:	4603      	mov	r3, r0
 8018d52:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8018d54:	68f8      	ldr	r0, [r7, #12]
 8018d56:	f7ff fb05 	bl	8018364 <SPIF_UnLock>
  return retVal;
 8018d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	3718      	adds	r7, #24
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}

08018d64 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b088      	sub	sp, #32
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	60f8      	str	r0, [r7, #12]
 8018d6c:	60b9      	str	r1, [r7, #8]
 8018d6e:	607a      	str	r2, [r7, #4]
 8018d70:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8018d72:	68f8      	ldr	r0, [r7, #12]
 8018d74:	f7ff fae3 	bl	801833e <SPIF_Lock>
  bool retVal = false;
 8018d78:	2300      	movs	r3, #0
 8018d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8018d7c:	68bb      	ldr	r3, [r7, #8]
 8018d7e:	021b      	lsls	r3, r3, #8
 8018d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018d82:	4413      	add	r3, r2
 8018d84:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8018d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d88:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8018d8c:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8018d8e:	683a      	ldr	r2, [r7, #0]
 8018d90:	697b      	ldr	r3, [r7, #20]
 8018d92:	429a      	cmp	r2, r3
 8018d94:	d901      	bls.n	8018d9a <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8018d9a:	683b      	ldr	r3, [r7, #0]
 8018d9c:	687a      	ldr	r2, [r7, #4]
 8018d9e:	69b9      	ldr	r1, [r7, #24]
 8018da0:	68f8      	ldr	r0, [r7, #12]
 8018da2:	f7ff fe81 	bl	8018aa8 <SPIF_ReadFn>
 8018da6:	4603      	mov	r3, r0
 8018da8:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8018daa:	68f8      	ldr	r0, [r7, #12]
 8018dac:	f7ff fada 	bl	8018364 <SPIF_UnLock>
  return retVal;
 8018db0:	7ffb      	ldrb	r3, [r7, #31]
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	3720      	adds	r7, #32
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}
	...

08018dbc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8018dbc:	b480      	push	{r7}
 8018dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8018dc0:	4b03      	ldr	r3, [pc, #12]	@ (8018dd0 <LL_FLASH_GetUDN+0x14>)
 8018dc2:	681b      	ldr	r3, [r3, #0]
}
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dcc:	4770      	bx	lr
 8018dce:	bf00      	nop
 8018dd0:	1fff7580 	.word	0x1fff7580

08018dd4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8018dd4:	b480      	push	{r7}
 8018dd6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8018dd8:	4b03      	ldr	r3, [pc, #12]	@ (8018de8 <LL_FLASH_GetDeviceID+0x14>)
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	b2db      	uxtb	r3, r3
}
 8018dde:	4618      	mov	r0, r3
 8018de0:	46bd      	mov	sp, r7
 8018de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de6:	4770      	bx	lr
 8018de8:	1fff7584 	.word	0x1fff7584

08018dec <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8018dec:	b480      	push	{r7}
 8018dee:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8018df0:	4b03      	ldr	r3, [pc, #12]	@ (8018e00 <LL_FLASH_GetSTCompanyID+0x14>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	0a1b      	lsrs	r3, r3, #8
}
 8018df6:	4618      	mov	r0, r3
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfe:	4770      	bx	lr
 8018e00:	1fff7584 	.word	0x1fff7584

08018e04 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8018e04:	b5b0      	push	{r4, r5, r7, lr}
 8018e06:	b090      	sub	sp, #64	@ 0x40
 8018e08:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8018e0a:	2392      	movs	r3, #146	@ 0x92
 8018e0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8018e10:	4b25      	ldr	r3, [pc, #148]	@ (8018ea8 <APP_BLE_Init+0xa4>)
 8018e12:	1d3c      	adds	r4, r7, #4
 8018e14:	461d      	mov	r5, r3
 8018e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018e26:	c403      	stmia	r4!, {r0, r1}
 8018e28:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8018e2a:	f000 f921 	bl	8019070 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8018e2e:	2101      	movs	r1, #1
 8018e30:	2002      	movs	r0, #2
 8018e32:	f001 fb9b 	bl	801a56c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8018e36:	4a1d      	ldr	r2, [pc, #116]	@ (8018eac <APP_BLE_Init+0xa8>)
 8018e38:	2100      	movs	r1, #0
 8018e3a:	2002      	movs	r0, #2
 8018e3c:	f001 fcc2 	bl	801a7c4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8018e40:	1d3b      	adds	r3, r7, #4
 8018e42:	4618      	mov	r0, r3
 8018e44:	f7fe fb7c 	bl	8017540 <SHCI_C2_BLE_Init>
 8018e48:	4603      	mov	r3, r0
 8018e4a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8018e4e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d001      	beq.n	8018e5a <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8018e56:	f7ea f901 	bl	800305c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8018e5a:	f000 f91f 	bl	801909c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8018e5e:	f7fe fac9 	bl	80173f4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8018e62:	4b13      	ldr	r3, [pc, #76]	@ (8018eb0 <APP_BLE_Init+0xac>)
 8018e64:	2200      	movs	r2, #0
 8018e66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8018e6a:	4b11      	ldr	r3, [pc, #68]	@ (8018eb0 <APP_BLE_Init+0xac>)
 8018e6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e70:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8018e72:	4a10      	ldr	r2, [pc, #64]	@ (8018eb4 <APP_BLE_Init+0xb0>)
 8018e74:	2100      	movs	r1, #0
 8018e76:	2001      	movs	r0, #1
 8018e78:	f001 fca4 	bl	801a7c4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8018e7c:	2006      	movs	r0, #6
 8018e7e:	f7fe f92d 	bl	80170dc <aci_hal_set_radio_activity_mask>
 8018e82:	4603      	mov	r3, r0
 8018e84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8018e88:	f000 facb 	bl	8019422 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8018e8c:	4b08      	ldr	r3, [pc, #32]	@ (8018eb0 <APP_BLE_Init+0xac>)
 8018e8e:	2200      	movs	r2, #0
 8018e90:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8018e92:	4b07      	ldr	r3, [pc, #28]	@ (8018eb0 <APP_BLE_Init+0xac>)
 8018e94:	2200      	movs	r2, #0
 8018e96:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8018e98:	2001      	movs	r0, #1
 8018e9a:	f000 f9b3 	bl	8019204 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8018e9e:	bf00      	nop
}
 8018ea0:	3740      	adds	r7, #64	@ 0x40
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8018ea6:	bf00      	nop
 8018ea8:	080213f4 	.word	0x080213f4
 8018eac:	0801775d 	.word	0x0801775d
 8018eb0:	200015d4 	.word	0x200015d4
 8018eb4:	080192ed 	.word	0x080192ed

08018eb8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b08c      	sub	sp, #48	@ 0x30
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8018ec0:	2392      	movs	r3, #146	@ 0x92
 8018ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	3301      	adds	r3, #1
 8018eca:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8018ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ece:	781b      	ldrb	r3, [r3, #0]
 8018ed0:	2bff      	cmp	r3, #255	@ 0xff
 8018ed2:	d05c      	beq.n	8018f8e <SVCCTL_App_Notification+0xd6>
 8018ed4:	2bff      	cmp	r3, #255	@ 0xff
 8018ed6:	f300 80bd 	bgt.w	8019054 <SVCCTL_App_Notification+0x19c>
 8018eda:	2b3e      	cmp	r3, #62	@ 0x3e
 8018edc:	d02b      	beq.n	8018f36 <SVCCTL_App_Notification+0x7e>
 8018ede:	2b3e      	cmp	r3, #62	@ 0x3e
 8018ee0:	f300 80b8 	bgt.w	8019054 <SVCCTL_App_Notification+0x19c>
 8018ee4:	2b05      	cmp	r3, #5
 8018ee6:	d002      	beq.n	8018eee <SVCCTL_App_Notification+0x36>
 8018ee8:	2b10      	cmp	r3, #16
 8018eea:	d020      	beq.n	8018f2e <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8018eec:	e0b2      	b.n	8019054 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8018eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ef0:	3302      	adds	r3, #2
 8018ef2:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8018efa:	b29a      	uxth	r2, r3
 8018efc:	4b59      	ldr	r3, [pc, #356]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8018efe:	8adb      	ldrh	r3, [r3, #22]
 8018f00:	429a      	cmp	r2, r3
 8018f02:	d106      	bne.n	8018f12 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8018f04:	4b57      	ldr	r3, [pc, #348]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8018f06:	2200      	movs	r2, #0
 8018f08:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8018f0a:	4b56      	ldr	r3, [pc, #344]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8018f12:	2001      	movs	r0, #1
 8018f14:	f000 f976 	bl	8019204 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8018f18:	4b53      	ldr	r3, [pc, #332]	@ (8019068 <SVCCTL_App_Notification+0x1b0>)
 8018f1a:	2201      	movs	r2, #1
 8018f1c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8018f1e:	4b51      	ldr	r3, [pc, #324]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8018f20:	8ada      	ldrh	r2, [r3, #22]
 8018f22:	4b51      	ldr	r3, [pc, #324]	@ (8019068 <SVCCTL_App_Notification+0x1b0>)
 8018f24:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8018f26:	4850      	ldr	r0, [pc, #320]	@ (8019068 <SVCCTL_App_Notification+0x1b0>)
 8018f28:	f000 fa67 	bl	80193fa <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8018f2c:	e095      	b.n	801905a <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8018f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f30:	3302      	adds	r3, #2
 8018f32:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8018f34:	e091      	b.n	801905a <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8018f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f38:	3302      	adds	r3, #2
 8018f3a:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8018f3c:	69bb      	ldr	r3, [r7, #24]
 8018f3e:	781b      	ldrb	r3, [r3, #0]
 8018f40:	2b01      	cmp	r3, #1
 8018f42:	d001      	beq.n	8018f48 <SVCCTL_App_Notification+0x90>
 8018f44:	2b03      	cmp	r3, #3
          break;
 8018f46:	e021      	b.n	8018f8c <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8018f48:	69bb      	ldr	r3, [r7, #24]
 8018f4a:	3301      	adds	r3, #1
 8018f4c:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8018f4e:	4b45      	ldr	r3, [pc, #276]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8018f50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8018f54:	2b04      	cmp	r3, #4
 8018f56:	d104      	bne.n	8018f62 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8018f58:	4b42      	ldr	r3, [pc, #264]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8018f5a:	2206      	movs	r2, #6
 8018f5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8018f60:	e003      	b.n	8018f6a <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8018f62:	4b40      	ldr	r3, [pc, #256]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8018f64:	2205      	movs	r2, #5
 8018f66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8018f6a:	697b      	ldr	r3, [r7, #20]
 8018f6c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8018f70:	b29a      	uxth	r2, r3
 8018f72:	4b3c      	ldr	r3, [pc, #240]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8018f74:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8018f76:	4b3c      	ldr	r3, [pc, #240]	@ (8019068 <SVCCTL_App_Notification+0x1b0>)
 8018f78:	2200      	movs	r2, #0
 8018f7a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8018f7c:	4b39      	ldr	r3, [pc, #228]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8018f7e:	8ada      	ldrh	r2, [r3, #22]
 8018f80:	4b39      	ldr	r3, [pc, #228]	@ (8019068 <SVCCTL_App_Notification+0x1b0>)
 8018f82:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8018f84:	4838      	ldr	r0, [pc, #224]	@ (8019068 <SVCCTL_App_Notification+0x1b0>)
 8018f86:	f000 fa38 	bl	80193fa <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8018f8a:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8018f8c:	e065      	b.n	801905a <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8018f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f90:	3302      	adds	r3, #2
 8018f92:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8018f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f96:	881b      	ldrh	r3, [r3, #0]
 8018f98:	b29b      	uxth	r3, r3
 8018f9a:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8018f9e:	4293      	cmp	r3, r2
 8018fa0:	d048      	beq.n	8019034 <SVCCTL_App_Notification+0x17c>
 8018fa2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8018fa6:	4293      	cmp	r3, r2
 8018fa8:	dc56      	bgt.n	8019058 <SVCCTL_App_Notification+0x1a0>
 8018faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018fae:	d04b      	beq.n	8019048 <SVCCTL_App_Notification+0x190>
 8018fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018fb4:	dc50      	bgt.n	8019058 <SVCCTL_App_Notification+0x1a0>
 8018fb6:	f240 420a 	movw	r2, #1034	@ 0x40a
 8018fba:	4293      	cmp	r3, r2
 8018fbc:	dc4c      	bgt.n	8019058 <SVCCTL_App_Notification+0x1a0>
 8018fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018fc2:	dc04      	bgt.n	8018fce <SVCCTL_App_Notification+0x116>
 8018fc4:	2b04      	cmp	r3, #4
 8018fc6:	d041      	beq.n	801904c <SVCCTL_App_Notification+0x194>
 8018fc8:	2b06      	cmp	r3, #6
 8018fca:	d039      	beq.n	8019040 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8018fcc:	e044      	b.n	8019058 <SVCCTL_App_Notification+0x1a0>
 8018fce:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8018fd2:	2b09      	cmp	r3, #9
 8018fd4:	d840      	bhi.n	8019058 <SVCCTL_App_Notification+0x1a0>
 8018fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8018fdc <SVCCTL_App_Notification+0x124>)
 8018fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fdc:	0801902d 	.word	0x0801902d
 8018fe0:	08019005 	.word	0x08019005
 8018fe4:	08019059 	.word	0x08019059
 8018fe8:	08019059 	.word	0x08019059
 8018fec:	08019059 	.word	0x08019059
 8018ff0:	08019059 	.word	0x08019059
 8018ff4:	08019051 	.word	0x08019051
 8018ff8:	08019059 	.word	0x08019059
 8018ffc:	08019019 	.word	0x08019019
 8019000:	08019051 	.word	0x08019051
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8019004:	4b17      	ldr	r3, [pc, #92]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8019006:	8adb      	ldrh	r3, [r3, #22]
 8019008:	4918      	ldr	r1, [pc, #96]	@ (801906c <SVCCTL_App_Notification+0x1b4>)
 801900a:	4618      	mov	r0, r3
 801900c:	f7fd fa68 	bl	80164e0 <aci_gap_pass_key_resp>
 8019010:	4603      	mov	r3, r0
 8019012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8019016:	e01c      	b.n	8019052 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8019018:	4b12      	ldr	r3, [pc, #72]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 801901a:	8adb      	ldrh	r3, [r3, #22]
 801901c:	2101      	movs	r1, #1
 801901e:	4618      	mov	r0, r3
 8019020:	f7fd fc08 	bl	8016834 <aci_gap_numeric_comparison_value_confirm_yesno>
 8019024:	4603      	mov	r3, r0
 8019026:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 801902a:	e012      	b.n	8019052 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 801902c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801902e:	3302      	adds	r3, #2
 8019030:	623b      	str	r3, [r7, #32]
          break;
 8019032:	e00e      	b.n	8019052 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8019034:	4b0b      	ldr	r3, [pc, #44]	@ (8019064 <SVCCTL_App_Notification+0x1ac>)
 8019036:	8adb      	ldrh	r3, [r3, #22]
 8019038:	4618      	mov	r0, r3
 801903a:	f7fd ff0e 	bl	8016e5a <aci_gatt_confirm_indication>
        break;
 801903e:	e008      	b.n	8019052 <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8019040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019042:	3302      	adds	r3, #2
 8019044:	61fb      	str	r3, [r7, #28]
          break;
 8019046:	e004      	b.n	8019052 <SVCCTL_App_Notification+0x19a>
          break;
 8019048:	bf00      	nop
 801904a:	e005      	b.n	8019058 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 801904c:	bf00      	nop
 801904e:	e003      	b.n	8019058 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8019050:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8019052:	e001      	b.n	8019058 <SVCCTL_App_Notification+0x1a0>
      break;
 8019054:	bf00      	nop
 8019056:	e000      	b.n	801905a <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8019058:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 801905a:	2301      	movs	r3, #1
}
 801905c:	4618      	mov	r0, r3
 801905e:	3730      	adds	r7, #48	@ 0x30
 8019060:	46bd      	mov	sp, r7
 8019062:	bd80      	pop	{r7, pc}
 8019064:	200015d4 	.word	0x200015d4
 8019068:	20001658 	.word	0x20001658
 801906c:	0001b207 	.word	0x0001b207

08019070 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b082      	sub	sp, #8
 8019074:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8019076:	4b06      	ldr	r3, [pc, #24]	@ (8019090 <Ble_Tl_Init+0x20>)
 8019078:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 801907a:	4b06      	ldr	r3, [pc, #24]	@ (8019094 <Ble_Tl_Init+0x24>)
 801907c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 801907e:	463b      	mov	r3, r7
 8019080:	4619      	mov	r1, r3
 8019082:	4805      	ldr	r0, [pc, #20]	@ (8019098 <Ble_Tl_Init+0x28>)
 8019084:	f7fe fb4e 	bl	8017724 <hci_init>

  return;
 8019088:	bf00      	nop
}
 801908a:	3708      	adds	r7, #8
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}
 8019090:	200300d8 	.word	0x200300d8
 8019094:	0801939d 	.word	0x0801939d
 8019098:	08019365 	.word	0x08019365

0801909c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 801909c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801909e:	b08d      	sub	sp, #52	@ 0x34
 80190a0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80190a2:	2300      	movs	r3, #0
 80190a4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80190a6:	2392      	movs	r3, #146	@ 0x92
 80190a8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80190aa:	f7fe f86b 	bl	8017184 <hci_reset>
 80190ae:	4603      	mov	r3, r0
 80190b0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80190b2:	f000 f8d7 	bl	8019264 <BleGetBdAddress>
 80190b6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80190b8:	693a      	ldr	r2, [r7, #16]
 80190ba:	2106      	movs	r1, #6
 80190bc:	2000      	movs	r0, #0
 80190be:	f7fd ff21 	bl	8016f04 <aci_hal_write_config_data>
 80190c2:	4603      	mov	r3, r0
 80190c4:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80190c6:	4a4a      	ldr	r2, [pc, #296]	@ (80191f0 <Ble_Hci_Gap_Gatt_Init+0x154>)
 80190c8:	2110      	movs	r1, #16
 80190ca:	2018      	movs	r0, #24
 80190cc:	f7fd ff1a 	bl	8016f04 <aci_hal_write_config_data>
 80190d0:	4603      	mov	r3, r0
 80190d2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80190d4:	4a47      	ldr	r2, [pc, #284]	@ (80191f4 <Ble_Hci_Gap_Gatt_Init+0x158>)
 80190d6:	2110      	movs	r1, #16
 80190d8:	2008      	movs	r0, #8
 80190da:	f7fd ff13 	bl	8016f04 <aci_hal_write_config_data>
 80190de:	4603      	mov	r3, r0
 80190e0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80190e2:	211d      	movs	r1, #29
 80190e4:	2001      	movs	r0, #1
 80190e6:	f7fd ff92 	bl	801700e <aci_hal_set_tx_power_level>
 80190ea:	4603      	mov	r3, r0
 80190ec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80190ee:	f7fd fc08 	bl	8016902 <aci_gatt_init>
 80190f2:	4603      	mov	r3, r0
 80190f4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80190f6:	2300      	movs	r3, #0
 80190f8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80190fa:	7bfb      	ldrb	r3, [r7, #15]
 80190fc:	f043 0301 	orr.w	r3, r3, #1
 8019100:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8019102:	7bfb      	ldrb	r3, [r7, #15]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d01f      	beq.n	8019148 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8019108:	4b3b      	ldr	r3, [pc, #236]	@ (80191f8 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 801910a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 801910c:	1dba      	adds	r2, r7, #6
 801910e:	7bf8      	ldrb	r0, [r7, #15]
 8019110:	1cbb      	adds	r3, r7, #2
 8019112:	9301      	str	r3, [sp, #4]
 8019114:	1d3b      	adds	r3, r7, #4
 8019116:	9300      	str	r3, [sp, #0]
 8019118:	4613      	mov	r3, r2
 801911a:	2206      	movs	r2, #6
 801911c:	2100      	movs	r1, #0
 801911e:	f7fd fa46 	bl	80165ae <aci_gap_init>
 8019122:	4603      	mov	r3, r0
 8019124:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8019126:	88fc      	ldrh	r4, [r7, #6]
 8019128:	88bd      	ldrh	r5, [r7, #4]
 801912a:	68b8      	ldr	r0, [r7, #8]
 801912c:	f7e7 f878 	bl	8000220 <strlen>
 8019130:	4603      	mov	r3, r0
 8019132:	b2da      	uxtb	r2, r3
 8019134:	68bb      	ldr	r3, [r7, #8]
 8019136:	9300      	str	r3, [sp, #0]
 8019138:	4613      	mov	r3, r2
 801913a:	2200      	movs	r2, #0
 801913c:	4629      	mov	r1, r5
 801913e:	4620      	mov	r0, r4
 8019140:	f7fd fde2 	bl	8016d08 <aci_gatt_update_char_value>
 8019144:	4603      	mov	r3, r0
 8019146:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8019148:	88f8      	ldrh	r0, [r7, #6]
 801914a:	8879      	ldrh	r1, [r7, #2]
 801914c:	463b      	mov	r3, r7
 801914e:	9300      	str	r3, [sp, #0]
 8019150:	2302      	movs	r3, #2
 8019152:	2200      	movs	r2, #0
 8019154:	f7fd fdd8 	bl	8016d08 <aci_gatt_update_char_value>
 8019158:	4603      	mov	r3, r0
 801915a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 801915c:	2202      	movs	r2, #2
 801915e:	2102      	movs	r1, #2
 8019160:	2000      	movs	r0, #0
 8019162:	f7fe f833 	bl	80171cc <hci_le_set_default_phy>
 8019166:	4603      	mov	r3, r0
 8019168:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 801916a:	4b24      	ldr	r3, [pc, #144]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 801916c:	2201      	movs	r2, #1
 801916e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8019170:	4b22      	ldr	r3, [pc, #136]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019172:	781b      	ldrb	r3, [r3, #0]
 8019174:	4618      	mov	r0, r3
 8019176:	f7fd f89b 	bl	80162b0 <aci_gap_set_io_capability>
 801917a:	4603      	mov	r3, r0
 801917c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801917e:	4b1f      	ldr	r3, [pc, #124]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019180:	2201      	movs	r2, #1
 8019182:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8019184:	4b1d      	ldr	r3, [pc, #116]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019186:	2208      	movs	r2, #8
 8019188:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 801918a:	4b1c      	ldr	r3, [pc, #112]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 801918c:	2210      	movs	r2, #16
 801918e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8019190:	4b1a      	ldr	r3, [pc, #104]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019192:	2200      	movs	r2, #0
 8019194:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8019196:	4b19      	ldr	r3, [pc, #100]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8019198:	4a19      	ldr	r2, [pc, #100]	@ (8019200 <Ble_Hci_Gap_Gatt_Init+0x164>)
 801919a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 801919c:	4b17      	ldr	r3, [pc, #92]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 801919e:	2200      	movs	r2, #0
 80191a0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80191a2:	4b16      	ldr	r3, [pc, #88]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 80191a4:	789c      	ldrb	r4, [r3, #2]
 80191a6:	4b15      	ldr	r3, [pc, #84]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 80191a8:	785d      	ldrb	r5, [r3, #1]
 80191aa:	4b14      	ldr	r3, [pc, #80]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 80191ac:	791b      	ldrb	r3, [r3, #4]
 80191ae:	4a13      	ldr	r2, [pc, #76]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 80191b0:	7952      	ldrb	r2, [r2, #5]
 80191b2:	4912      	ldr	r1, [pc, #72]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 80191b4:	78c9      	ldrb	r1, [r1, #3]
 80191b6:	4811      	ldr	r0, [pc, #68]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 80191b8:	6880      	ldr	r0, [r0, #8]
 80191ba:	2600      	movs	r6, #0
 80191bc:	9604      	str	r6, [sp, #16]
 80191be:	9003      	str	r0, [sp, #12]
 80191c0:	9102      	str	r1, [sp, #8]
 80191c2:	9201      	str	r2, [sp, #4]
 80191c4:	9300      	str	r3, [sp, #0]
 80191c6:	2300      	movs	r3, #0
 80191c8:	2201      	movs	r2, #1
 80191ca:	4629      	mov	r1, r5
 80191cc:	4620      	mov	r0, r4
 80191ce:	f7fd f8c3 	bl	8016358 <aci_gap_set_authentication_requirement>
 80191d2:	4603      	mov	r3, r0
 80191d4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80191d6:	4b09      	ldr	r3, [pc, #36]	@ (80191fc <Ble_Hci_Gap_Gatt_Init+0x160>)
 80191d8:	789b      	ldrb	r3, [r3, #2]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d003      	beq.n	80191e6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80191de:	f7fd fb05 	bl	80167ec <aci_gap_configure_filter_accept_list>
 80191e2:	4603      	mov	r3, r0
 80191e4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80191e6:	bf00      	nop
 80191e8:	371c      	adds	r7, #28
 80191ea:	46bd      	mov	sp, r7
 80191ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191ee:	bf00      	nop
 80191f0:	08023238 	.word	0x08023238
 80191f4:	08023248 	.word	0x08023248
 80191f8:	08021430 	.word	0x08021430
 80191fc:	200015d4 	.word	0x200015d4
 8019200:	0001b207 	.word	0x0001b207

08019204 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b08c      	sub	sp, #48	@ 0x30
 8019208:	af08      	add	r7, sp, #32
 801920a:	4603      	mov	r3, r0
 801920c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801920e:	2392      	movs	r3, #146	@ 0x92
 8019210:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8019212:	4a12      	ldr	r2, [pc, #72]	@ (801925c <Adv_Request+0x58>)
 8019214:	79fb      	ldrb	r3, [r7, #7]
 8019216:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 801921a:	2300      	movs	r3, #0
 801921c:	9306      	str	r3, [sp, #24]
 801921e:	2300      	movs	r3, #0
 8019220:	9305      	str	r3, [sp, #20]
 8019222:	2300      	movs	r3, #0
 8019224:	9304      	str	r3, [sp, #16]
 8019226:	2300      	movs	r3, #0
 8019228:	9303      	str	r3, [sp, #12]
 801922a:	2300      	movs	r3, #0
 801922c:	9302      	str	r3, [sp, #8]
 801922e:	2300      	movs	r3, #0
 8019230:	9301      	str	r3, [sp, #4]
 8019232:	2300      	movs	r3, #0
 8019234:	9300      	str	r3, [sp, #0]
 8019236:	2300      	movs	r3, #0
 8019238:	22a0      	movs	r2, #160	@ 0xa0
 801923a:	2180      	movs	r1, #128	@ 0x80
 801923c:	2000      	movs	r0, #0
 801923e:	f7fc ff3d 	bl	80160bc <aci_gap_set_discoverable>
 8019242:	4603      	mov	r3, r0
 8019244:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8019246:	4906      	ldr	r1, [pc, #24]	@ (8019260 <Adv_Request+0x5c>)
 8019248:	200e      	movs	r0, #14
 801924a:	f7fd fa5d 	bl	8016708 <aci_gap_update_adv_data>
 801924e:	4603      	mov	r3, r0
 8019250:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8019252:	bf00      	nop
}
 8019254:	3710      	adds	r7, #16
 8019256:	46bd      	mov	sp, r7
 8019258:	bd80      	pop	{r7, pc}
 801925a:	bf00      	nop
 801925c:	200015d4 	.word	0x200015d4
 8019260:	200000c4 	.word	0x200000c4

08019264 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b086      	sub	sp, #24
 8019268:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 801926a:	f7ff fda7 	bl	8018dbc <LL_FLASH_GetUDN>
 801926e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8019270:	693b      	ldr	r3, [r7, #16]
 8019272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019276:	d023      	beq.n	80192c0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8019278:	f7ff fdb8 	bl	8018dec <LL_FLASH_GetSTCompanyID>
 801927c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 801927e:	f7ff fda9 	bl	8018dd4 <LL_FLASH_GetDeviceID>
 8019282:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	b2da      	uxtb	r2, r3
 8019288:	4b16      	ldr	r3, [pc, #88]	@ (80192e4 <BleGetBdAddress+0x80>)
 801928a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	0a1b      	lsrs	r3, r3, #8
 8019290:	b2da      	uxtb	r2, r3
 8019292:	4b14      	ldr	r3, [pc, #80]	@ (80192e4 <BleGetBdAddress+0x80>)
 8019294:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	b2da      	uxtb	r2, r3
 801929a:	4b12      	ldr	r3, [pc, #72]	@ (80192e4 <BleGetBdAddress+0x80>)
 801929c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 801929e:	68bb      	ldr	r3, [r7, #8]
 80192a0:	b2da      	uxtb	r2, r3
 80192a2:	4b10      	ldr	r3, [pc, #64]	@ (80192e4 <BleGetBdAddress+0x80>)
 80192a4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80192a6:	68bb      	ldr	r3, [r7, #8]
 80192a8:	0a1b      	lsrs	r3, r3, #8
 80192aa:	b2da      	uxtb	r2, r3
 80192ac:	4b0d      	ldr	r3, [pc, #52]	@ (80192e4 <BleGetBdAddress+0x80>)
 80192ae:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80192b0:	68bb      	ldr	r3, [r7, #8]
 80192b2:	0c1b      	lsrs	r3, r3, #16
 80192b4:	b2da      	uxtb	r2, r3
 80192b6:	4b0b      	ldr	r3, [pc, #44]	@ (80192e4 <BleGetBdAddress+0x80>)
 80192b8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80192ba:	4b0a      	ldr	r3, [pc, #40]	@ (80192e4 <BleGetBdAddress+0x80>)
 80192bc:	617b      	str	r3, [r7, #20]
 80192be:	e00b      	b.n	80192d8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80192c0:	2000      	movs	r0, #0
 80192c2:	f7fe ff4b 	bl	801815c <OTP_Read>
 80192c6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d002      	beq.n	80192d4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	617b      	str	r3, [r7, #20]
 80192d2:	e001      	b.n	80192d8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80192d4:	4b04      	ldr	r3, [pc, #16]	@ (80192e8 <BleGetBdAddress+0x84>)
 80192d6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80192d8:	697b      	ldr	r3, [r7, #20]
}
 80192da:	4618      	mov	r0, r3
 80192dc:	3718      	adds	r7, #24
 80192de:	46bd      	mov	sp, r7
 80192e0:	bd80      	pop	{r7, pc}
 80192e2:	bf00      	nop
 80192e4:	200015cc 	.word	0x200015cc
 80192e8:	08023230 	.word	0x08023230

080192ec <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b082      	sub	sp, #8
 80192f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80192f2:	4b0a      	ldr	r3, [pc, #40]	@ (801931c <Adv_Cancel+0x30>)
 80192f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80192f8:	2b05      	cmp	r3, #5
 80192fa:	d00a      	beq.n	8019312 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80192fc:	2392      	movs	r3, #146	@ 0x92
 80192fe:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8019300:	f7fc feb8 	bl	8016074 <aci_gap_set_non_discoverable>
 8019304:	4603      	mov	r3, r0
 8019306:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8019308:	4b04      	ldr	r3, [pc, #16]	@ (801931c <Adv_Cancel+0x30>)
 801930a:	2200      	movs	r2, #0
 801930c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8019310:	bf00      	nop
 8019312:	bf00      	nop
}
 8019314:	3708      	adds	r7, #8
 8019316:	46bd      	mov	sp, r7
 8019318:	bd80      	pop	{r7, pc}
 801931a:	bf00      	nop
 801931c:	200015d4 	.word	0x200015d4

08019320 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b082      	sub	sp, #8
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8019328:	2100      	movs	r1, #0
 801932a:	2002      	movs	r0, #2
 801932c:	f001 fa6c 	bl	801a808 <UTIL_SEQ_SetTask>

  return;
 8019330:	bf00      	nop
}
 8019332:	3708      	adds	r7, #8
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}

08019338 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b082      	sub	sp, #8
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8019340:	2001      	movs	r0, #1
 8019342:	f001 facd 	bl	801a8e0 <UTIL_SEQ_SetEvt>

  return;
 8019346:	bf00      	nop
}
 8019348:	3708      	adds	r7, #8
 801934a:	46bd      	mov	sp, r7
 801934c:	bd80      	pop	{r7, pc}

0801934e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801934e:	b580      	push	{r7, lr}
 8019350:	b082      	sub	sp, #8
 8019352:	af00      	add	r7, sp, #0
 8019354:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8019356:	2001      	movs	r0, #1
 8019358:	f001 fae2 	bl	801a920 <UTIL_SEQ_WaitEvt>

  return;
 801935c:	bf00      	nop
}
 801935e:	3708      	adds	r7, #8
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}

08019364 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b084      	sub	sp, #16
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	685b      	ldr	r3, [r3, #4]
 8019374:	3308      	adds	r3, #8
 8019376:	4618      	mov	r0, r3
 8019378:	f7fe f88e 	bl	8017498 <SVCCTL_UserEvtRx>
 801937c:	4603      	mov	r3, r0
 801937e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8019380:	7afb      	ldrb	r3, [r7, #11]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d003      	beq.n	801938e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	2201      	movs	r2, #1
 801938a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 801938c:	e003      	b.n	8019396 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	2200      	movs	r2, #0
 8019392:	701a      	strb	r2, [r3, #0]
  return;
 8019394:	bf00      	nop
}
 8019396:	3710      	adds	r7, #16
 8019398:	46bd      	mov	sp, r7
 801939a:	bd80      	pop	{r7, pc}

0801939c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b084      	sub	sp, #16
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	4603      	mov	r3, r0
 80193a4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80193a6:	79fb      	ldrb	r3, [r7, #7]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d002      	beq.n	80193b2 <BLE_StatusNot+0x16>
 80193ac:	2b01      	cmp	r3, #1
 80193ae:	d006      	beq.n	80193be <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80193b0:	e00b      	b.n	80193ca <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80193b2:	2303      	movs	r3, #3
 80193b4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80193b6:	68f8      	ldr	r0, [r7, #12]
 80193b8:	f001 fa52 	bl	801a860 <UTIL_SEQ_PauseTask>
      break;
 80193bc:	e005      	b.n	80193ca <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80193be:	2303      	movs	r3, #3
 80193c0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80193c2:	68f8      	ldr	r0, [r7, #12]
 80193c4:	f001 fa6c 	bl	801a8a0 <UTIL_SEQ_ResumeTask>
      break;
 80193c8:	bf00      	nop
  }

  return;
 80193ca:	bf00      	nop
}
 80193cc:	3710      	adds	r7, #16
 80193ce:	46bd      	mov	sp, r7
 80193d0:	bd80      	pop	{r7, pc}

080193d2 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80193d2:	b480      	push	{r7}
 80193d4:	b083      	sub	sp, #12
 80193d6:	af00      	add	r7, sp, #0
 80193d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	781b      	ldrb	r3, [r3, #0]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d002      	beq.n	80193e8 <Custom_STM_App_Notification+0x16>
 80193e2:	2b01      	cmp	r3, #1
 80193e4:	d002      	beq.n	80193ec <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80193e6:	e002      	b.n	80193ee <Custom_STM_App_Notification+0x1c>
      break;
 80193e8:	bf00      	nop
 80193ea:	e000      	b.n	80193ee <Custom_STM_App_Notification+0x1c>
      break;
 80193ec:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80193ee:	bf00      	nop
}
 80193f0:	370c      	adds	r7, #12
 80193f2:	46bd      	mov	sp, r7
 80193f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f8:	4770      	bx	lr

080193fa <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80193fa:	b480      	push	{r7}
 80193fc:	b083      	sub	sp, #12
 80193fe:	af00      	add	r7, sp, #0
 8019400:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	781b      	ldrb	r3, [r3, #0]
 8019406:	2b00      	cmp	r3, #0
 8019408:	d002      	beq.n	8019410 <Custom_APP_Notification+0x16>
 801940a:	2b01      	cmp	r3, #1
 801940c:	d002      	beq.n	8019414 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 801940e:	e002      	b.n	8019416 <Custom_APP_Notification+0x1c>
      break;
 8019410:	bf00      	nop
 8019412:	e000      	b.n	8019416 <Custom_APP_Notification+0x1c>
      break;
 8019414:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8019416:	bf00      	nop
}
 8019418:	370c      	adds	r7, #12
 801941a:	46bd      	mov	sp, r7
 801941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019420:	4770      	bx	lr

08019422 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8019422:	b480      	push	{r7}
 8019424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8019426:	bf00      	nop
}
 8019428:	46bd      	mov	sp, r7
 801942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801942e:	4770      	bx	lr

08019430 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b08c      	sub	sp, #48	@ 0x30
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8019438:	2300      	movs	r3, #0
 801943a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	3301      	adds	r3, #1
 8019442:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8019444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	2bff      	cmp	r3, #255	@ 0xff
 801944a:	d166      	bne.n	801951a <Custom_STM_Event_Handler+0xea>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 801944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801944e:	3302      	adds	r3, #2
 8019450:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8019452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019454:	881b      	ldrh	r3, [r3, #0]
 8019456:	b29b      	uxth	r3, r3
 8019458:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 801945c:	2b1a      	cmp	r3, #26
 801945e:	d858      	bhi.n	8019512 <Custom_STM_Event_Handler+0xe2>
 8019460:	a201      	add	r2, pc, #4	@ (adr r2, 8019468 <Custom_STM_Event_Handler+0x38>)
 8019462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019466:	bf00      	nop
 8019468:	080194d5 	.word	0x080194d5
 801946c:	08019513 	.word	0x08019513
 8019470:	08019513 	.word	0x08019513
 8019474:	08019513 	.word	0x08019513
 8019478:	08019513 	.word	0x08019513
 801947c:	08019513 	.word	0x08019513
 8019480:	08019513 	.word	0x08019513
 8019484:	08019513 	.word	0x08019513
 8019488:	08019513 	.word	0x08019513
 801948c:	08019513 	.word	0x08019513
 8019490:	08019513 	.word	0x08019513
 8019494:	08019513 	.word	0x08019513
 8019498:	08019513 	.word	0x08019513
 801949c:	08019513 	.word	0x08019513
 80194a0:	08019513 	.word	0x08019513
 80194a4:	08019513 	.word	0x08019513
 80194a8:	08019513 	.word	0x08019513
 80194ac:	08019513 	.word	0x08019513
 80194b0:	08019513 	.word	0x08019513
 80194b4:	08019513 	.word	0x08019513
 80194b8:	08019513 	.word	0x08019513
 80194bc:	08019513 	.word	0x08019513
 80194c0:	08019513 	.word	0x08019513
 80194c4:	08019513 	.word	0x08019513
 80194c8:	08019513 	.word	0x08019513
 80194cc:	08019513 	.word	0x08019513
 80194d0:	080194f5 	.word	0x080194f5
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80194d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194d6:	3302      	adds	r3, #2
 80194d8:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80194da:	69fb      	ldr	r3, [r7, #28]
 80194dc:	885b      	ldrh	r3, [r3, #2]
 80194de:	b29b      	uxth	r3, r3
 80194e0:	461a      	mov	r2, r3
 80194e2:	4b11      	ldr	r3, [pc, #68]	@ (8019528 <Custom_STM_Event_Handler+0xf8>)
 80194e4:	885b      	ldrh	r3, [r3, #2]
 80194e6:	3301      	adds	r3, #1
 80194e8:	429a      	cmp	r2, r3
 80194ea:	d114      	bne.n	8019516 <Custom_STM_Event_Handler+0xe6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80194ec:	2301      	movs	r3, #1
 80194ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80194f2:	e010      	b.n	8019516 <Custom_STM_Event_Handler+0xe6>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80194f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194f6:	3302      	adds	r3, #2
 80194f8:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80194fa:	2301      	movs	r3, #1
 80194fc:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80194fe:	6a3b      	ldr	r3, [r7, #32]
 8019500:	881b      	ldrh	r3, [r3, #0]
 8019502:	b29b      	uxth	r3, r3
 8019504:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8019506:	f107 0308 	add.w	r3, r7, #8
 801950a:	4618      	mov	r0, r3
 801950c:	f7ff ff61 	bl	80193d2 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8019510:	e002      	b.n	8019518 <Custom_STM_Event_Handler+0xe8>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8019512:	bf00      	nop
 8019514:	e002      	b.n	801951c <Custom_STM_Event_Handler+0xec>
          break;
 8019516:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8019518:	e000      	b.n	801951c <Custom_STM_Event_Handler+0xec>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 801951a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 801951c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8019520:	4618      	mov	r0, r3
 8019522:	3730      	adds	r7, #48	@ 0x30
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}
 8019528:	2000165c 	.word	0x2000165c

0801952c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b08c      	sub	sp, #48	@ 0x30
 8019530:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8019532:	2392      	movs	r3, #146	@ 0x92
 8019534:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8019536:	4834      	ldr	r0, [pc, #208]	@ (8019608 <SVCCTL_InitCustomSvc+0xdc>)
 8019538:	f7fd ff94 	bl	8017464 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 801953c:	2303      	movs	r3, #3
 801953e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 8019540:	238f      	movs	r3, #143	@ 0x8f
 8019542:	713b      	strb	r3, [r7, #4]
 8019544:	23e5      	movs	r3, #229	@ 0xe5
 8019546:	717b      	strb	r3, [r7, #5]
 8019548:	23b3      	movs	r3, #179	@ 0xb3
 801954a:	71bb      	strb	r3, [r7, #6]
 801954c:	23d5      	movs	r3, #213	@ 0xd5
 801954e:	71fb      	strb	r3, [r7, #7]
 8019550:	232e      	movs	r3, #46	@ 0x2e
 8019552:	723b      	strb	r3, [r7, #8]
 8019554:	237f      	movs	r3, #127	@ 0x7f
 8019556:	727b      	strb	r3, [r7, #9]
 8019558:	234a      	movs	r3, #74	@ 0x4a
 801955a:	72bb      	strb	r3, [r7, #10]
 801955c:	2398      	movs	r3, #152	@ 0x98
 801955e:	72fb      	strb	r3, [r7, #11]
 8019560:	232a      	movs	r3, #42	@ 0x2a
 8019562:	733b      	strb	r3, [r7, #12]
 8019564:	2348      	movs	r3, #72	@ 0x48
 8019566:	737b      	strb	r3, [r7, #13]
 8019568:	237a      	movs	r3, #122	@ 0x7a
 801956a:	73bb      	strb	r3, [r7, #14]
 801956c:	23cc      	movs	r3, #204	@ 0xcc
 801956e:	73fb      	strb	r3, [r7, #15]
 8019570:	2300      	movs	r3, #0
 8019572:	743b      	strb	r3, [r7, #16]
 8019574:	2300      	movs	r3, #0
 8019576:	747b      	strb	r3, [r7, #17]
 8019578:	2300      	movs	r3, #0
 801957a:	74bb      	strb	r3, [r7, #18]
 801957c:	2300      	movs	r3, #0
 801957e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8019580:	7dbb      	ldrb	r3, [r7, #22]
 8019582:	1d39      	adds	r1, r7, #4
 8019584:	4a21      	ldr	r2, [pc, #132]	@ (801960c <SVCCTL_InitCustomSvc+0xe0>)
 8019586:	9200      	str	r2, [sp, #0]
 8019588:	2201      	movs	r2, #1
 801958a:	2002      	movs	r0, #2
 801958c:	f7fd f9de 	bl	801694c <aci_gatt_add_service>
 8019590:	4603      	mov	r3, r0
 8019592:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 8019594:	2319      	movs	r3, #25
 8019596:	713b      	strb	r3, [r7, #4]
 8019598:	23ed      	movs	r3, #237	@ 0xed
 801959a:	717b      	strb	r3, [r7, #5]
 801959c:	2382      	movs	r3, #130	@ 0x82
 801959e:	71bb      	strb	r3, [r7, #6]
 80195a0:	23ae      	movs	r3, #174	@ 0xae
 80195a2:	71fb      	strb	r3, [r7, #7]
 80195a4:	23ed      	movs	r3, #237	@ 0xed
 80195a6:	723b      	strb	r3, [r7, #8]
 80195a8:	2321      	movs	r3, #33	@ 0x21
 80195aa:	727b      	strb	r3, [r7, #9]
 80195ac:	234c      	movs	r3, #76	@ 0x4c
 80195ae:	72bb      	strb	r3, [r7, #10]
 80195b0:	239d      	movs	r3, #157	@ 0x9d
 80195b2:	72fb      	strb	r3, [r7, #11]
 80195b4:	2341      	movs	r3, #65	@ 0x41
 80195b6:	733b      	strb	r3, [r7, #12]
 80195b8:	2345      	movs	r3, #69	@ 0x45
 80195ba:	737b      	strb	r3, [r7, #13]
 80195bc:	2322      	movs	r3, #34	@ 0x22
 80195be:	73bb      	strb	r3, [r7, #14]
 80195c0:	238e      	movs	r3, #142	@ 0x8e
 80195c2:	73fb      	strb	r3, [r7, #15]
 80195c4:	2300      	movs	r3, #0
 80195c6:	743b      	strb	r3, [r7, #16]
 80195c8:	2300      	movs	r3, #0
 80195ca:	747b      	strb	r3, [r7, #17]
 80195cc:	2300      	movs	r3, #0
 80195ce:	74bb      	strb	r3, [r7, #18]
 80195d0:	2300      	movs	r3, #0
 80195d2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 80195d4:	4b0d      	ldr	r3, [pc, #52]	@ (801960c <SVCCTL_InitCustomSvc+0xe0>)
 80195d6:	8818      	ldrh	r0, [r3, #0]
 80195d8:	4b0d      	ldr	r3, [pc, #52]	@ (8019610 <SVCCTL_InitCustomSvc+0xe4>)
 80195da:	881b      	ldrh	r3, [r3, #0]
 80195dc:	1d3a      	adds	r2, r7, #4
 80195de:	490d      	ldr	r1, [pc, #52]	@ (8019614 <SVCCTL_InitCustomSvc+0xe8>)
 80195e0:	9105      	str	r1, [sp, #20]
 80195e2:	2100      	movs	r1, #0
 80195e4:	9104      	str	r1, [sp, #16]
 80195e6:	2110      	movs	r1, #16
 80195e8:	9103      	str	r1, [sp, #12]
 80195ea:	2101      	movs	r1, #1
 80195ec:	9102      	str	r1, [sp, #8]
 80195ee:	2100      	movs	r1, #0
 80195f0:	9101      	str	r1, [sp, #4]
 80195f2:	2108      	movs	r1, #8
 80195f4:	9100      	str	r1, [sp, #0]
 80195f6:	2102      	movs	r1, #2
 80195f8:	f7fd fa7e 	bl	8016af8 <aci_gatt_add_char>
 80195fc:	4603      	mov	r3, r0
 80195fe:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8019600:	bf00      	nop
}
 8019602:	3718      	adds	r7, #24
 8019604:	46bd      	mov	sp, r7
 8019606:	bd80      	pop	{r7, pc}
 8019608:	08019431 	.word	0x08019431
 801960c:	2000165c 	.word	0x2000165c
 8019610:	200000d2 	.word	0x200000d2
 8019614:	2000165e 	.word	0x2000165e

08019618 <LL_PWR_EnableBootC2>:
{
 8019618:	b480      	push	{r7}
 801961a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 801961c:	4b05      	ldr	r3, [pc, #20]	@ (8019634 <LL_PWR_EnableBootC2+0x1c>)
 801961e:	68db      	ldr	r3, [r3, #12]
 8019620:	4a04      	ldr	r2, [pc, #16]	@ (8019634 <LL_PWR_EnableBootC2+0x1c>)
 8019622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8019626:	60d3      	str	r3, [r2, #12]
}
 8019628:	bf00      	nop
 801962a:	46bd      	mov	sp, r7
 801962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019630:	4770      	bx	lr
 8019632:	bf00      	nop
 8019634:	58000400 	.word	0x58000400

08019638 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8019638:	b480      	push	{r7}
 801963a:	b083      	sub	sp, #12
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8019640:	4b06      	ldr	r3, [pc, #24]	@ (801965c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019642:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8019646:	4905      	ldr	r1, [pc, #20]	@ (801965c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	4313      	orrs	r3, r2
 801964c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8019650:	bf00      	nop
 8019652:	370c      	adds	r7, #12
 8019654:	46bd      	mov	sp, r7
 8019656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965a:	4770      	bx	lr
 801965c:	58000800 	.word	0x58000800

08019660 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8019660:	b480      	push	{r7}
 8019662:	b083      	sub	sp, #12
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8019668:	4b05      	ldr	r3, [pc, #20]	@ (8019680 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801966a:	6a1a      	ldr	r2, [r3, #32]
 801966c:	4904      	ldr	r1, [pc, #16]	@ (8019680 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	4313      	orrs	r3, r2
 8019672:	620b      	str	r3, [r1, #32]
}
 8019674:	bf00      	nop
 8019676:	370c      	adds	r7, #12
 8019678:	46bd      	mov	sp, r7
 801967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801967e:	4770      	bx	lr
 8019680:	58000800 	.word	0x58000800

08019684 <LL_AHB3_GRP1_EnableClock>:
{
 8019684:	b480      	push	{r7}
 8019686:	b085      	sub	sp, #20
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 801968c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019690:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019692:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	4313      	orrs	r3, r2
 801969a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 801969c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80196a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	4013      	ands	r3, r2
 80196a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80196a8:	68fb      	ldr	r3, [r7, #12]
}
 80196aa:	bf00      	nop
 80196ac:	3714      	adds	r7, #20
 80196ae:	46bd      	mov	sp, r7
 80196b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b4:	4770      	bx	lr

080196b6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80196b6:	b480      	push	{r7}
 80196b8:	b085      	sub	sp, #20
 80196ba:	af00      	add	r7, sp, #0
 80196bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80196be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80196c2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80196c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	4313      	orrs	r3, r2
 80196ce:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80196d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80196d6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	4013      	ands	r3, r2
 80196de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80196e0:	68fb      	ldr	r3, [r7, #12]
}
 80196e2:	bf00      	nop
 80196e4:	3714      	adds	r7, #20
 80196e6:	46bd      	mov	sp, r7
 80196e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ec:	4770      	bx	lr

080196ee <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80196ee:	b480      	push	{r7}
 80196f0:	b083      	sub	sp, #12
 80196f2:	af00      	add	r7, sp, #0
 80196f4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	601a      	str	r2, [r3, #0]
}
 8019702:	bf00      	nop
 8019704:	370c      	adds	r7, #12
 8019706:	46bd      	mov	sp, r7
 8019708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801970c:	4770      	bx	lr

0801970e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801970e:	b480      	push	{r7}
 8019710:	b083      	sub	sp, #12
 8019712:	af00      	add	r7, sp, #0
 8019714:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	f043 0201 	orr.w	r2, r3, #1
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	601a      	str	r2, [r3, #0]
}
 8019722:	bf00      	nop
 8019724:	370c      	adds	r7, #12
 8019726:	46bd      	mov	sp, r7
 8019728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801972c:	4770      	bx	lr

0801972e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801972e:	b480      	push	{r7}
 8019730:	b083      	sub	sp, #12
 8019732:	af00      	add	r7, sp, #0
 8019734:	6078      	str	r0, [r7, #4]
 8019736:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	685a      	ldr	r2, [r3, #4]
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	041b      	lsls	r3, r3, #16
 8019740:	43db      	mvns	r3, r3
 8019742:	401a      	ands	r2, r3
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	605a      	str	r2, [r3, #4]
}
 8019748:	bf00      	nop
 801974a:	370c      	adds	r7, #12
 801974c:	46bd      	mov	sp, r7
 801974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019752:	4770      	bx	lr

08019754 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019754:	b480      	push	{r7}
 8019756:	b083      	sub	sp, #12
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
 801975c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	685a      	ldr	r2, [r3, #4]
 8019762:	683b      	ldr	r3, [r7, #0]
 8019764:	041b      	lsls	r3, r3, #16
 8019766:	431a      	orrs	r2, r3
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	605a      	str	r2, [r3, #4]
}
 801976c:	bf00      	nop
 801976e:	370c      	adds	r7, #12
 8019770:	46bd      	mov	sp, r7
 8019772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019776:	4770      	bx	lr

08019778 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8019778:	b480      	push	{r7}
 801977a:	b083      	sub	sp, #12
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]
 8019780:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	685a      	ldr	r2, [r3, #4]
 8019786:	683b      	ldr	r3, [r7, #0]
 8019788:	43db      	mvns	r3, r3
 801978a:	401a      	ands	r2, r3
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	605a      	str	r2, [r3, #4]
}
 8019790:	bf00      	nop
 8019792:	370c      	adds	r7, #12
 8019794:	46bd      	mov	sp, r7
 8019796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979a:	4770      	bx	lr

0801979c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801979c:	b480      	push	{r7}
 801979e:	b083      	sub	sp, #12
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	683a      	ldr	r2, [r7, #0]
 80197aa:	609a      	str	r2, [r3, #8]
}
 80197ac:	bf00      	nop
 80197ae:	370c      	adds	r7, #12
 80197b0:	46bd      	mov	sp, r7
 80197b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b6:	4770      	bx	lr

080197b8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80197b8:	b480      	push	{r7}
 80197ba:	b083      	sub	sp, #12
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
 80197c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80197c2:	683b      	ldr	r3, [r7, #0]
 80197c4:	041a      	lsls	r2, r3, #16
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	609a      	str	r2, [r3, #8]
}
 80197ca:	bf00      	nop
 80197cc:	370c      	adds	r7, #12
 80197ce:	46bd      	mov	sp, r7
 80197d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197d4:	4770      	bx	lr

080197d6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80197d6:	b480      	push	{r7}
 80197d8:	b083      	sub	sp, #12
 80197da:	af00      	add	r7, sp, #0
 80197dc:	6078      	str	r0, [r7, #4]
 80197de:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	68da      	ldr	r2, [r3, #12]
 80197e4:	683b      	ldr	r3, [r7, #0]
 80197e6:	4013      	ands	r3, r2
 80197e8:	683a      	ldr	r2, [r7, #0]
 80197ea:	429a      	cmp	r2, r3
 80197ec:	d101      	bne.n	80197f2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80197ee:	2301      	movs	r3, #1
 80197f0:	e000      	b.n	80197f4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80197f2:	2300      	movs	r3, #0
}
 80197f4:	4618      	mov	r0, r3
 80197f6:	370c      	adds	r7, #12
 80197f8:	46bd      	mov	sp, r7
 80197fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197fe:	4770      	bx	lr

08019800 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8019800:	b480      	push	{r7}
 8019802:	b083      	sub	sp, #12
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
 8019808:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	69da      	ldr	r2, [r3, #28]
 801980e:	683b      	ldr	r3, [r7, #0]
 8019810:	4013      	ands	r3, r2
 8019812:	683a      	ldr	r2, [r7, #0]
 8019814:	429a      	cmp	r2, r3
 8019816:	d101      	bne.n	801981c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8019818:	2301      	movs	r3, #1
 801981a:	e000      	b.n	801981e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801981c:	2300      	movs	r3, #0
}
 801981e:	4618      	mov	r0, r3
 8019820:	370c      	adds	r7, #12
 8019822:	46bd      	mov	sp, r7
 8019824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019828:	4770      	bx	lr
	...

0801982c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801982c:	b580      	push	{r7, lr}
 801982e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8019830:	2102      	movs	r1, #2
 8019832:	4818      	ldr	r0, [pc, #96]	@ (8019894 <HW_IPCC_Rx_Handler+0x68>)
 8019834:	f7ff ffe4 	bl	8019800 <LL_C2_IPCC_IsActiveFlag_CHx>
 8019838:	4603      	mov	r3, r0
 801983a:	2b00      	cmp	r3, #0
 801983c:	d008      	beq.n	8019850 <HW_IPCC_Rx_Handler+0x24>
 801983e:	4b15      	ldr	r3, [pc, #84]	@ (8019894 <HW_IPCC_Rx_Handler+0x68>)
 8019840:	685b      	ldr	r3, [r3, #4]
 8019842:	f003 0302 	and.w	r3, r3, #2
 8019846:	2b00      	cmp	r3, #0
 8019848:	d102      	bne.n	8019850 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801984a:	f000 f8d5 	bl	80199f8 <HW_IPCC_SYS_EvtHandler>
 801984e:	e01e      	b.n	801988e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8019850:	2101      	movs	r1, #1
 8019852:	4810      	ldr	r0, [pc, #64]	@ (8019894 <HW_IPCC_Rx_Handler+0x68>)
 8019854:	f7ff ffd4 	bl	8019800 <LL_C2_IPCC_IsActiveFlag_CHx>
 8019858:	4603      	mov	r3, r0
 801985a:	2b00      	cmp	r3, #0
 801985c:	d008      	beq.n	8019870 <HW_IPCC_Rx_Handler+0x44>
 801985e:	4b0d      	ldr	r3, [pc, #52]	@ (8019894 <HW_IPCC_Rx_Handler+0x68>)
 8019860:	685b      	ldr	r3, [r3, #4]
 8019862:	f003 0301 	and.w	r3, r3, #1
 8019866:	2b00      	cmp	r3, #0
 8019868:	d102      	bne.n	8019870 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801986a:	f000 f889 	bl	8019980 <HW_IPCC_BLE_EvtHandler>
 801986e:	e00e      	b.n	801988e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8019870:	2108      	movs	r1, #8
 8019872:	4808      	ldr	r0, [pc, #32]	@ (8019894 <HW_IPCC_Rx_Handler+0x68>)
 8019874:	f7ff ffc4 	bl	8019800 <LL_C2_IPCC_IsActiveFlag_CHx>
 8019878:	4603      	mov	r3, r0
 801987a:	2b00      	cmp	r3, #0
 801987c:	d008      	beq.n	8019890 <HW_IPCC_Rx_Handler+0x64>
 801987e:	4b05      	ldr	r3, [pc, #20]	@ (8019894 <HW_IPCC_Rx_Handler+0x68>)
 8019880:	685b      	ldr	r3, [r3, #4]
 8019882:	f003 0308 	and.w	r3, r3, #8
 8019886:	2b00      	cmp	r3, #0
 8019888:	d102      	bne.n	8019890 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801988a:	f000 f901 	bl	8019a90 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801988e:	bf00      	nop
 8019890:	bf00      	nop
}
 8019892:	bd80      	pop	{r7, pc}
 8019894:	58000c00 	.word	0x58000c00

08019898 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8019898:	b580      	push	{r7, lr}
 801989a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801989c:	2102      	movs	r1, #2
 801989e:	4818      	ldr	r0, [pc, #96]	@ (8019900 <HW_IPCC_Tx_Handler+0x68>)
 80198a0:	f7ff ff99 	bl	80197d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80198a4:	4603      	mov	r3, r0
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d108      	bne.n	80198bc <HW_IPCC_Tx_Handler+0x24>
 80198aa:	4b15      	ldr	r3, [pc, #84]	@ (8019900 <HW_IPCC_Tx_Handler+0x68>)
 80198ac:	685b      	ldr	r3, [r3, #4]
 80198ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d102      	bne.n	80198bc <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80198b6:	f000 f893 	bl	80199e0 <HW_IPCC_SYS_CmdEvtHandler>
 80198ba:	e01e      	b.n	80198fa <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80198bc:	2108      	movs	r1, #8
 80198be:	4810      	ldr	r0, [pc, #64]	@ (8019900 <HW_IPCC_Tx_Handler+0x68>)
 80198c0:	f7ff ff89 	bl	80197d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80198c4:	4603      	mov	r3, r0
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d108      	bne.n	80198dc <HW_IPCC_Tx_Handler+0x44>
 80198ca:	4b0d      	ldr	r3, [pc, #52]	@ (8019900 <HW_IPCC_Tx_Handler+0x68>)
 80198cc:	685b      	ldr	r3, [r3, #4]
 80198ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d102      	bne.n	80198dc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80198d6:	f000 f8bd 	bl	8019a54 <HW_IPCC_MM_FreeBufHandler>
 80198da:	e00e      	b.n	80198fa <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80198dc:	2120      	movs	r1, #32
 80198de:	4808      	ldr	r0, [pc, #32]	@ (8019900 <HW_IPCC_Tx_Handler+0x68>)
 80198e0:	f7ff ff79 	bl	80197d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80198e4:	4603      	mov	r3, r0
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d108      	bne.n	80198fc <HW_IPCC_Tx_Handler+0x64>
 80198ea:	4b05      	ldr	r3, [pc, #20]	@ (8019900 <HW_IPCC_Tx_Handler+0x68>)
 80198ec:	685b      	ldr	r3, [r3, #4]
 80198ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d102      	bne.n	80198fc <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80198f6:	f000 f84f 	bl	8019998 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80198fa:	bf00      	nop
 80198fc:	bf00      	nop
}
 80198fe:	bd80      	pop	{r7, pc}
 8019900:	58000c00 	.word	0x58000c00

08019904 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8019904:	b580      	push	{r7, lr}
 8019906:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8019908:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801990c:	f7ff fed3 	bl	80196b6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8019910:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8019914:	f7ff fea4 	bl	8019660 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8019918:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801991c:	f7ff fe8c 	bl	8019638 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8019920:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8019922:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8019924:	f7ff fe78 	bl	8019618 <LL_PWR_EnableBootC2>

  return;
 8019928:	bf00      	nop
}
 801992a:	bd80      	pop	{r7, pc}

0801992c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801992c:	b580      	push	{r7, lr}
 801992e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8019930:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8019934:	f7ff fea6 	bl	8019684 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8019938:	4806      	ldr	r0, [pc, #24]	@ (8019954 <HW_IPCC_Init+0x28>)
 801993a:	f7ff fee8 	bl	801970e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801993e:	4805      	ldr	r0, [pc, #20]	@ (8019954 <HW_IPCC_Init+0x28>)
 8019940:	f7ff fed5 	bl	80196ee <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8019944:	202c      	movs	r0, #44	@ 0x2c
 8019946:	f7ef feb2 	bl	80096ae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801994a:	202d      	movs	r0, #45	@ 0x2d
 801994c:	f7ef feaf 	bl	80096ae <HAL_NVIC_EnableIRQ>

  return;
 8019950:	bf00      	nop
}
 8019952:	bd80      	pop	{r7, pc}
 8019954:	58000c00 	.word	0x58000c00

08019958 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8019958:	b580      	push	{r7, lr}
 801995a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801995c:	2101      	movs	r1, #1
 801995e:	4802      	ldr	r0, [pc, #8]	@ (8019968 <HW_IPCC_BLE_Init+0x10>)
 8019960:	f7ff ff0a 	bl	8019778 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019964:	bf00      	nop
}
 8019966:	bd80      	pop	{r7, pc}
 8019968:	58000c00 	.word	0x58000c00

0801996c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801996c:	b580      	push	{r7, lr}
 801996e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8019970:	2101      	movs	r1, #1
 8019972:	4802      	ldr	r0, [pc, #8]	@ (801997c <HW_IPCC_BLE_SendCmd+0x10>)
 8019974:	f7ff ff20 	bl	80197b8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8019978:	bf00      	nop
}
 801997a:	bd80      	pop	{r7, pc}
 801997c:	58000c00 	.word	0x58000c00

08019980 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8019980:	b580      	push	{r7, lr}
 8019982:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8019984:	f7fe fa32 	bl	8017dec <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8019988:	2101      	movs	r1, #1
 801998a:	4802      	ldr	r0, [pc, #8]	@ (8019994 <HW_IPCC_BLE_EvtHandler+0x14>)
 801998c:	f7ff ff06 	bl	801979c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019990:	bf00      	nop
}
 8019992:	bd80      	pop	{r7, pc}
 8019994:	58000c00 	.word	0x58000c00

08019998 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8019998:	b580      	push	{r7, lr}
 801999a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801999c:	2120      	movs	r1, #32
 801999e:	4803      	ldr	r0, [pc, #12]	@ (80199ac <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80199a0:	f7ff fed8 	bl	8019754 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80199a4:	f7fe fa52 	bl	8017e4c <HW_IPCC_BLE_AclDataAckNot>

  return;
 80199a8:	bf00      	nop
}
 80199aa:	bd80      	pop	{r7, pc}
 80199ac:	58000c00 	.word	0x58000c00

080199b0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80199b4:	2102      	movs	r1, #2
 80199b6:	4802      	ldr	r0, [pc, #8]	@ (80199c0 <HW_IPCC_SYS_Init+0x10>)
 80199b8:	f7ff fede 	bl	8019778 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80199bc:	bf00      	nop
}
 80199be:	bd80      	pop	{r7, pc}
 80199c0:	58000c00 	.word	0x58000c00

080199c4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80199c4:	b580      	push	{r7, lr}
 80199c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80199c8:	2102      	movs	r1, #2
 80199ca:	4804      	ldr	r0, [pc, #16]	@ (80199dc <HW_IPCC_SYS_SendCmd+0x18>)
 80199cc:	f7ff fef4 	bl	80197b8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80199d0:	2102      	movs	r1, #2
 80199d2:	4802      	ldr	r0, [pc, #8]	@ (80199dc <HW_IPCC_SYS_SendCmd+0x18>)
 80199d4:	f7ff feab 	bl	801972e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80199d8:	bf00      	nop
}
 80199da:	bd80      	pop	{r7, pc}
 80199dc:	58000c00 	.word	0x58000c00

080199e0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80199e4:	2102      	movs	r1, #2
 80199e6:	4803      	ldr	r0, [pc, #12]	@ (80199f4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80199e8:	f7ff feb4 	bl	8019754 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80199ec:	f7fe fa7e 	bl	8017eec <HW_IPCC_SYS_CmdEvtNot>

  return;
 80199f0:	bf00      	nop
}
 80199f2:	bd80      	pop	{r7, pc}
 80199f4:	58000c00 	.word	0x58000c00

080199f8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80199fc:	f7fe fa8c 	bl	8017f18 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8019a00:	2102      	movs	r1, #2
 8019a02:	4802      	ldr	r0, [pc, #8]	@ (8019a0c <HW_IPCC_SYS_EvtHandler+0x14>)
 8019a04:	f7ff feca 	bl	801979c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019a08:	bf00      	nop
}
 8019a0a:	bd80      	pop	{r7, pc}
 8019a0c:	58000c00 	.word	0x58000c00

08019a10 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8019a10:	b580      	push	{r7, lr}
 8019a12:	b082      	sub	sp, #8
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8019a18:	2108      	movs	r1, #8
 8019a1a:	480c      	ldr	r0, [pc, #48]	@ (8019a4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019a1c:	f7ff fedb 	bl	80197d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019a20:	4603      	mov	r3, r0
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d007      	beq.n	8019a36 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8019a26:	4a0a      	ldr	r2, [pc, #40]	@ (8019a50 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019a2c:	2108      	movs	r1, #8
 8019a2e:	4807      	ldr	r0, [pc, #28]	@ (8019a4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019a30:	f7ff fe7d 	bl	801972e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8019a34:	e006      	b.n	8019a44 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019a3a:	2108      	movs	r1, #8
 8019a3c:	4803      	ldr	r0, [pc, #12]	@ (8019a4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019a3e:	f7ff febb 	bl	80197b8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8019a42:	bf00      	nop
}
 8019a44:	3708      	adds	r7, #8
 8019a46:	46bd      	mov	sp, r7
 8019a48:	bd80      	pop	{r7, pc}
 8019a4a:	bf00      	nop
 8019a4c:	58000c00 	.word	0x58000c00
 8019a50:	20001660 	.word	0x20001660

08019a54 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8019a54:	b580      	push	{r7, lr}
 8019a56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019a58:	2108      	movs	r1, #8
 8019a5a:	4806      	ldr	r0, [pc, #24]	@ (8019a74 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8019a5c:	f7ff fe7a 	bl	8019754 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8019a60:	4b05      	ldr	r3, [pc, #20]	@ (8019a78 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019a66:	2108      	movs	r1, #8
 8019a68:	4802      	ldr	r0, [pc, #8]	@ (8019a74 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8019a6a:	f7ff fea5 	bl	80197b8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8019a6e:	bf00      	nop
}
 8019a70:	bd80      	pop	{r7, pc}
 8019a72:	bf00      	nop
 8019a74:	58000c00 	.word	0x58000c00
 8019a78:	20001660 	.word	0x20001660

08019a7c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8019a80:	2108      	movs	r1, #8
 8019a82:	4802      	ldr	r0, [pc, #8]	@ (8019a8c <HW_IPCC_TRACES_Init+0x10>)
 8019a84:	f7ff fe78 	bl	8019778 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019a88:	bf00      	nop
}
 8019a8a:	bd80      	pop	{r7, pc}
 8019a8c:	58000c00 	.word	0x58000c00

08019a90 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8019a94:	f7fe fae8 	bl	8018068 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8019a98:	2108      	movs	r1, #8
 8019a9a:	4802      	ldr	r0, [pc, #8]	@ (8019aa4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8019a9c:	f7ff fe7e 	bl	801979c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019aa0:	bf00      	nop
}
 8019aa2:	bd80      	pop	{r7, pc}
 8019aa4:	58000c00 	.word	0x58000c00

08019aa8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8019aac:	2200      	movs	r2, #0
 8019aae:	4912      	ldr	r1, [pc, #72]	@ (8019af8 <MX_USB_Device_Init+0x50>)
 8019ab0:	4812      	ldr	r0, [pc, #72]	@ (8019afc <MX_USB_Device_Init+0x54>)
 8019ab2:	f7fb f845 	bl	8014b40 <USBD_Init>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d001      	beq.n	8019ac0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8019abc:	f7e9 face 	bl	800305c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8019ac0:	490f      	ldr	r1, [pc, #60]	@ (8019b00 <MX_USB_Device_Init+0x58>)
 8019ac2:	480e      	ldr	r0, [pc, #56]	@ (8019afc <MX_USB_Device_Init+0x54>)
 8019ac4:	f7fb f86c 	bl	8014ba0 <USBD_RegisterClass>
 8019ac8:	4603      	mov	r3, r0
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d001      	beq.n	8019ad2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8019ace:	f7e9 fac5 	bl	800305c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8019ad2:	490c      	ldr	r1, [pc, #48]	@ (8019b04 <MX_USB_Device_Init+0x5c>)
 8019ad4:	4809      	ldr	r0, [pc, #36]	@ (8019afc <MX_USB_Device_Init+0x54>)
 8019ad6:	f7fa ff63 	bl	80149a0 <USBD_CDC_RegisterInterface>
 8019ada:	4603      	mov	r3, r0
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d001      	beq.n	8019ae4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8019ae0:	f7e9 fabc 	bl	800305c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8019ae4:	4805      	ldr	r0, [pc, #20]	@ (8019afc <MX_USB_Device_Init+0x54>)
 8019ae6:	f7fb f891 	bl	8014c0c <USBD_Start>
 8019aea:	4603      	mov	r3, r0
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d001      	beq.n	8019af4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8019af0:	f7e9 fab4 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8019af4:	bf00      	nop
 8019af6:	bd80      	pop	{r7, pc}
 8019af8:	200000e8 	.word	0x200000e8
 8019afc:	20001664 	.word	0x20001664
 8019b00:	20000044 	.word	0x20000044
 8019b04:	200000d4 	.word	0x200000d4

08019b08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	4905      	ldr	r1, [pc, #20]	@ (8019b24 <CDC_Init_FS+0x1c>)
 8019b10:	4805      	ldr	r0, [pc, #20]	@ (8019b28 <CDC_Init_FS+0x20>)
 8019b12:	f7fa ff5f 	bl	80149d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019b16:	4905      	ldr	r1, [pc, #20]	@ (8019b2c <CDC_Init_FS+0x24>)
 8019b18:	4803      	ldr	r0, [pc, #12]	@ (8019b28 <CDC_Init_FS+0x20>)
 8019b1a:	f7fa ff7d 	bl	8014a18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019b1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019b20:	4618      	mov	r0, r3
 8019b22:	bd80      	pop	{r7, pc}
 8019b24:	20002140 	.word	0x20002140
 8019b28:	20001664 	.word	0x20001664
 8019b2c:	20001940 	.word	0x20001940

08019b30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019b30:	b480      	push	{r7}
 8019b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019b34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019b36:	4618      	mov	r0, r3
 8019b38:	46bd      	mov	sp, r7
 8019b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b3e:	4770      	bx	lr

08019b40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019b40:	b480      	push	{r7}
 8019b42:	b083      	sub	sp, #12
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	4603      	mov	r3, r0
 8019b48:	6039      	str	r1, [r7, #0]
 8019b4a:	71fb      	strb	r3, [r7, #7]
 8019b4c:	4613      	mov	r3, r2
 8019b4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019b50:	79fb      	ldrb	r3, [r7, #7]
 8019b52:	2b23      	cmp	r3, #35	@ 0x23
 8019b54:	d84a      	bhi.n	8019bec <CDC_Control_FS+0xac>
 8019b56:	a201      	add	r2, pc, #4	@ (adr r2, 8019b5c <CDC_Control_FS+0x1c>)
 8019b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b5c:	08019bed 	.word	0x08019bed
 8019b60:	08019bed 	.word	0x08019bed
 8019b64:	08019bed 	.word	0x08019bed
 8019b68:	08019bed 	.word	0x08019bed
 8019b6c:	08019bed 	.word	0x08019bed
 8019b70:	08019bed 	.word	0x08019bed
 8019b74:	08019bed 	.word	0x08019bed
 8019b78:	08019bed 	.word	0x08019bed
 8019b7c:	08019bed 	.word	0x08019bed
 8019b80:	08019bed 	.word	0x08019bed
 8019b84:	08019bed 	.word	0x08019bed
 8019b88:	08019bed 	.word	0x08019bed
 8019b8c:	08019bed 	.word	0x08019bed
 8019b90:	08019bed 	.word	0x08019bed
 8019b94:	08019bed 	.word	0x08019bed
 8019b98:	08019bed 	.word	0x08019bed
 8019b9c:	08019bed 	.word	0x08019bed
 8019ba0:	08019bed 	.word	0x08019bed
 8019ba4:	08019bed 	.word	0x08019bed
 8019ba8:	08019bed 	.word	0x08019bed
 8019bac:	08019bed 	.word	0x08019bed
 8019bb0:	08019bed 	.word	0x08019bed
 8019bb4:	08019bed 	.word	0x08019bed
 8019bb8:	08019bed 	.word	0x08019bed
 8019bbc:	08019bed 	.word	0x08019bed
 8019bc0:	08019bed 	.word	0x08019bed
 8019bc4:	08019bed 	.word	0x08019bed
 8019bc8:	08019bed 	.word	0x08019bed
 8019bcc:	08019bed 	.word	0x08019bed
 8019bd0:	08019bed 	.word	0x08019bed
 8019bd4:	08019bed 	.word	0x08019bed
 8019bd8:	08019bed 	.word	0x08019bed
 8019bdc:	08019bed 	.word	0x08019bed
 8019be0:	08019bed 	.word	0x08019bed
 8019be4:	08019bed 	.word	0x08019bed
 8019be8:	08019bed 	.word	0x08019bed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019bec:	bf00      	nop
  }

  return (USBD_OK);
 8019bee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	370c      	adds	r7, #12
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfa:	4770      	bx	lr

08019bfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b084      	sub	sp, #16
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
 8019c04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019c06:	6879      	ldr	r1, [r7, #4]
 8019c08:	480f      	ldr	r0, [pc, #60]	@ (8019c48 <CDC_Receive_FS+0x4c>)
 8019c0a:	f7fa ff05 	bl	8014a18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019c0e:	480e      	ldr	r0, [pc, #56]	@ (8019c48 <CDC_Receive_FS+0x4c>)
 8019c10:	f7fa ff60 	bl	8014ad4 <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8019c14:	2240      	movs	r2, #64	@ 0x40
 8019c16:	2100      	movs	r1, #0
 8019c18:	480c      	ldr	r0, [pc, #48]	@ (8019c4c <CDC_Receive_FS+0x50>)
 8019c1a:	f002 fe6a 	bl	801c8f2 <memset>
  uint8_t len = (uint8_t)*Len;
 8019c1e:	683b      	ldr	r3, [r7, #0]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8019c24:	7bfb      	ldrb	r3, [r7, #15]
 8019c26:	461a      	mov	r2, r3
 8019c28:	6879      	ldr	r1, [r7, #4]
 8019c2a:	4808      	ldr	r0, [pc, #32]	@ (8019c4c <CDC_Receive_FS+0x50>)
 8019c2c:	f002 ff7d 	bl	801cb2a <memcpy>
  memset(Buf, '\0', len);
 8019c30:	7bfb      	ldrb	r3, [r7, #15]
 8019c32:	461a      	mov	r2, r3
 8019c34:	2100      	movs	r1, #0
 8019c36:	6878      	ldr	r0, [r7, #4]
 8019c38:	f002 fe5b 	bl	801c8f2 <memset>
  return (USBD_OK);
 8019c3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019c3e:	4618      	mov	r0, r3
 8019c40:	3710      	adds	r7, #16
 8019c42:	46bd      	mov	sp, r7
 8019c44:	bd80      	pop	{r7, pc}
 8019c46:	bf00      	nop
 8019c48:	20001664 	.word	0x20001664
 8019c4c:	20000c0c 	.word	0x20000c0c

08019c50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b084      	sub	sp, #16
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
 8019c58:	460b      	mov	r3, r1
 8019c5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8019c60:	4b0d      	ldr	r3, [pc, #52]	@ (8019c98 <CDC_Transmit_FS+0x48>)
 8019c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019c66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019c68:	68bb      	ldr	r3, [r7, #8]
 8019c6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d001      	beq.n	8019c76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8019c72:	2301      	movs	r3, #1
 8019c74:	e00b      	b.n	8019c8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019c76:	887b      	ldrh	r3, [r7, #2]
 8019c78:	461a      	mov	r2, r3
 8019c7a:	6879      	ldr	r1, [r7, #4]
 8019c7c:	4806      	ldr	r0, [pc, #24]	@ (8019c98 <CDC_Transmit_FS+0x48>)
 8019c7e:	f7fa fea9 	bl	80149d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019c82:	4805      	ldr	r0, [pc, #20]	@ (8019c98 <CDC_Transmit_FS+0x48>)
 8019c84:	f7fa fee6 	bl	8014a54 <USBD_CDC_TransmitPacket>
 8019c88:	4603      	mov	r3, r0
 8019c8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c8e:	4618      	mov	r0, r3
 8019c90:	3710      	adds	r7, #16
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}
 8019c96:	bf00      	nop
 8019c98:	20001664 	.word	0x20001664

08019c9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019c9c:	b480      	push	{r7}
 8019c9e:	b087      	sub	sp, #28
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	60f8      	str	r0, [r7, #12]
 8019ca4:	60b9      	str	r1, [r7, #8]
 8019ca6:	4613      	mov	r3, r2
 8019ca8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019caa:	2300      	movs	r3, #0
 8019cac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	371c      	adds	r7, #28
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cbc:	4770      	bx	lr
	...

08019cc0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019cc0:	b480      	push	{r7}
 8019cc2:	b083      	sub	sp, #12
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	6039      	str	r1, [r7, #0]
 8019cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8019ccc:	683b      	ldr	r3, [r7, #0]
 8019cce:	2212      	movs	r2, #18
 8019cd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8019cd2:	4b03      	ldr	r3, [pc, #12]	@ (8019ce0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	370c      	adds	r7, #12
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cde:	4770      	bx	lr
 8019ce0:	20000108 	.word	0x20000108

08019ce4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ce4:	b480      	push	{r7}
 8019ce6:	b083      	sub	sp, #12
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	4603      	mov	r3, r0
 8019cec:	6039      	str	r1, [r7, #0]
 8019cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019cf0:	683b      	ldr	r3, [r7, #0]
 8019cf2:	2204      	movs	r2, #4
 8019cf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019cf6:	4b03      	ldr	r3, [pc, #12]	@ (8019d04 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	370c      	adds	r7, #12
 8019cfc:	46bd      	mov	sp, r7
 8019cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d02:	4770      	bx	lr
 8019d04:	2000011c 	.word	0x2000011c

08019d08 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d08:	b580      	push	{r7, lr}
 8019d0a:	b082      	sub	sp, #8
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	4603      	mov	r3, r0
 8019d10:	6039      	str	r1, [r7, #0]
 8019d12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019d14:	79fb      	ldrb	r3, [r7, #7]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d105      	bne.n	8019d26 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8019d1a:	683a      	ldr	r2, [r7, #0]
 8019d1c:	4907      	ldr	r1, [pc, #28]	@ (8019d3c <USBD_CDC_ProductStrDescriptor+0x34>)
 8019d1e:	4808      	ldr	r0, [pc, #32]	@ (8019d40 <USBD_CDC_ProductStrDescriptor+0x38>)
 8019d20:	f7fc f8bc 	bl	8015e9c <USBD_GetString>
 8019d24:	e004      	b.n	8019d30 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8019d26:	683a      	ldr	r2, [r7, #0]
 8019d28:	4904      	ldr	r1, [pc, #16]	@ (8019d3c <USBD_CDC_ProductStrDescriptor+0x34>)
 8019d2a:	4805      	ldr	r0, [pc, #20]	@ (8019d40 <USBD_CDC_ProductStrDescriptor+0x38>)
 8019d2c:	f7fc f8b6 	bl	8015e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019d30:	4b02      	ldr	r3, [pc, #8]	@ (8019d3c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8019d32:	4618      	mov	r0, r3
 8019d34:	3708      	adds	r7, #8
 8019d36:	46bd      	mov	sp, r7
 8019d38:	bd80      	pop	{r7, pc}
 8019d3a:	bf00      	nop
 8019d3c:	20002940 	.word	0x20002940
 8019d40:	08021438 	.word	0x08021438

08019d44 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b082      	sub	sp, #8
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	4603      	mov	r3, r0
 8019d4c:	6039      	str	r1, [r7, #0]
 8019d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019d50:	683a      	ldr	r2, [r7, #0]
 8019d52:	4904      	ldr	r1, [pc, #16]	@ (8019d64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8019d54:	4804      	ldr	r0, [pc, #16]	@ (8019d68 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8019d56:	f7fc f8a1 	bl	8015e9c <USBD_GetString>
  return USBD_StrDesc;
 8019d5a:	4b02      	ldr	r3, [pc, #8]	@ (8019d64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	3708      	adds	r7, #8
 8019d60:	46bd      	mov	sp, r7
 8019d62:	bd80      	pop	{r7, pc}
 8019d64:	20002940 	.word	0x20002940
 8019d68:	08021450 	.word	0x08021450

08019d6c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b082      	sub	sp, #8
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	4603      	mov	r3, r0
 8019d74:	6039      	str	r1, [r7, #0]
 8019d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019d78:	683b      	ldr	r3, [r7, #0]
 8019d7a:	221a      	movs	r2, #26
 8019d7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019d7e:	f000 f843 	bl	8019e08 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8019d82:	4b02      	ldr	r3, [pc, #8]	@ (8019d8c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8019d84:	4618      	mov	r0, r3
 8019d86:	3708      	adds	r7, #8
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	bd80      	pop	{r7, pc}
 8019d8c:	20000120 	.word	0x20000120

08019d90 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b082      	sub	sp, #8
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	4603      	mov	r3, r0
 8019d98:	6039      	str	r1, [r7, #0]
 8019d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019d9c:	79fb      	ldrb	r3, [r7, #7]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d105      	bne.n	8019dae <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8019da2:	683a      	ldr	r2, [r7, #0]
 8019da4:	4907      	ldr	r1, [pc, #28]	@ (8019dc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8019da6:	4808      	ldr	r0, [pc, #32]	@ (8019dc8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019da8:	f7fc f878 	bl	8015e9c <USBD_GetString>
 8019dac:	e004      	b.n	8019db8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8019dae:	683a      	ldr	r2, [r7, #0]
 8019db0:	4904      	ldr	r1, [pc, #16]	@ (8019dc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8019db2:	4805      	ldr	r0, [pc, #20]	@ (8019dc8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019db4:	f7fc f872 	bl	8015e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019db8:	4b02      	ldr	r3, [pc, #8]	@ (8019dc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8019dba:	4618      	mov	r0, r3
 8019dbc:	3708      	adds	r7, #8
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}
 8019dc2:	bf00      	nop
 8019dc4:	20002940 	.word	0x20002940
 8019dc8:	08021464 	.word	0x08021464

08019dcc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b082      	sub	sp, #8
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	6039      	str	r1, [r7, #0]
 8019dd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019dd8:	79fb      	ldrb	r3, [r7, #7]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d105      	bne.n	8019dea <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8019dde:	683a      	ldr	r2, [r7, #0]
 8019de0:	4907      	ldr	r1, [pc, #28]	@ (8019e00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8019de2:	4808      	ldr	r0, [pc, #32]	@ (8019e04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8019de4:	f7fc f85a 	bl	8015e9c <USBD_GetString>
 8019de8:	e004      	b.n	8019df4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8019dea:	683a      	ldr	r2, [r7, #0]
 8019dec:	4904      	ldr	r1, [pc, #16]	@ (8019e00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8019dee:	4805      	ldr	r0, [pc, #20]	@ (8019e04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8019df0:	f7fc f854 	bl	8015e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019df4:	4b02      	ldr	r3, [pc, #8]	@ (8019e00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8019df6:	4618      	mov	r0, r3
 8019df8:	3708      	adds	r7, #8
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}
 8019dfe:	bf00      	nop
 8019e00:	20002940 	.word	0x20002940
 8019e04:	08021470 	.word	0x08021470

08019e08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b084      	sub	sp, #16
 8019e0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8019e4c <Get_SerialNum+0x44>)
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019e14:	4b0e      	ldr	r3, [pc, #56]	@ (8019e50 <Get_SerialNum+0x48>)
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8019e54 <Get_SerialNum+0x4c>)
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019e20:	68fa      	ldr	r2, [r7, #12]
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	4413      	add	r3, r2
 8019e26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d009      	beq.n	8019e42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019e2e:	2208      	movs	r2, #8
 8019e30:	4909      	ldr	r1, [pc, #36]	@ (8019e58 <Get_SerialNum+0x50>)
 8019e32:	68f8      	ldr	r0, [r7, #12]
 8019e34:	f000 f814 	bl	8019e60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019e38:	2204      	movs	r2, #4
 8019e3a:	4908      	ldr	r1, [pc, #32]	@ (8019e5c <Get_SerialNum+0x54>)
 8019e3c:	68b8      	ldr	r0, [r7, #8]
 8019e3e:	f000 f80f 	bl	8019e60 <IntToUnicode>
  }
}
 8019e42:	bf00      	nop
 8019e44:	3710      	adds	r7, #16
 8019e46:	46bd      	mov	sp, r7
 8019e48:	bd80      	pop	{r7, pc}
 8019e4a:	bf00      	nop
 8019e4c:	1fff7590 	.word	0x1fff7590
 8019e50:	1fff7594 	.word	0x1fff7594
 8019e54:	1fff7598 	.word	0x1fff7598
 8019e58:	20000122 	.word	0x20000122
 8019e5c:	20000132 	.word	0x20000132

08019e60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019e60:	b480      	push	{r7}
 8019e62:	b087      	sub	sp, #28
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	60f8      	str	r0, [r7, #12]
 8019e68:	60b9      	str	r1, [r7, #8]
 8019e6a:	4613      	mov	r3, r2
 8019e6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019e6e:	2300      	movs	r3, #0
 8019e70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019e72:	2300      	movs	r3, #0
 8019e74:	75fb      	strb	r3, [r7, #23]
 8019e76:	e027      	b.n	8019ec8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	0f1b      	lsrs	r3, r3, #28
 8019e7c:	2b09      	cmp	r3, #9
 8019e7e:	d80b      	bhi.n	8019e98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	0f1b      	lsrs	r3, r3, #28
 8019e84:	b2da      	uxtb	r2, r3
 8019e86:	7dfb      	ldrb	r3, [r7, #23]
 8019e88:	005b      	lsls	r3, r3, #1
 8019e8a:	4619      	mov	r1, r3
 8019e8c:	68bb      	ldr	r3, [r7, #8]
 8019e8e:	440b      	add	r3, r1
 8019e90:	3230      	adds	r2, #48	@ 0x30
 8019e92:	b2d2      	uxtb	r2, r2
 8019e94:	701a      	strb	r2, [r3, #0]
 8019e96:	e00a      	b.n	8019eae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	0f1b      	lsrs	r3, r3, #28
 8019e9c:	b2da      	uxtb	r2, r3
 8019e9e:	7dfb      	ldrb	r3, [r7, #23]
 8019ea0:	005b      	lsls	r3, r3, #1
 8019ea2:	4619      	mov	r1, r3
 8019ea4:	68bb      	ldr	r3, [r7, #8]
 8019ea6:	440b      	add	r3, r1
 8019ea8:	3237      	adds	r2, #55	@ 0x37
 8019eaa:	b2d2      	uxtb	r2, r2
 8019eac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	011b      	lsls	r3, r3, #4
 8019eb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019eb4:	7dfb      	ldrb	r3, [r7, #23]
 8019eb6:	005b      	lsls	r3, r3, #1
 8019eb8:	3301      	adds	r3, #1
 8019eba:	68ba      	ldr	r2, [r7, #8]
 8019ebc:	4413      	add	r3, r2
 8019ebe:	2200      	movs	r2, #0
 8019ec0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019ec2:	7dfb      	ldrb	r3, [r7, #23]
 8019ec4:	3301      	adds	r3, #1
 8019ec6:	75fb      	strb	r3, [r7, #23]
 8019ec8:	7dfa      	ldrb	r2, [r7, #23]
 8019eca:	79fb      	ldrb	r3, [r7, #7]
 8019ecc:	429a      	cmp	r2, r3
 8019ece:	d3d3      	bcc.n	8019e78 <IntToUnicode+0x18>
  }
}
 8019ed0:	bf00      	nop
 8019ed2:	bf00      	nop
 8019ed4:	371c      	adds	r7, #28
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019edc:	4770      	bx	lr

08019ede <LL_AHB2_GRP1_EnableClock>:
{
 8019ede:	b480      	push	{r7}
 8019ee0:	b085      	sub	sp, #20
 8019ee2:	af00      	add	r7, sp, #0
 8019ee4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019eea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019eec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	4313      	orrs	r3, r2
 8019ef4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8019ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019efa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	4013      	ands	r3, r2
 8019f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019f02:	68fb      	ldr	r3, [r7, #12]
}
 8019f04:	bf00      	nop
 8019f06:	3714      	adds	r7, #20
 8019f08:	46bd      	mov	sp, r7
 8019f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f0e:	4770      	bx	lr

08019f10 <LL_APB1_GRP1_EnableClock>:
{
 8019f10:	b480      	push	{r7}
 8019f12:	b085      	sub	sp, #20
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8019f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019f1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8019f1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	4313      	orrs	r3, r2
 8019f26:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8019f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019f2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	4013      	ands	r3, r2
 8019f32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019f34:	68fb      	ldr	r3, [r7, #12]
}
 8019f36:	bf00      	nop
 8019f38:	3714      	adds	r7, #20
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f40:	4770      	bx	lr
	...

08019f44 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b088      	sub	sp, #32
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019f4c:	f107 030c 	add.w	r3, r7, #12
 8019f50:	2200      	movs	r2, #0
 8019f52:	601a      	str	r2, [r3, #0]
 8019f54:	605a      	str	r2, [r3, #4]
 8019f56:	609a      	str	r2, [r3, #8]
 8019f58:	60da      	str	r2, [r3, #12]
 8019f5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	4a13      	ldr	r2, [pc, #76]	@ (8019fb0 <HAL_PCD_MspInit+0x6c>)
 8019f62:	4293      	cmp	r3, r2
 8019f64:	d120      	bne.n	8019fa8 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019f66:	2001      	movs	r0, #1
 8019f68:	f7ff ffb9 	bl	8019ede <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019f6c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8019f70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019f72:	2302      	movs	r3, #2
 8019f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019f76:	2300      	movs	r3, #0
 8019f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8019f7e:	230a      	movs	r3, #10
 8019f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019f82:	f107 030c 	add.w	r3, r7, #12
 8019f86:	4619      	mov	r1, r3
 8019f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019f8c:	f7ef ffa8 	bl	8009ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8019f90:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8019f94:	f7ff ffbc 	bl	8019f10 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8019f98:	2200      	movs	r2, #0
 8019f9a:	2100      	movs	r1, #0
 8019f9c:	2014      	movs	r0, #20
 8019f9e:	f7ef fb6c 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8019fa2:	2014      	movs	r0, #20
 8019fa4:	f7ef fb83 	bl	80096ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8019fa8:	bf00      	nop
 8019faa:	3720      	adds	r7, #32
 8019fac:	46bd      	mov	sp, r7
 8019fae:	bd80      	pop	{r7, pc}
 8019fb0:	40006800 	.word	0x40006800

08019fb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b082      	sub	sp, #8
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8019fc8:	4619      	mov	r1, r3
 8019fca:	4610      	mov	r0, r2
 8019fcc:	f7fa fe6b 	bl	8014ca6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8019fd0:	bf00      	nop
 8019fd2:	3708      	adds	r7, #8
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	bd80      	pop	{r7, pc}

08019fd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b082      	sub	sp, #8
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
 8019fe0:	460b      	mov	r3, r1
 8019fe2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8019fea:	78fa      	ldrb	r2, [r7, #3]
 8019fec:	6879      	ldr	r1, [r7, #4]
 8019fee:	4613      	mov	r3, r2
 8019ff0:	009b      	lsls	r3, r3, #2
 8019ff2:	4413      	add	r3, r2
 8019ff4:	00db      	lsls	r3, r3, #3
 8019ff6:	440b      	add	r3, r1
 8019ff8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8019ffc:	681a      	ldr	r2, [r3, #0]
 8019ffe:	78fb      	ldrb	r3, [r7, #3]
 801a000:	4619      	mov	r1, r3
 801a002:	f7fa fea5 	bl	8014d50 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801a006:	bf00      	nop
 801a008:	3708      	adds	r7, #8
 801a00a:	46bd      	mov	sp, r7
 801a00c:	bd80      	pop	{r7, pc}

0801a00e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a00e:	b580      	push	{r7, lr}
 801a010:	b082      	sub	sp, #8
 801a012:	af00      	add	r7, sp, #0
 801a014:	6078      	str	r0, [r7, #4]
 801a016:	460b      	mov	r3, r1
 801a018:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801a020:	78fa      	ldrb	r2, [r7, #3]
 801a022:	6879      	ldr	r1, [r7, #4]
 801a024:	4613      	mov	r3, r2
 801a026:	009b      	lsls	r3, r3, #2
 801a028:	4413      	add	r3, r2
 801a02a:	00db      	lsls	r3, r3, #3
 801a02c:	440b      	add	r3, r1
 801a02e:	3324      	adds	r3, #36	@ 0x24
 801a030:	681a      	ldr	r2, [r3, #0]
 801a032:	78fb      	ldrb	r3, [r7, #3]
 801a034:	4619      	mov	r1, r3
 801a036:	f7fa ff3e 	bl	8014eb6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801a03a:	bf00      	nop
 801a03c:	3708      	adds	r7, #8
 801a03e:	46bd      	mov	sp, r7
 801a040:	bd80      	pop	{r7, pc}

0801a042 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a042:	b580      	push	{r7, lr}
 801a044:	b082      	sub	sp, #8
 801a046:	af00      	add	r7, sp, #0
 801a048:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801a050:	4618      	mov	r0, r3
 801a052:	f7fb f878 	bl	8015146 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801a056:	bf00      	nop
 801a058:	3708      	adds	r7, #8
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd80      	pop	{r7, pc}

0801a05e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a05e:	b580      	push	{r7, lr}
 801a060:	b084      	sub	sp, #16
 801a062:	af00      	add	r7, sp, #0
 801a064:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a066:	2301      	movs	r3, #1
 801a068:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	795b      	ldrb	r3, [r3, #5]
 801a06e:	2b02      	cmp	r3, #2
 801a070:	d001      	beq.n	801a076 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801a072:	f7e8 fff3 	bl	800305c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801a07c:	7bfa      	ldrb	r2, [r7, #15]
 801a07e:	4611      	mov	r1, r2
 801a080:	4618      	mov	r0, r3
 801a082:	f7fb f81c 	bl	80150be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801a08c:	4618      	mov	r0, r3
 801a08e:	f7fa ffc4 	bl	801501a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801a092:	bf00      	nop
 801a094:	3710      	adds	r7, #16
 801a096:	46bd      	mov	sp, r7
 801a098:	bd80      	pop	{r7, pc}
	...

0801a09c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b082      	sub	sp, #8
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f7fb f817 	bl	80150de <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	7a5b      	ldrb	r3, [r3, #9]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d005      	beq.n	801a0c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a0b8:	4b04      	ldr	r3, [pc, #16]	@ (801a0cc <HAL_PCD_SuspendCallback+0x30>)
 801a0ba:	691b      	ldr	r3, [r3, #16]
 801a0bc:	4a03      	ldr	r2, [pc, #12]	@ (801a0cc <HAL_PCD_SuspendCallback+0x30>)
 801a0be:	f043 0306 	orr.w	r3, r3, #6
 801a0c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801a0c4:	bf00      	nop
 801a0c6:	3708      	adds	r7, #8
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bd80      	pop	{r7, pc}
 801a0cc:	e000ed00 	.word	0xe000ed00

0801a0d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b082      	sub	sp, #8
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	7a5b      	ldrb	r3, [r3, #9]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d007      	beq.n	801a0f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a0e0:	4b08      	ldr	r3, [pc, #32]	@ (801a104 <HAL_PCD_ResumeCallback+0x34>)
 801a0e2:	691b      	ldr	r3, [r3, #16]
 801a0e4:	4a07      	ldr	r2, [pc, #28]	@ (801a104 <HAL_PCD_ResumeCallback+0x34>)
 801a0e6:	f023 0306 	bic.w	r3, r3, #6
 801a0ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801a0ec:	f000 f9fa 	bl	801a4e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801a0f6:	4618      	mov	r0, r3
 801a0f8:	f7fb f80d 	bl	8015116 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801a0fc:	bf00      	nop
 801a0fe:	3708      	adds	r7, #8
 801a100:	46bd      	mov	sp, r7
 801a102:	bd80      	pop	{r7, pc}
 801a104:	e000ed00 	.word	0xe000ed00

0801a108 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b082      	sub	sp, #8
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801a110:	4a2c      	ldr	r2, [pc, #176]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	4a2a      	ldr	r2, [pc, #168]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a11c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 801a120:	f7f2 fda2 	bl	800cc68 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 801a124:	4b27      	ldr	r3, [pc, #156]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a126:	4a28      	ldr	r2, [pc, #160]	@ (801a1c8 <USBD_LL_Init+0xc0>)
 801a128:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801a12a:	4b26      	ldr	r3, [pc, #152]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a12c:	2208      	movs	r2, #8
 801a12e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801a130:	4b24      	ldr	r3, [pc, #144]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a132:	2202      	movs	r2, #2
 801a134:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a136:	4b23      	ldr	r3, [pc, #140]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a138:	2202      	movs	r2, #2
 801a13a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801a13c:	4b21      	ldr	r3, [pc, #132]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a13e:	2200      	movs	r2, #0
 801a140:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801a142:	4b20      	ldr	r3, [pc, #128]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a144:	2200      	movs	r2, #0
 801a146:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801a148:	4b1e      	ldr	r3, [pc, #120]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a14a:	2200      	movs	r2, #0
 801a14c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801a14e:	4b1d      	ldr	r3, [pc, #116]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a150:	2200      	movs	r2, #0
 801a152:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801a154:	481b      	ldr	r0, [pc, #108]	@ (801a1c4 <USBD_LL_Init+0xbc>)
 801a156:	f7f1 f867 	bl	800b228 <HAL_PCD_Init>
 801a15a:	4603      	mov	r3, r0
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d001      	beq.n	801a164 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801a160:	f7e8 ff7c 	bl	800305c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a16a:	2318      	movs	r3, #24
 801a16c:	2200      	movs	r2, #0
 801a16e:	2100      	movs	r1, #0
 801a170:	f7f2 fcee 	bl	800cb50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a17a:	2358      	movs	r3, #88	@ 0x58
 801a17c:	2200      	movs	r2, #0
 801a17e:	2180      	movs	r1, #128	@ 0x80
 801a180:	f7f2 fce6 	bl	800cb50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a18a:	23c0      	movs	r3, #192	@ 0xc0
 801a18c:	2200      	movs	r2, #0
 801a18e:	2181      	movs	r1, #129	@ 0x81
 801a190:	f7f2 fcde 	bl	800cb50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a19a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801a19e:	2200      	movs	r2, #0
 801a1a0:	2101      	movs	r1, #1
 801a1a2:	f7f2 fcd5 	bl	800cb50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a1ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	2182      	movs	r1, #130	@ 0x82
 801a1b4:	f7f2 fccc 	bl	800cb50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801a1b8:	2300      	movs	r3, #0
}
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	3708      	adds	r7, #8
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	bd80      	pop	{r7, pc}
 801a1c2:	bf00      	nop
 801a1c4:	20002b40 	.word	0x20002b40
 801a1c8:	40006800 	.word	0x40006800

0801a1cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b084      	sub	sp, #16
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a1d8:	2300      	movs	r3, #0
 801a1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7f1 f8ee 	bl	800b3c4 <HAL_PCD_Start>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a1ec:	7bfb      	ldrb	r3, [r7, #15]
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	f000 f97e 	bl	801a4f0 <USBD_Get_USB_Status>
 801a1f4:	4603      	mov	r3, r0
 801a1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	3710      	adds	r7, #16
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}

0801a202 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a202:	b580      	push	{r7, lr}
 801a204:	b084      	sub	sp, #16
 801a206:	af00      	add	r7, sp, #0
 801a208:	6078      	str	r0, [r7, #4]
 801a20a:	4608      	mov	r0, r1
 801a20c:	4611      	mov	r1, r2
 801a20e:	461a      	mov	r2, r3
 801a210:	4603      	mov	r3, r0
 801a212:	70fb      	strb	r3, [r7, #3]
 801a214:	460b      	mov	r3, r1
 801a216:	70bb      	strb	r3, [r7, #2]
 801a218:	4613      	mov	r3, r2
 801a21a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a21c:	2300      	movs	r3, #0
 801a21e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a220:	2300      	movs	r3, #0
 801a222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a22a:	78bb      	ldrb	r3, [r7, #2]
 801a22c:	883a      	ldrh	r2, [r7, #0]
 801a22e:	78f9      	ldrb	r1, [r7, #3]
 801a230:	f7f1 fa35 	bl	800b69e <HAL_PCD_EP_Open>
 801a234:	4603      	mov	r3, r0
 801a236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a238:	7bfb      	ldrb	r3, [r7, #15]
 801a23a:	4618      	mov	r0, r3
 801a23c:	f000 f958 	bl	801a4f0 <USBD_Get_USB_Status>
 801a240:	4603      	mov	r3, r0
 801a242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a244:	7bbb      	ldrb	r3, [r7, #14]
}
 801a246:	4618      	mov	r0, r3
 801a248:	3710      	adds	r7, #16
 801a24a:	46bd      	mov	sp, r7
 801a24c:	bd80      	pop	{r7, pc}

0801a24e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a24e:	b580      	push	{r7, lr}
 801a250:	b084      	sub	sp, #16
 801a252:	af00      	add	r7, sp, #0
 801a254:	6078      	str	r0, [r7, #4]
 801a256:	460b      	mov	r3, r1
 801a258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a25a:	2300      	movs	r3, #0
 801a25c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a25e:	2300      	movs	r3, #0
 801a260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a268:	78fa      	ldrb	r2, [r7, #3]
 801a26a:	4611      	mov	r1, r2
 801a26c:	4618      	mov	r0, r3
 801a26e:	f7f1 fa75 	bl	800b75c <HAL_PCD_EP_Close>
 801a272:	4603      	mov	r3, r0
 801a274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a276:	7bfb      	ldrb	r3, [r7, #15]
 801a278:	4618      	mov	r0, r3
 801a27a:	f000 f939 	bl	801a4f0 <USBD_Get_USB_Status>
 801a27e:	4603      	mov	r3, r0
 801a280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a282:	7bbb      	ldrb	r3, [r7, #14]
}
 801a284:	4618      	mov	r0, r3
 801a286:	3710      	adds	r7, #16
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}

0801a28c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b084      	sub	sp, #16
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
 801a294:	460b      	mov	r3, r1
 801a296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a298:	2300      	movs	r3, #0
 801a29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a29c:	2300      	movs	r3, #0
 801a29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a2a6:	78fa      	ldrb	r2, [r7, #3]
 801a2a8:	4611      	mov	r1, r2
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f7f1 fb1e 	bl	800b8ec <HAL_PCD_EP_SetStall>
 801a2b0:	4603      	mov	r3, r0
 801a2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a2b4:	7bfb      	ldrb	r3, [r7, #15]
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f000 f91a 	bl	801a4f0 <USBD_Get_USB_Status>
 801a2bc:	4603      	mov	r3, r0
 801a2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	3710      	adds	r7, #16
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	bd80      	pop	{r7, pc}

0801a2ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a2ca:	b580      	push	{r7, lr}
 801a2cc:	b084      	sub	sp, #16
 801a2ce:	af00      	add	r7, sp, #0
 801a2d0:	6078      	str	r0, [r7, #4]
 801a2d2:	460b      	mov	r3, r1
 801a2d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a2da:	2300      	movs	r3, #0
 801a2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a2e4:	78fa      	ldrb	r2, [r7, #3]
 801a2e6:	4611      	mov	r1, r2
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f7f1 fb51 	bl	800b990 <HAL_PCD_EP_ClrStall>
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a2f2:	7bfb      	ldrb	r3, [r7, #15]
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	f000 f8fb 	bl	801a4f0 <USBD_Get_USB_Status>
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 801a300:	4618      	mov	r0, r3
 801a302:	3710      	adds	r7, #16
 801a304:	46bd      	mov	sp, r7
 801a306:	bd80      	pop	{r7, pc}

0801a308 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a308:	b480      	push	{r7}
 801a30a:	b085      	sub	sp, #20
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
 801a310:	460b      	mov	r3, r1
 801a312:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a31a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a31c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a320:	2b00      	cmp	r3, #0
 801a322:	da0b      	bge.n	801a33c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a324:	78fb      	ldrb	r3, [r7, #3]
 801a326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a32a:	68f9      	ldr	r1, [r7, #12]
 801a32c:	4613      	mov	r3, r2
 801a32e:	009b      	lsls	r3, r3, #2
 801a330:	4413      	add	r3, r2
 801a332:	00db      	lsls	r3, r3, #3
 801a334:	440b      	add	r3, r1
 801a336:	3312      	adds	r3, #18
 801a338:	781b      	ldrb	r3, [r3, #0]
 801a33a:	e00b      	b.n	801a354 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a33c:	78fb      	ldrb	r3, [r7, #3]
 801a33e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a342:	68f9      	ldr	r1, [r7, #12]
 801a344:	4613      	mov	r3, r2
 801a346:	009b      	lsls	r3, r3, #2
 801a348:	4413      	add	r3, r2
 801a34a:	00db      	lsls	r3, r3, #3
 801a34c:	440b      	add	r3, r1
 801a34e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801a352:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a354:	4618      	mov	r0, r3
 801a356:	3714      	adds	r7, #20
 801a358:	46bd      	mov	sp, r7
 801a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a35e:	4770      	bx	lr

0801a360 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b084      	sub	sp, #16
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
 801a368:	460b      	mov	r3, r1
 801a36a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a36c:	2300      	movs	r3, #0
 801a36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a370:	2300      	movs	r3, #0
 801a372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a37a:	78fa      	ldrb	r2, [r7, #3]
 801a37c:	4611      	mov	r1, r2
 801a37e:	4618      	mov	r0, r3
 801a380:	f7f1 f969 	bl	800b656 <HAL_PCD_SetAddress>
 801a384:	4603      	mov	r3, r0
 801a386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a388:	7bfb      	ldrb	r3, [r7, #15]
 801a38a:	4618      	mov	r0, r3
 801a38c:	f000 f8b0 	bl	801a4f0 <USBD_Get_USB_Status>
 801a390:	4603      	mov	r3, r0
 801a392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a394:	7bbb      	ldrb	r3, [r7, #14]
}
 801a396:	4618      	mov	r0, r3
 801a398:	3710      	adds	r7, #16
 801a39a:	46bd      	mov	sp, r7
 801a39c:	bd80      	pop	{r7, pc}

0801a39e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a39e:	b580      	push	{r7, lr}
 801a3a0:	b086      	sub	sp, #24
 801a3a2:	af00      	add	r7, sp, #0
 801a3a4:	60f8      	str	r0, [r7, #12]
 801a3a6:	607a      	str	r2, [r7, #4]
 801a3a8:	603b      	str	r3, [r7, #0]
 801a3aa:	460b      	mov	r3, r1
 801a3ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a3bc:	7af9      	ldrb	r1, [r7, #11]
 801a3be:	683b      	ldr	r3, [r7, #0]
 801a3c0:	687a      	ldr	r2, [r7, #4]
 801a3c2:	f7f1 fa5c 	bl	800b87e <HAL_PCD_EP_Transmit>
 801a3c6:	4603      	mov	r3, r0
 801a3c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a3ca:	7dfb      	ldrb	r3, [r7, #23]
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f000 f88f 	bl	801a4f0 <USBD_Get_USB_Status>
 801a3d2:	4603      	mov	r3, r0
 801a3d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a3d6:	7dbb      	ldrb	r3, [r7, #22]
}
 801a3d8:	4618      	mov	r0, r3
 801a3da:	3718      	adds	r7, #24
 801a3dc:	46bd      	mov	sp, r7
 801a3de:	bd80      	pop	{r7, pc}

0801a3e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b086      	sub	sp, #24
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	60f8      	str	r0, [r7, #12]
 801a3e8:	607a      	str	r2, [r7, #4]
 801a3ea:	603b      	str	r3, [r7, #0]
 801a3ec:	460b      	mov	r3, r1
 801a3ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a3fe:	7af9      	ldrb	r1, [r7, #11]
 801a400:	683b      	ldr	r3, [r7, #0]
 801a402:	687a      	ldr	r2, [r7, #4]
 801a404:	f7f1 f9f2 	bl	800b7ec <HAL_PCD_EP_Receive>
 801a408:	4603      	mov	r3, r0
 801a40a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a40c:	7dfb      	ldrb	r3, [r7, #23]
 801a40e:	4618      	mov	r0, r3
 801a410:	f000 f86e 	bl	801a4f0 <USBD_Get_USB_Status>
 801a414:	4603      	mov	r3, r0
 801a416:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a418:	7dbb      	ldrb	r3, [r7, #22]
}
 801a41a:	4618      	mov	r0, r3
 801a41c:	3718      	adds	r7, #24
 801a41e:	46bd      	mov	sp, r7
 801a420:	bd80      	pop	{r7, pc}

0801a422 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a422:	b580      	push	{r7, lr}
 801a424:	b082      	sub	sp, #8
 801a426:	af00      	add	r7, sp, #0
 801a428:	6078      	str	r0, [r7, #4]
 801a42a:	460b      	mov	r3, r1
 801a42c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a434:	78fa      	ldrb	r2, [r7, #3]
 801a436:	4611      	mov	r1, r2
 801a438:	4618      	mov	r0, r3
 801a43a:	f7f1 fa08 	bl	800b84e <HAL_PCD_EP_GetRxCount>
 801a43e:	4603      	mov	r3, r0
}
 801a440:	4618      	mov	r0, r3
 801a442:	3708      	adds	r7, #8
 801a444:	46bd      	mov	sp, r7
 801a446:	bd80      	pop	{r7, pc}

0801a448 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
 801a450:	460b      	mov	r3, r1
 801a452:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801a454:	78fb      	ldrb	r3, [r7, #3]
 801a456:	2b00      	cmp	r3, #0
 801a458:	d002      	beq.n	801a460 <HAL_PCDEx_LPM_Callback+0x18>
 801a45a:	2b01      	cmp	r3, #1
 801a45c:	d013      	beq.n	801a486 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801a45e:	e023      	b.n	801a4a8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	7a5b      	ldrb	r3, [r3, #9]
 801a464:	2b00      	cmp	r3, #0
 801a466:	d007      	beq.n	801a478 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a468:	f000 f83c 	bl	801a4e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a46c:	4b10      	ldr	r3, [pc, #64]	@ (801a4b0 <HAL_PCDEx_LPM_Callback+0x68>)
 801a46e:	691b      	ldr	r3, [r3, #16]
 801a470:	4a0f      	ldr	r2, [pc, #60]	@ (801a4b0 <HAL_PCDEx_LPM_Callback+0x68>)
 801a472:	f023 0306 	bic.w	r3, r3, #6
 801a476:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801a47e:	4618      	mov	r0, r3
 801a480:	f7fa fe49 	bl	8015116 <USBD_LL_Resume>
    break;
 801a484:	e010      	b.n	801a4a8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801a48c:	4618      	mov	r0, r3
 801a48e:	f7fa fe26 	bl	80150de <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	7a5b      	ldrb	r3, [r3, #9]
 801a496:	2b00      	cmp	r3, #0
 801a498:	d005      	beq.n	801a4a6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a49a:	4b05      	ldr	r3, [pc, #20]	@ (801a4b0 <HAL_PCDEx_LPM_Callback+0x68>)
 801a49c:	691b      	ldr	r3, [r3, #16]
 801a49e:	4a04      	ldr	r2, [pc, #16]	@ (801a4b0 <HAL_PCDEx_LPM_Callback+0x68>)
 801a4a0:	f043 0306 	orr.w	r3, r3, #6
 801a4a4:	6113      	str	r3, [r2, #16]
    break;
 801a4a6:	bf00      	nop
}
 801a4a8:	bf00      	nop
 801a4aa:	3708      	adds	r7, #8
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd80      	pop	{r7, pc}
 801a4b0:	e000ed00 	.word	0xe000ed00

0801a4b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a4b4:	b480      	push	{r7}
 801a4b6:	b083      	sub	sp, #12
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a4bc:	4b03      	ldr	r3, [pc, #12]	@ (801a4cc <USBD_static_malloc+0x18>)
}
 801a4be:	4618      	mov	r0, r3
 801a4c0:	370c      	adds	r7, #12
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c8:	4770      	bx	lr
 801a4ca:	bf00      	nop
 801a4cc:	20002e1c 	.word	0x20002e1c

0801a4d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a4d0:	b480      	push	{r7}
 801a4d2:	b083      	sub	sp, #12
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801a4d8:	bf00      	nop
 801a4da:	370c      	adds	r7, #12
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e2:	4770      	bx	lr

0801a4e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a4e4:	b580      	push	{r7, lr}
 801a4e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a4e8:	f7e8 fd20 	bl	8002f2c <SystemClock_Config>
}
 801a4ec:	bf00      	nop
 801a4ee:	bd80      	pop	{r7, pc}

0801a4f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a4f0:	b480      	push	{r7}
 801a4f2:	b085      	sub	sp, #20
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a4fe:	79fb      	ldrb	r3, [r7, #7]
 801a500:	2b03      	cmp	r3, #3
 801a502:	d817      	bhi.n	801a534 <USBD_Get_USB_Status+0x44>
 801a504:	a201      	add	r2, pc, #4	@ (adr r2, 801a50c <USBD_Get_USB_Status+0x1c>)
 801a506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a50a:	bf00      	nop
 801a50c:	0801a51d 	.word	0x0801a51d
 801a510:	0801a523 	.word	0x0801a523
 801a514:	0801a529 	.word	0x0801a529
 801a518:	0801a52f 	.word	0x0801a52f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a51c:	2300      	movs	r3, #0
 801a51e:	73fb      	strb	r3, [r7, #15]
    break;
 801a520:	e00b      	b.n	801a53a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a522:	2303      	movs	r3, #3
 801a524:	73fb      	strb	r3, [r7, #15]
    break;
 801a526:	e008      	b.n	801a53a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a528:	2301      	movs	r3, #1
 801a52a:	73fb      	strb	r3, [r7, #15]
    break;
 801a52c:	e005      	b.n	801a53a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a52e:	2303      	movs	r3, #3
 801a530:	73fb      	strb	r3, [r7, #15]
    break;
 801a532:	e002      	b.n	801a53a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a534:	2303      	movs	r3, #3
 801a536:	73fb      	strb	r3, [r7, #15]
    break;
 801a538:	bf00      	nop
  }
  return usb_status;
 801a53a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a53c:	4618      	mov	r0, r3
 801a53e:	3714      	adds	r7, #20
 801a540:	46bd      	mov	sp, r7
 801a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a546:	4770      	bx	lr

0801a548 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a548:	b480      	push	{r7}
 801a54a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a54c:	4b05      	ldr	r3, [pc, #20]	@ (801a564 <UTIL_LPM_Init+0x1c>)
 801a54e:	2200      	movs	r2, #0
 801a550:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a552:	4b05      	ldr	r3, [pc, #20]	@ (801a568 <UTIL_LPM_Init+0x20>)
 801a554:	2200      	movs	r2, #0
 801a556:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a558:	bf00      	nop
 801a55a:	46bd      	mov	sp, r7
 801a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a560:	4770      	bx	lr
 801a562:	bf00      	nop
 801a564:	2000303c 	.word	0x2000303c
 801a568:	20003040 	.word	0x20003040

0801a56c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a56c:	b480      	push	{r7}
 801a56e:	b087      	sub	sp, #28
 801a570:	af00      	add	r7, sp, #0
 801a572:	6078      	str	r0, [r7, #4]
 801a574:	460b      	mov	r3, r1
 801a576:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a578:	f3ef 8310 	mrs	r3, PRIMASK
 801a57c:	613b      	str	r3, [r7, #16]
  return(result);
 801a57e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a582:	b672      	cpsid	i
}
 801a584:	bf00      	nop
  
  switch(state)
 801a586:	78fb      	ldrb	r3, [r7, #3]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d008      	beq.n	801a59e <UTIL_LPM_SetOffMode+0x32>
 801a58c:	2b01      	cmp	r3, #1
 801a58e:	d10e      	bne.n	801a5ae <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a590:	4b0d      	ldr	r3, [pc, #52]	@ (801a5c8 <UTIL_LPM_SetOffMode+0x5c>)
 801a592:	681a      	ldr	r2, [r3, #0]
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	4313      	orrs	r3, r2
 801a598:	4a0b      	ldr	r2, [pc, #44]	@ (801a5c8 <UTIL_LPM_SetOffMode+0x5c>)
 801a59a:	6013      	str	r3, [r2, #0]
      break;
 801a59c:	e008      	b.n	801a5b0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	43da      	mvns	r2, r3
 801a5a2:	4b09      	ldr	r3, [pc, #36]	@ (801a5c8 <UTIL_LPM_SetOffMode+0x5c>)
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	4013      	ands	r3, r2
 801a5a8:	4a07      	ldr	r2, [pc, #28]	@ (801a5c8 <UTIL_LPM_SetOffMode+0x5c>)
 801a5aa:	6013      	str	r3, [r2, #0]
      break;
 801a5ac:	e000      	b.n	801a5b0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a5ae:	bf00      	nop
 801a5b0:	697b      	ldr	r3, [r7, #20]
 801a5b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	f383 8810 	msr	PRIMASK, r3
}
 801a5ba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a5bc:	bf00      	nop
 801a5be:	371c      	adds	r7, #28
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c6:	4770      	bx	lr
 801a5c8:	20003040 	.word	0x20003040

0801a5cc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b090      	sub	sp, #64	@ 0x40
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a5d4:	4b73      	ldr	r3, [pc, #460]	@ (801a7a4 <UTIL_SEQ_Run+0x1d8>)
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801a5da:	4b72      	ldr	r3, [pc, #456]	@ (801a7a4 <UTIL_SEQ_Run+0x1d8>)
 801a5dc:	681a      	ldr	r2, [r3, #0]
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	4013      	ands	r3, r2
 801a5e2:	4a70      	ldr	r2, [pc, #448]	@ (801a7a4 <UTIL_SEQ_Run+0x1d8>)
 801a5e4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a5e6:	4b70      	ldr	r3, [pc, #448]	@ (801a7a8 <UTIL_SEQ_Run+0x1dc>)
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a5ec:	4b6f      	ldr	r3, [pc, #444]	@ (801a7ac <UTIL_SEQ_Run+0x1e0>)
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a5f2:	4b6f      	ldr	r3, [pc, #444]	@ (801a7b0 <UTIL_SEQ_Run+0x1e4>)
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801a5f8:	4b6e      	ldr	r3, [pc, #440]	@ (801a7b4 <UTIL_SEQ_Run+0x1e8>)
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a5fe:	e08d      	b.n	801a71c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a600:	2300      	movs	r3, #0
 801a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a604:	e002      	b.n	801a60c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a608:	3301      	adds	r3, #1
 801a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a60c:	4a6a      	ldr	r2, [pc, #424]	@ (801a7b8 <UTIL_SEQ_Run+0x1ec>)
 801a60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a610:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a616:	401a      	ands	r2, r3
 801a618:	4b62      	ldr	r3, [pc, #392]	@ (801a7a4 <UTIL_SEQ_Run+0x1d8>)
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	4013      	ands	r3, r2
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d0f1      	beq.n	801a606 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a622:	4a65      	ldr	r2, [pc, #404]	@ (801a7b8 <UTIL_SEQ_Run+0x1ec>)
 801a624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a626:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a62c:	401a      	ands	r2, r3
 801a62e:	4b5d      	ldr	r3, [pc, #372]	@ (801a7a4 <UTIL_SEQ_Run+0x1d8>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	4013      	ands	r3, r2
 801a634:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a636:	4a60      	ldr	r2, [pc, #384]	@ (801a7b8 <UTIL_SEQ_Run+0x1ec>)
 801a638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a63a:	00db      	lsls	r3, r3, #3
 801a63c:	4413      	add	r3, r2
 801a63e:	685a      	ldr	r2, [r3, #4]
 801a640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a642:	4013      	ands	r3, r2
 801a644:	2b00      	cmp	r3, #0
 801a646:	d106      	bne.n	801a656 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a648:	4a5b      	ldr	r2, [pc, #364]	@ (801a7b8 <UTIL_SEQ_Run+0x1ec>)
 801a64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a64c:	00db      	lsls	r3, r3, #3
 801a64e:	4413      	add	r3, r2
 801a650:	f04f 32ff 	mov.w	r2, #4294967295
 801a654:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a656:	4a58      	ldr	r2, [pc, #352]	@ (801a7b8 <UTIL_SEQ_Run+0x1ec>)
 801a658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a65a:	00db      	lsls	r3, r3, #3
 801a65c:	4413      	add	r3, r2
 801a65e:	685a      	ldr	r2, [r3, #4]
 801a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a662:	4013      	ands	r3, r2
 801a664:	4618      	mov	r0, r3
 801a666:	f000 f9b3 	bl	801a9d0 <SEQ_BitPosition>
 801a66a:	4603      	mov	r3, r0
 801a66c:	461a      	mov	r2, r3
 801a66e:	4b53      	ldr	r3, [pc, #332]	@ (801a7bc <UTIL_SEQ_Run+0x1f0>)
 801a670:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a672:	4a51      	ldr	r2, [pc, #324]	@ (801a7b8 <UTIL_SEQ_Run+0x1ec>)
 801a674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a676:	00db      	lsls	r3, r3, #3
 801a678:	4413      	add	r3, r2
 801a67a:	685a      	ldr	r2, [r3, #4]
 801a67c:	4b4f      	ldr	r3, [pc, #316]	@ (801a7bc <UTIL_SEQ_Run+0x1f0>)
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	2101      	movs	r1, #1
 801a682:	fa01 f303 	lsl.w	r3, r1, r3
 801a686:	43db      	mvns	r3, r3
 801a688:	401a      	ands	r2, r3
 801a68a:	494b      	ldr	r1, [pc, #300]	@ (801a7b8 <UTIL_SEQ_Run+0x1ec>)
 801a68c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a68e:	00db      	lsls	r3, r3, #3
 801a690:	440b      	add	r3, r1
 801a692:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a694:	f3ef 8310 	mrs	r3, PRIMASK
 801a698:	61bb      	str	r3, [r7, #24]
  return(result);
 801a69a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a69c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a69e:	b672      	cpsid	i
}
 801a6a0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a6a2:	4b46      	ldr	r3, [pc, #280]	@ (801a7bc <UTIL_SEQ_Run+0x1f0>)
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	2201      	movs	r2, #1
 801a6a8:	fa02 f303 	lsl.w	r3, r2, r3
 801a6ac:	43da      	mvns	r2, r3
 801a6ae:	4b3e      	ldr	r3, [pc, #248]	@ (801a7a8 <UTIL_SEQ_Run+0x1dc>)
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	4013      	ands	r3, r2
 801a6b4:	4a3c      	ldr	r2, [pc, #240]	@ (801a7a8 <UTIL_SEQ_Run+0x1dc>)
 801a6b6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a6b8:	2301      	movs	r3, #1
 801a6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a6bc:	e013      	b.n	801a6e6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6c0:	3b01      	subs	r3, #1
 801a6c2:	4a3d      	ldr	r2, [pc, #244]	@ (801a7b8 <UTIL_SEQ_Run+0x1ec>)
 801a6c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a6c8:	4b3c      	ldr	r3, [pc, #240]	@ (801a7bc <UTIL_SEQ_Run+0x1f0>)
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	2201      	movs	r2, #1
 801a6ce:	fa02 f303 	lsl.w	r3, r2, r3
 801a6d2:	43da      	mvns	r2, r3
 801a6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6d6:	3b01      	subs	r3, #1
 801a6d8:	400a      	ands	r2, r1
 801a6da:	4937      	ldr	r1, [pc, #220]	@ (801a7b8 <UTIL_SEQ_Run+0x1ec>)
 801a6dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6e2:	3b01      	subs	r3, #1
 801a6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a6e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d1e8      	bne.n	801a6be <UTIL_SEQ_Run+0xf2>
 801a6ec:	6a3b      	ldr	r3, [r7, #32]
 801a6ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6f0:	697b      	ldr	r3, [r7, #20]
 801a6f2:	f383 8810 	msr	PRIMASK, r3
}
 801a6f6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a6f8:	4b30      	ldr	r3, [pc, #192]	@ (801a7bc <UTIL_SEQ_Run+0x1f0>)
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	4a30      	ldr	r2, [pc, #192]	@ (801a7c0 <UTIL_SEQ_Run+0x1f4>)
 801a6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a702:	4798      	blx	r3

    local_taskset = TaskSet;
 801a704:	4b28      	ldr	r3, [pc, #160]	@ (801a7a8 <UTIL_SEQ_Run+0x1dc>)
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801a70a:	4b28      	ldr	r3, [pc, #160]	@ (801a7ac <UTIL_SEQ_Run+0x1e0>)
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801a710:	4b27      	ldr	r3, [pc, #156]	@ (801a7b0 <UTIL_SEQ_Run+0x1e4>)
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801a716:	4b27      	ldr	r3, [pc, #156]	@ (801a7b4 <UTIL_SEQ_Run+0x1e8>)
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a71c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a720:	401a      	ands	r2, r3
 801a722:	4b20      	ldr	r3, [pc, #128]	@ (801a7a4 <UTIL_SEQ_Run+0x1d8>)
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	4013      	ands	r3, r2
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d005      	beq.n	801a738 <UTIL_SEQ_Run+0x16c>
 801a72c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a730:	4013      	ands	r3, r2
 801a732:	2b00      	cmp	r3, #0
 801a734:	f43f af64 	beq.w	801a600 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a738:	4b20      	ldr	r3, [pc, #128]	@ (801a7bc <UTIL_SEQ_Run+0x1f0>)
 801a73a:	f04f 32ff 	mov.w	r2, #4294967295
 801a73e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a740:	f000 f938 	bl	801a9b4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a744:	f3ef 8310 	mrs	r3, PRIMASK
 801a748:	613b      	str	r3, [r7, #16]
  return(result);
 801a74a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a74c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a74e:	b672      	cpsid	i
}
 801a750:	bf00      	nop
  local_taskset = TaskSet;
 801a752:	4b15      	ldr	r3, [pc, #84]	@ (801a7a8 <UTIL_SEQ_Run+0x1dc>)
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a758:	4b14      	ldr	r3, [pc, #80]	@ (801a7ac <UTIL_SEQ_Run+0x1e0>)
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a75e:	4b14      	ldr	r3, [pc, #80]	@ (801a7b0 <UTIL_SEQ_Run+0x1e4>)
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801a764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a768:	401a      	ands	r2, r3
 801a76a:	4b0e      	ldr	r3, [pc, #56]	@ (801a7a4 <UTIL_SEQ_Run+0x1d8>)
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	4013      	ands	r3, r2
 801a770:	2b00      	cmp	r3, #0
 801a772:	d107      	bne.n	801a784 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801a774:	4b0f      	ldr	r3, [pc, #60]	@ (801a7b4 <UTIL_SEQ_Run+0x1e8>)
 801a776:	681a      	ldr	r2, [r3, #0]
 801a778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a77a:	4013      	ands	r3, r2
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d101      	bne.n	801a784 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801a780:	f7e7 f9da 	bl	8001b38 <UTIL_SEQ_Idle>
 801a784:	69fb      	ldr	r3, [r7, #28]
 801a786:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	f383 8810 	msr	PRIMASK, r3
}
 801a78e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801a790:	f000 f917 	bl	801a9c2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a794:	4a03      	ldr	r2, [pc, #12]	@ (801a7a4 <UTIL_SEQ_Run+0x1d8>)
 801a796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a798:	6013      	str	r3, [r2, #0]

  return;
 801a79a:	bf00      	nop
}
 801a79c:	3740      	adds	r7, #64	@ 0x40
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd80      	pop	{r7, pc}
 801a7a2:	bf00      	nop
 801a7a4:	20000140 	.word	0x20000140
 801a7a8:	20003044 	.word	0x20003044
 801a7ac:	20003048 	.word	0x20003048
 801a7b0:	2000013c 	.word	0x2000013c
 801a7b4:	2000304c 	.word	0x2000304c
 801a7b8:	200030d4 	.word	0x200030d4
 801a7bc:	20003050 	.word	0x20003050
 801a7c0:	20003054 	.word	0x20003054

0801a7c4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b088      	sub	sp, #32
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	60f8      	str	r0, [r7, #12]
 801a7cc:	60b9      	str	r1, [r7, #8]
 801a7ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7d0:	f3ef 8310 	mrs	r3, PRIMASK
 801a7d4:	617b      	str	r3, [r7, #20]
  return(result);
 801a7d6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a7d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7da:	b672      	cpsid	i
}
 801a7dc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a7de:	68f8      	ldr	r0, [r7, #12]
 801a7e0:	f000 f8f6 	bl	801a9d0 <SEQ_BitPosition>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	4619      	mov	r1, r3
 801a7e8:	4a06      	ldr	r2, [pc, #24]	@ (801a804 <UTIL_SEQ_RegTask+0x40>)
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a7f0:	69fb      	ldr	r3, [r7, #28]
 801a7f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7f4:	69bb      	ldr	r3, [r7, #24]
 801a7f6:	f383 8810 	msr	PRIMASK, r3
}
 801a7fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a7fc:	bf00      	nop
}
 801a7fe:	3720      	adds	r7, #32
 801a800:	46bd      	mov	sp, r7
 801a802:	bd80      	pop	{r7, pc}
 801a804:	20003054 	.word	0x20003054

0801a808 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a808:	b480      	push	{r7}
 801a80a:	b087      	sub	sp, #28
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	6078      	str	r0, [r7, #4]
 801a810:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a812:	f3ef 8310 	mrs	r3, PRIMASK
 801a816:	60fb      	str	r3, [r7, #12]
  return(result);
 801a818:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a81a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a81c:	b672      	cpsid	i
}
 801a81e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a820:	4b0d      	ldr	r3, [pc, #52]	@ (801a858 <UTIL_SEQ_SetTask+0x50>)
 801a822:	681a      	ldr	r2, [r3, #0]
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	4313      	orrs	r3, r2
 801a828:	4a0b      	ldr	r2, [pc, #44]	@ (801a858 <UTIL_SEQ_SetTask+0x50>)
 801a82a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a82c:	4a0b      	ldr	r2, [pc, #44]	@ (801a85c <UTIL_SEQ_SetTask+0x54>)
 801a82e:	683b      	ldr	r3, [r7, #0]
 801a830:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	431a      	orrs	r2, r3
 801a838:	4908      	ldr	r1, [pc, #32]	@ (801a85c <UTIL_SEQ_SetTask+0x54>)
 801a83a:	683b      	ldr	r3, [r7, #0]
 801a83c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a840:	697b      	ldr	r3, [r7, #20]
 801a842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a844:	693b      	ldr	r3, [r7, #16]
 801a846:	f383 8810 	msr	PRIMASK, r3
}
 801a84a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a84c:	bf00      	nop
}
 801a84e:	371c      	adds	r7, #28
 801a850:	46bd      	mov	sp, r7
 801a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a856:	4770      	bx	lr
 801a858:	20003044 	.word	0x20003044
 801a85c:	200030d4 	.word	0x200030d4

0801a860 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801a860:	b480      	push	{r7}
 801a862:	b087      	sub	sp, #28
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a868:	f3ef 8310 	mrs	r3, PRIMASK
 801a86c:	60fb      	str	r3, [r7, #12]
  return(result);
 801a86e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a872:	b672      	cpsid	i
}
 801a874:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	43da      	mvns	r2, r3
 801a87a:	4b08      	ldr	r3, [pc, #32]	@ (801a89c <UTIL_SEQ_PauseTask+0x3c>)
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	4013      	ands	r3, r2
 801a880:	4a06      	ldr	r2, [pc, #24]	@ (801a89c <UTIL_SEQ_PauseTask+0x3c>)
 801a882:	6013      	str	r3, [r2, #0]
 801a884:	697b      	ldr	r3, [r7, #20]
 801a886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a888:	693b      	ldr	r3, [r7, #16]
 801a88a:	f383 8810 	msr	PRIMASK, r3
}
 801a88e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a890:	bf00      	nop
}
 801a892:	371c      	adds	r7, #28
 801a894:	46bd      	mov	sp, r7
 801a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a89a:	4770      	bx	lr
 801a89c:	2000013c 	.word	0x2000013c

0801a8a0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801a8a0:	b480      	push	{r7}
 801a8a2:	b087      	sub	sp, #28
 801a8a4:	af00      	add	r7, sp, #0
 801a8a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8a8:	f3ef 8310 	mrs	r3, PRIMASK
 801a8ac:	60fb      	str	r3, [r7, #12]
  return(result);
 801a8ae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a8b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8b2:	b672      	cpsid	i
}
 801a8b4:	bf00      	nop

  TaskMask |= TaskId_bm;
 801a8b6:	4b09      	ldr	r3, [pc, #36]	@ (801a8dc <UTIL_SEQ_ResumeTask+0x3c>)
 801a8b8:	681a      	ldr	r2, [r3, #0]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	4313      	orrs	r3, r2
 801a8be:	4a07      	ldr	r2, [pc, #28]	@ (801a8dc <UTIL_SEQ_ResumeTask+0x3c>)
 801a8c0:	6013      	str	r3, [r2, #0]
 801a8c2:	697b      	ldr	r3, [r7, #20]
 801a8c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8c6:	693b      	ldr	r3, [r7, #16]
 801a8c8:	f383 8810 	msr	PRIMASK, r3
}
 801a8cc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a8ce:	bf00      	nop
}
 801a8d0:	371c      	adds	r7, #28
 801a8d2:	46bd      	mov	sp, r7
 801a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d8:	4770      	bx	lr
 801a8da:	bf00      	nop
 801a8dc:	2000013c 	.word	0x2000013c

0801a8e0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801a8e0:	b480      	push	{r7}
 801a8e2:	b087      	sub	sp, #28
 801a8e4:	af00      	add	r7, sp, #0
 801a8e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8e8:	f3ef 8310 	mrs	r3, PRIMASK
 801a8ec:	60fb      	str	r3, [r7, #12]
  return(result);
 801a8ee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a8f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8f2:	b672      	cpsid	i
}
 801a8f4:	bf00      	nop

  EvtSet |= EvtId_bm;
 801a8f6:	4b09      	ldr	r3, [pc, #36]	@ (801a91c <UTIL_SEQ_SetEvt+0x3c>)
 801a8f8:	681a      	ldr	r2, [r3, #0]
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	4313      	orrs	r3, r2
 801a8fe:	4a07      	ldr	r2, [pc, #28]	@ (801a91c <UTIL_SEQ_SetEvt+0x3c>)
 801a900:	6013      	str	r3, [r2, #0]
 801a902:	697b      	ldr	r3, [r7, #20]
 801a904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a906:	693b      	ldr	r3, [r7, #16]
 801a908:	f383 8810 	msr	PRIMASK, r3
}
 801a90c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a90e:	bf00      	nop
}
 801a910:	371c      	adds	r7, #28
 801a912:	46bd      	mov	sp, r7
 801a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a918:	4770      	bx	lr
 801a91a:	bf00      	nop
 801a91c:	20003048 	.word	0x20003048

0801a920 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801a920:	b580      	push	{r7, lr}
 801a922:	b088      	sub	sp, #32
 801a924:	af00      	add	r7, sp, #0
 801a926:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801a928:	4b1f      	ldr	r3, [pc, #124]	@ (801a9a8 <UTIL_SEQ_WaitEvt+0x88>)
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801a92e:	4b1e      	ldr	r3, [pc, #120]	@ (801a9a8 <UTIL_SEQ_WaitEvt+0x88>)
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a936:	d102      	bne.n	801a93e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801a938:	2300      	movs	r3, #0
 801a93a:	61fb      	str	r3, [r7, #28]
 801a93c:	e005      	b.n	801a94a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801a93e:	4b1a      	ldr	r3, [pc, #104]	@ (801a9a8 <UTIL_SEQ_WaitEvt+0x88>)
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	2201      	movs	r2, #1
 801a944:	fa02 f303 	lsl.w	r3, r2, r3
 801a948:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801a94a:	4b18      	ldr	r3, [pc, #96]	@ (801a9ac <UTIL_SEQ_WaitEvt+0x8c>)
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801a950:	4a16      	ldr	r2, [pc, #88]	@ (801a9ac <UTIL_SEQ_WaitEvt+0x8c>)
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801a956:	e003      	b.n	801a960 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801a958:	6879      	ldr	r1, [r7, #4]
 801a95a:	69f8      	ldr	r0, [r7, #28]
 801a95c:	f7e7 f8f3 	bl	8001b46 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801a960:	4b13      	ldr	r3, [pc, #76]	@ (801a9b0 <UTIL_SEQ_WaitEvt+0x90>)
 801a962:	681a      	ldr	r2, [r3, #0]
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	4013      	ands	r3, r2
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d0f5      	beq.n	801a958 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801a96c:	4a0e      	ldr	r2, [pc, #56]	@ (801a9a8 <UTIL_SEQ_WaitEvt+0x88>)
 801a96e:	69bb      	ldr	r3, [r7, #24]
 801a970:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a972:	f3ef 8310 	mrs	r3, PRIMASK
 801a976:	60bb      	str	r3, [r7, #8]
  return(result);
 801a978:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a97a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a97c:	b672      	cpsid	i
}
 801a97e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	43da      	mvns	r2, r3
 801a984:	4b0a      	ldr	r3, [pc, #40]	@ (801a9b0 <UTIL_SEQ_WaitEvt+0x90>)
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	4013      	ands	r3, r2
 801a98a:	4a09      	ldr	r2, [pc, #36]	@ (801a9b0 <UTIL_SEQ_WaitEvt+0x90>)
 801a98c:	6013      	str	r3, [r2, #0]
 801a98e:	693b      	ldr	r3, [r7, #16]
 801a990:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	f383 8810 	msr	PRIMASK, r3
}
 801a998:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801a99a:	4a04      	ldr	r2, [pc, #16]	@ (801a9ac <UTIL_SEQ_WaitEvt+0x8c>)
 801a99c:	697b      	ldr	r3, [r7, #20]
 801a99e:	6013      	str	r3, [r2, #0]
  return;
 801a9a0:	bf00      	nop
}
 801a9a2:	3720      	adds	r7, #32
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	bd80      	pop	{r7, pc}
 801a9a8:	20003050 	.word	0x20003050
 801a9ac:	2000304c 	.word	0x2000304c
 801a9b0:	20003048 	.word	0x20003048

0801a9b4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a9b4:	b480      	push	{r7}
 801a9b6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a9b8:	bf00      	nop
}
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9c0:	4770      	bx	lr

0801a9c2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a9c2:	b480      	push	{r7}
 801a9c4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a9c6:	bf00      	nop
}
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ce:	4770      	bx	lr

0801a9d0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a9d0:	b480      	push	{r7}
 801a9d2:	b085      	sub	sp, #20
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	6078      	str	r0, [r7, #4]
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d101      	bne.n	801a9e6 <SEQ_BitPosition+0x16>
    return 32U;
 801a9e2:	2320      	movs	r3, #32
 801a9e4:	e003      	b.n	801a9ee <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	fab3 f383 	clz	r3, r3
 801a9ec:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 801a9ee:	f1c3 031f 	rsb	r3, r3, #31
 801a9f2:	b2db      	uxtb	r3, r3
}
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	3714      	adds	r7, #20
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9fe:	4770      	bx	lr

0801aa00 <atoi>:
 801aa00:	220a      	movs	r2, #10
 801aa02:	2100      	movs	r1, #0
 801aa04:	f000 bfa6 	b.w	801b954 <strtol>

0801aa08 <malloc>:
 801aa08:	4b02      	ldr	r3, [pc, #8]	@ (801aa14 <malloc+0xc>)
 801aa0a:	4601      	mov	r1, r0
 801aa0c:	6818      	ldr	r0, [r3, #0]
 801aa0e:	f000 b82d 	b.w	801aa6c <_malloc_r>
 801aa12:	bf00      	nop
 801aa14:	200002bc 	.word	0x200002bc

0801aa18 <free>:
 801aa18:	4b02      	ldr	r3, [pc, #8]	@ (801aa24 <free+0xc>)
 801aa1a:	4601      	mov	r1, r0
 801aa1c:	6818      	ldr	r0, [r3, #0]
 801aa1e:	f002 bf0b 	b.w	801d838 <_free_r>
 801aa22:	bf00      	nop
 801aa24:	200002bc 	.word	0x200002bc

0801aa28 <sbrk_aligned>:
 801aa28:	b570      	push	{r4, r5, r6, lr}
 801aa2a:	4e0f      	ldr	r6, [pc, #60]	@ (801aa68 <sbrk_aligned+0x40>)
 801aa2c:	460c      	mov	r4, r1
 801aa2e:	6831      	ldr	r1, [r6, #0]
 801aa30:	4605      	mov	r5, r0
 801aa32:	b911      	cbnz	r1, 801aa3a <sbrk_aligned+0x12>
 801aa34:	f002 f822 	bl	801ca7c <_sbrk_r>
 801aa38:	6030      	str	r0, [r6, #0]
 801aa3a:	4621      	mov	r1, r4
 801aa3c:	4628      	mov	r0, r5
 801aa3e:	f002 f81d 	bl	801ca7c <_sbrk_r>
 801aa42:	1c43      	adds	r3, r0, #1
 801aa44:	d103      	bne.n	801aa4e <sbrk_aligned+0x26>
 801aa46:	f04f 34ff 	mov.w	r4, #4294967295
 801aa4a:	4620      	mov	r0, r4
 801aa4c:	bd70      	pop	{r4, r5, r6, pc}
 801aa4e:	1cc4      	adds	r4, r0, #3
 801aa50:	f024 0403 	bic.w	r4, r4, #3
 801aa54:	42a0      	cmp	r0, r4
 801aa56:	d0f8      	beq.n	801aa4a <sbrk_aligned+0x22>
 801aa58:	1a21      	subs	r1, r4, r0
 801aa5a:	4628      	mov	r0, r5
 801aa5c:	f002 f80e 	bl	801ca7c <_sbrk_r>
 801aa60:	3001      	adds	r0, #1
 801aa62:	d1f2      	bne.n	801aa4a <sbrk_aligned+0x22>
 801aa64:	e7ef      	b.n	801aa46 <sbrk_aligned+0x1e>
 801aa66:	bf00      	nop
 801aa68:	200030dc 	.word	0x200030dc

0801aa6c <_malloc_r>:
 801aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa70:	1ccd      	adds	r5, r1, #3
 801aa72:	f025 0503 	bic.w	r5, r5, #3
 801aa76:	3508      	adds	r5, #8
 801aa78:	2d0c      	cmp	r5, #12
 801aa7a:	bf38      	it	cc
 801aa7c:	250c      	movcc	r5, #12
 801aa7e:	2d00      	cmp	r5, #0
 801aa80:	4606      	mov	r6, r0
 801aa82:	db01      	blt.n	801aa88 <_malloc_r+0x1c>
 801aa84:	42a9      	cmp	r1, r5
 801aa86:	d904      	bls.n	801aa92 <_malloc_r+0x26>
 801aa88:	230c      	movs	r3, #12
 801aa8a:	6033      	str	r3, [r6, #0]
 801aa8c:	2000      	movs	r0, #0
 801aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ab68 <_malloc_r+0xfc>
 801aa96:	f000 f869 	bl	801ab6c <__malloc_lock>
 801aa9a:	f8d8 3000 	ldr.w	r3, [r8]
 801aa9e:	461c      	mov	r4, r3
 801aaa0:	bb44      	cbnz	r4, 801aaf4 <_malloc_r+0x88>
 801aaa2:	4629      	mov	r1, r5
 801aaa4:	4630      	mov	r0, r6
 801aaa6:	f7ff ffbf 	bl	801aa28 <sbrk_aligned>
 801aaaa:	1c43      	adds	r3, r0, #1
 801aaac:	4604      	mov	r4, r0
 801aaae:	d158      	bne.n	801ab62 <_malloc_r+0xf6>
 801aab0:	f8d8 4000 	ldr.w	r4, [r8]
 801aab4:	4627      	mov	r7, r4
 801aab6:	2f00      	cmp	r7, #0
 801aab8:	d143      	bne.n	801ab42 <_malloc_r+0xd6>
 801aaba:	2c00      	cmp	r4, #0
 801aabc:	d04b      	beq.n	801ab56 <_malloc_r+0xea>
 801aabe:	6823      	ldr	r3, [r4, #0]
 801aac0:	4639      	mov	r1, r7
 801aac2:	4630      	mov	r0, r6
 801aac4:	eb04 0903 	add.w	r9, r4, r3
 801aac8:	f001 ffd8 	bl	801ca7c <_sbrk_r>
 801aacc:	4581      	cmp	r9, r0
 801aace:	d142      	bne.n	801ab56 <_malloc_r+0xea>
 801aad0:	6821      	ldr	r1, [r4, #0]
 801aad2:	1a6d      	subs	r5, r5, r1
 801aad4:	4629      	mov	r1, r5
 801aad6:	4630      	mov	r0, r6
 801aad8:	f7ff ffa6 	bl	801aa28 <sbrk_aligned>
 801aadc:	3001      	adds	r0, #1
 801aade:	d03a      	beq.n	801ab56 <_malloc_r+0xea>
 801aae0:	6823      	ldr	r3, [r4, #0]
 801aae2:	442b      	add	r3, r5
 801aae4:	6023      	str	r3, [r4, #0]
 801aae6:	f8d8 3000 	ldr.w	r3, [r8]
 801aaea:	685a      	ldr	r2, [r3, #4]
 801aaec:	bb62      	cbnz	r2, 801ab48 <_malloc_r+0xdc>
 801aaee:	f8c8 7000 	str.w	r7, [r8]
 801aaf2:	e00f      	b.n	801ab14 <_malloc_r+0xa8>
 801aaf4:	6822      	ldr	r2, [r4, #0]
 801aaf6:	1b52      	subs	r2, r2, r5
 801aaf8:	d420      	bmi.n	801ab3c <_malloc_r+0xd0>
 801aafa:	2a0b      	cmp	r2, #11
 801aafc:	d917      	bls.n	801ab2e <_malloc_r+0xc2>
 801aafe:	1961      	adds	r1, r4, r5
 801ab00:	42a3      	cmp	r3, r4
 801ab02:	6025      	str	r5, [r4, #0]
 801ab04:	bf18      	it	ne
 801ab06:	6059      	strne	r1, [r3, #4]
 801ab08:	6863      	ldr	r3, [r4, #4]
 801ab0a:	bf08      	it	eq
 801ab0c:	f8c8 1000 	streq.w	r1, [r8]
 801ab10:	5162      	str	r2, [r4, r5]
 801ab12:	604b      	str	r3, [r1, #4]
 801ab14:	4630      	mov	r0, r6
 801ab16:	f000 f82f 	bl	801ab78 <__malloc_unlock>
 801ab1a:	f104 000b 	add.w	r0, r4, #11
 801ab1e:	1d23      	adds	r3, r4, #4
 801ab20:	f020 0007 	bic.w	r0, r0, #7
 801ab24:	1ac2      	subs	r2, r0, r3
 801ab26:	bf1c      	itt	ne
 801ab28:	1a1b      	subne	r3, r3, r0
 801ab2a:	50a3      	strne	r3, [r4, r2]
 801ab2c:	e7af      	b.n	801aa8e <_malloc_r+0x22>
 801ab2e:	6862      	ldr	r2, [r4, #4]
 801ab30:	42a3      	cmp	r3, r4
 801ab32:	bf0c      	ite	eq
 801ab34:	f8c8 2000 	streq.w	r2, [r8]
 801ab38:	605a      	strne	r2, [r3, #4]
 801ab3a:	e7eb      	b.n	801ab14 <_malloc_r+0xa8>
 801ab3c:	4623      	mov	r3, r4
 801ab3e:	6864      	ldr	r4, [r4, #4]
 801ab40:	e7ae      	b.n	801aaa0 <_malloc_r+0x34>
 801ab42:	463c      	mov	r4, r7
 801ab44:	687f      	ldr	r7, [r7, #4]
 801ab46:	e7b6      	b.n	801aab6 <_malloc_r+0x4a>
 801ab48:	461a      	mov	r2, r3
 801ab4a:	685b      	ldr	r3, [r3, #4]
 801ab4c:	42a3      	cmp	r3, r4
 801ab4e:	d1fb      	bne.n	801ab48 <_malloc_r+0xdc>
 801ab50:	2300      	movs	r3, #0
 801ab52:	6053      	str	r3, [r2, #4]
 801ab54:	e7de      	b.n	801ab14 <_malloc_r+0xa8>
 801ab56:	230c      	movs	r3, #12
 801ab58:	6033      	str	r3, [r6, #0]
 801ab5a:	4630      	mov	r0, r6
 801ab5c:	f000 f80c 	bl	801ab78 <__malloc_unlock>
 801ab60:	e794      	b.n	801aa8c <_malloc_r+0x20>
 801ab62:	6005      	str	r5, [r0, #0]
 801ab64:	e7d6      	b.n	801ab14 <_malloc_r+0xa8>
 801ab66:	bf00      	nop
 801ab68:	200030e0 	.word	0x200030e0

0801ab6c <__malloc_lock>:
 801ab6c:	4801      	ldr	r0, [pc, #4]	@ (801ab74 <__malloc_lock+0x8>)
 801ab6e:	f001 bfd2 	b.w	801cb16 <__retarget_lock_acquire_recursive>
 801ab72:	bf00      	nop
 801ab74:	20003224 	.word	0x20003224

0801ab78 <__malloc_unlock>:
 801ab78:	4801      	ldr	r0, [pc, #4]	@ (801ab80 <__malloc_unlock+0x8>)
 801ab7a:	f001 bfcd 	b.w	801cb18 <__retarget_lock_release_recursive>
 801ab7e:	bf00      	nop
 801ab80:	20003224 	.word	0x20003224

0801ab84 <sulp>:
 801ab84:	b570      	push	{r4, r5, r6, lr}
 801ab86:	4604      	mov	r4, r0
 801ab88:	460d      	mov	r5, r1
 801ab8a:	ec45 4b10 	vmov	d0, r4, r5
 801ab8e:	4616      	mov	r6, r2
 801ab90:	f003 fd5c 	bl	801e64c <__ulp>
 801ab94:	ec51 0b10 	vmov	r0, r1, d0
 801ab98:	b17e      	cbz	r6, 801abba <sulp+0x36>
 801ab9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ab9e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	dd09      	ble.n	801abba <sulp+0x36>
 801aba6:	051b      	lsls	r3, r3, #20
 801aba8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801abac:	2400      	movs	r4, #0
 801abae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801abb2:	4622      	mov	r2, r4
 801abb4:	462b      	mov	r3, r5
 801abb6:	f7e5 fcf7 	bl	80005a8 <__aeabi_dmul>
 801abba:	ec41 0b10 	vmov	d0, r0, r1
 801abbe:	bd70      	pop	{r4, r5, r6, pc}

0801abc0 <_strtod_l>:
 801abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abc4:	b09f      	sub	sp, #124	@ 0x7c
 801abc6:	460c      	mov	r4, r1
 801abc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801abca:	2200      	movs	r2, #0
 801abcc:	921a      	str	r2, [sp, #104]	@ 0x68
 801abce:	9005      	str	r0, [sp, #20]
 801abd0:	f04f 0a00 	mov.w	sl, #0
 801abd4:	f04f 0b00 	mov.w	fp, #0
 801abd8:	460a      	mov	r2, r1
 801abda:	9219      	str	r2, [sp, #100]	@ 0x64
 801abdc:	7811      	ldrb	r1, [r2, #0]
 801abde:	292b      	cmp	r1, #43	@ 0x2b
 801abe0:	d04a      	beq.n	801ac78 <_strtod_l+0xb8>
 801abe2:	d838      	bhi.n	801ac56 <_strtod_l+0x96>
 801abe4:	290d      	cmp	r1, #13
 801abe6:	d832      	bhi.n	801ac4e <_strtod_l+0x8e>
 801abe8:	2908      	cmp	r1, #8
 801abea:	d832      	bhi.n	801ac52 <_strtod_l+0x92>
 801abec:	2900      	cmp	r1, #0
 801abee:	d03b      	beq.n	801ac68 <_strtod_l+0xa8>
 801abf0:	2200      	movs	r2, #0
 801abf2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801abf4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801abf6:	782a      	ldrb	r2, [r5, #0]
 801abf8:	2a30      	cmp	r2, #48	@ 0x30
 801abfa:	f040 80b3 	bne.w	801ad64 <_strtod_l+0x1a4>
 801abfe:	786a      	ldrb	r2, [r5, #1]
 801ac00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ac04:	2a58      	cmp	r2, #88	@ 0x58
 801ac06:	d16e      	bne.n	801ace6 <_strtod_l+0x126>
 801ac08:	9302      	str	r3, [sp, #8]
 801ac0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac0c:	9301      	str	r3, [sp, #4]
 801ac0e:	ab1a      	add	r3, sp, #104	@ 0x68
 801ac10:	9300      	str	r3, [sp, #0]
 801ac12:	4a8e      	ldr	r2, [pc, #568]	@ (801ae4c <_strtod_l+0x28c>)
 801ac14:	9805      	ldr	r0, [sp, #20]
 801ac16:	ab1b      	add	r3, sp, #108	@ 0x6c
 801ac18:	a919      	add	r1, sp, #100	@ 0x64
 801ac1a:	f002 febf 	bl	801d99c <__gethex>
 801ac1e:	f010 060f 	ands.w	r6, r0, #15
 801ac22:	4604      	mov	r4, r0
 801ac24:	d005      	beq.n	801ac32 <_strtod_l+0x72>
 801ac26:	2e06      	cmp	r6, #6
 801ac28:	d128      	bne.n	801ac7c <_strtod_l+0xbc>
 801ac2a:	3501      	adds	r5, #1
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	9519      	str	r5, [sp, #100]	@ 0x64
 801ac30:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ac32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	f040 858e 	bne.w	801b756 <_strtod_l+0xb96>
 801ac3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac3c:	b1cb      	cbz	r3, 801ac72 <_strtod_l+0xb2>
 801ac3e:	4652      	mov	r2, sl
 801ac40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801ac44:	ec43 2b10 	vmov	d0, r2, r3
 801ac48:	b01f      	add	sp, #124	@ 0x7c
 801ac4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac4e:	2920      	cmp	r1, #32
 801ac50:	d1ce      	bne.n	801abf0 <_strtod_l+0x30>
 801ac52:	3201      	adds	r2, #1
 801ac54:	e7c1      	b.n	801abda <_strtod_l+0x1a>
 801ac56:	292d      	cmp	r1, #45	@ 0x2d
 801ac58:	d1ca      	bne.n	801abf0 <_strtod_l+0x30>
 801ac5a:	2101      	movs	r1, #1
 801ac5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ac5e:	1c51      	adds	r1, r2, #1
 801ac60:	9119      	str	r1, [sp, #100]	@ 0x64
 801ac62:	7852      	ldrb	r2, [r2, #1]
 801ac64:	2a00      	cmp	r2, #0
 801ac66:	d1c5      	bne.n	801abf4 <_strtod_l+0x34>
 801ac68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ac6a:	9419      	str	r4, [sp, #100]	@ 0x64
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	f040 8570 	bne.w	801b752 <_strtod_l+0xb92>
 801ac72:	4652      	mov	r2, sl
 801ac74:	465b      	mov	r3, fp
 801ac76:	e7e5      	b.n	801ac44 <_strtod_l+0x84>
 801ac78:	2100      	movs	r1, #0
 801ac7a:	e7ef      	b.n	801ac5c <_strtod_l+0x9c>
 801ac7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ac7e:	b13a      	cbz	r2, 801ac90 <_strtod_l+0xd0>
 801ac80:	2135      	movs	r1, #53	@ 0x35
 801ac82:	a81c      	add	r0, sp, #112	@ 0x70
 801ac84:	f003 fddc 	bl	801e840 <__copybits>
 801ac88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ac8a:	9805      	ldr	r0, [sp, #20]
 801ac8c:	f003 f9aa 	bl	801dfe4 <_Bfree>
 801ac90:	3e01      	subs	r6, #1
 801ac92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ac94:	2e04      	cmp	r6, #4
 801ac96:	d806      	bhi.n	801aca6 <_strtod_l+0xe6>
 801ac98:	e8df f006 	tbb	[pc, r6]
 801ac9c:	201d0314 	.word	0x201d0314
 801aca0:	14          	.byte	0x14
 801aca1:	00          	.byte	0x00
 801aca2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801aca6:	05e1      	lsls	r1, r4, #23
 801aca8:	bf48      	it	mi
 801acaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801acae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801acb2:	0d1b      	lsrs	r3, r3, #20
 801acb4:	051b      	lsls	r3, r3, #20
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d1bb      	bne.n	801ac32 <_strtod_l+0x72>
 801acba:	f001 ff01 	bl	801cac0 <__errno>
 801acbe:	2322      	movs	r3, #34	@ 0x22
 801acc0:	6003      	str	r3, [r0, #0]
 801acc2:	e7b6      	b.n	801ac32 <_strtod_l+0x72>
 801acc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801acc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801accc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801acd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801acd4:	e7e7      	b.n	801aca6 <_strtod_l+0xe6>
 801acd6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801ae54 <_strtod_l+0x294>
 801acda:	e7e4      	b.n	801aca6 <_strtod_l+0xe6>
 801acdc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801ace0:	f04f 3aff 	mov.w	sl, #4294967295
 801ace4:	e7df      	b.n	801aca6 <_strtod_l+0xe6>
 801ace6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ace8:	1c5a      	adds	r2, r3, #1
 801acea:	9219      	str	r2, [sp, #100]	@ 0x64
 801acec:	785b      	ldrb	r3, [r3, #1]
 801acee:	2b30      	cmp	r3, #48	@ 0x30
 801acf0:	d0f9      	beq.n	801ace6 <_strtod_l+0x126>
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d09d      	beq.n	801ac32 <_strtod_l+0x72>
 801acf6:	2301      	movs	r3, #1
 801acf8:	9309      	str	r3, [sp, #36]	@ 0x24
 801acfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801acfc:	930c      	str	r3, [sp, #48]	@ 0x30
 801acfe:	2300      	movs	r3, #0
 801ad00:	9308      	str	r3, [sp, #32]
 801ad02:	930a      	str	r3, [sp, #40]	@ 0x28
 801ad04:	461f      	mov	r7, r3
 801ad06:	220a      	movs	r2, #10
 801ad08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ad0a:	7805      	ldrb	r5, [r0, #0]
 801ad0c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801ad10:	b2d9      	uxtb	r1, r3
 801ad12:	2909      	cmp	r1, #9
 801ad14:	d928      	bls.n	801ad68 <_strtod_l+0x1a8>
 801ad16:	494e      	ldr	r1, [pc, #312]	@ (801ae50 <_strtod_l+0x290>)
 801ad18:	2201      	movs	r2, #1
 801ad1a:	f001 fdf2 	bl	801c902 <strncmp>
 801ad1e:	2800      	cmp	r0, #0
 801ad20:	d032      	beq.n	801ad88 <_strtod_l+0x1c8>
 801ad22:	2000      	movs	r0, #0
 801ad24:	462a      	mov	r2, r5
 801ad26:	4681      	mov	r9, r0
 801ad28:	463d      	mov	r5, r7
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	2a65      	cmp	r2, #101	@ 0x65
 801ad2e:	d001      	beq.n	801ad34 <_strtod_l+0x174>
 801ad30:	2a45      	cmp	r2, #69	@ 0x45
 801ad32:	d114      	bne.n	801ad5e <_strtod_l+0x19e>
 801ad34:	b91d      	cbnz	r5, 801ad3e <_strtod_l+0x17e>
 801ad36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad38:	4302      	orrs	r2, r0
 801ad3a:	d095      	beq.n	801ac68 <_strtod_l+0xa8>
 801ad3c:	2500      	movs	r5, #0
 801ad3e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801ad40:	1c62      	adds	r2, r4, #1
 801ad42:	9219      	str	r2, [sp, #100]	@ 0x64
 801ad44:	7862      	ldrb	r2, [r4, #1]
 801ad46:	2a2b      	cmp	r2, #43	@ 0x2b
 801ad48:	d077      	beq.n	801ae3a <_strtod_l+0x27a>
 801ad4a:	2a2d      	cmp	r2, #45	@ 0x2d
 801ad4c:	d07b      	beq.n	801ae46 <_strtod_l+0x286>
 801ad4e:	f04f 0c00 	mov.w	ip, #0
 801ad52:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801ad56:	2909      	cmp	r1, #9
 801ad58:	f240 8082 	bls.w	801ae60 <_strtod_l+0x2a0>
 801ad5c:	9419      	str	r4, [sp, #100]	@ 0x64
 801ad5e:	f04f 0800 	mov.w	r8, #0
 801ad62:	e0a2      	b.n	801aeaa <_strtod_l+0x2ea>
 801ad64:	2300      	movs	r3, #0
 801ad66:	e7c7      	b.n	801acf8 <_strtod_l+0x138>
 801ad68:	2f08      	cmp	r7, #8
 801ad6a:	bfd5      	itete	le
 801ad6c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801ad6e:	9908      	ldrgt	r1, [sp, #32]
 801ad70:	fb02 3301 	mlale	r3, r2, r1, r3
 801ad74:	fb02 3301 	mlagt	r3, r2, r1, r3
 801ad78:	f100 0001 	add.w	r0, r0, #1
 801ad7c:	bfd4      	ite	le
 801ad7e:	930a      	strle	r3, [sp, #40]	@ 0x28
 801ad80:	9308      	strgt	r3, [sp, #32]
 801ad82:	3701      	adds	r7, #1
 801ad84:	9019      	str	r0, [sp, #100]	@ 0x64
 801ad86:	e7bf      	b.n	801ad08 <_strtod_l+0x148>
 801ad88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ad8a:	1c5a      	adds	r2, r3, #1
 801ad8c:	9219      	str	r2, [sp, #100]	@ 0x64
 801ad8e:	785a      	ldrb	r2, [r3, #1]
 801ad90:	b37f      	cbz	r7, 801adf2 <_strtod_l+0x232>
 801ad92:	4681      	mov	r9, r0
 801ad94:	463d      	mov	r5, r7
 801ad96:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801ad9a:	2b09      	cmp	r3, #9
 801ad9c:	d912      	bls.n	801adc4 <_strtod_l+0x204>
 801ad9e:	2301      	movs	r3, #1
 801ada0:	e7c4      	b.n	801ad2c <_strtod_l+0x16c>
 801ada2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ada4:	1c5a      	adds	r2, r3, #1
 801ada6:	9219      	str	r2, [sp, #100]	@ 0x64
 801ada8:	785a      	ldrb	r2, [r3, #1]
 801adaa:	3001      	adds	r0, #1
 801adac:	2a30      	cmp	r2, #48	@ 0x30
 801adae:	d0f8      	beq.n	801ada2 <_strtod_l+0x1e2>
 801adb0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801adb4:	2b08      	cmp	r3, #8
 801adb6:	f200 84d3 	bhi.w	801b760 <_strtod_l+0xba0>
 801adba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801adbc:	930c      	str	r3, [sp, #48]	@ 0x30
 801adbe:	4681      	mov	r9, r0
 801adc0:	2000      	movs	r0, #0
 801adc2:	4605      	mov	r5, r0
 801adc4:	3a30      	subs	r2, #48	@ 0x30
 801adc6:	f100 0301 	add.w	r3, r0, #1
 801adca:	d02a      	beq.n	801ae22 <_strtod_l+0x262>
 801adcc:	4499      	add	r9, r3
 801adce:	eb00 0c05 	add.w	ip, r0, r5
 801add2:	462b      	mov	r3, r5
 801add4:	210a      	movs	r1, #10
 801add6:	4563      	cmp	r3, ip
 801add8:	d10d      	bne.n	801adf6 <_strtod_l+0x236>
 801adda:	1c69      	adds	r1, r5, #1
 801addc:	4401      	add	r1, r0
 801adde:	4428      	add	r0, r5
 801ade0:	2808      	cmp	r0, #8
 801ade2:	dc16      	bgt.n	801ae12 <_strtod_l+0x252>
 801ade4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ade6:	230a      	movs	r3, #10
 801ade8:	fb03 2300 	mla	r3, r3, r0, r2
 801adec:	930a      	str	r3, [sp, #40]	@ 0x28
 801adee:	2300      	movs	r3, #0
 801adf0:	e018      	b.n	801ae24 <_strtod_l+0x264>
 801adf2:	4638      	mov	r0, r7
 801adf4:	e7da      	b.n	801adac <_strtod_l+0x1ec>
 801adf6:	2b08      	cmp	r3, #8
 801adf8:	f103 0301 	add.w	r3, r3, #1
 801adfc:	dc03      	bgt.n	801ae06 <_strtod_l+0x246>
 801adfe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ae00:	434e      	muls	r6, r1
 801ae02:	960a      	str	r6, [sp, #40]	@ 0x28
 801ae04:	e7e7      	b.n	801add6 <_strtod_l+0x216>
 801ae06:	2b10      	cmp	r3, #16
 801ae08:	bfde      	ittt	le
 801ae0a:	9e08      	ldrle	r6, [sp, #32]
 801ae0c:	434e      	mulle	r6, r1
 801ae0e:	9608      	strle	r6, [sp, #32]
 801ae10:	e7e1      	b.n	801add6 <_strtod_l+0x216>
 801ae12:	280f      	cmp	r0, #15
 801ae14:	dceb      	bgt.n	801adee <_strtod_l+0x22e>
 801ae16:	9808      	ldr	r0, [sp, #32]
 801ae18:	230a      	movs	r3, #10
 801ae1a:	fb03 2300 	mla	r3, r3, r0, r2
 801ae1e:	9308      	str	r3, [sp, #32]
 801ae20:	e7e5      	b.n	801adee <_strtod_l+0x22e>
 801ae22:	4629      	mov	r1, r5
 801ae24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ae26:	1c50      	adds	r0, r2, #1
 801ae28:	9019      	str	r0, [sp, #100]	@ 0x64
 801ae2a:	7852      	ldrb	r2, [r2, #1]
 801ae2c:	4618      	mov	r0, r3
 801ae2e:	460d      	mov	r5, r1
 801ae30:	e7b1      	b.n	801ad96 <_strtod_l+0x1d6>
 801ae32:	f04f 0900 	mov.w	r9, #0
 801ae36:	2301      	movs	r3, #1
 801ae38:	e77d      	b.n	801ad36 <_strtod_l+0x176>
 801ae3a:	f04f 0c00 	mov.w	ip, #0
 801ae3e:	1ca2      	adds	r2, r4, #2
 801ae40:	9219      	str	r2, [sp, #100]	@ 0x64
 801ae42:	78a2      	ldrb	r2, [r4, #2]
 801ae44:	e785      	b.n	801ad52 <_strtod_l+0x192>
 801ae46:	f04f 0c01 	mov.w	ip, #1
 801ae4a:	e7f8      	b.n	801ae3e <_strtod_l+0x27e>
 801ae4c:	08023270 	.word	0x08023270
 801ae50:	08023258 	.word	0x08023258
 801ae54:	7ff00000 	.word	0x7ff00000
 801ae58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ae5a:	1c51      	adds	r1, r2, #1
 801ae5c:	9119      	str	r1, [sp, #100]	@ 0x64
 801ae5e:	7852      	ldrb	r2, [r2, #1]
 801ae60:	2a30      	cmp	r2, #48	@ 0x30
 801ae62:	d0f9      	beq.n	801ae58 <_strtod_l+0x298>
 801ae64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801ae68:	2908      	cmp	r1, #8
 801ae6a:	f63f af78 	bhi.w	801ad5e <_strtod_l+0x19e>
 801ae6e:	3a30      	subs	r2, #48	@ 0x30
 801ae70:	920e      	str	r2, [sp, #56]	@ 0x38
 801ae72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ae74:	920f      	str	r2, [sp, #60]	@ 0x3c
 801ae76:	f04f 080a 	mov.w	r8, #10
 801ae7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ae7c:	1c56      	adds	r6, r2, #1
 801ae7e:	9619      	str	r6, [sp, #100]	@ 0x64
 801ae80:	7852      	ldrb	r2, [r2, #1]
 801ae82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801ae86:	f1be 0f09 	cmp.w	lr, #9
 801ae8a:	d939      	bls.n	801af00 <_strtod_l+0x340>
 801ae8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ae8e:	1a76      	subs	r6, r6, r1
 801ae90:	2e08      	cmp	r6, #8
 801ae92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801ae96:	dc03      	bgt.n	801aea0 <_strtod_l+0x2e0>
 801ae98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ae9a:	4588      	cmp	r8, r1
 801ae9c:	bfa8      	it	ge
 801ae9e:	4688      	movge	r8, r1
 801aea0:	f1bc 0f00 	cmp.w	ip, #0
 801aea4:	d001      	beq.n	801aeaa <_strtod_l+0x2ea>
 801aea6:	f1c8 0800 	rsb	r8, r8, #0
 801aeaa:	2d00      	cmp	r5, #0
 801aeac:	d14e      	bne.n	801af4c <_strtod_l+0x38c>
 801aeae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aeb0:	4308      	orrs	r0, r1
 801aeb2:	f47f aebe 	bne.w	801ac32 <_strtod_l+0x72>
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	f47f aed6 	bne.w	801ac68 <_strtod_l+0xa8>
 801aebc:	2a69      	cmp	r2, #105	@ 0x69
 801aebe:	d028      	beq.n	801af12 <_strtod_l+0x352>
 801aec0:	dc25      	bgt.n	801af0e <_strtod_l+0x34e>
 801aec2:	2a49      	cmp	r2, #73	@ 0x49
 801aec4:	d025      	beq.n	801af12 <_strtod_l+0x352>
 801aec6:	2a4e      	cmp	r2, #78	@ 0x4e
 801aec8:	f47f aece 	bne.w	801ac68 <_strtod_l+0xa8>
 801aecc:	499b      	ldr	r1, [pc, #620]	@ (801b13c <_strtod_l+0x57c>)
 801aece:	a819      	add	r0, sp, #100	@ 0x64
 801aed0:	f002 ff86 	bl	801dde0 <__match>
 801aed4:	2800      	cmp	r0, #0
 801aed6:	f43f aec7 	beq.w	801ac68 <_strtod_l+0xa8>
 801aeda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801aedc:	781b      	ldrb	r3, [r3, #0]
 801aede:	2b28      	cmp	r3, #40	@ 0x28
 801aee0:	d12e      	bne.n	801af40 <_strtod_l+0x380>
 801aee2:	4997      	ldr	r1, [pc, #604]	@ (801b140 <_strtod_l+0x580>)
 801aee4:	aa1c      	add	r2, sp, #112	@ 0x70
 801aee6:	a819      	add	r0, sp, #100	@ 0x64
 801aee8:	f002 ff8e 	bl	801de08 <__hexnan>
 801aeec:	2805      	cmp	r0, #5
 801aeee:	d127      	bne.n	801af40 <_strtod_l+0x380>
 801aef0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aef2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801aef6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801aefa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801aefe:	e698      	b.n	801ac32 <_strtod_l+0x72>
 801af00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801af02:	fb08 2101 	mla	r1, r8, r1, r2
 801af06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801af0a:	920e      	str	r2, [sp, #56]	@ 0x38
 801af0c:	e7b5      	b.n	801ae7a <_strtod_l+0x2ba>
 801af0e:	2a6e      	cmp	r2, #110	@ 0x6e
 801af10:	e7da      	b.n	801aec8 <_strtod_l+0x308>
 801af12:	498c      	ldr	r1, [pc, #560]	@ (801b144 <_strtod_l+0x584>)
 801af14:	a819      	add	r0, sp, #100	@ 0x64
 801af16:	f002 ff63 	bl	801dde0 <__match>
 801af1a:	2800      	cmp	r0, #0
 801af1c:	f43f aea4 	beq.w	801ac68 <_strtod_l+0xa8>
 801af20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801af22:	4989      	ldr	r1, [pc, #548]	@ (801b148 <_strtod_l+0x588>)
 801af24:	3b01      	subs	r3, #1
 801af26:	a819      	add	r0, sp, #100	@ 0x64
 801af28:	9319      	str	r3, [sp, #100]	@ 0x64
 801af2a:	f002 ff59 	bl	801dde0 <__match>
 801af2e:	b910      	cbnz	r0, 801af36 <_strtod_l+0x376>
 801af30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801af32:	3301      	adds	r3, #1
 801af34:	9319      	str	r3, [sp, #100]	@ 0x64
 801af36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801b158 <_strtod_l+0x598>
 801af3a:	f04f 0a00 	mov.w	sl, #0
 801af3e:	e678      	b.n	801ac32 <_strtod_l+0x72>
 801af40:	4882      	ldr	r0, [pc, #520]	@ (801b14c <_strtod_l+0x58c>)
 801af42:	f001 fe01 	bl	801cb48 <nan>
 801af46:	ec5b ab10 	vmov	sl, fp, d0
 801af4a:	e672      	b.n	801ac32 <_strtod_l+0x72>
 801af4c:	eba8 0309 	sub.w	r3, r8, r9
 801af50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801af52:	9309      	str	r3, [sp, #36]	@ 0x24
 801af54:	2f00      	cmp	r7, #0
 801af56:	bf08      	it	eq
 801af58:	462f      	moveq	r7, r5
 801af5a:	2d10      	cmp	r5, #16
 801af5c:	462c      	mov	r4, r5
 801af5e:	bfa8      	it	ge
 801af60:	2410      	movge	r4, #16
 801af62:	f7e5 faa7 	bl	80004b4 <__aeabi_ui2d>
 801af66:	2d09      	cmp	r5, #9
 801af68:	4682      	mov	sl, r0
 801af6a:	468b      	mov	fp, r1
 801af6c:	dc13      	bgt.n	801af96 <_strtod_l+0x3d6>
 801af6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af70:	2b00      	cmp	r3, #0
 801af72:	f43f ae5e 	beq.w	801ac32 <_strtod_l+0x72>
 801af76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af78:	dd78      	ble.n	801b06c <_strtod_l+0x4ac>
 801af7a:	2b16      	cmp	r3, #22
 801af7c:	dc5f      	bgt.n	801b03e <_strtod_l+0x47e>
 801af7e:	4974      	ldr	r1, [pc, #464]	@ (801b150 <_strtod_l+0x590>)
 801af80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801af84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af88:	4652      	mov	r2, sl
 801af8a:	465b      	mov	r3, fp
 801af8c:	f7e5 fb0c 	bl	80005a8 <__aeabi_dmul>
 801af90:	4682      	mov	sl, r0
 801af92:	468b      	mov	fp, r1
 801af94:	e64d      	b.n	801ac32 <_strtod_l+0x72>
 801af96:	4b6e      	ldr	r3, [pc, #440]	@ (801b150 <_strtod_l+0x590>)
 801af98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801af9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801afa0:	f7e5 fb02 	bl	80005a8 <__aeabi_dmul>
 801afa4:	4682      	mov	sl, r0
 801afa6:	9808      	ldr	r0, [sp, #32]
 801afa8:	468b      	mov	fp, r1
 801afaa:	f7e5 fa83 	bl	80004b4 <__aeabi_ui2d>
 801afae:	4602      	mov	r2, r0
 801afb0:	460b      	mov	r3, r1
 801afb2:	4650      	mov	r0, sl
 801afb4:	4659      	mov	r1, fp
 801afb6:	f7e5 f941 	bl	800023c <__adddf3>
 801afba:	2d0f      	cmp	r5, #15
 801afbc:	4682      	mov	sl, r0
 801afbe:	468b      	mov	fp, r1
 801afc0:	ddd5      	ble.n	801af6e <_strtod_l+0x3ae>
 801afc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801afc4:	1b2c      	subs	r4, r5, r4
 801afc6:	441c      	add	r4, r3
 801afc8:	2c00      	cmp	r4, #0
 801afca:	f340 8096 	ble.w	801b0fa <_strtod_l+0x53a>
 801afce:	f014 030f 	ands.w	r3, r4, #15
 801afd2:	d00a      	beq.n	801afea <_strtod_l+0x42a>
 801afd4:	495e      	ldr	r1, [pc, #376]	@ (801b150 <_strtod_l+0x590>)
 801afd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801afda:	4652      	mov	r2, sl
 801afdc:	465b      	mov	r3, fp
 801afde:	e9d1 0100 	ldrd	r0, r1, [r1]
 801afe2:	f7e5 fae1 	bl	80005a8 <__aeabi_dmul>
 801afe6:	4682      	mov	sl, r0
 801afe8:	468b      	mov	fp, r1
 801afea:	f034 040f 	bics.w	r4, r4, #15
 801afee:	d073      	beq.n	801b0d8 <_strtod_l+0x518>
 801aff0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801aff4:	dd48      	ble.n	801b088 <_strtod_l+0x4c8>
 801aff6:	2400      	movs	r4, #0
 801aff8:	46a0      	mov	r8, r4
 801affa:	940a      	str	r4, [sp, #40]	@ 0x28
 801affc:	46a1      	mov	r9, r4
 801affe:	9a05      	ldr	r2, [sp, #20]
 801b000:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801b158 <_strtod_l+0x598>
 801b004:	2322      	movs	r3, #34	@ 0x22
 801b006:	6013      	str	r3, [r2, #0]
 801b008:	f04f 0a00 	mov.w	sl, #0
 801b00c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b00e:	2b00      	cmp	r3, #0
 801b010:	f43f ae0f 	beq.w	801ac32 <_strtod_l+0x72>
 801b014:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b016:	9805      	ldr	r0, [sp, #20]
 801b018:	f002 ffe4 	bl	801dfe4 <_Bfree>
 801b01c:	9805      	ldr	r0, [sp, #20]
 801b01e:	4649      	mov	r1, r9
 801b020:	f002 ffe0 	bl	801dfe4 <_Bfree>
 801b024:	9805      	ldr	r0, [sp, #20]
 801b026:	4641      	mov	r1, r8
 801b028:	f002 ffdc 	bl	801dfe4 <_Bfree>
 801b02c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b02e:	9805      	ldr	r0, [sp, #20]
 801b030:	f002 ffd8 	bl	801dfe4 <_Bfree>
 801b034:	9805      	ldr	r0, [sp, #20]
 801b036:	4621      	mov	r1, r4
 801b038:	f002 ffd4 	bl	801dfe4 <_Bfree>
 801b03c:	e5f9      	b.n	801ac32 <_strtod_l+0x72>
 801b03e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b040:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801b044:	4293      	cmp	r3, r2
 801b046:	dbbc      	blt.n	801afc2 <_strtod_l+0x402>
 801b048:	4c41      	ldr	r4, [pc, #260]	@ (801b150 <_strtod_l+0x590>)
 801b04a:	f1c5 050f 	rsb	r5, r5, #15
 801b04e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b052:	4652      	mov	r2, sl
 801b054:	465b      	mov	r3, fp
 801b056:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b05a:	f7e5 faa5 	bl	80005a8 <__aeabi_dmul>
 801b05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b060:	1b5d      	subs	r5, r3, r5
 801b062:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b066:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b06a:	e78f      	b.n	801af8c <_strtod_l+0x3cc>
 801b06c:	3316      	adds	r3, #22
 801b06e:	dba8      	blt.n	801afc2 <_strtod_l+0x402>
 801b070:	4b37      	ldr	r3, [pc, #220]	@ (801b150 <_strtod_l+0x590>)
 801b072:	eba9 0808 	sub.w	r8, r9, r8
 801b076:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801b07a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801b07e:	4650      	mov	r0, sl
 801b080:	4659      	mov	r1, fp
 801b082:	f7e5 fbbb 	bl	80007fc <__aeabi_ddiv>
 801b086:	e783      	b.n	801af90 <_strtod_l+0x3d0>
 801b088:	4b32      	ldr	r3, [pc, #200]	@ (801b154 <_strtod_l+0x594>)
 801b08a:	9308      	str	r3, [sp, #32]
 801b08c:	2300      	movs	r3, #0
 801b08e:	1124      	asrs	r4, r4, #4
 801b090:	4650      	mov	r0, sl
 801b092:	4659      	mov	r1, fp
 801b094:	461e      	mov	r6, r3
 801b096:	2c01      	cmp	r4, #1
 801b098:	dc21      	bgt.n	801b0de <_strtod_l+0x51e>
 801b09a:	b10b      	cbz	r3, 801b0a0 <_strtod_l+0x4e0>
 801b09c:	4682      	mov	sl, r0
 801b09e:	468b      	mov	fp, r1
 801b0a0:	492c      	ldr	r1, [pc, #176]	@ (801b154 <_strtod_l+0x594>)
 801b0a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801b0a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801b0aa:	4652      	mov	r2, sl
 801b0ac:	465b      	mov	r3, fp
 801b0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0b2:	f7e5 fa79 	bl	80005a8 <__aeabi_dmul>
 801b0b6:	4b28      	ldr	r3, [pc, #160]	@ (801b158 <_strtod_l+0x598>)
 801b0b8:	460a      	mov	r2, r1
 801b0ba:	400b      	ands	r3, r1
 801b0bc:	4927      	ldr	r1, [pc, #156]	@ (801b15c <_strtod_l+0x59c>)
 801b0be:	428b      	cmp	r3, r1
 801b0c0:	4682      	mov	sl, r0
 801b0c2:	d898      	bhi.n	801aff6 <_strtod_l+0x436>
 801b0c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801b0c8:	428b      	cmp	r3, r1
 801b0ca:	bf86      	itte	hi
 801b0cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801b160 <_strtod_l+0x5a0>
 801b0d0:	f04f 3aff 	movhi.w	sl, #4294967295
 801b0d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801b0d8:	2300      	movs	r3, #0
 801b0da:	9308      	str	r3, [sp, #32]
 801b0dc:	e07a      	b.n	801b1d4 <_strtod_l+0x614>
 801b0de:	07e2      	lsls	r2, r4, #31
 801b0e0:	d505      	bpl.n	801b0ee <_strtod_l+0x52e>
 801b0e2:	9b08      	ldr	r3, [sp, #32]
 801b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e8:	f7e5 fa5e 	bl	80005a8 <__aeabi_dmul>
 801b0ec:	2301      	movs	r3, #1
 801b0ee:	9a08      	ldr	r2, [sp, #32]
 801b0f0:	3208      	adds	r2, #8
 801b0f2:	3601      	adds	r6, #1
 801b0f4:	1064      	asrs	r4, r4, #1
 801b0f6:	9208      	str	r2, [sp, #32]
 801b0f8:	e7cd      	b.n	801b096 <_strtod_l+0x4d6>
 801b0fa:	d0ed      	beq.n	801b0d8 <_strtod_l+0x518>
 801b0fc:	4264      	negs	r4, r4
 801b0fe:	f014 020f 	ands.w	r2, r4, #15
 801b102:	d00a      	beq.n	801b11a <_strtod_l+0x55a>
 801b104:	4b12      	ldr	r3, [pc, #72]	@ (801b150 <_strtod_l+0x590>)
 801b106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b10a:	4650      	mov	r0, sl
 801b10c:	4659      	mov	r1, fp
 801b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b112:	f7e5 fb73 	bl	80007fc <__aeabi_ddiv>
 801b116:	4682      	mov	sl, r0
 801b118:	468b      	mov	fp, r1
 801b11a:	1124      	asrs	r4, r4, #4
 801b11c:	d0dc      	beq.n	801b0d8 <_strtod_l+0x518>
 801b11e:	2c1f      	cmp	r4, #31
 801b120:	dd20      	ble.n	801b164 <_strtod_l+0x5a4>
 801b122:	2400      	movs	r4, #0
 801b124:	46a0      	mov	r8, r4
 801b126:	940a      	str	r4, [sp, #40]	@ 0x28
 801b128:	46a1      	mov	r9, r4
 801b12a:	9a05      	ldr	r2, [sp, #20]
 801b12c:	2322      	movs	r3, #34	@ 0x22
 801b12e:	f04f 0a00 	mov.w	sl, #0
 801b132:	f04f 0b00 	mov.w	fp, #0
 801b136:	6013      	str	r3, [r2, #0]
 801b138:	e768      	b.n	801b00c <_strtod_l+0x44c>
 801b13a:	bf00      	nop
 801b13c:	080233be 	.word	0x080233be
 801b140:	0802325c 	.word	0x0802325c
 801b144:	080233b6 	.word	0x080233b6
 801b148:	080234a2 	.word	0x080234a2
 801b14c:	0802349e 	.word	0x0802349e
 801b150:	08023608 	.word	0x08023608
 801b154:	080235e0 	.word	0x080235e0
 801b158:	7ff00000 	.word	0x7ff00000
 801b15c:	7ca00000 	.word	0x7ca00000
 801b160:	7fefffff 	.word	0x7fefffff
 801b164:	f014 0310 	ands.w	r3, r4, #16
 801b168:	bf18      	it	ne
 801b16a:	236a      	movne	r3, #106	@ 0x6a
 801b16c:	4ea9      	ldr	r6, [pc, #676]	@ (801b414 <_strtod_l+0x854>)
 801b16e:	9308      	str	r3, [sp, #32]
 801b170:	4650      	mov	r0, sl
 801b172:	4659      	mov	r1, fp
 801b174:	2300      	movs	r3, #0
 801b176:	07e2      	lsls	r2, r4, #31
 801b178:	d504      	bpl.n	801b184 <_strtod_l+0x5c4>
 801b17a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b17e:	f7e5 fa13 	bl	80005a8 <__aeabi_dmul>
 801b182:	2301      	movs	r3, #1
 801b184:	1064      	asrs	r4, r4, #1
 801b186:	f106 0608 	add.w	r6, r6, #8
 801b18a:	d1f4      	bne.n	801b176 <_strtod_l+0x5b6>
 801b18c:	b10b      	cbz	r3, 801b192 <_strtod_l+0x5d2>
 801b18e:	4682      	mov	sl, r0
 801b190:	468b      	mov	fp, r1
 801b192:	9b08      	ldr	r3, [sp, #32]
 801b194:	b1b3      	cbz	r3, 801b1c4 <_strtod_l+0x604>
 801b196:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801b19a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	4659      	mov	r1, fp
 801b1a2:	dd0f      	ble.n	801b1c4 <_strtod_l+0x604>
 801b1a4:	2b1f      	cmp	r3, #31
 801b1a6:	dd55      	ble.n	801b254 <_strtod_l+0x694>
 801b1a8:	2b34      	cmp	r3, #52	@ 0x34
 801b1aa:	bfde      	ittt	le
 801b1ac:	f04f 33ff 	movle.w	r3, #4294967295
 801b1b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801b1b4:	4093      	lslle	r3, r2
 801b1b6:	f04f 0a00 	mov.w	sl, #0
 801b1ba:	bfcc      	ite	gt
 801b1bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801b1c0:	ea03 0b01 	andle.w	fp, r3, r1
 801b1c4:	2200      	movs	r2, #0
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	4650      	mov	r0, sl
 801b1ca:	4659      	mov	r1, fp
 801b1cc:	f7e5 fc54 	bl	8000a78 <__aeabi_dcmpeq>
 801b1d0:	2800      	cmp	r0, #0
 801b1d2:	d1a6      	bne.n	801b122 <_strtod_l+0x562>
 801b1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b1d6:	9300      	str	r3, [sp, #0]
 801b1d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b1da:	9805      	ldr	r0, [sp, #20]
 801b1dc:	462b      	mov	r3, r5
 801b1de:	463a      	mov	r2, r7
 801b1e0:	f002 ff68 	bl	801e0b4 <__s2b>
 801b1e4:	900a      	str	r0, [sp, #40]	@ 0x28
 801b1e6:	2800      	cmp	r0, #0
 801b1e8:	f43f af05 	beq.w	801aff6 <_strtod_l+0x436>
 801b1ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b1ee:	2a00      	cmp	r2, #0
 801b1f0:	eba9 0308 	sub.w	r3, r9, r8
 801b1f4:	bfa8      	it	ge
 801b1f6:	2300      	movge	r3, #0
 801b1f8:	9312      	str	r3, [sp, #72]	@ 0x48
 801b1fa:	2400      	movs	r4, #0
 801b1fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801b200:	9316      	str	r3, [sp, #88]	@ 0x58
 801b202:	46a0      	mov	r8, r4
 801b204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b206:	9805      	ldr	r0, [sp, #20]
 801b208:	6859      	ldr	r1, [r3, #4]
 801b20a:	f002 feab 	bl	801df64 <_Balloc>
 801b20e:	4681      	mov	r9, r0
 801b210:	2800      	cmp	r0, #0
 801b212:	f43f aef4 	beq.w	801affe <_strtod_l+0x43e>
 801b216:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b218:	691a      	ldr	r2, [r3, #16]
 801b21a:	3202      	adds	r2, #2
 801b21c:	f103 010c 	add.w	r1, r3, #12
 801b220:	0092      	lsls	r2, r2, #2
 801b222:	300c      	adds	r0, #12
 801b224:	f001 fc81 	bl	801cb2a <memcpy>
 801b228:	ec4b ab10 	vmov	d0, sl, fp
 801b22c:	9805      	ldr	r0, [sp, #20]
 801b22e:	aa1c      	add	r2, sp, #112	@ 0x70
 801b230:	a91b      	add	r1, sp, #108	@ 0x6c
 801b232:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801b236:	f003 fa79 	bl	801e72c <__d2b>
 801b23a:	901a      	str	r0, [sp, #104]	@ 0x68
 801b23c:	2800      	cmp	r0, #0
 801b23e:	f43f aede 	beq.w	801affe <_strtod_l+0x43e>
 801b242:	9805      	ldr	r0, [sp, #20]
 801b244:	2101      	movs	r1, #1
 801b246:	f002 ffcb 	bl	801e1e0 <__i2b>
 801b24a:	4680      	mov	r8, r0
 801b24c:	b948      	cbnz	r0, 801b262 <_strtod_l+0x6a2>
 801b24e:	f04f 0800 	mov.w	r8, #0
 801b252:	e6d4      	b.n	801affe <_strtod_l+0x43e>
 801b254:	f04f 32ff 	mov.w	r2, #4294967295
 801b258:	fa02 f303 	lsl.w	r3, r2, r3
 801b25c:	ea03 0a0a 	and.w	sl, r3, sl
 801b260:	e7b0      	b.n	801b1c4 <_strtod_l+0x604>
 801b262:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801b264:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801b266:	2d00      	cmp	r5, #0
 801b268:	bfab      	itete	ge
 801b26a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801b26c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801b26e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801b270:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801b272:	bfac      	ite	ge
 801b274:	18ef      	addge	r7, r5, r3
 801b276:	1b5e      	sublt	r6, r3, r5
 801b278:	9b08      	ldr	r3, [sp, #32]
 801b27a:	1aed      	subs	r5, r5, r3
 801b27c:	4415      	add	r5, r2
 801b27e:	4b66      	ldr	r3, [pc, #408]	@ (801b418 <_strtod_l+0x858>)
 801b280:	3d01      	subs	r5, #1
 801b282:	429d      	cmp	r5, r3
 801b284:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801b288:	da50      	bge.n	801b32c <_strtod_l+0x76c>
 801b28a:	1b5b      	subs	r3, r3, r5
 801b28c:	2b1f      	cmp	r3, #31
 801b28e:	eba2 0203 	sub.w	r2, r2, r3
 801b292:	f04f 0101 	mov.w	r1, #1
 801b296:	dc3d      	bgt.n	801b314 <_strtod_l+0x754>
 801b298:	fa01 f303 	lsl.w	r3, r1, r3
 801b29c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b29e:	2300      	movs	r3, #0
 801b2a0:	9310      	str	r3, [sp, #64]	@ 0x40
 801b2a2:	18bd      	adds	r5, r7, r2
 801b2a4:	9b08      	ldr	r3, [sp, #32]
 801b2a6:	42af      	cmp	r7, r5
 801b2a8:	4416      	add	r6, r2
 801b2aa:	441e      	add	r6, r3
 801b2ac:	463b      	mov	r3, r7
 801b2ae:	bfa8      	it	ge
 801b2b0:	462b      	movge	r3, r5
 801b2b2:	42b3      	cmp	r3, r6
 801b2b4:	bfa8      	it	ge
 801b2b6:	4633      	movge	r3, r6
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	bfc2      	ittt	gt
 801b2bc:	1aed      	subgt	r5, r5, r3
 801b2be:	1af6      	subgt	r6, r6, r3
 801b2c0:	1aff      	subgt	r7, r7, r3
 801b2c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	dd16      	ble.n	801b2f6 <_strtod_l+0x736>
 801b2c8:	4641      	mov	r1, r8
 801b2ca:	9805      	ldr	r0, [sp, #20]
 801b2cc:	461a      	mov	r2, r3
 801b2ce:	f003 f847 	bl	801e360 <__pow5mult>
 801b2d2:	4680      	mov	r8, r0
 801b2d4:	2800      	cmp	r0, #0
 801b2d6:	d0ba      	beq.n	801b24e <_strtod_l+0x68e>
 801b2d8:	4601      	mov	r1, r0
 801b2da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b2dc:	9805      	ldr	r0, [sp, #20]
 801b2de:	f002 ff95 	bl	801e20c <__multiply>
 801b2e2:	900e      	str	r0, [sp, #56]	@ 0x38
 801b2e4:	2800      	cmp	r0, #0
 801b2e6:	f43f ae8a 	beq.w	801affe <_strtod_l+0x43e>
 801b2ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b2ec:	9805      	ldr	r0, [sp, #20]
 801b2ee:	f002 fe79 	bl	801dfe4 <_Bfree>
 801b2f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2f4:	931a      	str	r3, [sp, #104]	@ 0x68
 801b2f6:	2d00      	cmp	r5, #0
 801b2f8:	dc1d      	bgt.n	801b336 <_strtod_l+0x776>
 801b2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	dd23      	ble.n	801b348 <_strtod_l+0x788>
 801b300:	4649      	mov	r1, r9
 801b302:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b304:	9805      	ldr	r0, [sp, #20]
 801b306:	f003 f82b 	bl	801e360 <__pow5mult>
 801b30a:	4681      	mov	r9, r0
 801b30c:	b9e0      	cbnz	r0, 801b348 <_strtod_l+0x788>
 801b30e:	f04f 0900 	mov.w	r9, #0
 801b312:	e674      	b.n	801affe <_strtod_l+0x43e>
 801b314:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801b318:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801b31c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801b320:	35e2      	adds	r5, #226	@ 0xe2
 801b322:	fa01 f305 	lsl.w	r3, r1, r5
 801b326:	9310      	str	r3, [sp, #64]	@ 0x40
 801b328:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b32a:	e7ba      	b.n	801b2a2 <_strtod_l+0x6e2>
 801b32c:	2300      	movs	r3, #0
 801b32e:	9310      	str	r3, [sp, #64]	@ 0x40
 801b330:	2301      	movs	r3, #1
 801b332:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b334:	e7b5      	b.n	801b2a2 <_strtod_l+0x6e2>
 801b336:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b338:	9805      	ldr	r0, [sp, #20]
 801b33a:	462a      	mov	r2, r5
 801b33c:	f003 f86a 	bl	801e414 <__lshift>
 801b340:	901a      	str	r0, [sp, #104]	@ 0x68
 801b342:	2800      	cmp	r0, #0
 801b344:	d1d9      	bne.n	801b2fa <_strtod_l+0x73a>
 801b346:	e65a      	b.n	801affe <_strtod_l+0x43e>
 801b348:	2e00      	cmp	r6, #0
 801b34a:	dd07      	ble.n	801b35c <_strtod_l+0x79c>
 801b34c:	4649      	mov	r1, r9
 801b34e:	9805      	ldr	r0, [sp, #20]
 801b350:	4632      	mov	r2, r6
 801b352:	f003 f85f 	bl	801e414 <__lshift>
 801b356:	4681      	mov	r9, r0
 801b358:	2800      	cmp	r0, #0
 801b35a:	d0d8      	beq.n	801b30e <_strtod_l+0x74e>
 801b35c:	2f00      	cmp	r7, #0
 801b35e:	dd08      	ble.n	801b372 <_strtod_l+0x7b2>
 801b360:	4641      	mov	r1, r8
 801b362:	9805      	ldr	r0, [sp, #20]
 801b364:	463a      	mov	r2, r7
 801b366:	f003 f855 	bl	801e414 <__lshift>
 801b36a:	4680      	mov	r8, r0
 801b36c:	2800      	cmp	r0, #0
 801b36e:	f43f ae46 	beq.w	801affe <_strtod_l+0x43e>
 801b372:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b374:	9805      	ldr	r0, [sp, #20]
 801b376:	464a      	mov	r2, r9
 801b378:	f003 f8d4 	bl	801e524 <__mdiff>
 801b37c:	4604      	mov	r4, r0
 801b37e:	2800      	cmp	r0, #0
 801b380:	f43f ae3d 	beq.w	801affe <_strtod_l+0x43e>
 801b384:	68c3      	ldr	r3, [r0, #12]
 801b386:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b388:	2300      	movs	r3, #0
 801b38a:	60c3      	str	r3, [r0, #12]
 801b38c:	4641      	mov	r1, r8
 801b38e:	f003 f8ad 	bl	801e4ec <__mcmp>
 801b392:	2800      	cmp	r0, #0
 801b394:	da46      	bge.n	801b424 <_strtod_l+0x864>
 801b396:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b398:	ea53 030a 	orrs.w	r3, r3, sl
 801b39c:	d16c      	bne.n	801b478 <_strtod_l+0x8b8>
 801b39e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d168      	bne.n	801b478 <_strtod_l+0x8b8>
 801b3a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801b3aa:	0d1b      	lsrs	r3, r3, #20
 801b3ac:	051b      	lsls	r3, r3, #20
 801b3ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801b3b2:	d961      	bls.n	801b478 <_strtod_l+0x8b8>
 801b3b4:	6963      	ldr	r3, [r4, #20]
 801b3b6:	b913      	cbnz	r3, 801b3be <_strtod_l+0x7fe>
 801b3b8:	6923      	ldr	r3, [r4, #16]
 801b3ba:	2b01      	cmp	r3, #1
 801b3bc:	dd5c      	ble.n	801b478 <_strtod_l+0x8b8>
 801b3be:	4621      	mov	r1, r4
 801b3c0:	2201      	movs	r2, #1
 801b3c2:	9805      	ldr	r0, [sp, #20]
 801b3c4:	f003 f826 	bl	801e414 <__lshift>
 801b3c8:	4641      	mov	r1, r8
 801b3ca:	4604      	mov	r4, r0
 801b3cc:	f003 f88e 	bl	801e4ec <__mcmp>
 801b3d0:	2800      	cmp	r0, #0
 801b3d2:	dd51      	ble.n	801b478 <_strtod_l+0x8b8>
 801b3d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801b3d8:	9a08      	ldr	r2, [sp, #32]
 801b3da:	0d1b      	lsrs	r3, r3, #20
 801b3dc:	051b      	lsls	r3, r3, #20
 801b3de:	2a00      	cmp	r2, #0
 801b3e0:	d06b      	beq.n	801b4ba <_strtod_l+0x8fa>
 801b3e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801b3e6:	d868      	bhi.n	801b4ba <_strtod_l+0x8fa>
 801b3e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801b3ec:	f67f ae9d 	bls.w	801b12a <_strtod_l+0x56a>
 801b3f0:	4b0a      	ldr	r3, [pc, #40]	@ (801b41c <_strtod_l+0x85c>)
 801b3f2:	4650      	mov	r0, sl
 801b3f4:	4659      	mov	r1, fp
 801b3f6:	2200      	movs	r2, #0
 801b3f8:	f7e5 f8d6 	bl	80005a8 <__aeabi_dmul>
 801b3fc:	4b08      	ldr	r3, [pc, #32]	@ (801b420 <_strtod_l+0x860>)
 801b3fe:	400b      	ands	r3, r1
 801b400:	4682      	mov	sl, r0
 801b402:	468b      	mov	fp, r1
 801b404:	2b00      	cmp	r3, #0
 801b406:	f47f ae05 	bne.w	801b014 <_strtod_l+0x454>
 801b40a:	9a05      	ldr	r2, [sp, #20]
 801b40c:	2322      	movs	r3, #34	@ 0x22
 801b40e:	6013      	str	r3, [r2, #0]
 801b410:	e600      	b.n	801b014 <_strtod_l+0x454>
 801b412:	bf00      	nop
 801b414:	08023288 	.word	0x08023288
 801b418:	fffffc02 	.word	0xfffffc02
 801b41c:	39500000 	.word	0x39500000
 801b420:	7ff00000 	.word	0x7ff00000
 801b424:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801b428:	d165      	bne.n	801b4f6 <_strtod_l+0x936>
 801b42a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b42c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b430:	b35a      	cbz	r2, 801b48a <_strtod_l+0x8ca>
 801b432:	4a9f      	ldr	r2, [pc, #636]	@ (801b6b0 <_strtod_l+0xaf0>)
 801b434:	4293      	cmp	r3, r2
 801b436:	d12b      	bne.n	801b490 <_strtod_l+0x8d0>
 801b438:	9b08      	ldr	r3, [sp, #32]
 801b43a:	4651      	mov	r1, sl
 801b43c:	b303      	cbz	r3, 801b480 <_strtod_l+0x8c0>
 801b43e:	4b9d      	ldr	r3, [pc, #628]	@ (801b6b4 <_strtod_l+0xaf4>)
 801b440:	465a      	mov	r2, fp
 801b442:	4013      	ands	r3, r2
 801b444:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801b448:	f04f 32ff 	mov.w	r2, #4294967295
 801b44c:	d81b      	bhi.n	801b486 <_strtod_l+0x8c6>
 801b44e:	0d1b      	lsrs	r3, r3, #20
 801b450:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801b454:	fa02 f303 	lsl.w	r3, r2, r3
 801b458:	4299      	cmp	r1, r3
 801b45a:	d119      	bne.n	801b490 <_strtod_l+0x8d0>
 801b45c:	4b96      	ldr	r3, [pc, #600]	@ (801b6b8 <_strtod_l+0xaf8>)
 801b45e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b460:	429a      	cmp	r2, r3
 801b462:	d102      	bne.n	801b46a <_strtod_l+0x8aa>
 801b464:	3101      	adds	r1, #1
 801b466:	f43f adca 	beq.w	801affe <_strtod_l+0x43e>
 801b46a:	4b92      	ldr	r3, [pc, #584]	@ (801b6b4 <_strtod_l+0xaf4>)
 801b46c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b46e:	401a      	ands	r2, r3
 801b470:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801b474:	f04f 0a00 	mov.w	sl, #0
 801b478:	9b08      	ldr	r3, [sp, #32]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d1b8      	bne.n	801b3f0 <_strtod_l+0x830>
 801b47e:	e5c9      	b.n	801b014 <_strtod_l+0x454>
 801b480:	f04f 33ff 	mov.w	r3, #4294967295
 801b484:	e7e8      	b.n	801b458 <_strtod_l+0x898>
 801b486:	4613      	mov	r3, r2
 801b488:	e7e6      	b.n	801b458 <_strtod_l+0x898>
 801b48a:	ea53 030a 	orrs.w	r3, r3, sl
 801b48e:	d0a1      	beq.n	801b3d4 <_strtod_l+0x814>
 801b490:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b492:	b1db      	cbz	r3, 801b4cc <_strtod_l+0x90c>
 801b494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b496:	4213      	tst	r3, r2
 801b498:	d0ee      	beq.n	801b478 <_strtod_l+0x8b8>
 801b49a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b49c:	9a08      	ldr	r2, [sp, #32]
 801b49e:	4650      	mov	r0, sl
 801b4a0:	4659      	mov	r1, fp
 801b4a2:	b1bb      	cbz	r3, 801b4d4 <_strtod_l+0x914>
 801b4a4:	f7ff fb6e 	bl	801ab84 <sulp>
 801b4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b4ac:	ec53 2b10 	vmov	r2, r3, d0
 801b4b0:	f7e4 fec4 	bl	800023c <__adddf3>
 801b4b4:	4682      	mov	sl, r0
 801b4b6:	468b      	mov	fp, r1
 801b4b8:	e7de      	b.n	801b478 <_strtod_l+0x8b8>
 801b4ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801b4be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b4c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b4c6:	f04f 3aff 	mov.w	sl, #4294967295
 801b4ca:	e7d5      	b.n	801b478 <_strtod_l+0x8b8>
 801b4cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b4ce:	ea13 0f0a 	tst.w	r3, sl
 801b4d2:	e7e1      	b.n	801b498 <_strtod_l+0x8d8>
 801b4d4:	f7ff fb56 	bl	801ab84 <sulp>
 801b4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b4dc:	ec53 2b10 	vmov	r2, r3, d0
 801b4e0:	f7e4 feaa 	bl	8000238 <__aeabi_dsub>
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	4682      	mov	sl, r0
 801b4ea:	468b      	mov	fp, r1
 801b4ec:	f7e5 fac4 	bl	8000a78 <__aeabi_dcmpeq>
 801b4f0:	2800      	cmp	r0, #0
 801b4f2:	d0c1      	beq.n	801b478 <_strtod_l+0x8b8>
 801b4f4:	e619      	b.n	801b12a <_strtod_l+0x56a>
 801b4f6:	4641      	mov	r1, r8
 801b4f8:	4620      	mov	r0, r4
 801b4fa:	f003 f96f 	bl	801e7dc <__ratio>
 801b4fe:	ec57 6b10 	vmov	r6, r7, d0
 801b502:	2200      	movs	r2, #0
 801b504:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801b508:	4630      	mov	r0, r6
 801b50a:	4639      	mov	r1, r7
 801b50c:	f7e5 fac8 	bl	8000aa0 <__aeabi_dcmple>
 801b510:	2800      	cmp	r0, #0
 801b512:	d06f      	beq.n	801b5f4 <_strtod_l+0xa34>
 801b514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b516:	2b00      	cmp	r3, #0
 801b518:	d17a      	bne.n	801b610 <_strtod_l+0xa50>
 801b51a:	f1ba 0f00 	cmp.w	sl, #0
 801b51e:	d158      	bne.n	801b5d2 <_strtod_l+0xa12>
 801b520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b526:	2b00      	cmp	r3, #0
 801b528:	d15a      	bne.n	801b5e0 <_strtod_l+0xa20>
 801b52a:	4b64      	ldr	r3, [pc, #400]	@ (801b6bc <_strtod_l+0xafc>)
 801b52c:	2200      	movs	r2, #0
 801b52e:	4630      	mov	r0, r6
 801b530:	4639      	mov	r1, r7
 801b532:	f7e5 faab 	bl	8000a8c <__aeabi_dcmplt>
 801b536:	2800      	cmp	r0, #0
 801b538:	d159      	bne.n	801b5ee <_strtod_l+0xa2e>
 801b53a:	4630      	mov	r0, r6
 801b53c:	4639      	mov	r1, r7
 801b53e:	4b60      	ldr	r3, [pc, #384]	@ (801b6c0 <_strtod_l+0xb00>)
 801b540:	2200      	movs	r2, #0
 801b542:	f7e5 f831 	bl	80005a8 <__aeabi_dmul>
 801b546:	4606      	mov	r6, r0
 801b548:	460f      	mov	r7, r1
 801b54a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801b54e:	9606      	str	r6, [sp, #24]
 801b550:	9307      	str	r3, [sp, #28]
 801b552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b556:	4d57      	ldr	r5, [pc, #348]	@ (801b6b4 <_strtod_l+0xaf4>)
 801b558:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801b55c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b55e:	401d      	ands	r5, r3
 801b560:	4b58      	ldr	r3, [pc, #352]	@ (801b6c4 <_strtod_l+0xb04>)
 801b562:	429d      	cmp	r5, r3
 801b564:	f040 80b2 	bne.w	801b6cc <_strtod_l+0xb0c>
 801b568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b56a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801b56e:	ec4b ab10 	vmov	d0, sl, fp
 801b572:	f003 f86b 	bl	801e64c <__ulp>
 801b576:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b57a:	ec51 0b10 	vmov	r0, r1, d0
 801b57e:	f7e5 f813 	bl	80005a8 <__aeabi_dmul>
 801b582:	4652      	mov	r2, sl
 801b584:	465b      	mov	r3, fp
 801b586:	f7e4 fe59 	bl	800023c <__adddf3>
 801b58a:	460b      	mov	r3, r1
 801b58c:	4949      	ldr	r1, [pc, #292]	@ (801b6b4 <_strtod_l+0xaf4>)
 801b58e:	4a4e      	ldr	r2, [pc, #312]	@ (801b6c8 <_strtod_l+0xb08>)
 801b590:	4019      	ands	r1, r3
 801b592:	4291      	cmp	r1, r2
 801b594:	4682      	mov	sl, r0
 801b596:	d942      	bls.n	801b61e <_strtod_l+0xa5e>
 801b598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b59a:	4b47      	ldr	r3, [pc, #284]	@ (801b6b8 <_strtod_l+0xaf8>)
 801b59c:	429a      	cmp	r2, r3
 801b59e:	d103      	bne.n	801b5a8 <_strtod_l+0x9e8>
 801b5a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b5a2:	3301      	adds	r3, #1
 801b5a4:	f43f ad2b 	beq.w	801affe <_strtod_l+0x43e>
 801b5a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801b6b8 <_strtod_l+0xaf8>
 801b5ac:	f04f 3aff 	mov.w	sl, #4294967295
 801b5b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b5b2:	9805      	ldr	r0, [sp, #20]
 801b5b4:	f002 fd16 	bl	801dfe4 <_Bfree>
 801b5b8:	9805      	ldr	r0, [sp, #20]
 801b5ba:	4649      	mov	r1, r9
 801b5bc:	f002 fd12 	bl	801dfe4 <_Bfree>
 801b5c0:	9805      	ldr	r0, [sp, #20]
 801b5c2:	4641      	mov	r1, r8
 801b5c4:	f002 fd0e 	bl	801dfe4 <_Bfree>
 801b5c8:	9805      	ldr	r0, [sp, #20]
 801b5ca:	4621      	mov	r1, r4
 801b5cc:	f002 fd0a 	bl	801dfe4 <_Bfree>
 801b5d0:	e618      	b.n	801b204 <_strtod_l+0x644>
 801b5d2:	f1ba 0f01 	cmp.w	sl, #1
 801b5d6:	d103      	bne.n	801b5e0 <_strtod_l+0xa20>
 801b5d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	f43f ada5 	beq.w	801b12a <_strtod_l+0x56a>
 801b5e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801b690 <_strtod_l+0xad0>
 801b5e4:	4f35      	ldr	r7, [pc, #212]	@ (801b6bc <_strtod_l+0xafc>)
 801b5e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b5ea:	2600      	movs	r6, #0
 801b5ec:	e7b1      	b.n	801b552 <_strtod_l+0x992>
 801b5ee:	4f34      	ldr	r7, [pc, #208]	@ (801b6c0 <_strtod_l+0xb00>)
 801b5f0:	2600      	movs	r6, #0
 801b5f2:	e7aa      	b.n	801b54a <_strtod_l+0x98a>
 801b5f4:	4b32      	ldr	r3, [pc, #200]	@ (801b6c0 <_strtod_l+0xb00>)
 801b5f6:	4630      	mov	r0, r6
 801b5f8:	4639      	mov	r1, r7
 801b5fa:	2200      	movs	r2, #0
 801b5fc:	f7e4 ffd4 	bl	80005a8 <__aeabi_dmul>
 801b600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b602:	4606      	mov	r6, r0
 801b604:	460f      	mov	r7, r1
 801b606:	2b00      	cmp	r3, #0
 801b608:	d09f      	beq.n	801b54a <_strtod_l+0x98a>
 801b60a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801b60e:	e7a0      	b.n	801b552 <_strtod_l+0x992>
 801b610:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801b698 <_strtod_l+0xad8>
 801b614:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b618:	ec57 6b17 	vmov	r6, r7, d7
 801b61c:	e799      	b.n	801b552 <_strtod_l+0x992>
 801b61e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801b622:	9b08      	ldr	r3, [sp, #32]
 801b624:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d1c1      	bne.n	801b5b0 <_strtod_l+0x9f0>
 801b62c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801b630:	0d1b      	lsrs	r3, r3, #20
 801b632:	051b      	lsls	r3, r3, #20
 801b634:	429d      	cmp	r5, r3
 801b636:	d1bb      	bne.n	801b5b0 <_strtod_l+0x9f0>
 801b638:	4630      	mov	r0, r6
 801b63a:	4639      	mov	r1, r7
 801b63c:	f7e5 fb14 	bl	8000c68 <__aeabi_d2lz>
 801b640:	f7e4 ff84 	bl	800054c <__aeabi_l2d>
 801b644:	4602      	mov	r2, r0
 801b646:	460b      	mov	r3, r1
 801b648:	4630      	mov	r0, r6
 801b64a:	4639      	mov	r1, r7
 801b64c:	f7e4 fdf4 	bl	8000238 <__aeabi_dsub>
 801b650:	460b      	mov	r3, r1
 801b652:	4602      	mov	r2, r0
 801b654:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801b658:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801b65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b65e:	ea46 060a 	orr.w	r6, r6, sl
 801b662:	431e      	orrs	r6, r3
 801b664:	d06f      	beq.n	801b746 <_strtod_l+0xb86>
 801b666:	a30e      	add	r3, pc, #56	@ (adr r3, 801b6a0 <_strtod_l+0xae0>)
 801b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b66c:	f7e5 fa0e 	bl	8000a8c <__aeabi_dcmplt>
 801b670:	2800      	cmp	r0, #0
 801b672:	f47f accf 	bne.w	801b014 <_strtod_l+0x454>
 801b676:	a30c      	add	r3, pc, #48	@ (adr r3, 801b6a8 <_strtod_l+0xae8>)
 801b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b67c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b680:	f7e5 fa22 	bl	8000ac8 <__aeabi_dcmpgt>
 801b684:	2800      	cmp	r0, #0
 801b686:	d093      	beq.n	801b5b0 <_strtod_l+0x9f0>
 801b688:	e4c4      	b.n	801b014 <_strtod_l+0x454>
 801b68a:	bf00      	nop
 801b68c:	f3af 8000 	nop.w
 801b690:	00000000 	.word	0x00000000
 801b694:	bff00000 	.word	0xbff00000
 801b698:	00000000 	.word	0x00000000
 801b69c:	3ff00000 	.word	0x3ff00000
 801b6a0:	94a03595 	.word	0x94a03595
 801b6a4:	3fdfffff 	.word	0x3fdfffff
 801b6a8:	35afe535 	.word	0x35afe535
 801b6ac:	3fe00000 	.word	0x3fe00000
 801b6b0:	000fffff 	.word	0x000fffff
 801b6b4:	7ff00000 	.word	0x7ff00000
 801b6b8:	7fefffff 	.word	0x7fefffff
 801b6bc:	3ff00000 	.word	0x3ff00000
 801b6c0:	3fe00000 	.word	0x3fe00000
 801b6c4:	7fe00000 	.word	0x7fe00000
 801b6c8:	7c9fffff 	.word	0x7c9fffff
 801b6cc:	9b08      	ldr	r3, [sp, #32]
 801b6ce:	b323      	cbz	r3, 801b71a <_strtod_l+0xb5a>
 801b6d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801b6d4:	d821      	bhi.n	801b71a <_strtod_l+0xb5a>
 801b6d6:	a328      	add	r3, pc, #160	@ (adr r3, 801b778 <_strtod_l+0xbb8>)
 801b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6dc:	4630      	mov	r0, r6
 801b6de:	4639      	mov	r1, r7
 801b6e0:	f7e5 f9de 	bl	8000aa0 <__aeabi_dcmple>
 801b6e4:	b1a0      	cbz	r0, 801b710 <_strtod_l+0xb50>
 801b6e6:	4639      	mov	r1, r7
 801b6e8:	4630      	mov	r0, r6
 801b6ea:	f7e5 fa35 	bl	8000b58 <__aeabi_d2uiz>
 801b6ee:	2801      	cmp	r0, #1
 801b6f0:	bf38      	it	cc
 801b6f2:	2001      	movcc	r0, #1
 801b6f4:	f7e4 fede 	bl	80004b4 <__aeabi_ui2d>
 801b6f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b6fa:	4606      	mov	r6, r0
 801b6fc:	460f      	mov	r7, r1
 801b6fe:	b9fb      	cbnz	r3, 801b740 <_strtod_l+0xb80>
 801b700:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b704:	9014      	str	r0, [sp, #80]	@ 0x50
 801b706:	9315      	str	r3, [sp, #84]	@ 0x54
 801b708:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801b70c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801b710:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b712:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801b716:	1b5b      	subs	r3, r3, r5
 801b718:	9311      	str	r3, [sp, #68]	@ 0x44
 801b71a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b71e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801b722:	f002 ff93 	bl	801e64c <__ulp>
 801b726:	4650      	mov	r0, sl
 801b728:	ec53 2b10 	vmov	r2, r3, d0
 801b72c:	4659      	mov	r1, fp
 801b72e:	f7e4 ff3b 	bl	80005a8 <__aeabi_dmul>
 801b732:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801b736:	f7e4 fd81 	bl	800023c <__adddf3>
 801b73a:	4682      	mov	sl, r0
 801b73c:	468b      	mov	fp, r1
 801b73e:	e770      	b.n	801b622 <_strtod_l+0xa62>
 801b740:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801b744:	e7e0      	b.n	801b708 <_strtod_l+0xb48>
 801b746:	a30e      	add	r3, pc, #56	@ (adr r3, 801b780 <_strtod_l+0xbc0>)
 801b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b74c:	f7e5 f99e 	bl	8000a8c <__aeabi_dcmplt>
 801b750:	e798      	b.n	801b684 <_strtod_l+0xac4>
 801b752:	2300      	movs	r3, #0
 801b754:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b756:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801b758:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b75a:	6013      	str	r3, [r2, #0]
 801b75c:	f7ff ba6d 	b.w	801ac3a <_strtod_l+0x7a>
 801b760:	2a65      	cmp	r2, #101	@ 0x65
 801b762:	f43f ab66 	beq.w	801ae32 <_strtod_l+0x272>
 801b766:	2a45      	cmp	r2, #69	@ 0x45
 801b768:	f43f ab63 	beq.w	801ae32 <_strtod_l+0x272>
 801b76c:	2301      	movs	r3, #1
 801b76e:	f7ff bb9e 	b.w	801aeae <_strtod_l+0x2ee>
 801b772:	bf00      	nop
 801b774:	f3af 8000 	nop.w
 801b778:	ffc00000 	.word	0xffc00000
 801b77c:	41dfffff 	.word	0x41dfffff
 801b780:	94a03595 	.word	0x94a03595
 801b784:	3fcfffff 	.word	0x3fcfffff

0801b788 <_strtod_r>:
 801b788:	4b01      	ldr	r3, [pc, #4]	@ (801b790 <_strtod_r+0x8>)
 801b78a:	f7ff ba19 	b.w	801abc0 <_strtod_l>
 801b78e:	bf00      	nop
 801b790:	20000150 	.word	0x20000150

0801b794 <strtof>:
 801b794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b798:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801b858 <strtof+0xc4>
 801b79c:	4b29      	ldr	r3, [pc, #164]	@ (801b844 <strtof+0xb0>)
 801b79e:	460a      	mov	r2, r1
 801b7a0:	ed2d 8b02 	vpush	{d8}
 801b7a4:	4601      	mov	r1, r0
 801b7a6:	f8d8 0000 	ldr.w	r0, [r8]
 801b7aa:	f7ff fa09 	bl	801abc0 <_strtod_l>
 801b7ae:	ec55 4b10 	vmov	r4, r5, d0
 801b7b2:	4622      	mov	r2, r4
 801b7b4:	462b      	mov	r3, r5
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	4629      	mov	r1, r5
 801b7ba:	f7e5 f98f 	bl	8000adc <__aeabi_dcmpun>
 801b7be:	b190      	cbz	r0, 801b7e6 <strtof+0x52>
 801b7c0:	2d00      	cmp	r5, #0
 801b7c2:	4821      	ldr	r0, [pc, #132]	@ (801b848 <strtof+0xb4>)
 801b7c4:	da09      	bge.n	801b7da <strtof+0x46>
 801b7c6:	f001 f9c7 	bl	801cb58 <nanf>
 801b7ca:	eeb1 8a40 	vneg.f32	s16, s0
 801b7ce:	eeb0 0a48 	vmov.f32	s0, s16
 801b7d2:	ecbd 8b02 	vpop	{d8}
 801b7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7da:	ecbd 8b02 	vpop	{d8}
 801b7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7e2:	f001 b9b9 	b.w	801cb58 <nanf>
 801b7e6:	4620      	mov	r0, r4
 801b7e8:	4629      	mov	r1, r5
 801b7ea:	f7e5 f9d5 	bl	8000b98 <__aeabi_d2f>
 801b7ee:	ee08 0a10 	vmov	s16, r0
 801b7f2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801b84c <strtof+0xb8>
 801b7f6:	eeb0 7ac8 	vabs.f32	s14, s16
 801b7fa:	eeb4 7a67 	vcmp.f32	s14, s15
 801b7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b802:	dd11      	ble.n	801b828 <strtof+0x94>
 801b804:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801b808:	4b11      	ldr	r3, [pc, #68]	@ (801b850 <strtof+0xbc>)
 801b80a:	f04f 32ff 	mov.w	r2, #4294967295
 801b80e:	4620      	mov	r0, r4
 801b810:	4639      	mov	r1, r7
 801b812:	f7e5 f963 	bl	8000adc <__aeabi_dcmpun>
 801b816:	b980      	cbnz	r0, 801b83a <strtof+0xa6>
 801b818:	4b0d      	ldr	r3, [pc, #52]	@ (801b850 <strtof+0xbc>)
 801b81a:	f04f 32ff 	mov.w	r2, #4294967295
 801b81e:	4620      	mov	r0, r4
 801b820:	4639      	mov	r1, r7
 801b822:	f7e5 f93d 	bl	8000aa0 <__aeabi_dcmple>
 801b826:	b940      	cbnz	r0, 801b83a <strtof+0xa6>
 801b828:	ee18 3a10 	vmov	r3, s16
 801b82c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801b830:	d1cd      	bne.n	801b7ce <strtof+0x3a>
 801b832:	4b08      	ldr	r3, [pc, #32]	@ (801b854 <strtof+0xc0>)
 801b834:	402b      	ands	r3, r5
 801b836:	2b00      	cmp	r3, #0
 801b838:	d0c9      	beq.n	801b7ce <strtof+0x3a>
 801b83a:	f8d8 3000 	ldr.w	r3, [r8]
 801b83e:	2222      	movs	r2, #34	@ 0x22
 801b840:	601a      	str	r2, [r3, #0]
 801b842:	e7c4      	b.n	801b7ce <strtof+0x3a>
 801b844:	20000150 	.word	0x20000150
 801b848:	0802349e 	.word	0x0802349e
 801b84c:	7f7fffff 	.word	0x7f7fffff
 801b850:	7fefffff 	.word	0x7fefffff
 801b854:	7ff00000 	.word	0x7ff00000
 801b858:	200002bc 	.word	0x200002bc

0801b85c <_strtol_l.constprop.0>:
 801b85c:	2b24      	cmp	r3, #36	@ 0x24
 801b85e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b862:	4686      	mov	lr, r0
 801b864:	4690      	mov	r8, r2
 801b866:	d801      	bhi.n	801b86c <_strtol_l.constprop.0+0x10>
 801b868:	2b01      	cmp	r3, #1
 801b86a:	d106      	bne.n	801b87a <_strtol_l.constprop.0+0x1e>
 801b86c:	f001 f928 	bl	801cac0 <__errno>
 801b870:	2316      	movs	r3, #22
 801b872:	6003      	str	r3, [r0, #0]
 801b874:	2000      	movs	r0, #0
 801b876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b87a:	4834      	ldr	r0, [pc, #208]	@ (801b94c <_strtol_l.constprop.0+0xf0>)
 801b87c:	460d      	mov	r5, r1
 801b87e:	462a      	mov	r2, r5
 801b880:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b884:	5d06      	ldrb	r6, [r0, r4]
 801b886:	f016 0608 	ands.w	r6, r6, #8
 801b88a:	d1f8      	bne.n	801b87e <_strtol_l.constprop.0+0x22>
 801b88c:	2c2d      	cmp	r4, #45	@ 0x2d
 801b88e:	d12d      	bne.n	801b8ec <_strtol_l.constprop.0+0x90>
 801b890:	782c      	ldrb	r4, [r5, #0]
 801b892:	2601      	movs	r6, #1
 801b894:	1c95      	adds	r5, r2, #2
 801b896:	f033 0210 	bics.w	r2, r3, #16
 801b89a:	d109      	bne.n	801b8b0 <_strtol_l.constprop.0+0x54>
 801b89c:	2c30      	cmp	r4, #48	@ 0x30
 801b89e:	d12a      	bne.n	801b8f6 <_strtol_l.constprop.0+0x9a>
 801b8a0:	782a      	ldrb	r2, [r5, #0]
 801b8a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801b8a6:	2a58      	cmp	r2, #88	@ 0x58
 801b8a8:	d125      	bne.n	801b8f6 <_strtol_l.constprop.0+0x9a>
 801b8aa:	786c      	ldrb	r4, [r5, #1]
 801b8ac:	2310      	movs	r3, #16
 801b8ae:	3502      	adds	r5, #2
 801b8b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801b8b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b8b8:	2200      	movs	r2, #0
 801b8ba:	fbbc f9f3 	udiv	r9, ip, r3
 801b8be:	4610      	mov	r0, r2
 801b8c0:	fb03 ca19 	mls	sl, r3, r9, ip
 801b8c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801b8c8:	2f09      	cmp	r7, #9
 801b8ca:	d81b      	bhi.n	801b904 <_strtol_l.constprop.0+0xa8>
 801b8cc:	463c      	mov	r4, r7
 801b8ce:	42a3      	cmp	r3, r4
 801b8d0:	dd27      	ble.n	801b922 <_strtol_l.constprop.0+0xc6>
 801b8d2:	1c57      	adds	r7, r2, #1
 801b8d4:	d007      	beq.n	801b8e6 <_strtol_l.constprop.0+0x8a>
 801b8d6:	4581      	cmp	r9, r0
 801b8d8:	d320      	bcc.n	801b91c <_strtol_l.constprop.0+0xc0>
 801b8da:	d101      	bne.n	801b8e0 <_strtol_l.constprop.0+0x84>
 801b8dc:	45a2      	cmp	sl, r4
 801b8de:	db1d      	blt.n	801b91c <_strtol_l.constprop.0+0xc0>
 801b8e0:	fb00 4003 	mla	r0, r0, r3, r4
 801b8e4:	2201      	movs	r2, #1
 801b8e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b8ea:	e7eb      	b.n	801b8c4 <_strtol_l.constprop.0+0x68>
 801b8ec:	2c2b      	cmp	r4, #43	@ 0x2b
 801b8ee:	bf04      	itt	eq
 801b8f0:	782c      	ldrbeq	r4, [r5, #0]
 801b8f2:	1c95      	addeq	r5, r2, #2
 801b8f4:	e7cf      	b.n	801b896 <_strtol_l.constprop.0+0x3a>
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d1da      	bne.n	801b8b0 <_strtol_l.constprop.0+0x54>
 801b8fa:	2c30      	cmp	r4, #48	@ 0x30
 801b8fc:	bf0c      	ite	eq
 801b8fe:	2308      	moveq	r3, #8
 801b900:	230a      	movne	r3, #10
 801b902:	e7d5      	b.n	801b8b0 <_strtol_l.constprop.0+0x54>
 801b904:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801b908:	2f19      	cmp	r7, #25
 801b90a:	d801      	bhi.n	801b910 <_strtol_l.constprop.0+0xb4>
 801b90c:	3c37      	subs	r4, #55	@ 0x37
 801b90e:	e7de      	b.n	801b8ce <_strtol_l.constprop.0+0x72>
 801b910:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801b914:	2f19      	cmp	r7, #25
 801b916:	d804      	bhi.n	801b922 <_strtol_l.constprop.0+0xc6>
 801b918:	3c57      	subs	r4, #87	@ 0x57
 801b91a:	e7d8      	b.n	801b8ce <_strtol_l.constprop.0+0x72>
 801b91c:	f04f 32ff 	mov.w	r2, #4294967295
 801b920:	e7e1      	b.n	801b8e6 <_strtol_l.constprop.0+0x8a>
 801b922:	1c53      	adds	r3, r2, #1
 801b924:	d108      	bne.n	801b938 <_strtol_l.constprop.0+0xdc>
 801b926:	2322      	movs	r3, #34	@ 0x22
 801b928:	f8ce 3000 	str.w	r3, [lr]
 801b92c:	4660      	mov	r0, ip
 801b92e:	f1b8 0f00 	cmp.w	r8, #0
 801b932:	d0a0      	beq.n	801b876 <_strtol_l.constprop.0+0x1a>
 801b934:	1e69      	subs	r1, r5, #1
 801b936:	e006      	b.n	801b946 <_strtol_l.constprop.0+0xea>
 801b938:	b106      	cbz	r6, 801b93c <_strtol_l.constprop.0+0xe0>
 801b93a:	4240      	negs	r0, r0
 801b93c:	f1b8 0f00 	cmp.w	r8, #0
 801b940:	d099      	beq.n	801b876 <_strtol_l.constprop.0+0x1a>
 801b942:	2a00      	cmp	r2, #0
 801b944:	d1f6      	bne.n	801b934 <_strtol_l.constprop.0+0xd8>
 801b946:	f8c8 1000 	str.w	r1, [r8]
 801b94a:	e794      	b.n	801b876 <_strtol_l.constprop.0+0x1a>
 801b94c:	080232b1 	.word	0x080232b1

0801b950 <_strtol_r>:
 801b950:	f7ff bf84 	b.w	801b85c <_strtol_l.constprop.0>

0801b954 <strtol>:
 801b954:	4613      	mov	r3, r2
 801b956:	460a      	mov	r2, r1
 801b958:	4601      	mov	r1, r0
 801b95a:	4802      	ldr	r0, [pc, #8]	@ (801b964 <strtol+0x10>)
 801b95c:	6800      	ldr	r0, [r0, #0]
 801b95e:	f7ff bf7d 	b.w	801b85c <_strtol_l.constprop.0>
 801b962:	bf00      	nop
 801b964:	200002bc 	.word	0x200002bc

0801b968 <__cvt>:
 801b968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b96c:	ec57 6b10 	vmov	r6, r7, d0
 801b970:	2f00      	cmp	r7, #0
 801b972:	460c      	mov	r4, r1
 801b974:	4619      	mov	r1, r3
 801b976:	463b      	mov	r3, r7
 801b978:	bfbb      	ittet	lt
 801b97a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801b97e:	461f      	movlt	r7, r3
 801b980:	2300      	movge	r3, #0
 801b982:	232d      	movlt	r3, #45	@ 0x2d
 801b984:	700b      	strb	r3, [r1, #0]
 801b986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b988:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801b98c:	4691      	mov	r9, r2
 801b98e:	f023 0820 	bic.w	r8, r3, #32
 801b992:	bfbc      	itt	lt
 801b994:	4632      	movlt	r2, r6
 801b996:	4616      	movlt	r6, r2
 801b998:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801b99c:	d005      	beq.n	801b9aa <__cvt+0x42>
 801b99e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801b9a2:	d100      	bne.n	801b9a6 <__cvt+0x3e>
 801b9a4:	3401      	adds	r4, #1
 801b9a6:	2102      	movs	r1, #2
 801b9a8:	e000      	b.n	801b9ac <__cvt+0x44>
 801b9aa:	2103      	movs	r1, #3
 801b9ac:	ab03      	add	r3, sp, #12
 801b9ae:	9301      	str	r3, [sp, #4]
 801b9b0:	ab02      	add	r3, sp, #8
 801b9b2:	9300      	str	r3, [sp, #0]
 801b9b4:	ec47 6b10 	vmov	d0, r6, r7
 801b9b8:	4653      	mov	r3, sl
 801b9ba:	4622      	mov	r2, r4
 801b9bc:	f001 f978 	bl	801ccb0 <_dtoa_r>
 801b9c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801b9c4:	4605      	mov	r5, r0
 801b9c6:	d119      	bne.n	801b9fc <__cvt+0x94>
 801b9c8:	f019 0f01 	tst.w	r9, #1
 801b9cc:	d00e      	beq.n	801b9ec <__cvt+0x84>
 801b9ce:	eb00 0904 	add.w	r9, r0, r4
 801b9d2:	2200      	movs	r2, #0
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	4630      	mov	r0, r6
 801b9d8:	4639      	mov	r1, r7
 801b9da:	f7e5 f84d 	bl	8000a78 <__aeabi_dcmpeq>
 801b9de:	b108      	cbz	r0, 801b9e4 <__cvt+0x7c>
 801b9e0:	f8cd 900c 	str.w	r9, [sp, #12]
 801b9e4:	2230      	movs	r2, #48	@ 0x30
 801b9e6:	9b03      	ldr	r3, [sp, #12]
 801b9e8:	454b      	cmp	r3, r9
 801b9ea:	d31e      	bcc.n	801ba2a <__cvt+0xc2>
 801b9ec:	9b03      	ldr	r3, [sp, #12]
 801b9ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b9f0:	1b5b      	subs	r3, r3, r5
 801b9f2:	4628      	mov	r0, r5
 801b9f4:	6013      	str	r3, [r2, #0]
 801b9f6:	b004      	add	sp, #16
 801b9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801ba00:	eb00 0904 	add.w	r9, r0, r4
 801ba04:	d1e5      	bne.n	801b9d2 <__cvt+0x6a>
 801ba06:	7803      	ldrb	r3, [r0, #0]
 801ba08:	2b30      	cmp	r3, #48	@ 0x30
 801ba0a:	d10a      	bne.n	801ba22 <__cvt+0xba>
 801ba0c:	2200      	movs	r2, #0
 801ba0e:	2300      	movs	r3, #0
 801ba10:	4630      	mov	r0, r6
 801ba12:	4639      	mov	r1, r7
 801ba14:	f7e5 f830 	bl	8000a78 <__aeabi_dcmpeq>
 801ba18:	b918      	cbnz	r0, 801ba22 <__cvt+0xba>
 801ba1a:	f1c4 0401 	rsb	r4, r4, #1
 801ba1e:	f8ca 4000 	str.w	r4, [sl]
 801ba22:	f8da 3000 	ldr.w	r3, [sl]
 801ba26:	4499      	add	r9, r3
 801ba28:	e7d3      	b.n	801b9d2 <__cvt+0x6a>
 801ba2a:	1c59      	adds	r1, r3, #1
 801ba2c:	9103      	str	r1, [sp, #12]
 801ba2e:	701a      	strb	r2, [r3, #0]
 801ba30:	e7d9      	b.n	801b9e6 <__cvt+0x7e>

0801ba32 <__exponent>:
 801ba32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ba34:	2900      	cmp	r1, #0
 801ba36:	bfba      	itte	lt
 801ba38:	4249      	neglt	r1, r1
 801ba3a:	232d      	movlt	r3, #45	@ 0x2d
 801ba3c:	232b      	movge	r3, #43	@ 0x2b
 801ba3e:	2909      	cmp	r1, #9
 801ba40:	7002      	strb	r2, [r0, #0]
 801ba42:	7043      	strb	r3, [r0, #1]
 801ba44:	dd29      	ble.n	801ba9a <__exponent+0x68>
 801ba46:	f10d 0307 	add.w	r3, sp, #7
 801ba4a:	461d      	mov	r5, r3
 801ba4c:	270a      	movs	r7, #10
 801ba4e:	461a      	mov	r2, r3
 801ba50:	fbb1 f6f7 	udiv	r6, r1, r7
 801ba54:	fb07 1416 	mls	r4, r7, r6, r1
 801ba58:	3430      	adds	r4, #48	@ 0x30
 801ba5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801ba5e:	460c      	mov	r4, r1
 801ba60:	2c63      	cmp	r4, #99	@ 0x63
 801ba62:	f103 33ff 	add.w	r3, r3, #4294967295
 801ba66:	4631      	mov	r1, r6
 801ba68:	dcf1      	bgt.n	801ba4e <__exponent+0x1c>
 801ba6a:	3130      	adds	r1, #48	@ 0x30
 801ba6c:	1e94      	subs	r4, r2, #2
 801ba6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801ba72:	1c41      	adds	r1, r0, #1
 801ba74:	4623      	mov	r3, r4
 801ba76:	42ab      	cmp	r3, r5
 801ba78:	d30a      	bcc.n	801ba90 <__exponent+0x5e>
 801ba7a:	f10d 0309 	add.w	r3, sp, #9
 801ba7e:	1a9b      	subs	r3, r3, r2
 801ba80:	42ac      	cmp	r4, r5
 801ba82:	bf88      	it	hi
 801ba84:	2300      	movhi	r3, #0
 801ba86:	3302      	adds	r3, #2
 801ba88:	4403      	add	r3, r0
 801ba8a:	1a18      	subs	r0, r3, r0
 801ba8c:	b003      	add	sp, #12
 801ba8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba90:	f813 6b01 	ldrb.w	r6, [r3], #1
 801ba94:	f801 6f01 	strb.w	r6, [r1, #1]!
 801ba98:	e7ed      	b.n	801ba76 <__exponent+0x44>
 801ba9a:	2330      	movs	r3, #48	@ 0x30
 801ba9c:	3130      	adds	r1, #48	@ 0x30
 801ba9e:	7083      	strb	r3, [r0, #2]
 801baa0:	70c1      	strb	r1, [r0, #3]
 801baa2:	1d03      	adds	r3, r0, #4
 801baa4:	e7f1      	b.n	801ba8a <__exponent+0x58>
	...

0801baa8 <_printf_float>:
 801baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baac:	b08d      	sub	sp, #52	@ 0x34
 801baae:	460c      	mov	r4, r1
 801bab0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801bab4:	4616      	mov	r6, r2
 801bab6:	461f      	mov	r7, r3
 801bab8:	4605      	mov	r5, r0
 801baba:	f000 ffa7 	bl	801ca0c <_localeconv_r>
 801babe:	6803      	ldr	r3, [r0, #0]
 801bac0:	9304      	str	r3, [sp, #16]
 801bac2:	4618      	mov	r0, r3
 801bac4:	f7e4 fbac 	bl	8000220 <strlen>
 801bac8:	2300      	movs	r3, #0
 801baca:	930a      	str	r3, [sp, #40]	@ 0x28
 801bacc:	f8d8 3000 	ldr.w	r3, [r8]
 801bad0:	9005      	str	r0, [sp, #20]
 801bad2:	3307      	adds	r3, #7
 801bad4:	f023 0307 	bic.w	r3, r3, #7
 801bad8:	f103 0208 	add.w	r2, r3, #8
 801badc:	f894 a018 	ldrb.w	sl, [r4, #24]
 801bae0:	f8d4 b000 	ldr.w	fp, [r4]
 801bae4:	f8c8 2000 	str.w	r2, [r8]
 801bae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801baec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801baf0:	9307      	str	r3, [sp, #28]
 801baf2:	f8cd 8018 	str.w	r8, [sp, #24]
 801baf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801bafa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bafe:	4b9c      	ldr	r3, [pc, #624]	@ (801bd70 <_printf_float+0x2c8>)
 801bb00:	f04f 32ff 	mov.w	r2, #4294967295
 801bb04:	f7e4 ffea 	bl	8000adc <__aeabi_dcmpun>
 801bb08:	bb70      	cbnz	r0, 801bb68 <_printf_float+0xc0>
 801bb0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bb0e:	4b98      	ldr	r3, [pc, #608]	@ (801bd70 <_printf_float+0x2c8>)
 801bb10:	f04f 32ff 	mov.w	r2, #4294967295
 801bb14:	f7e4 ffc4 	bl	8000aa0 <__aeabi_dcmple>
 801bb18:	bb30      	cbnz	r0, 801bb68 <_printf_float+0xc0>
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	2300      	movs	r3, #0
 801bb1e:	4640      	mov	r0, r8
 801bb20:	4649      	mov	r1, r9
 801bb22:	f7e4 ffb3 	bl	8000a8c <__aeabi_dcmplt>
 801bb26:	b110      	cbz	r0, 801bb2e <_printf_float+0x86>
 801bb28:	232d      	movs	r3, #45	@ 0x2d
 801bb2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bb2e:	4a91      	ldr	r2, [pc, #580]	@ (801bd74 <_printf_float+0x2cc>)
 801bb30:	4b91      	ldr	r3, [pc, #580]	@ (801bd78 <_printf_float+0x2d0>)
 801bb32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801bb36:	bf94      	ite	ls
 801bb38:	4690      	movls	r8, r2
 801bb3a:	4698      	movhi	r8, r3
 801bb3c:	2303      	movs	r3, #3
 801bb3e:	6123      	str	r3, [r4, #16]
 801bb40:	f02b 0304 	bic.w	r3, fp, #4
 801bb44:	6023      	str	r3, [r4, #0]
 801bb46:	f04f 0900 	mov.w	r9, #0
 801bb4a:	9700      	str	r7, [sp, #0]
 801bb4c:	4633      	mov	r3, r6
 801bb4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801bb50:	4621      	mov	r1, r4
 801bb52:	4628      	mov	r0, r5
 801bb54:	f000 f9d2 	bl	801befc <_printf_common>
 801bb58:	3001      	adds	r0, #1
 801bb5a:	f040 808d 	bne.w	801bc78 <_printf_float+0x1d0>
 801bb5e:	f04f 30ff 	mov.w	r0, #4294967295
 801bb62:	b00d      	add	sp, #52	@ 0x34
 801bb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb68:	4642      	mov	r2, r8
 801bb6a:	464b      	mov	r3, r9
 801bb6c:	4640      	mov	r0, r8
 801bb6e:	4649      	mov	r1, r9
 801bb70:	f7e4 ffb4 	bl	8000adc <__aeabi_dcmpun>
 801bb74:	b140      	cbz	r0, 801bb88 <_printf_float+0xe0>
 801bb76:	464b      	mov	r3, r9
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	bfbc      	itt	lt
 801bb7c:	232d      	movlt	r3, #45	@ 0x2d
 801bb7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801bb82:	4a7e      	ldr	r2, [pc, #504]	@ (801bd7c <_printf_float+0x2d4>)
 801bb84:	4b7e      	ldr	r3, [pc, #504]	@ (801bd80 <_printf_float+0x2d8>)
 801bb86:	e7d4      	b.n	801bb32 <_printf_float+0x8a>
 801bb88:	6863      	ldr	r3, [r4, #4]
 801bb8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801bb8e:	9206      	str	r2, [sp, #24]
 801bb90:	1c5a      	adds	r2, r3, #1
 801bb92:	d13b      	bne.n	801bc0c <_printf_float+0x164>
 801bb94:	2306      	movs	r3, #6
 801bb96:	6063      	str	r3, [r4, #4]
 801bb98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801bb9c:	2300      	movs	r3, #0
 801bb9e:	6022      	str	r2, [r4, #0]
 801bba0:	9303      	str	r3, [sp, #12]
 801bba2:	ab0a      	add	r3, sp, #40	@ 0x28
 801bba4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801bba8:	ab09      	add	r3, sp, #36	@ 0x24
 801bbaa:	9300      	str	r3, [sp, #0]
 801bbac:	6861      	ldr	r1, [r4, #4]
 801bbae:	ec49 8b10 	vmov	d0, r8, r9
 801bbb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801bbb6:	4628      	mov	r0, r5
 801bbb8:	f7ff fed6 	bl	801b968 <__cvt>
 801bbbc:	9b06      	ldr	r3, [sp, #24]
 801bbbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801bbc0:	2b47      	cmp	r3, #71	@ 0x47
 801bbc2:	4680      	mov	r8, r0
 801bbc4:	d129      	bne.n	801bc1a <_printf_float+0x172>
 801bbc6:	1cc8      	adds	r0, r1, #3
 801bbc8:	db02      	blt.n	801bbd0 <_printf_float+0x128>
 801bbca:	6863      	ldr	r3, [r4, #4]
 801bbcc:	4299      	cmp	r1, r3
 801bbce:	dd41      	ble.n	801bc54 <_printf_float+0x1ac>
 801bbd0:	f1aa 0a02 	sub.w	sl, sl, #2
 801bbd4:	fa5f fa8a 	uxtb.w	sl, sl
 801bbd8:	3901      	subs	r1, #1
 801bbda:	4652      	mov	r2, sl
 801bbdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801bbe0:	9109      	str	r1, [sp, #36]	@ 0x24
 801bbe2:	f7ff ff26 	bl	801ba32 <__exponent>
 801bbe6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bbe8:	1813      	adds	r3, r2, r0
 801bbea:	2a01      	cmp	r2, #1
 801bbec:	4681      	mov	r9, r0
 801bbee:	6123      	str	r3, [r4, #16]
 801bbf0:	dc02      	bgt.n	801bbf8 <_printf_float+0x150>
 801bbf2:	6822      	ldr	r2, [r4, #0]
 801bbf4:	07d2      	lsls	r2, r2, #31
 801bbf6:	d501      	bpl.n	801bbfc <_printf_float+0x154>
 801bbf8:	3301      	adds	r3, #1
 801bbfa:	6123      	str	r3, [r4, #16]
 801bbfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d0a2      	beq.n	801bb4a <_printf_float+0xa2>
 801bc04:	232d      	movs	r3, #45	@ 0x2d
 801bc06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bc0a:	e79e      	b.n	801bb4a <_printf_float+0xa2>
 801bc0c:	9a06      	ldr	r2, [sp, #24]
 801bc0e:	2a47      	cmp	r2, #71	@ 0x47
 801bc10:	d1c2      	bne.n	801bb98 <_printf_float+0xf0>
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d1c0      	bne.n	801bb98 <_printf_float+0xf0>
 801bc16:	2301      	movs	r3, #1
 801bc18:	e7bd      	b.n	801bb96 <_printf_float+0xee>
 801bc1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bc1e:	d9db      	bls.n	801bbd8 <_printf_float+0x130>
 801bc20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801bc24:	d118      	bne.n	801bc58 <_printf_float+0x1b0>
 801bc26:	2900      	cmp	r1, #0
 801bc28:	6863      	ldr	r3, [r4, #4]
 801bc2a:	dd0b      	ble.n	801bc44 <_printf_float+0x19c>
 801bc2c:	6121      	str	r1, [r4, #16]
 801bc2e:	b913      	cbnz	r3, 801bc36 <_printf_float+0x18e>
 801bc30:	6822      	ldr	r2, [r4, #0]
 801bc32:	07d0      	lsls	r0, r2, #31
 801bc34:	d502      	bpl.n	801bc3c <_printf_float+0x194>
 801bc36:	3301      	adds	r3, #1
 801bc38:	440b      	add	r3, r1
 801bc3a:	6123      	str	r3, [r4, #16]
 801bc3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801bc3e:	f04f 0900 	mov.w	r9, #0
 801bc42:	e7db      	b.n	801bbfc <_printf_float+0x154>
 801bc44:	b913      	cbnz	r3, 801bc4c <_printf_float+0x1a4>
 801bc46:	6822      	ldr	r2, [r4, #0]
 801bc48:	07d2      	lsls	r2, r2, #31
 801bc4a:	d501      	bpl.n	801bc50 <_printf_float+0x1a8>
 801bc4c:	3302      	adds	r3, #2
 801bc4e:	e7f4      	b.n	801bc3a <_printf_float+0x192>
 801bc50:	2301      	movs	r3, #1
 801bc52:	e7f2      	b.n	801bc3a <_printf_float+0x192>
 801bc54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801bc58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bc5a:	4299      	cmp	r1, r3
 801bc5c:	db05      	blt.n	801bc6a <_printf_float+0x1c2>
 801bc5e:	6823      	ldr	r3, [r4, #0]
 801bc60:	6121      	str	r1, [r4, #16]
 801bc62:	07d8      	lsls	r0, r3, #31
 801bc64:	d5ea      	bpl.n	801bc3c <_printf_float+0x194>
 801bc66:	1c4b      	adds	r3, r1, #1
 801bc68:	e7e7      	b.n	801bc3a <_printf_float+0x192>
 801bc6a:	2900      	cmp	r1, #0
 801bc6c:	bfd4      	ite	le
 801bc6e:	f1c1 0202 	rsble	r2, r1, #2
 801bc72:	2201      	movgt	r2, #1
 801bc74:	4413      	add	r3, r2
 801bc76:	e7e0      	b.n	801bc3a <_printf_float+0x192>
 801bc78:	6823      	ldr	r3, [r4, #0]
 801bc7a:	055a      	lsls	r2, r3, #21
 801bc7c:	d407      	bmi.n	801bc8e <_printf_float+0x1e6>
 801bc7e:	6923      	ldr	r3, [r4, #16]
 801bc80:	4642      	mov	r2, r8
 801bc82:	4631      	mov	r1, r6
 801bc84:	4628      	mov	r0, r5
 801bc86:	47b8      	blx	r7
 801bc88:	3001      	adds	r0, #1
 801bc8a:	d12b      	bne.n	801bce4 <_printf_float+0x23c>
 801bc8c:	e767      	b.n	801bb5e <_printf_float+0xb6>
 801bc8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bc92:	f240 80dd 	bls.w	801be50 <_printf_float+0x3a8>
 801bc96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	2300      	movs	r3, #0
 801bc9e:	f7e4 feeb 	bl	8000a78 <__aeabi_dcmpeq>
 801bca2:	2800      	cmp	r0, #0
 801bca4:	d033      	beq.n	801bd0e <_printf_float+0x266>
 801bca6:	4a37      	ldr	r2, [pc, #220]	@ (801bd84 <_printf_float+0x2dc>)
 801bca8:	2301      	movs	r3, #1
 801bcaa:	4631      	mov	r1, r6
 801bcac:	4628      	mov	r0, r5
 801bcae:	47b8      	blx	r7
 801bcb0:	3001      	adds	r0, #1
 801bcb2:	f43f af54 	beq.w	801bb5e <_printf_float+0xb6>
 801bcb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801bcba:	4543      	cmp	r3, r8
 801bcbc:	db02      	blt.n	801bcc4 <_printf_float+0x21c>
 801bcbe:	6823      	ldr	r3, [r4, #0]
 801bcc0:	07d8      	lsls	r0, r3, #31
 801bcc2:	d50f      	bpl.n	801bce4 <_printf_float+0x23c>
 801bcc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bcc8:	4631      	mov	r1, r6
 801bcca:	4628      	mov	r0, r5
 801bccc:	47b8      	blx	r7
 801bcce:	3001      	adds	r0, #1
 801bcd0:	f43f af45 	beq.w	801bb5e <_printf_float+0xb6>
 801bcd4:	f04f 0900 	mov.w	r9, #0
 801bcd8:	f108 38ff 	add.w	r8, r8, #4294967295
 801bcdc:	f104 0a1a 	add.w	sl, r4, #26
 801bce0:	45c8      	cmp	r8, r9
 801bce2:	dc09      	bgt.n	801bcf8 <_printf_float+0x250>
 801bce4:	6823      	ldr	r3, [r4, #0]
 801bce6:	079b      	lsls	r3, r3, #30
 801bce8:	f100 8103 	bmi.w	801bef2 <_printf_float+0x44a>
 801bcec:	68e0      	ldr	r0, [r4, #12]
 801bcee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bcf0:	4298      	cmp	r0, r3
 801bcf2:	bfb8      	it	lt
 801bcf4:	4618      	movlt	r0, r3
 801bcf6:	e734      	b.n	801bb62 <_printf_float+0xba>
 801bcf8:	2301      	movs	r3, #1
 801bcfa:	4652      	mov	r2, sl
 801bcfc:	4631      	mov	r1, r6
 801bcfe:	4628      	mov	r0, r5
 801bd00:	47b8      	blx	r7
 801bd02:	3001      	adds	r0, #1
 801bd04:	f43f af2b 	beq.w	801bb5e <_printf_float+0xb6>
 801bd08:	f109 0901 	add.w	r9, r9, #1
 801bd0c:	e7e8      	b.n	801bce0 <_printf_float+0x238>
 801bd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	dc39      	bgt.n	801bd88 <_printf_float+0x2e0>
 801bd14:	4a1b      	ldr	r2, [pc, #108]	@ (801bd84 <_printf_float+0x2dc>)
 801bd16:	2301      	movs	r3, #1
 801bd18:	4631      	mov	r1, r6
 801bd1a:	4628      	mov	r0, r5
 801bd1c:	47b8      	blx	r7
 801bd1e:	3001      	adds	r0, #1
 801bd20:	f43f af1d 	beq.w	801bb5e <_printf_float+0xb6>
 801bd24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801bd28:	ea59 0303 	orrs.w	r3, r9, r3
 801bd2c:	d102      	bne.n	801bd34 <_printf_float+0x28c>
 801bd2e:	6823      	ldr	r3, [r4, #0]
 801bd30:	07d9      	lsls	r1, r3, #31
 801bd32:	d5d7      	bpl.n	801bce4 <_printf_float+0x23c>
 801bd34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bd38:	4631      	mov	r1, r6
 801bd3a:	4628      	mov	r0, r5
 801bd3c:	47b8      	blx	r7
 801bd3e:	3001      	adds	r0, #1
 801bd40:	f43f af0d 	beq.w	801bb5e <_printf_float+0xb6>
 801bd44:	f04f 0a00 	mov.w	sl, #0
 801bd48:	f104 0b1a 	add.w	fp, r4, #26
 801bd4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd4e:	425b      	negs	r3, r3
 801bd50:	4553      	cmp	r3, sl
 801bd52:	dc01      	bgt.n	801bd58 <_printf_float+0x2b0>
 801bd54:	464b      	mov	r3, r9
 801bd56:	e793      	b.n	801bc80 <_printf_float+0x1d8>
 801bd58:	2301      	movs	r3, #1
 801bd5a:	465a      	mov	r2, fp
 801bd5c:	4631      	mov	r1, r6
 801bd5e:	4628      	mov	r0, r5
 801bd60:	47b8      	blx	r7
 801bd62:	3001      	adds	r0, #1
 801bd64:	f43f aefb 	beq.w	801bb5e <_printf_float+0xb6>
 801bd68:	f10a 0a01 	add.w	sl, sl, #1
 801bd6c:	e7ee      	b.n	801bd4c <_printf_float+0x2a4>
 801bd6e:	bf00      	nop
 801bd70:	7fefffff 	.word	0x7fefffff
 801bd74:	080233b1 	.word	0x080233b1
 801bd78:	080233b5 	.word	0x080233b5
 801bd7c:	080233b9 	.word	0x080233b9
 801bd80:	080233bd 	.word	0x080233bd
 801bd84:	080233c1 	.word	0x080233c1
 801bd88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801bd8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801bd8e:	4553      	cmp	r3, sl
 801bd90:	bfa8      	it	ge
 801bd92:	4653      	movge	r3, sl
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	4699      	mov	r9, r3
 801bd98:	dc36      	bgt.n	801be08 <_printf_float+0x360>
 801bd9a:	f04f 0b00 	mov.w	fp, #0
 801bd9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bda2:	f104 021a 	add.w	r2, r4, #26
 801bda6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801bda8:	9306      	str	r3, [sp, #24]
 801bdaa:	eba3 0309 	sub.w	r3, r3, r9
 801bdae:	455b      	cmp	r3, fp
 801bdb0:	dc31      	bgt.n	801be16 <_printf_float+0x36e>
 801bdb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bdb4:	459a      	cmp	sl, r3
 801bdb6:	dc3a      	bgt.n	801be2e <_printf_float+0x386>
 801bdb8:	6823      	ldr	r3, [r4, #0]
 801bdba:	07da      	lsls	r2, r3, #31
 801bdbc:	d437      	bmi.n	801be2e <_printf_float+0x386>
 801bdbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bdc0:	ebaa 0903 	sub.w	r9, sl, r3
 801bdc4:	9b06      	ldr	r3, [sp, #24]
 801bdc6:	ebaa 0303 	sub.w	r3, sl, r3
 801bdca:	4599      	cmp	r9, r3
 801bdcc:	bfa8      	it	ge
 801bdce:	4699      	movge	r9, r3
 801bdd0:	f1b9 0f00 	cmp.w	r9, #0
 801bdd4:	dc33      	bgt.n	801be3e <_printf_float+0x396>
 801bdd6:	f04f 0800 	mov.w	r8, #0
 801bdda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bdde:	f104 0b1a 	add.w	fp, r4, #26
 801bde2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bde4:	ebaa 0303 	sub.w	r3, sl, r3
 801bde8:	eba3 0309 	sub.w	r3, r3, r9
 801bdec:	4543      	cmp	r3, r8
 801bdee:	f77f af79 	ble.w	801bce4 <_printf_float+0x23c>
 801bdf2:	2301      	movs	r3, #1
 801bdf4:	465a      	mov	r2, fp
 801bdf6:	4631      	mov	r1, r6
 801bdf8:	4628      	mov	r0, r5
 801bdfa:	47b8      	blx	r7
 801bdfc:	3001      	adds	r0, #1
 801bdfe:	f43f aeae 	beq.w	801bb5e <_printf_float+0xb6>
 801be02:	f108 0801 	add.w	r8, r8, #1
 801be06:	e7ec      	b.n	801bde2 <_printf_float+0x33a>
 801be08:	4642      	mov	r2, r8
 801be0a:	4631      	mov	r1, r6
 801be0c:	4628      	mov	r0, r5
 801be0e:	47b8      	blx	r7
 801be10:	3001      	adds	r0, #1
 801be12:	d1c2      	bne.n	801bd9a <_printf_float+0x2f2>
 801be14:	e6a3      	b.n	801bb5e <_printf_float+0xb6>
 801be16:	2301      	movs	r3, #1
 801be18:	4631      	mov	r1, r6
 801be1a:	4628      	mov	r0, r5
 801be1c:	9206      	str	r2, [sp, #24]
 801be1e:	47b8      	blx	r7
 801be20:	3001      	adds	r0, #1
 801be22:	f43f ae9c 	beq.w	801bb5e <_printf_float+0xb6>
 801be26:	9a06      	ldr	r2, [sp, #24]
 801be28:	f10b 0b01 	add.w	fp, fp, #1
 801be2c:	e7bb      	b.n	801bda6 <_printf_float+0x2fe>
 801be2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be32:	4631      	mov	r1, r6
 801be34:	4628      	mov	r0, r5
 801be36:	47b8      	blx	r7
 801be38:	3001      	adds	r0, #1
 801be3a:	d1c0      	bne.n	801bdbe <_printf_float+0x316>
 801be3c:	e68f      	b.n	801bb5e <_printf_float+0xb6>
 801be3e:	9a06      	ldr	r2, [sp, #24]
 801be40:	464b      	mov	r3, r9
 801be42:	4442      	add	r2, r8
 801be44:	4631      	mov	r1, r6
 801be46:	4628      	mov	r0, r5
 801be48:	47b8      	blx	r7
 801be4a:	3001      	adds	r0, #1
 801be4c:	d1c3      	bne.n	801bdd6 <_printf_float+0x32e>
 801be4e:	e686      	b.n	801bb5e <_printf_float+0xb6>
 801be50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801be54:	f1ba 0f01 	cmp.w	sl, #1
 801be58:	dc01      	bgt.n	801be5e <_printf_float+0x3b6>
 801be5a:	07db      	lsls	r3, r3, #31
 801be5c:	d536      	bpl.n	801becc <_printf_float+0x424>
 801be5e:	2301      	movs	r3, #1
 801be60:	4642      	mov	r2, r8
 801be62:	4631      	mov	r1, r6
 801be64:	4628      	mov	r0, r5
 801be66:	47b8      	blx	r7
 801be68:	3001      	adds	r0, #1
 801be6a:	f43f ae78 	beq.w	801bb5e <_printf_float+0xb6>
 801be6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be72:	4631      	mov	r1, r6
 801be74:	4628      	mov	r0, r5
 801be76:	47b8      	blx	r7
 801be78:	3001      	adds	r0, #1
 801be7a:	f43f ae70 	beq.w	801bb5e <_printf_float+0xb6>
 801be7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801be82:	2200      	movs	r2, #0
 801be84:	2300      	movs	r3, #0
 801be86:	f10a 3aff 	add.w	sl, sl, #4294967295
 801be8a:	f7e4 fdf5 	bl	8000a78 <__aeabi_dcmpeq>
 801be8e:	b9c0      	cbnz	r0, 801bec2 <_printf_float+0x41a>
 801be90:	4653      	mov	r3, sl
 801be92:	f108 0201 	add.w	r2, r8, #1
 801be96:	4631      	mov	r1, r6
 801be98:	4628      	mov	r0, r5
 801be9a:	47b8      	blx	r7
 801be9c:	3001      	adds	r0, #1
 801be9e:	d10c      	bne.n	801beba <_printf_float+0x412>
 801bea0:	e65d      	b.n	801bb5e <_printf_float+0xb6>
 801bea2:	2301      	movs	r3, #1
 801bea4:	465a      	mov	r2, fp
 801bea6:	4631      	mov	r1, r6
 801bea8:	4628      	mov	r0, r5
 801beaa:	47b8      	blx	r7
 801beac:	3001      	adds	r0, #1
 801beae:	f43f ae56 	beq.w	801bb5e <_printf_float+0xb6>
 801beb2:	f108 0801 	add.w	r8, r8, #1
 801beb6:	45d0      	cmp	r8, sl
 801beb8:	dbf3      	blt.n	801bea2 <_printf_float+0x3fa>
 801beba:	464b      	mov	r3, r9
 801bebc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801bec0:	e6df      	b.n	801bc82 <_printf_float+0x1da>
 801bec2:	f04f 0800 	mov.w	r8, #0
 801bec6:	f104 0b1a 	add.w	fp, r4, #26
 801beca:	e7f4      	b.n	801beb6 <_printf_float+0x40e>
 801becc:	2301      	movs	r3, #1
 801bece:	4642      	mov	r2, r8
 801bed0:	e7e1      	b.n	801be96 <_printf_float+0x3ee>
 801bed2:	2301      	movs	r3, #1
 801bed4:	464a      	mov	r2, r9
 801bed6:	4631      	mov	r1, r6
 801bed8:	4628      	mov	r0, r5
 801beda:	47b8      	blx	r7
 801bedc:	3001      	adds	r0, #1
 801bede:	f43f ae3e 	beq.w	801bb5e <_printf_float+0xb6>
 801bee2:	f108 0801 	add.w	r8, r8, #1
 801bee6:	68e3      	ldr	r3, [r4, #12]
 801bee8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801beea:	1a5b      	subs	r3, r3, r1
 801beec:	4543      	cmp	r3, r8
 801beee:	dcf0      	bgt.n	801bed2 <_printf_float+0x42a>
 801bef0:	e6fc      	b.n	801bcec <_printf_float+0x244>
 801bef2:	f04f 0800 	mov.w	r8, #0
 801bef6:	f104 0919 	add.w	r9, r4, #25
 801befa:	e7f4      	b.n	801bee6 <_printf_float+0x43e>

0801befc <_printf_common>:
 801befc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf00:	4616      	mov	r6, r2
 801bf02:	4698      	mov	r8, r3
 801bf04:	688a      	ldr	r2, [r1, #8]
 801bf06:	690b      	ldr	r3, [r1, #16]
 801bf08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bf0c:	4293      	cmp	r3, r2
 801bf0e:	bfb8      	it	lt
 801bf10:	4613      	movlt	r3, r2
 801bf12:	6033      	str	r3, [r6, #0]
 801bf14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bf18:	4607      	mov	r7, r0
 801bf1a:	460c      	mov	r4, r1
 801bf1c:	b10a      	cbz	r2, 801bf22 <_printf_common+0x26>
 801bf1e:	3301      	adds	r3, #1
 801bf20:	6033      	str	r3, [r6, #0]
 801bf22:	6823      	ldr	r3, [r4, #0]
 801bf24:	0699      	lsls	r1, r3, #26
 801bf26:	bf42      	ittt	mi
 801bf28:	6833      	ldrmi	r3, [r6, #0]
 801bf2a:	3302      	addmi	r3, #2
 801bf2c:	6033      	strmi	r3, [r6, #0]
 801bf2e:	6825      	ldr	r5, [r4, #0]
 801bf30:	f015 0506 	ands.w	r5, r5, #6
 801bf34:	d106      	bne.n	801bf44 <_printf_common+0x48>
 801bf36:	f104 0a19 	add.w	sl, r4, #25
 801bf3a:	68e3      	ldr	r3, [r4, #12]
 801bf3c:	6832      	ldr	r2, [r6, #0]
 801bf3e:	1a9b      	subs	r3, r3, r2
 801bf40:	42ab      	cmp	r3, r5
 801bf42:	dc26      	bgt.n	801bf92 <_printf_common+0x96>
 801bf44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bf48:	6822      	ldr	r2, [r4, #0]
 801bf4a:	3b00      	subs	r3, #0
 801bf4c:	bf18      	it	ne
 801bf4e:	2301      	movne	r3, #1
 801bf50:	0692      	lsls	r2, r2, #26
 801bf52:	d42b      	bmi.n	801bfac <_printf_common+0xb0>
 801bf54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bf58:	4641      	mov	r1, r8
 801bf5a:	4638      	mov	r0, r7
 801bf5c:	47c8      	blx	r9
 801bf5e:	3001      	adds	r0, #1
 801bf60:	d01e      	beq.n	801bfa0 <_printf_common+0xa4>
 801bf62:	6823      	ldr	r3, [r4, #0]
 801bf64:	6922      	ldr	r2, [r4, #16]
 801bf66:	f003 0306 	and.w	r3, r3, #6
 801bf6a:	2b04      	cmp	r3, #4
 801bf6c:	bf02      	ittt	eq
 801bf6e:	68e5      	ldreq	r5, [r4, #12]
 801bf70:	6833      	ldreq	r3, [r6, #0]
 801bf72:	1aed      	subeq	r5, r5, r3
 801bf74:	68a3      	ldr	r3, [r4, #8]
 801bf76:	bf0c      	ite	eq
 801bf78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bf7c:	2500      	movne	r5, #0
 801bf7e:	4293      	cmp	r3, r2
 801bf80:	bfc4      	itt	gt
 801bf82:	1a9b      	subgt	r3, r3, r2
 801bf84:	18ed      	addgt	r5, r5, r3
 801bf86:	2600      	movs	r6, #0
 801bf88:	341a      	adds	r4, #26
 801bf8a:	42b5      	cmp	r5, r6
 801bf8c:	d11a      	bne.n	801bfc4 <_printf_common+0xc8>
 801bf8e:	2000      	movs	r0, #0
 801bf90:	e008      	b.n	801bfa4 <_printf_common+0xa8>
 801bf92:	2301      	movs	r3, #1
 801bf94:	4652      	mov	r2, sl
 801bf96:	4641      	mov	r1, r8
 801bf98:	4638      	mov	r0, r7
 801bf9a:	47c8      	blx	r9
 801bf9c:	3001      	adds	r0, #1
 801bf9e:	d103      	bne.n	801bfa8 <_printf_common+0xac>
 801bfa0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfa8:	3501      	adds	r5, #1
 801bfaa:	e7c6      	b.n	801bf3a <_printf_common+0x3e>
 801bfac:	18e1      	adds	r1, r4, r3
 801bfae:	1c5a      	adds	r2, r3, #1
 801bfb0:	2030      	movs	r0, #48	@ 0x30
 801bfb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bfb6:	4422      	add	r2, r4
 801bfb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bfbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bfc0:	3302      	adds	r3, #2
 801bfc2:	e7c7      	b.n	801bf54 <_printf_common+0x58>
 801bfc4:	2301      	movs	r3, #1
 801bfc6:	4622      	mov	r2, r4
 801bfc8:	4641      	mov	r1, r8
 801bfca:	4638      	mov	r0, r7
 801bfcc:	47c8      	blx	r9
 801bfce:	3001      	adds	r0, #1
 801bfd0:	d0e6      	beq.n	801bfa0 <_printf_common+0xa4>
 801bfd2:	3601      	adds	r6, #1
 801bfd4:	e7d9      	b.n	801bf8a <_printf_common+0x8e>
	...

0801bfd8 <_printf_i>:
 801bfd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bfdc:	7e0f      	ldrb	r7, [r1, #24]
 801bfde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bfe0:	2f78      	cmp	r7, #120	@ 0x78
 801bfe2:	4691      	mov	r9, r2
 801bfe4:	4680      	mov	r8, r0
 801bfe6:	460c      	mov	r4, r1
 801bfe8:	469a      	mov	sl, r3
 801bfea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bfee:	d807      	bhi.n	801c000 <_printf_i+0x28>
 801bff0:	2f62      	cmp	r7, #98	@ 0x62
 801bff2:	d80a      	bhi.n	801c00a <_printf_i+0x32>
 801bff4:	2f00      	cmp	r7, #0
 801bff6:	f000 80d2 	beq.w	801c19e <_printf_i+0x1c6>
 801bffa:	2f58      	cmp	r7, #88	@ 0x58
 801bffc:	f000 80b9 	beq.w	801c172 <_printf_i+0x19a>
 801c000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c004:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c008:	e03a      	b.n	801c080 <_printf_i+0xa8>
 801c00a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c00e:	2b15      	cmp	r3, #21
 801c010:	d8f6      	bhi.n	801c000 <_printf_i+0x28>
 801c012:	a101      	add	r1, pc, #4	@ (adr r1, 801c018 <_printf_i+0x40>)
 801c014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c018:	0801c071 	.word	0x0801c071
 801c01c:	0801c085 	.word	0x0801c085
 801c020:	0801c001 	.word	0x0801c001
 801c024:	0801c001 	.word	0x0801c001
 801c028:	0801c001 	.word	0x0801c001
 801c02c:	0801c001 	.word	0x0801c001
 801c030:	0801c085 	.word	0x0801c085
 801c034:	0801c001 	.word	0x0801c001
 801c038:	0801c001 	.word	0x0801c001
 801c03c:	0801c001 	.word	0x0801c001
 801c040:	0801c001 	.word	0x0801c001
 801c044:	0801c185 	.word	0x0801c185
 801c048:	0801c0af 	.word	0x0801c0af
 801c04c:	0801c13f 	.word	0x0801c13f
 801c050:	0801c001 	.word	0x0801c001
 801c054:	0801c001 	.word	0x0801c001
 801c058:	0801c1a7 	.word	0x0801c1a7
 801c05c:	0801c001 	.word	0x0801c001
 801c060:	0801c0af 	.word	0x0801c0af
 801c064:	0801c001 	.word	0x0801c001
 801c068:	0801c001 	.word	0x0801c001
 801c06c:	0801c147 	.word	0x0801c147
 801c070:	6833      	ldr	r3, [r6, #0]
 801c072:	1d1a      	adds	r2, r3, #4
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	6032      	str	r2, [r6, #0]
 801c078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c07c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c080:	2301      	movs	r3, #1
 801c082:	e09d      	b.n	801c1c0 <_printf_i+0x1e8>
 801c084:	6833      	ldr	r3, [r6, #0]
 801c086:	6820      	ldr	r0, [r4, #0]
 801c088:	1d19      	adds	r1, r3, #4
 801c08a:	6031      	str	r1, [r6, #0]
 801c08c:	0606      	lsls	r6, r0, #24
 801c08e:	d501      	bpl.n	801c094 <_printf_i+0xbc>
 801c090:	681d      	ldr	r5, [r3, #0]
 801c092:	e003      	b.n	801c09c <_printf_i+0xc4>
 801c094:	0645      	lsls	r5, r0, #25
 801c096:	d5fb      	bpl.n	801c090 <_printf_i+0xb8>
 801c098:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c09c:	2d00      	cmp	r5, #0
 801c09e:	da03      	bge.n	801c0a8 <_printf_i+0xd0>
 801c0a0:	232d      	movs	r3, #45	@ 0x2d
 801c0a2:	426d      	negs	r5, r5
 801c0a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c0a8:	4859      	ldr	r0, [pc, #356]	@ (801c210 <_printf_i+0x238>)
 801c0aa:	230a      	movs	r3, #10
 801c0ac:	e011      	b.n	801c0d2 <_printf_i+0xfa>
 801c0ae:	6821      	ldr	r1, [r4, #0]
 801c0b0:	6833      	ldr	r3, [r6, #0]
 801c0b2:	0608      	lsls	r0, r1, #24
 801c0b4:	f853 5b04 	ldr.w	r5, [r3], #4
 801c0b8:	d402      	bmi.n	801c0c0 <_printf_i+0xe8>
 801c0ba:	0649      	lsls	r1, r1, #25
 801c0bc:	bf48      	it	mi
 801c0be:	b2ad      	uxthmi	r5, r5
 801c0c0:	2f6f      	cmp	r7, #111	@ 0x6f
 801c0c2:	4853      	ldr	r0, [pc, #332]	@ (801c210 <_printf_i+0x238>)
 801c0c4:	6033      	str	r3, [r6, #0]
 801c0c6:	bf14      	ite	ne
 801c0c8:	230a      	movne	r3, #10
 801c0ca:	2308      	moveq	r3, #8
 801c0cc:	2100      	movs	r1, #0
 801c0ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c0d2:	6866      	ldr	r6, [r4, #4]
 801c0d4:	60a6      	str	r6, [r4, #8]
 801c0d6:	2e00      	cmp	r6, #0
 801c0d8:	bfa2      	ittt	ge
 801c0da:	6821      	ldrge	r1, [r4, #0]
 801c0dc:	f021 0104 	bicge.w	r1, r1, #4
 801c0e0:	6021      	strge	r1, [r4, #0]
 801c0e2:	b90d      	cbnz	r5, 801c0e8 <_printf_i+0x110>
 801c0e4:	2e00      	cmp	r6, #0
 801c0e6:	d04b      	beq.n	801c180 <_printf_i+0x1a8>
 801c0e8:	4616      	mov	r6, r2
 801c0ea:	fbb5 f1f3 	udiv	r1, r5, r3
 801c0ee:	fb03 5711 	mls	r7, r3, r1, r5
 801c0f2:	5dc7      	ldrb	r7, [r0, r7]
 801c0f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c0f8:	462f      	mov	r7, r5
 801c0fa:	42bb      	cmp	r3, r7
 801c0fc:	460d      	mov	r5, r1
 801c0fe:	d9f4      	bls.n	801c0ea <_printf_i+0x112>
 801c100:	2b08      	cmp	r3, #8
 801c102:	d10b      	bne.n	801c11c <_printf_i+0x144>
 801c104:	6823      	ldr	r3, [r4, #0]
 801c106:	07df      	lsls	r7, r3, #31
 801c108:	d508      	bpl.n	801c11c <_printf_i+0x144>
 801c10a:	6923      	ldr	r3, [r4, #16]
 801c10c:	6861      	ldr	r1, [r4, #4]
 801c10e:	4299      	cmp	r1, r3
 801c110:	bfde      	ittt	le
 801c112:	2330      	movle	r3, #48	@ 0x30
 801c114:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c118:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c11c:	1b92      	subs	r2, r2, r6
 801c11e:	6122      	str	r2, [r4, #16]
 801c120:	f8cd a000 	str.w	sl, [sp]
 801c124:	464b      	mov	r3, r9
 801c126:	aa03      	add	r2, sp, #12
 801c128:	4621      	mov	r1, r4
 801c12a:	4640      	mov	r0, r8
 801c12c:	f7ff fee6 	bl	801befc <_printf_common>
 801c130:	3001      	adds	r0, #1
 801c132:	d14a      	bne.n	801c1ca <_printf_i+0x1f2>
 801c134:	f04f 30ff 	mov.w	r0, #4294967295
 801c138:	b004      	add	sp, #16
 801c13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c13e:	6823      	ldr	r3, [r4, #0]
 801c140:	f043 0320 	orr.w	r3, r3, #32
 801c144:	6023      	str	r3, [r4, #0]
 801c146:	4833      	ldr	r0, [pc, #204]	@ (801c214 <_printf_i+0x23c>)
 801c148:	2778      	movs	r7, #120	@ 0x78
 801c14a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c14e:	6823      	ldr	r3, [r4, #0]
 801c150:	6831      	ldr	r1, [r6, #0]
 801c152:	061f      	lsls	r7, r3, #24
 801c154:	f851 5b04 	ldr.w	r5, [r1], #4
 801c158:	d402      	bmi.n	801c160 <_printf_i+0x188>
 801c15a:	065f      	lsls	r7, r3, #25
 801c15c:	bf48      	it	mi
 801c15e:	b2ad      	uxthmi	r5, r5
 801c160:	6031      	str	r1, [r6, #0]
 801c162:	07d9      	lsls	r1, r3, #31
 801c164:	bf44      	itt	mi
 801c166:	f043 0320 	orrmi.w	r3, r3, #32
 801c16a:	6023      	strmi	r3, [r4, #0]
 801c16c:	b11d      	cbz	r5, 801c176 <_printf_i+0x19e>
 801c16e:	2310      	movs	r3, #16
 801c170:	e7ac      	b.n	801c0cc <_printf_i+0xf4>
 801c172:	4827      	ldr	r0, [pc, #156]	@ (801c210 <_printf_i+0x238>)
 801c174:	e7e9      	b.n	801c14a <_printf_i+0x172>
 801c176:	6823      	ldr	r3, [r4, #0]
 801c178:	f023 0320 	bic.w	r3, r3, #32
 801c17c:	6023      	str	r3, [r4, #0]
 801c17e:	e7f6      	b.n	801c16e <_printf_i+0x196>
 801c180:	4616      	mov	r6, r2
 801c182:	e7bd      	b.n	801c100 <_printf_i+0x128>
 801c184:	6833      	ldr	r3, [r6, #0]
 801c186:	6825      	ldr	r5, [r4, #0]
 801c188:	6961      	ldr	r1, [r4, #20]
 801c18a:	1d18      	adds	r0, r3, #4
 801c18c:	6030      	str	r0, [r6, #0]
 801c18e:	062e      	lsls	r6, r5, #24
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	d501      	bpl.n	801c198 <_printf_i+0x1c0>
 801c194:	6019      	str	r1, [r3, #0]
 801c196:	e002      	b.n	801c19e <_printf_i+0x1c6>
 801c198:	0668      	lsls	r0, r5, #25
 801c19a:	d5fb      	bpl.n	801c194 <_printf_i+0x1bc>
 801c19c:	8019      	strh	r1, [r3, #0]
 801c19e:	2300      	movs	r3, #0
 801c1a0:	6123      	str	r3, [r4, #16]
 801c1a2:	4616      	mov	r6, r2
 801c1a4:	e7bc      	b.n	801c120 <_printf_i+0x148>
 801c1a6:	6833      	ldr	r3, [r6, #0]
 801c1a8:	1d1a      	adds	r2, r3, #4
 801c1aa:	6032      	str	r2, [r6, #0]
 801c1ac:	681e      	ldr	r6, [r3, #0]
 801c1ae:	6862      	ldr	r2, [r4, #4]
 801c1b0:	2100      	movs	r1, #0
 801c1b2:	4630      	mov	r0, r6
 801c1b4:	f7e3 ffe4 	bl	8000180 <memchr>
 801c1b8:	b108      	cbz	r0, 801c1be <_printf_i+0x1e6>
 801c1ba:	1b80      	subs	r0, r0, r6
 801c1bc:	6060      	str	r0, [r4, #4]
 801c1be:	6863      	ldr	r3, [r4, #4]
 801c1c0:	6123      	str	r3, [r4, #16]
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c1c8:	e7aa      	b.n	801c120 <_printf_i+0x148>
 801c1ca:	6923      	ldr	r3, [r4, #16]
 801c1cc:	4632      	mov	r2, r6
 801c1ce:	4649      	mov	r1, r9
 801c1d0:	4640      	mov	r0, r8
 801c1d2:	47d0      	blx	sl
 801c1d4:	3001      	adds	r0, #1
 801c1d6:	d0ad      	beq.n	801c134 <_printf_i+0x15c>
 801c1d8:	6823      	ldr	r3, [r4, #0]
 801c1da:	079b      	lsls	r3, r3, #30
 801c1dc:	d413      	bmi.n	801c206 <_printf_i+0x22e>
 801c1de:	68e0      	ldr	r0, [r4, #12]
 801c1e0:	9b03      	ldr	r3, [sp, #12]
 801c1e2:	4298      	cmp	r0, r3
 801c1e4:	bfb8      	it	lt
 801c1e6:	4618      	movlt	r0, r3
 801c1e8:	e7a6      	b.n	801c138 <_printf_i+0x160>
 801c1ea:	2301      	movs	r3, #1
 801c1ec:	4632      	mov	r2, r6
 801c1ee:	4649      	mov	r1, r9
 801c1f0:	4640      	mov	r0, r8
 801c1f2:	47d0      	blx	sl
 801c1f4:	3001      	adds	r0, #1
 801c1f6:	d09d      	beq.n	801c134 <_printf_i+0x15c>
 801c1f8:	3501      	adds	r5, #1
 801c1fa:	68e3      	ldr	r3, [r4, #12]
 801c1fc:	9903      	ldr	r1, [sp, #12]
 801c1fe:	1a5b      	subs	r3, r3, r1
 801c200:	42ab      	cmp	r3, r5
 801c202:	dcf2      	bgt.n	801c1ea <_printf_i+0x212>
 801c204:	e7eb      	b.n	801c1de <_printf_i+0x206>
 801c206:	2500      	movs	r5, #0
 801c208:	f104 0619 	add.w	r6, r4, #25
 801c20c:	e7f5      	b.n	801c1fa <_printf_i+0x222>
 801c20e:	bf00      	nop
 801c210:	080233c3 	.word	0x080233c3
 801c214:	080233d4 	.word	0x080233d4

0801c218 <_scanf_float>:
 801c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c21c:	b087      	sub	sp, #28
 801c21e:	4617      	mov	r7, r2
 801c220:	9303      	str	r3, [sp, #12]
 801c222:	688b      	ldr	r3, [r1, #8]
 801c224:	1e5a      	subs	r2, r3, #1
 801c226:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801c22a:	bf81      	itttt	hi
 801c22c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801c230:	eb03 0b05 	addhi.w	fp, r3, r5
 801c234:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801c238:	608b      	strhi	r3, [r1, #8]
 801c23a:	680b      	ldr	r3, [r1, #0]
 801c23c:	460a      	mov	r2, r1
 801c23e:	f04f 0500 	mov.w	r5, #0
 801c242:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801c246:	f842 3b1c 	str.w	r3, [r2], #28
 801c24a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c24e:	4680      	mov	r8, r0
 801c250:	460c      	mov	r4, r1
 801c252:	bf98      	it	ls
 801c254:	f04f 0b00 	movls.w	fp, #0
 801c258:	9201      	str	r2, [sp, #4]
 801c25a:	4616      	mov	r6, r2
 801c25c:	46aa      	mov	sl, r5
 801c25e:	46a9      	mov	r9, r5
 801c260:	9502      	str	r5, [sp, #8]
 801c262:	68a2      	ldr	r2, [r4, #8]
 801c264:	b152      	cbz	r2, 801c27c <_scanf_float+0x64>
 801c266:	683b      	ldr	r3, [r7, #0]
 801c268:	781b      	ldrb	r3, [r3, #0]
 801c26a:	2b4e      	cmp	r3, #78	@ 0x4e
 801c26c:	d864      	bhi.n	801c338 <_scanf_float+0x120>
 801c26e:	2b40      	cmp	r3, #64	@ 0x40
 801c270:	d83c      	bhi.n	801c2ec <_scanf_float+0xd4>
 801c272:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801c276:	b2c8      	uxtb	r0, r1
 801c278:	280e      	cmp	r0, #14
 801c27a:	d93a      	bls.n	801c2f2 <_scanf_float+0xda>
 801c27c:	f1b9 0f00 	cmp.w	r9, #0
 801c280:	d003      	beq.n	801c28a <_scanf_float+0x72>
 801c282:	6823      	ldr	r3, [r4, #0]
 801c284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801c288:	6023      	str	r3, [r4, #0]
 801c28a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c28e:	f1ba 0f01 	cmp.w	sl, #1
 801c292:	f200 8117 	bhi.w	801c4c4 <_scanf_float+0x2ac>
 801c296:	9b01      	ldr	r3, [sp, #4]
 801c298:	429e      	cmp	r6, r3
 801c29a:	f200 8108 	bhi.w	801c4ae <_scanf_float+0x296>
 801c29e:	2001      	movs	r0, #1
 801c2a0:	b007      	add	sp, #28
 801c2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2a6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801c2aa:	2a0d      	cmp	r2, #13
 801c2ac:	d8e6      	bhi.n	801c27c <_scanf_float+0x64>
 801c2ae:	a101      	add	r1, pc, #4	@ (adr r1, 801c2b4 <_scanf_float+0x9c>)
 801c2b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c2b4:	0801c3fb 	.word	0x0801c3fb
 801c2b8:	0801c27d 	.word	0x0801c27d
 801c2bc:	0801c27d 	.word	0x0801c27d
 801c2c0:	0801c27d 	.word	0x0801c27d
 801c2c4:	0801c45b 	.word	0x0801c45b
 801c2c8:	0801c433 	.word	0x0801c433
 801c2cc:	0801c27d 	.word	0x0801c27d
 801c2d0:	0801c27d 	.word	0x0801c27d
 801c2d4:	0801c409 	.word	0x0801c409
 801c2d8:	0801c27d 	.word	0x0801c27d
 801c2dc:	0801c27d 	.word	0x0801c27d
 801c2e0:	0801c27d 	.word	0x0801c27d
 801c2e4:	0801c27d 	.word	0x0801c27d
 801c2e8:	0801c3c1 	.word	0x0801c3c1
 801c2ec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801c2f0:	e7db      	b.n	801c2aa <_scanf_float+0x92>
 801c2f2:	290e      	cmp	r1, #14
 801c2f4:	d8c2      	bhi.n	801c27c <_scanf_float+0x64>
 801c2f6:	a001      	add	r0, pc, #4	@ (adr r0, 801c2fc <_scanf_float+0xe4>)
 801c2f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c2fc:	0801c3b1 	.word	0x0801c3b1
 801c300:	0801c27d 	.word	0x0801c27d
 801c304:	0801c3b1 	.word	0x0801c3b1
 801c308:	0801c447 	.word	0x0801c447
 801c30c:	0801c27d 	.word	0x0801c27d
 801c310:	0801c359 	.word	0x0801c359
 801c314:	0801c397 	.word	0x0801c397
 801c318:	0801c397 	.word	0x0801c397
 801c31c:	0801c397 	.word	0x0801c397
 801c320:	0801c397 	.word	0x0801c397
 801c324:	0801c397 	.word	0x0801c397
 801c328:	0801c397 	.word	0x0801c397
 801c32c:	0801c397 	.word	0x0801c397
 801c330:	0801c397 	.word	0x0801c397
 801c334:	0801c397 	.word	0x0801c397
 801c338:	2b6e      	cmp	r3, #110	@ 0x6e
 801c33a:	d809      	bhi.n	801c350 <_scanf_float+0x138>
 801c33c:	2b60      	cmp	r3, #96	@ 0x60
 801c33e:	d8b2      	bhi.n	801c2a6 <_scanf_float+0x8e>
 801c340:	2b54      	cmp	r3, #84	@ 0x54
 801c342:	d07b      	beq.n	801c43c <_scanf_float+0x224>
 801c344:	2b59      	cmp	r3, #89	@ 0x59
 801c346:	d199      	bne.n	801c27c <_scanf_float+0x64>
 801c348:	2d07      	cmp	r5, #7
 801c34a:	d197      	bne.n	801c27c <_scanf_float+0x64>
 801c34c:	2508      	movs	r5, #8
 801c34e:	e02c      	b.n	801c3aa <_scanf_float+0x192>
 801c350:	2b74      	cmp	r3, #116	@ 0x74
 801c352:	d073      	beq.n	801c43c <_scanf_float+0x224>
 801c354:	2b79      	cmp	r3, #121	@ 0x79
 801c356:	e7f6      	b.n	801c346 <_scanf_float+0x12e>
 801c358:	6821      	ldr	r1, [r4, #0]
 801c35a:	05c8      	lsls	r0, r1, #23
 801c35c:	d51b      	bpl.n	801c396 <_scanf_float+0x17e>
 801c35e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801c362:	6021      	str	r1, [r4, #0]
 801c364:	f109 0901 	add.w	r9, r9, #1
 801c368:	f1bb 0f00 	cmp.w	fp, #0
 801c36c:	d003      	beq.n	801c376 <_scanf_float+0x15e>
 801c36e:	3201      	adds	r2, #1
 801c370:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c374:	60a2      	str	r2, [r4, #8]
 801c376:	68a3      	ldr	r3, [r4, #8]
 801c378:	3b01      	subs	r3, #1
 801c37a:	60a3      	str	r3, [r4, #8]
 801c37c:	6923      	ldr	r3, [r4, #16]
 801c37e:	3301      	adds	r3, #1
 801c380:	6123      	str	r3, [r4, #16]
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	3b01      	subs	r3, #1
 801c386:	2b00      	cmp	r3, #0
 801c388:	607b      	str	r3, [r7, #4]
 801c38a:	f340 8087 	ble.w	801c49c <_scanf_float+0x284>
 801c38e:	683b      	ldr	r3, [r7, #0]
 801c390:	3301      	adds	r3, #1
 801c392:	603b      	str	r3, [r7, #0]
 801c394:	e765      	b.n	801c262 <_scanf_float+0x4a>
 801c396:	eb1a 0105 	adds.w	r1, sl, r5
 801c39a:	f47f af6f 	bne.w	801c27c <_scanf_float+0x64>
 801c39e:	6822      	ldr	r2, [r4, #0]
 801c3a0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801c3a4:	6022      	str	r2, [r4, #0]
 801c3a6:	460d      	mov	r5, r1
 801c3a8:	468a      	mov	sl, r1
 801c3aa:	f806 3b01 	strb.w	r3, [r6], #1
 801c3ae:	e7e2      	b.n	801c376 <_scanf_float+0x15e>
 801c3b0:	6822      	ldr	r2, [r4, #0]
 801c3b2:	0610      	lsls	r0, r2, #24
 801c3b4:	f57f af62 	bpl.w	801c27c <_scanf_float+0x64>
 801c3b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801c3bc:	6022      	str	r2, [r4, #0]
 801c3be:	e7f4      	b.n	801c3aa <_scanf_float+0x192>
 801c3c0:	f1ba 0f00 	cmp.w	sl, #0
 801c3c4:	d10e      	bne.n	801c3e4 <_scanf_float+0x1cc>
 801c3c6:	f1b9 0f00 	cmp.w	r9, #0
 801c3ca:	d10e      	bne.n	801c3ea <_scanf_float+0x1d2>
 801c3cc:	6822      	ldr	r2, [r4, #0]
 801c3ce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801c3d2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801c3d6:	d108      	bne.n	801c3ea <_scanf_float+0x1d2>
 801c3d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801c3dc:	6022      	str	r2, [r4, #0]
 801c3de:	f04f 0a01 	mov.w	sl, #1
 801c3e2:	e7e2      	b.n	801c3aa <_scanf_float+0x192>
 801c3e4:	f1ba 0f02 	cmp.w	sl, #2
 801c3e8:	d055      	beq.n	801c496 <_scanf_float+0x27e>
 801c3ea:	2d01      	cmp	r5, #1
 801c3ec:	d002      	beq.n	801c3f4 <_scanf_float+0x1dc>
 801c3ee:	2d04      	cmp	r5, #4
 801c3f0:	f47f af44 	bne.w	801c27c <_scanf_float+0x64>
 801c3f4:	3501      	adds	r5, #1
 801c3f6:	b2ed      	uxtb	r5, r5
 801c3f8:	e7d7      	b.n	801c3aa <_scanf_float+0x192>
 801c3fa:	f1ba 0f01 	cmp.w	sl, #1
 801c3fe:	f47f af3d 	bne.w	801c27c <_scanf_float+0x64>
 801c402:	f04f 0a02 	mov.w	sl, #2
 801c406:	e7d0      	b.n	801c3aa <_scanf_float+0x192>
 801c408:	b97d      	cbnz	r5, 801c42a <_scanf_float+0x212>
 801c40a:	f1b9 0f00 	cmp.w	r9, #0
 801c40e:	f47f af38 	bne.w	801c282 <_scanf_float+0x6a>
 801c412:	6822      	ldr	r2, [r4, #0]
 801c414:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801c418:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801c41c:	f040 8108 	bne.w	801c630 <_scanf_float+0x418>
 801c420:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801c424:	6022      	str	r2, [r4, #0]
 801c426:	2501      	movs	r5, #1
 801c428:	e7bf      	b.n	801c3aa <_scanf_float+0x192>
 801c42a:	2d03      	cmp	r5, #3
 801c42c:	d0e2      	beq.n	801c3f4 <_scanf_float+0x1dc>
 801c42e:	2d05      	cmp	r5, #5
 801c430:	e7de      	b.n	801c3f0 <_scanf_float+0x1d8>
 801c432:	2d02      	cmp	r5, #2
 801c434:	f47f af22 	bne.w	801c27c <_scanf_float+0x64>
 801c438:	2503      	movs	r5, #3
 801c43a:	e7b6      	b.n	801c3aa <_scanf_float+0x192>
 801c43c:	2d06      	cmp	r5, #6
 801c43e:	f47f af1d 	bne.w	801c27c <_scanf_float+0x64>
 801c442:	2507      	movs	r5, #7
 801c444:	e7b1      	b.n	801c3aa <_scanf_float+0x192>
 801c446:	6822      	ldr	r2, [r4, #0]
 801c448:	0591      	lsls	r1, r2, #22
 801c44a:	f57f af17 	bpl.w	801c27c <_scanf_float+0x64>
 801c44e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801c452:	6022      	str	r2, [r4, #0]
 801c454:	f8cd 9008 	str.w	r9, [sp, #8]
 801c458:	e7a7      	b.n	801c3aa <_scanf_float+0x192>
 801c45a:	6822      	ldr	r2, [r4, #0]
 801c45c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801c460:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801c464:	d006      	beq.n	801c474 <_scanf_float+0x25c>
 801c466:	0550      	lsls	r0, r2, #21
 801c468:	f57f af08 	bpl.w	801c27c <_scanf_float+0x64>
 801c46c:	f1b9 0f00 	cmp.w	r9, #0
 801c470:	f000 80de 	beq.w	801c630 <_scanf_float+0x418>
 801c474:	0591      	lsls	r1, r2, #22
 801c476:	bf58      	it	pl
 801c478:	9902      	ldrpl	r1, [sp, #8]
 801c47a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801c47e:	bf58      	it	pl
 801c480:	eba9 0101 	subpl.w	r1, r9, r1
 801c484:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801c488:	bf58      	it	pl
 801c48a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c48e:	6022      	str	r2, [r4, #0]
 801c490:	f04f 0900 	mov.w	r9, #0
 801c494:	e789      	b.n	801c3aa <_scanf_float+0x192>
 801c496:	f04f 0a03 	mov.w	sl, #3
 801c49a:	e786      	b.n	801c3aa <_scanf_float+0x192>
 801c49c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801c4a0:	4639      	mov	r1, r7
 801c4a2:	4640      	mov	r0, r8
 801c4a4:	4798      	blx	r3
 801c4a6:	2800      	cmp	r0, #0
 801c4a8:	f43f aedb 	beq.w	801c262 <_scanf_float+0x4a>
 801c4ac:	e6e6      	b.n	801c27c <_scanf_float+0x64>
 801c4ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c4b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c4b6:	463a      	mov	r2, r7
 801c4b8:	4640      	mov	r0, r8
 801c4ba:	4798      	blx	r3
 801c4bc:	6923      	ldr	r3, [r4, #16]
 801c4be:	3b01      	subs	r3, #1
 801c4c0:	6123      	str	r3, [r4, #16]
 801c4c2:	e6e8      	b.n	801c296 <_scanf_float+0x7e>
 801c4c4:	1e6b      	subs	r3, r5, #1
 801c4c6:	2b06      	cmp	r3, #6
 801c4c8:	d824      	bhi.n	801c514 <_scanf_float+0x2fc>
 801c4ca:	2d02      	cmp	r5, #2
 801c4cc:	d836      	bhi.n	801c53c <_scanf_float+0x324>
 801c4ce:	9b01      	ldr	r3, [sp, #4]
 801c4d0:	429e      	cmp	r6, r3
 801c4d2:	f67f aee4 	bls.w	801c29e <_scanf_float+0x86>
 801c4d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c4da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c4de:	463a      	mov	r2, r7
 801c4e0:	4640      	mov	r0, r8
 801c4e2:	4798      	blx	r3
 801c4e4:	6923      	ldr	r3, [r4, #16]
 801c4e6:	3b01      	subs	r3, #1
 801c4e8:	6123      	str	r3, [r4, #16]
 801c4ea:	e7f0      	b.n	801c4ce <_scanf_float+0x2b6>
 801c4ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c4f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801c4f4:	463a      	mov	r2, r7
 801c4f6:	4640      	mov	r0, r8
 801c4f8:	4798      	blx	r3
 801c4fa:	6923      	ldr	r3, [r4, #16]
 801c4fc:	3b01      	subs	r3, #1
 801c4fe:	6123      	str	r3, [r4, #16]
 801c500:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c504:	fa5f fa8a 	uxtb.w	sl, sl
 801c508:	f1ba 0f02 	cmp.w	sl, #2
 801c50c:	d1ee      	bne.n	801c4ec <_scanf_float+0x2d4>
 801c50e:	3d03      	subs	r5, #3
 801c510:	b2ed      	uxtb	r5, r5
 801c512:	1b76      	subs	r6, r6, r5
 801c514:	6823      	ldr	r3, [r4, #0]
 801c516:	05da      	lsls	r2, r3, #23
 801c518:	d530      	bpl.n	801c57c <_scanf_float+0x364>
 801c51a:	055b      	lsls	r3, r3, #21
 801c51c:	d511      	bpl.n	801c542 <_scanf_float+0x32a>
 801c51e:	9b01      	ldr	r3, [sp, #4]
 801c520:	429e      	cmp	r6, r3
 801c522:	f67f aebc 	bls.w	801c29e <_scanf_float+0x86>
 801c526:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c52a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c52e:	463a      	mov	r2, r7
 801c530:	4640      	mov	r0, r8
 801c532:	4798      	blx	r3
 801c534:	6923      	ldr	r3, [r4, #16]
 801c536:	3b01      	subs	r3, #1
 801c538:	6123      	str	r3, [r4, #16]
 801c53a:	e7f0      	b.n	801c51e <_scanf_float+0x306>
 801c53c:	46aa      	mov	sl, r5
 801c53e:	46b3      	mov	fp, r6
 801c540:	e7de      	b.n	801c500 <_scanf_float+0x2e8>
 801c542:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c546:	6923      	ldr	r3, [r4, #16]
 801c548:	2965      	cmp	r1, #101	@ 0x65
 801c54a:	f103 33ff 	add.w	r3, r3, #4294967295
 801c54e:	f106 35ff 	add.w	r5, r6, #4294967295
 801c552:	6123      	str	r3, [r4, #16]
 801c554:	d00c      	beq.n	801c570 <_scanf_float+0x358>
 801c556:	2945      	cmp	r1, #69	@ 0x45
 801c558:	d00a      	beq.n	801c570 <_scanf_float+0x358>
 801c55a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c55e:	463a      	mov	r2, r7
 801c560:	4640      	mov	r0, r8
 801c562:	4798      	blx	r3
 801c564:	6923      	ldr	r3, [r4, #16]
 801c566:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c56a:	3b01      	subs	r3, #1
 801c56c:	1eb5      	subs	r5, r6, #2
 801c56e:	6123      	str	r3, [r4, #16]
 801c570:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c574:	463a      	mov	r2, r7
 801c576:	4640      	mov	r0, r8
 801c578:	4798      	blx	r3
 801c57a:	462e      	mov	r6, r5
 801c57c:	6822      	ldr	r2, [r4, #0]
 801c57e:	f012 0210 	ands.w	r2, r2, #16
 801c582:	d001      	beq.n	801c588 <_scanf_float+0x370>
 801c584:	2000      	movs	r0, #0
 801c586:	e68b      	b.n	801c2a0 <_scanf_float+0x88>
 801c588:	7032      	strb	r2, [r6, #0]
 801c58a:	6823      	ldr	r3, [r4, #0]
 801c58c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801c590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c594:	d11c      	bne.n	801c5d0 <_scanf_float+0x3b8>
 801c596:	9b02      	ldr	r3, [sp, #8]
 801c598:	454b      	cmp	r3, r9
 801c59a:	eba3 0209 	sub.w	r2, r3, r9
 801c59e:	d123      	bne.n	801c5e8 <_scanf_float+0x3d0>
 801c5a0:	9901      	ldr	r1, [sp, #4]
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	4640      	mov	r0, r8
 801c5a6:	f7ff f8ef 	bl	801b788 <_strtod_r>
 801c5aa:	9b03      	ldr	r3, [sp, #12]
 801c5ac:	6821      	ldr	r1, [r4, #0]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	f011 0f02 	tst.w	r1, #2
 801c5b4:	ec57 6b10 	vmov	r6, r7, d0
 801c5b8:	f103 0204 	add.w	r2, r3, #4
 801c5bc:	d01f      	beq.n	801c5fe <_scanf_float+0x3e6>
 801c5be:	9903      	ldr	r1, [sp, #12]
 801c5c0:	600a      	str	r2, [r1, #0]
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	e9c3 6700 	strd	r6, r7, [r3]
 801c5c8:	68e3      	ldr	r3, [r4, #12]
 801c5ca:	3301      	adds	r3, #1
 801c5cc:	60e3      	str	r3, [r4, #12]
 801c5ce:	e7d9      	b.n	801c584 <_scanf_float+0x36c>
 801c5d0:	9b04      	ldr	r3, [sp, #16]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d0e4      	beq.n	801c5a0 <_scanf_float+0x388>
 801c5d6:	9905      	ldr	r1, [sp, #20]
 801c5d8:	230a      	movs	r3, #10
 801c5da:	3101      	adds	r1, #1
 801c5dc:	4640      	mov	r0, r8
 801c5de:	f7ff f9b7 	bl	801b950 <_strtol_r>
 801c5e2:	9b04      	ldr	r3, [sp, #16]
 801c5e4:	9e05      	ldr	r6, [sp, #20]
 801c5e6:	1ac2      	subs	r2, r0, r3
 801c5e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801c5ec:	429e      	cmp	r6, r3
 801c5ee:	bf28      	it	cs
 801c5f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801c5f4:	4910      	ldr	r1, [pc, #64]	@ (801c638 <_scanf_float+0x420>)
 801c5f6:	4630      	mov	r0, r6
 801c5f8:	f000 f918 	bl	801c82c <siprintf>
 801c5fc:	e7d0      	b.n	801c5a0 <_scanf_float+0x388>
 801c5fe:	f011 0f04 	tst.w	r1, #4
 801c602:	9903      	ldr	r1, [sp, #12]
 801c604:	600a      	str	r2, [r1, #0]
 801c606:	d1dc      	bne.n	801c5c2 <_scanf_float+0x3aa>
 801c608:	681d      	ldr	r5, [r3, #0]
 801c60a:	4632      	mov	r2, r6
 801c60c:	463b      	mov	r3, r7
 801c60e:	4630      	mov	r0, r6
 801c610:	4639      	mov	r1, r7
 801c612:	f7e4 fa63 	bl	8000adc <__aeabi_dcmpun>
 801c616:	b128      	cbz	r0, 801c624 <_scanf_float+0x40c>
 801c618:	4808      	ldr	r0, [pc, #32]	@ (801c63c <_scanf_float+0x424>)
 801c61a:	f000 fa9d 	bl	801cb58 <nanf>
 801c61e:	ed85 0a00 	vstr	s0, [r5]
 801c622:	e7d1      	b.n	801c5c8 <_scanf_float+0x3b0>
 801c624:	4630      	mov	r0, r6
 801c626:	4639      	mov	r1, r7
 801c628:	f7e4 fab6 	bl	8000b98 <__aeabi_d2f>
 801c62c:	6028      	str	r0, [r5, #0]
 801c62e:	e7cb      	b.n	801c5c8 <_scanf_float+0x3b0>
 801c630:	f04f 0900 	mov.w	r9, #0
 801c634:	e629      	b.n	801c28a <_scanf_float+0x72>
 801c636:	bf00      	nop
 801c638:	080233e5 	.word	0x080233e5
 801c63c:	0802349e 	.word	0x0802349e

0801c640 <std>:
 801c640:	2300      	movs	r3, #0
 801c642:	b510      	push	{r4, lr}
 801c644:	4604      	mov	r4, r0
 801c646:	e9c0 3300 	strd	r3, r3, [r0]
 801c64a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c64e:	6083      	str	r3, [r0, #8]
 801c650:	8181      	strh	r1, [r0, #12]
 801c652:	6643      	str	r3, [r0, #100]	@ 0x64
 801c654:	81c2      	strh	r2, [r0, #14]
 801c656:	6183      	str	r3, [r0, #24]
 801c658:	4619      	mov	r1, r3
 801c65a:	2208      	movs	r2, #8
 801c65c:	305c      	adds	r0, #92	@ 0x5c
 801c65e:	f000 f948 	bl	801c8f2 <memset>
 801c662:	4b0d      	ldr	r3, [pc, #52]	@ (801c698 <std+0x58>)
 801c664:	6263      	str	r3, [r4, #36]	@ 0x24
 801c666:	4b0d      	ldr	r3, [pc, #52]	@ (801c69c <std+0x5c>)
 801c668:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c66a:	4b0d      	ldr	r3, [pc, #52]	@ (801c6a0 <std+0x60>)
 801c66c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c66e:	4b0d      	ldr	r3, [pc, #52]	@ (801c6a4 <std+0x64>)
 801c670:	6323      	str	r3, [r4, #48]	@ 0x30
 801c672:	4b0d      	ldr	r3, [pc, #52]	@ (801c6a8 <std+0x68>)
 801c674:	6224      	str	r4, [r4, #32]
 801c676:	429c      	cmp	r4, r3
 801c678:	d006      	beq.n	801c688 <std+0x48>
 801c67a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c67e:	4294      	cmp	r4, r2
 801c680:	d002      	beq.n	801c688 <std+0x48>
 801c682:	33d0      	adds	r3, #208	@ 0xd0
 801c684:	429c      	cmp	r4, r3
 801c686:	d105      	bne.n	801c694 <std+0x54>
 801c688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c690:	f000 ba40 	b.w	801cb14 <__retarget_lock_init_recursive>
 801c694:	bd10      	pop	{r4, pc}
 801c696:	bf00      	nop
 801c698:	0801c86d 	.word	0x0801c86d
 801c69c:	0801c88f 	.word	0x0801c88f
 801c6a0:	0801c8c7 	.word	0x0801c8c7
 801c6a4:	0801c8eb 	.word	0x0801c8eb
 801c6a8:	200030e4 	.word	0x200030e4

0801c6ac <stdio_exit_handler>:
 801c6ac:	4a02      	ldr	r2, [pc, #8]	@ (801c6b8 <stdio_exit_handler+0xc>)
 801c6ae:	4903      	ldr	r1, [pc, #12]	@ (801c6bc <stdio_exit_handler+0x10>)
 801c6b0:	4803      	ldr	r0, [pc, #12]	@ (801c6c0 <stdio_exit_handler+0x14>)
 801c6b2:	f000 b869 	b.w	801c788 <_fwalk_sglue>
 801c6b6:	bf00      	nop
 801c6b8:	20000144 	.word	0x20000144
 801c6bc:	0801ef1d 	.word	0x0801ef1d
 801c6c0:	200002c0 	.word	0x200002c0

0801c6c4 <cleanup_stdio>:
 801c6c4:	6841      	ldr	r1, [r0, #4]
 801c6c6:	4b0c      	ldr	r3, [pc, #48]	@ (801c6f8 <cleanup_stdio+0x34>)
 801c6c8:	4299      	cmp	r1, r3
 801c6ca:	b510      	push	{r4, lr}
 801c6cc:	4604      	mov	r4, r0
 801c6ce:	d001      	beq.n	801c6d4 <cleanup_stdio+0x10>
 801c6d0:	f002 fc24 	bl	801ef1c <_fflush_r>
 801c6d4:	68a1      	ldr	r1, [r4, #8]
 801c6d6:	4b09      	ldr	r3, [pc, #36]	@ (801c6fc <cleanup_stdio+0x38>)
 801c6d8:	4299      	cmp	r1, r3
 801c6da:	d002      	beq.n	801c6e2 <cleanup_stdio+0x1e>
 801c6dc:	4620      	mov	r0, r4
 801c6de:	f002 fc1d 	bl	801ef1c <_fflush_r>
 801c6e2:	68e1      	ldr	r1, [r4, #12]
 801c6e4:	4b06      	ldr	r3, [pc, #24]	@ (801c700 <cleanup_stdio+0x3c>)
 801c6e6:	4299      	cmp	r1, r3
 801c6e8:	d004      	beq.n	801c6f4 <cleanup_stdio+0x30>
 801c6ea:	4620      	mov	r0, r4
 801c6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c6f0:	f002 bc14 	b.w	801ef1c <_fflush_r>
 801c6f4:	bd10      	pop	{r4, pc}
 801c6f6:	bf00      	nop
 801c6f8:	200030e4 	.word	0x200030e4
 801c6fc:	2000314c 	.word	0x2000314c
 801c700:	200031b4 	.word	0x200031b4

0801c704 <global_stdio_init.part.0>:
 801c704:	b510      	push	{r4, lr}
 801c706:	4b0b      	ldr	r3, [pc, #44]	@ (801c734 <global_stdio_init.part.0+0x30>)
 801c708:	4c0b      	ldr	r4, [pc, #44]	@ (801c738 <global_stdio_init.part.0+0x34>)
 801c70a:	4a0c      	ldr	r2, [pc, #48]	@ (801c73c <global_stdio_init.part.0+0x38>)
 801c70c:	601a      	str	r2, [r3, #0]
 801c70e:	4620      	mov	r0, r4
 801c710:	2200      	movs	r2, #0
 801c712:	2104      	movs	r1, #4
 801c714:	f7ff ff94 	bl	801c640 <std>
 801c718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c71c:	2201      	movs	r2, #1
 801c71e:	2109      	movs	r1, #9
 801c720:	f7ff ff8e 	bl	801c640 <std>
 801c724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c728:	2202      	movs	r2, #2
 801c72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c72e:	2112      	movs	r1, #18
 801c730:	f7ff bf86 	b.w	801c640 <std>
 801c734:	2000321c 	.word	0x2000321c
 801c738:	200030e4 	.word	0x200030e4
 801c73c:	0801c6ad 	.word	0x0801c6ad

0801c740 <__sfp_lock_acquire>:
 801c740:	4801      	ldr	r0, [pc, #4]	@ (801c748 <__sfp_lock_acquire+0x8>)
 801c742:	f000 b9e8 	b.w	801cb16 <__retarget_lock_acquire_recursive>
 801c746:	bf00      	nop
 801c748:	20003225 	.word	0x20003225

0801c74c <__sfp_lock_release>:
 801c74c:	4801      	ldr	r0, [pc, #4]	@ (801c754 <__sfp_lock_release+0x8>)
 801c74e:	f000 b9e3 	b.w	801cb18 <__retarget_lock_release_recursive>
 801c752:	bf00      	nop
 801c754:	20003225 	.word	0x20003225

0801c758 <__sinit>:
 801c758:	b510      	push	{r4, lr}
 801c75a:	4604      	mov	r4, r0
 801c75c:	f7ff fff0 	bl	801c740 <__sfp_lock_acquire>
 801c760:	6a23      	ldr	r3, [r4, #32]
 801c762:	b11b      	cbz	r3, 801c76c <__sinit+0x14>
 801c764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c768:	f7ff bff0 	b.w	801c74c <__sfp_lock_release>
 801c76c:	4b04      	ldr	r3, [pc, #16]	@ (801c780 <__sinit+0x28>)
 801c76e:	6223      	str	r3, [r4, #32]
 801c770:	4b04      	ldr	r3, [pc, #16]	@ (801c784 <__sinit+0x2c>)
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	2b00      	cmp	r3, #0
 801c776:	d1f5      	bne.n	801c764 <__sinit+0xc>
 801c778:	f7ff ffc4 	bl	801c704 <global_stdio_init.part.0>
 801c77c:	e7f2      	b.n	801c764 <__sinit+0xc>
 801c77e:	bf00      	nop
 801c780:	0801c6c5 	.word	0x0801c6c5
 801c784:	2000321c 	.word	0x2000321c

0801c788 <_fwalk_sglue>:
 801c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c78c:	4607      	mov	r7, r0
 801c78e:	4688      	mov	r8, r1
 801c790:	4614      	mov	r4, r2
 801c792:	2600      	movs	r6, #0
 801c794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c798:	f1b9 0901 	subs.w	r9, r9, #1
 801c79c:	d505      	bpl.n	801c7aa <_fwalk_sglue+0x22>
 801c79e:	6824      	ldr	r4, [r4, #0]
 801c7a0:	2c00      	cmp	r4, #0
 801c7a2:	d1f7      	bne.n	801c794 <_fwalk_sglue+0xc>
 801c7a4:	4630      	mov	r0, r6
 801c7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c7aa:	89ab      	ldrh	r3, [r5, #12]
 801c7ac:	2b01      	cmp	r3, #1
 801c7ae:	d907      	bls.n	801c7c0 <_fwalk_sglue+0x38>
 801c7b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c7b4:	3301      	adds	r3, #1
 801c7b6:	d003      	beq.n	801c7c0 <_fwalk_sglue+0x38>
 801c7b8:	4629      	mov	r1, r5
 801c7ba:	4638      	mov	r0, r7
 801c7bc:	47c0      	blx	r8
 801c7be:	4306      	orrs	r6, r0
 801c7c0:	3568      	adds	r5, #104	@ 0x68
 801c7c2:	e7e9      	b.n	801c798 <_fwalk_sglue+0x10>

0801c7c4 <sniprintf>:
 801c7c4:	b40c      	push	{r2, r3}
 801c7c6:	b530      	push	{r4, r5, lr}
 801c7c8:	4b17      	ldr	r3, [pc, #92]	@ (801c828 <sniprintf+0x64>)
 801c7ca:	1e0c      	subs	r4, r1, #0
 801c7cc:	681d      	ldr	r5, [r3, #0]
 801c7ce:	b09d      	sub	sp, #116	@ 0x74
 801c7d0:	da08      	bge.n	801c7e4 <sniprintf+0x20>
 801c7d2:	238b      	movs	r3, #139	@ 0x8b
 801c7d4:	602b      	str	r3, [r5, #0]
 801c7d6:	f04f 30ff 	mov.w	r0, #4294967295
 801c7da:	b01d      	add	sp, #116	@ 0x74
 801c7dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c7e0:	b002      	add	sp, #8
 801c7e2:	4770      	bx	lr
 801c7e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c7e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c7ec:	bf14      	ite	ne
 801c7ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c7f2:	4623      	moveq	r3, r4
 801c7f4:	9304      	str	r3, [sp, #16]
 801c7f6:	9307      	str	r3, [sp, #28]
 801c7f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c7fc:	9002      	str	r0, [sp, #8]
 801c7fe:	9006      	str	r0, [sp, #24]
 801c800:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c804:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c806:	ab21      	add	r3, sp, #132	@ 0x84
 801c808:	a902      	add	r1, sp, #8
 801c80a:	4628      	mov	r0, r5
 801c80c:	9301      	str	r3, [sp, #4]
 801c80e:	f002 f8c3 	bl	801e998 <_svfiprintf_r>
 801c812:	1c43      	adds	r3, r0, #1
 801c814:	bfbc      	itt	lt
 801c816:	238b      	movlt	r3, #139	@ 0x8b
 801c818:	602b      	strlt	r3, [r5, #0]
 801c81a:	2c00      	cmp	r4, #0
 801c81c:	d0dd      	beq.n	801c7da <sniprintf+0x16>
 801c81e:	9b02      	ldr	r3, [sp, #8]
 801c820:	2200      	movs	r2, #0
 801c822:	701a      	strb	r2, [r3, #0]
 801c824:	e7d9      	b.n	801c7da <sniprintf+0x16>
 801c826:	bf00      	nop
 801c828:	200002bc 	.word	0x200002bc

0801c82c <siprintf>:
 801c82c:	b40e      	push	{r1, r2, r3}
 801c82e:	b500      	push	{lr}
 801c830:	b09c      	sub	sp, #112	@ 0x70
 801c832:	ab1d      	add	r3, sp, #116	@ 0x74
 801c834:	9002      	str	r0, [sp, #8]
 801c836:	9006      	str	r0, [sp, #24]
 801c838:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c83c:	4809      	ldr	r0, [pc, #36]	@ (801c864 <siprintf+0x38>)
 801c83e:	9107      	str	r1, [sp, #28]
 801c840:	9104      	str	r1, [sp, #16]
 801c842:	4909      	ldr	r1, [pc, #36]	@ (801c868 <siprintf+0x3c>)
 801c844:	f853 2b04 	ldr.w	r2, [r3], #4
 801c848:	9105      	str	r1, [sp, #20]
 801c84a:	6800      	ldr	r0, [r0, #0]
 801c84c:	9301      	str	r3, [sp, #4]
 801c84e:	a902      	add	r1, sp, #8
 801c850:	f002 f8a2 	bl	801e998 <_svfiprintf_r>
 801c854:	9b02      	ldr	r3, [sp, #8]
 801c856:	2200      	movs	r2, #0
 801c858:	701a      	strb	r2, [r3, #0]
 801c85a:	b01c      	add	sp, #112	@ 0x70
 801c85c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c860:	b003      	add	sp, #12
 801c862:	4770      	bx	lr
 801c864:	200002bc 	.word	0x200002bc
 801c868:	ffff0208 	.word	0xffff0208

0801c86c <__sread>:
 801c86c:	b510      	push	{r4, lr}
 801c86e:	460c      	mov	r4, r1
 801c870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c874:	f000 f8f0 	bl	801ca58 <_read_r>
 801c878:	2800      	cmp	r0, #0
 801c87a:	bfab      	itete	ge
 801c87c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c87e:	89a3      	ldrhlt	r3, [r4, #12]
 801c880:	181b      	addge	r3, r3, r0
 801c882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c886:	bfac      	ite	ge
 801c888:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c88a:	81a3      	strhlt	r3, [r4, #12]
 801c88c:	bd10      	pop	{r4, pc}

0801c88e <__swrite>:
 801c88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c892:	461f      	mov	r7, r3
 801c894:	898b      	ldrh	r3, [r1, #12]
 801c896:	05db      	lsls	r3, r3, #23
 801c898:	4605      	mov	r5, r0
 801c89a:	460c      	mov	r4, r1
 801c89c:	4616      	mov	r6, r2
 801c89e:	d505      	bpl.n	801c8ac <__swrite+0x1e>
 801c8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8a4:	2302      	movs	r3, #2
 801c8a6:	2200      	movs	r2, #0
 801c8a8:	f000 f8c4 	bl	801ca34 <_lseek_r>
 801c8ac:	89a3      	ldrh	r3, [r4, #12]
 801c8ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c8b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c8b6:	81a3      	strh	r3, [r4, #12]
 801c8b8:	4632      	mov	r2, r6
 801c8ba:	463b      	mov	r3, r7
 801c8bc:	4628      	mov	r0, r5
 801c8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c8c2:	f000 b8eb 	b.w	801ca9c <_write_r>

0801c8c6 <__sseek>:
 801c8c6:	b510      	push	{r4, lr}
 801c8c8:	460c      	mov	r4, r1
 801c8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8ce:	f000 f8b1 	bl	801ca34 <_lseek_r>
 801c8d2:	1c43      	adds	r3, r0, #1
 801c8d4:	89a3      	ldrh	r3, [r4, #12]
 801c8d6:	bf15      	itete	ne
 801c8d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c8da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c8de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c8e2:	81a3      	strheq	r3, [r4, #12]
 801c8e4:	bf18      	it	ne
 801c8e6:	81a3      	strhne	r3, [r4, #12]
 801c8e8:	bd10      	pop	{r4, pc}

0801c8ea <__sclose>:
 801c8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8ee:	f000 b891 	b.w	801ca14 <_close_r>

0801c8f2 <memset>:
 801c8f2:	4402      	add	r2, r0
 801c8f4:	4603      	mov	r3, r0
 801c8f6:	4293      	cmp	r3, r2
 801c8f8:	d100      	bne.n	801c8fc <memset+0xa>
 801c8fa:	4770      	bx	lr
 801c8fc:	f803 1b01 	strb.w	r1, [r3], #1
 801c900:	e7f9      	b.n	801c8f6 <memset+0x4>

0801c902 <strncmp>:
 801c902:	b510      	push	{r4, lr}
 801c904:	b16a      	cbz	r2, 801c922 <strncmp+0x20>
 801c906:	3901      	subs	r1, #1
 801c908:	1884      	adds	r4, r0, r2
 801c90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c90e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c912:	429a      	cmp	r2, r3
 801c914:	d103      	bne.n	801c91e <strncmp+0x1c>
 801c916:	42a0      	cmp	r0, r4
 801c918:	d001      	beq.n	801c91e <strncmp+0x1c>
 801c91a:	2a00      	cmp	r2, #0
 801c91c:	d1f5      	bne.n	801c90a <strncmp+0x8>
 801c91e:	1ad0      	subs	r0, r2, r3
 801c920:	bd10      	pop	{r4, pc}
 801c922:	4610      	mov	r0, r2
 801c924:	e7fc      	b.n	801c920 <strncmp+0x1e>
	...

0801c928 <strtok>:
 801c928:	4b16      	ldr	r3, [pc, #88]	@ (801c984 <strtok+0x5c>)
 801c92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c92e:	681f      	ldr	r7, [r3, #0]
 801c930:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801c932:	4605      	mov	r5, r0
 801c934:	460e      	mov	r6, r1
 801c936:	b9ec      	cbnz	r4, 801c974 <strtok+0x4c>
 801c938:	2050      	movs	r0, #80	@ 0x50
 801c93a:	f7fe f865 	bl	801aa08 <malloc>
 801c93e:	4602      	mov	r2, r0
 801c940:	6478      	str	r0, [r7, #68]	@ 0x44
 801c942:	b920      	cbnz	r0, 801c94e <strtok+0x26>
 801c944:	4b10      	ldr	r3, [pc, #64]	@ (801c988 <strtok+0x60>)
 801c946:	4811      	ldr	r0, [pc, #68]	@ (801c98c <strtok+0x64>)
 801c948:	215b      	movs	r1, #91	@ 0x5b
 801c94a:	f000 f90b 	bl	801cb64 <__assert_func>
 801c94e:	e9c0 4400 	strd	r4, r4, [r0]
 801c952:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801c956:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801c95a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801c95e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801c962:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801c966:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801c96a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801c96e:	6184      	str	r4, [r0, #24]
 801c970:	7704      	strb	r4, [r0, #28]
 801c972:	6244      	str	r4, [r0, #36]	@ 0x24
 801c974:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c976:	4631      	mov	r1, r6
 801c978:	4628      	mov	r0, r5
 801c97a:	2301      	movs	r3, #1
 801c97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c980:	f000 b806 	b.w	801c990 <__strtok_r>
 801c984:	200002bc 	.word	0x200002bc
 801c988:	080233ea 	.word	0x080233ea
 801c98c:	08023401 	.word	0x08023401

0801c990 <__strtok_r>:
 801c990:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c992:	4604      	mov	r4, r0
 801c994:	b908      	cbnz	r0, 801c99a <__strtok_r+0xa>
 801c996:	6814      	ldr	r4, [r2, #0]
 801c998:	b144      	cbz	r4, 801c9ac <__strtok_r+0x1c>
 801c99a:	4620      	mov	r0, r4
 801c99c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c9a0:	460f      	mov	r7, r1
 801c9a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 801c9a6:	b91e      	cbnz	r6, 801c9b0 <__strtok_r+0x20>
 801c9a8:	b965      	cbnz	r5, 801c9c4 <__strtok_r+0x34>
 801c9aa:	6015      	str	r5, [r2, #0]
 801c9ac:	2000      	movs	r0, #0
 801c9ae:	e005      	b.n	801c9bc <__strtok_r+0x2c>
 801c9b0:	42b5      	cmp	r5, r6
 801c9b2:	d1f6      	bne.n	801c9a2 <__strtok_r+0x12>
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d1f0      	bne.n	801c99a <__strtok_r+0xa>
 801c9b8:	6014      	str	r4, [r2, #0]
 801c9ba:	7003      	strb	r3, [r0, #0]
 801c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9be:	461c      	mov	r4, r3
 801c9c0:	e00c      	b.n	801c9dc <__strtok_r+0x4c>
 801c9c2:	b915      	cbnz	r5, 801c9ca <__strtok_r+0x3a>
 801c9c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c9c8:	460e      	mov	r6, r1
 801c9ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 801c9ce:	42ab      	cmp	r3, r5
 801c9d0:	d1f7      	bne.n	801c9c2 <__strtok_r+0x32>
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d0f3      	beq.n	801c9be <__strtok_r+0x2e>
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c9dc:	6014      	str	r4, [r2, #0]
 801c9de:	e7ed      	b.n	801c9bc <__strtok_r+0x2c>

0801c9e0 <strstr>:
 801c9e0:	780a      	ldrb	r2, [r1, #0]
 801c9e2:	b570      	push	{r4, r5, r6, lr}
 801c9e4:	b96a      	cbnz	r2, 801ca02 <strstr+0x22>
 801c9e6:	bd70      	pop	{r4, r5, r6, pc}
 801c9e8:	429a      	cmp	r2, r3
 801c9ea:	d109      	bne.n	801ca00 <strstr+0x20>
 801c9ec:	460c      	mov	r4, r1
 801c9ee:	4605      	mov	r5, r0
 801c9f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d0f6      	beq.n	801c9e6 <strstr+0x6>
 801c9f8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c9fc:	429e      	cmp	r6, r3
 801c9fe:	d0f7      	beq.n	801c9f0 <strstr+0x10>
 801ca00:	3001      	adds	r0, #1
 801ca02:	7803      	ldrb	r3, [r0, #0]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d1ef      	bne.n	801c9e8 <strstr+0x8>
 801ca08:	4618      	mov	r0, r3
 801ca0a:	e7ec      	b.n	801c9e6 <strstr+0x6>

0801ca0c <_localeconv_r>:
 801ca0c:	4800      	ldr	r0, [pc, #0]	@ (801ca10 <_localeconv_r+0x4>)
 801ca0e:	4770      	bx	lr
 801ca10:	20000240 	.word	0x20000240

0801ca14 <_close_r>:
 801ca14:	b538      	push	{r3, r4, r5, lr}
 801ca16:	4d06      	ldr	r5, [pc, #24]	@ (801ca30 <_close_r+0x1c>)
 801ca18:	2300      	movs	r3, #0
 801ca1a:	4604      	mov	r4, r0
 801ca1c:	4608      	mov	r0, r1
 801ca1e:	602b      	str	r3, [r5, #0]
 801ca20:	f7ea fda6 	bl	8007570 <_close>
 801ca24:	1c43      	adds	r3, r0, #1
 801ca26:	d102      	bne.n	801ca2e <_close_r+0x1a>
 801ca28:	682b      	ldr	r3, [r5, #0]
 801ca2a:	b103      	cbz	r3, 801ca2e <_close_r+0x1a>
 801ca2c:	6023      	str	r3, [r4, #0]
 801ca2e:	bd38      	pop	{r3, r4, r5, pc}
 801ca30:	20003220 	.word	0x20003220

0801ca34 <_lseek_r>:
 801ca34:	b538      	push	{r3, r4, r5, lr}
 801ca36:	4d07      	ldr	r5, [pc, #28]	@ (801ca54 <_lseek_r+0x20>)
 801ca38:	4604      	mov	r4, r0
 801ca3a:	4608      	mov	r0, r1
 801ca3c:	4611      	mov	r1, r2
 801ca3e:	2200      	movs	r2, #0
 801ca40:	602a      	str	r2, [r5, #0]
 801ca42:	461a      	mov	r2, r3
 801ca44:	f7ea fdbb 	bl	80075be <_lseek>
 801ca48:	1c43      	adds	r3, r0, #1
 801ca4a:	d102      	bne.n	801ca52 <_lseek_r+0x1e>
 801ca4c:	682b      	ldr	r3, [r5, #0]
 801ca4e:	b103      	cbz	r3, 801ca52 <_lseek_r+0x1e>
 801ca50:	6023      	str	r3, [r4, #0]
 801ca52:	bd38      	pop	{r3, r4, r5, pc}
 801ca54:	20003220 	.word	0x20003220

0801ca58 <_read_r>:
 801ca58:	b538      	push	{r3, r4, r5, lr}
 801ca5a:	4d07      	ldr	r5, [pc, #28]	@ (801ca78 <_read_r+0x20>)
 801ca5c:	4604      	mov	r4, r0
 801ca5e:	4608      	mov	r0, r1
 801ca60:	4611      	mov	r1, r2
 801ca62:	2200      	movs	r2, #0
 801ca64:	602a      	str	r2, [r5, #0]
 801ca66:	461a      	mov	r2, r3
 801ca68:	f7ea fd49 	bl	80074fe <_read>
 801ca6c:	1c43      	adds	r3, r0, #1
 801ca6e:	d102      	bne.n	801ca76 <_read_r+0x1e>
 801ca70:	682b      	ldr	r3, [r5, #0]
 801ca72:	b103      	cbz	r3, 801ca76 <_read_r+0x1e>
 801ca74:	6023      	str	r3, [r4, #0]
 801ca76:	bd38      	pop	{r3, r4, r5, pc}
 801ca78:	20003220 	.word	0x20003220

0801ca7c <_sbrk_r>:
 801ca7c:	b538      	push	{r3, r4, r5, lr}
 801ca7e:	4d06      	ldr	r5, [pc, #24]	@ (801ca98 <_sbrk_r+0x1c>)
 801ca80:	2300      	movs	r3, #0
 801ca82:	4604      	mov	r4, r0
 801ca84:	4608      	mov	r0, r1
 801ca86:	602b      	str	r3, [r5, #0]
 801ca88:	f7ea fda6 	bl	80075d8 <_sbrk>
 801ca8c:	1c43      	adds	r3, r0, #1
 801ca8e:	d102      	bne.n	801ca96 <_sbrk_r+0x1a>
 801ca90:	682b      	ldr	r3, [r5, #0]
 801ca92:	b103      	cbz	r3, 801ca96 <_sbrk_r+0x1a>
 801ca94:	6023      	str	r3, [r4, #0]
 801ca96:	bd38      	pop	{r3, r4, r5, pc}
 801ca98:	20003220 	.word	0x20003220

0801ca9c <_write_r>:
 801ca9c:	b538      	push	{r3, r4, r5, lr}
 801ca9e:	4d07      	ldr	r5, [pc, #28]	@ (801cabc <_write_r+0x20>)
 801caa0:	4604      	mov	r4, r0
 801caa2:	4608      	mov	r0, r1
 801caa4:	4611      	mov	r1, r2
 801caa6:	2200      	movs	r2, #0
 801caa8:	602a      	str	r2, [r5, #0]
 801caaa:	461a      	mov	r2, r3
 801caac:	f7ea fd44 	bl	8007538 <_write>
 801cab0:	1c43      	adds	r3, r0, #1
 801cab2:	d102      	bne.n	801caba <_write_r+0x1e>
 801cab4:	682b      	ldr	r3, [r5, #0]
 801cab6:	b103      	cbz	r3, 801caba <_write_r+0x1e>
 801cab8:	6023      	str	r3, [r4, #0]
 801caba:	bd38      	pop	{r3, r4, r5, pc}
 801cabc:	20003220 	.word	0x20003220

0801cac0 <__errno>:
 801cac0:	4b01      	ldr	r3, [pc, #4]	@ (801cac8 <__errno+0x8>)
 801cac2:	6818      	ldr	r0, [r3, #0]
 801cac4:	4770      	bx	lr
 801cac6:	bf00      	nop
 801cac8:	200002bc 	.word	0x200002bc

0801cacc <__libc_init_array>:
 801cacc:	b570      	push	{r4, r5, r6, lr}
 801cace:	4d0d      	ldr	r5, [pc, #52]	@ (801cb04 <__libc_init_array+0x38>)
 801cad0:	4c0d      	ldr	r4, [pc, #52]	@ (801cb08 <__libc_init_array+0x3c>)
 801cad2:	1b64      	subs	r4, r4, r5
 801cad4:	10a4      	asrs	r4, r4, #2
 801cad6:	2600      	movs	r6, #0
 801cad8:	42a6      	cmp	r6, r4
 801cada:	d109      	bne.n	801caf0 <__libc_init_array+0x24>
 801cadc:	4d0b      	ldr	r5, [pc, #44]	@ (801cb0c <__libc_init_array+0x40>)
 801cade:	4c0c      	ldr	r4, [pc, #48]	@ (801cb10 <__libc_init_array+0x44>)
 801cae0:	f004 faba 	bl	8021058 <_init>
 801cae4:	1b64      	subs	r4, r4, r5
 801cae6:	10a4      	asrs	r4, r4, #2
 801cae8:	2600      	movs	r6, #0
 801caea:	42a6      	cmp	r6, r4
 801caec:	d105      	bne.n	801cafa <__libc_init_array+0x2e>
 801caee:	bd70      	pop	{r4, r5, r6, pc}
 801caf0:	f855 3b04 	ldr.w	r3, [r5], #4
 801caf4:	4798      	blx	r3
 801caf6:	3601      	adds	r6, #1
 801caf8:	e7ee      	b.n	801cad8 <__libc_init_array+0xc>
 801cafa:	f855 3b04 	ldr.w	r3, [r5], #4
 801cafe:	4798      	blx	r3
 801cb00:	3601      	adds	r6, #1
 801cb02:	e7f2      	b.n	801caea <__libc_init_array+0x1e>
 801cb04:	080238e0 	.word	0x080238e0
 801cb08:	080238e0 	.word	0x080238e0
 801cb0c:	080238e0 	.word	0x080238e0
 801cb10:	080238e4 	.word	0x080238e4

0801cb14 <__retarget_lock_init_recursive>:
 801cb14:	4770      	bx	lr

0801cb16 <__retarget_lock_acquire_recursive>:
 801cb16:	4770      	bx	lr

0801cb18 <__retarget_lock_release_recursive>:
 801cb18:	4770      	bx	lr

0801cb1a <strcpy>:
 801cb1a:	4603      	mov	r3, r0
 801cb1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cb20:	f803 2b01 	strb.w	r2, [r3], #1
 801cb24:	2a00      	cmp	r2, #0
 801cb26:	d1f9      	bne.n	801cb1c <strcpy+0x2>
 801cb28:	4770      	bx	lr

0801cb2a <memcpy>:
 801cb2a:	440a      	add	r2, r1
 801cb2c:	4291      	cmp	r1, r2
 801cb2e:	f100 33ff 	add.w	r3, r0, #4294967295
 801cb32:	d100      	bne.n	801cb36 <memcpy+0xc>
 801cb34:	4770      	bx	lr
 801cb36:	b510      	push	{r4, lr}
 801cb38:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cb3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cb40:	4291      	cmp	r1, r2
 801cb42:	d1f9      	bne.n	801cb38 <memcpy+0xe>
 801cb44:	bd10      	pop	{r4, pc}
	...

0801cb48 <nan>:
 801cb48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801cb50 <nan+0x8>
 801cb4c:	4770      	bx	lr
 801cb4e:	bf00      	nop
 801cb50:	00000000 	.word	0x00000000
 801cb54:	7ff80000 	.word	0x7ff80000

0801cb58 <nanf>:
 801cb58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801cb60 <nanf+0x8>
 801cb5c:	4770      	bx	lr
 801cb5e:	bf00      	nop
 801cb60:	7fc00000 	.word	0x7fc00000

0801cb64 <__assert_func>:
 801cb64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cb66:	4614      	mov	r4, r2
 801cb68:	461a      	mov	r2, r3
 801cb6a:	4b09      	ldr	r3, [pc, #36]	@ (801cb90 <__assert_func+0x2c>)
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	4605      	mov	r5, r0
 801cb70:	68d8      	ldr	r0, [r3, #12]
 801cb72:	b954      	cbnz	r4, 801cb8a <__assert_func+0x26>
 801cb74:	4b07      	ldr	r3, [pc, #28]	@ (801cb94 <__assert_func+0x30>)
 801cb76:	461c      	mov	r4, r3
 801cb78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cb7c:	9100      	str	r1, [sp, #0]
 801cb7e:	462b      	mov	r3, r5
 801cb80:	4905      	ldr	r1, [pc, #20]	@ (801cb98 <__assert_func+0x34>)
 801cb82:	f002 f9f3 	bl	801ef6c <fiprintf>
 801cb86:	f002 fab1 	bl	801f0ec <abort>
 801cb8a:	4b04      	ldr	r3, [pc, #16]	@ (801cb9c <__assert_func+0x38>)
 801cb8c:	e7f4      	b.n	801cb78 <__assert_func+0x14>
 801cb8e:	bf00      	nop
 801cb90:	200002bc 	.word	0x200002bc
 801cb94:	0802349e 	.word	0x0802349e
 801cb98:	08023470 	.word	0x08023470
 801cb9c:	08023463 	.word	0x08023463

0801cba0 <quorem>:
 801cba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cba4:	6903      	ldr	r3, [r0, #16]
 801cba6:	690c      	ldr	r4, [r1, #16]
 801cba8:	42a3      	cmp	r3, r4
 801cbaa:	4607      	mov	r7, r0
 801cbac:	db7e      	blt.n	801ccac <quorem+0x10c>
 801cbae:	3c01      	subs	r4, #1
 801cbb0:	f101 0814 	add.w	r8, r1, #20
 801cbb4:	00a3      	lsls	r3, r4, #2
 801cbb6:	f100 0514 	add.w	r5, r0, #20
 801cbba:	9300      	str	r3, [sp, #0]
 801cbbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cbc0:	9301      	str	r3, [sp, #4]
 801cbc2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cbc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cbca:	3301      	adds	r3, #1
 801cbcc:	429a      	cmp	r2, r3
 801cbce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cbd2:	fbb2 f6f3 	udiv	r6, r2, r3
 801cbd6:	d32e      	bcc.n	801cc36 <quorem+0x96>
 801cbd8:	f04f 0a00 	mov.w	sl, #0
 801cbdc:	46c4      	mov	ip, r8
 801cbde:	46ae      	mov	lr, r5
 801cbe0:	46d3      	mov	fp, sl
 801cbe2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cbe6:	b298      	uxth	r0, r3
 801cbe8:	fb06 a000 	mla	r0, r6, r0, sl
 801cbec:	0c02      	lsrs	r2, r0, #16
 801cbee:	0c1b      	lsrs	r3, r3, #16
 801cbf0:	fb06 2303 	mla	r3, r6, r3, r2
 801cbf4:	f8de 2000 	ldr.w	r2, [lr]
 801cbf8:	b280      	uxth	r0, r0
 801cbfa:	b292      	uxth	r2, r2
 801cbfc:	1a12      	subs	r2, r2, r0
 801cbfe:	445a      	add	r2, fp
 801cc00:	f8de 0000 	ldr.w	r0, [lr]
 801cc04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cc08:	b29b      	uxth	r3, r3
 801cc0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801cc0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801cc12:	b292      	uxth	r2, r2
 801cc14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801cc18:	45e1      	cmp	r9, ip
 801cc1a:	f84e 2b04 	str.w	r2, [lr], #4
 801cc1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801cc22:	d2de      	bcs.n	801cbe2 <quorem+0x42>
 801cc24:	9b00      	ldr	r3, [sp, #0]
 801cc26:	58eb      	ldr	r3, [r5, r3]
 801cc28:	b92b      	cbnz	r3, 801cc36 <quorem+0x96>
 801cc2a:	9b01      	ldr	r3, [sp, #4]
 801cc2c:	3b04      	subs	r3, #4
 801cc2e:	429d      	cmp	r5, r3
 801cc30:	461a      	mov	r2, r3
 801cc32:	d32f      	bcc.n	801cc94 <quorem+0xf4>
 801cc34:	613c      	str	r4, [r7, #16]
 801cc36:	4638      	mov	r0, r7
 801cc38:	f001 fc58 	bl	801e4ec <__mcmp>
 801cc3c:	2800      	cmp	r0, #0
 801cc3e:	db25      	blt.n	801cc8c <quorem+0xec>
 801cc40:	4629      	mov	r1, r5
 801cc42:	2000      	movs	r0, #0
 801cc44:	f858 2b04 	ldr.w	r2, [r8], #4
 801cc48:	f8d1 c000 	ldr.w	ip, [r1]
 801cc4c:	fa1f fe82 	uxth.w	lr, r2
 801cc50:	fa1f f38c 	uxth.w	r3, ip
 801cc54:	eba3 030e 	sub.w	r3, r3, lr
 801cc58:	4403      	add	r3, r0
 801cc5a:	0c12      	lsrs	r2, r2, #16
 801cc5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801cc60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801cc64:	b29b      	uxth	r3, r3
 801cc66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cc6a:	45c1      	cmp	r9, r8
 801cc6c:	f841 3b04 	str.w	r3, [r1], #4
 801cc70:	ea4f 4022 	mov.w	r0, r2, asr #16
 801cc74:	d2e6      	bcs.n	801cc44 <quorem+0xa4>
 801cc76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cc7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cc7e:	b922      	cbnz	r2, 801cc8a <quorem+0xea>
 801cc80:	3b04      	subs	r3, #4
 801cc82:	429d      	cmp	r5, r3
 801cc84:	461a      	mov	r2, r3
 801cc86:	d30b      	bcc.n	801cca0 <quorem+0x100>
 801cc88:	613c      	str	r4, [r7, #16]
 801cc8a:	3601      	adds	r6, #1
 801cc8c:	4630      	mov	r0, r6
 801cc8e:	b003      	add	sp, #12
 801cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc94:	6812      	ldr	r2, [r2, #0]
 801cc96:	3b04      	subs	r3, #4
 801cc98:	2a00      	cmp	r2, #0
 801cc9a:	d1cb      	bne.n	801cc34 <quorem+0x94>
 801cc9c:	3c01      	subs	r4, #1
 801cc9e:	e7c6      	b.n	801cc2e <quorem+0x8e>
 801cca0:	6812      	ldr	r2, [r2, #0]
 801cca2:	3b04      	subs	r3, #4
 801cca4:	2a00      	cmp	r2, #0
 801cca6:	d1ef      	bne.n	801cc88 <quorem+0xe8>
 801cca8:	3c01      	subs	r4, #1
 801ccaa:	e7ea      	b.n	801cc82 <quorem+0xe2>
 801ccac:	2000      	movs	r0, #0
 801ccae:	e7ee      	b.n	801cc8e <quorem+0xee>

0801ccb0 <_dtoa_r>:
 801ccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccb4:	69c7      	ldr	r7, [r0, #28]
 801ccb6:	b099      	sub	sp, #100	@ 0x64
 801ccb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ccbc:	ec55 4b10 	vmov	r4, r5, d0
 801ccc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801ccc2:	9109      	str	r1, [sp, #36]	@ 0x24
 801ccc4:	4683      	mov	fp, r0
 801ccc6:	920e      	str	r2, [sp, #56]	@ 0x38
 801ccc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ccca:	b97f      	cbnz	r7, 801ccec <_dtoa_r+0x3c>
 801cccc:	2010      	movs	r0, #16
 801ccce:	f7fd fe9b 	bl	801aa08 <malloc>
 801ccd2:	4602      	mov	r2, r0
 801ccd4:	f8cb 001c 	str.w	r0, [fp, #28]
 801ccd8:	b920      	cbnz	r0, 801cce4 <_dtoa_r+0x34>
 801ccda:	4ba7      	ldr	r3, [pc, #668]	@ (801cf78 <_dtoa_r+0x2c8>)
 801ccdc:	21ef      	movs	r1, #239	@ 0xef
 801ccde:	48a7      	ldr	r0, [pc, #668]	@ (801cf7c <_dtoa_r+0x2cc>)
 801cce0:	f7ff ff40 	bl	801cb64 <__assert_func>
 801cce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801cce8:	6007      	str	r7, [r0, #0]
 801ccea:	60c7      	str	r7, [r0, #12]
 801ccec:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ccf0:	6819      	ldr	r1, [r3, #0]
 801ccf2:	b159      	cbz	r1, 801cd0c <_dtoa_r+0x5c>
 801ccf4:	685a      	ldr	r2, [r3, #4]
 801ccf6:	604a      	str	r2, [r1, #4]
 801ccf8:	2301      	movs	r3, #1
 801ccfa:	4093      	lsls	r3, r2
 801ccfc:	608b      	str	r3, [r1, #8]
 801ccfe:	4658      	mov	r0, fp
 801cd00:	f001 f970 	bl	801dfe4 <_Bfree>
 801cd04:	f8db 301c 	ldr.w	r3, [fp, #28]
 801cd08:	2200      	movs	r2, #0
 801cd0a:	601a      	str	r2, [r3, #0]
 801cd0c:	1e2b      	subs	r3, r5, #0
 801cd0e:	bfb9      	ittee	lt
 801cd10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801cd14:	9303      	strlt	r3, [sp, #12]
 801cd16:	2300      	movge	r3, #0
 801cd18:	6033      	strge	r3, [r6, #0]
 801cd1a:	9f03      	ldr	r7, [sp, #12]
 801cd1c:	4b98      	ldr	r3, [pc, #608]	@ (801cf80 <_dtoa_r+0x2d0>)
 801cd1e:	bfbc      	itt	lt
 801cd20:	2201      	movlt	r2, #1
 801cd22:	6032      	strlt	r2, [r6, #0]
 801cd24:	43bb      	bics	r3, r7
 801cd26:	d112      	bne.n	801cd4e <_dtoa_r+0x9e>
 801cd28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cd2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801cd2e:	6013      	str	r3, [r2, #0]
 801cd30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cd34:	4323      	orrs	r3, r4
 801cd36:	f000 854d 	beq.w	801d7d4 <_dtoa_r+0xb24>
 801cd3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cd3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801cf94 <_dtoa_r+0x2e4>
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	f000 854f 	beq.w	801d7e4 <_dtoa_r+0xb34>
 801cd46:	f10a 0303 	add.w	r3, sl, #3
 801cd4a:	f000 bd49 	b.w	801d7e0 <_dtoa_r+0xb30>
 801cd4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cd52:	2200      	movs	r2, #0
 801cd54:	ec51 0b17 	vmov	r0, r1, d7
 801cd58:	2300      	movs	r3, #0
 801cd5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801cd5e:	f7e3 fe8b 	bl	8000a78 <__aeabi_dcmpeq>
 801cd62:	4680      	mov	r8, r0
 801cd64:	b158      	cbz	r0, 801cd7e <_dtoa_r+0xce>
 801cd66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cd68:	2301      	movs	r3, #1
 801cd6a:	6013      	str	r3, [r2, #0]
 801cd6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cd6e:	b113      	cbz	r3, 801cd76 <_dtoa_r+0xc6>
 801cd70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801cd72:	4b84      	ldr	r3, [pc, #528]	@ (801cf84 <_dtoa_r+0x2d4>)
 801cd74:	6013      	str	r3, [r2, #0]
 801cd76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801cf98 <_dtoa_r+0x2e8>
 801cd7a:	f000 bd33 	b.w	801d7e4 <_dtoa_r+0xb34>
 801cd7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801cd82:	aa16      	add	r2, sp, #88	@ 0x58
 801cd84:	a917      	add	r1, sp, #92	@ 0x5c
 801cd86:	4658      	mov	r0, fp
 801cd88:	f001 fcd0 	bl	801e72c <__d2b>
 801cd8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801cd90:	4681      	mov	r9, r0
 801cd92:	2e00      	cmp	r6, #0
 801cd94:	d077      	beq.n	801ce86 <_dtoa_r+0x1d6>
 801cd96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cd98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801cd9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cda4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801cda8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801cdac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801cdb0:	4619      	mov	r1, r3
 801cdb2:	2200      	movs	r2, #0
 801cdb4:	4b74      	ldr	r3, [pc, #464]	@ (801cf88 <_dtoa_r+0x2d8>)
 801cdb6:	f7e3 fa3f 	bl	8000238 <__aeabi_dsub>
 801cdba:	a369      	add	r3, pc, #420	@ (adr r3, 801cf60 <_dtoa_r+0x2b0>)
 801cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdc0:	f7e3 fbf2 	bl	80005a8 <__aeabi_dmul>
 801cdc4:	a368      	add	r3, pc, #416	@ (adr r3, 801cf68 <_dtoa_r+0x2b8>)
 801cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdca:	f7e3 fa37 	bl	800023c <__adddf3>
 801cdce:	4604      	mov	r4, r0
 801cdd0:	4630      	mov	r0, r6
 801cdd2:	460d      	mov	r5, r1
 801cdd4:	f7e3 fb7e 	bl	80004d4 <__aeabi_i2d>
 801cdd8:	a365      	add	r3, pc, #404	@ (adr r3, 801cf70 <_dtoa_r+0x2c0>)
 801cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdde:	f7e3 fbe3 	bl	80005a8 <__aeabi_dmul>
 801cde2:	4602      	mov	r2, r0
 801cde4:	460b      	mov	r3, r1
 801cde6:	4620      	mov	r0, r4
 801cde8:	4629      	mov	r1, r5
 801cdea:	f7e3 fa27 	bl	800023c <__adddf3>
 801cdee:	4604      	mov	r4, r0
 801cdf0:	460d      	mov	r5, r1
 801cdf2:	f7e3 fe89 	bl	8000b08 <__aeabi_d2iz>
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	4607      	mov	r7, r0
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	4620      	mov	r0, r4
 801cdfe:	4629      	mov	r1, r5
 801ce00:	f7e3 fe44 	bl	8000a8c <__aeabi_dcmplt>
 801ce04:	b140      	cbz	r0, 801ce18 <_dtoa_r+0x168>
 801ce06:	4638      	mov	r0, r7
 801ce08:	f7e3 fb64 	bl	80004d4 <__aeabi_i2d>
 801ce0c:	4622      	mov	r2, r4
 801ce0e:	462b      	mov	r3, r5
 801ce10:	f7e3 fe32 	bl	8000a78 <__aeabi_dcmpeq>
 801ce14:	b900      	cbnz	r0, 801ce18 <_dtoa_r+0x168>
 801ce16:	3f01      	subs	r7, #1
 801ce18:	2f16      	cmp	r7, #22
 801ce1a:	d851      	bhi.n	801cec0 <_dtoa_r+0x210>
 801ce1c:	4b5b      	ldr	r3, [pc, #364]	@ (801cf8c <_dtoa_r+0x2dc>)
 801ce1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ce2a:	f7e3 fe2f 	bl	8000a8c <__aeabi_dcmplt>
 801ce2e:	2800      	cmp	r0, #0
 801ce30:	d048      	beq.n	801cec4 <_dtoa_r+0x214>
 801ce32:	3f01      	subs	r7, #1
 801ce34:	2300      	movs	r3, #0
 801ce36:	9312      	str	r3, [sp, #72]	@ 0x48
 801ce38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ce3a:	1b9b      	subs	r3, r3, r6
 801ce3c:	1e5a      	subs	r2, r3, #1
 801ce3e:	bf44      	itt	mi
 801ce40:	f1c3 0801 	rsbmi	r8, r3, #1
 801ce44:	2300      	movmi	r3, #0
 801ce46:	9208      	str	r2, [sp, #32]
 801ce48:	bf54      	ite	pl
 801ce4a:	f04f 0800 	movpl.w	r8, #0
 801ce4e:	9308      	strmi	r3, [sp, #32]
 801ce50:	2f00      	cmp	r7, #0
 801ce52:	db39      	blt.n	801cec8 <_dtoa_r+0x218>
 801ce54:	9b08      	ldr	r3, [sp, #32]
 801ce56:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ce58:	443b      	add	r3, r7
 801ce5a:	9308      	str	r3, [sp, #32]
 801ce5c:	2300      	movs	r3, #0
 801ce5e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce62:	2b09      	cmp	r3, #9
 801ce64:	d864      	bhi.n	801cf30 <_dtoa_r+0x280>
 801ce66:	2b05      	cmp	r3, #5
 801ce68:	bfc4      	itt	gt
 801ce6a:	3b04      	subgt	r3, #4
 801ce6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ce6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce70:	f1a3 0302 	sub.w	r3, r3, #2
 801ce74:	bfcc      	ite	gt
 801ce76:	2400      	movgt	r4, #0
 801ce78:	2401      	movle	r4, #1
 801ce7a:	2b03      	cmp	r3, #3
 801ce7c:	d863      	bhi.n	801cf46 <_dtoa_r+0x296>
 801ce7e:	e8df f003 	tbb	[pc, r3]
 801ce82:	372a      	.short	0x372a
 801ce84:	5535      	.short	0x5535
 801ce86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801ce8a:	441e      	add	r6, r3
 801ce8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ce90:	2b20      	cmp	r3, #32
 801ce92:	bfc1      	itttt	gt
 801ce94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ce98:	409f      	lslgt	r7, r3
 801ce9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ce9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801cea2:	bfd6      	itet	le
 801cea4:	f1c3 0320 	rsble	r3, r3, #32
 801cea8:	ea47 0003 	orrgt.w	r0, r7, r3
 801ceac:	fa04 f003 	lslle.w	r0, r4, r3
 801ceb0:	f7e3 fb00 	bl	80004b4 <__aeabi_ui2d>
 801ceb4:	2201      	movs	r2, #1
 801ceb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ceba:	3e01      	subs	r6, #1
 801cebc:	9214      	str	r2, [sp, #80]	@ 0x50
 801cebe:	e777      	b.n	801cdb0 <_dtoa_r+0x100>
 801cec0:	2301      	movs	r3, #1
 801cec2:	e7b8      	b.n	801ce36 <_dtoa_r+0x186>
 801cec4:	9012      	str	r0, [sp, #72]	@ 0x48
 801cec6:	e7b7      	b.n	801ce38 <_dtoa_r+0x188>
 801cec8:	427b      	negs	r3, r7
 801ceca:	930a      	str	r3, [sp, #40]	@ 0x28
 801cecc:	2300      	movs	r3, #0
 801cece:	eba8 0807 	sub.w	r8, r8, r7
 801ced2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ced4:	e7c4      	b.n	801ce60 <_dtoa_r+0x1b0>
 801ced6:	2300      	movs	r3, #0
 801ced8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ceda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cedc:	2b00      	cmp	r3, #0
 801cede:	dc35      	bgt.n	801cf4c <_dtoa_r+0x29c>
 801cee0:	2301      	movs	r3, #1
 801cee2:	9300      	str	r3, [sp, #0]
 801cee4:	9307      	str	r3, [sp, #28]
 801cee6:	461a      	mov	r2, r3
 801cee8:	920e      	str	r2, [sp, #56]	@ 0x38
 801ceea:	e00b      	b.n	801cf04 <_dtoa_r+0x254>
 801ceec:	2301      	movs	r3, #1
 801ceee:	e7f3      	b.n	801ced8 <_dtoa_r+0x228>
 801cef0:	2300      	movs	r3, #0
 801cef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cef6:	18fb      	adds	r3, r7, r3
 801cef8:	9300      	str	r3, [sp, #0]
 801cefa:	3301      	adds	r3, #1
 801cefc:	2b01      	cmp	r3, #1
 801cefe:	9307      	str	r3, [sp, #28]
 801cf00:	bfb8      	it	lt
 801cf02:	2301      	movlt	r3, #1
 801cf04:	f8db 001c 	ldr.w	r0, [fp, #28]
 801cf08:	2100      	movs	r1, #0
 801cf0a:	2204      	movs	r2, #4
 801cf0c:	f102 0514 	add.w	r5, r2, #20
 801cf10:	429d      	cmp	r5, r3
 801cf12:	d91f      	bls.n	801cf54 <_dtoa_r+0x2a4>
 801cf14:	6041      	str	r1, [r0, #4]
 801cf16:	4658      	mov	r0, fp
 801cf18:	f001 f824 	bl	801df64 <_Balloc>
 801cf1c:	4682      	mov	sl, r0
 801cf1e:	2800      	cmp	r0, #0
 801cf20:	d13c      	bne.n	801cf9c <_dtoa_r+0x2ec>
 801cf22:	4b1b      	ldr	r3, [pc, #108]	@ (801cf90 <_dtoa_r+0x2e0>)
 801cf24:	4602      	mov	r2, r0
 801cf26:	f240 11af 	movw	r1, #431	@ 0x1af
 801cf2a:	e6d8      	b.n	801ccde <_dtoa_r+0x2e>
 801cf2c:	2301      	movs	r3, #1
 801cf2e:	e7e0      	b.n	801cef2 <_dtoa_r+0x242>
 801cf30:	2401      	movs	r4, #1
 801cf32:	2300      	movs	r3, #0
 801cf34:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf36:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cf38:	f04f 33ff 	mov.w	r3, #4294967295
 801cf3c:	9300      	str	r3, [sp, #0]
 801cf3e:	9307      	str	r3, [sp, #28]
 801cf40:	2200      	movs	r2, #0
 801cf42:	2312      	movs	r3, #18
 801cf44:	e7d0      	b.n	801cee8 <_dtoa_r+0x238>
 801cf46:	2301      	movs	r3, #1
 801cf48:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cf4a:	e7f5      	b.n	801cf38 <_dtoa_r+0x288>
 801cf4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cf4e:	9300      	str	r3, [sp, #0]
 801cf50:	9307      	str	r3, [sp, #28]
 801cf52:	e7d7      	b.n	801cf04 <_dtoa_r+0x254>
 801cf54:	3101      	adds	r1, #1
 801cf56:	0052      	lsls	r2, r2, #1
 801cf58:	e7d8      	b.n	801cf0c <_dtoa_r+0x25c>
 801cf5a:	bf00      	nop
 801cf5c:	f3af 8000 	nop.w
 801cf60:	636f4361 	.word	0x636f4361
 801cf64:	3fd287a7 	.word	0x3fd287a7
 801cf68:	8b60c8b3 	.word	0x8b60c8b3
 801cf6c:	3fc68a28 	.word	0x3fc68a28
 801cf70:	509f79fb 	.word	0x509f79fb
 801cf74:	3fd34413 	.word	0x3fd34413
 801cf78:	080233ea 	.word	0x080233ea
 801cf7c:	080234ac 	.word	0x080234ac
 801cf80:	7ff00000 	.word	0x7ff00000
 801cf84:	080233c2 	.word	0x080233c2
 801cf88:	3ff80000 	.word	0x3ff80000
 801cf8c:	08023608 	.word	0x08023608
 801cf90:	08023504 	.word	0x08023504
 801cf94:	080234a8 	.word	0x080234a8
 801cf98:	080233c1 	.word	0x080233c1
 801cf9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801cfa0:	6018      	str	r0, [r3, #0]
 801cfa2:	9b07      	ldr	r3, [sp, #28]
 801cfa4:	2b0e      	cmp	r3, #14
 801cfa6:	f200 80a4 	bhi.w	801d0f2 <_dtoa_r+0x442>
 801cfaa:	2c00      	cmp	r4, #0
 801cfac:	f000 80a1 	beq.w	801d0f2 <_dtoa_r+0x442>
 801cfb0:	2f00      	cmp	r7, #0
 801cfb2:	dd33      	ble.n	801d01c <_dtoa_r+0x36c>
 801cfb4:	4bad      	ldr	r3, [pc, #692]	@ (801d26c <_dtoa_r+0x5bc>)
 801cfb6:	f007 020f 	and.w	r2, r7, #15
 801cfba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cfbe:	ed93 7b00 	vldr	d7, [r3]
 801cfc2:	05f8      	lsls	r0, r7, #23
 801cfc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801cfc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801cfcc:	d516      	bpl.n	801cffc <_dtoa_r+0x34c>
 801cfce:	4ba8      	ldr	r3, [pc, #672]	@ (801d270 <_dtoa_r+0x5c0>)
 801cfd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cfd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cfd8:	f7e3 fc10 	bl	80007fc <__aeabi_ddiv>
 801cfdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cfe0:	f004 040f 	and.w	r4, r4, #15
 801cfe4:	2603      	movs	r6, #3
 801cfe6:	4da2      	ldr	r5, [pc, #648]	@ (801d270 <_dtoa_r+0x5c0>)
 801cfe8:	b954      	cbnz	r4, 801d000 <_dtoa_r+0x350>
 801cfea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cfee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cff2:	f7e3 fc03 	bl	80007fc <__aeabi_ddiv>
 801cff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cffa:	e028      	b.n	801d04e <_dtoa_r+0x39e>
 801cffc:	2602      	movs	r6, #2
 801cffe:	e7f2      	b.n	801cfe6 <_dtoa_r+0x336>
 801d000:	07e1      	lsls	r1, r4, #31
 801d002:	d508      	bpl.n	801d016 <_dtoa_r+0x366>
 801d004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d008:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d00c:	f7e3 facc 	bl	80005a8 <__aeabi_dmul>
 801d010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d014:	3601      	adds	r6, #1
 801d016:	1064      	asrs	r4, r4, #1
 801d018:	3508      	adds	r5, #8
 801d01a:	e7e5      	b.n	801cfe8 <_dtoa_r+0x338>
 801d01c:	f000 80d2 	beq.w	801d1c4 <_dtoa_r+0x514>
 801d020:	427c      	negs	r4, r7
 801d022:	4b92      	ldr	r3, [pc, #584]	@ (801d26c <_dtoa_r+0x5bc>)
 801d024:	4d92      	ldr	r5, [pc, #584]	@ (801d270 <_dtoa_r+0x5c0>)
 801d026:	f004 020f 	and.w	r2, r4, #15
 801d02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d036:	f7e3 fab7 	bl	80005a8 <__aeabi_dmul>
 801d03a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d03e:	1124      	asrs	r4, r4, #4
 801d040:	2300      	movs	r3, #0
 801d042:	2602      	movs	r6, #2
 801d044:	2c00      	cmp	r4, #0
 801d046:	f040 80b2 	bne.w	801d1ae <_dtoa_r+0x4fe>
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d1d3      	bne.n	801cff6 <_dtoa_r+0x346>
 801d04e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d050:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d054:	2b00      	cmp	r3, #0
 801d056:	f000 80b7 	beq.w	801d1c8 <_dtoa_r+0x518>
 801d05a:	4b86      	ldr	r3, [pc, #536]	@ (801d274 <_dtoa_r+0x5c4>)
 801d05c:	2200      	movs	r2, #0
 801d05e:	4620      	mov	r0, r4
 801d060:	4629      	mov	r1, r5
 801d062:	f7e3 fd13 	bl	8000a8c <__aeabi_dcmplt>
 801d066:	2800      	cmp	r0, #0
 801d068:	f000 80ae 	beq.w	801d1c8 <_dtoa_r+0x518>
 801d06c:	9b07      	ldr	r3, [sp, #28]
 801d06e:	2b00      	cmp	r3, #0
 801d070:	f000 80aa 	beq.w	801d1c8 <_dtoa_r+0x518>
 801d074:	9b00      	ldr	r3, [sp, #0]
 801d076:	2b00      	cmp	r3, #0
 801d078:	dd37      	ble.n	801d0ea <_dtoa_r+0x43a>
 801d07a:	1e7b      	subs	r3, r7, #1
 801d07c:	9304      	str	r3, [sp, #16]
 801d07e:	4620      	mov	r0, r4
 801d080:	4b7d      	ldr	r3, [pc, #500]	@ (801d278 <_dtoa_r+0x5c8>)
 801d082:	2200      	movs	r2, #0
 801d084:	4629      	mov	r1, r5
 801d086:	f7e3 fa8f 	bl	80005a8 <__aeabi_dmul>
 801d08a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d08e:	9c00      	ldr	r4, [sp, #0]
 801d090:	3601      	adds	r6, #1
 801d092:	4630      	mov	r0, r6
 801d094:	f7e3 fa1e 	bl	80004d4 <__aeabi_i2d>
 801d098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d09c:	f7e3 fa84 	bl	80005a8 <__aeabi_dmul>
 801d0a0:	4b76      	ldr	r3, [pc, #472]	@ (801d27c <_dtoa_r+0x5cc>)
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	f7e3 f8ca 	bl	800023c <__adddf3>
 801d0a8:	4605      	mov	r5, r0
 801d0aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d0ae:	2c00      	cmp	r4, #0
 801d0b0:	f040 808d 	bne.w	801d1ce <_dtoa_r+0x51e>
 801d0b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d0b8:	4b71      	ldr	r3, [pc, #452]	@ (801d280 <_dtoa_r+0x5d0>)
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	f7e3 f8bc 	bl	8000238 <__aeabi_dsub>
 801d0c0:	4602      	mov	r2, r0
 801d0c2:	460b      	mov	r3, r1
 801d0c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d0c8:	462a      	mov	r2, r5
 801d0ca:	4633      	mov	r3, r6
 801d0cc:	f7e3 fcfc 	bl	8000ac8 <__aeabi_dcmpgt>
 801d0d0:	2800      	cmp	r0, #0
 801d0d2:	f040 828b 	bne.w	801d5ec <_dtoa_r+0x93c>
 801d0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d0da:	462a      	mov	r2, r5
 801d0dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d0e0:	f7e3 fcd4 	bl	8000a8c <__aeabi_dcmplt>
 801d0e4:	2800      	cmp	r0, #0
 801d0e6:	f040 8128 	bne.w	801d33a <_dtoa_r+0x68a>
 801d0ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801d0ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d0f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	f2c0 815a 	blt.w	801d3ae <_dtoa_r+0x6fe>
 801d0fa:	2f0e      	cmp	r7, #14
 801d0fc:	f300 8157 	bgt.w	801d3ae <_dtoa_r+0x6fe>
 801d100:	4b5a      	ldr	r3, [pc, #360]	@ (801d26c <_dtoa_r+0x5bc>)
 801d102:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d106:	ed93 7b00 	vldr	d7, [r3]
 801d10a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	ed8d 7b00 	vstr	d7, [sp]
 801d112:	da03      	bge.n	801d11c <_dtoa_r+0x46c>
 801d114:	9b07      	ldr	r3, [sp, #28]
 801d116:	2b00      	cmp	r3, #0
 801d118:	f340 8101 	ble.w	801d31e <_dtoa_r+0x66e>
 801d11c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d120:	4656      	mov	r6, sl
 801d122:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d126:	4620      	mov	r0, r4
 801d128:	4629      	mov	r1, r5
 801d12a:	f7e3 fb67 	bl	80007fc <__aeabi_ddiv>
 801d12e:	f7e3 fceb 	bl	8000b08 <__aeabi_d2iz>
 801d132:	4680      	mov	r8, r0
 801d134:	f7e3 f9ce 	bl	80004d4 <__aeabi_i2d>
 801d138:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d13c:	f7e3 fa34 	bl	80005a8 <__aeabi_dmul>
 801d140:	4602      	mov	r2, r0
 801d142:	460b      	mov	r3, r1
 801d144:	4620      	mov	r0, r4
 801d146:	4629      	mov	r1, r5
 801d148:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d14c:	f7e3 f874 	bl	8000238 <__aeabi_dsub>
 801d150:	f806 4b01 	strb.w	r4, [r6], #1
 801d154:	9d07      	ldr	r5, [sp, #28]
 801d156:	eba6 040a 	sub.w	r4, r6, sl
 801d15a:	42a5      	cmp	r5, r4
 801d15c:	4602      	mov	r2, r0
 801d15e:	460b      	mov	r3, r1
 801d160:	f040 8117 	bne.w	801d392 <_dtoa_r+0x6e2>
 801d164:	f7e3 f86a 	bl	800023c <__adddf3>
 801d168:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d16c:	4604      	mov	r4, r0
 801d16e:	460d      	mov	r5, r1
 801d170:	f7e3 fcaa 	bl	8000ac8 <__aeabi_dcmpgt>
 801d174:	2800      	cmp	r0, #0
 801d176:	f040 80f9 	bne.w	801d36c <_dtoa_r+0x6bc>
 801d17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d17e:	4620      	mov	r0, r4
 801d180:	4629      	mov	r1, r5
 801d182:	f7e3 fc79 	bl	8000a78 <__aeabi_dcmpeq>
 801d186:	b118      	cbz	r0, 801d190 <_dtoa_r+0x4e0>
 801d188:	f018 0f01 	tst.w	r8, #1
 801d18c:	f040 80ee 	bne.w	801d36c <_dtoa_r+0x6bc>
 801d190:	4649      	mov	r1, r9
 801d192:	4658      	mov	r0, fp
 801d194:	f000 ff26 	bl	801dfe4 <_Bfree>
 801d198:	2300      	movs	r3, #0
 801d19a:	7033      	strb	r3, [r6, #0]
 801d19c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d19e:	3701      	adds	r7, #1
 801d1a0:	601f      	str	r7, [r3, #0]
 801d1a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	f000 831d 	beq.w	801d7e4 <_dtoa_r+0xb34>
 801d1aa:	601e      	str	r6, [r3, #0]
 801d1ac:	e31a      	b.n	801d7e4 <_dtoa_r+0xb34>
 801d1ae:	07e2      	lsls	r2, r4, #31
 801d1b0:	d505      	bpl.n	801d1be <_dtoa_r+0x50e>
 801d1b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d1b6:	f7e3 f9f7 	bl	80005a8 <__aeabi_dmul>
 801d1ba:	3601      	adds	r6, #1
 801d1bc:	2301      	movs	r3, #1
 801d1be:	1064      	asrs	r4, r4, #1
 801d1c0:	3508      	adds	r5, #8
 801d1c2:	e73f      	b.n	801d044 <_dtoa_r+0x394>
 801d1c4:	2602      	movs	r6, #2
 801d1c6:	e742      	b.n	801d04e <_dtoa_r+0x39e>
 801d1c8:	9c07      	ldr	r4, [sp, #28]
 801d1ca:	9704      	str	r7, [sp, #16]
 801d1cc:	e761      	b.n	801d092 <_dtoa_r+0x3e2>
 801d1ce:	4b27      	ldr	r3, [pc, #156]	@ (801d26c <_dtoa_r+0x5bc>)
 801d1d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d1d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d1d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d1da:	4454      	add	r4, sl
 801d1dc:	2900      	cmp	r1, #0
 801d1de:	d053      	beq.n	801d288 <_dtoa_r+0x5d8>
 801d1e0:	4928      	ldr	r1, [pc, #160]	@ (801d284 <_dtoa_r+0x5d4>)
 801d1e2:	2000      	movs	r0, #0
 801d1e4:	f7e3 fb0a 	bl	80007fc <__aeabi_ddiv>
 801d1e8:	4633      	mov	r3, r6
 801d1ea:	462a      	mov	r2, r5
 801d1ec:	f7e3 f824 	bl	8000238 <__aeabi_dsub>
 801d1f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d1f4:	4656      	mov	r6, sl
 801d1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d1fa:	f7e3 fc85 	bl	8000b08 <__aeabi_d2iz>
 801d1fe:	4605      	mov	r5, r0
 801d200:	f7e3 f968 	bl	80004d4 <__aeabi_i2d>
 801d204:	4602      	mov	r2, r0
 801d206:	460b      	mov	r3, r1
 801d208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d20c:	f7e3 f814 	bl	8000238 <__aeabi_dsub>
 801d210:	3530      	adds	r5, #48	@ 0x30
 801d212:	4602      	mov	r2, r0
 801d214:	460b      	mov	r3, r1
 801d216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d21a:	f806 5b01 	strb.w	r5, [r6], #1
 801d21e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d222:	f7e3 fc33 	bl	8000a8c <__aeabi_dcmplt>
 801d226:	2800      	cmp	r0, #0
 801d228:	d171      	bne.n	801d30e <_dtoa_r+0x65e>
 801d22a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d22e:	4911      	ldr	r1, [pc, #68]	@ (801d274 <_dtoa_r+0x5c4>)
 801d230:	2000      	movs	r0, #0
 801d232:	f7e3 f801 	bl	8000238 <__aeabi_dsub>
 801d236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d23a:	f7e3 fc27 	bl	8000a8c <__aeabi_dcmplt>
 801d23e:	2800      	cmp	r0, #0
 801d240:	f040 8095 	bne.w	801d36e <_dtoa_r+0x6be>
 801d244:	42a6      	cmp	r6, r4
 801d246:	f43f af50 	beq.w	801d0ea <_dtoa_r+0x43a>
 801d24a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d24e:	4b0a      	ldr	r3, [pc, #40]	@ (801d278 <_dtoa_r+0x5c8>)
 801d250:	2200      	movs	r2, #0
 801d252:	f7e3 f9a9 	bl	80005a8 <__aeabi_dmul>
 801d256:	4b08      	ldr	r3, [pc, #32]	@ (801d278 <_dtoa_r+0x5c8>)
 801d258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d25c:	2200      	movs	r2, #0
 801d25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d262:	f7e3 f9a1 	bl	80005a8 <__aeabi_dmul>
 801d266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d26a:	e7c4      	b.n	801d1f6 <_dtoa_r+0x546>
 801d26c:	08023608 	.word	0x08023608
 801d270:	080235e0 	.word	0x080235e0
 801d274:	3ff00000 	.word	0x3ff00000
 801d278:	40240000 	.word	0x40240000
 801d27c:	401c0000 	.word	0x401c0000
 801d280:	40140000 	.word	0x40140000
 801d284:	3fe00000 	.word	0x3fe00000
 801d288:	4631      	mov	r1, r6
 801d28a:	4628      	mov	r0, r5
 801d28c:	f7e3 f98c 	bl	80005a8 <__aeabi_dmul>
 801d290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d294:	9415      	str	r4, [sp, #84]	@ 0x54
 801d296:	4656      	mov	r6, sl
 801d298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d29c:	f7e3 fc34 	bl	8000b08 <__aeabi_d2iz>
 801d2a0:	4605      	mov	r5, r0
 801d2a2:	f7e3 f917 	bl	80004d4 <__aeabi_i2d>
 801d2a6:	4602      	mov	r2, r0
 801d2a8:	460b      	mov	r3, r1
 801d2aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d2ae:	f7e2 ffc3 	bl	8000238 <__aeabi_dsub>
 801d2b2:	3530      	adds	r5, #48	@ 0x30
 801d2b4:	f806 5b01 	strb.w	r5, [r6], #1
 801d2b8:	4602      	mov	r2, r0
 801d2ba:	460b      	mov	r3, r1
 801d2bc:	42a6      	cmp	r6, r4
 801d2be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d2c2:	f04f 0200 	mov.w	r2, #0
 801d2c6:	d124      	bne.n	801d312 <_dtoa_r+0x662>
 801d2c8:	4bac      	ldr	r3, [pc, #688]	@ (801d57c <_dtoa_r+0x8cc>)
 801d2ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d2ce:	f7e2 ffb5 	bl	800023c <__adddf3>
 801d2d2:	4602      	mov	r2, r0
 801d2d4:	460b      	mov	r3, r1
 801d2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d2da:	f7e3 fbf5 	bl	8000ac8 <__aeabi_dcmpgt>
 801d2de:	2800      	cmp	r0, #0
 801d2e0:	d145      	bne.n	801d36e <_dtoa_r+0x6be>
 801d2e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d2e6:	49a5      	ldr	r1, [pc, #660]	@ (801d57c <_dtoa_r+0x8cc>)
 801d2e8:	2000      	movs	r0, #0
 801d2ea:	f7e2 ffa5 	bl	8000238 <__aeabi_dsub>
 801d2ee:	4602      	mov	r2, r0
 801d2f0:	460b      	mov	r3, r1
 801d2f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d2f6:	f7e3 fbc9 	bl	8000a8c <__aeabi_dcmplt>
 801d2fa:	2800      	cmp	r0, #0
 801d2fc:	f43f aef5 	beq.w	801d0ea <_dtoa_r+0x43a>
 801d300:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801d302:	1e73      	subs	r3, r6, #1
 801d304:	9315      	str	r3, [sp, #84]	@ 0x54
 801d306:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d30a:	2b30      	cmp	r3, #48	@ 0x30
 801d30c:	d0f8      	beq.n	801d300 <_dtoa_r+0x650>
 801d30e:	9f04      	ldr	r7, [sp, #16]
 801d310:	e73e      	b.n	801d190 <_dtoa_r+0x4e0>
 801d312:	4b9b      	ldr	r3, [pc, #620]	@ (801d580 <_dtoa_r+0x8d0>)
 801d314:	f7e3 f948 	bl	80005a8 <__aeabi_dmul>
 801d318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d31c:	e7bc      	b.n	801d298 <_dtoa_r+0x5e8>
 801d31e:	d10c      	bne.n	801d33a <_dtoa_r+0x68a>
 801d320:	4b98      	ldr	r3, [pc, #608]	@ (801d584 <_dtoa_r+0x8d4>)
 801d322:	2200      	movs	r2, #0
 801d324:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d328:	f7e3 f93e 	bl	80005a8 <__aeabi_dmul>
 801d32c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d330:	f7e3 fbc0 	bl	8000ab4 <__aeabi_dcmpge>
 801d334:	2800      	cmp	r0, #0
 801d336:	f000 8157 	beq.w	801d5e8 <_dtoa_r+0x938>
 801d33a:	2400      	movs	r4, #0
 801d33c:	4625      	mov	r5, r4
 801d33e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d340:	43db      	mvns	r3, r3
 801d342:	9304      	str	r3, [sp, #16]
 801d344:	4656      	mov	r6, sl
 801d346:	2700      	movs	r7, #0
 801d348:	4621      	mov	r1, r4
 801d34a:	4658      	mov	r0, fp
 801d34c:	f000 fe4a 	bl	801dfe4 <_Bfree>
 801d350:	2d00      	cmp	r5, #0
 801d352:	d0dc      	beq.n	801d30e <_dtoa_r+0x65e>
 801d354:	b12f      	cbz	r7, 801d362 <_dtoa_r+0x6b2>
 801d356:	42af      	cmp	r7, r5
 801d358:	d003      	beq.n	801d362 <_dtoa_r+0x6b2>
 801d35a:	4639      	mov	r1, r7
 801d35c:	4658      	mov	r0, fp
 801d35e:	f000 fe41 	bl	801dfe4 <_Bfree>
 801d362:	4629      	mov	r1, r5
 801d364:	4658      	mov	r0, fp
 801d366:	f000 fe3d 	bl	801dfe4 <_Bfree>
 801d36a:	e7d0      	b.n	801d30e <_dtoa_r+0x65e>
 801d36c:	9704      	str	r7, [sp, #16]
 801d36e:	4633      	mov	r3, r6
 801d370:	461e      	mov	r6, r3
 801d372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d376:	2a39      	cmp	r2, #57	@ 0x39
 801d378:	d107      	bne.n	801d38a <_dtoa_r+0x6da>
 801d37a:	459a      	cmp	sl, r3
 801d37c:	d1f8      	bne.n	801d370 <_dtoa_r+0x6c0>
 801d37e:	9a04      	ldr	r2, [sp, #16]
 801d380:	3201      	adds	r2, #1
 801d382:	9204      	str	r2, [sp, #16]
 801d384:	2230      	movs	r2, #48	@ 0x30
 801d386:	f88a 2000 	strb.w	r2, [sl]
 801d38a:	781a      	ldrb	r2, [r3, #0]
 801d38c:	3201      	adds	r2, #1
 801d38e:	701a      	strb	r2, [r3, #0]
 801d390:	e7bd      	b.n	801d30e <_dtoa_r+0x65e>
 801d392:	4b7b      	ldr	r3, [pc, #492]	@ (801d580 <_dtoa_r+0x8d0>)
 801d394:	2200      	movs	r2, #0
 801d396:	f7e3 f907 	bl	80005a8 <__aeabi_dmul>
 801d39a:	2200      	movs	r2, #0
 801d39c:	2300      	movs	r3, #0
 801d39e:	4604      	mov	r4, r0
 801d3a0:	460d      	mov	r5, r1
 801d3a2:	f7e3 fb69 	bl	8000a78 <__aeabi_dcmpeq>
 801d3a6:	2800      	cmp	r0, #0
 801d3a8:	f43f aebb 	beq.w	801d122 <_dtoa_r+0x472>
 801d3ac:	e6f0      	b.n	801d190 <_dtoa_r+0x4e0>
 801d3ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d3b0:	2a00      	cmp	r2, #0
 801d3b2:	f000 80db 	beq.w	801d56c <_dtoa_r+0x8bc>
 801d3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d3b8:	2a01      	cmp	r2, #1
 801d3ba:	f300 80bf 	bgt.w	801d53c <_dtoa_r+0x88c>
 801d3be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d3c0:	2a00      	cmp	r2, #0
 801d3c2:	f000 80b7 	beq.w	801d534 <_dtoa_r+0x884>
 801d3c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d3ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d3cc:	4646      	mov	r6, r8
 801d3ce:	9a08      	ldr	r2, [sp, #32]
 801d3d0:	2101      	movs	r1, #1
 801d3d2:	441a      	add	r2, r3
 801d3d4:	4658      	mov	r0, fp
 801d3d6:	4498      	add	r8, r3
 801d3d8:	9208      	str	r2, [sp, #32]
 801d3da:	f000 ff01 	bl	801e1e0 <__i2b>
 801d3de:	4605      	mov	r5, r0
 801d3e0:	b15e      	cbz	r6, 801d3fa <_dtoa_r+0x74a>
 801d3e2:	9b08      	ldr	r3, [sp, #32]
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	dd08      	ble.n	801d3fa <_dtoa_r+0x74a>
 801d3e8:	42b3      	cmp	r3, r6
 801d3ea:	9a08      	ldr	r2, [sp, #32]
 801d3ec:	bfa8      	it	ge
 801d3ee:	4633      	movge	r3, r6
 801d3f0:	eba8 0803 	sub.w	r8, r8, r3
 801d3f4:	1af6      	subs	r6, r6, r3
 801d3f6:	1ad3      	subs	r3, r2, r3
 801d3f8:	9308      	str	r3, [sp, #32]
 801d3fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d3fc:	b1f3      	cbz	r3, 801d43c <_dtoa_r+0x78c>
 801d3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d400:	2b00      	cmp	r3, #0
 801d402:	f000 80b7 	beq.w	801d574 <_dtoa_r+0x8c4>
 801d406:	b18c      	cbz	r4, 801d42c <_dtoa_r+0x77c>
 801d408:	4629      	mov	r1, r5
 801d40a:	4622      	mov	r2, r4
 801d40c:	4658      	mov	r0, fp
 801d40e:	f000 ffa7 	bl	801e360 <__pow5mult>
 801d412:	464a      	mov	r2, r9
 801d414:	4601      	mov	r1, r0
 801d416:	4605      	mov	r5, r0
 801d418:	4658      	mov	r0, fp
 801d41a:	f000 fef7 	bl	801e20c <__multiply>
 801d41e:	4649      	mov	r1, r9
 801d420:	9004      	str	r0, [sp, #16]
 801d422:	4658      	mov	r0, fp
 801d424:	f000 fdde 	bl	801dfe4 <_Bfree>
 801d428:	9b04      	ldr	r3, [sp, #16]
 801d42a:	4699      	mov	r9, r3
 801d42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d42e:	1b1a      	subs	r2, r3, r4
 801d430:	d004      	beq.n	801d43c <_dtoa_r+0x78c>
 801d432:	4649      	mov	r1, r9
 801d434:	4658      	mov	r0, fp
 801d436:	f000 ff93 	bl	801e360 <__pow5mult>
 801d43a:	4681      	mov	r9, r0
 801d43c:	2101      	movs	r1, #1
 801d43e:	4658      	mov	r0, fp
 801d440:	f000 fece 	bl	801e1e0 <__i2b>
 801d444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d446:	4604      	mov	r4, r0
 801d448:	2b00      	cmp	r3, #0
 801d44a:	f000 81cf 	beq.w	801d7ec <_dtoa_r+0xb3c>
 801d44e:	461a      	mov	r2, r3
 801d450:	4601      	mov	r1, r0
 801d452:	4658      	mov	r0, fp
 801d454:	f000 ff84 	bl	801e360 <__pow5mult>
 801d458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d45a:	2b01      	cmp	r3, #1
 801d45c:	4604      	mov	r4, r0
 801d45e:	f300 8095 	bgt.w	801d58c <_dtoa_r+0x8dc>
 801d462:	9b02      	ldr	r3, [sp, #8]
 801d464:	2b00      	cmp	r3, #0
 801d466:	f040 8087 	bne.w	801d578 <_dtoa_r+0x8c8>
 801d46a:	9b03      	ldr	r3, [sp, #12]
 801d46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d470:	2b00      	cmp	r3, #0
 801d472:	f040 8089 	bne.w	801d588 <_dtoa_r+0x8d8>
 801d476:	9b03      	ldr	r3, [sp, #12]
 801d478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d47c:	0d1b      	lsrs	r3, r3, #20
 801d47e:	051b      	lsls	r3, r3, #20
 801d480:	b12b      	cbz	r3, 801d48e <_dtoa_r+0x7de>
 801d482:	9b08      	ldr	r3, [sp, #32]
 801d484:	3301      	adds	r3, #1
 801d486:	9308      	str	r3, [sp, #32]
 801d488:	f108 0801 	add.w	r8, r8, #1
 801d48c:	2301      	movs	r3, #1
 801d48e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d492:	2b00      	cmp	r3, #0
 801d494:	f000 81b0 	beq.w	801d7f8 <_dtoa_r+0xb48>
 801d498:	6923      	ldr	r3, [r4, #16]
 801d49a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d49e:	6918      	ldr	r0, [r3, #16]
 801d4a0:	f000 fe52 	bl	801e148 <__hi0bits>
 801d4a4:	f1c0 0020 	rsb	r0, r0, #32
 801d4a8:	9b08      	ldr	r3, [sp, #32]
 801d4aa:	4418      	add	r0, r3
 801d4ac:	f010 001f 	ands.w	r0, r0, #31
 801d4b0:	d077      	beq.n	801d5a2 <_dtoa_r+0x8f2>
 801d4b2:	f1c0 0320 	rsb	r3, r0, #32
 801d4b6:	2b04      	cmp	r3, #4
 801d4b8:	dd6b      	ble.n	801d592 <_dtoa_r+0x8e2>
 801d4ba:	9b08      	ldr	r3, [sp, #32]
 801d4bc:	f1c0 001c 	rsb	r0, r0, #28
 801d4c0:	4403      	add	r3, r0
 801d4c2:	4480      	add	r8, r0
 801d4c4:	4406      	add	r6, r0
 801d4c6:	9308      	str	r3, [sp, #32]
 801d4c8:	f1b8 0f00 	cmp.w	r8, #0
 801d4cc:	dd05      	ble.n	801d4da <_dtoa_r+0x82a>
 801d4ce:	4649      	mov	r1, r9
 801d4d0:	4642      	mov	r2, r8
 801d4d2:	4658      	mov	r0, fp
 801d4d4:	f000 ff9e 	bl	801e414 <__lshift>
 801d4d8:	4681      	mov	r9, r0
 801d4da:	9b08      	ldr	r3, [sp, #32]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	dd05      	ble.n	801d4ec <_dtoa_r+0x83c>
 801d4e0:	4621      	mov	r1, r4
 801d4e2:	461a      	mov	r2, r3
 801d4e4:	4658      	mov	r0, fp
 801d4e6:	f000 ff95 	bl	801e414 <__lshift>
 801d4ea:	4604      	mov	r4, r0
 801d4ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d059      	beq.n	801d5a6 <_dtoa_r+0x8f6>
 801d4f2:	4621      	mov	r1, r4
 801d4f4:	4648      	mov	r0, r9
 801d4f6:	f000 fff9 	bl	801e4ec <__mcmp>
 801d4fa:	2800      	cmp	r0, #0
 801d4fc:	da53      	bge.n	801d5a6 <_dtoa_r+0x8f6>
 801d4fe:	1e7b      	subs	r3, r7, #1
 801d500:	9304      	str	r3, [sp, #16]
 801d502:	4649      	mov	r1, r9
 801d504:	2300      	movs	r3, #0
 801d506:	220a      	movs	r2, #10
 801d508:	4658      	mov	r0, fp
 801d50a:	f000 fd8d 	bl	801e028 <__multadd>
 801d50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d510:	4681      	mov	r9, r0
 801d512:	2b00      	cmp	r3, #0
 801d514:	f000 8172 	beq.w	801d7fc <_dtoa_r+0xb4c>
 801d518:	2300      	movs	r3, #0
 801d51a:	4629      	mov	r1, r5
 801d51c:	220a      	movs	r2, #10
 801d51e:	4658      	mov	r0, fp
 801d520:	f000 fd82 	bl	801e028 <__multadd>
 801d524:	9b00      	ldr	r3, [sp, #0]
 801d526:	2b00      	cmp	r3, #0
 801d528:	4605      	mov	r5, r0
 801d52a:	dc67      	bgt.n	801d5fc <_dtoa_r+0x94c>
 801d52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d52e:	2b02      	cmp	r3, #2
 801d530:	dc41      	bgt.n	801d5b6 <_dtoa_r+0x906>
 801d532:	e063      	b.n	801d5fc <_dtoa_r+0x94c>
 801d534:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d53a:	e746      	b.n	801d3ca <_dtoa_r+0x71a>
 801d53c:	9b07      	ldr	r3, [sp, #28]
 801d53e:	1e5c      	subs	r4, r3, #1
 801d540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d542:	42a3      	cmp	r3, r4
 801d544:	bfbf      	itttt	lt
 801d546:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801d548:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801d54a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801d54c:	1ae3      	sublt	r3, r4, r3
 801d54e:	bfb4      	ite	lt
 801d550:	18d2      	addlt	r2, r2, r3
 801d552:	1b1c      	subge	r4, r3, r4
 801d554:	9b07      	ldr	r3, [sp, #28]
 801d556:	bfbc      	itt	lt
 801d558:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801d55a:	2400      	movlt	r4, #0
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	bfb5      	itete	lt
 801d560:	eba8 0603 	sublt.w	r6, r8, r3
 801d564:	9b07      	ldrge	r3, [sp, #28]
 801d566:	2300      	movlt	r3, #0
 801d568:	4646      	movge	r6, r8
 801d56a:	e730      	b.n	801d3ce <_dtoa_r+0x71e>
 801d56c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d56e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d570:	4646      	mov	r6, r8
 801d572:	e735      	b.n	801d3e0 <_dtoa_r+0x730>
 801d574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d576:	e75c      	b.n	801d432 <_dtoa_r+0x782>
 801d578:	2300      	movs	r3, #0
 801d57a:	e788      	b.n	801d48e <_dtoa_r+0x7de>
 801d57c:	3fe00000 	.word	0x3fe00000
 801d580:	40240000 	.word	0x40240000
 801d584:	40140000 	.word	0x40140000
 801d588:	9b02      	ldr	r3, [sp, #8]
 801d58a:	e780      	b.n	801d48e <_dtoa_r+0x7de>
 801d58c:	2300      	movs	r3, #0
 801d58e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d590:	e782      	b.n	801d498 <_dtoa_r+0x7e8>
 801d592:	d099      	beq.n	801d4c8 <_dtoa_r+0x818>
 801d594:	9a08      	ldr	r2, [sp, #32]
 801d596:	331c      	adds	r3, #28
 801d598:	441a      	add	r2, r3
 801d59a:	4498      	add	r8, r3
 801d59c:	441e      	add	r6, r3
 801d59e:	9208      	str	r2, [sp, #32]
 801d5a0:	e792      	b.n	801d4c8 <_dtoa_r+0x818>
 801d5a2:	4603      	mov	r3, r0
 801d5a4:	e7f6      	b.n	801d594 <_dtoa_r+0x8e4>
 801d5a6:	9b07      	ldr	r3, [sp, #28]
 801d5a8:	9704      	str	r7, [sp, #16]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	dc20      	bgt.n	801d5f0 <_dtoa_r+0x940>
 801d5ae:	9300      	str	r3, [sp, #0]
 801d5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5b2:	2b02      	cmp	r3, #2
 801d5b4:	dd1e      	ble.n	801d5f4 <_dtoa_r+0x944>
 801d5b6:	9b00      	ldr	r3, [sp, #0]
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	f47f aec0 	bne.w	801d33e <_dtoa_r+0x68e>
 801d5be:	4621      	mov	r1, r4
 801d5c0:	2205      	movs	r2, #5
 801d5c2:	4658      	mov	r0, fp
 801d5c4:	f000 fd30 	bl	801e028 <__multadd>
 801d5c8:	4601      	mov	r1, r0
 801d5ca:	4604      	mov	r4, r0
 801d5cc:	4648      	mov	r0, r9
 801d5ce:	f000 ff8d 	bl	801e4ec <__mcmp>
 801d5d2:	2800      	cmp	r0, #0
 801d5d4:	f77f aeb3 	ble.w	801d33e <_dtoa_r+0x68e>
 801d5d8:	4656      	mov	r6, sl
 801d5da:	2331      	movs	r3, #49	@ 0x31
 801d5dc:	f806 3b01 	strb.w	r3, [r6], #1
 801d5e0:	9b04      	ldr	r3, [sp, #16]
 801d5e2:	3301      	adds	r3, #1
 801d5e4:	9304      	str	r3, [sp, #16]
 801d5e6:	e6ae      	b.n	801d346 <_dtoa_r+0x696>
 801d5e8:	9c07      	ldr	r4, [sp, #28]
 801d5ea:	9704      	str	r7, [sp, #16]
 801d5ec:	4625      	mov	r5, r4
 801d5ee:	e7f3      	b.n	801d5d8 <_dtoa_r+0x928>
 801d5f0:	9b07      	ldr	r3, [sp, #28]
 801d5f2:	9300      	str	r3, [sp, #0]
 801d5f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	f000 8104 	beq.w	801d804 <_dtoa_r+0xb54>
 801d5fc:	2e00      	cmp	r6, #0
 801d5fe:	dd05      	ble.n	801d60c <_dtoa_r+0x95c>
 801d600:	4629      	mov	r1, r5
 801d602:	4632      	mov	r2, r6
 801d604:	4658      	mov	r0, fp
 801d606:	f000 ff05 	bl	801e414 <__lshift>
 801d60a:	4605      	mov	r5, r0
 801d60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d05a      	beq.n	801d6c8 <_dtoa_r+0xa18>
 801d612:	6869      	ldr	r1, [r5, #4]
 801d614:	4658      	mov	r0, fp
 801d616:	f000 fca5 	bl	801df64 <_Balloc>
 801d61a:	4606      	mov	r6, r0
 801d61c:	b928      	cbnz	r0, 801d62a <_dtoa_r+0x97a>
 801d61e:	4b84      	ldr	r3, [pc, #528]	@ (801d830 <_dtoa_r+0xb80>)
 801d620:	4602      	mov	r2, r0
 801d622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d626:	f7ff bb5a 	b.w	801ccde <_dtoa_r+0x2e>
 801d62a:	692a      	ldr	r2, [r5, #16]
 801d62c:	3202      	adds	r2, #2
 801d62e:	0092      	lsls	r2, r2, #2
 801d630:	f105 010c 	add.w	r1, r5, #12
 801d634:	300c      	adds	r0, #12
 801d636:	f7ff fa78 	bl	801cb2a <memcpy>
 801d63a:	2201      	movs	r2, #1
 801d63c:	4631      	mov	r1, r6
 801d63e:	4658      	mov	r0, fp
 801d640:	f000 fee8 	bl	801e414 <__lshift>
 801d644:	f10a 0301 	add.w	r3, sl, #1
 801d648:	9307      	str	r3, [sp, #28]
 801d64a:	9b00      	ldr	r3, [sp, #0]
 801d64c:	4453      	add	r3, sl
 801d64e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d650:	9b02      	ldr	r3, [sp, #8]
 801d652:	f003 0301 	and.w	r3, r3, #1
 801d656:	462f      	mov	r7, r5
 801d658:	930a      	str	r3, [sp, #40]	@ 0x28
 801d65a:	4605      	mov	r5, r0
 801d65c:	9b07      	ldr	r3, [sp, #28]
 801d65e:	4621      	mov	r1, r4
 801d660:	3b01      	subs	r3, #1
 801d662:	4648      	mov	r0, r9
 801d664:	9300      	str	r3, [sp, #0]
 801d666:	f7ff fa9b 	bl	801cba0 <quorem>
 801d66a:	4639      	mov	r1, r7
 801d66c:	9002      	str	r0, [sp, #8]
 801d66e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d672:	4648      	mov	r0, r9
 801d674:	f000 ff3a 	bl	801e4ec <__mcmp>
 801d678:	462a      	mov	r2, r5
 801d67a:	9008      	str	r0, [sp, #32]
 801d67c:	4621      	mov	r1, r4
 801d67e:	4658      	mov	r0, fp
 801d680:	f000 ff50 	bl	801e524 <__mdiff>
 801d684:	68c2      	ldr	r2, [r0, #12]
 801d686:	4606      	mov	r6, r0
 801d688:	bb02      	cbnz	r2, 801d6cc <_dtoa_r+0xa1c>
 801d68a:	4601      	mov	r1, r0
 801d68c:	4648      	mov	r0, r9
 801d68e:	f000 ff2d 	bl	801e4ec <__mcmp>
 801d692:	4602      	mov	r2, r0
 801d694:	4631      	mov	r1, r6
 801d696:	4658      	mov	r0, fp
 801d698:	920e      	str	r2, [sp, #56]	@ 0x38
 801d69a:	f000 fca3 	bl	801dfe4 <_Bfree>
 801d69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d6a2:	9e07      	ldr	r6, [sp, #28]
 801d6a4:	ea43 0102 	orr.w	r1, r3, r2
 801d6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6aa:	4319      	orrs	r1, r3
 801d6ac:	d110      	bne.n	801d6d0 <_dtoa_r+0xa20>
 801d6ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d6b2:	d029      	beq.n	801d708 <_dtoa_r+0xa58>
 801d6b4:	9b08      	ldr	r3, [sp, #32]
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	dd02      	ble.n	801d6c0 <_dtoa_r+0xa10>
 801d6ba:	9b02      	ldr	r3, [sp, #8]
 801d6bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801d6c0:	9b00      	ldr	r3, [sp, #0]
 801d6c2:	f883 8000 	strb.w	r8, [r3]
 801d6c6:	e63f      	b.n	801d348 <_dtoa_r+0x698>
 801d6c8:	4628      	mov	r0, r5
 801d6ca:	e7bb      	b.n	801d644 <_dtoa_r+0x994>
 801d6cc:	2201      	movs	r2, #1
 801d6ce:	e7e1      	b.n	801d694 <_dtoa_r+0x9e4>
 801d6d0:	9b08      	ldr	r3, [sp, #32]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	db04      	blt.n	801d6e0 <_dtoa_r+0xa30>
 801d6d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d6d8:	430b      	orrs	r3, r1
 801d6da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d6dc:	430b      	orrs	r3, r1
 801d6de:	d120      	bne.n	801d722 <_dtoa_r+0xa72>
 801d6e0:	2a00      	cmp	r2, #0
 801d6e2:	dded      	ble.n	801d6c0 <_dtoa_r+0xa10>
 801d6e4:	4649      	mov	r1, r9
 801d6e6:	2201      	movs	r2, #1
 801d6e8:	4658      	mov	r0, fp
 801d6ea:	f000 fe93 	bl	801e414 <__lshift>
 801d6ee:	4621      	mov	r1, r4
 801d6f0:	4681      	mov	r9, r0
 801d6f2:	f000 fefb 	bl	801e4ec <__mcmp>
 801d6f6:	2800      	cmp	r0, #0
 801d6f8:	dc03      	bgt.n	801d702 <_dtoa_r+0xa52>
 801d6fa:	d1e1      	bne.n	801d6c0 <_dtoa_r+0xa10>
 801d6fc:	f018 0f01 	tst.w	r8, #1
 801d700:	d0de      	beq.n	801d6c0 <_dtoa_r+0xa10>
 801d702:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d706:	d1d8      	bne.n	801d6ba <_dtoa_r+0xa0a>
 801d708:	9a00      	ldr	r2, [sp, #0]
 801d70a:	2339      	movs	r3, #57	@ 0x39
 801d70c:	7013      	strb	r3, [r2, #0]
 801d70e:	4633      	mov	r3, r6
 801d710:	461e      	mov	r6, r3
 801d712:	3b01      	subs	r3, #1
 801d714:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d718:	2a39      	cmp	r2, #57	@ 0x39
 801d71a:	d052      	beq.n	801d7c2 <_dtoa_r+0xb12>
 801d71c:	3201      	adds	r2, #1
 801d71e:	701a      	strb	r2, [r3, #0]
 801d720:	e612      	b.n	801d348 <_dtoa_r+0x698>
 801d722:	2a00      	cmp	r2, #0
 801d724:	dd07      	ble.n	801d736 <_dtoa_r+0xa86>
 801d726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d72a:	d0ed      	beq.n	801d708 <_dtoa_r+0xa58>
 801d72c:	9a00      	ldr	r2, [sp, #0]
 801d72e:	f108 0301 	add.w	r3, r8, #1
 801d732:	7013      	strb	r3, [r2, #0]
 801d734:	e608      	b.n	801d348 <_dtoa_r+0x698>
 801d736:	9b07      	ldr	r3, [sp, #28]
 801d738:	9a07      	ldr	r2, [sp, #28]
 801d73a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801d73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d740:	4293      	cmp	r3, r2
 801d742:	d028      	beq.n	801d796 <_dtoa_r+0xae6>
 801d744:	4649      	mov	r1, r9
 801d746:	2300      	movs	r3, #0
 801d748:	220a      	movs	r2, #10
 801d74a:	4658      	mov	r0, fp
 801d74c:	f000 fc6c 	bl	801e028 <__multadd>
 801d750:	42af      	cmp	r7, r5
 801d752:	4681      	mov	r9, r0
 801d754:	f04f 0300 	mov.w	r3, #0
 801d758:	f04f 020a 	mov.w	r2, #10
 801d75c:	4639      	mov	r1, r7
 801d75e:	4658      	mov	r0, fp
 801d760:	d107      	bne.n	801d772 <_dtoa_r+0xac2>
 801d762:	f000 fc61 	bl	801e028 <__multadd>
 801d766:	4607      	mov	r7, r0
 801d768:	4605      	mov	r5, r0
 801d76a:	9b07      	ldr	r3, [sp, #28]
 801d76c:	3301      	adds	r3, #1
 801d76e:	9307      	str	r3, [sp, #28]
 801d770:	e774      	b.n	801d65c <_dtoa_r+0x9ac>
 801d772:	f000 fc59 	bl	801e028 <__multadd>
 801d776:	4629      	mov	r1, r5
 801d778:	4607      	mov	r7, r0
 801d77a:	2300      	movs	r3, #0
 801d77c:	220a      	movs	r2, #10
 801d77e:	4658      	mov	r0, fp
 801d780:	f000 fc52 	bl	801e028 <__multadd>
 801d784:	4605      	mov	r5, r0
 801d786:	e7f0      	b.n	801d76a <_dtoa_r+0xaba>
 801d788:	9b00      	ldr	r3, [sp, #0]
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	bfcc      	ite	gt
 801d78e:	461e      	movgt	r6, r3
 801d790:	2601      	movle	r6, #1
 801d792:	4456      	add	r6, sl
 801d794:	2700      	movs	r7, #0
 801d796:	4649      	mov	r1, r9
 801d798:	2201      	movs	r2, #1
 801d79a:	4658      	mov	r0, fp
 801d79c:	f000 fe3a 	bl	801e414 <__lshift>
 801d7a0:	4621      	mov	r1, r4
 801d7a2:	4681      	mov	r9, r0
 801d7a4:	f000 fea2 	bl	801e4ec <__mcmp>
 801d7a8:	2800      	cmp	r0, #0
 801d7aa:	dcb0      	bgt.n	801d70e <_dtoa_r+0xa5e>
 801d7ac:	d102      	bne.n	801d7b4 <_dtoa_r+0xb04>
 801d7ae:	f018 0f01 	tst.w	r8, #1
 801d7b2:	d1ac      	bne.n	801d70e <_dtoa_r+0xa5e>
 801d7b4:	4633      	mov	r3, r6
 801d7b6:	461e      	mov	r6, r3
 801d7b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d7bc:	2a30      	cmp	r2, #48	@ 0x30
 801d7be:	d0fa      	beq.n	801d7b6 <_dtoa_r+0xb06>
 801d7c0:	e5c2      	b.n	801d348 <_dtoa_r+0x698>
 801d7c2:	459a      	cmp	sl, r3
 801d7c4:	d1a4      	bne.n	801d710 <_dtoa_r+0xa60>
 801d7c6:	9b04      	ldr	r3, [sp, #16]
 801d7c8:	3301      	adds	r3, #1
 801d7ca:	9304      	str	r3, [sp, #16]
 801d7cc:	2331      	movs	r3, #49	@ 0x31
 801d7ce:	f88a 3000 	strb.w	r3, [sl]
 801d7d2:	e5b9      	b.n	801d348 <_dtoa_r+0x698>
 801d7d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d7d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801d834 <_dtoa_r+0xb84>
 801d7da:	b11b      	cbz	r3, 801d7e4 <_dtoa_r+0xb34>
 801d7dc:	f10a 0308 	add.w	r3, sl, #8
 801d7e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d7e2:	6013      	str	r3, [r2, #0]
 801d7e4:	4650      	mov	r0, sl
 801d7e6:	b019      	add	sp, #100	@ 0x64
 801d7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7ee:	2b01      	cmp	r3, #1
 801d7f0:	f77f ae37 	ble.w	801d462 <_dtoa_r+0x7b2>
 801d7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 801d7f8:	2001      	movs	r0, #1
 801d7fa:	e655      	b.n	801d4a8 <_dtoa_r+0x7f8>
 801d7fc:	9b00      	ldr	r3, [sp, #0]
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	f77f aed6 	ble.w	801d5b0 <_dtoa_r+0x900>
 801d804:	4656      	mov	r6, sl
 801d806:	4621      	mov	r1, r4
 801d808:	4648      	mov	r0, r9
 801d80a:	f7ff f9c9 	bl	801cba0 <quorem>
 801d80e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d812:	f806 8b01 	strb.w	r8, [r6], #1
 801d816:	9b00      	ldr	r3, [sp, #0]
 801d818:	eba6 020a 	sub.w	r2, r6, sl
 801d81c:	4293      	cmp	r3, r2
 801d81e:	ddb3      	ble.n	801d788 <_dtoa_r+0xad8>
 801d820:	4649      	mov	r1, r9
 801d822:	2300      	movs	r3, #0
 801d824:	220a      	movs	r2, #10
 801d826:	4658      	mov	r0, fp
 801d828:	f000 fbfe 	bl	801e028 <__multadd>
 801d82c:	4681      	mov	r9, r0
 801d82e:	e7ea      	b.n	801d806 <_dtoa_r+0xb56>
 801d830:	08023504 	.word	0x08023504
 801d834:	0802349f 	.word	0x0802349f

0801d838 <_free_r>:
 801d838:	b538      	push	{r3, r4, r5, lr}
 801d83a:	4605      	mov	r5, r0
 801d83c:	2900      	cmp	r1, #0
 801d83e:	d041      	beq.n	801d8c4 <_free_r+0x8c>
 801d840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d844:	1f0c      	subs	r4, r1, #4
 801d846:	2b00      	cmp	r3, #0
 801d848:	bfb8      	it	lt
 801d84a:	18e4      	addlt	r4, r4, r3
 801d84c:	f7fd f98e 	bl	801ab6c <__malloc_lock>
 801d850:	4a1d      	ldr	r2, [pc, #116]	@ (801d8c8 <_free_r+0x90>)
 801d852:	6813      	ldr	r3, [r2, #0]
 801d854:	b933      	cbnz	r3, 801d864 <_free_r+0x2c>
 801d856:	6063      	str	r3, [r4, #4]
 801d858:	6014      	str	r4, [r2, #0]
 801d85a:	4628      	mov	r0, r5
 801d85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d860:	f7fd b98a 	b.w	801ab78 <__malloc_unlock>
 801d864:	42a3      	cmp	r3, r4
 801d866:	d908      	bls.n	801d87a <_free_r+0x42>
 801d868:	6820      	ldr	r0, [r4, #0]
 801d86a:	1821      	adds	r1, r4, r0
 801d86c:	428b      	cmp	r3, r1
 801d86e:	bf01      	itttt	eq
 801d870:	6819      	ldreq	r1, [r3, #0]
 801d872:	685b      	ldreq	r3, [r3, #4]
 801d874:	1809      	addeq	r1, r1, r0
 801d876:	6021      	streq	r1, [r4, #0]
 801d878:	e7ed      	b.n	801d856 <_free_r+0x1e>
 801d87a:	461a      	mov	r2, r3
 801d87c:	685b      	ldr	r3, [r3, #4]
 801d87e:	b10b      	cbz	r3, 801d884 <_free_r+0x4c>
 801d880:	42a3      	cmp	r3, r4
 801d882:	d9fa      	bls.n	801d87a <_free_r+0x42>
 801d884:	6811      	ldr	r1, [r2, #0]
 801d886:	1850      	adds	r0, r2, r1
 801d888:	42a0      	cmp	r0, r4
 801d88a:	d10b      	bne.n	801d8a4 <_free_r+0x6c>
 801d88c:	6820      	ldr	r0, [r4, #0]
 801d88e:	4401      	add	r1, r0
 801d890:	1850      	adds	r0, r2, r1
 801d892:	4283      	cmp	r3, r0
 801d894:	6011      	str	r1, [r2, #0]
 801d896:	d1e0      	bne.n	801d85a <_free_r+0x22>
 801d898:	6818      	ldr	r0, [r3, #0]
 801d89a:	685b      	ldr	r3, [r3, #4]
 801d89c:	6053      	str	r3, [r2, #4]
 801d89e:	4408      	add	r0, r1
 801d8a0:	6010      	str	r0, [r2, #0]
 801d8a2:	e7da      	b.n	801d85a <_free_r+0x22>
 801d8a4:	d902      	bls.n	801d8ac <_free_r+0x74>
 801d8a6:	230c      	movs	r3, #12
 801d8a8:	602b      	str	r3, [r5, #0]
 801d8aa:	e7d6      	b.n	801d85a <_free_r+0x22>
 801d8ac:	6820      	ldr	r0, [r4, #0]
 801d8ae:	1821      	adds	r1, r4, r0
 801d8b0:	428b      	cmp	r3, r1
 801d8b2:	bf04      	itt	eq
 801d8b4:	6819      	ldreq	r1, [r3, #0]
 801d8b6:	685b      	ldreq	r3, [r3, #4]
 801d8b8:	6063      	str	r3, [r4, #4]
 801d8ba:	bf04      	itt	eq
 801d8bc:	1809      	addeq	r1, r1, r0
 801d8be:	6021      	streq	r1, [r4, #0]
 801d8c0:	6054      	str	r4, [r2, #4]
 801d8c2:	e7ca      	b.n	801d85a <_free_r+0x22>
 801d8c4:	bd38      	pop	{r3, r4, r5, pc}
 801d8c6:	bf00      	nop
 801d8c8:	200030e0 	.word	0x200030e0

0801d8cc <rshift>:
 801d8cc:	6903      	ldr	r3, [r0, #16]
 801d8ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d8d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d8d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d8da:	f100 0414 	add.w	r4, r0, #20
 801d8de:	dd45      	ble.n	801d96c <rshift+0xa0>
 801d8e0:	f011 011f 	ands.w	r1, r1, #31
 801d8e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d8e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d8ec:	d10c      	bne.n	801d908 <rshift+0x3c>
 801d8ee:	f100 0710 	add.w	r7, r0, #16
 801d8f2:	4629      	mov	r1, r5
 801d8f4:	42b1      	cmp	r1, r6
 801d8f6:	d334      	bcc.n	801d962 <rshift+0x96>
 801d8f8:	1a9b      	subs	r3, r3, r2
 801d8fa:	009b      	lsls	r3, r3, #2
 801d8fc:	1eea      	subs	r2, r5, #3
 801d8fe:	4296      	cmp	r6, r2
 801d900:	bf38      	it	cc
 801d902:	2300      	movcc	r3, #0
 801d904:	4423      	add	r3, r4
 801d906:	e015      	b.n	801d934 <rshift+0x68>
 801d908:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d90c:	f1c1 0820 	rsb	r8, r1, #32
 801d910:	40cf      	lsrs	r7, r1
 801d912:	f105 0e04 	add.w	lr, r5, #4
 801d916:	46a1      	mov	r9, r4
 801d918:	4576      	cmp	r6, lr
 801d91a:	46f4      	mov	ip, lr
 801d91c:	d815      	bhi.n	801d94a <rshift+0x7e>
 801d91e:	1a9a      	subs	r2, r3, r2
 801d920:	0092      	lsls	r2, r2, #2
 801d922:	3a04      	subs	r2, #4
 801d924:	3501      	adds	r5, #1
 801d926:	42ae      	cmp	r6, r5
 801d928:	bf38      	it	cc
 801d92a:	2200      	movcc	r2, #0
 801d92c:	18a3      	adds	r3, r4, r2
 801d92e:	50a7      	str	r7, [r4, r2]
 801d930:	b107      	cbz	r7, 801d934 <rshift+0x68>
 801d932:	3304      	adds	r3, #4
 801d934:	1b1a      	subs	r2, r3, r4
 801d936:	42a3      	cmp	r3, r4
 801d938:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d93c:	bf08      	it	eq
 801d93e:	2300      	moveq	r3, #0
 801d940:	6102      	str	r2, [r0, #16]
 801d942:	bf08      	it	eq
 801d944:	6143      	streq	r3, [r0, #20]
 801d946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d94a:	f8dc c000 	ldr.w	ip, [ip]
 801d94e:	fa0c fc08 	lsl.w	ip, ip, r8
 801d952:	ea4c 0707 	orr.w	r7, ip, r7
 801d956:	f849 7b04 	str.w	r7, [r9], #4
 801d95a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d95e:	40cf      	lsrs	r7, r1
 801d960:	e7da      	b.n	801d918 <rshift+0x4c>
 801d962:	f851 cb04 	ldr.w	ip, [r1], #4
 801d966:	f847 cf04 	str.w	ip, [r7, #4]!
 801d96a:	e7c3      	b.n	801d8f4 <rshift+0x28>
 801d96c:	4623      	mov	r3, r4
 801d96e:	e7e1      	b.n	801d934 <rshift+0x68>

0801d970 <__hexdig_fun>:
 801d970:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801d974:	2b09      	cmp	r3, #9
 801d976:	d802      	bhi.n	801d97e <__hexdig_fun+0xe>
 801d978:	3820      	subs	r0, #32
 801d97a:	b2c0      	uxtb	r0, r0
 801d97c:	4770      	bx	lr
 801d97e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801d982:	2b05      	cmp	r3, #5
 801d984:	d801      	bhi.n	801d98a <__hexdig_fun+0x1a>
 801d986:	3847      	subs	r0, #71	@ 0x47
 801d988:	e7f7      	b.n	801d97a <__hexdig_fun+0xa>
 801d98a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801d98e:	2b05      	cmp	r3, #5
 801d990:	d801      	bhi.n	801d996 <__hexdig_fun+0x26>
 801d992:	3827      	subs	r0, #39	@ 0x27
 801d994:	e7f1      	b.n	801d97a <__hexdig_fun+0xa>
 801d996:	2000      	movs	r0, #0
 801d998:	4770      	bx	lr
	...

0801d99c <__gethex>:
 801d99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9a0:	b085      	sub	sp, #20
 801d9a2:	468a      	mov	sl, r1
 801d9a4:	9302      	str	r3, [sp, #8]
 801d9a6:	680b      	ldr	r3, [r1, #0]
 801d9a8:	9001      	str	r0, [sp, #4]
 801d9aa:	4690      	mov	r8, r2
 801d9ac:	1c9c      	adds	r4, r3, #2
 801d9ae:	46a1      	mov	r9, r4
 801d9b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801d9b4:	2830      	cmp	r0, #48	@ 0x30
 801d9b6:	d0fa      	beq.n	801d9ae <__gethex+0x12>
 801d9b8:	eba9 0303 	sub.w	r3, r9, r3
 801d9bc:	f1a3 0b02 	sub.w	fp, r3, #2
 801d9c0:	f7ff ffd6 	bl	801d970 <__hexdig_fun>
 801d9c4:	4605      	mov	r5, r0
 801d9c6:	2800      	cmp	r0, #0
 801d9c8:	d168      	bne.n	801da9c <__gethex+0x100>
 801d9ca:	49a0      	ldr	r1, [pc, #640]	@ (801dc4c <__gethex+0x2b0>)
 801d9cc:	2201      	movs	r2, #1
 801d9ce:	4648      	mov	r0, r9
 801d9d0:	f7fe ff97 	bl	801c902 <strncmp>
 801d9d4:	4607      	mov	r7, r0
 801d9d6:	2800      	cmp	r0, #0
 801d9d8:	d167      	bne.n	801daaa <__gethex+0x10e>
 801d9da:	f899 0001 	ldrb.w	r0, [r9, #1]
 801d9de:	4626      	mov	r6, r4
 801d9e0:	f7ff ffc6 	bl	801d970 <__hexdig_fun>
 801d9e4:	2800      	cmp	r0, #0
 801d9e6:	d062      	beq.n	801daae <__gethex+0x112>
 801d9e8:	4623      	mov	r3, r4
 801d9ea:	7818      	ldrb	r0, [r3, #0]
 801d9ec:	2830      	cmp	r0, #48	@ 0x30
 801d9ee:	4699      	mov	r9, r3
 801d9f0:	f103 0301 	add.w	r3, r3, #1
 801d9f4:	d0f9      	beq.n	801d9ea <__gethex+0x4e>
 801d9f6:	f7ff ffbb 	bl	801d970 <__hexdig_fun>
 801d9fa:	fab0 f580 	clz	r5, r0
 801d9fe:	096d      	lsrs	r5, r5, #5
 801da00:	f04f 0b01 	mov.w	fp, #1
 801da04:	464a      	mov	r2, r9
 801da06:	4616      	mov	r6, r2
 801da08:	3201      	adds	r2, #1
 801da0a:	7830      	ldrb	r0, [r6, #0]
 801da0c:	f7ff ffb0 	bl	801d970 <__hexdig_fun>
 801da10:	2800      	cmp	r0, #0
 801da12:	d1f8      	bne.n	801da06 <__gethex+0x6a>
 801da14:	498d      	ldr	r1, [pc, #564]	@ (801dc4c <__gethex+0x2b0>)
 801da16:	2201      	movs	r2, #1
 801da18:	4630      	mov	r0, r6
 801da1a:	f7fe ff72 	bl	801c902 <strncmp>
 801da1e:	2800      	cmp	r0, #0
 801da20:	d13f      	bne.n	801daa2 <__gethex+0x106>
 801da22:	b944      	cbnz	r4, 801da36 <__gethex+0x9a>
 801da24:	1c74      	adds	r4, r6, #1
 801da26:	4622      	mov	r2, r4
 801da28:	4616      	mov	r6, r2
 801da2a:	3201      	adds	r2, #1
 801da2c:	7830      	ldrb	r0, [r6, #0]
 801da2e:	f7ff ff9f 	bl	801d970 <__hexdig_fun>
 801da32:	2800      	cmp	r0, #0
 801da34:	d1f8      	bne.n	801da28 <__gethex+0x8c>
 801da36:	1ba4      	subs	r4, r4, r6
 801da38:	00a7      	lsls	r7, r4, #2
 801da3a:	7833      	ldrb	r3, [r6, #0]
 801da3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801da40:	2b50      	cmp	r3, #80	@ 0x50
 801da42:	d13e      	bne.n	801dac2 <__gethex+0x126>
 801da44:	7873      	ldrb	r3, [r6, #1]
 801da46:	2b2b      	cmp	r3, #43	@ 0x2b
 801da48:	d033      	beq.n	801dab2 <__gethex+0x116>
 801da4a:	2b2d      	cmp	r3, #45	@ 0x2d
 801da4c:	d034      	beq.n	801dab8 <__gethex+0x11c>
 801da4e:	1c71      	adds	r1, r6, #1
 801da50:	2400      	movs	r4, #0
 801da52:	7808      	ldrb	r0, [r1, #0]
 801da54:	f7ff ff8c 	bl	801d970 <__hexdig_fun>
 801da58:	1e43      	subs	r3, r0, #1
 801da5a:	b2db      	uxtb	r3, r3
 801da5c:	2b18      	cmp	r3, #24
 801da5e:	d830      	bhi.n	801dac2 <__gethex+0x126>
 801da60:	f1a0 0210 	sub.w	r2, r0, #16
 801da64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801da68:	f7ff ff82 	bl	801d970 <__hexdig_fun>
 801da6c:	f100 3cff 	add.w	ip, r0, #4294967295
 801da70:	fa5f fc8c 	uxtb.w	ip, ip
 801da74:	f1bc 0f18 	cmp.w	ip, #24
 801da78:	f04f 030a 	mov.w	r3, #10
 801da7c:	d91e      	bls.n	801dabc <__gethex+0x120>
 801da7e:	b104      	cbz	r4, 801da82 <__gethex+0xe6>
 801da80:	4252      	negs	r2, r2
 801da82:	4417      	add	r7, r2
 801da84:	f8ca 1000 	str.w	r1, [sl]
 801da88:	b1ed      	cbz	r5, 801dac6 <__gethex+0x12a>
 801da8a:	f1bb 0f00 	cmp.w	fp, #0
 801da8e:	bf0c      	ite	eq
 801da90:	2506      	moveq	r5, #6
 801da92:	2500      	movne	r5, #0
 801da94:	4628      	mov	r0, r5
 801da96:	b005      	add	sp, #20
 801da98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da9c:	2500      	movs	r5, #0
 801da9e:	462c      	mov	r4, r5
 801daa0:	e7b0      	b.n	801da04 <__gethex+0x68>
 801daa2:	2c00      	cmp	r4, #0
 801daa4:	d1c7      	bne.n	801da36 <__gethex+0x9a>
 801daa6:	4627      	mov	r7, r4
 801daa8:	e7c7      	b.n	801da3a <__gethex+0x9e>
 801daaa:	464e      	mov	r6, r9
 801daac:	462f      	mov	r7, r5
 801daae:	2501      	movs	r5, #1
 801dab0:	e7c3      	b.n	801da3a <__gethex+0x9e>
 801dab2:	2400      	movs	r4, #0
 801dab4:	1cb1      	adds	r1, r6, #2
 801dab6:	e7cc      	b.n	801da52 <__gethex+0xb6>
 801dab8:	2401      	movs	r4, #1
 801daba:	e7fb      	b.n	801dab4 <__gethex+0x118>
 801dabc:	fb03 0002 	mla	r0, r3, r2, r0
 801dac0:	e7ce      	b.n	801da60 <__gethex+0xc4>
 801dac2:	4631      	mov	r1, r6
 801dac4:	e7de      	b.n	801da84 <__gethex+0xe8>
 801dac6:	eba6 0309 	sub.w	r3, r6, r9
 801daca:	3b01      	subs	r3, #1
 801dacc:	4629      	mov	r1, r5
 801dace:	2b07      	cmp	r3, #7
 801dad0:	dc0a      	bgt.n	801dae8 <__gethex+0x14c>
 801dad2:	9801      	ldr	r0, [sp, #4]
 801dad4:	f000 fa46 	bl	801df64 <_Balloc>
 801dad8:	4604      	mov	r4, r0
 801dada:	b940      	cbnz	r0, 801daee <__gethex+0x152>
 801dadc:	4b5c      	ldr	r3, [pc, #368]	@ (801dc50 <__gethex+0x2b4>)
 801dade:	4602      	mov	r2, r0
 801dae0:	21e4      	movs	r1, #228	@ 0xe4
 801dae2:	485c      	ldr	r0, [pc, #368]	@ (801dc54 <__gethex+0x2b8>)
 801dae4:	f7ff f83e 	bl	801cb64 <__assert_func>
 801dae8:	3101      	adds	r1, #1
 801daea:	105b      	asrs	r3, r3, #1
 801daec:	e7ef      	b.n	801dace <__gethex+0x132>
 801daee:	f100 0a14 	add.w	sl, r0, #20
 801daf2:	2300      	movs	r3, #0
 801daf4:	4655      	mov	r5, sl
 801daf6:	469b      	mov	fp, r3
 801daf8:	45b1      	cmp	r9, r6
 801dafa:	d337      	bcc.n	801db6c <__gethex+0x1d0>
 801dafc:	f845 bb04 	str.w	fp, [r5], #4
 801db00:	eba5 050a 	sub.w	r5, r5, sl
 801db04:	10ad      	asrs	r5, r5, #2
 801db06:	6125      	str	r5, [r4, #16]
 801db08:	4658      	mov	r0, fp
 801db0a:	f000 fb1d 	bl	801e148 <__hi0bits>
 801db0e:	016d      	lsls	r5, r5, #5
 801db10:	f8d8 6000 	ldr.w	r6, [r8]
 801db14:	1a2d      	subs	r5, r5, r0
 801db16:	42b5      	cmp	r5, r6
 801db18:	dd54      	ble.n	801dbc4 <__gethex+0x228>
 801db1a:	1bad      	subs	r5, r5, r6
 801db1c:	4629      	mov	r1, r5
 801db1e:	4620      	mov	r0, r4
 801db20:	f000 feb1 	bl	801e886 <__any_on>
 801db24:	4681      	mov	r9, r0
 801db26:	b178      	cbz	r0, 801db48 <__gethex+0x1ac>
 801db28:	1e6b      	subs	r3, r5, #1
 801db2a:	1159      	asrs	r1, r3, #5
 801db2c:	f003 021f 	and.w	r2, r3, #31
 801db30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801db34:	f04f 0901 	mov.w	r9, #1
 801db38:	fa09 f202 	lsl.w	r2, r9, r2
 801db3c:	420a      	tst	r2, r1
 801db3e:	d003      	beq.n	801db48 <__gethex+0x1ac>
 801db40:	454b      	cmp	r3, r9
 801db42:	dc36      	bgt.n	801dbb2 <__gethex+0x216>
 801db44:	f04f 0902 	mov.w	r9, #2
 801db48:	4629      	mov	r1, r5
 801db4a:	4620      	mov	r0, r4
 801db4c:	f7ff febe 	bl	801d8cc <rshift>
 801db50:	442f      	add	r7, r5
 801db52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801db56:	42bb      	cmp	r3, r7
 801db58:	da42      	bge.n	801dbe0 <__gethex+0x244>
 801db5a:	9801      	ldr	r0, [sp, #4]
 801db5c:	4621      	mov	r1, r4
 801db5e:	f000 fa41 	bl	801dfe4 <_Bfree>
 801db62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db64:	2300      	movs	r3, #0
 801db66:	6013      	str	r3, [r2, #0]
 801db68:	25a3      	movs	r5, #163	@ 0xa3
 801db6a:	e793      	b.n	801da94 <__gethex+0xf8>
 801db6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801db70:	2a2e      	cmp	r2, #46	@ 0x2e
 801db72:	d012      	beq.n	801db9a <__gethex+0x1fe>
 801db74:	2b20      	cmp	r3, #32
 801db76:	d104      	bne.n	801db82 <__gethex+0x1e6>
 801db78:	f845 bb04 	str.w	fp, [r5], #4
 801db7c:	f04f 0b00 	mov.w	fp, #0
 801db80:	465b      	mov	r3, fp
 801db82:	7830      	ldrb	r0, [r6, #0]
 801db84:	9303      	str	r3, [sp, #12]
 801db86:	f7ff fef3 	bl	801d970 <__hexdig_fun>
 801db8a:	9b03      	ldr	r3, [sp, #12]
 801db8c:	f000 000f 	and.w	r0, r0, #15
 801db90:	4098      	lsls	r0, r3
 801db92:	ea4b 0b00 	orr.w	fp, fp, r0
 801db96:	3304      	adds	r3, #4
 801db98:	e7ae      	b.n	801daf8 <__gethex+0x15c>
 801db9a:	45b1      	cmp	r9, r6
 801db9c:	d8ea      	bhi.n	801db74 <__gethex+0x1d8>
 801db9e:	492b      	ldr	r1, [pc, #172]	@ (801dc4c <__gethex+0x2b0>)
 801dba0:	9303      	str	r3, [sp, #12]
 801dba2:	2201      	movs	r2, #1
 801dba4:	4630      	mov	r0, r6
 801dba6:	f7fe feac 	bl	801c902 <strncmp>
 801dbaa:	9b03      	ldr	r3, [sp, #12]
 801dbac:	2800      	cmp	r0, #0
 801dbae:	d1e1      	bne.n	801db74 <__gethex+0x1d8>
 801dbb0:	e7a2      	b.n	801daf8 <__gethex+0x15c>
 801dbb2:	1ea9      	subs	r1, r5, #2
 801dbb4:	4620      	mov	r0, r4
 801dbb6:	f000 fe66 	bl	801e886 <__any_on>
 801dbba:	2800      	cmp	r0, #0
 801dbbc:	d0c2      	beq.n	801db44 <__gethex+0x1a8>
 801dbbe:	f04f 0903 	mov.w	r9, #3
 801dbc2:	e7c1      	b.n	801db48 <__gethex+0x1ac>
 801dbc4:	da09      	bge.n	801dbda <__gethex+0x23e>
 801dbc6:	1b75      	subs	r5, r6, r5
 801dbc8:	4621      	mov	r1, r4
 801dbca:	9801      	ldr	r0, [sp, #4]
 801dbcc:	462a      	mov	r2, r5
 801dbce:	f000 fc21 	bl	801e414 <__lshift>
 801dbd2:	1b7f      	subs	r7, r7, r5
 801dbd4:	4604      	mov	r4, r0
 801dbd6:	f100 0a14 	add.w	sl, r0, #20
 801dbda:	f04f 0900 	mov.w	r9, #0
 801dbde:	e7b8      	b.n	801db52 <__gethex+0x1b6>
 801dbe0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801dbe4:	42bd      	cmp	r5, r7
 801dbe6:	dd6f      	ble.n	801dcc8 <__gethex+0x32c>
 801dbe8:	1bed      	subs	r5, r5, r7
 801dbea:	42ae      	cmp	r6, r5
 801dbec:	dc34      	bgt.n	801dc58 <__gethex+0x2bc>
 801dbee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dbf2:	2b02      	cmp	r3, #2
 801dbf4:	d022      	beq.n	801dc3c <__gethex+0x2a0>
 801dbf6:	2b03      	cmp	r3, #3
 801dbf8:	d024      	beq.n	801dc44 <__gethex+0x2a8>
 801dbfa:	2b01      	cmp	r3, #1
 801dbfc:	d115      	bne.n	801dc2a <__gethex+0x28e>
 801dbfe:	42ae      	cmp	r6, r5
 801dc00:	d113      	bne.n	801dc2a <__gethex+0x28e>
 801dc02:	2e01      	cmp	r6, #1
 801dc04:	d10b      	bne.n	801dc1e <__gethex+0x282>
 801dc06:	9a02      	ldr	r2, [sp, #8]
 801dc08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dc0c:	6013      	str	r3, [r2, #0]
 801dc0e:	2301      	movs	r3, #1
 801dc10:	6123      	str	r3, [r4, #16]
 801dc12:	f8ca 3000 	str.w	r3, [sl]
 801dc16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc18:	2562      	movs	r5, #98	@ 0x62
 801dc1a:	601c      	str	r4, [r3, #0]
 801dc1c:	e73a      	b.n	801da94 <__gethex+0xf8>
 801dc1e:	1e71      	subs	r1, r6, #1
 801dc20:	4620      	mov	r0, r4
 801dc22:	f000 fe30 	bl	801e886 <__any_on>
 801dc26:	2800      	cmp	r0, #0
 801dc28:	d1ed      	bne.n	801dc06 <__gethex+0x26a>
 801dc2a:	9801      	ldr	r0, [sp, #4]
 801dc2c:	4621      	mov	r1, r4
 801dc2e:	f000 f9d9 	bl	801dfe4 <_Bfree>
 801dc32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc34:	2300      	movs	r3, #0
 801dc36:	6013      	str	r3, [r2, #0]
 801dc38:	2550      	movs	r5, #80	@ 0x50
 801dc3a:	e72b      	b.n	801da94 <__gethex+0xf8>
 801dc3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d1f3      	bne.n	801dc2a <__gethex+0x28e>
 801dc42:	e7e0      	b.n	801dc06 <__gethex+0x26a>
 801dc44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d1dd      	bne.n	801dc06 <__gethex+0x26a>
 801dc4a:	e7ee      	b.n	801dc2a <__gethex+0x28e>
 801dc4c:	08023258 	.word	0x08023258
 801dc50:	08023504 	.word	0x08023504
 801dc54:	08023515 	.word	0x08023515
 801dc58:	1e6f      	subs	r7, r5, #1
 801dc5a:	f1b9 0f00 	cmp.w	r9, #0
 801dc5e:	d130      	bne.n	801dcc2 <__gethex+0x326>
 801dc60:	b127      	cbz	r7, 801dc6c <__gethex+0x2d0>
 801dc62:	4639      	mov	r1, r7
 801dc64:	4620      	mov	r0, r4
 801dc66:	f000 fe0e 	bl	801e886 <__any_on>
 801dc6a:	4681      	mov	r9, r0
 801dc6c:	117a      	asrs	r2, r7, #5
 801dc6e:	2301      	movs	r3, #1
 801dc70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801dc74:	f007 071f 	and.w	r7, r7, #31
 801dc78:	40bb      	lsls	r3, r7
 801dc7a:	4213      	tst	r3, r2
 801dc7c:	4629      	mov	r1, r5
 801dc7e:	4620      	mov	r0, r4
 801dc80:	bf18      	it	ne
 801dc82:	f049 0902 	orrne.w	r9, r9, #2
 801dc86:	f7ff fe21 	bl	801d8cc <rshift>
 801dc8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801dc8e:	1b76      	subs	r6, r6, r5
 801dc90:	2502      	movs	r5, #2
 801dc92:	f1b9 0f00 	cmp.w	r9, #0
 801dc96:	d047      	beq.n	801dd28 <__gethex+0x38c>
 801dc98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dc9c:	2b02      	cmp	r3, #2
 801dc9e:	d015      	beq.n	801dccc <__gethex+0x330>
 801dca0:	2b03      	cmp	r3, #3
 801dca2:	d017      	beq.n	801dcd4 <__gethex+0x338>
 801dca4:	2b01      	cmp	r3, #1
 801dca6:	d109      	bne.n	801dcbc <__gethex+0x320>
 801dca8:	f019 0f02 	tst.w	r9, #2
 801dcac:	d006      	beq.n	801dcbc <__gethex+0x320>
 801dcae:	f8da 3000 	ldr.w	r3, [sl]
 801dcb2:	ea49 0903 	orr.w	r9, r9, r3
 801dcb6:	f019 0f01 	tst.w	r9, #1
 801dcba:	d10e      	bne.n	801dcda <__gethex+0x33e>
 801dcbc:	f045 0510 	orr.w	r5, r5, #16
 801dcc0:	e032      	b.n	801dd28 <__gethex+0x38c>
 801dcc2:	f04f 0901 	mov.w	r9, #1
 801dcc6:	e7d1      	b.n	801dc6c <__gethex+0x2d0>
 801dcc8:	2501      	movs	r5, #1
 801dcca:	e7e2      	b.n	801dc92 <__gethex+0x2f6>
 801dccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcce:	f1c3 0301 	rsb	r3, r3, #1
 801dcd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dcd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d0f0      	beq.n	801dcbc <__gethex+0x320>
 801dcda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801dcde:	f104 0314 	add.w	r3, r4, #20
 801dce2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801dce6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801dcea:	f04f 0c00 	mov.w	ip, #0
 801dcee:	4618      	mov	r0, r3
 801dcf0:	f853 2b04 	ldr.w	r2, [r3], #4
 801dcf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 801dcf8:	d01b      	beq.n	801dd32 <__gethex+0x396>
 801dcfa:	3201      	adds	r2, #1
 801dcfc:	6002      	str	r2, [r0, #0]
 801dcfe:	2d02      	cmp	r5, #2
 801dd00:	f104 0314 	add.w	r3, r4, #20
 801dd04:	d13c      	bne.n	801dd80 <__gethex+0x3e4>
 801dd06:	f8d8 2000 	ldr.w	r2, [r8]
 801dd0a:	3a01      	subs	r2, #1
 801dd0c:	42b2      	cmp	r2, r6
 801dd0e:	d109      	bne.n	801dd24 <__gethex+0x388>
 801dd10:	1171      	asrs	r1, r6, #5
 801dd12:	2201      	movs	r2, #1
 801dd14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801dd18:	f006 061f 	and.w	r6, r6, #31
 801dd1c:	fa02 f606 	lsl.w	r6, r2, r6
 801dd20:	421e      	tst	r6, r3
 801dd22:	d13a      	bne.n	801dd9a <__gethex+0x3fe>
 801dd24:	f045 0520 	orr.w	r5, r5, #32
 801dd28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd2a:	601c      	str	r4, [r3, #0]
 801dd2c:	9b02      	ldr	r3, [sp, #8]
 801dd2e:	601f      	str	r7, [r3, #0]
 801dd30:	e6b0      	b.n	801da94 <__gethex+0xf8>
 801dd32:	4299      	cmp	r1, r3
 801dd34:	f843 cc04 	str.w	ip, [r3, #-4]
 801dd38:	d8d9      	bhi.n	801dcee <__gethex+0x352>
 801dd3a:	68a3      	ldr	r3, [r4, #8]
 801dd3c:	459b      	cmp	fp, r3
 801dd3e:	db17      	blt.n	801dd70 <__gethex+0x3d4>
 801dd40:	6861      	ldr	r1, [r4, #4]
 801dd42:	9801      	ldr	r0, [sp, #4]
 801dd44:	3101      	adds	r1, #1
 801dd46:	f000 f90d 	bl	801df64 <_Balloc>
 801dd4a:	4681      	mov	r9, r0
 801dd4c:	b918      	cbnz	r0, 801dd56 <__gethex+0x3ba>
 801dd4e:	4b1a      	ldr	r3, [pc, #104]	@ (801ddb8 <__gethex+0x41c>)
 801dd50:	4602      	mov	r2, r0
 801dd52:	2184      	movs	r1, #132	@ 0x84
 801dd54:	e6c5      	b.n	801dae2 <__gethex+0x146>
 801dd56:	6922      	ldr	r2, [r4, #16]
 801dd58:	3202      	adds	r2, #2
 801dd5a:	f104 010c 	add.w	r1, r4, #12
 801dd5e:	0092      	lsls	r2, r2, #2
 801dd60:	300c      	adds	r0, #12
 801dd62:	f7fe fee2 	bl	801cb2a <memcpy>
 801dd66:	4621      	mov	r1, r4
 801dd68:	9801      	ldr	r0, [sp, #4]
 801dd6a:	f000 f93b 	bl	801dfe4 <_Bfree>
 801dd6e:	464c      	mov	r4, r9
 801dd70:	6923      	ldr	r3, [r4, #16]
 801dd72:	1c5a      	adds	r2, r3, #1
 801dd74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801dd78:	6122      	str	r2, [r4, #16]
 801dd7a:	2201      	movs	r2, #1
 801dd7c:	615a      	str	r2, [r3, #20]
 801dd7e:	e7be      	b.n	801dcfe <__gethex+0x362>
 801dd80:	6922      	ldr	r2, [r4, #16]
 801dd82:	455a      	cmp	r2, fp
 801dd84:	dd0b      	ble.n	801dd9e <__gethex+0x402>
 801dd86:	2101      	movs	r1, #1
 801dd88:	4620      	mov	r0, r4
 801dd8a:	f7ff fd9f 	bl	801d8cc <rshift>
 801dd8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dd92:	3701      	adds	r7, #1
 801dd94:	42bb      	cmp	r3, r7
 801dd96:	f6ff aee0 	blt.w	801db5a <__gethex+0x1be>
 801dd9a:	2501      	movs	r5, #1
 801dd9c:	e7c2      	b.n	801dd24 <__gethex+0x388>
 801dd9e:	f016 061f 	ands.w	r6, r6, #31
 801dda2:	d0fa      	beq.n	801dd9a <__gethex+0x3fe>
 801dda4:	4453      	add	r3, sl
 801dda6:	f1c6 0620 	rsb	r6, r6, #32
 801ddaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ddae:	f000 f9cb 	bl	801e148 <__hi0bits>
 801ddb2:	42b0      	cmp	r0, r6
 801ddb4:	dbe7      	blt.n	801dd86 <__gethex+0x3ea>
 801ddb6:	e7f0      	b.n	801dd9a <__gethex+0x3fe>
 801ddb8:	08023504 	.word	0x08023504

0801ddbc <L_shift>:
 801ddbc:	f1c2 0208 	rsb	r2, r2, #8
 801ddc0:	0092      	lsls	r2, r2, #2
 801ddc2:	b570      	push	{r4, r5, r6, lr}
 801ddc4:	f1c2 0620 	rsb	r6, r2, #32
 801ddc8:	6843      	ldr	r3, [r0, #4]
 801ddca:	6804      	ldr	r4, [r0, #0]
 801ddcc:	fa03 f506 	lsl.w	r5, r3, r6
 801ddd0:	432c      	orrs	r4, r5
 801ddd2:	40d3      	lsrs	r3, r2
 801ddd4:	6004      	str	r4, [r0, #0]
 801ddd6:	f840 3f04 	str.w	r3, [r0, #4]!
 801ddda:	4288      	cmp	r0, r1
 801dddc:	d3f4      	bcc.n	801ddc8 <L_shift+0xc>
 801ddde:	bd70      	pop	{r4, r5, r6, pc}

0801dde0 <__match>:
 801dde0:	b530      	push	{r4, r5, lr}
 801dde2:	6803      	ldr	r3, [r0, #0]
 801dde4:	3301      	adds	r3, #1
 801dde6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ddea:	b914      	cbnz	r4, 801ddf2 <__match+0x12>
 801ddec:	6003      	str	r3, [r0, #0]
 801ddee:	2001      	movs	r0, #1
 801ddf0:	bd30      	pop	{r4, r5, pc}
 801ddf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ddf6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801ddfa:	2d19      	cmp	r5, #25
 801ddfc:	bf98      	it	ls
 801ddfe:	3220      	addls	r2, #32
 801de00:	42a2      	cmp	r2, r4
 801de02:	d0f0      	beq.n	801dde6 <__match+0x6>
 801de04:	2000      	movs	r0, #0
 801de06:	e7f3      	b.n	801ddf0 <__match+0x10>

0801de08 <__hexnan>:
 801de08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de0c:	680b      	ldr	r3, [r1, #0]
 801de0e:	6801      	ldr	r1, [r0, #0]
 801de10:	115e      	asrs	r6, r3, #5
 801de12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801de16:	f013 031f 	ands.w	r3, r3, #31
 801de1a:	b087      	sub	sp, #28
 801de1c:	bf18      	it	ne
 801de1e:	3604      	addne	r6, #4
 801de20:	2500      	movs	r5, #0
 801de22:	1f37      	subs	r7, r6, #4
 801de24:	4682      	mov	sl, r0
 801de26:	4690      	mov	r8, r2
 801de28:	9301      	str	r3, [sp, #4]
 801de2a:	f846 5c04 	str.w	r5, [r6, #-4]
 801de2e:	46b9      	mov	r9, r7
 801de30:	463c      	mov	r4, r7
 801de32:	9502      	str	r5, [sp, #8]
 801de34:	46ab      	mov	fp, r5
 801de36:	784a      	ldrb	r2, [r1, #1]
 801de38:	1c4b      	adds	r3, r1, #1
 801de3a:	9303      	str	r3, [sp, #12]
 801de3c:	b342      	cbz	r2, 801de90 <__hexnan+0x88>
 801de3e:	4610      	mov	r0, r2
 801de40:	9105      	str	r1, [sp, #20]
 801de42:	9204      	str	r2, [sp, #16]
 801de44:	f7ff fd94 	bl	801d970 <__hexdig_fun>
 801de48:	2800      	cmp	r0, #0
 801de4a:	d151      	bne.n	801def0 <__hexnan+0xe8>
 801de4c:	9a04      	ldr	r2, [sp, #16]
 801de4e:	9905      	ldr	r1, [sp, #20]
 801de50:	2a20      	cmp	r2, #32
 801de52:	d818      	bhi.n	801de86 <__hexnan+0x7e>
 801de54:	9b02      	ldr	r3, [sp, #8]
 801de56:	459b      	cmp	fp, r3
 801de58:	dd13      	ble.n	801de82 <__hexnan+0x7a>
 801de5a:	454c      	cmp	r4, r9
 801de5c:	d206      	bcs.n	801de6c <__hexnan+0x64>
 801de5e:	2d07      	cmp	r5, #7
 801de60:	dc04      	bgt.n	801de6c <__hexnan+0x64>
 801de62:	462a      	mov	r2, r5
 801de64:	4649      	mov	r1, r9
 801de66:	4620      	mov	r0, r4
 801de68:	f7ff ffa8 	bl	801ddbc <L_shift>
 801de6c:	4544      	cmp	r4, r8
 801de6e:	d952      	bls.n	801df16 <__hexnan+0x10e>
 801de70:	2300      	movs	r3, #0
 801de72:	f1a4 0904 	sub.w	r9, r4, #4
 801de76:	f844 3c04 	str.w	r3, [r4, #-4]
 801de7a:	f8cd b008 	str.w	fp, [sp, #8]
 801de7e:	464c      	mov	r4, r9
 801de80:	461d      	mov	r5, r3
 801de82:	9903      	ldr	r1, [sp, #12]
 801de84:	e7d7      	b.n	801de36 <__hexnan+0x2e>
 801de86:	2a29      	cmp	r2, #41	@ 0x29
 801de88:	d157      	bne.n	801df3a <__hexnan+0x132>
 801de8a:	3102      	adds	r1, #2
 801de8c:	f8ca 1000 	str.w	r1, [sl]
 801de90:	f1bb 0f00 	cmp.w	fp, #0
 801de94:	d051      	beq.n	801df3a <__hexnan+0x132>
 801de96:	454c      	cmp	r4, r9
 801de98:	d206      	bcs.n	801dea8 <__hexnan+0xa0>
 801de9a:	2d07      	cmp	r5, #7
 801de9c:	dc04      	bgt.n	801dea8 <__hexnan+0xa0>
 801de9e:	462a      	mov	r2, r5
 801dea0:	4649      	mov	r1, r9
 801dea2:	4620      	mov	r0, r4
 801dea4:	f7ff ff8a 	bl	801ddbc <L_shift>
 801dea8:	4544      	cmp	r4, r8
 801deaa:	d936      	bls.n	801df1a <__hexnan+0x112>
 801deac:	f1a8 0204 	sub.w	r2, r8, #4
 801deb0:	4623      	mov	r3, r4
 801deb2:	f853 1b04 	ldr.w	r1, [r3], #4
 801deb6:	f842 1f04 	str.w	r1, [r2, #4]!
 801deba:	429f      	cmp	r7, r3
 801debc:	d2f9      	bcs.n	801deb2 <__hexnan+0xaa>
 801debe:	1b3b      	subs	r3, r7, r4
 801dec0:	f023 0303 	bic.w	r3, r3, #3
 801dec4:	3304      	adds	r3, #4
 801dec6:	3401      	adds	r4, #1
 801dec8:	3e03      	subs	r6, #3
 801deca:	42b4      	cmp	r4, r6
 801decc:	bf88      	it	hi
 801dece:	2304      	movhi	r3, #4
 801ded0:	4443      	add	r3, r8
 801ded2:	2200      	movs	r2, #0
 801ded4:	f843 2b04 	str.w	r2, [r3], #4
 801ded8:	429f      	cmp	r7, r3
 801deda:	d2fb      	bcs.n	801ded4 <__hexnan+0xcc>
 801dedc:	683b      	ldr	r3, [r7, #0]
 801dede:	b91b      	cbnz	r3, 801dee8 <__hexnan+0xe0>
 801dee0:	4547      	cmp	r7, r8
 801dee2:	d128      	bne.n	801df36 <__hexnan+0x12e>
 801dee4:	2301      	movs	r3, #1
 801dee6:	603b      	str	r3, [r7, #0]
 801dee8:	2005      	movs	r0, #5
 801deea:	b007      	add	sp, #28
 801deec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801def0:	3501      	adds	r5, #1
 801def2:	2d08      	cmp	r5, #8
 801def4:	f10b 0b01 	add.w	fp, fp, #1
 801def8:	dd06      	ble.n	801df08 <__hexnan+0x100>
 801defa:	4544      	cmp	r4, r8
 801defc:	d9c1      	bls.n	801de82 <__hexnan+0x7a>
 801defe:	2300      	movs	r3, #0
 801df00:	f844 3c04 	str.w	r3, [r4, #-4]
 801df04:	2501      	movs	r5, #1
 801df06:	3c04      	subs	r4, #4
 801df08:	6822      	ldr	r2, [r4, #0]
 801df0a:	f000 000f 	and.w	r0, r0, #15
 801df0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801df12:	6020      	str	r0, [r4, #0]
 801df14:	e7b5      	b.n	801de82 <__hexnan+0x7a>
 801df16:	2508      	movs	r5, #8
 801df18:	e7b3      	b.n	801de82 <__hexnan+0x7a>
 801df1a:	9b01      	ldr	r3, [sp, #4]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d0dd      	beq.n	801dedc <__hexnan+0xd4>
 801df20:	f1c3 0320 	rsb	r3, r3, #32
 801df24:	f04f 32ff 	mov.w	r2, #4294967295
 801df28:	40da      	lsrs	r2, r3
 801df2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801df2e:	4013      	ands	r3, r2
 801df30:	f846 3c04 	str.w	r3, [r6, #-4]
 801df34:	e7d2      	b.n	801dedc <__hexnan+0xd4>
 801df36:	3f04      	subs	r7, #4
 801df38:	e7d0      	b.n	801dedc <__hexnan+0xd4>
 801df3a:	2004      	movs	r0, #4
 801df3c:	e7d5      	b.n	801deea <__hexnan+0xe2>

0801df3e <__ascii_mbtowc>:
 801df3e:	b082      	sub	sp, #8
 801df40:	b901      	cbnz	r1, 801df44 <__ascii_mbtowc+0x6>
 801df42:	a901      	add	r1, sp, #4
 801df44:	b142      	cbz	r2, 801df58 <__ascii_mbtowc+0x1a>
 801df46:	b14b      	cbz	r3, 801df5c <__ascii_mbtowc+0x1e>
 801df48:	7813      	ldrb	r3, [r2, #0]
 801df4a:	600b      	str	r3, [r1, #0]
 801df4c:	7812      	ldrb	r2, [r2, #0]
 801df4e:	1e10      	subs	r0, r2, #0
 801df50:	bf18      	it	ne
 801df52:	2001      	movne	r0, #1
 801df54:	b002      	add	sp, #8
 801df56:	4770      	bx	lr
 801df58:	4610      	mov	r0, r2
 801df5a:	e7fb      	b.n	801df54 <__ascii_mbtowc+0x16>
 801df5c:	f06f 0001 	mvn.w	r0, #1
 801df60:	e7f8      	b.n	801df54 <__ascii_mbtowc+0x16>
	...

0801df64 <_Balloc>:
 801df64:	b570      	push	{r4, r5, r6, lr}
 801df66:	69c6      	ldr	r6, [r0, #28]
 801df68:	4604      	mov	r4, r0
 801df6a:	460d      	mov	r5, r1
 801df6c:	b976      	cbnz	r6, 801df8c <_Balloc+0x28>
 801df6e:	2010      	movs	r0, #16
 801df70:	f7fc fd4a 	bl	801aa08 <malloc>
 801df74:	4602      	mov	r2, r0
 801df76:	61e0      	str	r0, [r4, #28]
 801df78:	b920      	cbnz	r0, 801df84 <_Balloc+0x20>
 801df7a:	4b18      	ldr	r3, [pc, #96]	@ (801dfdc <_Balloc+0x78>)
 801df7c:	4818      	ldr	r0, [pc, #96]	@ (801dfe0 <_Balloc+0x7c>)
 801df7e:	216b      	movs	r1, #107	@ 0x6b
 801df80:	f7fe fdf0 	bl	801cb64 <__assert_func>
 801df84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801df88:	6006      	str	r6, [r0, #0]
 801df8a:	60c6      	str	r6, [r0, #12]
 801df8c:	69e6      	ldr	r6, [r4, #28]
 801df8e:	68f3      	ldr	r3, [r6, #12]
 801df90:	b183      	cbz	r3, 801dfb4 <_Balloc+0x50>
 801df92:	69e3      	ldr	r3, [r4, #28]
 801df94:	68db      	ldr	r3, [r3, #12]
 801df96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801df9a:	b9b8      	cbnz	r0, 801dfcc <_Balloc+0x68>
 801df9c:	2101      	movs	r1, #1
 801df9e:	fa01 f605 	lsl.w	r6, r1, r5
 801dfa2:	1d72      	adds	r2, r6, #5
 801dfa4:	0092      	lsls	r2, r2, #2
 801dfa6:	4620      	mov	r0, r4
 801dfa8:	f001 f8a7 	bl	801f0fa <_calloc_r>
 801dfac:	b160      	cbz	r0, 801dfc8 <_Balloc+0x64>
 801dfae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801dfb2:	e00e      	b.n	801dfd2 <_Balloc+0x6e>
 801dfb4:	2221      	movs	r2, #33	@ 0x21
 801dfb6:	2104      	movs	r1, #4
 801dfb8:	4620      	mov	r0, r4
 801dfba:	f001 f89e 	bl	801f0fa <_calloc_r>
 801dfbe:	69e3      	ldr	r3, [r4, #28]
 801dfc0:	60f0      	str	r0, [r6, #12]
 801dfc2:	68db      	ldr	r3, [r3, #12]
 801dfc4:	2b00      	cmp	r3, #0
 801dfc6:	d1e4      	bne.n	801df92 <_Balloc+0x2e>
 801dfc8:	2000      	movs	r0, #0
 801dfca:	bd70      	pop	{r4, r5, r6, pc}
 801dfcc:	6802      	ldr	r2, [r0, #0]
 801dfce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dfd2:	2300      	movs	r3, #0
 801dfd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801dfd8:	e7f7      	b.n	801dfca <_Balloc+0x66>
 801dfda:	bf00      	nop
 801dfdc:	080233ea 	.word	0x080233ea
 801dfe0:	08023575 	.word	0x08023575

0801dfe4 <_Bfree>:
 801dfe4:	b570      	push	{r4, r5, r6, lr}
 801dfe6:	69c6      	ldr	r6, [r0, #28]
 801dfe8:	4605      	mov	r5, r0
 801dfea:	460c      	mov	r4, r1
 801dfec:	b976      	cbnz	r6, 801e00c <_Bfree+0x28>
 801dfee:	2010      	movs	r0, #16
 801dff0:	f7fc fd0a 	bl	801aa08 <malloc>
 801dff4:	4602      	mov	r2, r0
 801dff6:	61e8      	str	r0, [r5, #28]
 801dff8:	b920      	cbnz	r0, 801e004 <_Bfree+0x20>
 801dffa:	4b09      	ldr	r3, [pc, #36]	@ (801e020 <_Bfree+0x3c>)
 801dffc:	4809      	ldr	r0, [pc, #36]	@ (801e024 <_Bfree+0x40>)
 801dffe:	218f      	movs	r1, #143	@ 0x8f
 801e000:	f7fe fdb0 	bl	801cb64 <__assert_func>
 801e004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e008:	6006      	str	r6, [r0, #0]
 801e00a:	60c6      	str	r6, [r0, #12]
 801e00c:	b13c      	cbz	r4, 801e01e <_Bfree+0x3a>
 801e00e:	69eb      	ldr	r3, [r5, #28]
 801e010:	6862      	ldr	r2, [r4, #4]
 801e012:	68db      	ldr	r3, [r3, #12]
 801e014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e018:	6021      	str	r1, [r4, #0]
 801e01a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e01e:	bd70      	pop	{r4, r5, r6, pc}
 801e020:	080233ea 	.word	0x080233ea
 801e024:	08023575 	.word	0x08023575

0801e028 <__multadd>:
 801e028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e02c:	690d      	ldr	r5, [r1, #16]
 801e02e:	4607      	mov	r7, r0
 801e030:	460c      	mov	r4, r1
 801e032:	461e      	mov	r6, r3
 801e034:	f101 0c14 	add.w	ip, r1, #20
 801e038:	2000      	movs	r0, #0
 801e03a:	f8dc 3000 	ldr.w	r3, [ip]
 801e03e:	b299      	uxth	r1, r3
 801e040:	fb02 6101 	mla	r1, r2, r1, r6
 801e044:	0c1e      	lsrs	r6, r3, #16
 801e046:	0c0b      	lsrs	r3, r1, #16
 801e048:	fb02 3306 	mla	r3, r2, r6, r3
 801e04c:	b289      	uxth	r1, r1
 801e04e:	3001      	adds	r0, #1
 801e050:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e054:	4285      	cmp	r5, r0
 801e056:	f84c 1b04 	str.w	r1, [ip], #4
 801e05a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e05e:	dcec      	bgt.n	801e03a <__multadd+0x12>
 801e060:	b30e      	cbz	r6, 801e0a6 <__multadd+0x7e>
 801e062:	68a3      	ldr	r3, [r4, #8]
 801e064:	42ab      	cmp	r3, r5
 801e066:	dc19      	bgt.n	801e09c <__multadd+0x74>
 801e068:	6861      	ldr	r1, [r4, #4]
 801e06a:	4638      	mov	r0, r7
 801e06c:	3101      	adds	r1, #1
 801e06e:	f7ff ff79 	bl	801df64 <_Balloc>
 801e072:	4680      	mov	r8, r0
 801e074:	b928      	cbnz	r0, 801e082 <__multadd+0x5a>
 801e076:	4602      	mov	r2, r0
 801e078:	4b0c      	ldr	r3, [pc, #48]	@ (801e0ac <__multadd+0x84>)
 801e07a:	480d      	ldr	r0, [pc, #52]	@ (801e0b0 <__multadd+0x88>)
 801e07c:	21ba      	movs	r1, #186	@ 0xba
 801e07e:	f7fe fd71 	bl	801cb64 <__assert_func>
 801e082:	6922      	ldr	r2, [r4, #16]
 801e084:	3202      	adds	r2, #2
 801e086:	f104 010c 	add.w	r1, r4, #12
 801e08a:	0092      	lsls	r2, r2, #2
 801e08c:	300c      	adds	r0, #12
 801e08e:	f7fe fd4c 	bl	801cb2a <memcpy>
 801e092:	4621      	mov	r1, r4
 801e094:	4638      	mov	r0, r7
 801e096:	f7ff ffa5 	bl	801dfe4 <_Bfree>
 801e09a:	4644      	mov	r4, r8
 801e09c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e0a0:	3501      	adds	r5, #1
 801e0a2:	615e      	str	r6, [r3, #20]
 801e0a4:	6125      	str	r5, [r4, #16]
 801e0a6:	4620      	mov	r0, r4
 801e0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0ac:	08023504 	.word	0x08023504
 801e0b0:	08023575 	.word	0x08023575

0801e0b4 <__s2b>:
 801e0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e0b8:	460c      	mov	r4, r1
 801e0ba:	4615      	mov	r5, r2
 801e0bc:	461f      	mov	r7, r3
 801e0be:	2209      	movs	r2, #9
 801e0c0:	3308      	adds	r3, #8
 801e0c2:	4606      	mov	r6, r0
 801e0c4:	fb93 f3f2 	sdiv	r3, r3, r2
 801e0c8:	2100      	movs	r1, #0
 801e0ca:	2201      	movs	r2, #1
 801e0cc:	429a      	cmp	r2, r3
 801e0ce:	db09      	blt.n	801e0e4 <__s2b+0x30>
 801e0d0:	4630      	mov	r0, r6
 801e0d2:	f7ff ff47 	bl	801df64 <_Balloc>
 801e0d6:	b940      	cbnz	r0, 801e0ea <__s2b+0x36>
 801e0d8:	4602      	mov	r2, r0
 801e0da:	4b19      	ldr	r3, [pc, #100]	@ (801e140 <__s2b+0x8c>)
 801e0dc:	4819      	ldr	r0, [pc, #100]	@ (801e144 <__s2b+0x90>)
 801e0de:	21d3      	movs	r1, #211	@ 0xd3
 801e0e0:	f7fe fd40 	bl	801cb64 <__assert_func>
 801e0e4:	0052      	lsls	r2, r2, #1
 801e0e6:	3101      	adds	r1, #1
 801e0e8:	e7f0      	b.n	801e0cc <__s2b+0x18>
 801e0ea:	9b08      	ldr	r3, [sp, #32]
 801e0ec:	6143      	str	r3, [r0, #20]
 801e0ee:	2d09      	cmp	r5, #9
 801e0f0:	f04f 0301 	mov.w	r3, #1
 801e0f4:	6103      	str	r3, [r0, #16]
 801e0f6:	dd16      	ble.n	801e126 <__s2b+0x72>
 801e0f8:	f104 0909 	add.w	r9, r4, #9
 801e0fc:	46c8      	mov	r8, r9
 801e0fe:	442c      	add	r4, r5
 801e100:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e104:	4601      	mov	r1, r0
 801e106:	3b30      	subs	r3, #48	@ 0x30
 801e108:	220a      	movs	r2, #10
 801e10a:	4630      	mov	r0, r6
 801e10c:	f7ff ff8c 	bl	801e028 <__multadd>
 801e110:	45a0      	cmp	r8, r4
 801e112:	d1f5      	bne.n	801e100 <__s2b+0x4c>
 801e114:	f1a5 0408 	sub.w	r4, r5, #8
 801e118:	444c      	add	r4, r9
 801e11a:	1b2d      	subs	r5, r5, r4
 801e11c:	1963      	adds	r3, r4, r5
 801e11e:	42bb      	cmp	r3, r7
 801e120:	db04      	blt.n	801e12c <__s2b+0x78>
 801e122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e126:	340a      	adds	r4, #10
 801e128:	2509      	movs	r5, #9
 801e12a:	e7f6      	b.n	801e11a <__s2b+0x66>
 801e12c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e130:	4601      	mov	r1, r0
 801e132:	3b30      	subs	r3, #48	@ 0x30
 801e134:	220a      	movs	r2, #10
 801e136:	4630      	mov	r0, r6
 801e138:	f7ff ff76 	bl	801e028 <__multadd>
 801e13c:	e7ee      	b.n	801e11c <__s2b+0x68>
 801e13e:	bf00      	nop
 801e140:	08023504 	.word	0x08023504
 801e144:	08023575 	.word	0x08023575

0801e148 <__hi0bits>:
 801e148:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e14c:	4603      	mov	r3, r0
 801e14e:	bf36      	itet	cc
 801e150:	0403      	lslcc	r3, r0, #16
 801e152:	2000      	movcs	r0, #0
 801e154:	2010      	movcc	r0, #16
 801e156:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e15a:	bf3c      	itt	cc
 801e15c:	021b      	lslcc	r3, r3, #8
 801e15e:	3008      	addcc	r0, #8
 801e160:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e164:	bf3c      	itt	cc
 801e166:	011b      	lslcc	r3, r3, #4
 801e168:	3004      	addcc	r0, #4
 801e16a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e16e:	bf3c      	itt	cc
 801e170:	009b      	lslcc	r3, r3, #2
 801e172:	3002      	addcc	r0, #2
 801e174:	2b00      	cmp	r3, #0
 801e176:	db05      	blt.n	801e184 <__hi0bits+0x3c>
 801e178:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e17c:	f100 0001 	add.w	r0, r0, #1
 801e180:	bf08      	it	eq
 801e182:	2020      	moveq	r0, #32
 801e184:	4770      	bx	lr

0801e186 <__lo0bits>:
 801e186:	6803      	ldr	r3, [r0, #0]
 801e188:	4602      	mov	r2, r0
 801e18a:	f013 0007 	ands.w	r0, r3, #7
 801e18e:	d00b      	beq.n	801e1a8 <__lo0bits+0x22>
 801e190:	07d9      	lsls	r1, r3, #31
 801e192:	d421      	bmi.n	801e1d8 <__lo0bits+0x52>
 801e194:	0798      	lsls	r0, r3, #30
 801e196:	bf49      	itett	mi
 801e198:	085b      	lsrmi	r3, r3, #1
 801e19a:	089b      	lsrpl	r3, r3, #2
 801e19c:	2001      	movmi	r0, #1
 801e19e:	6013      	strmi	r3, [r2, #0]
 801e1a0:	bf5c      	itt	pl
 801e1a2:	6013      	strpl	r3, [r2, #0]
 801e1a4:	2002      	movpl	r0, #2
 801e1a6:	4770      	bx	lr
 801e1a8:	b299      	uxth	r1, r3
 801e1aa:	b909      	cbnz	r1, 801e1b0 <__lo0bits+0x2a>
 801e1ac:	0c1b      	lsrs	r3, r3, #16
 801e1ae:	2010      	movs	r0, #16
 801e1b0:	b2d9      	uxtb	r1, r3
 801e1b2:	b909      	cbnz	r1, 801e1b8 <__lo0bits+0x32>
 801e1b4:	3008      	adds	r0, #8
 801e1b6:	0a1b      	lsrs	r3, r3, #8
 801e1b8:	0719      	lsls	r1, r3, #28
 801e1ba:	bf04      	itt	eq
 801e1bc:	091b      	lsreq	r3, r3, #4
 801e1be:	3004      	addeq	r0, #4
 801e1c0:	0799      	lsls	r1, r3, #30
 801e1c2:	bf04      	itt	eq
 801e1c4:	089b      	lsreq	r3, r3, #2
 801e1c6:	3002      	addeq	r0, #2
 801e1c8:	07d9      	lsls	r1, r3, #31
 801e1ca:	d403      	bmi.n	801e1d4 <__lo0bits+0x4e>
 801e1cc:	085b      	lsrs	r3, r3, #1
 801e1ce:	f100 0001 	add.w	r0, r0, #1
 801e1d2:	d003      	beq.n	801e1dc <__lo0bits+0x56>
 801e1d4:	6013      	str	r3, [r2, #0]
 801e1d6:	4770      	bx	lr
 801e1d8:	2000      	movs	r0, #0
 801e1da:	4770      	bx	lr
 801e1dc:	2020      	movs	r0, #32
 801e1de:	4770      	bx	lr

0801e1e0 <__i2b>:
 801e1e0:	b510      	push	{r4, lr}
 801e1e2:	460c      	mov	r4, r1
 801e1e4:	2101      	movs	r1, #1
 801e1e6:	f7ff febd 	bl	801df64 <_Balloc>
 801e1ea:	4602      	mov	r2, r0
 801e1ec:	b928      	cbnz	r0, 801e1fa <__i2b+0x1a>
 801e1ee:	4b05      	ldr	r3, [pc, #20]	@ (801e204 <__i2b+0x24>)
 801e1f0:	4805      	ldr	r0, [pc, #20]	@ (801e208 <__i2b+0x28>)
 801e1f2:	f240 1145 	movw	r1, #325	@ 0x145
 801e1f6:	f7fe fcb5 	bl	801cb64 <__assert_func>
 801e1fa:	2301      	movs	r3, #1
 801e1fc:	6144      	str	r4, [r0, #20]
 801e1fe:	6103      	str	r3, [r0, #16]
 801e200:	bd10      	pop	{r4, pc}
 801e202:	bf00      	nop
 801e204:	08023504 	.word	0x08023504
 801e208:	08023575 	.word	0x08023575

0801e20c <__multiply>:
 801e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e210:	4614      	mov	r4, r2
 801e212:	690a      	ldr	r2, [r1, #16]
 801e214:	6923      	ldr	r3, [r4, #16]
 801e216:	429a      	cmp	r2, r3
 801e218:	bfa8      	it	ge
 801e21a:	4623      	movge	r3, r4
 801e21c:	460f      	mov	r7, r1
 801e21e:	bfa4      	itt	ge
 801e220:	460c      	movge	r4, r1
 801e222:	461f      	movge	r7, r3
 801e224:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e228:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e22c:	68a3      	ldr	r3, [r4, #8]
 801e22e:	6861      	ldr	r1, [r4, #4]
 801e230:	eb0a 0609 	add.w	r6, sl, r9
 801e234:	42b3      	cmp	r3, r6
 801e236:	b085      	sub	sp, #20
 801e238:	bfb8      	it	lt
 801e23a:	3101      	addlt	r1, #1
 801e23c:	f7ff fe92 	bl	801df64 <_Balloc>
 801e240:	b930      	cbnz	r0, 801e250 <__multiply+0x44>
 801e242:	4602      	mov	r2, r0
 801e244:	4b44      	ldr	r3, [pc, #272]	@ (801e358 <__multiply+0x14c>)
 801e246:	4845      	ldr	r0, [pc, #276]	@ (801e35c <__multiply+0x150>)
 801e248:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e24c:	f7fe fc8a 	bl	801cb64 <__assert_func>
 801e250:	f100 0514 	add.w	r5, r0, #20
 801e254:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e258:	462b      	mov	r3, r5
 801e25a:	2200      	movs	r2, #0
 801e25c:	4543      	cmp	r3, r8
 801e25e:	d321      	bcc.n	801e2a4 <__multiply+0x98>
 801e260:	f107 0114 	add.w	r1, r7, #20
 801e264:	f104 0214 	add.w	r2, r4, #20
 801e268:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e26c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e270:	9302      	str	r3, [sp, #8]
 801e272:	1b13      	subs	r3, r2, r4
 801e274:	3b15      	subs	r3, #21
 801e276:	f023 0303 	bic.w	r3, r3, #3
 801e27a:	3304      	adds	r3, #4
 801e27c:	f104 0715 	add.w	r7, r4, #21
 801e280:	42ba      	cmp	r2, r7
 801e282:	bf38      	it	cc
 801e284:	2304      	movcc	r3, #4
 801e286:	9301      	str	r3, [sp, #4]
 801e288:	9b02      	ldr	r3, [sp, #8]
 801e28a:	9103      	str	r1, [sp, #12]
 801e28c:	428b      	cmp	r3, r1
 801e28e:	d80c      	bhi.n	801e2aa <__multiply+0x9e>
 801e290:	2e00      	cmp	r6, #0
 801e292:	dd03      	ble.n	801e29c <__multiply+0x90>
 801e294:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e298:	2b00      	cmp	r3, #0
 801e29a:	d05b      	beq.n	801e354 <__multiply+0x148>
 801e29c:	6106      	str	r6, [r0, #16]
 801e29e:	b005      	add	sp, #20
 801e2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2a4:	f843 2b04 	str.w	r2, [r3], #4
 801e2a8:	e7d8      	b.n	801e25c <__multiply+0x50>
 801e2aa:	f8b1 a000 	ldrh.w	sl, [r1]
 801e2ae:	f1ba 0f00 	cmp.w	sl, #0
 801e2b2:	d024      	beq.n	801e2fe <__multiply+0xf2>
 801e2b4:	f104 0e14 	add.w	lr, r4, #20
 801e2b8:	46a9      	mov	r9, r5
 801e2ba:	f04f 0c00 	mov.w	ip, #0
 801e2be:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e2c2:	f8d9 3000 	ldr.w	r3, [r9]
 801e2c6:	fa1f fb87 	uxth.w	fp, r7
 801e2ca:	b29b      	uxth	r3, r3
 801e2cc:	fb0a 330b 	mla	r3, sl, fp, r3
 801e2d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e2d4:	f8d9 7000 	ldr.w	r7, [r9]
 801e2d8:	4463      	add	r3, ip
 801e2da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e2de:	fb0a c70b 	mla	r7, sl, fp, ip
 801e2e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e2e6:	b29b      	uxth	r3, r3
 801e2e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e2ec:	4572      	cmp	r2, lr
 801e2ee:	f849 3b04 	str.w	r3, [r9], #4
 801e2f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e2f6:	d8e2      	bhi.n	801e2be <__multiply+0xb2>
 801e2f8:	9b01      	ldr	r3, [sp, #4]
 801e2fa:	f845 c003 	str.w	ip, [r5, r3]
 801e2fe:	9b03      	ldr	r3, [sp, #12]
 801e300:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e304:	3104      	adds	r1, #4
 801e306:	f1b9 0f00 	cmp.w	r9, #0
 801e30a:	d021      	beq.n	801e350 <__multiply+0x144>
 801e30c:	682b      	ldr	r3, [r5, #0]
 801e30e:	f104 0c14 	add.w	ip, r4, #20
 801e312:	46ae      	mov	lr, r5
 801e314:	f04f 0a00 	mov.w	sl, #0
 801e318:	f8bc b000 	ldrh.w	fp, [ip]
 801e31c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e320:	fb09 770b 	mla	r7, r9, fp, r7
 801e324:	4457      	add	r7, sl
 801e326:	b29b      	uxth	r3, r3
 801e328:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e32c:	f84e 3b04 	str.w	r3, [lr], #4
 801e330:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e334:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e338:	f8be 3000 	ldrh.w	r3, [lr]
 801e33c:	fb09 330a 	mla	r3, r9, sl, r3
 801e340:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e344:	4562      	cmp	r2, ip
 801e346:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e34a:	d8e5      	bhi.n	801e318 <__multiply+0x10c>
 801e34c:	9f01      	ldr	r7, [sp, #4]
 801e34e:	51eb      	str	r3, [r5, r7]
 801e350:	3504      	adds	r5, #4
 801e352:	e799      	b.n	801e288 <__multiply+0x7c>
 801e354:	3e01      	subs	r6, #1
 801e356:	e79b      	b.n	801e290 <__multiply+0x84>
 801e358:	08023504 	.word	0x08023504
 801e35c:	08023575 	.word	0x08023575

0801e360 <__pow5mult>:
 801e360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e364:	4615      	mov	r5, r2
 801e366:	f012 0203 	ands.w	r2, r2, #3
 801e36a:	4607      	mov	r7, r0
 801e36c:	460e      	mov	r6, r1
 801e36e:	d007      	beq.n	801e380 <__pow5mult+0x20>
 801e370:	4c25      	ldr	r4, [pc, #148]	@ (801e408 <__pow5mult+0xa8>)
 801e372:	3a01      	subs	r2, #1
 801e374:	2300      	movs	r3, #0
 801e376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e37a:	f7ff fe55 	bl	801e028 <__multadd>
 801e37e:	4606      	mov	r6, r0
 801e380:	10ad      	asrs	r5, r5, #2
 801e382:	d03d      	beq.n	801e400 <__pow5mult+0xa0>
 801e384:	69fc      	ldr	r4, [r7, #28]
 801e386:	b97c      	cbnz	r4, 801e3a8 <__pow5mult+0x48>
 801e388:	2010      	movs	r0, #16
 801e38a:	f7fc fb3d 	bl	801aa08 <malloc>
 801e38e:	4602      	mov	r2, r0
 801e390:	61f8      	str	r0, [r7, #28]
 801e392:	b928      	cbnz	r0, 801e3a0 <__pow5mult+0x40>
 801e394:	4b1d      	ldr	r3, [pc, #116]	@ (801e40c <__pow5mult+0xac>)
 801e396:	481e      	ldr	r0, [pc, #120]	@ (801e410 <__pow5mult+0xb0>)
 801e398:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e39c:	f7fe fbe2 	bl	801cb64 <__assert_func>
 801e3a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e3a4:	6004      	str	r4, [r0, #0]
 801e3a6:	60c4      	str	r4, [r0, #12]
 801e3a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e3ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e3b0:	b94c      	cbnz	r4, 801e3c6 <__pow5mult+0x66>
 801e3b2:	f240 2171 	movw	r1, #625	@ 0x271
 801e3b6:	4638      	mov	r0, r7
 801e3b8:	f7ff ff12 	bl	801e1e0 <__i2b>
 801e3bc:	2300      	movs	r3, #0
 801e3be:	f8c8 0008 	str.w	r0, [r8, #8]
 801e3c2:	4604      	mov	r4, r0
 801e3c4:	6003      	str	r3, [r0, #0]
 801e3c6:	f04f 0900 	mov.w	r9, #0
 801e3ca:	07eb      	lsls	r3, r5, #31
 801e3cc:	d50a      	bpl.n	801e3e4 <__pow5mult+0x84>
 801e3ce:	4631      	mov	r1, r6
 801e3d0:	4622      	mov	r2, r4
 801e3d2:	4638      	mov	r0, r7
 801e3d4:	f7ff ff1a 	bl	801e20c <__multiply>
 801e3d8:	4631      	mov	r1, r6
 801e3da:	4680      	mov	r8, r0
 801e3dc:	4638      	mov	r0, r7
 801e3de:	f7ff fe01 	bl	801dfe4 <_Bfree>
 801e3e2:	4646      	mov	r6, r8
 801e3e4:	106d      	asrs	r5, r5, #1
 801e3e6:	d00b      	beq.n	801e400 <__pow5mult+0xa0>
 801e3e8:	6820      	ldr	r0, [r4, #0]
 801e3ea:	b938      	cbnz	r0, 801e3fc <__pow5mult+0x9c>
 801e3ec:	4622      	mov	r2, r4
 801e3ee:	4621      	mov	r1, r4
 801e3f0:	4638      	mov	r0, r7
 801e3f2:	f7ff ff0b 	bl	801e20c <__multiply>
 801e3f6:	6020      	str	r0, [r4, #0]
 801e3f8:	f8c0 9000 	str.w	r9, [r0]
 801e3fc:	4604      	mov	r4, r0
 801e3fe:	e7e4      	b.n	801e3ca <__pow5mult+0x6a>
 801e400:	4630      	mov	r0, r6
 801e402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e406:	bf00      	nop
 801e408:	080235d0 	.word	0x080235d0
 801e40c:	080233ea 	.word	0x080233ea
 801e410:	08023575 	.word	0x08023575

0801e414 <__lshift>:
 801e414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e418:	460c      	mov	r4, r1
 801e41a:	6849      	ldr	r1, [r1, #4]
 801e41c:	6923      	ldr	r3, [r4, #16]
 801e41e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e422:	68a3      	ldr	r3, [r4, #8]
 801e424:	4607      	mov	r7, r0
 801e426:	4691      	mov	r9, r2
 801e428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e42c:	f108 0601 	add.w	r6, r8, #1
 801e430:	42b3      	cmp	r3, r6
 801e432:	db0b      	blt.n	801e44c <__lshift+0x38>
 801e434:	4638      	mov	r0, r7
 801e436:	f7ff fd95 	bl	801df64 <_Balloc>
 801e43a:	4605      	mov	r5, r0
 801e43c:	b948      	cbnz	r0, 801e452 <__lshift+0x3e>
 801e43e:	4602      	mov	r2, r0
 801e440:	4b28      	ldr	r3, [pc, #160]	@ (801e4e4 <__lshift+0xd0>)
 801e442:	4829      	ldr	r0, [pc, #164]	@ (801e4e8 <__lshift+0xd4>)
 801e444:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e448:	f7fe fb8c 	bl	801cb64 <__assert_func>
 801e44c:	3101      	adds	r1, #1
 801e44e:	005b      	lsls	r3, r3, #1
 801e450:	e7ee      	b.n	801e430 <__lshift+0x1c>
 801e452:	2300      	movs	r3, #0
 801e454:	f100 0114 	add.w	r1, r0, #20
 801e458:	f100 0210 	add.w	r2, r0, #16
 801e45c:	4618      	mov	r0, r3
 801e45e:	4553      	cmp	r3, sl
 801e460:	db33      	blt.n	801e4ca <__lshift+0xb6>
 801e462:	6920      	ldr	r0, [r4, #16]
 801e464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e468:	f104 0314 	add.w	r3, r4, #20
 801e46c:	f019 091f 	ands.w	r9, r9, #31
 801e470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e474:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e478:	d02b      	beq.n	801e4d2 <__lshift+0xbe>
 801e47a:	f1c9 0e20 	rsb	lr, r9, #32
 801e47e:	468a      	mov	sl, r1
 801e480:	2200      	movs	r2, #0
 801e482:	6818      	ldr	r0, [r3, #0]
 801e484:	fa00 f009 	lsl.w	r0, r0, r9
 801e488:	4310      	orrs	r0, r2
 801e48a:	f84a 0b04 	str.w	r0, [sl], #4
 801e48e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e492:	459c      	cmp	ip, r3
 801e494:	fa22 f20e 	lsr.w	r2, r2, lr
 801e498:	d8f3      	bhi.n	801e482 <__lshift+0x6e>
 801e49a:	ebac 0304 	sub.w	r3, ip, r4
 801e49e:	3b15      	subs	r3, #21
 801e4a0:	f023 0303 	bic.w	r3, r3, #3
 801e4a4:	3304      	adds	r3, #4
 801e4a6:	f104 0015 	add.w	r0, r4, #21
 801e4aa:	4584      	cmp	ip, r0
 801e4ac:	bf38      	it	cc
 801e4ae:	2304      	movcc	r3, #4
 801e4b0:	50ca      	str	r2, [r1, r3]
 801e4b2:	b10a      	cbz	r2, 801e4b8 <__lshift+0xa4>
 801e4b4:	f108 0602 	add.w	r6, r8, #2
 801e4b8:	3e01      	subs	r6, #1
 801e4ba:	4638      	mov	r0, r7
 801e4bc:	612e      	str	r6, [r5, #16]
 801e4be:	4621      	mov	r1, r4
 801e4c0:	f7ff fd90 	bl	801dfe4 <_Bfree>
 801e4c4:	4628      	mov	r0, r5
 801e4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4ca:	f842 0f04 	str.w	r0, [r2, #4]!
 801e4ce:	3301      	adds	r3, #1
 801e4d0:	e7c5      	b.n	801e45e <__lshift+0x4a>
 801e4d2:	3904      	subs	r1, #4
 801e4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 801e4d8:	f841 2f04 	str.w	r2, [r1, #4]!
 801e4dc:	459c      	cmp	ip, r3
 801e4de:	d8f9      	bhi.n	801e4d4 <__lshift+0xc0>
 801e4e0:	e7ea      	b.n	801e4b8 <__lshift+0xa4>
 801e4e2:	bf00      	nop
 801e4e4:	08023504 	.word	0x08023504
 801e4e8:	08023575 	.word	0x08023575

0801e4ec <__mcmp>:
 801e4ec:	690a      	ldr	r2, [r1, #16]
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	6900      	ldr	r0, [r0, #16]
 801e4f2:	1a80      	subs	r0, r0, r2
 801e4f4:	b530      	push	{r4, r5, lr}
 801e4f6:	d10e      	bne.n	801e516 <__mcmp+0x2a>
 801e4f8:	3314      	adds	r3, #20
 801e4fa:	3114      	adds	r1, #20
 801e4fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e500:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e504:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e508:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e50c:	4295      	cmp	r5, r2
 801e50e:	d003      	beq.n	801e518 <__mcmp+0x2c>
 801e510:	d205      	bcs.n	801e51e <__mcmp+0x32>
 801e512:	f04f 30ff 	mov.w	r0, #4294967295
 801e516:	bd30      	pop	{r4, r5, pc}
 801e518:	42a3      	cmp	r3, r4
 801e51a:	d3f3      	bcc.n	801e504 <__mcmp+0x18>
 801e51c:	e7fb      	b.n	801e516 <__mcmp+0x2a>
 801e51e:	2001      	movs	r0, #1
 801e520:	e7f9      	b.n	801e516 <__mcmp+0x2a>
	...

0801e524 <__mdiff>:
 801e524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e528:	4689      	mov	r9, r1
 801e52a:	4606      	mov	r6, r0
 801e52c:	4611      	mov	r1, r2
 801e52e:	4648      	mov	r0, r9
 801e530:	4614      	mov	r4, r2
 801e532:	f7ff ffdb 	bl	801e4ec <__mcmp>
 801e536:	1e05      	subs	r5, r0, #0
 801e538:	d112      	bne.n	801e560 <__mdiff+0x3c>
 801e53a:	4629      	mov	r1, r5
 801e53c:	4630      	mov	r0, r6
 801e53e:	f7ff fd11 	bl	801df64 <_Balloc>
 801e542:	4602      	mov	r2, r0
 801e544:	b928      	cbnz	r0, 801e552 <__mdiff+0x2e>
 801e546:	4b3f      	ldr	r3, [pc, #252]	@ (801e644 <__mdiff+0x120>)
 801e548:	f240 2137 	movw	r1, #567	@ 0x237
 801e54c:	483e      	ldr	r0, [pc, #248]	@ (801e648 <__mdiff+0x124>)
 801e54e:	f7fe fb09 	bl	801cb64 <__assert_func>
 801e552:	2301      	movs	r3, #1
 801e554:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e558:	4610      	mov	r0, r2
 801e55a:	b003      	add	sp, #12
 801e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e560:	bfbc      	itt	lt
 801e562:	464b      	movlt	r3, r9
 801e564:	46a1      	movlt	r9, r4
 801e566:	4630      	mov	r0, r6
 801e568:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e56c:	bfba      	itte	lt
 801e56e:	461c      	movlt	r4, r3
 801e570:	2501      	movlt	r5, #1
 801e572:	2500      	movge	r5, #0
 801e574:	f7ff fcf6 	bl	801df64 <_Balloc>
 801e578:	4602      	mov	r2, r0
 801e57a:	b918      	cbnz	r0, 801e584 <__mdiff+0x60>
 801e57c:	4b31      	ldr	r3, [pc, #196]	@ (801e644 <__mdiff+0x120>)
 801e57e:	f240 2145 	movw	r1, #581	@ 0x245
 801e582:	e7e3      	b.n	801e54c <__mdiff+0x28>
 801e584:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e588:	6926      	ldr	r6, [r4, #16]
 801e58a:	60c5      	str	r5, [r0, #12]
 801e58c:	f109 0310 	add.w	r3, r9, #16
 801e590:	f109 0514 	add.w	r5, r9, #20
 801e594:	f104 0e14 	add.w	lr, r4, #20
 801e598:	f100 0b14 	add.w	fp, r0, #20
 801e59c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e5a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e5a4:	9301      	str	r3, [sp, #4]
 801e5a6:	46d9      	mov	r9, fp
 801e5a8:	f04f 0c00 	mov.w	ip, #0
 801e5ac:	9b01      	ldr	r3, [sp, #4]
 801e5ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e5b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e5b6:	9301      	str	r3, [sp, #4]
 801e5b8:	fa1f f38a 	uxth.w	r3, sl
 801e5bc:	4619      	mov	r1, r3
 801e5be:	b283      	uxth	r3, r0
 801e5c0:	1acb      	subs	r3, r1, r3
 801e5c2:	0c00      	lsrs	r0, r0, #16
 801e5c4:	4463      	add	r3, ip
 801e5c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e5ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e5ce:	b29b      	uxth	r3, r3
 801e5d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e5d4:	4576      	cmp	r6, lr
 801e5d6:	f849 3b04 	str.w	r3, [r9], #4
 801e5da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e5de:	d8e5      	bhi.n	801e5ac <__mdiff+0x88>
 801e5e0:	1b33      	subs	r3, r6, r4
 801e5e2:	3b15      	subs	r3, #21
 801e5e4:	f023 0303 	bic.w	r3, r3, #3
 801e5e8:	3415      	adds	r4, #21
 801e5ea:	3304      	adds	r3, #4
 801e5ec:	42a6      	cmp	r6, r4
 801e5ee:	bf38      	it	cc
 801e5f0:	2304      	movcc	r3, #4
 801e5f2:	441d      	add	r5, r3
 801e5f4:	445b      	add	r3, fp
 801e5f6:	461e      	mov	r6, r3
 801e5f8:	462c      	mov	r4, r5
 801e5fa:	4544      	cmp	r4, r8
 801e5fc:	d30e      	bcc.n	801e61c <__mdiff+0xf8>
 801e5fe:	f108 0103 	add.w	r1, r8, #3
 801e602:	1b49      	subs	r1, r1, r5
 801e604:	f021 0103 	bic.w	r1, r1, #3
 801e608:	3d03      	subs	r5, #3
 801e60a:	45a8      	cmp	r8, r5
 801e60c:	bf38      	it	cc
 801e60e:	2100      	movcc	r1, #0
 801e610:	440b      	add	r3, r1
 801e612:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e616:	b191      	cbz	r1, 801e63e <__mdiff+0x11a>
 801e618:	6117      	str	r7, [r2, #16]
 801e61a:	e79d      	b.n	801e558 <__mdiff+0x34>
 801e61c:	f854 1b04 	ldr.w	r1, [r4], #4
 801e620:	46e6      	mov	lr, ip
 801e622:	0c08      	lsrs	r0, r1, #16
 801e624:	fa1c fc81 	uxtah	ip, ip, r1
 801e628:	4471      	add	r1, lr
 801e62a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e62e:	b289      	uxth	r1, r1
 801e630:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e634:	f846 1b04 	str.w	r1, [r6], #4
 801e638:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e63c:	e7dd      	b.n	801e5fa <__mdiff+0xd6>
 801e63e:	3f01      	subs	r7, #1
 801e640:	e7e7      	b.n	801e612 <__mdiff+0xee>
 801e642:	bf00      	nop
 801e644:	08023504 	.word	0x08023504
 801e648:	08023575 	.word	0x08023575

0801e64c <__ulp>:
 801e64c:	b082      	sub	sp, #8
 801e64e:	ed8d 0b00 	vstr	d0, [sp]
 801e652:	9a01      	ldr	r2, [sp, #4]
 801e654:	4b0f      	ldr	r3, [pc, #60]	@ (801e694 <__ulp+0x48>)
 801e656:	4013      	ands	r3, r2
 801e658:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	dc08      	bgt.n	801e672 <__ulp+0x26>
 801e660:	425b      	negs	r3, r3
 801e662:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801e666:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e66a:	da04      	bge.n	801e676 <__ulp+0x2a>
 801e66c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801e670:	4113      	asrs	r3, r2
 801e672:	2200      	movs	r2, #0
 801e674:	e008      	b.n	801e688 <__ulp+0x3c>
 801e676:	f1a2 0314 	sub.w	r3, r2, #20
 801e67a:	2b1e      	cmp	r3, #30
 801e67c:	bfda      	itte	le
 801e67e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801e682:	40da      	lsrle	r2, r3
 801e684:	2201      	movgt	r2, #1
 801e686:	2300      	movs	r3, #0
 801e688:	4619      	mov	r1, r3
 801e68a:	4610      	mov	r0, r2
 801e68c:	ec41 0b10 	vmov	d0, r0, r1
 801e690:	b002      	add	sp, #8
 801e692:	4770      	bx	lr
 801e694:	7ff00000 	.word	0x7ff00000

0801e698 <__b2d>:
 801e698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e69c:	6906      	ldr	r6, [r0, #16]
 801e69e:	f100 0814 	add.w	r8, r0, #20
 801e6a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801e6a6:	1f37      	subs	r7, r6, #4
 801e6a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e6ac:	4610      	mov	r0, r2
 801e6ae:	f7ff fd4b 	bl	801e148 <__hi0bits>
 801e6b2:	f1c0 0320 	rsb	r3, r0, #32
 801e6b6:	280a      	cmp	r0, #10
 801e6b8:	600b      	str	r3, [r1, #0]
 801e6ba:	491b      	ldr	r1, [pc, #108]	@ (801e728 <__b2d+0x90>)
 801e6bc:	dc15      	bgt.n	801e6ea <__b2d+0x52>
 801e6be:	f1c0 0c0b 	rsb	ip, r0, #11
 801e6c2:	fa22 f30c 	lsr.w	r3, r2, ip
 801e6c6:	45b8      	cmp	r8, r7
 801e6c8:	ea43 0501 	orr.w	r5, r3, r1
 801e6cc:	bf34      	ite	cc
 801e6ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801e6d2:	2300      	movcs	r3, #0
 801e6d4:	3015      	adds	r0, #21
 801e6d6:	fa02 f000 	lsl.w	r0, r2, r0
 801e6da:	fa23 f30c 	lsr.w	r3, r3, ip
 801e6de:	4303      	orrs	r3, r0
 801e6e0:	461c      	mov	r4, r3
 801e6e2:	ec45 4b10 	vmov	d0, r4, r5
 801e6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6ea:	45b8      	cmp	r8, r7
 801e6ec:	bf3a      	itte	cc
 801e6ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801e6f2:	f1a6 0708 	subcc.w	r7, r6, #8
 801e6f6:	2300      	movcs	r3, #0
 801e6f8:	380b      	subs	r0, #11
 801e6fa:	d012      	beq.n	801e722 <__b2d+0x8a>
 801e6fc:	f1c0 0120 	rsb	r1, r0, #32
 801e700:	fa23 f401 	lsr.w	r4, r3, r1
 801e704:	4082      	lsls	r2, r0
 801e706:	4322      	orrs	r2, r4
 801e708:	4547      	cmp	r7, r8
 801e70a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801e70e:	bf8c      	ite	hi
 801e710:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801e714:	2200      	movls	r2, #0
 801e716:	4083      	lsls	r3, r0
 801e718:	40ca      	lsrs	r2, r1
 801e71a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801e71e:	4313      	orrs	r3, r2
 801e720:	e7de      	b.n	801e6e0 <__b2d+0x48>
 801e722:	ea42 0501 	orr.w	r5, r2, r1
 801e726:	e7db      	b.n	801e6e0 <__b2d+0x48>
 801e728:	3ff00000 	.word	0x3ff00000

0801e72c <__d2b>:
 801e72c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e730:	460f      	mov	r7, r1
 801e732:	2101      	movs	r1, #1
 801e734:	ec59 8b10 	vmov	r8, r9, d0
 801e738:	4616      	mov	r6, r2
 801e73a:	f7ff fc13 	bl	801df64 <_Balloc>
 801e73e:	4604      	mov	r4, r0
 801e740:	b930      	cbnz	r0, 801e750 <__d2b+0x24>
 801e742:	4602      	mov	r2, r0
 801e744:	4b23      	ldr	r3, [pc, #140]	@ (801e7d4 <__d2b+0xa8>)
 801e746:	4824      	ldr	r0, [pc, #144]	@ (801e7d8 <__d2b+0xac>)
 801e748:	f240 310f 	movw	r1, #783	@ 0x30f
 801e74c:	f7fe fa0a 	bl	801cb64 <__assert_func>
 801e750:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e758:	b10d      	cbz	r5, 801e75e <__d2b+0x32>
 801e75a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e75e:	9301      	str	r3, [sp, #4]
 801e760:	f1b8 0300 	subs.w	r3, r8, #0
 801e764:	d023      	beq.n	801e7ae <__d2b+0x82>
 801e766:	4668      	mov	r0, sp
 801e768:	9300      	str	r3, [sp, #0]
 801e76a:	f7ff fd0c 	bl	801e186 <__lo0bits>
 801e76e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e772:	b1d0      	cbz	r0, 801e7aa <__d2b+0x7e>
 801e774:	f1c0 0320 	rsb	r3, r0, #32
 801e778:	fa02 f303 	lsl.w	r3, r2, r3
 801e77c:	430b      	orrs	r3, r1
 801e77e:	40c2      	lsrs	r2, r0
 801e780:	6163      	str	r3, [r4, #20]
 801e782:	9201      	str	r2, [sp, #4]
 801e784:	9b01      	ldr	r3, [sp, #4]
 801e786:	61a3      	str	r3, [r4, #24]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	bf0c      	ite	eq
 801e78c:	2201      	moveq	r2, #1
 801e78e:	2202      	movne	r2, #2
 801e790:	6122      	str	r2, [r4, #16]
 801e792:	b1a5      	cbz	r5, 801e7be <__d2b+0x92>
 801e794:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e798:	4405      	add	r5, r0
 801e79a:	603d      	str	r5, [r7, #0]
 801e79c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e7a0:	6030      	str	r0, [r6, #0]
 801e7a2:	4620      	mov	r0, r4
 801e7a4:	b003      	add	sp, #12
 801e7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7aa:	6161      	str	r1, [r4, #20]
 801e7ac:	e7ea      	b.n	801e784 <__d2b+0x58>
 801e7ae:	a801      	add	r0, sp, #4
 801e7b0:	f7ff fce9 	bl	801e186 <__lo0bits>
 801e7b4:	9b01      	ldr	r3, [sp, #4]
 801e7b6:	6163      	str	r3, [r4, #20]
 801e7b8:	3020      	adds	r0, #32
 801e7ba:	2201      	movs	r2, #1
 801e7bc:	e7e8      	b.n	801e790 <__d2b+0x64>
 801e7be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e7c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e7c6:	6038      	str	r0, [r7, #0]
 801e7c8:	6918      	ldr	r0, [r3, #16]
 801e7ca:	f7ff fcbd 	bl	801e148 <__hi0bits>
 801e7ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e7d2:	e7e5      	b.n	801e7a0 <__d2b+0x74>
 801e7d4:	08023504 	.word	0x08023504
 801e7d8:	08023575 	.word	0x08023575

0801e7dc <__ratio>:
 801e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e0:	b085      	sub	sp, #20
 801e7e2:	e9cd 1000 	strd	r1, r0, [sp]
 801e7e6:	a902      	add	r1, sp, #8
 801e7e8:	f7ff ff56 	bl	801e698 <__b2d>
 801e7ec:	9800      	ldr	r0, [sp, #0]
 801e7ee:	a903      	add	r1, sp, #12
 801e7f0:	ec55 4b10 	vmov	r4, r5, d0
 801e7f4:	f7ff ff50 	bl	801e698 <__b2d>
 801e7f8:	9b01      	ldr	r3, [sp, #4]
 801e7fa:	6919      	ldr	r1, [r3, #16]
 801e7fc:	9b00      	ldr	r3, [sp, #0]
 801e7fe:	691b      	ldr	r3, [r3, #16]
 801e800:	1ac9      	subs	r1, r1, r3
 801e802:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801e806:	1a9b      	subs	r3, r3, r2
 801e808:	ec5b ab10 	vmov	sl, fp, d0
 801e80c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801e810:	2b00      	cmp	r3, #0
 801e812:	bfce      	itee	gt
 801e814:	462a      	movgt	r2, r5
 801e816:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e81a:	465a      	movle	r2, fp
 801e81c:	462f      	mov	r7, r5
 801e81e:	46d9      	mov	r9, fp
 801e820:	bfcc      	ite	gt
 801e822:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e826:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801e82a:	464b      	mov	r3, r9
 801e82c:	4652      	mov	r2, sl
 801e82e:	4620      	mov	r0, r4
 801e830:	4639      	mov	r1, r7
 801e832:	f7e1 ffe3 	bl	80007fc <__aeabi_ddiv>
 801e836:	ec41 0b10 	vmov	d0, r0, r1
 801e83a:	b005      	add	sp, #20
 801e83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e840 <__copybits>:
 801e840:	3901      	subs	r1, #1
 801e842:	b570      	push	{r4, r5, r6, lr}
 801e844:	1149      	asrs	r1, r1, #5
 801e846:	6914      	ldr	r4, [r2, #16]
 801e848:	3101      	adds	r1, #1
 801e84a:	f102 0314 	add.w	r3, r2, #20
 801e84e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e852:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e856:	1f05      	subs	r5, r0, #4
 801e858:	42a3      	cmp	r3, r4
 801e85a:	d30c      	bcc.n	801e876 <__copybits+0x36>
 801e85c:	1aa3      	subs	r3, r4, r2
 801e85e:	3b11      	subs	r3, #17
 801e860:	f023 0303 	bic.w	r3, r3, #3
 801e864:	3211      	adds	r2, #17
 801e866:	42a2      	cmp	r2, r4
 801e868:	bf88      	it	hi
 801e86a:	2300      	movhi	r3, #0
 801e86c:	4418      	add	r0, r3
 801e86e:	2300      	movs	r3, #0
 801e870:	4288      	cmp	r0, r1
 801e872:	d305      	bcc.n	801e880 <__copybits+0x40>
 801e874:	bd70      	pop	{r4, r5, r6, pc}
 801e876:	f853 6b04 	ldr.w	r6, [r3], #4
 801e87a:	f845 6f04 	str.w	r6, [r5, #4]!
 801e87e:	e7eb      	b.n	801e858 <__copybits+0x18>
 801e880:	f840 3b04 	str.w	r3, [r0], #4
 801e884:	e7f4      	b.n	801e870 <__copybits+0x30>

0801e886 <__any_on>:
 801e886:	f100 0214 	add.w	r2, r0, #20
 801e88a:	6900      	ldr	r0, [r0, #16]
 801e88c:	114b      	asrs	r3, r1, #5
 801e88e:	4298      	cmp	r0, r3
 801e890:	b510      	push	{r4, lr}
 801e892:	db11      	blt.n	801e8b8 <__any_on+0x32>
 801e894:	dd0a      	ble.n	801e8ac <__any_on+0x26>
 801e896:	f011 011f 	ands.w	r1, r1, #31
 801e89a:	d007      	beq.n	801e8ac <__any_on+0x26>
 801e89c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e8a0:	fa24 f001 	lsr.w	r0, r4, r1
 801e8a4:	fa00 f101 	lsl.w	r1, r0, r1
 801e8a8:	428c      	cmp	r4, r1
 801e8aa:	d10b      	bne.n	801e8c4 <__any_on+0x3e>
 801e8ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e8b0:	4293      	cmp	r3, r2
 801e8b2:	d803      	bhi.n	801e8bc <__any_on+0x36>
 801e8b4:	2000      	movs	r0, #0
 801e8b6:	bd10      	pop	{r4, pc}
 801e8b8:	4603      	mov	r3, r0
 801e8ba:	e7f7      	b.n	801e8ac <__any_on+0x26>
 801e8bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e8c0:	2900      	cmp	r1, #0
 801e8c2:	d0f5      	beq.n	801e8b0 <__any_on+0x2a>
 801e8c4:	2001      	movs	r0, #1
 801e8c6:	e7f6      	b.n	801e8b6 <__any_on+0x30>

0801e8c8 <__ascii_wctomb>:
 801e8c8:	4603      	mov	r3, r0
 801e8ca:	4608      	mov	r0, r1
 801e8cc:	b141      	cbz	r1, 801e8e0 <__ascii_wctomb+0x18>
 801e8ce:	2aff      	cmp	r2, #255	@ 0xff
 801e8d0:	d904      	bls.n	801e8dc <__ascii_wctomb+0x14>
 801e8d2:	228a      	movs	r2, #138	@ 0x8a
 801e8d4:	601a      	str	r2, [r3, #0]
 801e8d6:	f04f 30ff 	mov.w	r0, #4294967295
 801e8da:	4770      	bx	lr
 801e8dc:	700a      	strb	r2, [r1, #0]
 801e8de:	2001      	movs	r0, #1
 801e8e0:	4770      	bx	lr

0801e8e2 <__ssputs_r>:
 801e8e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8e6:	688e      	ldr	r6, [r1, #8]
 801e8e8:	461f      	mov	r7, r3
 801e8ea:	42be      	cmp	r6, r7
 801e8ec:	680b      	ldr	r3, [r1, #0]
 801e8ee:	4682      	mov	sl, r0
 801e8f0:	460c      	mov	r4, r1
 801e8f2:	4690      	mov	r8, r2
 801e8f4:	d82d      	bhi.n	801e952 <__ssputs_r+0x70>
 801e8f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e8fa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e8fe:	d026      	beq.n	801e94e <__ssputs_r+0x6c>
 801e900:	6965      	ldr	r5, [r4, #20]
 801e902:	6909      	ldr	r1, [r1, #16]
 801e904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e908:	eba3 0901 	sub.w	r9, r3, r1
 801e90c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e910:	1c7b      	adds	r3, r7, #1
 801e912:	444b      	add	r3, r9
 801e914:	106d      	asrs	r5, r5, #1
 801e916:	429d      	cmp	r5, r3
 801e918:	bf38      	it	cc
 801e91a:	461d      	movcc	r5, r3
 801e91c:	0553      	lsls	r3, r2, #21
 801e91e:	d527      	bpl.n	801e970 <__ssputs_r+0x8e>
 801e920:	4629      	mov	r1, r5
 801e922:	f7fc f8a3 	bl	801aa6c <_malloc_r>
 801e926:	4606      	mov	r6, r0
 801e928:	b360      	cbz	r0, 801e984 <__ssputs_r+0xa2>
 801e92a:	6921      	ldr	r1, [r4, #16]
 801e92c:	464a      	mov	r2, r9
 801e92e:	f7fe f8fc 	bl	801cb2a <memcpy>
 801e932:	89a3      	ldrh	r3, [r4, #12]
 801e934:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e93c:	81a3      	strh	r3, [r4, #12]
 801e93e:	6126      	str	r6, [r4, #16]
 801e940:	6165      	str	r5, [r4, #20]
 801e942:	444e      	add	r6, r9
 801e944:	eba5 0509 	sub.w	r5, r5, r9
 801e948:	6026      	str	r6, [r4, #0]
 801e94a:	60a5      	str	r5, [r4, #8]
 801e94c:	463e      	mov	r6, r7
 801e94e:	42be      	cmp	r6, r7
 801e950:	d900      	bls.n	801e954 <__ssputs_r+0x72>
 801e952:	463e      	mov	r6, r7
 801e954:	6820      	ldr	r0, [r4, #0]
 801e956:	4632      	mov	r2, r6
 801e958:	4641      	mov	r1, r8
 801e95a:	f000 fbad 	bl	801f0b8 <memmove>
 801e95e:	68a3      	ldr	r3, [r4, #8]
 801e960:	1b9b      	subs	r3, r3, r6
 801e962:	60a3      	str	r3, [r4, #8]
 801e964:	6823      	ldr	r3, [r4, #0]
 801e966:	4433      	add	r3, r6
 801e968:	6023      	str	r3, [r4, #0]
 801e96a:	2000      	movs	r0, #0
 801e96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e970:	462a      	mov	r2, r5
 801e972:	f000 fbd6 	bl	801f122 <_realloc_r>
 801e976:	4606      	mov	r6, r0
 801e978:	2800      	cmp	r0, #0
 801e97a:	d1e0      	bne.n	801e93e <__ssputs_r+0x5c>
 801e97c:	6921      	ldr	r1, [r4, #16]
 801e97e:	4650      	mov	r0, sl
 801e980:	f7fe ff5a 	bl	801d838 <_free_r>
 801e984:	230c      	movs	r3, #12
 801e986:	f8ca 3000 	str.w	r3, [sl]
 801e98a:	89a3      	ldrh	r3, [r4, #12]
 801e98c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e990:	81a3      	strh	r3, [r4, #12]
 801e992:	f04f 30ff 	mov.w	r0, #4294967295
 801e996:	e7e9      	b.n	801e96c <__ssputs_r+0x8a>

0801e998 <_svfiprintf_r>:
 801e998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e99c:	4698      	mov	r8, r3
 801e99e:	898b      	ldrh	r3, [r1, #12]
 801e9a0:	061b      	lsls	r3, r3, #24
 801e9a2:	b09d      	sub	sp, #116	@ 0x74
 801e9a4:	4607      	mov	r7, r0
 801e9a6:	460d      	mov	r5, r1
 801e9a8:	4614      	mov	r4, r2
 801e9aa:	d510      	bpl.n	801e9ce <_svfiprintf_r+0x36>
 801e9ac:	690b      	ldr	r3, [r1, #16]
 801e9ae:	b973      	cbnz	r3, 801e9ce <_svfiprintf_r+0x36>
 801e9b0:	2140      	movs	r1, #64	@ 0x40
 801e9b2:	f7fc f85b 	bl	801aa6c <_malloc_r>
 801e9b6:	6028      	str	r0, [r5, #0]
 801e9b8:	6128      	str	r0, [r5, #16]
 801e9ba:	b930      	cbnz	r0, 801e9ca <_svfiprintf_r+0x32>
 801e9bc:	230c      	movs	r3, #12
 801e9be:	603b      	str	r3, [r7, #0]
 801e9c0:	f04f 30ff 	mov.w	r0, #4294967295
 801e9c4:	b01d      	add	sp, #116	@ 0x74
 801e9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9ca:	2340      	movs	r3, #64	@ 0x40
 801e9cc:	616b      	str	r3, [r5, #20]
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	9309      	str	r3, [sp, #36]	@ 0x24
 801e9d2:	2320      	movs	r3, #32
 801e9d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e9d8:	f8cd 800c 	str.w	r8, [sp, #12]
 801e9dc:	2330      	movs	r3, #48	@ 0x30
 801e9de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801eb7c <_svfiprintf_r+0x1e4>
 801e9e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e9e6:	f04f 0901 	mov.w	r9, #1
 801e9ea:	4623      	mov	r3, r4
 801e9ec:	469a      	mov	sl, r3
 801e9ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e9f2:	b10a      	cbz	r2, 801e9f8 <_svfiprintf_r+0x60>
 801e9f4:	2a25      	cmp	r2, #37	@ 0x25
 801e9f6:	d1f9      	bne.n	801e9ec <_svfiprintf_r+0x54>
 801e9f8:	ebba 0b04 	subs.w	fp, sl, r4
 801e9fc:	d00b      	beq.n	801ea16 <_svfiprintf_r+0x7e>
 801e9fe:	465b      	mov	r3, fp
 801ea00:	4622      	mov	r2, r4
 801ea02:	4629      	mov	r1, r5
 801ea04:	4638      	mov	r0, r7
 801ea06:	f7ff ff6c 	bl	801e8e2 <__ssputs_r>
 801ea0a:	3001      	adds	r0, #1
 801ea0c:	f000 80a7 	beq.w	801eb5e <_svfiprintf_r+0x1c6>
 801ea10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea12:	445a      	add	r2, fp
 801ea14:	9209      	str	r2, [sp, #36]	@ 0x24
 801ea16:	f89a 3000 	ldrb.w	r3, [sl]
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	f000 809f 	beq.w	801eb5e <_svfiprintf_r+0x1c6>
 801ea20:	2300      	movs	r3, #0
 801ea22:	f04f 32ff 	mov.w	r2, #4294967295
 801ea26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ea2a:	f10a 0a01 	add.w	sl, sl, #1
 801ea2e:	9304      	str	r3, [sp, #16]
 801ea30:	9307      	str	r3, [sp, #28]
 801ea32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ea36:	931a      	str	r3, [sp, #104]	@ 0x68
 801ea38:	4654      	mov	r4, sl
 801ea3a:	2205      	movs	r2, #5
 801ea3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea40:	484e      	ldr	r0, [pc, #312]	@ (801eb7c <_svfiprintf_r+0x1e4>)
 801ea42:	f7e1 fb9d 	bl	8000180 <memchr>
 801ea46:	9a04      	ldr	r2, [sp, #16]
 801ea48:	b9d8      	cbnz	r0, 801ea82 <_svfiprintf_r+0xea>
 801ea4a:	06d0      	lsls	r0, r2, #27
 801ea4c:	bf44      	itt	mi
 801ea4e:	2320      	movmi	r3, #32
 801ea50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ea54:	0711      	lsls	r1, r2, #28
 801ea56:	bf44      	itt	mi
 801ea58:	232b      	movmi	r3, #43	@ 0x2b
 801ea5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ea5e:	f89a 3000 	ldrb.w	r3, [sl]
 801ea62:	2b2a      	cmp	r3, #42	@ 0x2a
 801ea64:	d015      	beq.n	801ea92 <_svfiprintf_r+0xfa>
 801ea66:	9a07      	ldr	r2, [sp, #28]
 801ea68:	4654      	mov	r4, sl
 801ea6a:	2000      	movs	r0, #0
 801ea6c:	f04f 0c0a 	mov.w	ip, #10
 801ea70:	4621      	mov	r1, r4
 801ea72:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ea76:	3b30      	subs	r3, #48	@ 0x30
 801ea78:	2b09      	cmp	r3, #9
 801ea7a:	d94b      	bls.n	801eb14 <_svfiprintf_r+0x17c>
 801ea7c:	b1b0      	cbz	r0, 801eaac <_svfiprintf_r+0x114>
 801ea7e:	9207      	str	r2, [sp, #28]
 801ea80:	e014      	b.n	801eaac <_svfiprintf_r+0x114>
 801ea82:	eba0 0308 	sub.w	r3, r0, r8
 801ea86:	fa09 f303 	lsl.w	r3, r9, r3
 801ea8a:	4313      	orrs	r3, r2
 801ea8c:	9304      	str	r3, [sp, #16]
 801ea8e:	46a2      	mov	sl, r4
 801ea90:	e7d2      	b.n	801ea38 <_svfiprintf_r+0xa0>
 801ea92:	9b03      	ldr	r3, [sp, #12]
 801ea94:	1d19      	adds	r1, r3, #4
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	9103      	str	r1, [sp, #12]
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	bfbb      	ittet	lt
 801ea9e:	425b      	neglt	r3, r3
 801eaa0:	f042 0202 	orrlt.w	r2, r2, #2
 801eaa4:	9307      	strge	r3, [sp, #28]
 801eaa6:	9307      	strlt	r3, [sp, #28]
 801eaa8:	bfb8      	it	lt
 801eaaa:	9204      	strlt	r2, [sp, #16]
 801eaac:	7823      	ldrb	r3, [r4, #0]
 801eaae:	2b2e      	cmp	r3, #46	@ 0x2e
 801eab0:	d10a      	bne.n	801eac8 <_svfiprintf_r+0x130>
 801eab2:	7863      	ldrb	r3, [r4, #1]
 801eab4:	2b2a      	cmp	r3, #42	@ 0x2a
 801eab6:	d132      	bne.n	801eb1e <_svfiprintf_r+0x186>
 801eab8:	9b03      	ldr	r3, [sp, #12]
 801eaba:	1d1a      	adds	r2, r3, #4
 801eabc:	681b      	ldr	r3, [r3, #0]
 801eabe:	9203      	str	r2, [sp, #12]
 801eac0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801eac4:	3402      	adds	r4, #2
 801eac6:	9305      	str	r3, [sp, #20]
 801eac8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801eb8c <_svfiprintf_r+0x1f4>
 801eacc:	7821      	ldrb	r1, [r4, #0]
 801eace:	2203      	movs	r2, #3
 801ead0:	4650      	mov	r0, sl
 801ead2:	f7e1 fb55 	bl	8000180 <memchr>
 801ead6:	b138      	cbz	r0, 801eae8 <_svfiprintf_r+0x150>
 801ead8:	9b04      	ldr	r3, [sp, #16]
 801eada:	eba0 000a 	sub.w	r0, r0, sl
 801eade:	2240      	movs	r2, #64	@ 0x40
 801eae0:	4082      	lsls	r2, r0
 801eae2:	4313      	orrs	r3, r2
 801eae4:	3401      	adds	r4, #1
 801eae6:	9304      	str	r3, [sp, #16]
 801eae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eaec:	4824      	ldr	r0, [pc, #144]	@ (801eb80 <_svfiprintf_r+0x1e8>)
 801eaee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801eaf2:	2206      	movs	r2, #6
 801eaf4:	f7e1 fb44 	bl	8000180 <memchr>
 801eaf8:	2800      	cmp	r0, #0
 801eafa:	d036      	beq.n	801eb6a <_svfiprintf_r+0x1d2>
 801eafc:	4b21      	ldr	r3, [pc, #132]	@ (801eb84 <_svfiprintf_r+0x1ec>)
 801eafe:	bb1b      	cbnz	r3, 801eb48 <_svfiprintf_r+0x1b0>
 801eb00:	9b03      	ldr	r3, [sp, #12]
 801eb02:	3307      	adds	r3, #7
 801eb04:	f023 0307 	bic.w	r3, r3, #7
 801eb08:	3308      	adds	r3, #8
 801eb0a:	9303      	str	r3, [sp, #12]
 801eb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb0e:	4433      	add	r3, r6
 801eb10:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb12:	e76a      	b.n	801e9ea <_svfiprintf_r+0x52>
 801eb14:	fb0c 3202 	mla	r2, ip, r2, r3
 801eb18:	460c      	mov	r4, r1
 801eb1a:	2001      	movs	r0, #1
 801eb1c:	e7a8      	b.n	801ea70 <_svfiprintf_r+0xd8>
 801eb1e:	2300      	movs	r3, #0
 801eb20:	3401      	adds	r4, #1
 801eb22:	9305      	str	r3, [sp, #20]
 801eb24:	4619      	mov	r1, r3
 801eb26:	f04f 0c0a 	mov.w	ip, #10
 801eb2a:	4620      	mov	r0, r4
 801eb2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eb30:	3a30      	subs	r2, #48	@ 0x30
 801eb32:	2a09      	cmp	r2, #9
 801eb34:	d903      	bls.n	801eb3e <_svfiprintf_r+0x1a6>
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d0c6      	beq.n	801eac8 <_svfiprintf_r+0x130>
 801eb3a:	9105      	str	r1, [sp, #20]
 801eb3c:	e7c4      	b.n	801eac8 <_svfiprintf_r+0x130>
 801eb3e:	fb0c 2101 	mla	r1, ip, r1, r2
 801eb42:	4604      	mov	r4, r0
 801eb44:	2301      	movs	r3, #1
 801eb46:	e7f0      	b.n	801eb2a <_svfiprintf_r+0x192>
 801eb48:	ab03      	add	r3, sp, #12
 801eb4a:	9300      	str	r3, [sp, #0]
 801eb4c:	462a      	mov	r2, r5
 801eb4e:	4b0e      	ldr	r3, [pc, #56]	@ (801eb88 <_svfiprintf_r+0x1f0>)
 801eb50:	a904      	add	r1, sp, #16
 801eb52:	4638      	mov	r0, r7
 801eb54:	f7fc ffa8 	bl	801baa8 <_printf_float>
 801eb58:	1c42      	adds	r2, r0, #1
 801eb5a:	4606      	mov	r6, r0
 801eb5c:	d1d6      	bne.n	801eb0c <_svfiprintf_r+0x174>
 801eb5e:	89ab      	ldrh	r3, [r5, #12]
 801eb60:	065b      	lsls	r3, r3, #25
 801eb62:	f53f af2d 	bmi.w	801e9c0 <_svfiprintf_r+0x28>
 801eb66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eb68:	e72c      	b.n	801e9c4 <_svfiprintf_r+0x2c>
 801eb6a:	ab03      	add	r3, sp, #12
 801eb6c:	9300      	str	r3, [sp, #0]
 801eb6e:	462a      	mov	r2, r5
 801eb70:	4b05      	ldr	r3, [pc, #20]	@ (801eb88 <_svfiprintf_r+0x1f0>)
 801eb72:	a904      	add	r1, sp, #16
 801eb74:	4638      	mov	r0, r7
 801eb76:	f7fd fa2f 	bl	801bfd8 <_printf_i>
 801eb7a:	e7ed      	b.n	801eb58 <_svfiprintf_r+0x1c0>
 801eb7c:	080236d0 	.word	0x080236d0
 801eb80:	080236da 	.word	0x080236da
 801eb84:	0801baa9 	.word	0x0801baa9
 801eb88:	0801e8e3 	.word	0x0801e8e3
 801eb8c:	080236d6 	.word	0x080236d6

0801eb90 <__sfputc_r>:
 801eb90:	6893      	ldr	r3, [r2, #8]
 801eb92:	3b01      	subs	r3, #1
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	b410      	push	{r4}
 801eb98:	6093      	str	r3, [r2, #8]
 801eb9a:	da08      	bge.n	801ebae <__sfputc_r+0x1e>
 801eb9c:	6994      	ldr	r4, [r2, #24]
 801eb9e:	42a3      	cmp	r3, r4
 801eba0:	db01      	blt.n	801eba6 <__sfputc_r+0x16>
 801eba2:	290a      	cmp	r1, #10
 801eba4:	d103      	bne.n	801ebae <__sfputc_r+0x1e>
 801eba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ebaa:	f000 b9f1 	b.w	801ef90 <__swbuf_r>
 801ebae:	6813      	ldr	r3, [r2, #0]
 801ebb0:	1c58      	adds	r0, r3, #1
 801ebb2:	6010      	str	r0, [r2, #0]
 801ebb4:	7019      	strb	r1, [r3, #0]
 801ebb6:	4608      	mov	r0, r1
 801ebb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ebbc:	4770      	bx	lr

0801ebbe <__sfputs_r>:
 801ebbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebc0:	4606      	mov	r6, r0
 801ebc2:	460f      	mov	r7, r1
 801ebc4:	4614      	mov	r4, r2
 801ebc6:	18d5      	adds	r5, r2, r3
 801ebc8:	42ac      	cmp	r4, r5
 801ebca:	d101      	bne.n	801ebd0 <__sfputs_r+0x12>
 801ebcc:	2000      	movs	r0, #0
 801ebce:	e007      	b.n	801ebe0 <__sfputs_r+0x22>
 801ebd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ebd4:	463a      	mov	r2, r7
 801ebd6:	4630      	mov	r0, r6
 801ebd8:	f7ff ffda 	bl	801eb90 <__sfputc_r>
 801ebdc:	1c43      	adds	r3, r0, #1
 801ebde:	d1f3      	bne.n	801ebc8 <__sfputs_r+0xa>
 801ebe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ebe4 <_vfiprintf_r>:
 801ebe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebe8:	460d      	mov	r5, r1
 801ebea:	b09d      	sub	sp, #116	@ 0x74
 801ebec:	4614      	mov	r4, r2
 801ebee:	4698      	mov	r8, r3
 801ebf0:	4606      	mov	r6, r0
 801ebf2:	b118      	cbz	r0, 801ebfc <_vfiprintf_r+0x18>
 801ebf4:	6a03      	ldr	r3, [r0, #32]
 801ebf6:	b90b      	cbnz	r3, 801ebfc <_vfiprintf_r+0x18>
 801ebf8:	f7fd fdae 	bl	801c758 <__sinit>
 801ebfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ebfe:	07d9      	lsls	r1, r3, #31
 801ec00:	d405      	bmi.n	801ec0e <_vfiprintf_r+0x2a>
 801ec02:	89ab      	ldrh	r3, [r5, #12]
 801ec04:	059a      	lsls	r2, r3, #22
 801ec06:	d402      	bmi.n	801ec0e <_vfiprintf_r+0x2a>
 801ec08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ec0a:	f7fd ff84 	bl	801cb16 <__retarget_lock_acquire_recursive>
 801ec0e:	89ab      	ldrh	r3, [r5, #12]
 801ec10:	071b      	lsls	r3, r3, #28
 801ec12:	d501      	bpl.n	801ec18 <_vfiprintf_r+0x34>
 801ec14:	692b      	ldr	r3, [r5, #16]
 801ec16:	b99b      	cbnz	r3, 801ec40 <_vfiprintf_r+0x5c>
 801ec18:	4629      	mov	r1, r5
 801ec1a:	4630      	mov	r0, r6
 801ec1c:	f000 f9f6 	bl	801f00c <__swsetup_r>
 801ec20:	b170      	cbz	r0, 801ec40 <_vfiprintf_r+0x5c>
 801ec22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ec24:	07dc      	lsls	r4, r3, #31
 801ec26:	d504      	bpl.n	801ec32 <_vfiprintf_r+0x4e>
 801ec28:	f04f 30ff 	mov.w	r0, #4294967295
 801ec2c:	b01d      	add	sp, #116	@ 0x74
 801ec2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec32:	89ab      	ldrh	r3, [r5, #12]
 801ec34:	0598      	lsls	r0, r3, #22
 801ec36:	d4f7      	bmi.n	801ec28 <_vfiprintf_r+0x44>
 801ec38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ec3a:	f7fd ff6d 	bl	801cb18 <__retarget_lock_release_recursive>
 801ec3e:	e7f3      	b.n	801ec28 <_vfiprintf_r+0x44>
 801ec40:	2300      	movs	r3, #0
 801ec42:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec44:	2320      	movs	r3, #32
 801ec46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ec4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ec4e:	2330      	movs	r3, #48	@ 0x30
 801ec50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ee00 <_vfiprintf_r+0x21c>
 801ec54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ec58:	f04f 0901 	mov.w	r9, #1
 801ec5c:	4623      	mov	r3, r4
 801ec5e:	469a      	mov	sl, r3
 801ec60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec64:	b10a      	cbz	r2, 801ec6a <_vfiprintf_r+0x86>
 801ec66:	2a25      	cmp	r2, #37	@ 0x25
 801ec68:	d1f9      	bne.n	801ec5e <_vfiprintf_r+0x7a>
 801ec6a:	ebba 0b04 	subs.w	fp, sl, r4
 801ec6e:	d00b      	beq.n	801ec88 <_vfiprintf_r+0xa4>
 801ec70:	465b      	mov	r3, fp
 801ec72:	4622      	mov	r2, r4
 801ec74:	4629      	mov	r1, r5
 801ec76:	4630      	mov	r0, r6
 801ec78:	f7ff ffa1 	bl	801ebbe <__sfputs_r>
 801ec7c:	3001      	adds	r0, #1
 801ec7e:	f000 80a7 	beq.w	801edd0 <_vfiprintf_r+0x1ec>
 801ec82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ec84:	445a      	add	r2, fp
 801ec86:	9209      	str	r2, [sp, #36]	@ 0x24
 801ec88:	f89a 3000 	ldrb.w	r3, [sl]
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	f000 809f 	beq.w	801edd0 <_vfiprintf_r+0x1ec>
 801ec92:	2300      	movs	r3, #0
 801ec94:	f04f 32ff 	mov.w	r2, #4294967295
 801ec98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ec9c:	f10a 0a01 	add.w	sl, sl, #1
 801eca0:	9304      	str	r3, [sp, #16]
 801eca2:	9307      	str	r3, [sp, #28]
 801eca4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801eca8:	931a      	str	r3, [sp, #104]	@ 0x68
 801ecaa:	4654      	mov	r4, sl
 801ecac:	2205      	movs	r2, #5
 801ecae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ecb2:	4853      	ldr	r0, [pc, #332]	@ (801ee00 <_vfiprintf_r+0x21c>)
 801ecb4:	f7e1 fa64 	bl	8000180 <memchr>
 801ecb8:	9a04      	ldr	r2, [sp, #16]
 801ecba:	b9d8      	cbnz	r0, 801ecf4 <_vfiprintf_r+0x110>
 801ecbc:	06d1      	lsls	r1, r2, #27
 801ecbe:	bf44      	itt	mi
 801ecc0:	2320      	movmi	r3, #32
 801ecc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ecc6:	0713      	lsls	r3, r2, #28
 801ecc8:	bf44      	itt	mi
 801ecca:	232b      	movmi	r3, #43	@ 0x2b
 801eccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ecd0:	f89a 3000 	ldrb.w	r3, [sl]
 801ecd4:	2b2a      	cmp	r3, #42	@ 0x2a
 801ecd6:	d015      	beq.n	801ed04 <_vfiprintf_r+0x120>
 801ecd8:	9a07      	ldr	r2, [sp, #28]
 801ecda:	4654      	mov	r4, sl
 801ecdc:	2000      	movs	r0, #0
 801ecde:	f04f 0c0a 	mov.w	ip, #10
 801ece2:	4621      	mov	r1, r4
 801ece4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ece8:	3b30      	subs	r3, #48	@ 0x30
 801ecea:	2b09      	cmp	r3, #9
 801ecec:	d94b      	bls.n	801ed86 <_vfiprintf_r+0x1a2>
 801ecee:	b1b0      	cbz	r0, 801ed1e <_vfiprintf_r+0x13a>
 801ecf0:	9207      	str	r2, [sp, #28]
 801ecf2:	e014      	b.n	801ed1e <_vfiprintf_r+0x13a>
 801ecf4:	eba0 0308 	sub.w	r3, r0, r8
 801ecf8:	fa09 f303 	lsl.w	r3, r9, r3
 801ecfc:	4313      	orrs	r3, r2
 801ecfe:	9304      	str	r3, [sp, #16]
 801ed00:	46a2      	mov	sl, r4
 801ed02:	e7d2      	b.n	801ecaa <_vfiprintf_r+0xc6>
 801ed04:	9b03      	ldr	r3, [sp, #12]
 801ed06:	1d19      	adds	r1, r3, #4
 801ed08:	681b      	ldr	r3, [r3, #0]
 801ed0a:	9103      	str	r1, [sp, #12]
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	bfbb      	ittet	lt
 801ed10:	425b      	neglt	r3, r3
 801ed12:	f042 0202 	orrlt.w	r2, r2, #2
 801ed16:	9307      	strge	r3, [sp, #28]
 801ed18:	9307      	strlt	r3, [sp, #28]
 801ed1a:	bfb8      	it	lt
 801ed1c:	9204      	strlt	r2, [sp, #16]
 801ed1e:	7823      	ldrb	r3, [r4, #0]
 801ed20:	2b2e      	cmp	r3, #46	@ 0x2e
 801ed22:	d10a      	bne.n	801ed3a <_vfiprintf_r+0x156>
 801ed24:	7863      	ldrb	r3, [r4, #1]
 801ed26:	2b2a      	cmp	r3, #42	@ 0x2a
 801ed28:	d132      	bne.n	801ed90 <_vfiprintf_r+0x1ac>
 801ed2a:	9b03      	ldr	r3, [sp, #12]
 801ed2c:	1d1a      	adds	r2, r3, #4
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	9203      	str	r2, [sp, #12]
 801ed32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ed36:	3402      	adds	r4, #2
 801ed38:	9305      	str	r3, [sp, #20]
 801ed3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ee10 <_vfiprintf_r+0x22c>
 801ed3e:	7821      	ldrb	r1, [r4, #0]
 801ed40:	2203      	movs	r2, #3
 801ed42:	4650      	mov	r0, sl
 801ed44:	f7e1 fa1c 	bl	8000180 <memchr>
 801ed48:	b138      	cbz	r0, 801ed5a <_vfiprintf_r+0x176>
 801ed4a:	9b04      	ldr	r3, [sp, #16]
 801ed4c:	eba0 000a 	sub.w	r0, r0, sl
 801ed50:	2240      	movs	r2, #64	@ 0x40
 801ed52:	4082      	lsls	r2, r0
 801ed54:	4313      	orrs	r3, r2
 801ed56:	3401      	adds	r4, #1
 801ed58:	9304      	str	r3, [sp, #16]
 801ed5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed5e:	4829      	ldr	r0, [pc, #164]	@ (801ee04 <_vfiprintf_r+0x220>)
 801ed60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ed64:	2206      	movs	r2, #6
 801ed66:	f7e1 fa0b 	bl	8000180 <memchr>
 801ed6a:	2800      	cmp	r0, #0
 801ed6c:	d03f      	beq.n	801edee <_vfiprintf_r+0x20a>
 801ed6e:	4b26      	ldr	r3, [pc, #152]	@ (801ee08 <_vfiprintf_r+0x224>)
 801ed70:	bb1b      	cbnz	r3, 801edba <_vfiprintf_r+0x1d6>
 801ed72:	9b03      	ldr	r3, [sp, #12]
 801ed74:	3307      	adds	r3, #7
 801ed76:	f023 0307 	bic.w	r3, r3, #7
 801ed7a:	3308      	adds	r3, #8
 801ed7c:	9303      	str	r3, [sp, #12]
 801ed7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed80:	443b      	add	r3, r7
 801ed82:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed84:	e76a      	b.n	801ec5c <_vfiprintf_r+0x78>
 801ed86:	fb0c 3202 	mla	r2, ip, r2, r3
 801ed8a:	460c      	mov	r4, r1
 801ed8c:	2001      	movs	r0, #1
 801ed8e:	e7a8      	b.n	801ece2 <_vfiprintf_r+0xfe>
 801ed90:	2300      	movs	r3, #0
 801ed92:	3401      	adds	r4, #1
 801ed94:	9305      	str	r3, [sp, #20]
 801ed96:	4619      	mov	r1, r3
 801ed98:	f04f 0c0a 	mov.w	ip, #10
 801ed9c:	4620      	mov	r0, r4
 801ed9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eda2:	3a30      	subs	r2, #48	@ 0x30
 801eda4:	2a09      	cmp	r2, #9
 801eda6:	d903      	bls.n	801edb0 <_vfiprintf_r+0x1cc>
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	d0c6      	beq.n	801ed3a <_vfiprintf_r+0x156>
 801edac:	9105      	str	r1, [sp, #20]
 801edae:	e7c4      	b.n	801ed3a <_vfiprintf_r+0x156>
 801edb0:	fb0c 2101 	mla	r1, ip, r1, r2
 801edb4:	4604      	mov	r4, r0
 801edb6:	2301      	movs	r3, #1
 801edb8:	e7f0      	b.n	801ed9c <_vfiprintf_r+0x1b8>
 801edba:	ab03      	add	r3, sp, #12
 801edbc:	9300      	str	r3, [sp, #0]
 801edbe:	462a      	mov	r2, r5
 801edc0:	4b12      	ldr	r3, [pc, #72]	@ (801ee0c <_vfiprintf_r+0x228>)
 801edc2:	a904      	add	r1, sp, #16
 801edc4:	4630      	mov	r0, r6
 801edc6:	f7fc fe6f 	bl	801baa8 <_printf_float>
 801edca:	4607      	mov	r7, r0
 801edcc:	1c78      	adds	r0, r7, #1
 801edce:	d1d6      	bne.n	801ed7e <_vfiprintf_r+0x19a>
 801edd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801edd2:	07d9      	lsls	r1, r3, #31
 801edd4:	d405      	bmi.n	801ede2 <_vfiprintf_r+0x1fe>
 801edd6:	89ab      	ldrh	r3, [r5, #12]
 801edd8:	059a      	lsls	r2, r3, #22
 801edda:	d402      	bmi.n	801ede2 <_vfiprintf_r+0x1fe>
 801eddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801edde:	f7fd fe9b 	bl	801cb18 <__retarget_lock_release_recursive>
 801ede2:	89ab      	ldrh	r3, [r5, #12]
 801ede4:	065b      	lsls	r3, r3, #25
 801ede6:	f53f af1f 	bmi.w	801ec28 <_vfiprintf_r+0x44>
 801edea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801edec:	e71e      	b.n	801ec2c <_vfiprintf_r+0x48>
 801edee:	ab03      	add	r3, sp, #12
 801edf0:	9300      	str	r3, [sp, #0]
 801edf2:	462a      	mov	r2, r5
 801edf4:	4b05      	ldr	r3, [pc, #20]	@ (801ee0c <_vfiprintf_r+0x228>)
 801edf6:	a904      	add	r1, sp, #16
 801edf8:	4630      	mov	r0, r6
 801edfa:	f7fd f8ed 	bl	801bfd8 <_printf_i>
 801edfe:	e7e4      	b.n	801edca <_vfiprintf_r+0x1e6>
 801ee00:	080236d0 	.word	0x080236d0
 801ee04:	080236da 	.word	0x080236da
 801ee08:	0801baa9 	.word	0x0801baa9
 801ee0c:	0801ebbf 	.word	0x0801ebbf
 801ee10:	080236d6 	.word	0x080236d6

0801ee14 <__sflush_r>:
 801ee14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ee18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee1c:	0716      	lsls	r6, r2, #28
 801ee1e:	4605      	mov	r5, r0
 801ee20:	460c      	mov	r4, r1
 801ee22:	d454      	bmi.n	801eece <__sflush_r+0xba>
 801ee24:	684b      	ldr	r3, [r1, #4]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	dc02      	bgt.n	801ee30 <__sflush_r+0x1c>
 801ee2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	dd48      	ble.n	801eec2 <__sflush_r+0xae>
 801ee30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ee32:	2e00      	cmp	r6, #0
 801ee34:	d045      	beq.n	801eec2 <__sflush_r+0xae>
 801ee36:	2300      	movs	r3, #0
 801ee38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ee3c:	682f      	ldr	r7, [r5, #0]
 801ee3e:	6a21      	ldr	r1, [r4, #32]
 801ee40:	602b      	str	r3, [r5, #0]
 801ee42:	d030      	beq.n	801eea6 <__sflush_r+0x92>
 801ee44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ee46:	89a3      	ldrh	r3, [r4, #12]
 801ee48:	0759      	lsls	r1, r3, #29
 801ee4a:	d505      	bpl.n	801ee58 <__sflush_r+0x44>
 801ee4c:	6863      	ldr	r3, [r4, #4]
 801ee4e:	1ad2      	subs	r2, r2, r3
 801ee50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ee52:	b10b      	cbz	r3, 801ee58 <__sflush_r+0x44>
 801ee54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ee56:	1ad2      	subs	r2, r2, r3
 801ee58:	2300      	movs	r3, #0
 801ee5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ee5c:	6a21      	ldr	r1, [r4, #32]
 801ee5e:	4628      	mov	r0, r5
 801ee60:	47b0      	blx	r6
 801ee62:	1c43      	adds	r3, r0, #1
 801ee64:	89a3      	ldrh	r3, [r4, #12]
 801ee66:	d106      	bne.n	801ee76 <__sflush_r+0x62>
 801ee68:	6829      	ldr	r1, [r5, #0]
 801ee6a:	291d      	cmp	r1, #29
 801ee6c:	d82b      	bhi.n	801eec6 <__sflush_r+0xb2>
 801ee6e:	4a2a      	ldr	r2, [pc, #168]	@ (801ef18 <__sflush_r+0x104>)
 801ee70:	410a      	asrs	r2, r1
 801ee72:	07d6      	lsls	r6, r2, #31
 801ee74:	d427      	bmi.n	801eec6 <__sflush_r+0xb2>
 801ee76:	2200      	movs	r2, #0
 801ee78:	6062      	str	r2, [r4, #4]
 801ee7a:	04d9      	lsls	r1, r3, #19
 801ee7c:	6922      	ldr	r2, [r4, #16]
 801ee7e:	6022      	str	r2, [r4, #0]
 801ee80:	d504      	bpl.n	801ee8c <__sflush_r+0x78>
 801ee82:	1c42      	adds	r2, r0, #1
 801ee84:	d101      	bne.n	801ee8a <__sflush_r+0x76>
 801ee86:	682b      	ldr	r3, [r5, #0]
 801ee88:	b903      	cbnz	r3, 801ee8c <__sflush_r+0x78>
 801ee8a:	6560      	str	r0, [r4, #84]	@ 0x54
 801ee8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ee8e:	602f      	str	r7, [r5, #0]
 801ee90:	b1b9      	cbz	r1, 801eec2 <__sflush_r+0xae>
 801ee92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ee96:	4299      	cmp	r1, r3
 801ee98:	d002      	beq.n	801eea0 <__sflush_r+0x8c>
 801ee9a:	4628      	mov	r0, r5
 801ee9c:	f7fe fccc 	bl	801d838 <_free_r>
 801eea0:	2300      	movs	r3, #0
 801eea2:	6363      	str	r3, [r4, #52]	@ 0x34
 801eea4:	e00d      	b.n	801eec2 <__sflush_r+0xae>
 801eea6:	2301      	movs	r3, #1
 801eea8:	4628      	mov	r0, r5
 801eeaa:	47b0      	blx	r6
 801eeac:	4602      	mov	r2, r0
 801eeae:	1c50      	adds	r0, r2, #1
 801eeb0:	d1c9      	bne.n	801ee46 <__sflush_r+0x32>
 801eeb2:	682b      	ldr	r3, [r5, #0]
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d0c6      	beq.n	801ee46 <__sflush_r+0x32>
 801eeb8:	2b1d      	cmp	r3, #29
 801eeba:	d001      	beq.n	801eec0 <__sflush_r+0xac>
 801eebc:	2b16      	cmp	r3, #22
 801eebe:	d11e      	bne.n	801eefe <__sflush_r+0xea>
 801eec0:	602f      	str	r7, [r5, #0]
 801eec2:	2000      	movs	r0, #0
 801eec4:	e022      	b.n	801ef0c <__sflush_r+0xf8>
 801eec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eeca:	b21b      	sxth	r3, r3
 801eecc:	e01b      	b.n	801ef06 <__sflush_r+0xf2>
 801eece:	690f      	ldr	r7, [r1, #16]
 801eed0:	2f00      	cmp	r7, #0
 801eed2:	d0f6      	beq.n	801eec2 <__sflush_r+0xae>
 801eed4:	0793      	lsls	r3, r2, #30
 801eed6:	680e      	ldr	r6, [r1, #0]
 801eed8:	bf08      	it	eq
 801eeda:	694b      	ldreq	r3, [r1, #20]
 801eedc:	600f      	str	r7, [r1, #0]
 801eede:	bf18      	it	ne
 801eee0:	2300      	movne	r3, #0
 801eee2:	eba6 0807 	sub.w	r8, r6, r7
 801eee6:	608b      	str	r3, [r1, #8]
 801eee8:	f1b8 0f00 	cmp.w	r8, #0
 801eeec:	dde9      	ble.n	801eec2 <__sflush_r+0xae>
 801eeee:	6a21      	ldr	r1, [r4, #32]
 801eef0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801eef2:	4643      	mov	r3, r8
 801eef4:	463a      	mov	r2, r7
 801eef6:	4628      	mov	r0, r5
 801eef8:	47b0      	blx	r6
 801eefa:	2800      	cmp	r0, #0
 801eefc:	dc08      	bgt.n	801ef10 <__sflush_r+0xfc>
 801eefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ef02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ef06:	81a3      	strh	r3, [r4, #12]
 801ef08:	f04f 30ff 	mov.w	r0, #4294967295
 801ef0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef10:	4407      	add	r7, r0
 801ef12:	eba8 0800 	sub.w	r8, r8, r0
 801ef16:	e7e7      	b.n	801eee8 <__sflush_r+0xd4>
 801ef18:	dfbffffe 	.word	0xdfbffffe

0801ef1c <_fflush_r>:
 801ef1c:	b538      	push	{r3, r4, r5, lr}
 801ef1e:	690b      	ldr	r3, [r1, #16]
 801ef20:	4605      	mov	r5, r0
 801ef22:	460c      	mov	r4, r1
 801ef24:	b913      	cbnz	r3, 801ef2c <_fflush_r+0x10>
 801ef26:	2500      	movs	r5, #0
 801ef28:	4628      	mov	r0, r5
 801ef2a:	bd38      	pop	{r3, r4, r5, pc}
 801ef2c:	b118      	cbz	r0, 801ef36 <_fflush_r+0x1a>
 801ef2e:	6a03      	ldr	r3, [r0, #32]
 801ef30:	b90b      	cbnz	r3, 801ef36 <_fflush_r+0x1a>
 801ef32:	f7fd fc11 	bl	801c758 <__sinit>
 801ef36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ef3a:	2b00      	cmp	r3, #0
 801ef3c:	d0f3      	beq.n	801ef26 <_fflush_r+0xa>
 801ef3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ef40:	07d0      	lsls	r0, r2, #31
 801ef42:	d404      	bmi.n	801ef4e <_fflush_r+0x32>
 801ef44:	0599      	lsls	r1, r3, #22
 801ef46:	d402      	bmi.n	801ef4e <_fflush_r+0x32>
 801ef48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ef4a:	f7fd fde4 	bl	801cb16 <__retarget_lock_acquire_recursive>
 801ef4e:	4628      	mov	r0, r5
 801ef50:	4621      	mov	r1, r4
 801ef52:	f7ff ff5f 	bl	801ee14 <__sflush_r>
 801ef56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ef58:	07da      	lsls	r2, r3, #31
 801ef5a:	4605      	mov	r5, r0
 801ef5c:	d4e4      	bmi.n	801ef28 <_fflush_r+0xc>
 801ef5e:	89a3      	ldrh	r3, [r4, #12]
 801ef60:	059b      	lsls	r3, r3, #22
 801ef62:	d4e1      	bmi.n	801ef28 <_fflush_r+0xc>
 801ef64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ef66:	f7fd fdd7 	bl	801cb18 <__retarget_lock_release_recursive>
 801ef6a:	e7dd      	b.n	801ef28 <_fflush_r+0xc>

0801ef6c <fiprintf>:
 801ef6c:	b40e      	push	{r1, r2, r3}
 801ef6e:	b503      	push	{r0, r1, lr}
 801ef70:	4601      	mov	r1, r0
 801ef72:	ab03      	add	r3, sp, #12
 801ef74:	4805      	ldr	r0, [pc, #20]	@ (801ef8c <fiprintf+0x20>)
 801ef76:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef7a:	6800      	ldr	r0, [r0, #0]
 801ef7c:	9301      	str	r3, [sp, #4]
 801ef7e:	f7ff fe31 	bl	801ebe4 <_vfiprintf_r>
 801ef82:	b002      	add	sp, #8
 801ef84:	f85d eb04 	ldr.w	lr, [sp], #4
 801ef88:	b003      	add	sp, #12
 801ef8a:	4770      	bx	lr
 801ef8c:	200002bc 	.word	0x200002bc

0801ef90 <__swbuf_r>:
 801ef90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef92:	460e      	mov	r6, r1
 801ef94:	4614      	mov	r4, r2
 801ef96:	4605      	mov	r5, r0
 801ef98:	b118      	cbz	r0, 801efa2 <__swbuf_r+0x12>
 801ef9a:	6a03      	ldr	r3, [r0, #32]
 801ef9c:	b90b      	cbnz	r3, 801efa2 <__swbuf_r+0x12>
 801ef9e:	f7fd fbdb 	bl	801c758 <__sinit>
 801efa2:	69a3      	ldr	r3, [r4, #24]
 801efa4:	60a3      	str	r3, [r4, #8]
 801efa6:	89a3      	ldrh	r3, [r4, #12]
 801efa8:	071a      	lsls	r2, r3, #28
 801efaa:	d501      	bpl.n	801efb0 <__swbuf_r+0x20>
 801efac:	6923      	ldr	r3, [r4, #16]
 801efae:	b943      	cbnz	r3, 801efc2 <__swbuf_r+0x32>
 801efb0:	4621      	mov	r1, r4
 801efb2:	4628      	mov	r0, r5
 801efb4:	f000 f82a 	bl	801f00c <__swsetup_r>
 801efb8:	b118      	cbz	r0, 801efc2 <__swbuf_r+0x32>
 801efba:	f04f 37ff 	mov.w	r7, #4294967295
 801efbe:	4638      	mov	r0, r7
 801efc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801efc2:	6823      	ldr	r3, [r4, #0]
 801efc4:	6922      	ldr	r2, [r4, #16]
 801efc6:	1a98      	subs	r0, r3, r2
 801efc8:	6963      	ldr	r3, [r4, #20]
 801efca:	b2f6      	uxtb	r6, r6
 801efcc:	4283      	cmp	r3, r0
 801efce:	4637      	mov	r7, r6
 801efd0:	dc05      	bgt.n	801efde <__swbuf_r+0x4e>
 801efd2:	4621      	mov	r1, r4
 801efd4:	4628      	mov	r0, r5
 801efd6:	f7ff ffa1 	bl	801ef1c <_fflush_r>
 801efda:	2800      	cmp	r0, #0
 801efdc:	d1ed      	bne.n	801efba <__swbuf_r+0x2a>
 801efde:	68a3      	ldr	r3, [r4, #8]
 801efe0:	3b01      	subs	r3, #1
 801efe2:	60a3      	str	r3, [r4, #8]
 801efe4:	6823      	ldr	r3, [r4, #0]
 801efe6:	1c5a      	adds	r2, r3, #1
 801efe8:	6022      	str	r2, [r4, #0]
 801efea:	701e      	strb	r6, [r3, #0]
 801efec:	6962      	ldr	r2, [r4, #20]
 801efee:	1c43      	adds	r3, r0, #1
 801eff0:	429a      	cmp	r2, r3
 801eff2:	d004      	beq.n	801effe <__swbuf_r+0x6e>
 801eff4:	89a3      	ldrh	r3, [r4, #12]
 801eff6:	07db      	lsls	r3, r3, #31
 801eff8:	d5e1      	bpl.n	801efbe <__swbuf_r+0x2e>
 801effa:	2e0a      	cmp	r6, #10
 801effc:	d1df      	bne.n	801efbe <__swbuf_r+0x2e>
 801effe:	4621      	mov	r1, r4
 801f000:	4628      	mov	r0, r5
 801f002:	f7ff ff8b 	bl	801ef1c <_fflush_r>
 801f006:	2800      	cmp	r0, #0
 801f008:	d0d9      	beq.n	801efbe <__swbuf_r+0x2e>
 801f00a:	e7d6      	b.n	801efba <__swbuf_r+0x2a>

0801f00c <__swsetup_r>:
 801f00c:	b538      	push	{r3, r4, r5, lr}
 801f00e:	4b29      	ldr	r3, [pc, #164]	@ (801f0b4 <__swsetup_r+0xa8>)
 801f010:	4605      	mov	r5, r0
 801f012:	6818      	ldr	r0, [r3, #0]
 801f014:	460c      	mov	r4, r1
 801f016:	b118      	cbz	r0, 801f020 <__swsetup_r+0x14>
 801f018:	6a03      	ldr	r3, [r0, #32]
 801f01a:	b90b      	cbnz	r3, 801f020 <__swsetup_r+0x14>
 801f01c:	f7fd fb9c 	bl	801c758 <__sinit>
 801f020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f024:	0719      	lsls	r1, r3, #28
 801f026:	d422      	bmi.n	801f06e <__swsetup_r+0x62>
 801f028:	06da      	lsls	r2, r3, #27
 801f02a:	d407      	bmi.n	801f03c <__swsetup_r+0x30>
 801f02c:	2209      	movs	r2, #9
 801f02e:	602a      	str	r2, [r5, #0]
 801f030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f034:	81a3      	strh	r3, [r4, #12]
 801f036:	f04f 30ff 	mov.w	r0, #4294967295
 801f03a:	e033      	b.n	801f0a4 <__swsetup_r+0x98>
 801f03c:	0758      	lsls	r0, r3, #29
 801f03e:	d512      	bpl.n	801f066 <__swsetup_r+0x5a>
 801f040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f042:	b141      	cbz	r1, 801f056 <__swsetup_r+0x4a>
 801f044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f048:	4299      	cmp	r1, r3
 801f04a:	d002      	beq.n	801f052 <__swsetup_r+0x46>
 801f04c:	4628      	mov	r0, r5
 801f04e:	f7fe fbf3 	bl	801d838 <_free_r>
 801f052:	2300      	movs	r3, #0
 801f054:	6363      	str	r3, [r4, #52]	@ 0x34
 801f056:	89a3      	ldrh	r3, [r4, #12]
 801f058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f05c:	81a3      	strh	r3, [r4, #12]
 801f05e:	2300      	movs	r3, #0
 801f060:	6063      	str	r3, [r4, #4]
 801f062:	6923      	ldr	r3, [r4, #16]
 801f064:	6023      	str	r3, [r4, #0]
 801f066:	89a3      	ldrh	r3, [r4, #12]
 801f068:	f043 0308 	orr.w	r3, r3, #8
 801f06c:	81a3      	strh	r3, [r4, #12]
 801f06e:	6923      	ldr	r3, [r4, #16]
 801f070:	b94b      	cbnz	r3, 801f086 <__swsetup_r+0x7a>
 801f072:	89a3      	ldrh	r3, [r4, #12]
 801f074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f07c:	d003      	beq.n	801f086 <__swsetup_r+0x7a>
 801f07e:	4621      	mov	r1, r4
 801f080:	4628      	mov	r0, r5
 801f082:	f000 f8a2 	bl	801f1ca <__smakebuf_r>
 801f086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f08a:	f013 0201 	ands.w	r2, r3, #1
 801f08e:	d00a      	beq.n	801f0a6 <__swsetup_r+0x9a>
 801f090:	2200      	movs	r2, #0
 801f092:	60a2      	str	r2, [r4, #8]
 801f094:	6962      	ldr	r2, [r4, #20]
 801f096:	4252      	negs	r2, r2
 801f098:	61a2      	str	r2, [r4, #24]
 801f09a:	6922      	ldr	r2, [r4, #16]
 801f09c:	b942      	cbnz	r2, 801f0b0 <__swsetup_r+0xa4>
 801f09e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f0a2:	d1c5      	bne.n	801f030 <__swsetup_r+0x24>
 801f0a4:	bd38      	pop	{r3, r4, r5, pc}
 801f0a6:	0799      	lsls	r1, r3, #30
 801f0a8:	bf58      	it	pl
 801f0aa:	6962      	ldrpl	r2, [r4, #20]
 801f0ac:	60a2      	str	r2, [r4, #8]
 801f0ae:	e7f4      	b.n	801f09a <__swsetup_r+0x8e>
 801f0b0:	2000      	movs	r0, #0
 801f0b2:	e7f7      	b.n	801f0a4 <__swsetup_r+0x98>
 801f0b4:	200002bc 	.word	0x200002bc

0801f0b8 <memmove>:
 801f0b8:	4288      	cmp	r0, r1
 801f0ba:	b510      	push	{r4, lr}
 801f0bc:	eb01 0402 	add.w	r4, r1, r2
 801f0c0:	d902      	bls.n	801f0c8 <memmove+0x10>
 801f0c2:	4284      	cmp	r4, r0
 801f0c4:	4623      	mov	r3, r4
 801f0c6:	d807      	bhi.n	801f0d8 <memmove+0x20>
 801f0c8:	1e43      	subs	r3, r0, #1
 801f0ca:	42a1      	cmp	r1, r4
 801f0cc:	d008      	beq.n	801f0e0 <memmove+0x28>
 801f0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f0d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f0d6:	e7f8      	b.n	801f0ca <memmove+0x12>
 801f0d8:	4402      	add	r2, r0
 801f0da:	4601      	mov	r1, r0
 801f0dc:	428a      	cmp	r2, r1
 801f0de:	d100      	bne.n	801f0e2 <memmove+0x2a>
 801f0e0:	bd10      	pop	{r4, pc}
 801f0e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f0e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f0ea:	e7f7      	b.n	801f0dc <memmove+0x24>

0801f0ec <abort>:
 801f0ec:	b508      	push	{r3, lr}
 801f0ee:	2006      	movs	r0, #6
 801f0f0:	f000 f8d0 	bl	801f294 <raise>
 801f0f4:	2001      	movs	r0, #1
 801f0f6:	f7e8 f9f7 	bl	80074e8 <_exit>

0801f0fa <_calloc_r>:
 801f0fa:	b570      	push	{r4, r5, r6, lr}
 801f0fc:	fba1 5402 	umull	r5, r4, r1, r2
 801f100:	b93c      	cbnz	r4, 801f112 <_calloc_r+0x18>
 801f102:	4629      	mov	r1, r5
 801f104:	f7fb fcb2 	bl	801aa6c <_malloc_r>
 801f108:	4606      	mov	r6, r0
 801f10a:	b928      	cbnz	r0, 801f118 <_calloc_r+0x1e>
 801f10c:	2600      	movs	r6, #0
 801f10e:	4630      	mov	r0, r6
 801f110:	bd70      	pop	{r4, r5, r6, pc}
 801f112:	220c      	movs	r2, #12
 801f114:	6002      	str	r2, [r0, #0]
 801f116:	e7f9      	b.n	801f10c <_calloc_r+0x12>
 801f118:	462a      	mov	r2, r5
 801f11a:	4621      	mov	r1, r4
 801f11c:	f7fd fbe9 	bl	801c8f2 <memset>
 801f120:	e7f5      	b.n	801f10e <_calloc_r+0x14>

0801f122 <_realloc_r>:
 801f122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f126:	4680      	mov	r8, r0
 801f128:	4615      	mov	r5, r2
 801f12a:	460c      	mov	r4, r1
 801f12c:	b921      	cbnz	r1, 801f138 <_realloc_r+0x16>
 801f12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f132:	4611      	mov	r1, r2
 801f134:	f7fb bc9a 	b.w	801aa6c <_malloc_r>
 801f138:	b92a      	cbnz	r2, 801f146 <_realloc_r+0x24>
 801f13a:	f7fe fb7d 	bl	801d838 <_free_r>
 801f13e:	2400      	movs	r4, #0
 801f140:	4620      	mov	r0, r4
 801f142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f146:	f000 f8e3 	bl	801f310 <_malloc_usable_size_r>
 801f14a:	4285      	cmp	r5, r0
 801f14c:	4606      	mov	r6, r0
 801f14e:	d802      	bhi.n	801f156 <_realloc_r+0x34>
 801f150:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801f154:	d8f4      	bhi.n	801f140 <_realloc_r+0x1e>
 801f156:	4629      	mov	r1, r5
 801f158:	4640      	mov	r0, r8
 801f15a:	f7fb fc87 	bl	801aa6c <_malloc_r>
 801f15e:	4607      	mov	r7, r0
 801f160:	2800      	cmp	r0, #0
 801f162:	d0ec      	beq.n	801f13e <_realloc_r+0x1c>
 801f164:	42b5      	cmp	r5, r6
 801f166:	462a      	mov	r2, r5
 801f168:	4621      	mov	r1, r4
 801f16a:	bf28      	it	cs
 801f16c:	4632      	movcs	r2, r6
 801f16e:	f7fd fcdc 	bl	801cb2a <memcpy>
 801f172:	4621      	mov	r1, r4
 801f174:	4640      	mov	r0, r8
 801f176:	f7fe fb5f 	bl	801d838 <_free_r>
 801f17a:	463c      	mov	r4, r7
 801f17c:	e7e0      	b.n	801f140 <_realloc_r+0x1e>

0801f17e <__swhatbuf_r>:
 801f17e:	b570      	push	{r4, r5, r6, lr}
 801f180:	460c      	mov	r4, r1
 801f182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f186:	2900      	cmp	r1, #0
 801f188:	b096      	sub	sp, #88	@ 0x58
 801f18a:	4615      	mov	r5, r2
 801f18c:	461e      	mov	r6, r3
 801f18e:	da0d      	bge.n	801f1ac <__swhatbuf_r+0x2e>
 801f190:	89a3      	ldrh	r3, [r4, #12]
 801f192:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f196:	f04f 0100 	mov.w	r1, #0
 801f19a:	bf14      	ite	ne
 801f19c:	2340      	movne	r3, #64	@ 0x40
 801f19e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f1a2:	2000      	movs	r0, #0
 801f1a4:	6031      	str	r1, [r6, #0]
 801f1a6:	602b      	str	r3, [r5, #0]
 801f1a8:	b016      	add	sp, #88	@ 0x58
 801f1aa:	bd70      	pop	{r4, r5, r6, pc}
 801f1ac:	466a      	mov	r2, sp
 801f1ae:	f000 f879 	bl	801f2a4 <_fstat_r>
 801f1b2:	2800      	cmp	r0, #0
 801f1b4:	dbec      	blt.n	801f190 <__swhatbuf_r+0x12>
 801f1b6:	9901      	ldr	r1, [sp, #4]
 801f1b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f1bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f1c0:	4259      	negs	r1, r3
 801f1c2:	4159      	adcs	r1, r3
 801f1c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f1c8:	e7eb      	b.n	801f1a2 <__swhatbuf_r+0x24>

0801f1ca <__smakebuf_r>:
 801f1ca:	898b      	ldrh	r3, [r1, #12]
 801f1cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f1ce:	079d      	lsls	r5, r3, #30
 801f1d0:	4606      	mov	r6, r0
 801f1d2:	460c      	mov	r4, r1
 801f1d4:	d507      	bpl.n	801f1e6 <__smakebuf_r+0x1c>
 801f1d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f1da:	6023      	str	r3, [r4, #0]
 801f1dc:	6123      	str	r3, [r4, #16]
 801f1de:	2301      	movs	r3, #1
 801f1e0:	6163      	str	r3, [r4, #20]
 801f1e2:	b003      	add	sp, #12
 801f1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1e6:	ab01      	add	r3, sp, #4
 801f1e8:	466a      	mov	r2, sp
 801f1ea:	f7ff ffc8 	bl	801f17e <__swhatbuf_r>
 801f1ee:	9f00      	ldr	r7, [sp, #0]
 801f1f0:	4605      	mov	r5, r0
 801f1f2:	4639      	mov	r1, r7
 801f1f4:	4630      	mov	r0, r6
 801f1f6:	f7fb fc39 	bl	801aa6c <_malloc_r>
 801f1fa:	b948      	cbnz	r0, 801f210 <__smakebuf_r+0x46>
 801f1fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f200:	059a      	lsls	r2, r3, #22
 801f202:	d4ee      	bmi.n	801f1e2 <__smakebuf_r+0x18>
 801f204:	f023 0303 	bic.w	r3, r3, #3
 801f208:	f043 0302 	orr.w	r3, r3, #2
 801f20c:	81a3      	strh	r3, [r4, #12]
 801f20e:	e7e2      	b.n	801f1d6 <__smakebuf_r+0xc>
 801f210:	89a3      	ldrh	r3, [r4, #12]
 801f212:	6020      	str	r0, [r4, #0]
 801f214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f218:	81a3      	strh	r3, [r4, #12]
 801f21a:	9b01      	ldr	r3, [sp, #4]
 801f21c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f220:	b15b      	cbz	r3, 801f23a <__smakebuf_r+0x70>
 801f222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f226:	4630      	mov	r0, r6
 801f228:	f000 f84e 	bl	801f2c8 <_isatty_r>
 801f22c:	b128      	cbz	r0, 801f23a <__smakebuf_r+0x70>
 801f22e:	89a3      	ldrh	r3, [r4, #12]
 801f230:	f023 0303 	bic.w	r3, r3, #3
 801f234:	f043 0301 	orr.w	r3, r3, #1
 801f238:	81a3      	strh	r3, [r4, #12]
 801f23a:	89a3      	ldrh	r3, [r4, #12]
 801f23c:	431d      	orrs	r5, r3
 801f23e:	81a5      	strh	r5, [r4, #12]
 801f240:	e7cf      	b.n	801f1e2 <__smakebuf_r+0x18>

0801f242 <_raise_r>:
 801f242:	291f      	cmp	r1, #31
 801f244:	b538      	push	{r3, r4, r5, lr}
 801f246:	4605      	mov	r5, r0
 801f248:	460c      	mov	r4, r1
 801f24a:	d904      	bls.n	801f256 <_raise_r+0x14>
 801f24c:	2316      	movs	r3, #22
 801f24e:	6003      	str	r3, [r0, #0]
 801f250:	f04f 30ff 	mov.w	r0, #4294967295
 801f254:	bd38      	pop	{r3, r4, r5, pc}
 801f256:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f258:	b112      	cbz	r2, 801f260 <_raise_r+0x1e>
 801f25a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f25e:	b94b      	cbnz	r3, 801f274 <_raise_r+0x32>
 801f260:	4628      	mov	r0, r5
 801f262:	f000 f853 	bl	801f30c <_getpid_r>
 801f266:	4622      	mov	r2, r4
 801f268:	4601      	mov	r1, r0
 801f26a:	4628      	mov	r0, r5
 801f26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f270:	f000 b83a 	b.w	801f2e8 <_kill_r>
 801f274:	2b01      	cmp	r3, #1
 801f276:	d00a      	beq.n	801f28e <_raise_r+0x4c>
 801f278:	1c59      	adds	r1, r3, #1
 801f27a:	d103      	bne.n	801f284 <_raise_r+0x42>
 801f27c:	2316      	movs	r3, #22
 801f27e:	6003      	str	r3, [r0, #0]
 801f280:	2001      	movs	r0, #1
 801f282:	e7e7      	b.n	801f254 <_raise_r+0x12>
 801f284:	2100      	movs	r1, #0
 801f286:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f28a:	4620      	mov	r0, r4
 801f28c:	4798      	blx	r3
 801f28e:	2000      	movs	r0, #0
 801f290:	e7e0      	b.n	801f254 <_raise_r+0x12>
	...

0801f294 <raise>:
 801f294:	4b02      	ldr	r3, [pc, #8]	@ (801f2a0 <raise+0xc>)
 801f296:	4601      	mov	r1, r0
 801f298:	6818      	ldr	r0, [r3, #0]
 801f29a:	f7ff bfd2 	b.w	801f242 <_raise_r>
 801f29e:	bf00      	nop
 801f2a0:	200002bc 	.word	0x200002bc

0801f2a4 <_fstat_r>:
 801f2a4:	b538      	push	{r3, r4, r5, lr}
 801f2a6:	4d07      	ldr	r5, [pc, #28]	@ (801f2c4 <_fstat_r+0x20>)
 801f2a8:	2300      	movs	r3, #0
 801f2aa:	4604      	mov	r4, r0
 801f2ac:	4608      	mov	r0, r1
 801f2ae:	4611      	mov	r1, r2
 801f2b0:	602b      	str	r3, [r5, #0]
 801f2b2:	f7e8 f969 	bl	8007588 <_fstat>
 801f2b6:	1c43      	adds	r3, r0, #1
 801f2b8:	d102      	bne.n	801f2c0 <_fstat_r+0x1c>
 801f2ba:	682b      	ldr	r3, [r5, #0]
 801f2bc:	b103      	cbz	r3, 801f2c0 <_fstat_r+0x1c>
 801f2be:	6023      	str	r3, [r4, #0]
 801f2c0:	bd38      	pop	{r3, r4, r5, pc}
 801f2c2:	bf00      	nop
 801f2c4:	20003220 	.word	0x20003220

0801f2c8 <_isatty_r>:
 801f2c8:	b538      	push	{r3, r4, r5, lr}
 801f2ca:	4d06      	ldr	r5, [pc, #24]	@ (801f2e4 <_isatty_r+0x1c>)
 801f2cc:	2300      	movs	r3, #0
 801f2ce:	4604      	mov	r4, r0
 801f2d0:	4608      	mov	r0, r1
 801f2d2:	602b      	str	r3, [r5, #0]
 801f2d4:	f7e8 f968 	bl	80075a8 <_isatty>
 801f2d8:	1c43      	adds	r3, r0, #1
 801f2da:	d102      	bne.n	801f2e2 <_isatty_r+0x1a>
 801f2dc:	682b      	ldr	r3, [r5, #0]
 801f2de:	b103      	cbz	r3, 801f2e2 <_isatty_r+0x1a>
 801f2e0:	6023      	str	r3, [r4, #0]
 801f2e2:	bd38      	pop	{r3, r4, r5, pc}
 801f2e4:	20003220 	.word	0x20003220

0801f2e8 <_kill_r>:
 801f2e8:	b538      	push	{r3, r4, r5, lr}
 801f2ea:	4d07      	ldr	r5, [pc, #28]	@ (801f308 <_kill_r+0x20>)
 801f2ec:	2300      	movs	r3, #0
 801f2ee:	4604      	mov	r4, r0
 801f2f0:	4608      	mov	r0, r1
 801f2f2:	4611      	mov	r1, r2
 801f2f4:	602b      	str	r3, [r5, #0]
 801f2f6:	f7e8 f8e7 	bl	80074c8 <_kill>
 801f2fa:	1c43      	adds	r3, r0, #1
 801f2fc:	d102      	bne.n	801f304 <_kill_r+0x1c>
 801f2fe:	682b      	ldr	r3, [r5, #0]
 801f300:	b103      	cbz	r3, 801f304 <_kill_r+0x1c>
 801f302:	6023      	str	r3, [r4, #0]
 801f304:	bd38      	pop	{r3, r4, r5, pc}
 801f306:	bf00      	nop
 801f308:	20003220 	.word	0x20003220

0801f30c <_getpid_r>:
 801f30c:	f7e8 b8d4 	b.w	80074b8 <_getpid>

0801f310 <_malloc_usable_size_r>:
 801f310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f314:	1f18      	subs	r0, r3, #4
 801f316:	2b00      	cmp	r3, #0
 801f318:	bfbc      	itt	lt
 801f31a:	580b      	ldrlt	r3, [r1, r0]
 801f31c:	18c0      	addlt	r0, r0, r3
 801f31e:	4770      	bx	lr

0801f320 <cos>:
 801f320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f322:	ec53 2b10 	vmov	r2, r3, d0
 801f326:	4826      	ldr	r0, [pc, #152]	@ (801f3c0 <cos+0xa0>)
 801f328:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f32c:	4281      	cmp	r1, r0
 801f32e:	d806      	bhi.n	801f33e <cos+0x1e>
 801f330:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801f3b8 <cos+0x98>
 801f334:	b005      	add	sp, #20
 801f336:	f85d eb04 	ldr.w	lr, [sp], #4
 801f33a:	f000 b9dd 	b.w	801f6f8 <__kernel_cos>
 801f33e:	4821      	ldr	r0, [pc, #132]	@ (801f3c4 <cos+0xa4>)
 801f340:	4281      	cmp	r1, r0
 801f342:	d908      	bls.n	801f356 <cos+0x36>
 801f344:	4610      	mov	r0, r2
 801f346:	4619      	mov	r1, r3
 801f348:	f7e0 ff76 	bl	8000238 <__aeabi_dsub>
 801f34c:	ec41 0b10 	vmov	d0, r0, r1
 801f350:	b005      	add	sp, #20
 801f352:	f85d fb04 	ldr.w	pc, [sp], #4
 801f356:	4668      	mov	r0, sp
 801f358:	f000 fb52 	bl	801fa00 <__ieee754_rem_pio2>
 801f35c:	f000 0003 	and.w	r0, r0, #3
 801f360:	2801      	cmp	r0, #1
 801f362:	d00b      	beq.n	801f37c <cos+0x5c>
 801f364:	2802      	cmp	r0, #2
 801f366:	d015      	beq.n	801f394 <cos+0x74>
 801f368:	b9d8      	cbnz	r0, 801f3a2 <cos+0x82>
 801f36a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f36e:	ed9d 0b00 	vldr	d0, [sp]
 801f372:	f000 f9c1 	bl	801f6f8 <__kernel_cos>
 801f376:	ec51 0b10 	vmov	r0, r1, d0
 801f37a:	e7e7      	b.n	801f34c <cos+0x2c>
 801f37c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f380:	ed9d 0b00 	vldr	d0, [sp]
 801f384:	f000 fa80 	bl	801f888 <__kernel_sin>
 801f388:	ec53 2b10 	vmov	r2, r3, d0
 801f38c:	4610      	mov	r0, r2
 801f38e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f392:	e7db      	b.n	801f34c <cos+0x2c>
 801f394:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f398:	ed9d 0b00 	vldr	d0, [sp]
 801f39c:	f000 f9ac 	bl	801f6f8 <__kernel_cos>
 801f3a0:	e7f2      	b.n	801f388 <cos+0x68>
 801f3a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f3a6:	ed9d 0b00 	vldr	d0, [sp]
 801f3aa:	2001      	movs	r0, #1
 801f3ac:	f000 fa6c 	bl	801f888 <__kernel_sin>
 801f3b0:	e7e1      	b.n	801f376 <cos+0x56>
 801f3b2:	bf00      	nop
 801f3b4:	f3af 8000 	nop.w
	...
 801f3c0:	3fe921fb 	.word	0x3fe921fb
 801f3c4:	7fefffff 	.word	0x7fefffff

0801f3c8 <sin>:
 801f3c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f3ca:	ec53 2b10 	vmov	r2, r3, d0
 801f3ce:	4826      	ldr	r0, [pc, #152]	@ (801f468 <sin+0xa0>)
 801f3d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f3d4:	4281      	cmp	r1, r0
 801f3d6:	d807      	bhi.n	801f3e8 <sin+0x20>
 801f3d8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801f460 <sin+0x98>
 801f3dc:	2000      	movs	r0, #0
 801f3de:	b005      	add	sp, #20
 801f3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f3e4:	f000 ba50 	b.w	801f888 <__kernel_sin>
 801f3e8:	4820      	ldr	r0, [pc, #128]	@ (801f46c <sin+0xa4>)
 801f3ea:	4281      	cmp	r1, r0
 801f3ec:	d908      	bls.n	801f400 <sin+0x38>
 801f3ee:	4610      	mov	r0, r2
 801f3f0:	4619      	mov	r1, r3
 801f3f2:	f7e0 ff21 	bl	8000238 <__aeabi_dsub>
 801f3f6:	ec41 0b10 	vmov	d0, r0, r1
 801f3fa:	b005      	add	sp, #20
 801f3fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801f400:	4668      	mov	r0, sp
 801f402:	f000 fafd 	bl	801fa00 <__ieee754_rem_pio2>
 801f406:	f000 0003 	and.w	r0, r0, #3
 801f40a:	2801      	cmp	r0, #1
 801f40c:	d00c      	beq.n	801f428 <sin+0x60>
 801f40e:	2802      	cmp	r0, #2
 801f410:	d011      	beq.n	801f436 <sin+0x6e>
 801f412:	b9e8      	cbnz	r0, 801f450 <sin+0x88>
 801f414:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f418:	ed9d 0b00 	vldr	d0, [sp]
 801f41c:	2001      	movs	r0, #1
 801f41e:	f000 fa33 	bl	801f888 <__kernel_sin>
 801f422:	ec51 0b10 	vmov	r0, r1, d0
 801f426:	e7e6      	b.n	801f3f6 <sin+0x2e>
 801f428:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f42c:	ed9d 0b00 	vldr	d0, [sp]
 801f430:	f000 f962 	bl	801f6f8 <__kernel_cos>
 801f434:	e7f5      	b.n	801f422 <sin+0x5a>
 801f436:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f43a:	ed9d 0b00 	vldr	d0, [sp]
 801f43e:	2001      	movs	r0, #1
 801f440:	f000 fa22 	bl	801f888 <__kernel_sin>
 801f444:	ec53 2b10 	vmov	r2, r3, d0
 801f448:	4610      	mov	r0, r2
 801f44a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f44e:	e7d2      	b.n	801f3f6 <sin+0x2e>
 801f450:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f454:	ed9d 0b00 	vldr	d0, [sp]
 801f458:	f000 f94e 	bl	801f6f8 <__kernel_cos>
 801f45c:	e7f2      	b.n	801f444 <sin+0x7c>
 801f45e:	bf00      	nop
	...
 801f468:	3fe921fb 	.word	0x3fe921fb
 801f46c:	7fefffff 	.word	0x7fefffff

0801f470 <expf>:
 801f470:	b508      	push	{r3, lr}
 801f472:	ed2d 8b02 	vpush	{d8}
 801f476:	eef0 8a40 	vmov.f32	s17, s0
 801f47a:	f000 fcf9 	bl	801fe70 <__ieee754_expf>
 801f47e:	eeb0 8a40 	vmov.f32	s16, s0
 801f482:	eeb0 0a68 	vmov.f32	s0, s17
 801f486:	f000 f8ab 	bl	801f5e0 <finitef>
 801f48a:	b160      	cbz	r0, 801f4a6 <expf+0x36>
 801f48c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801f4cc <expf+0x5c>
 801f490:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f498:	dd0a      	ble.n	801f4b0 <expf+0x40>
 801f49a:	f7fd fb11 	bl	801cac0 <__errno>
 801f49e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801f4d0 <expf+0x60>
 801f4a2:	2322      	movs	r3, #34	@ 0x22
 801f4a4:	6003      	str	r3, [r0, #0]
 801f4a6:	eeb0 0a48 	vmov.f32	s0, s16
 801f4aa:	ecbd 8b02 	vpop	{d8}
 801f4ae:	bd08      	pop	{r3, pc}
 801f4b0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801f4d4 <expf+0x64>
 801f4b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4bc:	d5f3      	bpl.n	801f4a6 <expf+0x36>
 801f4be:	f7fd faff 	bl	801cac0 <__errno>
 801f4c2:	2322      	movs	r3, #34	@ 0x22
 801f4c4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801f4d8 <expf+0x68>
 801f4c8:	6003      	str	r3, [r0, #0]
 801f4ca:	e7ec      	b.n	801f4a6 <expf+0x36>
 801f4cc:	42b17217 	.word	0x42b17217
 801f4d0:	7f800000 	.word	0x7f800000
 801f4d4:	c2cff1b5 	.word	0xc2cff1b5
 801f4d8:	00000000 	.word	0x00000000

0801f4dc <logf>:
 801f4dc:	b508      	push	{r3, lr}
 801f4de:	ed2d 8b02 	vpush	{d8}
 801f4e2:	eeb0 8a40 	vmov.f32	s16, s0
 801f4e6:	f000 fd91 	bl	802000c <__ieee754_logf>
 801f4ea:	eeb4 8a48 	vcmp.f32	s16, s16
 801f4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4f2:	d60f      	bvs.n	801f514 <logf+0x38>
 801f4f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801f4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4fc:	dc0a      	bgt.n	801f514 <logf+0x38>
 801f4fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f506:	d108      	bne.n	801f51a <logf+0x3e>
 801f508:	f7fd fada 	bl	801cac0 <__errno>
 801f50c:	2322      	movs	r3, #34	@ 0x22
 801f50e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801f530 <logf+0x54>
 801f512:	6003      	str	r3, [r0, #0]
 801f514:	ecbd 8b02 	vpop	{d8}
 801f518:	bd08      	pop	{r3, pc}
 801f51a:	f7fd fad1 	bl	801cac0 <__errno>
 801f51e:	ecbd 8b02 	vpop	{d8}
 801f522:	2321      	movs	r3, #33	@ 0x21
 801f524:	6003      	str	r3, [r0, #0]
 801f526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f52a:	4802      	ldr	r0, [pc, #8]	@ (801f534 <logf+0x58>)
 801f52c:	f7fd bb14 	b.w	801cb58 <nanf>
 801f530:	ff800000 	.word	0xff800000
 801f534:	0802349e 	.word	0x0802349e

0801f538 <fmin>:
 801f538:	b508      	push	{r3, lr}
 801f53a:	ed2d 8b04 	vpush	{d8-d9}
 801f53e:	eeb0 8a40 	vmov.f32	s16, s0
 801f542:	eef0 8a60 	vmov.f32	s17, s1
 801f546:	eeb0 9a41 	vmov.f32	s18, s2
 801f54a:	eef0 9a61 	vmov.f32	s19, s3
 801f54e:	f000 f81d 	bl	801f58c <__fpclassifyd>
 801f552:	b950      	cbnz	r0, 801f56a <fmin+0x32>
 801f554:	eeb0 8a49 	vmov.f32	s16, s18
 801f558:	eef0 8a69 	vmov.f32	s17, s19
 801f55c:	eeb0 0a48 	vmov.f32	s0, s16
 801f560:	eef0 0a68 	vmov.f32	s1, s17
 801f564:	ecbd 8b04 	vpop	{d8-d9}
 801f568:	bd08      	pop	{r3, pc}
 801f56a:	eeb0 0a49 	vmov.f32	s0, s18
 801f56e:	eef0 0a69 	vmov.f32	s1, s19
 801f572:	f000 f80b 	bl	801f58c <__fpclassifyd>
 801f576:	2800      	cmp	r0, #0
 801f578:	d0f0      	beq.n	801f55c <fmin+0x24>
 801f57a:	ec53 2b19 	vmov	r2, r3, d9
 801f57e:	ec51 0b18 	vmov	r0, r1, d8
 801f582:	f7e1 fa83 	bl	8000a8c <__aeabi_dcmplt>
 801f586:	2800      	cmp	r0, #0
 801f588:	d0e4      	beq.n	801f554 <fmin+0x1c>
 801f58a:	e7e7      	b.n	801f55c <fmin+0x24>

0801f58c <__fpclassifyd>:
 801f58c:	ec51 0b10 	vmov	r0, r1, d0
 801f590:	b510      	push	{r4, lr}
 801f592:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801f596:	460b      	mov	r3, r1
 801f598:	d019      	beq.n	801f5ce <__fpclassifyd+0x42>
 801f59a:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801f59e:	490e      	ldr	r1, [pc, #56]	@ (801f5d8 <__fpclassifyd+0x4c>)
 801f5a0:	428a      	cmp	r2, r1
 801f5a2:	d90e      	bls.n	801f5c2 <__fpclassifyd+0x36>
 801f5a4:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801f5a8:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801f5ac:	428a      	cmp	r2, r1
 801f5ae:	d908      	bls.n	801f5c2 <__fpclassifyd+0x36>
 801f5b0:	4a0a      	ldr	r2, [pc, #40]	@ (801f5dc <__fpclassifyd+0x50>)
 801f5b2:	4213      	tst	r3, r2
 801f5b4:	d007      	beq.n	801f5c6 <__fpclassifyd+0x3a>
 801f5b6:	4294      	cmp	r4, r2
 801f5b8:	d107      	bne.n	801f5ca <__fpclassifyd+0x3e>
 801f5ba:	fab0 f080 	clz	r0, r0
 801f5be:	0940      	lsrs	r0, r0, #5
 801f5c0:	bd10      	pop	{r4, pc}
 801f5c2:	2004      	movs	r0, #4
 801f5c4:	e7fc      	b.n	801f5c0 <__fpclassifyd+0x34>
 801f5c6:	2003      	movs	r0, #3
 801f5c8:	e7fa      	b.n	801f5c0 <__fpclassifyd+0x34>
 801f5ca:	2000      	movs	r0, #0
 801f5cc:	e7f8      	b.n	801f5c0 <__fpclassifyd+0x34>
 801f5ce:	2800      	cmp	r0, #0
 801f5d0:	d1ee      	bne.n	801f5b0 <__fpclassifyd+0x24>
 801f5d2:	2002      	movs	r0, #2
 801f5d4:	e7f4      	b.n	801f5c0 <__fpclassifyd+0x34>
 801f5d6:	bf00      	nop
 801f5d8:	7fdfffff 	.word	0x7fdfffff
 801f5dc:	7ff00000 	.word	0x7ff00000

0801f5e0 <finitef>:
 801f5e0:	ee10 3a10 	vmov	r3, s0
 801f5e4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801f5e8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801f5ec:	bfac      	ite	ge
 801f5ee:	2000      	movge	r0, #0
 801f5f0:	2001      	movlt	r0, #1
 801f5f2:	4770      	bx	lr

0801f5f4 <cosl>:
 801f5f4:	f7ff be94 	b.w	801f320 <cos>

0801f5f8 <sinl>:
 801f5f8:	f7ff bee6 	b.w	801f3c8 <sin>

0801f5fc <acosl>:
 801f5fc:	f000 bbfc 	b.w	801fdf8 <acos>

0801f600 <floor>:
 801f600:	ec51 0b10 	vmov	r0, r1, d0
 801f604:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801f608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f60c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801f610:	2e13      	cmp	r6, #19
 801f612:	460c      	mov	r4, r1
 801f614:	4605      	mov	r5, r0
 801f616:	4680      	mov	r8, r0
 801f618:	dc34      	bgt.n	801f684 <floor+0x84>
 801f61a:	2e00      	cmp	r6, #0
 801f61c:	da17      	bge.n	801f64e <floor+0x4e>
 801f61e:	a332      	add	r3, pc, #200	@ (adr r3, 801f6e8 <floor+0xe8>)
 801f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f624:	f7e0 fe0a 	bl	800023c <__adddf3>
 801f628:	2200      	movs	r2, #0
 801f62a:	2300      	movs	r3, #0
 801f62c:	f7e1 fa4c 	bl	8000ac8 <__aeabi_dcmpgt>
 801f630:	b150      	cbz	r0, 801f648 <floor+0x48>
 801f632:	2c00      	cmp	r4, #0
 801f634:	da55      	bge.n	801f6e2 <floor+0xe2>
 801f636:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801f63a:	432c      	orrs	r4, r5
 801f63c:	2500      	movs	r5, #0
 801f63e:	42ac      	cmp	r4, r5
 801f640:	4c2b      	ldr	r4, [pc, #172]	@ (801f6f0 <floor+0xf0>)
 801f642:	bf08      	it	eq
 801f644:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801f648:	4621      	mov	r1, r4
 801f64a:	4628      	mov	r0, r5
 801f64c:	e023      	b.n	801f696 <floor+0x96>
 801f64e:	4f29      	ldr	r7, [pc, #164]	@ (801f6f4 <floor+0xf4>)
 801f650:	4137      	asrs	r7, r6
 801f652:	ea01 0307 	and.w	r3, r1, r7
 801f656:	4303      	orrs	r3, r0
 801f658:	d01d      	beq.n	801f696 <floor+0x96>
 801f65a:	a323      	add	r3, pc, #140	@ (adr r3, 801f6e8 <floor+0xe8>)
 801f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f660:	f7e0 fdec 	bl	800023c <__adddf3>
 801f664:	2200      	movs	r2, #0
 801f666:	2300      	movs	r3, #0
 801f668:	f7e1 fa2e 	bl	8000ac8 <__aeabi_dcmpgt>
 801f66c:	2800      	cmp	r0, #0
 801f66e:	d0eb      	beq.n	801f648 <floor+0x48>
 801f670:	2c00      	cmp	r4, #0
 801f672:	bfbe      	ittt	lt
 801f674:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801f678:	4133      	asrlt	r3, r6
 801f67a:	18e4      	addlt	r4, r4, r3
 801f67c:	ea24 0407 	bic.w	r4, r4, r7
 801f680:	2500      	movs	r5, #0
 801f682:	e7e1      	b.n	801f648 <floor+0x48>
 801f684:	2e33      	cmp	r6, #51	@ 0x33
 801f686:	dd0a      	ble.n	801f69e <floor+0x9e>
 801f688:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801f68c:	d103      	bne.n	801f696 <floor+0x96>
 801f68e:	4602      	mov	r2, r0
 801f690:	460b      	mov	r3, r1
 801f692:	f7e0 fdd3 	bl	800023c <__adddf3>
 801f696:	ec41 0b10 	vmov	d0, r0, r1
 801f69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f69e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801f6a2:	f04f 37ff 	mov.w	r7, #4294967295
 801f6a6:	40df      	lsrs	r7, r3
 801f6a8:	4207      	tst	r7, r0
 801f6aa:	d0f4      	beq.n	801f696 <floor+0x96>
 801f6ac:	a30e      	add	r3, pc, #56	@ (adr r3, 801f6e8 <floor+0xe8>)
 801f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6b2:	f7e0 fdc3 	bl	800023c <__adddf3>
 801f6b6:	2200      	movs	r2, #0
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	f7e1 fa05 	bl	8000ac8 <__aeabi_dcmpgt>
 801f6be:	2800      	cmp	r0, #0
 801f6c0:	d0c2      	beq.n	801f648 <floor+0x48>
 801f6c2:	2c00      	cmp	r4, #0
 801f6c4:	da0a      	bge.n	801f6dc <floor+0xdc>
 801f6c6:	2e14      	cmp	r6, #20
 801f6c8:	d101      	bne.n	801f6ce <floor+0xce>
 801f6ca:	3401      	adds	r4, #1
 801f6cc:	e006      	b.n	801f6dc <floor+0xdc>
 801f6ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801f6d2:	2301      	movs	r3, #1
 801f6d4:	40b3      	lsls	r3, r6
 801f6d6:	441d      	add	r5, r3
 801f6d8:	4545      	cmp	r5, r8
 801f6da:	d3f6      	bcc.n	801f6ca <floor+0xca>
 801f6dc:	ea25 0507 	bic.w	r5, r5, r7
 801f6e0:	e7b2      	b.n	801f648 <floor+0x48>
 801f6e2:	2500      	movs	r5, #0
 801f6e4:	462c      	mov	r4, r5
 801f6e6:	e7af      	b.n	801f648 <floor+0x48>
 801f6e8:	8800759c 	.word	0x8800759c
 801f6ec:	7e37e43c 	.word	0x7e37e43c
 801f6f0:	bff00000 	.word	0xbff00000
 801f6f4:	000fffff 	.word	0x000fffff

0801f6f8 <__kernel_cos>:
 801f6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6fc:	ec57 6b10 	vmov	r6, r7, d0
 801f700:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801f704:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801f708:	ed8d 1b00 	vstr	d1, [sp]
 801f70c:	d206      	bcs.n	801f71c <__kernel_cos+0x24>
 801f70e:	4630      	mov	r0, r6
 801f710:	4639      	mov	r1, r7
 801f712:	f7e1 f9f9 	bl	8000b08 <__aeabi_d2iz>
 801f716:	2800      	cmp	r0, #0
 801f718:	f000 8088 	beq.w	801f82c <__kernel_cos+0x134>
 801f71c:	4632      	mov	r2, r6
 801f71e:	463b      	mov	r3, r7
 801f720:	4630      	mov	r0, r6
 801f722:	4639      	mov	r1, r7
 801f724:	f7e0 ff40 	bl	80005a8 <__aeabi_dmul>
 801f728:	4b51      	ldr	r3, [pc, #324]	@ (801f870 <__kernel_cos+0x178>)
 801f72a:	2200      	movs	r2, #0
 801f72c:	4604      	mov	r4, r0
 801f72e:	460d      	mov	r5, r1
 801f730:	f7e0 ff3a 	bl	80005a8 <__aeabi_dmul>
 801f734:	a340      	add	r3, pc, #256	@ (adr r3, 801f838 <__kernel_cos+0x140>)
 801f736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f73a:	4682      	mov	sl, r0
 801f73c:	468b      	mov	fp, r1
 801f73e:	4620      	mov	r0, r4
 801f740:	4629      	mov	r1, r5
 801f742:	f7e0 ff31 	bl	80005a8 <__aeabi_dmul>
 801f746:	a33e      	add	r3, pc, #248	@ (adr r3, 801f840 <__kernel_cos+0x148>)
 801f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f74c:	f7e0 fd76 	bl	800023c <__adddf3>
 801f750:	4622      	mov	r2, r4
 801f752:	462b      	mov	r3, r5
 801f754:	f7e0 ff28 	bl	80005a8 <__aeabi_dmul>
 801f758:	a33b      	add	r3, pc, #236	@ (adr r3, 801f848 <__kernel_cos+0x150>)
 801f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f75e:	f7e0 fd6b 	bl	8000238 <__aeabi_dsub>
 801f762:	4622      	mov	r2, r4
 801f764:	462b      	mov	r3, r5
 801f766:	f7e0 ff1f 	bl	80005a8 <__aeabi_dmul>
 801f76a:	a339      	add	r3, pc, #228	@ (adr r3, 801f850 <__kernel_cos+0x158>)
 801f76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f770:	f7e0 fd64 	bl	800023c <__adddf3>
 801f774:	4622      	mov	r2, r4
 801f776:	462b      	mov	r3, r5
 801f778:	f7e0 ff16 	bl	80005a8 <__aeabi_dmul>
 801f77c:	a336      	add	r3, pc, #216	@ (adr r3, 801f858 <__kernel_cos+0x160>)
 801f77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f782:	f7e0 fd59 	bl	8000238 <__aeabi_dsub>
 801f786:	4622      	mov	r2, r4
 801f788:	462b      	mov	r3, r5
 801f78a:	f7e0 ff0d 	bl	80005a8 <__aeabi_dmul>
 801f78e:	a334      	add	r3, pc, #208	@ (adr r3, 801f860 <__kernel_cos+0x168>)
 801f790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f794:	f7e0 fd52 	bl	800023c <__adddf3>
 801f798:	4622      	mov	r2, r4
 801f79a:	462b      	mov	r3, r5
 801f79c:	f7e0 ff04 	bl	80005a8 <__aeabi_dmul>
 801f7a0:	4622      	mov	r2, r4
 801f7a2:	462b      	mov	r3, r5
 801f7a4:	f7e0 ff00 	bl	80005a8 <__aeabi_dmul>
 801f7a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f7ac:	4604      	mov	r4, r0
 801f7ae:	460d      	mov	r5, r1
 801f7b0:	4630      	mov	r0, r6
 801f7b2:	4639      	mov	r1, r7
 801f7b4:	f7e0 fef8 	bl	80005a8 <__aeabi_dmul>
 801f7b8:	460b      	mov	r3, r1
 801f7ba:	4602      	mov	r2, r0
 801f7bc:	4629      	mov	r1, r5
 801f7be:	4620      	mov	r0, r4
 801f7c0:	f7e0 fd3a 	bl	8000238 <__aeabi_dsub>
 801f7c4:	4b2b      	ldr	r3, [pc, #172]	@ (801f874 <__kernel_cos+0x17c>)
 801f7c6:	4598      	cmp	r8, r3
 801f7c8:	4606      	mov	r6, r0
 801f7ca:	460f      	mov	r7, r1
 801f7cc:	d810      	bhi.n	801f7f0 <__kernel_cos+0xf8>
 801f7ce:	4602      	mov	r2, r0
 801f7d0:	460b      	mov	r3, r1
 801f7d2:	4650      	mov	r0, sl
 801f7d4:	4659      	mov	r1, fp
 801f7d6:	f7e0 fd2f 	bl	8000238 <__aeabi_dsub>
 801f7da:	460b      	mov	r3, r1
 801f7dc:	4926      	ldr	r1, [pc, #152]	@ (801f878 <__kernel_cos+0x180>)
 801f7de:	4602      	mov	r2, r0
 801f7e0:	2000      	movs	r0, #0
 801f7e2:	f7e0 fd29 	bl	8000238 <__aeabi_dsub>
 801f7e6:	ec41 0b10 	vmov	d0, r0, r1
 801f7ea:	b003      	add	sp, #12
 801f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7f0:	4b22      	ldr	r3, [pc, #136]	@ (801f87c <__kernel_cos+0x184>)
 801f7f2:	4921      	ldr	r1, [pc, #132]	@ (801f878 <__kernel_cos+0x180>)
 801f7f4:	4598      	cmp	r8, r3
 801f7f6:	bf8c      	ite	hi
 801f7f8:	4d21      	ldrhi	r5, [pc, #132]	@ (801f880 <__kernel_cos+0x188>)
 801f7fa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801f7fe:	2400      	movs	r4, #0
 801f800:	4622      	mov	r2, r4
 801f802:	462b      	mov	r3, r5
 801f804:	2000      	movs	r0, #0
 801f806:	f7e0 fd17 	bl	8000238 <__aeabi_dsub>
 801f80a:	4622      	mov	r2, r4
 801f80c:	4680      	mov	r8, r0
 801f80e:	4689      	mov	r9, r1
 801f810:	462b      	mov	r3, r5
 801f812:	4650      	mov	r0, sl
 801f814:	4659      	mov	r1, fp
 801f816:	f7e0 fd0f 	bl	8000238 <__aeabi_dsub>
 801f81a:	4632      	mov	r2, r6
 801f81c:	463b      	mov	r3, r7
 801f81e:	f7e0 fd0b 	bl	8000238 <__aeabi_dsub>
 801f822:	4602      	mov	r2, r0
 801f824:	460b      	mov	r3, r1
 801f826:	4640      	mov	r0, r8
 801f828:	4649      	mov	r1, r9
 801f82a:	e7da      	b.n	801f7e2 <__kernel_cos+0xea>
 801f82c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801f868 <__kernel_cos+0x170>
 801f830:	e7db      	b.n	801f7ea <__kernel_cos+0xf2>
 801f832:	bf00      	nop
 801f834:	f3af 8000 	nop.w
 801f838:	be8838d4 	.word	0xbe8838d4
 801f83c:	bda8fae9 	.word	0xbda8fae9
 801f840:	bdb4b1c4 	.word	0xbdb4b1c4
 801f844:	3e21ee9e 	.word	0x3e21ee9e
 801f848:	809c52ad 	.word	0x809c52ad
 801f84c:	3e927e4f 	.word	0x3e927e4f
 801f850:	19cb1590 	.word	0x19cb1590
 801f854:	3efa01a0 	.word	0x3efa01a0
 801f858:	16c15177 	.word	0x16c15177
 801f85c:	3f56c16c 	.word	0x3f56c16c
 801f860:	5555554c 	.word	0x5555554c
 801f864:	3fa55555 	.word	0x3fa55555
 801f868:	00000000 	.word	0x00000000
 801f86c:	3ff00000 	.word	0x3ff00000
 801f870:	3fe00000 	.word	0x3fe00000
 801f874:	3fd33332 	.word	0x3fd33332
 801f878:	3ff00000 	.word	0x3ff00000
 801f87c:	3fe90000 	.word	0x3fe90000
 801f880:	3fd20000 	.word	0x3fd20000
 801f884:	00000000 	.word	0x00000000

0801f888 <__kernel_sin>:
 801f888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f88c:	ec55 4b10 	vmov	r4, r5, d0
 801f890:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f894:	b085      	sub	sp, #20
 801f896:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801f89a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801f89e:	4680      	mov	r8, r0
 801f8a0:	d205      	bcs.n	801f8ae <__kernel_sin+0x26>
 801f8a2:	4620      	mov	r0, r4
 801f8a4:	4629      	mov	r1, r5
 801f8a6:	f7e1 f92f 	bl	8000b08 <__aeabi_d2iz>
 801f8aa:	2800      	cmp	r0, #0
 801f8ac:	d052      	beq.n	801f954 <__kernel_sin+0xcc>
 801f8ae:	4622      	mov	r2, r4
 801f8b0:	462b      	mov	r3, r5
 801f8b2:	4620      	mov	r0, r4
 801f8b4:	4629      	mov	r1, r5
 801f8b6:	f7e0 fe77 	bl	80005a8 <__aeabi_dmul>
 801f8ba:	4682      	mov	sl, r0
 801f8bc:	468b      	mov	fp, r1
 801f8be:	4602      	mov	r2, r0
 801f8c0:	460b      	mov	r3, r1
 801f8c2:	4620      	mov	r0, r4
 801f8c4:	4629      	mov	r1, r5
 801f8c6:	f7e0 fe6f 	bl	80005a8 <__aeabi_dmul>
 801f8ca:	a342      	add	r3, pc, #264	@ (adr r3, 801f9d4 <__kernel_sin+0x14c>)
 801f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8d0:	e9cd 0100 	strd	r0, r1, [sp]
 801f8d4:	4650      	mov	r0, sl
 801f8d6:	4659      	mov	r1, fp
 801f8d8:	f7e0 fe66 	bl	80005a8 <__aeabi_dmul>
 801f8dc:	a33f      	add	r3, pc, #252	@ (adr r3, 801f9dc <__kernel_sin+0x154>)
 801f8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8e2:	f7e0 fca9 	bl	8000238 <__aeabi_dsub>
 801f8e6:	4652      	mov	r2, sl
 801f8e8:	465b      	mov	r3, fp
 801f8ea:	f7e0 fe5d 	bl	80005a8 <__aeabi_dmul>
 801f8ee:	a33d      	add	r3, pc, #244	@ (adr r3, 801f9e4 <__kernel_sin+0x15c>)
 801f8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8f4:	f7e0 fca2 	bl	800023c <__adddf3>
 801f8f8:	4652      	mov	r2, sl
 801f8fa:	465b      	mov	r3, fp
 801f8fc:	f7e0 fe54 	bl	80005a8 <__aeabi_dmul>
 801f900:	a33a      	add	r3, pc, #232	@ (adr r3, 801f9ec <__kernel_sin+0x164>)
 801f902:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f906:	f7e0 fc97 	bl	8000238 <__aeabi_dsub>
 801f90a:	4652      	mov	r2, sl
 801f90c:	465b      	mov	r3, fp
 801f90e:	f7e0 fe4b 	bl	80005a8 <__aeabi_dmul>
 801f912:	a338      	add	r3, pc, #224	@ (adr r3, 801f9f4 <__kernel_sin+0x16c>)
 801f914:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f918:	f7e0 fc90 	bl	800023c <__adddf3>
 801f91c:	4606      	mov	r6, r0
 801f91e:	460f      	mov	r7, r1
 801f920:	f1b8 0f00 	cmp.w	r8, #0
 801f924:	d11b      	bne.n	801f95e <__kernel_sin+0xd6>
 801f926:	4602      	mov	r2, r0
 801f928:	460b      	mov	r3, r1
 801f92a:	4650      	mov	r0, sl
 801f92c:	4659      	mov	r1, fp
 801f92e:	f7e0 fe3b 	bl	80005a8 <__aeabi_dmul>
 801f932:	a325      	add	r3, pc, #148	@ (adr r3, 801f9c8 <__kernel_sin+0x140>)
 801f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f938:	f7e0 fc7e 	bl	8000238 <__aeabi_dsub>
 801f93c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f940:	f7e0 fe32 	bl	80005a8 <__aeabi_dmul>
 801f944:	4602      	mov	r2, r0
 801f946:	460b      	mov	r3, r1
 801f948:	4620      	mov	r0, r4
 801f94a:	4629      	mov	r1, r5
 801f94c:	f7e0 fc76 	bl	800023c <__adddf3>
 801f950:	4604      	mov	r4, r0
 801f952:	460d      	mov	r5, r1
 801f954:	ec45 4b10 	vmov	d0, r4, r5
 801f958:	b005      	add	sp, #20
 801f95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f95e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f962:	4b1b      	ldr	r3, [pc, #108]	@ (801f9d0 <__kernel_sin+0x148>)
 801f964:	2200      	movs	r2, #0
 801f966:	f7e0 fe1f 	bl	80005a8 <__aeabi_dmul>
 801f96a:	4632      	mov	r2, r6
 801f96c:	4680      	mov	r8, r0
 801f96e:	4689      	mov	r9, r1
 801f970:	463b      	mov	r3, r7
 801f972:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f976:	f7e0 fe17 	bl	80005a8 <__aeabi_dmul>
 801f97a:	4602      	mov	r2, r0
 801f97c:	460b      	mov	r3, r1
 801f97e:	4640      	mov	r0, r8
 801f980:	4649      	mov	r1, r9
 801f982:	f7e0 fc59 	bl	8000238 <__aeabi_dsub>
 801f986:	4652      	mov	r2, sl
 801f988:	465b      	mov	r3, fp
 801f98a:	f7e0 fe0d 	bl	80005a8 <__aeabi_dmul>
 801f98e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f992:	f7e0 fc51 	bl	8000238 <__aeabi_dsub>
 801f996:	a30c      	add	r3, pc, #48	@ (adr r3, 801f9c8 <__kernel_sin+0x140>)
 801f998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f99c:	4606      	mov	r6, r0
 801f99e:	460f      	mov	r7, r1
 801f9a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f9a4:	f7e0 fe00 	bl	80005a8 <__aeabi_dmul>
 801f9a8:	4602      	mov	r2, r0
 801f9aa:	460b      	mov	r3, r1
 801f9ac:	4630      	mov	r0, r6
 801f9ae:	4639      	mov	r1, r7
 801f9b0:	f7e0 fc44 	bl	800023c <__adddf3>
 801f9b4:	4602      	mov	r2, r0
 801f9b6:	460b      	mov	r3, r1
 801f9b8:	4620      	mov	r0, r4
 801f9ba:	4629      	mov	r1, r5
 801f9bc:	f7e0 fc3c 	bl	8000238 <__aeabi_dsub>
 801f9c0:	e7c6      	b.n	801f950 <__kernel_sin+0xc8>
 801f9c2:	bf00      	nop
 801f9c4:	f3af 8000 	nop.w
 801f9c8:	55555549 	.word	0x55555549
 801f9cc:	3fc55555 	.word	0x3fc55555
 801f9d0:	3fe00000 	.word	0x3fe00000
 801f9d4:	5acfd57c 	.word	0x5acfd57c
 801f9d8:	3de5d93a 	.word	0x3de5d93a
 801f9dc:	8a2b9ceb 	.word	0x8a2b9ceb
 801f9e0:	3e5ae5e6 	.word	0x3e5ae5e6
 801f9e4:	57b1fe7d 	.word	0x57b1fe7d
 801f9e8:	3ec71de3 	.word	0x3ec71de3
 801f9ec:	19c161d5 	.word	0x19c161d5
 801f9f0:	3f2a01a0 	.word	0x3f2a01a0
 801f9f4:	1110f8a6 	.word	0x1110f8a6
 801f9f8:	3f811111 	.word	0x3f811111
 801f9fc:	00000000 	.word	0x00000000

0801fa00 <__ieee754_rem_pio2>:
 801fa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa04:	ec57 6b10 	vmov	r6, r7, d0
 801fa08:	4bc5      	ldr	r3, [pc, #788]	@ (801fd20 <__ieee754_rem_pio2+0x320>)
 801fa0a:	b08d      	sub	sp, #52	@ 0x34
 801fa0c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801fa10:	4598      	cmp	r8, r3
 801fa12:	4604      	mov	r4, r0
 801fa14:	9704      	str	r7, [sp, #16]
 801fa16:	d807      	bhi.n	801fa28 <__ieee754_rem_pio2+0x28>
 801fa18:	2200      	movs	r2, #0
 801fa1a:	2300      	movs	r3, #0
 801fa1c:	ed80 0b00 	vstr	d0, [r0]
 801fa20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801fa24:	2500      	movs	r5, #0
 801fa26:	e028      	b.n	801fa7a <__ieee754_rem_pio2+0x7a>
 801fa28:	4bbe      	ldr	r3, [pc, #760]	@ (801fd24 <__ieee754_rem_pio2+0x324>)
 801fa2a:	4598      	cmp	r8, r3
 801fa2c:	d878      	bhi.n	801fb20 <__ieee754_rem_pio2+0x120>
 801fa2e:	9b04      	ldr	r3, [sp, #16]
 801fa30:	4dbd      	ldr	r5, [pc, #756]	@ (801fd28 <__ieee754_rem_pio2+0x328>)
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	4630      	mov	r0, r6
 801fa36:	a3ac      	add	r3, pc, #688	@ (adr r3, 801fce8 <__ieee754_rem_pio2+0x2e8>)
 801fa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa3c:	4639      	mov	r1, r7
 801fa3e:	dd38      	ble.n	801fab2 <__ieee754_rem_pio2+0xb2>
 801fa40:	f7e0 fbfa 	bl	8000238 <__aeabi_dsub>
 801fa44:	45a8      	cmp	r8, r5
 801fa46:	4606      	mov	r6, r0
 801fa48:	460f      	mov	r7, r1
 801fa4a:	d01a      	beq.n	801fa82 <__ieee754_rem_pio2+0x82>
 801fa4c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801fcf0 <__ieee754_rem_pio2+0x2f0>)
 801fa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa52:	f7e0 fbf1 	bl	8000238 <__aeabi_dsub>
 801fa56:	4602      	mov	r2, r0
 801fa58:	460b      	mov	r3, r1
 801fa5a:	4680      	mov	r8, r0
 801fa5c:	4689      	mov	r9, r1
 801fa5e:	4630      	mov	r0, r6
 801fa60:	4639      	mov	r1, r7
 801fa62:	f7e0 fbe9 	bl	8000238 <__aeabi_dsub>
 801fa66:	a3a2      	add	r3, pc, #648	@ (adr r3, 801fcf0 <__ieee754_rem_pio2+0x2f0>)
 801fa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa6c:	f7e0 fbe4 	bl	8000238 <__aeabi_dsub>
 801fa70:	e9c4 8900 	strd	r8, r9, [r4]
 801fa74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fa78:	2501      	movs	r5, #1
 801fa7a:	4628      	mov	r0, r5
 801fa7c:	b00d      	add	sp, #52	@ 0x34
 801fa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa82:	a39d      	add	r3, pc, #628	@ (adr r3, 801fcf8 <__ieee754_rem_pio2+0x2f8>)
 801fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa88:	f7e0 fbd6 	bl	8000238 <__aeabi_dsub>
 801fa8c:	a39c      	add	r3, pc, #624	@ (adr r3, 801fd00 <__ieee754_rem_pio2+0x300>)
 801fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa92:	4606      	mov	r6, r0
 801fa94:	460f      	mov	r7, r1
 801fa96:	f7e0 fbcf 	bl	8000238 <__aeabi_dsub>
 801fa9a:	4602      	mov	r2, r0
 801fa9c:	460b      	mov	r3, r1
 801fa9e:	4680      	mov	r8, r0
 801faa0:	4689      	mov	r9, r1
 801faa2:	4630      	mov	r0, r6
 801faa4:	4639      	mov	r1, r7
 801faa6:	f7e0 fbc7 	bl	8000238 <__aeabi_dsub>
 801faaa:	a395      	add	r3, pc, #596	@ (adr r3, 801fd00 <__ieee754_rem_pio2+0x300>)
 801faac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fab0:	e7dc      	b.n	801fa6c <__ieee754_rem_pio2+0x6c>
 801fab2:	f7e0 fbc3 	bl	800023c <__adddf3>
 801fab6:	45a8      	cmp	r8, r5
 801fab8:	4606      	mov	r6, r0
 801faba:	460f      	mov	r7, r1
 801fabc:	d018      	beq.n	801faf0 <__ieee754_rem_pio2+0xf0>
 801fabe:	a38c      	add	r3, pc, #560	@ (adr r3, 801fcf0 <__ieee754_rem_pio2+0x2f0>)
 801fac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fac4:	f7e0 fbba 	bl	800023c <__adddf3>
 801fac8:	4602      	mov	r2, r0
 801faca:	460b      	mov	r3, r1
 801facc:	4680      	mov	r8, r0
 801face:	4689      	mov	r9, r1
 801fad0:	4630      	mov	r0, r6
 801fad2:	4639      	mov	r1, r7
 801fad4:	f7e0 fbb0 	bl	8000238 <__aeabi_dsub>
 801fad8:	a385      	add	r3, pc, #532	@ (adr r3, 801fcf0 <__ieee754_rem_pio2+0x2f0>)
 801fada:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fade:	f7e0 fbad 	bl	800023c <__adddf3>
 801fae2:	f04f 35ff 	mov.w	r5, #4294967295
 801fae6:	e9c4 8900 	strd	r8, r9, [r4]
 801faea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801faee:	e7c4      	b.n	801fa7a <__ieee754_rem_pio2+0x7a>
 801faf0:	a381      	add	r3, pc, #516	@ (adr r3, 801fcf8 <__ieee754_rem_pio2+0x2f8>)
 801faf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801faf6:	f7e0 fba1 	bl	800023c <__adddf3>
 801fafa:	a381      	add	r3, pc, #516	@ (adr r3, 801fd00 <__ieee754_rem_pio2+0x300>)
 801fafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb00:	4606      	mov	r6, r0
 801fb02:	460f      	mov	r7, r1
 801fb04:	f7e0 fb9a 	bl	800023c <__adddf3>
 801fb08:	4602      	mov	r2, r0
 801fb0a:	460b      	mov	r3, r1
 801fb0c:	4680      	mov	r8, r0
 801fb0e:	4689      	mov	r9, r1
 801fb10:	4630      	mov	r0, r6
 801fb12:	4639      	mov	r1, r7
 801fb14:	f7e0 fb90 	bl	8000238 <__aeabi_dsub>
 801fb18:	a379      	add	r3, pc, #484	@ (adr r3, 801fd00 <__ieee754_rem_pio2+0x300>)
 801fb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb1e:	e7de      	b.n	801fade <__ieee754_rem_pio2+0xde>
 801fb20:	4b82      	ldr	r3, [pc, #520]	@ (801fd2c <__ieee754_rem_pio2+0x32c>)
 801fb22:	4598      	cmp	r8, r3
 801fb24:	f200 80d1 	bhi.w	801fcca <__ieee754_rem_pio2+0x2ca>
 801fb28:	f000 f99a 	bl	801fe60 <fabs>
 801fb2c:	ec57 6b10 	vmov	r6, r7, d0
 801fb30:	a375      	add	r3, pc, #468	@ (adr r3, 801fd08 <__ieee754_rem_pio2+0x308>)
 801fb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb36:	4630      	mov	r0, r6
 801fb38:	4639      	mov	r1, r7
 801fb3a:	f7e0 fd35 	bl	80005a8 <__aeabi_dmul>
 801fb3e:	4b7c      	ldr	r3, [pc, #496]	@ (801fd30 <__ieee754_rem_pio2+0x330>)
 801fb40:	2200      	movs	r2, #0
 801fb42:	f7e0 fb7b 	bl	800023c <__adddf3>
 801fb46:	f7e0 ffdf 	bl	8000b08 <__aeabi_d2iz>
 801fb4a:	4605      	mov	r5, r0
 801fb4c:	f7e0 fcc2 	bl	80004d4 <__aeabi_i2d>
 801fb50:	4602      	mov	r2, r0
 801fb52:	460b      	mov	r3, r1
 801fb54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801fb58:	a363      	add	r3, pc, #396	@ (adr r3, 801fce8 <__ieee754_rem_pio2+0x2e8>)
 801fb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb5e:	f7e0 fd23 	bl	80005a8 <__aeabi_dmul>
 801fb62:	4602      	mov	r2, r0
 801fb64:	460b      	mov	r3, r1
 801fb66:	4630      	mov	r0, r6
 801fb68:	4639      	mov	r1, r7
 801fb6a:	f7e0 fb65 	bl	8000238 <__aeabi_dsub>
 801fb6e:	a360      	add	r3, pc, #384	@ (adr r3, 801fcf0 <__ieee754_rem_pio2+0x2f0>)
 801fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb74:	4682      	mov	sl, r0
 801fb76:	468b      	mov	fp, r1
 801fb78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fb7c:	f7e0 fd14 	bl	80005a8 <__aeabi_dmul>
 801fb80:	2d1f      	cmp	r5, #31
 801fb82:	4606      	mov	r6, r0
 801fb84:	460f      	mov	r7, r1
 801fb86:	dc0c      	bgt.n	801fba2 <__ieee754_rem_pio2+0x1a2>
 801fb88:	4b6a      	ldr	r3, [pc, #424]	@ (801fd34 <__ieee754_rem_pio2+0x334>)
 801fb8a:	1e6a      	subs	r2, r5, #1
 801fb8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fb90:	4543      	cmp	r3, r8
 801fb92:	d006      	beq.n	801fba2 <__ieee754_rem_pio2+0x1a2>
 801fb94:	4632      	mov	r2, r6
 801fb96:	463b      	mov	r3, r7
 801fb98:	4650      	mov	r0, sl
 801fb9a:	4659      	mov	r1, fp
 801fb9c:	f7e0 fb4c 	bl	8000238 <__aeabi_dsub>
 801fba0:	e00e      	b.n	801fbc0 <__ieee754_rem_pio2+0x1c0>
 801fba2:	463b      	mov	r3, r7
 801fba4:	4632      	mov	r2, r6
 801fba6:	4650      	mov	r0, sl
 801fba8:	4659      	mov	r1, fp
 801fbaa:	f7e0 fb45 	bl	8000238 <__aeabi_dsub>
 801fbae:	ea4f 5328 	mov.w	r3, r8, asr #20
 801fbb2:	9305      	str	r3, [sp, #20]
 801fbb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801fbb8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801fbbc:	2b10      	cmp	r3, #16
 801fbbe:	dc02      	bgt.n	801fbc6 <__ieee754_rem_pio2+0x1c6>
 801fbc0:	e9c4 0100 	strd	r0, r1, [r4]
 801fbc4:	e039      	b.n	801fc3a <__ieee754_rem_pio2+0x23a>
 801fbc6:	a34c      	add	r3, pc, #304	@ (adr r3, 801fcf8 <__ieee754_rem_pio2+0x2f8>)
 801fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fbd0:	f7e0 fcea 	bl	80005a8 <__aeabi_dmul>
 801fbd4:	4606      	mov	r6, r0
 801fbd6:	460f      	mov	r7, r1
 801fbd8:	4602      	mov	r2, r0
 801fbda:	460b      	mov	r3, r1
 801fbdc:	4650      	mov	r0, sl
 801fbde:	4659      	mov	r1, fp
 801fbe0:	f7e0 fb2a 	bl	8000238 <__aeabi_dsub>
 801fbe4:	4602      	mov	r2, r0
 801fbe6:	460b      	mov	r3, r1
 801fbe8:	4680      	mov	r8, r0
 801fbea:	4689      	mov	r9, r1
 801fbec:	4650      	mov	r0, sl
 801fbee:	4659      	mov	r1, fp
 801fbf0:	f7e0 fb22 	bl	8000238 <__aeabi_dsub>
 801fbf4:	4632      	mov	r2, r6
 801fbf6:	463b      	mov	r3, r7
 801fbf8:	f7e0 fb1e 	bl	8000238 <__aeabi_dsub>
 801fbfc:	a340      	add	r3, pc, #256	@ (adr r3, 801fd00 <__ieee754_rem_pio2+0x300>)
 801fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc02:	4606      	mov	r6, r0
 801fc04:	460f      	mov	r7, r1
 801fc06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fc0a:	f7e0 fccd 	bl	80005a8 <__aeabi_dmul>
 801fc0e:	4632      	mov	r2, r6
 801fc10:	463b      	mov	r3, r7
 801fc12:	f7e0 fb11 	bl	8000238 <__aeabi_dsub>
 801fc16:	4602      	mov	r2, r0
 801fc18:	460b      	mov	r3, r1
 801fc1a:	4606      	mov	r6, r0
 801fc1c:	460f      	mov	r7, r1
 801fc1e:	4640      	mov	r0, r8
 801fc20:	4649      	mov	r1, r9
 801fc22:	f7e0 fb09 	bl	8000238 <__aeabi_dsub>
 801fc26:	9a05      	ldr	r2, [sp, #20]
 801fc28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801fc2c:	1ad3      	subs	r3, r2, r3
 801fc2e:	2b31      	cmp	r3, #49	@ 0x31
 801fc30:	dc20      	bgt.n	801fc74 <__ieee754_rem_pio2+0x274>
 801fc32:	e9c4 0100 	strd	r0, r1, [r4]
 801fc36:	46c2      	mov	sl, r8
 801fc38:	46cb      	mov	fp, r9
 801fc3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801fc3e:	4650      	mov	r0, sl
 801fc40:	4642      	mov	r2, r8
 801fc42:	464b      	mov	r3, r9
 801fc44:	4659      	mov	r1, fp
 801fc46:	f7e0 faf7 	bl	8000238 <__aeabi_dsub>
 801fc4a:	463b      	mov	r3, r7
 801fc4c:	4632      	mov	r2, r6
 801fc4e:	f7e0 faf3 	bl	8000238 <__aeabi_dsub>
 801fc52:	9b04      	ldr	r3, [sp, #16]
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fc5a:	f6bf af0e 	bge.w	801fa7a <__ieee754_rem_pio2+0x7a>
 801fc5e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801fc62:	6063      	str	r3, [r4, #4]
 801fc64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801fc68:	f8c4 8000 	str.w	r8, [r4]
 801fc6c:	60a0      	str	r0, [r4, #8]
 801fc6e:	60e3      	str	r3, [r4, #12]
 801fc70:	426d      	negs	r5, r5
 801fc72:	e702      	b.n	801fa7a <__ieee754_rem_pio2+0x7a>
 801fc74:	a326      	add	r3, pc, #152	@ (adr r3, 801fd10 <__ieee754_rem_pio2+0x310>)
 801fc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fc7e:	f7e0 fc93 	bl	80005a8 <__aeabi_dmul>
 801fc82:	4606      	mov	r6, r0
 801fc84:	460f      	mov	r7, r1
 801fc86:	4602      	mov	r2, r0
 801fc88:	460b      	mov	r3, r1
 801fc8a:	4640      	mov	r0, r8
 801fc8c:	4649      	mov	r1, r9
 801fc8e:	f7e0 fad3 	bl	8000238 <__aeabi_dsub>
 801fc92:	4602      	mov	r2, r0
 801fc94:	460b      	mov	r3, r1
 801fc96:	4682      	mov	sl, r0
 801fc98:	468b      	mov	fp, r1
 801fc9a:	4640      	mov	r0, r8
 801fc9c:	4649      	mov	r1, r9
 801fc9e:	f7e0 facb 	bl	8000238 <__aeabi_dsub>
 801fca2:	4632      	mov	r2, r6
 801fca4:	463b      	mov	r3, r7
 801fca6:	f7e0 fac7 	bl	8000238 <__aeabi_dsub>
 801fcaa:	a31b      	add	r3, pc, #108	@ (adr r3, 801fd18 <__ieee754_rem_pio2+0x318>)
 801fcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcb0:	4606      	mov	r6, r0
 801fcb2:	460f      	mov	r7, r1
 801fcb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fcb8:	f7e0 fc76 	bl	80005a8 <__aeabi_dmul>
 801fcbc:	4632      	mov	r2, r6
 801fcbe:	463b      	mov	r3, r7
 801fcc0:	f7e0 faba 	bl	8000238 <__aeabi_dsub>
 801fcc4:	4606      	mov	r6, r0
 801fcc6:	460f      	mov	r7, r1
 801fcc8:	e764      	b.n	801fb94 <__ieee754_rem_pio2+0x194>
 801fcca:	4b1b      	ldr	r3, [pc, #108]	@ (801fd38 <__ieee754_rem_pio2+0x338>)
 801fccc:	4598      	cmp	r8, r3
 801fcce:	d935      	bls.n	801fd3c <__ieee754_rem_pio2+0x33c>
 801fcd0:	4632      	mov	r2, r6
 801fcd2:	463b      	mov	r3, r7
 801fcd4:	4630      	mov	r0, r6
 801fcd6:	4639      	mov	r1, r7
 801fcd8:	f7e0 faae 	bl	8000238 <__aeabi_dsub>
 801fcdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fce0:	e9c4 0100 	strd	r0, r1, [r4]
 801fce4:	e69e      	b.n	801fa24 <__ieee754_rem_pio2+0x24>
 801fce6:	bf00      	nop
 801fce8:	54400000 	.word	0x54400000
 801fcec:	3ff921fb 	.word	0x3ff921fb
 801fcf0:	1a626331 	.word	0x1a626331
 801fcf4:	3dd0b461 	.word	0x3dd0b461
 801fcf8:	1a600000 	.word	0x1a600000
 801fcfc:	3dd0b461 	.word	0x3dd0b461
 801fd00:	2e037073 	.word	0x2e037073
 801fd04:	3ba3198a 	.word	0x3ba3198a
 801fd08:	6dc9c883 	.word	0x6dc9c883
 801fd0c:	3fe45f30 	.word	0x3fe45f30
 801fd10:	2e000000 	.word	0x2e000000
 801fd14:	3ba3198a 	.word	0x3ba3198a
 801fd18:	252049c1 	.word	0x252049c1
 801fd1c:	397b839a 	.word	0x397b839a
 801fd20:	3fe921fb 	.word	0x3fe921fb
 801fd24:	4002d97b 	.word	0x4002d97b
 801fd28:	3ff921fb 	.word	0x3ff921fb
 801fd2c:	413921fb 	.word	0x413921fb
 801fd30:	3fe00000 	.word	0x3fe00000
 801fd34:	080236e4 	.word	0x080236e4
 801fd38:	7fefffff 	.word	0x7fefffff
 801fd3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801fd40:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801fd44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801fd48:	4630      	mov	r0, r6
 801fd4a:	460f      	mov	r7, r1
 801fd4c:	f7e0 fedc 	bl	8000b08 <__aeabi_d2iz>
 801fd50:	f7e0 fbc0 	bl	80004d4 <__aeabi_i2d>
 801fd54:	4602      	mov	r2, r0
 801fd56:	460b      	mov	r3, r1
 801fd58:	4630      	mov	r0, r6
 801fd5a:	4639      	mov	r1, r7
 801fd5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801fd60:	f7e0 fa6a 	bl	8000238 <__aeabi_dsub>
 801fd64:	4b22      	ldr	r3, [pc, #136]	@ (801fdf0 <__ieee754_rem_pio2+0x3f0>)
 801fd66:	2200      	movs	r2, #0
 801fd68:	f7e0 fc1e 	bl	80005a8 <__aeabi_dmul>
 801fd6c:	460f      	mov	r7, r1
 801fd6e:	4606      	mov	r6, r0
 801fd70:	f7e0 feca 	bl	8000b08 <__aeabi_d2iz>
 801fd74:	f7e0 fbae 	bl	80004d4 <__aeabi_i2d>
 801fd78:	4602      	mov	r2, r0
 801fd7a:	460b      	mov	r3, r1
 801fd7c:	4630      	mov	r0, r6
 801fd7e:	4639      	mov	r1, r7
 801fd80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801fd84:	f7e0 fa58 	bl	8000238 <__aeabi_dsub>
 801fd88:	4b19      	ldr	r3, [pc, #100]	@ (801fdf0 <__ieee754_rem_pio2+0x3f0>)
 801fd8a:	2200      	movs	r2, #0
 801fd8c:	f7e0 fc0c 	bl	80005a8 <__aeabi_dmul>
 801fd90:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801fd94:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801fd98:	f04f 0803 	mov.w	r8, #3
 801fd9c:	2600      	movs	r6, #0
 801fd9e:	2700      	movs	r7, #0
 801fda0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801fda4:	4632      	mov	r2, r6
 801fda6:	463b      	mov	r3, r7
 801fda8:	46c2      	mov	sl, r8
 801fdaa:	f108 38ff 	add.w	r8, r8, #4294967295
 801fdae:	f7e0 fe63 	bl	8000a78 <__aeabi_dcmpeq>
 801fdb2:	2800      	cmp	r0, #0
 801fdb4:	d1f4      	bne.n	801fda0 <__ieee754_rem_pio2+0x3a0>
 801fdb6:	4b0f      	ldr	r3, [pc, #60]	@ (801fdf4 <__ieee754_rem_pio2+0x3f4>)
 801fdb8:	9301      	str	r3, [sp, #4]
 801fdba:	2302      	movs	r3, #2
 801fdbc:	9300      	str	r3, [sp, #0]
 801fdbe:	462a      	mov	r2, r5
 801fdc0:	4653      	mov	r3, sl
 801fdc2:	4621      	mov	r1, r4
 801fdc4:	a806      	add	r0, sp, #24
 801fdc6:	f000 fa3b 	bl	8020240 <__kernel_rem_pio2>
 801fdca:	9b04      	ldr	r3, [sp, #16]
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	4605      	mov	r5, r0
 801fdd0:	f6bf ae53 	bge.w	801fa7a <__ieee754_rem_pio2+0x7a>
 801fdd4:	e9d4 2100 	ldrd	r2, r1, [r4]
 801fdd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801fddc:	e9c4 2300 	strd	r2, r3, [r4]
 801fde0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801fde4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801fde8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801fdec:	e740      	b.n	801fc70 <__ieee754_rem_pio2+0x270>
 801fdee:	bf00      	nop
 801fdf0:	41700000 	.word	0x41700000
 801fdf4:	08023764 	.word	0x08023764

0801fdf8 <acos>:
 801fdf8:	b538      	push	{r3, r4, r5, lr}
 801fdfa:	ed2d 8b02 	vpush	{d8}
 801fdfe:	ec55 4b10 	vmov	r4, r5, d0
 801fe02:	f000 fd75 	bl	80208f0 <__ieee754_acos>
 801fe06:	4622      	mov	r2, r4
 801fe08:	462b      	mov	r3, r5
 801fe0a:	4620      	mov	r0, r4
 801fe0c:	4629      	mov	r1, r5
 801fe0e:	eeb0 8a40 	vmov.f32	s16, s0
 801fe12:	eef0 8a60 	vmov.f32	s17, s1
 801fe16:	f7e0 fe61 	bl	8000adc <__aeabi_dcmpun>
 801fe1a:	b9a8      	cbnz	r0, 801fe48 <acos+0x50>
 801fe1c:	ec45 4b10 	vmov	d0, r4, r5
 801fe20:	f000 f81e 	bl	801fe60 <fabs>
 801fe24:	4b0c      	ldr	r3, [pc, #48]	@ (801fe58 <acos+0x60>)
 801fe26:	ec51 0b10 	vmov	r0, r1, d0
 801fe2a:	2200      	movs	r2, #0
 801fe2c:	f7e0 fe4c 	bl	8000ac8 <__aeabi_dcmpgt>
 801fe30:	b150      	cbz	r0, 801fe48 <acos+0x50>
 801fe32:	f7fc fe45 	bl	801cac0 <__errno>
 801fe36:	ecbd 8b02 	vpop	{d8}
 801fe3a:	2321      	movs	r3, #33	@ 0x21
 801fe3c:	6003      	str	r3, [r0, #0]
 801fe3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe42:	4806      	ldr	r0, [pc, #24]	@ (801fe5c <acos+0x64>)
 801fe44:	f7fc be80 	b.w	801cb48 <nan>
 801fe48:	eeb0 0a48 	vmov.f32	s0, s16
 801fe4c:	eef0 0a68 	vmov.f32	s1, s17
 801fe50:	ecbd 8b02 	vpop	{d8}
 801fe54:	bd38      	pop	{r3, r4, r5, pc}
 801fe56:	bf00      	nop
 801fe58:	3ff00000 	.word	0x3ff00000
 801fe5c:	0802349e 	.word	0x0802349e

0801fe60 <fabs>:
 801fe60:	ec51 0b10 	vmov	r0, r1, d0
 801fe64:	4602      	mov	r2, r0
 801fe66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801fe6a:	ec43 2b10 	vmov	d0, r2, r3
 801fe6e:	4770      	bx	lr

0801fe70 <__ieee754_expf>:
 801fe70:	ee10 2a10 	vmov	r2, s0
 801fe74:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801fe78:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801fe7c:	d902      	bls.n	801fe84 <__ieee754_expf+0x14>
 801fe7e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fe82:	4770      	bx	lr
 801fe84:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801fe88:	d106      	bne.n	801fe98 <__ieee754_expf+0x28>
 801fe8a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801ffc4 <__ieee754_expf+0x154>
 801fe8e:	2900      	cmp	r1, #0
 801fe90:	bf18      	it	ne
 801fe92:	eeb0 0a67 	vmovne.f32	s0, s15
 801fe96:	4770      	bx	lr
 801fe98:	484b      	ldr	r0, [pc, #300]	@ (801ffc8 <__ieee754_expf+0x158>)
 801fe9a:	4282      	cmp	r2, r0
 801fe9c:	dd02      	ble.n	801fea4 <__ieee754_expf+0x34>
 801fe9e:	2000      	movs	r0, #0
 801fea0:	f000 b9c6 	b.w	8020230 <__math_oflowf>
 801fea4:	2a00      	cmp	r2, #0
 801fea6:	da05      	bge.n	801feb4 <__ieee754_expf+0x44>
 801fea8:	4a48      	ldr	r2, [pc, #288]	@ (801ffcc <__ieee754_expf+0x15c>)
 801feaa:	4293      	cmp	r3, r2
 801feac:	d902      	bls.n	801feb4 <__ieee754_expf+0x44>
 801feae:	2000      	movs	r0, #0
 801feb0:	f000 b9b8 	b.w	8020224 <__math_uflowf>
 801feb4:	4a46      	ldr	r2, [pc, #280]	@ (801ffd0 <__ieee754_expf+0x160>)
 801feb6:	4293      	cmp	r3, r2
 801feb8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801febc:	d952      	bls.n	801ff64 <__ieee754_expf+0xf4>
 801febe:	4a45      	ldr	r2, [pc, #276]	@ (801ffd4 <__ieee754_expf+0x164>)
 801fec0:	4293      	cmp	r3, r2
 801fec2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801fec6:	d834      	bhi.n	801ff32 <__ieee754_expf+0xc2>
 801fec8:	4b43      	ldr	r3, [pc, #268]	@ (801ffd8 <__ieee754_expf+0x168>)
 801feca:	4413      	add	r3, r2
 801fecc:	ed93 7a00 	vldr	s14, [r3]
 801fed0:	4b42      	ldr	r3, [pc, #264]	@ (801ffdc <__ieee754_expf+0x16c>)
 801fed2:	4413      	add	r3, r2
 801fed4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801fed8:	f1c1 0201 	rsb	r2, r1, #1
 801fedc:	edd3 7a00 	vldr	s15, [r3]
 801fee0:	1a52      	subs	r2, r2, r1
 801fee2:	ee37 0a67 	vsub.f32	s0, s14, s15
 801fee6:	ee20 6a00 	vmul.f32	s12, s0, s0
 801feea:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801ffe0 <__ieee754_expf+0x170>
 801feee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ffe4 <__ieee754_expf+0x174>
 801fef2:	eee6 6a05 	vfma.f32	s13, s12, s10
 801fef6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801ffe8 <__ieee754_expf+0x178>
 801fefa:	eea6 5a86 	vfma.f32	s10, s13, s12
 801fefe:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801ffec <__ieee754_expf+0x17c>
 801ff02:	eee5 6a06 	vfma.f32	s13, s10, s12
 801ff06:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801fff0 <__ieee754_expf+0x180>
 801ff0a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ff0e:	eef0 6a40 	vmov.f32	s13, s0
 801ff12:	eee5 6a46 	vfms.f32	s13, s10, s12
 801ff16:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801ff1a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801ff1e:	bb92      	cbnz	r2, 801ff86 <__ieee754_expf+0x116>
 801ff20:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801ff24:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801ff28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ff2c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801ff30:	4770      	bx	lr
 801ff32:	4b30      	ldr	r3, [pc, #192]	@ (801fff4 <__ieee754_expf+0x184>)
 801ff34:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801fff8 <__ieee754_expf+0x188>
 801ff38:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801fffc <__ieee754_expf+0x18c>
 801ff3c:	4413      	add	r3, r2
 801ff3e:	edd3 7a00 	vldr	s15, [r3]
 801ff42:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ff46:	eeb0 7a40 	vmov.f32	s14, s0
 801ff4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ff4e:	ee17 2a90 	vmov	r2, s15
 801ff52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ff56:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ff5a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8020000 <__ieee754_expf+0x190>
 801ff5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ff62:	e7be      	b.n	801fee2 <__ieee754_expf+0x72>
 801ff64:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801ff68:	d20b      	bcs.n	801ff82 <__ieee754_expf+0x112>
 801ff6a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8020004 <__ieee754_expf+0x194>
 801ff6e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ff72:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ff76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff7a:	dd02      	ble.n	801ff82 <__ieee754_expf+0x112>
 801ff7c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801ff80:	4770      	bx	lr
 801ff82:	2200      	movs	r2, #0
 801ff84:	e7af      	b.n	801fee6 <__ieee754_expf+0x76>
 801ff86:	ee36 6a66 	vsub.f32	s12, s12, s13
 801ff8a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801ff8e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801ff92:	bfb8      	it	lt
 801ff94:	3264      	addlt	r2, #100	@ 0x64
 801ff96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ff9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ff9e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ffa2:	ee17 3a90 	vmov	r3, s15
 801ffa6:	bfab      	itete	ge
 801ffa8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801ffac:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801ffb0:	ee00 3a10 	vmovge	s0, r3
 801ffb4:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8020008 <__ieee754_expf+0x198>
 801ffb8:	bfbc      	itt	lt
 801ffba:	ee00 3a10 	vmovlt	s0, r3
 801ffbe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801ffc2:	4770      	bx	lr
 801ffc4:	00000000 	.word	0x00000000
 801ffc8:	42b17217 	.word	0x42b17217
 801ffcc:	42cff1b5 	.word	0x42cff1b5
 801ffd0:	3eb17218 	.word	0x3eb17218
 801ffd4:	3f851591 	.word	0x3f851591
 801ffd8:	08023874 	.word	0x08023874
 801ffdc:	0802386c 	.word	0x0802386c
 801ffe0:	3331bb4c 	.word	0x3331bb4c
 801ffe4:	b5ddea0e 	.word	0xb5ddea0e
 801ffe8:	388ab355 	.word	0x388ab355
 801ffec:	bb360b61 	.word	0xbb360b61
 801fff0:	3e2aaaab 	.word	0x3e2aaaab
 801fff4:	0802387c 	.word	0x0802387c
 801fff8:	3fb8aa3b 	.word	0x3fb8aa3b
 801fffc:	3f317180 	.word	0x3f317180
 8020000:	3717f7d1 	.word	0x3717f7d1
 8020004:	7149f2ca 	.word	0x7149f2ca
 8020008:	0d800000 	.word	0x0d800000

0802000c <__ieee754_logf>:
 802000c:	ee10 3a10 	vmov	r3, s0
 8020010:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8020014:	d106      	bne.n	8020024 <__ieee754_logf+0x18>
 8020016:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80201b0 <__ieee754_logf+0x1a4>
 802001a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80201b4 <__ieee754_logf+0x1a8>
 802001e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8020022:	4770      	bx	lr
 8020024:	2b00      	cmp	r3, #0
 8020026:	461a      	mov	r2, r3
 8020028:	da02      	bge.n	8020030 <__ieee754_logf+0x24>
 802002a:	ee30 7a40 	vsub.f32	s14, s0, s0
 802002e:	e7f4      	b.n	802001a <__ieee754_logf+0xe>
 8020030:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8020034:	db02      	blt.n	802003c <__ieee754_logf+0x30>
 8020036:	ee30 0a00 	vadd.f32	s0, s0, s0
 802003a:	4770      	bx	lr
 802003c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8020040:	bfb8      	it	lt
 8020042:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80201b8 <__ieee754_logf+0x1ac>
 8020046:	485d      	ldr	r0, [pc, #372]	@ (80201bc <__ieee754_logf+0x1b0>)
 8020048:	bfbe      	ittt	lt
 802004a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 802004e:	f06f 0118 	mvnlt.w	r1, #24
 8020052:	ee17 2a90 	vmovlt	r2, s15
 8020056:	ea4f 53e2 	mov.w	r3, r2, asr #23
 802005a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 802005e:	4410      	add	r0, r2
 8020060:	bfa8      	it	ge
 8020062:	2100      	movge	r1, #0
 8020064:	3b7f      	subs	r3, #127	@ 0x7f
 8020066:	440b      	add	r3, r1
 8020068:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 802006c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8020070:	4311      	orrs	r1, r2
 8020072:	ee00 1a10 	vmov	s0, r1
 8020076:	4952      	ldr	r1, [pc, #328]	@ (80201c0 <__ieee754_logf+0x1b4>)
 8020078:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 802007c:	f102 000f 	add.w	r0, r2, #15
 8020080:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020084:	4001      	ands	r1, r0
 8020086:	ee30 0a67 	vsub.f32	s0, s0, s15
 802008a:	bb89      	cbnz	r1, 80200f0 <__ieee754_logf+0xe4>
 802008c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8020090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020094:	d10f      	bne.n	80200b6 <__ieee754_logf+0xaa>
 8020096:	2b00      	cmp	r3, #0
 8020098:	f000 8087 	beq.w	80201aa <__ieee754_logf+0x19e>
 802009c:	ee07 3a90 	vmov	s15, r3
 80200a0:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80201c4 <__ieee754_logf+0x1b8>
 80200a4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80201c8 <__ieee754_logf+0x1bc>
 80200a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80200ac:	ee27 0a80 	vmul.f32	s0, s15, s0
 80200b0:	eea7 0a87 	vfma.f32	s0, s15, s14
 80200b4:	4770      	bx	lr
 80200b6:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80201cc <__ieee754_logf+0x1c0>
 80200ba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80200be:	eee0 7a66 	vfms.f32	s15, s0, s13
 80200c2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80200c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80200ca:	b913      	cbnz	r3, 80200d2 <__ieee754_logf+0xc6>
 80200cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80200d0:	4770      	bx	lr
 80200d2:	ee07 3a90 	vmov	s15, r3
 80200d6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80201c4 <__ieee754_logf+0x1b8>
 80200da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80200de:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80200e2:	ee37 0a40 	vsub.f32	s0, s14, s0
 80200e6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80201c8 <__ieee754_logf+0x1bc>
 80200ea:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80200ee:	4770      	bx	lr
 80200f0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80200f4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80200f8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80201d0 <__ieee754_logf+0x1c4>
 80200fc:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80201d4 <__ieee754_logf+0x1c8>
 8020100:	4935      	ldr	r1, [pc, #212]	@ (80201d8 <__ieee754_logf+0x1cc>)
 8020102:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8020106:	4411      	add	r1, r2
 8020108:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 802010c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8020110:	430a      	orrs	r2, r1
 8020112:	2a00      	cmp	r2, #0
 8020114:	ee07 3a90 	vmov	s15, r3
 8020118:	ee26 5a06 	vmul.f32	s10, s12, s12
 802011c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8020120:	ee25 7a05 	vmul.f32	s14, s10, s10
 8020124:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80201dc <__ieee754_logf+0x1d0>
 8020128:	eee7 7a25 	vfma.f32	s15, s14, s11
 802012c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80201e0 <__ieee754_logf+0x1d4>
 8020130:	eee7 5a87 	vfma.f32	s11, s15, s14
 8020134:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80201e4 <__ieee754_logf+0x1d8>
 8020138:	eee7 7a24 	vfma.f32	s15, s14, s9
 802013c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80201e8 <__ieee754_logf+0x1dc>
 8020140:	eee7 4a87 	vfma.f32	s9, s15, s14
 8020144:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80201ec <__ieee754_logf+0x1e0>
 8020148:	eee4 7a87 	vfma.f32	s15, s9, s14
 802014c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8020150:	eee5 7a87 	vfma.f32	s15, s11, s14
 8020154:	dd1a      	ble.n	802018c <__ieee754_logf+0x180>
 8020156:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 802015a:	ee20 7a07 	vmul.f32	s14, s0, s14
 802015e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8020162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020166:	ee67 7a86 	vmul.f32	s15, s15, s12
 802016a:	b913      	cbnz	r3, 8020172 <__ieee754_logf+0x166>
 802016c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020170:	e7ac      	b.n	80200cc <__ieee754_logf+0xc0>
 8020172:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80201c4 <__ieee754_logf+0x1b8>
 8020176:	eee6 7a86 	vfma.f32	s15, s13, s12
 802017a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802017e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8020182:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80201c8 <__ieee754_logf+0x1bc>
 8020186:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 802018a:	4770      	bx	lr
 802018c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8020190:	ee67 7a86 	vmul.f32	s15, s15, s12
 8020194:	b913      	cbnz	r3, 802019c <__ieee754_logf+0x190>
 8020196:	ee30 0a67 	vsub.f32	s0, s0, s15
 802019a:	4770      	bx	lr
 802019c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80201c4 <__ieee754_logf+0x1b8>
 80201a0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80201a4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80201a8:	e7eb      	b.n	8020182 <__ieee754_logf+0x176>
 80201aa:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80201b4 <__ieee754_logf+0x1a8>
 80201ae:	4770      	bx	lr
 80201b0:	cc000000 	.word	0xcc000000
 80201b4:	00000000 	.word	0x00000000
 80201b8:	4c000000 	.word	0x4c000000
 80201bc:	004afb20 	.word	0x004afb20
 80201c0:	007ffff0 	.word	0x007ffff0
 80201c4:	3717f7d1 	.word	0x3717f7d1
 80201c8:	3f317180 	.word	0x3f317180
 80201cc:	3eaaaaab 	.word	0x3eaaaaab
 80201d0:	3e1cd04f 	.word	0x3e1cd04f
 80201d4:	3e178897 	.word	0x3e178897
 80201d8:	ffcf5c30 	.word	0xffcf5c30
 80201dc:	3e638e29 	.word	0x3e638e29
 80201e0:	3ecccccd 	.word	0x3ecccccd
 80201e4:	3e3a3325 	.word	0x3e3a3325
 80201e8:	3e924925 	.word	0x3e924925
 80201ec:	3f2aaaab 	.word	0x3f2aaaab

080201f0 <with_errnof>:
 80201f0:	b510      	push	{r4, lr}
 80201f2:	ed2d 8b02 	vpush	{d8}
 80201f6:	eeb0 8a40 	vmov.f32	s16, s0
 80201fa:	4604      	mov	r4, r0
 80201fc:	f7fc fc60 	bl	801cac0 <__errno>
 8020200:	eeb0 0a48 	vmov.f32	s0, s16
 8020204:	ecbd 8b02 	vpop	{d8}
 8020208:	6004      	str	r4, [r0, #0]
 802020a:	bd10      	pop	{r4, pc}

0802020c <xflowf>:
 802020c:	b130      	cbz	r0, 802021c <xflowf+0x10>
 802020e:	eef1 7a40 	vneg.f32	s15, s0
 8020212:	ee27 0a80 	vmul.f32	s0, s15, s0
 8020216:	2022      	movs	r0, #34	@ 0x22
 8020218:	f7ff bfea 	b.w	80201f0 <with_errnof>
 802021c:	eef0 7a40 	vmov.f32	s15, s0
 8020220:	e7f7      	b.n	8020212 <xflowf+0x6>
	...

08020224 <__math_uflowf>:
 8020224:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802022c <__math_uflowf+0x8>
 8020228:	f7ff bff0 	b.w	802020c <xflowf>
 802022c:	10000000 	.word	0x10000000

08020230 <__math_oflowf>:
 8020230:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8020238 <__math_oflowf+0x8>
 8020234:	f7ff bfea 	b.w	802020c <xflowf>
 8020238:	70000000 	.word	0x70000000
 802023c:	00000000 	.word	0x00000000

08020240 <__kernel_rem_pio2>:
 8020240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020244:	ed2d 8b02 	vpush	{d8}
 8020248:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 802024c:	f112 0f14 	cmn.w	r2, #20
 8020250:	9306      	str	r3, [sp, #24]
 8020252:	9104      	str	r1, [sp, #16]
 8020254:	4bbe      	ldr	r3, [pc, #760]	@ (8020550 <__kernel_rem_pio2+0x310>)
 8020256:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8020258:	9008      	str	r0, [sp, #32]
 802025a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802025e:	9300      	str	r3, [sp, #0]
 8020260:	9b06      	ldr	r3, [sp, #24]
 8020262:	f103 33ff 	add.w	r3, r3, #4294967295
 8020266:	bfa8      	it	ge
 8020268:	1ed4      	subge	r4, r2, #3
 802026a:	9305      	str	r3, [sp, #20]
 802026c:	bfb2      	itee	lt
 802026e:	2400      	movlt	r4, #0
 8020270:	2318      	movge	r3, #24
 8020272:	fb94 f4f3 	sdivge	r4, r4, r3
 8020276:	f06f 0317 	mvn.w	r3, #23
 802027a:	fb04 3303 	mla	r3, r4, r3, r3
 802027e:	eb03 0b02 	add.w	fp, r3, r2
 8020282:	9b00      	ldr	r3, [sp, #0]
 8020284:	9a05      	ldr	r2, [sp, #20]
 8020286:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8020540 <__kernel_rem_pio2+0x300>
 802028a:	eb03 0802 	add.w	r8, r3, r2
 802028e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8020290:	1aa7      	subs	r7, r4, r2
 8020292:	ae20      	add	r6, sp, #128	@ 0x80
 8020294:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8020298:	2500      	movs	r5, #0
 802029a:	4545      	cmp	r5, r8
 802029c:	dd13      	ble.n	80202c6 <__kernel_rem_pio2+0x86>
 802029e:	9b06      	ldr	r3, [sp, #24]
 80202a0:	aa20      	add	r2, sp, #128	@ 0x80
 80202a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80202a6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80202aa:	f04f 0800 	mov.w	r8, #0
 80202ae:	9b00      	ldr	r3, [sp, #0]
 80202b0:	4598      	cmp	r8, r3
 80202b2:	dc31      	bgt.n	8020318 <__kernel_rem_pio2+0xd8>
 80202b4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8020540 <__kernel_rem_pio2+0x300>
 80202b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80202bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80202c0:	462f      	mov	r7, r5
 80202c2:	2600      	movs	r6, #0
 80202c4:	e01b      	b.n	80202fe <__kernel_rem_pio2+0xbe>
 80202c6:	42ef      	cmn	r7, r5
 80202c8:	d407      	bmi.n	80202da <__kernel_rem_pio2+0x9a>
 80202ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80202ce:	f7e0 f901 	bl	80004d4 <__aeabi_i2d>
 80202d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80202d6:	3501      	adds	r5, #1
 80202d8:	e7df      	b.n	802029a <__kernel_rem_pio2+0x5a>
 80202da:	ec51 0b18 	vmov	r0, r1, d8
 80202de:	e7f8      	b.n	80202d2 <__kernel_rem_pio2+0x92>
 80202e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80202e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80202e8:	f7e0 f95e 	bl	80005a8 <__aeabi_dmul>
 80202ec:	4602      	mov	r2, r0
 80202ee:	460b      	mov	r3, r1
 80202f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80202f4:	f7df ffa2 	bl	800023c <__adddf3>
 80202f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80202fc:	3601      	adds	r6, #1
 80202fe:	9b05      	ldr	r3, [sp, #20]
 8020300:	429e      	cmp	r6, r3
 8020302:	f1a7 0708 	sub.w	r7, r7, #8
 8020306:	ddeb      	ble.n	80202e0 <__kernel_rem_pio2+0xa0>
 8020308:	ed9d 7b02 	vldr	d7, [sp, #8]
 802030c:	f108 0801 	add.w	r8, r8, #1
 8020310:	ecaa 7b02 	vstmia	sl!, {d7}
 8020314:	3508      	adds	r5, #8
 8020316:	e7ca      	b.n	80202ae <__kernel_rem_pio2+0x6e>
 8020318:	9b00      	ldr	r3, [sp, #0]
 802031a:	f8dd 8000 	ldr.w	r8, [sp]
 802031e:	aa0c      	add	r2, sp, #48	@ 0x30
 8020320:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020324:	930a      	str	r3, [sp, #40]	@ 0x28
 8020326:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8020328:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802032c:	9309      	str	r3, [sp, #36]	@ 0x24
 802032e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8020332:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020334:	ab98      	add	r3, sp, #608	@ 0x260
 8020336:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802033a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 802033e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020342:	ac0c      	add	r4, sp, #48	@ 0x30
 8020344:	ab70      	add	r3, sp, #448	@ 0x1c0
 8020346:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 802034a:	46a1      	mov	r9, r4
 802034c:	46c2      	mov	sl, r8
 802034e:	f1ba 0f00 	cmp.w	sl, #0
 8020352:	f1a5 0508 	sub.w	r5, r5, #8
 8020356:	dc77      	bgt.n	8020448 <__kernel_rem_pio2+0x208>
 8020358:	4658      	mov	r0, fp
 802035a:	ed9d 0b02 	vldr	d0, [sp, #8]
 802035e:	f000 fd23 	bl	8020da8 <scalbn>
 8020362:	ec57 6b10 	vmov	r6, r7, d0
 8020366:	2200      	movs	r2, #0
 8020368:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802036c:	4630      	mov	r0, r6
 802036e:	4639      	mov	r1, r7
 8020370:	f7e0 f91a 	bl	80005a8 <__aeabi_dmul>
 8020374:	ec41 0b10 	vmov	d0, r0, r1
 8020378:	f7ff f942 	bl	801f600 <floor>
 802037c:	4b75      	ldr	r3, [pc, #468]	@ (8020554 <__kernel_rem_pio2+0x314>)
 802037e:	ec51 0b10 	vmov	r0, r1, d0
 8020382:	2200      	movs	r2, #0
 8020384:	f7e0 f910 	bl	80005a8 <__aeabi_dmul>
 8020388:	4602      	mov	r2, r0
 802038a:	460b      	mov	r3, r1
 802038c:	4630      	mov	r0, r6
 802038e:	4639      	mov	r1, r7
 8020390:	f7df ff52 	bl	8000238 <__aeabi_dsub>
 8020394:	460f      	mov	r7, r1
 8020396:	4606      	mov	r6, r0
 8020398:	f7e0 fbb6 	bl	8000b08 <__aeabi_d2iz>
 802039c:	9002      	str	r0, [sp, #8]
 802039e:	f7e0 f899 	bl	80004d4 <__aeabi_i2d>
 80203a2:	4602      	mov	r2, r0
 80203a4:	460b      	mov	r3, r1
 80203a6:	4630      	mov	r0, r6
 80203a8:	4639      	mov	r1, r7
 80203aa:	f7df ff45 	bl	8000238 <__aeabi_dsub>
 80203ae:	f1bb 0f00 	cmp.w	fp, #0
 80203b2:	4606      	mov	r6, r0
 80203b4:	460f      	mov	r7, r1
 80203b6:	dd6c      	ble.n	8020492 <__kernel_rem_pio2+0x252>
 80203b8:	f108 31ff 	add.w	r1, r8, #4294967295
 80203bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80203be:	9d02      	ldr	r5, [sp, #8]
 80203c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80203c4:	f1cb 0018 	rsb	r0, fp, #24
 80203c8:	fa43 f200 	asr.w	r2, r3, r0
 80203cc:	4415      	add	r5, r2
 80203ce:	4082      	lsls	r2, r0
 80203d0:	1a9b      	subs	r3, r3, r2
 80203d2:	aa0c      	add	r2, sp, #48	@ 0x30
 80203d4:	9502      	str	r5, [sp, #8]
 80203d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80203da:	f1cb 0217 	rsb	r2, fp, #23
 80203de:	fa43 f902 	asr.w	r9, r3, r2
 80203e2:	f1b9 0f00 	cmp.w	r9, #0
 80203e6:	dd64      	ble.n	80204b2 <__kernel_rem_pio2+0x272>
 80203e8:	9b02      	ldr	r3, [sp, #8]
 80203ea:	2200      	movs	r2, #0
 80203ec:	3301      	adds	r3, #1
 80203ee:	9302      	str	r3, [sp, #8]
 80203f0:	4615      	mov	r5, r2
 80203f2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80203f6:	4590      	cmp	r8, r2
 80203f8:	f300 80b8 	bgt.w	802056c <__kernel_rem_pio2+0x32c>
 80203fc:	f1bb 0f00 	cmp.w	fp, #0
 8020400:	dd07      	ble.n	8020412 <__kernel_rem_pio2+0x1d2>
 8020402:	f1bb 0f01 	cmp.w	fp, #1
 8020406:	f000 80bf 	beq.w	8020588 <__kernel_rem_pio2+0x348>
 802040a:	f1bb 0f02 	cmp.w	fp, #2
 802040e:	f000 80c6 	beq.w	802059e <__kernel_rem_pio2+0x35e>
 8020412:	f1b9 0f02 	cmp.w	r9, #2
 8020416:	d14c      	bne.n	80204b2 <__kernel_rem_pio2+0x272>
 8020418:	4632      	mov	r2, r6
 802041a:	463b      	mov	r3, r7
 802041c:	494e      	ldr	r1, [pc, #312]	@ (8020558 <__kernel_rem_pio2+0x318>)
 802041e:	2000      	movs	r0, #0
 8020420:	f7df ff0a 	bl	8000238 <__aeabi_dsub>
 8020424:	4606      	mov	r6, r0
 8020426:	460f      	mov	r7, r1
 8020428:	2d00      	cmp	r5, #0
 802042a:	d042      	beq.n	80204b2 <__kernel_rem_pio2+0x272>
 802042c:	4658      	mov	r0, fp
 802042e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8020548 <__kernel_rem_pio2+0x308>
 8020432:	f000 fcb9 	bl	8020da8 <scalbn>
 8020436:	4630      	mov	r0, r6
 8020438:	4639      	mov	r1, r7
 802043a:	ec53 2b10 	vmov	r2, r3, d0
 802043e:	f7df fefb 	bl	8000238 <__aeabi_dsub>
 8020442:	4606      	mov	r6, r0
 8020444:	460f      	mov	r7, r1
 8020446:	e034      	b.n	80204b2 <__kernel_rem_pio2+0x272>
 8020448:	4b44      	ldr	r3, [pc, #272]	@ (802055c <__kernel_rem_pio2+0x31c>)
 802044a:	2200      	movs	r2, #0
 802044c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020450:	f7e0 f8aa 	bl	80005a8 <__aeabi_dmul>
 8020454:	f7e0 fb58 	bl	8000b08 <__aeabi_d2iz>
 8020458:	f7e0 f83c 	bl	80004d4 <__aeabi_i2d>
 802045c:	4b40      	ldr	r3, [pc, #256]	@ (8020560 <__kernel_rem_pio2+0x320>)
 802045e:	2200      	movs	r2, #0
 8020460:	4606      	mov	r6, r0
 8020462:	460f      	mov	r7, r1
 8020464:	f7e0 f8a0 	bl	80005a8 <__aeabi_dmul>
 8020468:	4602      	mov	r2, r0
 802046a:	460b      	mov	r3, r1
 802046c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020470:	f7df fee2 	bl	8000238 <__aeabi_dsub>
 8020474:	f7e0 fb48 	bl	8000b08 <__aeabi_d2iz>
 8020478:	e9d5 2300 	ldrd	r2, r3, [r5]
 802047c:	f849 0b04 	str.w	r0, [r9], #4
 8020480:	4639      	mov	r1, r7
 8020482:	4630      	mov	r0, r6
 8020484:	f7df feda 	bl	800023c <__adddf3>
 8020488:	f10a 3aff 	add.w	sl, sl, #4294967295
 802048c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020490:	e75d      	b.n	802034e <__kernel_rem_pio2+0x10e>
 8020492:	d107      	bne.n	80204a4 <__kernel_rem_pio2+0x264>
 8020494:	f108 33ff 	add.w	r3, r8, #4294967295
 8020498:	aa0c      	add	r2, sp, #48	@ 0x30
 802049a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802049e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80204a2:	e79e      	b.n	80203e2 <__kernel_rem_pio2+0x1a2>
 80204a4:	4b2f      	ldr	r3, [pc, #188]	@ (8020564 <__kernel_rem_pio2+0x324>)
 80204a6:	2200      	movs	r2, #0
 80204a8:	f7e0 fb04 	bl	8000ab4 <__aeabi_dcmpge>
 80204ac:	2800      	cmp	r0, #0
 80204ae:	d143      	bne.n	8020538 <__kernel_rem_pio2+0x2f8>
 80204b0:	4681      	mov	r9, r0
 80204b2:	2200      	movs	r2, #0
 80204b4:	2300      	movs	r3, #0
 80204b6:	4630      	mov	r0, r6
 80204b8:	4639      	mov	r1, r7
 80204ba:	f7e0 fadd 	bl	8000a78 <__aeabi_dcmpeq>
 80204be:	2800      	cmp	r0, #0
 80204c0:	f000 80bf 	beq.w	8020642 <__kernel_rem_pio2+0x402>
 80204c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80204c8:	2200      	movs	r2, #0
 80204ca:	9900      	ldr	r1, [sp, #0]
 80204cc:	428b      	cmp	r3, r1
 80204ce:	da6e      	bge.n	80205ae <__kernel_rem_pio2+0x36e>
 80204d0:	2a00      	cmp	r2, #0
 80204d2:	f000 8089 	beq.w	80205e8 <__kernel_rem_pio2+0x3a8>
 80204d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80204da:	ab0c      	add	r3, sp, #48	@ 0x30
 80204dc:	f1ab 0b18 	sub.w	fp, fp, #24
 80204e0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80204e4:	2b00      	cmp	r3, #0
 80204e6:	d0f6      	beq.n	80204d6 <__kernel_rem_pio2+0x296>
 80204e8:	4658      	mov	r0, fp
 80204ea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8020548 <__kernel_rem_pio2+0x308>
 80204ee:	f000 fc5b 	bl	8020da8 <scalbn>
 80204f2:	f108 0301 	add.w	r3, r8, #1
 80204f6:	00da      	lsls	r2, r3, #3
 80204f8:	9205      	str	r2, [sp, #20]
 80204fa:	ec55 4b10 	vmov	r4, r5, d0
 80204fe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8020500:	f8df b058 	ldr.w	fp, [pc, #88]	@ 802055c <__kernel_rem_pio2+0x31c>
 8020504:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8020508:	4646      	mov	r6, r8
 802050a:	f04f 0a00 	mov.w	sl, #0
 802050e:	2e00      	cmp	r6, #0
 8020510:	f280 80cf 	bge.w	80206b2 <__kernel_rem_pio2+0x472>
 8020514:	4644      	mov	r4, r8
 8020516:	2c00      	cmp	r4, #0
 8020518:	f2c0 80fd 	blt.w	8020716 <__kernel_rem_pio2+0x4d6>
 802051c:	4b12      	ldr	r3, [pc, #72]	@ (8020568 <__kernel_rem_pio2+0x328>)
 802051e:	461f      	mov	r7, r3
 8020520:	ab70      	add	r3, sp, #448	@ 0x1c0
 8020522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020526:	9306      	str	r3, [sp, #24]
 8020528:	f04f 0a00 	mov.w	sl, #0
 802052c:	f04f 0b00 	mov.w	fp, #0
 8020530:	2600      	movs	r6, #0
 8020532:	eba8 0504 	sub.w	r5, r8, r4
 8020536:	e0e2      	b.n	80206fe <__kernel_rem_pio2+0x4be>
 8020538:	f04f 0902 	mov.w	r9, #2
 802053c:	e754      	b.n	80203e8 <__kernel_rem_pio2+0x1a8>
 802053e:	bf00      	nop
	...
 802054c:	3ff00000 	.word	0x3ff00000
 8020550:	080238c8 	.word	0x080238c8
 8020554:	40200000 	.word	0x40200000
 8020558:	3ff00000 	.word	0x3ff00000
 802055c:	3e700000 	.word	0x3e700000
 8020560:	41700000 	.word	0x41700000
 8020564:	3fe00000 	.word	0x3fe00000
 8020568:	08023888 	.word	0x08023888
 802056c:	f854 3b04 	ldr.w	r3, [r4], #4
 8020570:	b945      	cbnz	r5, 8020584 <__kernel_rem_pio2+0x344>
 8020572:	b123      	cbz	r3, 802057e <__kernel_rem_pio2+0x33e>
 8020574:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8020578:	f844 3c04 	str.w	r3, [r4, #-4]
 802057c:	2301      	movs	r3, #1
 802057e:	3201      	adds	r2, #1
 8020580:	461d      	mov	r5, r3
 8020582:	e738      	b.n	80203f6 <__kernel_rem_pio2+0x1b6>
 8020584:	1acb      	subs	r3, r1, r3
 8020586:	e7f7      	b.n	8020578 <__kernel_rem_pio2+0x338>
 8020588:	f108 32ff 	add.w	r2, r8, #4294967295
 802058c:	ab0c      	add	r3, sp, #48	@ 0x30
 802058e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020592:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8020596:	a90c      	add	r1, sp, #48	@ 0x30
 8020598:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802059c:	e739      	b.n	8020412 <__kernel_rem_pio2+0x1d2>
 802059e:	f108 32ff 	add.w	r2, r8, #4294967295
 80205a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80205a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80205a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80205ac:	e7f3      	b.n	8020596 <__kernel_rem_pio2+0x356>
 80205ae:	a90c      	add	r1, sp, #48	@ 0x30
 80205b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80205b4:	3b01      	subs	r3, #1
 80205b6:	430a      	orrs	r2, r1
 80205b8:	e787      	b.n	80204ca <__kernel_rem_pio2+0x28a>
 80205ba:	3401      	adds	r4, #1
 80205bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80205c0:	2a00      	cmp	r2, #0
 80205c2:	d0fa      	beq.n	80205ba <__kernel_rem_pio2+0x37a>
 80205c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80205c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80205ca:	eb0d 0503 	add.w	r5, sp, r3
 80205ce:	9b06      	ldr	r3, [sp, #24]
 80205d0:	aa20      	add	r2, sp, #128	@ 0x80
 80205d2:	4443      	add	r3, r8
 80205d4:	f108 0701 	add.w	r7, r8, #1
 80205d8:	3d98      	subs	r5, #152	@ 0x98
 80205da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80205de:	4444      	add	r4, r8
 80205e0:	42bc      	cmp	r4, r7
 80205e2:	da04      	bge.n	80205ee <__kernel_rem_pio2+0x3ae>
 80205e4:	46a0      	mov	r8, r4
 80205e6:	e6a2      	b.n	802032e <__kernel_rem_pio2+0xee>
 80205e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205ea:	2401      	movs	r4, #1
 80205ec:	e7e6      	b.n	80205bc <__kernel_rem_pio2+0x37c>
 80205ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80205f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80205f4:	f7df ff6e 	bl	80004d4 <__aeabi_i2d>
 80205f8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80208c0 <__kernel_rem_pio2+0x680>
 80205fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8020600:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020608:	46b2      	mov	sl, r6
 802060a:	f04f 0800 	mov.w	r8, #0
 802060e:	9b05      	ldr	r3, [sp, #20]
 8020610:	4598      	cmp	r8, r3
 8020612:	dd05      	ble.n	8020620 <__kernel_rem_pio2+0x3e0>
 8020614:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020618:	3701      	adds	r7, #1
 802061a:	eca5 7b02 	vstmia	r5!, {d7}
 802061e:	e7df      	b.n	80205e0 <__kernel_rem_pio2+0x3a0>
 8020620:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8020624:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8020628:	f7df ffbe 	bl	80005a8 <__aeabi_dmul>
 802062c:	4602      	mov	r2, r0
 802062e:	460b      	mov	r3, r1
 8020630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020634:	f7df fe02 	bl	800023c <__adddf3>
 8020638:	f108 0801 	add.w	r8, r8, #1
 802063c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020640:	e7e5      	b.n	802060e <__kernel_rem_pio2+0x3ce>
 8020642:	f1cb 0000 	rsb	r0, fp, #0
 8020646:	ec47 6b10 	vmov	d0, r6, r7
 802064a:	f000 fbad 	bl	8020da8 <scalbn>
 802064e:	ec55 4b10 	vmov	r4, r5, d0
 8020652:	4b9d      	ldr	r3, [pc, #628]	@ (80208c8 <__kernel_rem_pio2+0x688>)
 8020654:	2200      	movs	r2, #0
 8020656:	4620      	mov	r0, r4
 8020658:	4629      	mov	r1, r5
 802065a:	f7e0 fa2b 	bl	8000ab4 <__aeabi_dcmpge>
 802065e:	b300      	cbz	r0, 80206a2 <__kernel_rem_pio2+0x462>
 8020660:	4b9a      	ldr	r3, [pc, #616]	@ (80208cc <__kernel_rem_pio2+0x68c>)
 8020662:	2200      	movs	r2, #0
 8020664:	4620      	mov	r0, r4
 8020666:	4629      	mov	r1, r5
 8020668:	f7df ff9e 	bl	80005a8 <__aeabi_dmul>
 802066c:	f7e0 fa4c 	bl	8000b08 <__aeabi_d2iz>
 8020670:	4606      	mov	r6, r0
 8020672:	f7df ff2f 	bl	80004d4 <__aeabi_i2d>
 8020676:	4b94      	ldr	r3, [pc, #592]	@ (80208c8 <__kernel_rem_pio2+0x688>)
 8020678:	2200      	movs	r2, #0
 802067a:	f7df ff95 	bl	80005a8 <__aeabi_dmul>
 802067e:	460b      	mov	r3, r1
 8020680:	4602      	mov	r2, r0
 8020682:	4629      	mov	r1, r5
 8020684:	4620      	mov	r0, r4
 8020686:	f7df fdd7 	bl	8000238 <__aeabi_dsub>
 802068a:	f7e0 fa3d 	bl	8000b08 <__aeabi_d2iz>
 802068e:	ab0c      	add	r3, sp, #48	@ 0x30
 8020690:	f10b 0b18 	add.w	fp, fp, #24
 8020694:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8020698:	f108 0801 	add.w	r8, r8, #1
 802069c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80206a0:	e722      	b.n	80204e8 <__kernel_rem_pio2+0x2a8>
 80206a2:	4620      	mov	r0, r4
 80206a4:	4629      	mov	r1, r5
 80206a6:	f7e0 fa2f 	bl	8000b08 <__aeabi_d2iz>
 80206aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80206ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80206b0:	e71a      	b.n	80204e8 <__kernel_rem_pio2+0x2a8>
 80206b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80206b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80206b8:	f7df ff0c 	bl	80004d4 <__aeabi_i2d>
 80206bc:	4622      	mov	r2, r4
 80206be:	462b      	mov	r3, r5
 80206c0:	f7df ff72 	bl	80005a8 <__aeabi_dmul>
 80206c4:	4652      	mov	r2, sl
 80206c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80206ca:	465b      	mov	r3, fp
 80206cc:	4620      	mov	r0, r4
 80206ce:	4629      	mov	r1, r5
 80206d0:	f7df ff6a 	bl	80005a8 <__aeabi_dmul>
 80206d4:	3e01      	subs	r6, #1
 80206d6:	4604      	mov	r4, r0
 80206d8:	460d      	mov	r5, r1
 80206da:	e718      	b.n	802050e <__kernel_rem_pio2+0x2ce>
 80206dc:	9906      	ldr	r1, [sp, #24]
 80206de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80206e2:	9106      	str	r1, [sp, #24]
 80206e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80206e8:	f7df ff5e 	bl	80005a8 <__aeabi_dmul>
 80206ec:	4602      	mov	r2, r0
 80206ee:	460b      	mov	r3, r1
 80206f0:	4650      	mov	r0, sl
 80206f2:	4659      	mov	r1, fp
 80206f4:	f7df fda2 	bl	800023c <__adddf3>
 80206f8:	3601      	adds	r6, #1
 80206fa:	4682      	mov	sl, r0
 80206fc:	468b      	mov	fp, r1
 80206fe:	9b00      	ldr	r3, [sp, #0]
 8020700:	429e      	cmp	r6, r3
 8020702:	dc01      	bgt.n	8020708 <__kernel_rem_pio2+0x4c8>
 8020704:	42b5      	cmp	r5, r6
 8020706:	dae9      	bge.n	80206dc <__kernel_rem_pio2+0x49c>
 8020708:	ab48      	add	r3, sp, #288	@ 0x120
 802070a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802070e:	e9c5 ab00 	strd	sl, fp, [r5]
 8020712:	3c01      	subs	r4, #1
 8020714:	e6ff      	b.n	8020516 <__kernel_rem_pio2+0x2d6>
 8020716:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8020718:	2b02      	cmp	r3, #2
 802071a:	dc0b      	bgt.n	8020734 <__kernel_rem_pio2+0x4f4>
 802071c:	2b00      	cmp	r3, #0
 802071e:	dc39      	bgt.n	8020794 <__kernel_rem_pio2+0x554>
 8020720:	d05d      	beq.n	80207de <__kernel_rem_pio2+0x59e>
 8020722:	9b02      	ldr	r3, [sp, #8]
 8020724:	f003 0007 	and.w	r0, r3, #7
 8020728:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 802072c:	ecbd 8b02 	vpop	{d8}
 8020730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020734:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8020736:	2b03      	cmp	r3, #3
 8020738:	d1f3      	bne.n	8020722 <__kernel_rem_pio2+0x4e2>
 802073a:	9b05      	ldr	r3, [sp, #20]
 802073c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8020740:	eb0d 0403 	add.w	r4, sp, r3
 8020744:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8020748:	4625      	mov	r5, r4
 802074a:	46c2      	mov	sl, r8
 802074c:	f1ba 0f00 	cmp.w	sl, #0
 8020750:	f1a5 0508 	sub.w	r5, r5, #8
 8020754:	dc6b      	bgt.n	802082e <__kernel_rem_pio2+0x5ee>
 8020756:	4645      	mov	r5, r8
 8020758:	2d01      	cmp	r5, #1
 802075a:	f1a4 0408 	sub.w	r4, r4, #8
 802075e:	f300 8087 	bgt.w	8020870 <__kernel_rem_pio2+0x630>
 8020762:	9c05      	ldr	r4, [sp, #20]
 8020764:	ab48      	add	r3, sp, #288	@ 0x120
 8020766:	441c      	add	r4, r3
 8020768:	2000      	movs	r0, #0
 802076a:	2100      	movs	r1, #0
 802076c:	f1b8 0f01 	cmp.w	r8, #1
 8020770:	f300 809c 	bgt.w	80208ac <__kernel_rem_pio2+0x66c>
 8020774:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8020778:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 802077c:	f1b9 0f00 	cmp.w	r9, #0
 8020780:	f040 80a6 	bne.w	80208d0 <__kernel_rem_pio2+0x690>
 8020784:	9b04      	ldr	r3, [sp, #16]
 8020786:	e9c3 7800 	strd	r7, r8, [r3]
 802078a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 802078e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8020792:	e7c6      	b.n	8020722 <__kernel_rem_pio2+0x4e2>
 8020794:	9d05      	ldr	r5, [sp, #20]
 8020796:	ab48      	add	r3, sp, #288	@ 0x120
 8020798:	441d      	add	r5, r3
 802079a:	4644      	mov	r4, r8
 802079c:	2000      	movs	r0, #0
 802079e:	2100      	movs	r1, #0
 80207a0:	2c00      	cmp	r4, #0
 80207a2:	da35      	bge.n	8020810 <__kernel_rem_pio2+0x5d0>
 80207a4:	f1b9 0f00 	cmp.w	r9, #0
 80207a8:	d038      	beq.n	802081c <__kernel_rem_pio2+0x5dc>
 80207aa:	4602      	mov	r2, r0
 80207ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80207b0:	9c04      	ldr	r4, [sp, #16]
 80207b2:	e9c4 2300 	strd	r2, r3, [r4]
 80207b6:	4602      	mov	r2, r0
 80207b8:	460b      	mov	r3, r1
 80207ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80207be:	f7df fd3b 	bl	8000238 <__aeabi_dsub>
 80207c2:	ad4a      	add	r5, sp, #296	@ 0x128
 80207c4:	2401      	movs	r4, #1
 80207c6:	45a0      	cmp	r8, r4
 80207c8:	da2b      	bge.n	8020822 <__kernel_rem_pio2+0x5e2>
 80207ca:	f1b9 0f00 	cmp.w	r9, #0
 80207ce:	d002      	beq.n	80207d6 <__kernel_rem_pio2+0x596>
 80207d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80207d4:	4619      	mov	r1, r3
 80207d6:	9b04      	ldr	r3, [sp, #16]
 80207d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80207dc:	e7a1      	b.n	8020722 <__kernel_rem_pio2+0x4e2>
 80207de:	9c05      	ldr	r4, [sp, #20]
 80207e0:	ab48      	add	r3, sp, #288	@ 0x120
 80207e2:	441c      	add	r4, r3
 80207e4:	2000      	movs	r0, #0
 80207e6:	2100      	movs	r1, #0
 80207e8:	f1b8 0f00 	cmp.w	r8, #0
 80207ec:	da09      	bge.n	8020802 <__kernel_rem_pio2+0x5c2>
 80207ee:	f1b9 0f00 	cmp.w	r9, #0
 80207f2:	d002      	beq.n	80207fa <__kernel_rem_pio2+0x5ba>
 80207f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80207f8:	4619      	mov	r1, r3
 80207fa:	9b04      	ldr	r3, [sp, #16]
 80207fc:	e9c3 0100 	strd	r0, r1, [r3]
 8020800:	e78f      	b.n	8020722 <__kernel_rem_pio2+0x4e2>
 8020802:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8020806:	f7df fd19 	bl	800023c <__adddf3>
 802080a:	f108 38ff 	add.w	r8, r8, #4294967295
 802080e:	e7eb      	b.n	80207e8 <__kernel_rem_pio2+0x5a8>
 8020810:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8020814:	f7df fd12 	bl	800023c <__adddf3>
 8020818:	3c01      	subs	r4, #1
 802081a:	e7c1      	b.n	80207a0 <__kernel_rem_pio2+0x560>
 802081c:	4602      	mov	r2, r0
 802081e:	460b      	mov	r3, r1
 8020820:	e7c6      	b.n	80207b0 <__kernel_rem_pio2+0x570>
 8020822:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8020826:	f7df fd09 	bl	800023c <__adddf3>
 802082a:	3401      	adds	r4, #1
 802082c:	e7cb      	b.n	80207c6 <__kernel_rem_pio2+0x586>
 802082e:	ed95 7b00 	vldr	d7, [r5]
 8020832:	ed8d 7b00 	vstr	d7, [sp]
 8020836:	ed95 7b02 	vldr	d7, [r5, #8]
 802083a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802083e:	ec53 2b17 	vmov	r2, r3, d7
 8020842:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020846:	f7df fcf9 	bl	800023c <__adddf3>
 802084a:	4602      	mov	r2, r0
 802084c:	460b      	mov	r3, r1
 802084e:	4606      	mov	r6, r0
 8020850:	460f      	mov	r7, r1
 8020852:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020856:	f7df fcef 	bl	8000238 <__aeabi_dsub>
 802085a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802085e:	f7df fced 	bl	800023c <__adddf3>
 8020862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020866:	e9c5 0102 	strd	r0, r1, [r5, #8]
 802086a:	e9c5 6700 	strd	r6, r7, [r5]
 802086e:	e76d      	b.n	802074c <__kernel_rem_pio2+0x50c>
 8020870:	ed94 7b00 	vldr	d7, [r4]
 8020874:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8020878:	ec51 0b17 	vmov	r0, r1, d7
 802087c:	4652      	mov	r2, sl
 802087e:	465b      	mov	r3, fp
 8020880:	ed8d 7b00 	vstr	d7, [sp]
 8020884:	f7df fcda 	bl	800023c <__adddf3>
 8020888:	4602      	mov	r2, r0
 802088a:	460b      	mov	r3, r1
 802088c:	4606      	mov	r6, r0
 802088e:	460f      	mov	r7, r1
 8020890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020894:	f7df fcd0 	bl	8000238 <__aeabi_dsub>
 8020898:	4652      	mov	r2, sl
 802089a:	465b      	mov	r3, fp
 802089c:	f7df fcce 	bl	800023c <__adddf3>
 80208a0:	3d01      	subs	r5, #1
 80208a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80208a6:	e9c4 6700 	strd	r6, r7, [r4]
 80208aa:	e755      	b.n	8020758 <__kernel_rem_pio2+0x518>
 80208ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80208b0:	f7df fcc4 	bl	800023c <__adddf3>
 80208b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80208b8:	e758      	b.n	802076c <__kernel_rem_pio2+0x52c>
 80208ba:	bf00      	nop
 80208bc:	f3af 8000 	nop.w
	...
 80208c8:	41700000 	.word	0x41700000
 80208cc:	3e700000 	.word	0x3e700000
 80208d0:	9b04      	ldr	r3, [sp, #16]
 80208d2:	9a04      	ldr	r2, [sp, #16]
 80208d4:	601f      	str	r7, [r3, #0]
 80208d6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80208da:	605c      	str	r4, [r3, #4]
 80208dc:	609d      	str	r5, [r3, #8]
 80208de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80208e2:	60d3      	str	r3, [r2, #12]
 80208e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80208e8:	6110      	str	r0, [r2, #16]
 80208ea:	6153      	str	r3, [r2, #20]
 80208ec:	e719      	b.n	8020722 <__kernel_rem_pio2+0x4e2>
 80208ee:	bf00      	nop

080208f0 <__ieee754_acos>:
 80208f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208f4:	ec55 4b10 	vmov	r4, r5, d0
 80208f8:	49b7      	ldr	r1, [pc, #732]	@ (8020bd8 <__ieee754_acos+0x2e8>)
 80208fa:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80208fe:	428b      	cmp	r3, r1
 8020900:	d919      	bls.n	8020936 <__ieee754_acos+0x46>
 8020902:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8020906:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 802090a:	4323      	orrs	r3, r4
 802090c:	d106      	bne.n	802091c <__ieee754_acos+0x2c>
 802090e:	2d00      	cmp	r5, #0
 8020910:	f340 8210 	ble.w	8020d34 <__ieee754_acos+0x444>
 8020914:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8020b68 <__ieee754_acos+0x278>
 8020918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802091c:	4622      	mov	r2, r4
 802091e:	462b      	mov	r3, r5
 8020920:	4620      	mov	r0, r4
 8020922:	4629      	mov	r1, r5
 8020924:	f7df fc88 	bl	8000238 <__aeabi_dsub>
 8020928:	4602      	mov	r2, r0
 802092a:	460b      	mov	r3, r1
 802092c:	f7df ff66 	bl	80007fc <__aeabi_ddiv>
 8020930:	ec41 0b10 	vmov	d0, r0, r1
 8020934:	e7f0      	b.n	8020918 <__ieee754_acos+0x28>
 8020936:	49a9      	ldr	r1, [pc, #676]	@ (8020bdc <__ieee754_acos+0x2ec>)
 8020938:	428b      	cmp	r3, r1
 802093a:	f200 8085 	bhi.w	8020a48 <__ieee754_acos+0x158>
 802093e:	4aa8      	ldr	r2, [pc, #672]	@ (8020be0 <__ieee754_acos+0x2f0>)
 8020940:	4293      	cmp	r3, r2
 8020942:	f240 81fa 	bls.w	8020d3a <__ieee754_acos+0x44a>
 8020946:	4622      	mov	r2, r4
 8020948:	462b      	mov	r3, r5
 802094a:	4620      	mov	r0, r4
 802094c:	4629      	mov	r1, r5
 802094e:	f7df fe2b 	bl	80005a8 <__aeabi_dmul>
 8020952:	a387      	add	r3, pc, #540	@ (adr r3, 8020b70 <__ieee754_acos+0x280>)
 8020954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020958:	4606      	mov	r6, r0
 802095a:	460f      	mov	r7, r1
 802095c:	f7df fe24 	bl	80005a8 <__aeabi_dmul>
 8020960:	a385      	add	r3, pc, #532	@ (adr r3, 8020b78 <__ieee754_acos+0x288>)
 8020962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020966:	f7df fc69 	bl	800023c <__adddf3>
 802096a:	4632      	mov	r2, r6
 802096c:	463b      	mov	r3, r7
 802096e:	f7df fe1b 	bl	80005a8 <__aeabi_dmul>
 8020972:	a383      	add	r3, pc, #524	@ (adr r3, 8020b80 <__ieee754_acos+0x290>)
 8020974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020978:	f7df fc5e 	bl	8000238 <__aeabi_dsub>
 802097c:	4632      	mov	r2, r6
 802097e:	463b      	mov	r3, r7
 8020980:	f7df fe12 	bl	80005a8 <__aeabi_dmul>
 8020984:	a380      	add	r3, pc, #512	@ (adr r3, 8020b88 <__ieee754_acos+0x298>)
 8020986:	e9d3 2300 	ldrd	r2, r3, [r3]
 802098a:	f7df fc57 	bl	800023c <__adddf3>
 802098e:	4632      	mov	r2, r6
 8020990:	463b      	mov	r3, r7
 8020992:	f7df fe09 	bl	80005a8 <__aeabi_dmul>
 8020996:	a37e      	add	r3, pc, #504	@ (adr r3, 8020b90 <__ieee754_acos+0x2a0>)
 8020998:	e9d3 2300 	ldrd	r2, r3, [r3]
 802099c:	f7df fc4c 	bl	8000238 <__aeabi_dsub>
 80209a0:	4632      	mov	r2, r6
 80209a2:	463b      	mov	r3, r7
 80209a4:	f7df fe00 	bl	80005a8 <__aeabi_dmul>
 80209a8:	a37b      	add	r3, pc, #492	@ (adr r3, 8020b98 <__ieee754_acos+0x2a8>)
 80209aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209ae:	f7df fc45 	bl	800023c <__adddf3>
 80209b2:	4632      	mov	r2, r6
 80209b4:	463b      	mov	r3, r7
 80209b6:	f7df fdf7 	bl	80005a8 <__aeabi_dmul>
 80209ba:	a379      	add	r3, pc, #484	@ (adr r3, 8020ba0 <__ieee754_acos+0x2b0>)
 80209bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209c0:	4680      	mov	r8, r0
 80209c2:	4689      	mov	r9, r1
 80209c4:	4630      	mov	r0, r6
 80209c6:	4639      	mov	r1, r7
 80209c8:	f7df fdee 	bl	80005a8 <__aeabi_dmul>
 80209cc:	a376      	add	r3, pc, #472	@ (adr r3, 8020ba8 <__ieee754_acos+0x2b8>)
 80209ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209d2:	f7df fc31 	bl	8000238 <__aeabi_dsub>
 80209d6:	4632      	mov	r2, r6
 80209d8:	463b      	mov	r3, r7
 80209da:	f7df fde5 	bl	80005a8 <__aeabi_dmul>
 80209de:	a374      	add	r3, pc, #464	@ (adr r3, 8020bb0 <__ieee754_acos+0x2c0>)
 80209e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209e4:	f7df fc2a 	bl	800023c <__adddf3>
 80209e8:	4632      	mov	r2, r6
 80209ea:	463b      	mov	r3, r7
 80209ec:	f7df fddc 	bl	80005a8 <__aeabi_dmul>
 80209f0:	a371      	add	r3, pc, #452	@ (adr r3, 8020bb8 <__ieee754_acos+0x2c8>)
 80209f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209f6:	f7df fc1f 	bl	8000238 <__aeabi_dsub>
 80209fa:	4632      	mov	r2, r6
 80209fc:	463b      	mov	r3, r7
 80209fe:	f7df fdd3 	bl	80005a8 <__aeabi_dmul>
 8020a02:	4b78      	ldr	r3, [pc, #480]	@ (8020be4 <__ieee754_acos+0x2f4>)
 8020a04:	2200      	movs	r2, #0
 8020a06:	f7df fc19 	bl	800023c <__adddf3>
 8020a0a:	4602      	mov	r2, r0
 8020a0c:	460b      	mov	r3, r1
 8020a0e:	4640      	mov	r0, r8
 8020a10:	4649      	mov	r1, r9
 8020a12:	f7df fef3 	bl	80007fc <__aeabi_ddiv>
 8020a16:	4622      	mov	r2, r4
 8020a18:	462b      	mov	r3, r5
 8020a1a:	f7df fdc5 	bl	80005a8 <__aeabi_dmul>
 8020a1e:	4602      	mov	r2, r0
 8020a20:	460b      	mov	r3, r1
 8020a22:	a167      	add	r1, pc, #412	@ (adr r1, 8020bc0 <__ieee754_acos+0x2d0>)
 8020a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a28:	f7df fc06 	bl	8000238 <__aeabi_dsub>
 8020a2c:	4602      	mov	r2, r0
 8020a2e:	460b      	mov	r3, r1
 8020a30:	4620      	mov	r0, r4
 8020a32:	4629      	mov	r1, r5
 8020a34:	f7df fc00 	bl	8000238 <__aeabi_dsub>
 8020a38:	4602      	mov	r2, r0
 8020a3a:	460b      	mov	r3, r1
 8020a3c:	a162      	add	r1, pc, #392	@ (adr r1, 8020bc8 <__ieee754_acos+0x2d8>)
 8020a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a42:	f7df fbf9 	bl	8000238 <__aeabi_dsub>
 8020a46:	e773      	b.n	8020930 <__ieee754_acos+0x40>
 8020a48:	2d00      	cmp	r5, #0
 8020a4a:	f280 80cf 	bge.w	8020bec <__ieee754_acos+0x2fc>
 8020a4e:	4b65      	ldr	r3, [pc, #404]	@ (8020be4 <__ieee754_acos+0x2f4>)
 8020a50:	2200      	movs	r2, #0
 8020a52:	4620      	mov	r0, r4
 8020a54:	4629      	mov	r1, r5
 8020a56:	f7df fbf1 	bl	800023c <__adddf3>
 8020a5a:	4b63      	ldr	r3, [pc, #396]	@ (8020be8 <__ieee754_acos+0x2f8>)
 8020a5c:	2200      	movs	r2, #0
 8020a5e:	f7df fda3 	bl	80005a8 <__aeabi_dmul>
 8020a62:	a343      	add	r3, pc, #268	@ (adr r3, 8020b70 <__ieee754_acos+0x280>)
 8020a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a68:	4604      	mov	r4, r0
 8020a6a:	460d      	mov	r5, r1
 8020a6c:	f7df fd9c 	bl	80005a8 <__aeabi_dmul>
 8020a70:	a341      	add	r3, pc, #260	@ (adr r3, 8020b78 <__ieee754_acos+0x288>)
 8020a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a76:	f7df fbe1 	bl	800023c <__adddf3>
 8020a7a:	4622      	mov	r2, r4
 8020a7c:	462b      	mov	r3, r5
 8020a7e:	f7df fd93 	bl	80005a8 <__aeabi_dmul>
 8020a82:	a33f      	add	r3, pc, #252	@ (adr r3, 8020b80 <__ieee754_acos+0x290>)
 8020a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a88:	f7df fbd6 	bl	8000238 <__aeabi_dsub>
 8020a8c:	4622      	mov	r2, r4
 8020a8e:	462b      	mov	r3, r5
 8020a90:	f7df fd8a 	bl	80005a8 <__aeabi_dmul>
 8020a94:	a33c      	add	r3, pc, #240	@ (adr r3, 8020b88 <__ieee754_acos+0x298>)
 8020a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a9a:	f7df fbcf 	bl	800023c <__adddf3>
 8020a9e:	4622      	mov	r2, r4
 8020aa0:	462b      	mov	r3, r5
 8020aa2:	f7df fd81 	bl	80005a8 <__aeabi_dmul>
 8020aa6:	a33a      	add	r3, pc, #232	@ (adr r3, 8020b90 <__ieee754_acos+0x2a0>)
 8020aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020aac:	f7df fbc4 	bl	8000238 <__aeabi_dsub>
 8020ab0:	4622      	mov	r2, r4
 8020ab2:	462b      	mov	r3, r5
 8020ab4:	f7df fd78 	bl	80005a8 <__aeabi_dmul>
 8020ab8:	a337      	add	r3, pc, #220	@ (adr r3, 8020b98 <__ieee754_acos+0x2a8>)
 8020aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020abe:	f7df fbbd 	bl	800023c <__adddf3>
 8020ac2:	4622      	mov	r2, r4
 8020ac4:	462b      	mov	r3, r5
 8020ac6:	f7df fd6f 	bl	80005a8 <__aeabi_dmul>
 8020aca:	a335      	add	r3, pc, #212	@ (adr r3, 8020ba0 <__ieee754_acos+0x2b0>)
 8020acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ad0:	4606      	mov	r6, r0
 8020ad2:	460f      	mov	r7, r1
 8020ad4:	4620      	mov	r0, r4
 8020ad6:	4629      	mov	r1, r5
 8020ad8:	f7df fd66 	bl	80005a8 <__aeabi_dmul>
 8020adc:	a332      	add	r3, pc, #200	@ (adr r3, 8020ba8 <__ieee754_acos+0x2b8>)
 8020ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ae2:	f7df fba9 	bl	8000238 <__aeabi_dsub>
 8020ae6:	4622      	mov	r2, r4
 8020ae8:	462b      	mov	r3, r5
 8020aea:	f7df fd5d 	bl	80005a8 <__aeabi_dmul>
 8020aee:	a330      	add	r3, pc, #192	@ (adr r3, 8020bb0 <__ieee754_acos+0x2c0>)
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7df fba2 	bl	800023c <__adddf3>
 8020af8:	4622      	mov	r2, r4
 8020afa:	462b      	mov	r3, r5
 8020afc:	f7df fd54 	bl	80005a8 <__aeabi_dmul>
 8020b00:	a32d      	add	r3, pc, #180	@ (adr r3, 8020bb8 <__ieee754_acos+0x2c8>)
 8020b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b06:	f7df fb97 	bl	8000238 <__aeabi_dsub>
 8020b0a:	4622      	mov	r2, r4
 8020b0c:	462b      	mov	r3, r5
 8020b0e:	f7df fd4b 	bl	80005a8 <__aeabi_dmul>
 8020b12:	4b34      	ldr	r3, [pc, #208]	@ (8020be4 <__ieee754_acos+0x2f4>)
 8020b14:	2200      	movs	r2, #0
 8020b16:	f7df fb91 	bl	800023c <__adddf3>
 8020b1a:	ec45 4b10 	vmov	d0, r4, r5
 8020b1e:	4680      	mov	r8, r0
 8020b20:	4689      	mov	r9, r1
 8020b22:	f000 f9bf 	bl	8020ea4 <__ieee754_sqrt>
 8020b26:	ec55 4b10 	vmov	r4, r5, d0
 8020b2a:	4642      	mov	r2, r8
 8020b2c:	464b      	mov	r3, r9
 8020b2e:	4630      	mov	r0, r6
 8020b30:	4639      	mov	r1, r7
 8020b32:	f7df fe63 	bl	80007fc <__aeabi_ddiv>
 8020b36:	4622      	mov	r2, r4
 8020b38:	462b      	mov	r3, r5
 8020b3a:	f7df fd35 	bl	80005a8 <__aeabi_dmul>
 8020b3e:	a320      	add	r3, pc, #128	@ (adr r3, 8020bc0 <__ieee754_acos+0x2d0>)
 8020b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b44:	f7df fb78 	bl	8000238 <__aeabi_dsub>
 8020b48:	4622      	mov	r2, r4
 8020b4a:	462b      	mov	r3, r5
 8020b4c:	f7df fb76 	bl	800023c <__adddf3>
 8020b50:	4602      	mov	r2, r0
 8020b52:	460b      	mov	r3, r1
 8020b54:	f7df fb72 	bl	800023c <__adddf3>
 8020b58:	4602      	mov	r2, r0
 8020b5a:	460b      	mov	r3, r1
 8020b5c:	a11c      	add	r1, pc, #112	@ (adr r1, 8020bd0 <__ieee754_acos+0x2e0>)
 8020b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b62:	e76e      	b.n	8020a42 <__ieee754_acos+0x152>
 8020b64:	f3af 8000 	nop.w
	...
 8020b70:	0dfdf709 	.word	0x0dfdf709
 8020b74:	3f023de1 	.word	0x3f023de1
 8020b78:	7501b288 	.word	0x7501b288
 8020b7c:	3f49efe0 	.word	0x3f49efe0
 8020b80:	b5688f3b 	.word	0xb5688f3b
 8020b84:	3fa48228 	.word	0x3fa48228
 8020b88:	0e884455 	.word	0x0e884455
 8020b8c:	3fc9c155 	.word	0x3fc9c155
 8020b90:	03eb6f7d 	.word	0x03eb6f7d
 8020b94:	3fd4d612 	.word	0x3fd4d612
 8020b98:	55555555 	.word	0x55555555
 8020b9c:	3fc55555 	.word	0x3fc55555
 8020ba0:	b12e9282 	.word	0xb12e9282
 8020ba4:	3fb3b8c5 	.word	0x3fb3b8c5
 8020ba8:	1b8d0159 	.word	0x1b8d0159
 8020bac:	3fe6066c 	.word	0x3fe6066c
 8020bb0:	9c598ac8 	.word	0x9c598ac8
 8020bb4:	40002ae5 	.word	0x40002ae5
 8020bb8:	1c8a2d4b 	.word	0x1c8a2d4b
 8020bbc:	40033a27 	.word	0x40033a27
 8020bc0:	33145c07 	.word	0x33145c07
 8020bc4:	3c91a626 	.word	0x3c91a626
 8020bc8:	54442d18 	.word	0x54442d18
 8020bcc:	3ff921fb 	.word	0x3ff921fb
 8020bd0:	54442d18 	.word	0x54442d18
 8020bd4:	400921fb 	.word	0x400921fb
 8020bd8:	3fefffff 	.word	0x3fefffff
 8020bdc:	3fdfffff 	.word	0x3fdfffff
 8020be0:	3c600000 	.word	0x3c600000
 8020be4:	3ff00000 	.word	0x3ff00000
 8020be8:	3fe00000 	.word	0x3fe00000
 8020bec:	4622      	mov	r2, r4
 8020bee:	462b      	mov	r3, r5
 8020bf0:	496b      	ldr	r1, [pc, #428]	@ (8020da0 <__ieee754_acos+0x4b0>)
 8020bf2:	2000      	movs	r0, #0
 8020bf4:	f7df fb20 	bl	8000238 <__aeabi_dsub>
 8020bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8020da4 <__ieee754_acos+0x4b4>)
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	f7df fcd4 	bl	80005a8 <__aeabi_dmul>
 8020c00:	4604      	mov	r4, r0
 8020c02:	460d      	mov	r5, r1
 8020c04:	ec45 4b10 	vmov	d0, r4, r5
 8020c08:	f000 f94c 	bl	8020ea4 <__ieee754_sqrt>
 8020c0c:	a34c      	add	r3, pc, #304	@ (adr r3, 8020d40 <__ieee754_acos+0x450>)
 8020c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c12:	4620      	mov	r0, r4
 8020c14:	4629      	mov	r1, r5
 8020c16:	ec59 8b10 	vmov	r8, r9, d0
 8020c1a:	f7df fcc5 	bl	80005a8 <__aeabi_dmul>
 8020c1e:	a34a      	add	r3, pc, #296	@ (adr r3, 8020d48 <__ieee754_acos+0x458>)
 8020c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c24:	f7df fb0a 	bl	800023c <__adddf3>
 8020c28:	4622      	mov	r2, r4
 8020c2a:	462b      	mov	r3, r5
 8020c2c:	f7df fcbc 	bl	80005a8 <__aeabi_dmul>
 8020c30:	a347      	add	r3, pc, #284	@ (adr r3, 8020d50 <__ieee754_acos+0x460>)
 8020c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c36:	f7df faff 	bl	8000238 <__aeabi_dsub>
 8020c3a:	4622      	mov	r2, r4
 8020c3c:	462b      	mov	r3, r5
 8020c3e:	f7df fcb3 	bl	80005a8 <__aeabi_dmul>
 8020c42:	a345      	add	r3, pc, #276	@ (adr r3, 8020d58 <__ieee754_acos+0x468>)
 8020c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c48:	f7df faf8 	bl	800023c <__adddf3>
 8020c4c:	4622      	mov	r2, r4
 8020c4e:	462b      	mov	r3, r5
 8020c50:	f7df fcaa 	bl	80005a8 <__aeabi_dmul>
 8020c54:	a342      	add	r3, pc, #264	@ (adr r3, 8020d60 <__ieee754_acos+0x470>)
 8020c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c5a:	f7df faed 	bl	8000238 <__aeabi_dsub>
 8020c5e:	4622      	mov	r2, r4
 8020c60:	462b      	mov	r3, r5
 8020c62:	f7df fca1 	bl	80005a8 <__aeabi_dmul>
 8020c66:	a340      	add	r3, pc, #256	@ (adr r3, 8020d68 <__ieee754_acos+0x478>)
 8020c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c6c:	f7df fae6 	bl	800023c <__adddf3>
 8020c70:	4622      	mov	r2, r4
 8020c72:	462b      	mov	r3, r5
 8020c74:	f7df fc98 	bl	80005a8 <__aeabi_dmul>
 8020c78:	a33d      	add	r3, pc, #244	@ (adr r3, 8020d70 <__ieee754_acos+0x480>)
 8020c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c7e:	4682      	mov	sl, r0
 8020c80:	468b      	mov	fp, r1
 8020c82:	4620      	mov	r0, r4
 8020c84:	4629      	mov	r1, r5
 8020c86:	f7df fc8f 	bl	80005a8 <__aeabi_dmul>
 8020c8a:	a33b      	add	r3, pc, #236	@ (adr r3, 8020d78 <__ieee754_acos+0x488>)
 8020c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c90:	f7df fad2 	bl	8000238 <__aeabi_dsub>
 8020c94:	4622      	mov	r2, r4
 8020c96:	462b      	mov	r3, r5
 8020c98:	f7df fc86 	bl	80005a8 <__aeabi_dmul>
 8020c9c:	a338      	add	r3, pc, #224	@ (adr r3, 8020d80 <__ieee754_acos+0x490>)
 8020c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ca2:	f7df facb 	bl	800023c <__adddf3>
 8020ca6:	4622      	mov	r2, r4
 8020ca8:	462b      	mov	r3, r5
 8020caa:	f7df fc7d 	bl	80005a8 <__aeabi_dmul>
 8020cae:	a336      	add	r3, pc, #216	@ (adr r3, 8020d88 <__ieee754_acos+0x498>)
 8020cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cb4:	f7df fac0 	bl	8000238 <__aeabi_dsub>
 8020cb8:	4622      	mov	r2, r4
 8020cba:	462b      	mov	r3, r5
 8020cbc:	f7df fc74 	bl	80005a8 <__aeabi_dmul>
 8020cc0:	4b37      	ldr	r3, [pc, #220]	@ (8020da0 <__ieee754_acos+0x4b0>)
 8020cc2:	2200      	movs	r2, #0
 8020cc4:	f7df faba 	bl	800023c <__adddf3>
 8020cc8:	4602      	mov	r2, r0
 8020cca:	460b      	mov	r3, r1
 8020ccc:	4650      	mov	r0, sl
 8020cce:	4659      	mov	r1, fp
 8020cd0:	f7df fd94 	bl	80007fc <__aeabi_ddiv>
 8020cd4:	4642      	mov	r2, r8
 8020cd6:	464b      	mov	r3, r9
 8020cd8:	f7df fc66 	bl	80005a8 <__aeabi_dmul>
 8020cdc:	2600      	movs	r6, #0
 8020cde:	4682      	mov	sl, r0
 8020ce0:	468b      	mov	fp, r1
 8020ce2:	4632      	mov	r2, r6
 8020ce4:	464b      	mov	r3, r9
 8020ce6:	4630      	mov	r0, r6
 8020ce8:	4649      	mov	r1, r9
 8020cea:	f7df fc5d 	bl	80005a8 <__aeabi_dmul>
 8020cee:	4602      	mov	r2, r0
 8020cf0:	460b      	mov	r3, r1
 8020cf2:	4620      	mov	r0, r4
 8020cf4:	4629      	mov	r1, r5
 8020cf6:	f7df fa9f 	bl	8000238 <__aeabi_dsub>
 8020cfa:	4632      	mov	r2, r6
 8020cfc:	4604      	mov	r4, r0
 8020cfe:	460d      	mov	r5, r1
 8020d00:	464b      	mov	r3, r9
 8020d02:	4640      	mov	r0, r8
 8020d04:	4649      	mov	r1, r9
 8020d06:	f7df fa99 	bl	800023c <__adddf3>
 8020d0a:	4602      	mov	r2, r0
 8020d0c:	460b      	mov	r3, r1
 8020d0e:	4620      	mov	r0, r4
 8020d10:	4629      	mov	r1, r5
 8020d12:	f7df fd73 	bl	80007fc <__aeabi_ddiv>
 8020d16:	4602      	mov	r2, r0
 8020d18:	460b      	mov	r3, r1
 8020d1a:	4650      	mov	r0, sl
 8020d1c:	4659      	mov	r1, fp
 8020d1e:	f7df fa8d 	bl	800023c <__adddf3>
 8020d22:	4632      	mov	r2, r6
 8020d24:	464b      	mov	r3, r9
 8020d26:	f7df fa89 	bl	800023c <__adddf3>
 8020d2a:	4602      	mov	r2, r0
 8020d2c:	460b      	mov	r3, r1
 8020d2e:	f7df fa85 	bl	800023c <__adddf3>
 8020d32:	e5fd      	b.n	8020930 <__ieee754_acos+0x40>
 8020d34:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8020d90 <__ieee754_acos+0x4a0>
 8020d38:	e5ee      	b.n	8020918 <__ieee754_acos+0x28>
 8020d3a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8020d98 <__ieee754_acos+0x4a8>
 8020d3e:	e5eb      	b.n	8020918 <__ieee754_acos+0x28>
 8020d40:	0dfdf709 	.word	0x0dfdf709
 8020d44:	3f023de1 	.word	0x3f023de1
 8020d48:	7501b288 	.word	0x7501b288
 8020d4c:	3f49efe0 	.word	0x3f49efe0
 8020d50:	b5688f3b 	.word	0xb5688f3b
 8020d54:	3fa48228 	.word	0x3fa48228
 8020d58:	0e884455 	.word	0x0e884455
 8020d5c:	3fc9c155 	.word	0x3fc9c155
 8020d60:	03eb6f7d 	.word	0x03eb6f7d
 8020d64:	3fd4d612 	.word	0x3fd4d612
 8020d68:	55555555 	.word	0x55555555
 8020d6c:	3fc55555 	.word	0x3fc55555
 8020d70:	b12e9282 	.word	0xb12e9282
 8020d74:	3fb3b8c5 	.word	0x3fb3b8c5
 8020d78:	1b8d0159 	.word	0x1b8d0159
 8020d7c:	3fe6066c 	.word	0x3fe6066c
 8020d80:	9c598ac8 	.word	0x9c598ac8
 8020d84:	40002ae5 	.word	0x40002ae5
 8020d88:	1c8a2d4b 	.word	0x1c8a2d4b
 8020d8c:	40033a27 	.word	0x40033a27
 8020d90:	54442d18 	.word	0x54442d18
 8020d94:	400921fb 	.word	0x400921fb
 8020d98:	54442d18 	.word	0x54442d18
 8020d9c:	3ff921fb 	.word	0x3ff921fb
 8020da0:	3ff00000 	.word	0x3ff00000
 8020da4:	3fe00000 	.word	0x3fe00000

08020da8 <scalbn>:
 8020da8:	b570      	push	{r4, r5, r6, lr}
 8020daa:	ec55 4b10 	vmov	r4, r5, d0
 8020dae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8020db2:	4606      	mov	r6, r0
 8020db4:	462b      	mov	r3, r5
 8020db6:	b991      	cbnz	r1, 8020dde <scalbn+0x36>
 8020db8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8020dbc:	4323      	orrs	r3, r4
 8020dbe:	d03d      	beq.n	8020e3c <scalbn+0x94>
 8020dc0:	4b35      	ldr	r3, [pc, #212]	@ (8020e98 <scalbn+0xf0>)
 8020dc2:	4620      	mov	r0, r4
 8020dc4:	4629      	mov	r1, r5
 8020dc6:	2200      	movs	r2, #0
 8020dc8:	f7df fbee 	bl	80005a8 <__aeabi_dmul>
 8020dcc:	4b33      	ldr	r3, [pc, #204]	@ (8020e9c <scalbn+0xf4>)
 8020dce:	429e      	cmp	r6, r3
 8020dd0:	4604      	mov	r4, r0
 8020dd2:	460d      	mov	r5, r1
 8020dd4:	da0f      	bge.n	8020df6 <scalbn+0x4e>
 8020dd6:	a328      	add	r3, pc, #160	@ (adr r3, 8020e78 <scalbn+0xd0>)
 8020dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ddc:	e01e      	b.n	8020e1c <scalbn+0x74>
 8020dde:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8020de2:	4291      	cmp	r1, r2
 8020de4:	d10b      	bne.n	8020dfe <scalbn+0x56>
 8020de6:	4622      	mov	r2, r4
 8020de8:	4620      	mov	r0, r4
 8020dea:	4629      	mov	r1, r5
 8020dec:	f7df fa26 	bl	800023c <__adddf3>
 8020df0:	4604      	mov	r4, r0
 8020df2:	460d      	mov	r5, r1
 8020df4:	e022      	b.n	8020e3c <scalbn+0x94>
 8020df6:	460b      	mov	r3, r1
 8020df8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8020dfc:	3936      	subs	r1, #54	@ 0x36
 8020dfe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8020e02:	4296      	cmp	r6, r2
 8020e04:	dd0d      	ble.n	8020e22 <scalbn+0x7a>
 8020e06:	2d00      	cmp	r5, #0
 8020e08:	a11d      	add	r1, pc, #116	@ (adr r1, 8020e80 <scalbn+0xd8>)
 8020e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e0e:	da02      	bge.n	8020e16 <scalbn+0x6e>
 8020e10:	a11d      	add	r1, pc, #116	@ (adr r1, 8020e88 <scalbn+0xe0>)
 8020e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e16:	a31a      	add	r3, pc, #104	@ (adr r3, 8020e80 <scalbn+0xd8>)
 8020e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e1c:	f7df fbc4 	bl	80005a8 <__aeabi_dmul>
 8020e20:	e7e6      	b.n	8020df0 <scalbn+0x48>
 8020e22:	1872      	adds	r2, r6, r1
 8020e24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8020e28:	428a      	cmp	r2, r1
 8020e2a:	dcec      	bgt.n	8020e06 <scalbn+0x5e>
 8020e2c:	2a00      	cmp	r2, #0
 8020e2e:	dd08      	ble.n	8020e42 <scalbn+0x9a>
 8020e30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8020e34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8020e38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020e3c:	ec45 4b10 	vmov	d0, r4, r5
 8020e40:	bd70      	pop	{r4, r5, r6, pc}
 8020e42:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8020e46:	da08      	bge.n	8020e5a <scalbn+0xb2>
 8020e48:	2d00      	cmp	r5, #0
 8020e4a:	a10b      	add	r1, pc, #44	@ (adr r1, 8020e78 <scalbn+0xd0>)
 8020e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e50:	dac1      	bge.n	8020dd6 <scalbn+0x2e>
 8020e52:	a10f      	add	r1, pc, #60	@ (adr r1, 8020e90 <scalbn+0xe8>)
 8020e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e58:	e7bd      	b.n	8020dd6 <scalbn+0x2e>
 8020e5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8020e5e:	3236      	adds	r2, #54	@ 0x36
 8020e60:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8020e64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020e68:	4620      	mov	r0, r4
 8020e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8020ea0 <scalbn+0xf8>)
 8020e6c:	4629      	mov	r1, r5
 8020e6e:	2200      	movs	r2, #0
 8020e70:	e7d4      	b.n	8020e1c <scalbn+0x74>
 8020e72:	bf00      	nop
 8020e74:	f3af 8000 	nop.w
 8020e78:	c2f8f359 	.word	0xc2f8f359
 8020e7c:	01a56e1f 	.word	0x01a56e1f
 8020e80:	8800759c 	.word	0x8800759c
 8020e84:	7e37e43c 	.word	0x7e37e43c
 8020e88:	8800759c 	.word	0x8800759c
 8020e8c:	fe37e43c 	.word	0xfe37e43c
 8020e90:	c2f8f359 	.word	0xc2f8f359
 8020e94:	81a56e1f 	.word	0x81a56e1f
 8020e98:	43500000 	.word	0x43500000
 8020e9c:	ffff3cb0 	.word	0xffff3cb0
 8020ea0:	3c900000 	.word	0x3c900000

08020ea4 <__ieee754_sqrt>:
 8020ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ea8:	4a68      	ldr	r2, [pc, #416]	@ (802104c <__ieee754_sqrt+0x1a8>)
 8020eaa:	ec55 4b10 	vmov	r4, r5, d0
 8020eae:	43aa      	bics	r2, r5
 8020eb0:	462b      	mov	r3, r5
 8020eb2:	4621      	mov	r1, r4
 8020eb4:	d110      	bne.n	8020ed8 <__ieee754_sqrt+0x34>
 8020eb6:	4622      	mov	r2, r4
 8020eb8:	4620      	mov	r0, r4
 8020eba:	4629      	mov	r1, r5
 8020ebc:	f7df fb74 	bl	80005a8 <__aeabi_dmul>
 8020ec0:	4602      	mov	r2, r0
 8020ec2:	460b      	mov	r3, r1
 8020ec4:	4620      	mov	r0, r4
 8020ec6:	4629      	mov	r1, r5
 8020ec8:	f7df f9b8 	bl	800023c <__adddf3>
 8020ecc:	4604      	mov	r4, r0
 8020ece:	460d      	mov	r5, r1
 8020ed0:	ec45 4b10 	vmov	d0, r4, r5
 8020ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ed8:	2d00      	cmp	r5, #0
 8020eda:	dc0e      	bgt.n	8020efa <__ieee754_sqrt+0x56>
 8020edc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8020ee0:	4322      	orrs	r2, r4
 8020ee2:	d0f5      	beq.n	8020ed0 <__ieee754_sqrt+0x2c>
 8020ee4:	b19d      	cbz	r5, 8020f0e <__ieee754_sqrt+0x6a>
 8020ee6:	4622      	mov	r2, r4
 8020ee8:	4620      	mov	r0, r4
 8020eea:	4629      	mov	r1, r5
 8020eec:	f7df f9a4 	bl	8000238 <__aeabi_dsub>
 8020ef0:	4602      	mov	r2, r0
 8020ef2:	460b      	mov	r3, r1
 8020ef4:	f7df fc82 	bl	80007fc <__aeabi_ddiv>
 8020ef8:	e7e8      	b.n	8020ecc <__ieee754_sqrt+0x28>
 8020efa:	152a      	asrs	r2, r5, #20
 8020efc:	d115      	bne.n	8020f2a <__ieee754_sqrt+0x86>
 8020efe:	2000      	movs	r0, #0
 8020f00:	e009      	b.n	8020f16 <__ieee754_sqrt+0x72>
 8020f02:	0acb      	lsrs	r3, r1, #11
 8020f04:	3a15      	subs	r2, #21
 8020f06:	0549      	lsls	r1, r1, #21
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d0fa      	beq.n	8020f02 <__ieee754_sqrt+0x5e>
 8020f0c:	e7f7      	b.n	8020efe <__ieee754_sqrt+0x5a>
 8020f0e:	462a      	mov	r2, r5
 8020f10:	e7fa      	b.n	8020f08 <__ieee754_sqrt+0x64>
 8020f12:	005b      	lsls	r3, r3, #1
 8020f14:	3001      	adds	r0, #1
 8020f16:	02dc      	lsls	r4, r3, #11
 8020f18:	d5fb      	bpl.n	8020f12 <__ieee754_sqrt+0x6e>
 8020f1a:	1e44      	subs	r4, r0, #1
 8020f1c:	1b12      	subs	r2, r2, r4
 8020f1e:	f1c0 0420 	rsb	r4, r0, #32
 8020f22:	fa21 f404 	lsr.w	r4, r1, r4
 8020f26:	4323      	orrs	r3, r4
 8020f28:	4081      	lsls	r1, r0
 8020f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020f2e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8020f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020f36:	07d2      	lsls	r2, r2, #31
 8020f38:	bf5c      	itt	pl
 8020f3a:	005b      	lslpl	r3, r3, #1
 8020f3c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8020f40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020f44:	bf58      	it	pl
 8020f46:	0049      	lslpl	r1, r1, #1
 8020f48:	2600      	movs	r6, #0
 8020f4a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8020f4e:	106d      	asrs	r5, r5, #1
 8020f50:	0049      	lsls	r1, r1, #1
 8020f52:	2016      	movs	r0, #22
 8020f54:	4632      	mov	r2, r6
 8020f56:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8020f5a:	1917      	adds	r7, r2, r4
 8020f5c:	429f      	cmp	r7, r3
 8020f5e:	bfde      	ittt	le
 8020f60:	193a      	addle	r2, r7, r4
 8020f62:	1bdb      	suble	r3, r3, r7
 8020f64:	1936      	addle	r6, r6, r4
 8020f66:	0fcf      	lsrs	r7, r1, #31
 8020f68:	3801      	subs	r0, #1
 8020f6a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8020f6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020f72:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8020f76:	d1f0      	bne.n	8020f5a <__ieee754_sqrt+0xb6>
 8020f78:	4604      	mov	r4, r0
 8020f7a:	2720      	movs	r7, #32
 8020f7c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8020f80:	429a      	cmp	r2, r3
 8020f82:	eb00 0e0c 	add.w	lr, r0, ip
 8020f86:	db02      	blt.n	8020f8e <__ieee754_sqrt+0xea>
 8020f88:	d113      	bne.n	8020fb2 <__ieee754_sqrt+0x10e>
 8020f8a:	458e      	cmp	lr, r1
 8020f8c:	d811      	bhi.n	8020fb2 <__ieee754_sqrt+0x10e>
 8020f8e:	f1be 0f00 	cmp.w	lr, #0
 8020f92:	eb0e 000c 	add.w	r0, lr, ip
 8020f96:	da42      	bge.n	802101e <__ieee754_sqrt+0x17a>
 8020f98:	2800      	cmp	r0, #0
 8020f9a:	db40      	blt.n	802101e <__ieee754_sqrt+0x17a>
 8020f9c:	f102 0801 	add.w	r8, r2, #1
 8020fa0:	1a9b      	subs	r3, r3, r2
 8020fa2:	458e      	cmp	lr, r1
 8020fa4:	bf88      	it	hi
 8020fa6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8020faa:	eba1 010e 	sub.w	r1, r1, lr
 8020fae:	4464      	add	r4, ip
 8020fb0:	4642      	mov	r2, r8
 8020fb2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8020fb6:	3f01      	subs	r7, #1
 8020fb8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8020fbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020fc0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8020fc4:	d1dc      	bne.n	8020f80 <__ieee754_sqrt+0xdc>
 8020fc6:	4319      	orrs	r1, r3
 8020fc8:	d01b      	beq.n	8021002 <__ieee754_sqrt+0x15e>
 8020fca:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8021050 <__ieee754_sqrt+0x1ac>
 8020fce:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8021054 <__ieee754_sqrt+0x1b0>
 8020fd2:	e9da 0100 	ldrd	r0, r1, [sl]
 8020fd6:	e9db 2300 	ldrd	r2, r3, [fp]
 8020fda:	f7df f92d 	bl	8000238 <__aeabi_dsub>
 8020fde:	e9da 8900 	ldrd	r8, r9, [sl]
 8020fe2:	4602      	mov	r2, r0
 8020fe4:	460b      	mov	r3, r1
 8020fe6:	4640      	mov	r0, r8
 8020fe8:	4649      	mov	r1, r9
 8020fea:	f7df fd59 	bl	8000aa0 <__aeabi_dcmple>
 8020fee:	b140      	cbz	r0, 8021002 <__ieee754_sqrt+0x15e>
 8020ff0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8020ff4:	e9da 0100 	ldrd	r0, r1, [sl]
 8020ff8:	e9db 2300 	ldrd	r2, r3, [fp]
 8020ffc:	d111      	bne.n	8021022 <__ieee754_sqrt+0x17e>
 8020ffe:	3601      	adds	r6, #1
 8021000:	463c      	mov	r4, r7
 8021002:	1072      	asrs	r2, r6, #1
 8021004:	0863      	lsrs	r3, r4, #1
 8021006:	07f1      	lsls	r1, r6, #31
 8021008:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 802100c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8021010:	bf48      	it	mi
 8021012:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8021016:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 802101a:	4618      	mov	r0, r3
 802101c:	e756      	b.n	8020ecc <__ieee754_sqrt+0x28>
 802101e:	4690      	mov	r8, r2
 8021020:	e7be      	b.n	8020fa0 <__ieee754_sqrt+0xfc>
 8021022:	f7df f90b 	bl	800023c <__adddf3>
 8021026:	e9da 8900 	ldrd	r8, r9, [sl]
 802102a:	4602      	mov	r2, r0
 802102c:	460b      	mov	r3, r1
 802102e:	4640      	mov	r0, r8
 8021030:	4649      	mov	r1, r9
 8021032:	f7df fd2b 	bl	8000a8c <__aeabi_dcmplt>
 8021036:	b120      	cbz	r0, 8021042 <__ieee754_sqrt+0x19e>
 8021038:	1ca0      	adds	r0, r4, #2
 802103a:	bf08      	it	eq
 802103c:	3601      	addeq	r6, #1
 802103e:	3402      	adds	r4, #2
 8021040:	e7df      	b.n	8021002 <__ieee754_sqrt+0x15e>
 8021042:	1c63      	adds	r3, r4, #1
 8021044:	f023 0401 	bic.w	r4, r3, #1
 8021048:	e7db      	b.n	8021002 <__ieee754_sqrt+0x15e>
 802104a:	bf00      	nop
 802104c:	7ff00000 	.word	0x7ff00000
 8021050:	20000318 	.word	0x20000318
 8021054:	20000310 	.word	0x20000310

08021058 <_init>:
 8021058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802105a:	bf00      	nop
 802105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802105e:	bc08      	pop	{r3}
 8021060:	469e      	mov	lr, r3
 8021062:	4770      	bx	lr

08021064 <_fini>:
 8021064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021066:	bf00      	nop
 8021068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802106a:	bc08      	pop	{r3}
 802106c:	469e      	mov	lr, r3
 802106e:	4770      	bx	lr
